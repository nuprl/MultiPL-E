language: cs
name: HumanEval_68_pluck
results:
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 2:\n    // Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n    // Example 3:\n    // Example 4:\n    // Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n    // so we will choose\
    \ the first zero, which has the smallest index.\n    // Constraints:\n    // *\
    \ 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n    public static List<long>\
    \ Pluck(List<long> arr) {\n        long smalest_value = arr.Min();\n        long\
    \ smalest_index = 0;\n        List<long> result = new List<long>();\n        foreach\
    \ (long i in arr) {\n            if (i % 2 == 0) {\n                if (smalest_value\
    \ < i) {\n                    smalest_value = i;\n                    smalest_index\
    \ = i;\n                }\n            }\n        }\n        if (smalest_index\
    \ != 0) {\n            result.Add(smalest_value);\n            result.Add(smalest_index);\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L,\
    \ (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n  \
    \  Debug.Assert(Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <af3bb156fff348af81b224c06ebe6c46>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <af3bb156fff348af81b224c06ebe6c46>:0 \n\nUnhandled Exception:\n\
    System.InvalidOperationException: Sequence contains no elements\n  at System.Linq.Enumerable.Min\
    \ (System.Collections.Generic.IEnumerable`1[T] source) [0x00022] in <e540098dd111461e919c5863f6975c29>:0\
    \ \n  at Problem.Pluck (System.Collections.Generic.List`1[T] arr) [0x00001] in\
    \ <af3bb156fff348af81b224c06ebe6c46>:0 \n  at Prob"
  stdout: ''
  timestamp: 1659976379
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 2:\n    // Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n    // Example 3:\n    // Example 4:\n    // Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n    // so we will choose\
    \ the first zero, which has the smallest index.\n    // Constraints:\n    // *\
    \ 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n    public static List<long>\
    \ Pluck(List<long> arr) {\n        List<long> result = new List<long>();\n   \
    \     long smalest_value = arr.Min();\n        long smalest_index = 0;\n     \
    \   long smalest_even_value = 0;\n        long smalest_even_index = 0;\n     \
    \   long smalest_even_index_count = 0;\n        long smalest_even_index_count_max\
    \ = 0;\n        long smalest_even_index_count_min = 0;\n        long smalest_even_index_count_sum\
    \ = 0;\n        long smalest_even_index_count_sum_max = 0;\n        long smalest_even_index_count_sum_min\
    \ = 0;\n        long smalest_even_index_count_sum_avg = 0;\n        long smalest_even_index_count_sum_avg_max\
    \ = 0;\n        long smalest_even_index_count_sum_avg_min = 0;\n        long smalest_even_index_count_sum_avg_avg\
    \ = 0;\n        long smalest_even_index_count_sum_avg_avg_max = 0;\n        long\
    \ smalest_even_index_count_sum_avg_avg_min = 0;\n        long smalest_even_index_count_sum_avg_avg_avg\
    \ = 0;\n        long smalest_even_index_count_sum_avg_avg_max = 0;\n        long\
    \ smalest_even_index_count_sum_avg_avg_min = 0;\n        long smalest_even_index_count_sum_avg_avg_avg\
    \ = 0;\n        long smalest_even_index_count_sum_avg_avg_max = 0;\n        long\
    \ smalest_even_index_count_sum_avg_avg_min = 0;\n        long smalest_even_index_count_sum_avg_avg_avg\
    \ = 0;\n        long smalest_even_index_count_sum_avg_avg_max = 0;\n        long\
    \ smalest_even_index_count_sum_avg_avg_min = 0;\n        long smalest_even_index_count_sum_avg_avg_avg\
    \ = 0;\n        long smalest_even_index_count_sum_avg_avg_max = 0;\n        long\
    \ smalest_even_index_count_sum_avg_avg_min = 0;\n        long smalest_even_index_count_sum_avg_avg_avg\
    \ = 0;\n        long smalest_even_index_count_sum_avg_avg_max = 0;\n        long\
    \ smalest_even_index_count_sum_avg_avg_min = 0;\n        long smalest_even_index_count_sum_avg_avg_avg\
    \ = 0;\n        long smalest_even_index_count_sum_avg_avg_max = 0;\n        long\
    \ smalest_even_index_count_sum_avg_avg_min = 0;\n        long smalest_even_index_count_sum_avg_avg_avg\
    \ = 0;\n        long smalest_even_index_count_sum_avg_avg_max = 0;\n        long\
    \ smalest_even_index_count_sum_avg_avg_min = 0;\n        long smalest_even_index_count_sum_avg_avg_avg\
    \ = 0;\n        long smalest_even_index_count_sum_avg_avg_max = 0;\n    }\n  \
    \  public static void Main(string[] args) {\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n\
    \    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n   \
    \ Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,\
    \ (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpu3d3mgws.cs(45,14): error CS0128: A local variable or function named ''smalest_even_index_count_sum_avg_avg_max''
    is already defined in this scope

    /tmp/tmpu3d3mgws.cs(46,14): error CS0128: A local variable or function named ''smalest_even_index_count_sum_avg_avg_min''
    is already defined in this scope

    /tmp/tmpu3d3mgws.cs(47,14): error CS0128: A local variable or function named ''smalest_even_index_count_sum_avg_avg_avg''
    is already defined in this scope

    /tmp/tmpu3d3mgws.cs(48,14): error CS0128: A local variable or function named ''smalest_even_index_count_sum_avg_avg_max''
    is already defined in this scope

    /tmp/tmpu3d3mgws.cs(49,14): error CS0128: A local variable or function named ''smalest_even_index_count_sum_avg_avg_min''
    is already defined in this scope

    /tmp/tmpu3d3mgws.cs(50,14): error CS0128: A local variable or function named ''smalest_even_index_count_sum_avg_avg_avg''
    is already defined in this scope

    /tmp/tmpu3d3mgws.cs(51,14): error CS0128: A local variable or function named ''smalest_even_index_count_sum_avg_avg_max''
    is already defined in this scope

    /tmp/tmpu3d3mgws.cs(52,14): error CS0128: A local variable or function named ''smalest_even_index_count_sum_avg_avg_min''
    is already defined in this scope

    /tmp/tmpu3d3mgws.cs(53,14): error CS0128: A local variable or function named ''smalest_even_index_count_sum_avg_avg_avg''
    is already defined in this scope

    /tmp/tmpu3d3mgws.cs(54,14): error CS0128: A local variable or function named ''smalest_even_index_count_sum_avg_avg_max''
    is already defined in this scope

    /tmp/tmpu3d3mgws.cs(55,14): error CS0128: A local variable or function named ''smalest_even_index_count_sum_avg_avg_min''
    is already defined in this scope

    /tmp/tmpu3d3mgws.cs(56,14): error CS0128: A local variable or function named ''smalest_even_index_count_sum_avg_avg_avg''
    is already defined in this scope

    /tmp/tmpu3d3mgws.cs(57,14): error CS0128: A local variable or function named ''smalest'
  timestamp: 1659976379
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 2:\n    // Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n    // Example 3:\n    // Example 4:\n    // Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n    // so we will choose\
    \ the first zero, which has the smallest index.\n    // Constraints:\n    // *\
    \ 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n    public static List<long>\
    \ Pluck(List<long> arr) {\n        List<long> result = new List<long>();\n   \
    \     long smallest_value = arr.Min();\n        long smallest_index = 0;\n   \
    \     long smallest_even_value = 0;\n        bool found = false;\n        for\
    \ (int i = 0; i < arr.Count; i++) {\n            if (arr[i] % 2 == 0) {\n    \
    \            if (smallest_value == 0) {\n                    smallest_even_value\
    \ = arr[i];\n                    smallest_index = i;\n                    found\
    \ = true;\n                } else if (smallest_even_value < arr[i]) {\n      \
    \              smallest_even_value = arr[i];\n                    smallest_index\
    \ = i;\n                    found = true;\n                }\n            }\n\
    \        }\n        if (found) {\n            result.Add(smallest_even_value);\n\
    \            result.Add(smallest_index);\n        }\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,\
    \ (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <fa50f48d2a9c4f1599fbf25fb1045a66>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <fa50f48d2a9c4f1599fbf25fb1045a66>:0 \n\nUnhandled Exception:\n\
    System.InvalidOperationException: Sequence contains no elements\n  at System.Linq.Enumerable.Min\
    \ (System.Collections.Generic.IEnumerable`1[T] source) [0x00022] in <e540098dd111461e919c5863f6975c29>:0\
    \ \n  at Problem.Pluck (System.Collections.Generic.List`1[T] arr) [0x00007] in\
    \ <fa50f48d2a9c4f1599fbf25fb1045a66>:0 \n  at Prob"
  stdout: ''
  timestamp: 1659976379
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 2:\n    // Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n    // Example 3:\n    // Example 4:\n    // Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n    // so we will choose\
    \ the first zero, which has the smallest index.\n    // Constraints:\n    // *\
    \ 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n    public static List<long>\
    \ Pluck(List<long> arr) {\n        List<long> result = new List<long>();\n   \
    \     long smallestEven = arr.Min();\n        int smallestIndex = arr.IndexOf(smallestEven);\n\
    \        if (smallestIndex == -1) {\n            return result;\n        }\n \
    \       long smallestEvenValue = arr[smallestIndex];\n        long smallestEvenIndex\
    \ = 0;\n        for (int i = 0; i < arr.Count; i++) {\n            if (arr[i]\
    \ % 2 == 0) {\n                if (arr[i] < smallestEvenValue) {\n           \
    \         smallestEvenValue = arr[i];\n                    smallestEvenIndex =\
    \ i;\n                }\n            }\n        }\n        result.Add(smallestEvenValue);\n\
    \        result.Add(smallestEvenIndex);\n        return result;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n\
    \    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n   \
    \ Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,\
    \ (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <dbc332b43e4147d3964b09dbd469369a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <dbc332b43e4147d3964b09dbd469369a>:0 \n\nUnhandled Exception:\n\
    System.InvalidOperationException: Sequence contains no elements\n  at System.Linq.Enumerable.Min\
    \ (System.Collections.Generic.IEnumerable`1[T] source) [0x00022] in <e540098dd111461e919c5863f6975c29>:0\
    \ \n  at Problem.Pluck (System.Collections.Generic.List`1[T] arr) [0x00007] in\
    \ <dbc332b43e4147d3964b09dbd469369a>:0 \n  at Prob"
  stdout: ''
  timestamp: 1659976379
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 2:\n    // Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n    // Example 3:\n    // Example 4:\n    // Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n    // so we will choose\
    \ the first zero, which has the smallest index.\n    // Constraints:\n    // *\
    \ 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n    public static List<long>\
    \ Pluck(List<long> arr) {\n        List<long> result = new List<long>();\n   \
    \     long smallest_value = arr.Min();\n        long smallest_index = 0;\n   \
    \     long smallest_even_value = 0;\n        for (int i = 0; i < arr.Count; i++)\
    \ {\n            if (arr[i] % 2 == 0) {\n                if (smallest_even_value\
    \ < arr[i]) {\n                    smallest_even_value = arr[i];\n           \
    \         smallest_index = i;\n                }\n            }\n        }\n \
    \       result.Add(smallest_even_value);\n        result.Add(smallest_index);\n\
    \        return result;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,\
    \ (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <f0dd2c889d6d440f9e3d3fb10b555c68>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <f0dd2c889d6d440f9e3d3fb10b555c68>:0 \n\nUnhandled Exception:\n\
    System.InvalidOperationException: Sequence contains no elements\n  at System.Linq.Enumerable.Min\
    \ (System.Collections.Generic.IEnumerable`1[T] source) [0x00022] in <e540098dd111461e919c5863f6975c29>:0\
    \ \n  at Problem.Pluck (System.Collections.Generic.List`1[T] arr) [0x00007] in\
    \ <f0dd2c889d6d440f9e3d3fb10b555c68>:0 \n  at Prob"
  stdout: ''
  timestamp: 1659976379
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 2:\n    // Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n    // Example 3:\n    // Example 4:\n    // Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n    // so we will choose\
    \ the first zero, which has the smallest index.\n    // Constraints:\n    // *\
    \ 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n    public static List<long>\
    \ Pluck(List<long> arr) {\n        List<long> result = new List<long>();\n   \
    \     long smallest_value = arr.Min();\n        long smallest_index = 0;\n   \
    \     bool found = false;\n        for (int i = 0; i < arr.Count; i++) {\n   \
    \         if (arr[i] % 2 == 0) {\n                found = true;\n            \
    \    if (arr[i] < smallest_value) {\n                    smallest_value = arr[i];\n\
    \                    smallest_index = i;\n                }\n            }\n \
    \       }\n        if (found) {\n            result.Add(smallest_value);\n   \
    \         result.Add(smallest_index);\n        }\n        return result;\n   \
    \ }\n    public static void Main(string[] args) {\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,\
    \ (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <0fcf7ca898d644f9ac5ddd3bbcdb5a37>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <0fcf7ca898d644f9ac5ddd3bbcdb5a37>:0 \n\nUnhandled Exception:\n\
    System.InvalidOperationException: Sequence contains no elements\n  at System.Linq.Enumerable.Min\
    \ (System.Collections.Generic.IEnumerable`1[T] source) [0x00022] in <e540098dd111461e919c5863f6975c29>:0\
    \ \n  at Problem.Pluck (System.Collections.Generic.List`1[T] arr) [0x00007] in\
    \ <0fcf7ca898d644f9ac5ddd3bbcdb5a37>:0 \n  at Prob"
  stdout: ''
  timestamp: 1659976379
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 2:\n    // Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n    // Example 3:\n    // Example 4:\n    // Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n    // so we will choose\
    \ the first zero, which has the smallest index.\n    // Constraints:\n    // *\
    \ 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n    public static List<long>\
    \ Pluck(List<long> arr) {\n        List<long> result = new List<long>();\n   \
    \     long smallest_value = 0;\n        long smallest_index = 0;\n        long\
    \ smallest_even_value = 0;\n        bool found = false;\n        foreach (var\
    \ item in arr) {\n            if (item % 2 == 0) {\n                smallest_even_value\
    \ = item;\n                found = true;\n            }\n            if (item\
    \ < smallest_value) {\n                smallest_value = item;\n              \
    \  smallest_index = arr.IndexOf(item);\n            }\n        }\n        if (found)\
    \ {\n            result.Add(smallest_even_value);\n            result.Add(smallest_index);\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L,\
    \ (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n  \
    \  Debug.Assert(Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9e28a931a978479a8ece50666a8b9d2d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9e28a931a978479a8ece50666a8b9d2d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976379
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 2:\n    // Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n    // Example 3:\n    // Example 4:\n    // Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n    // so we will choose\
    \ the first zero, which has the smallest index.\n    // Constraints:\n    // *\
    \ 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n    public static List<long>\
    \ Pluck(List<long> arr) {\n        List<long> result = new List<long>();\n   \
    \     long smallest_value = 0;\n        int smallest_index = 0;\n        foreach\
    \ (long n in arr) {\n            if (n % 2 == 0) {\n                if (smallest_value\
    \ < n) {\n                    smallest_value = n;\n                    smallest_index\
    \ = arr.IndexOf(n);\n                }\n            }\n        }\n        if (smallest_index\
    \ != 0) {\n            result.Add(smallest_value);\n            result.Add(smallest_index);\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L,\
    \ (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n  \
    \  Debug.Assert(Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <3cf8878916804d0495cd9c3a7f178f47>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <3cf8878916804d0495cd9c3a7f178f47>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976379
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 2:\n    // Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n    // Example 3:\n    // Example 4:\n    // Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n    // so we will choose\
    \ the first zero, which has the smallest index.\n    // Constraints:\n    // *\
    \ 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n    public static List<long>\
    \ Pluck(List<long> arr) {\n        List<long> result = new List<long>();\n   \
    \     long smallestEvenValue = arr.Min();\n        long smallestIndex = arr.IndexOf(smallestEvenValue);\n\
    \        if (smallestIndex == -1) {\n            return result;\n        }\n \
    \       bool isEven = true;\n        long smallestEvenValueIndex = -1;\n     \
    \   for (int i = 0; i < arr.Count; i++) {\n            if (arr[i] != smallestEvenValue)\
    \ {\n                isEven = false;\n                break;\n            }\n\
    \            if (i == smallestIndex) {\n                smallestEvenValueIndex\
    \ = i;\n            }\n        }\n        if (isEven) {\n            result.Add(smallestEvenValue);\n\
    \            result.Add(smallestEvenValueIndex);\n        } else {\n         \
    \   int smallestIndex = arr.IndexOf(smallestEvenValue);\n            if (smallestIndex\
    \ != -1) {\n                result.Add(smallestEvenValue);\n                result.Add(smallestIndex);\n\
    \            }\n        }\n        return result;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L,\
    \ (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n\
    \    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpkyiwtlu6.cs(48,17): error CS0136: A local or parameter named ''smallestIndex''
    cannot be declared in this scope because that name is used in an enclosing local
    scope to define a local or parameter

    '
  timestamp: 1659976379
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 2:\n    // Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n    // Example 3:\n    // Example 4:\n    // Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n    // so we will choose\
    \ the first zero, which has the smallest index.\n    // Constraints:\n    // *\
    \ 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n    public static List<long>\
    \ Pluck(List<long> arr) {\n        long smalest_value = arr.Min();\n        long\
    \ smalest_index = 0;\n        List<long> result = new List<long>();\n        foreach\
    \ (long n in arr) {\n            if (n % 2 == 0) {\n                if (smalest_value\
    \ == n) {\n                    smalest_index = arr.IndexOf(n);\n             \
    \   }\n                else if (smalest_value < n) {\n                    smalest_value\
    \ = n;\n                    smalest_index = arr.IndexOf(n);\n                }\n\
    \            }\n        }\n        if (smalest_index != arr.IndexOf(smalest_value))\
    \ {\n            smalest_value = arr.Min();\n            smalest_index = 0;\n\
    \        }\n        result.Add(smalest_value);\n        result.Add(smalest_index);\n\
    \        return result;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,\
    \ (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <534543b393764e338e6241b5ecbbd11c>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <534543b393764e338e6241b5ecbbd11c>:0 \n\nUnhandled Exception:\n\
    System.InvalidOperationException: Sequence contains no elements\n  at System.Linq.Enumerable.Min\
    \ (System.Collections.Generic.IEnumerable`1[T] source) [0x00022] in <e540098dd111461e919c5863f6975c29>:0\
    \ \n  at Problem.Pluck (System.Collections.Generic.List`1[T] arr) [0x00001] in\
    \ <534543b393764e338e6241b5ecbbd11c>:0 \n  at Prob"
  stdout: ''
  timestamp: 1659976379
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 2:\n    // Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n    // Example 3:\n    // Example 4:\n    // Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n    // so we will choose\
    \ the first zero, which has the smallest index.\n    // Constraints:\n    // *\
    \ 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n    public static List<long>\
    \ Pluck(List<long> arr) {\n        List<long> result = new List<long>();\n   \
    \     long smalest_value = 0;\n        long smalest_index = 0;\n        long smalest_even_value\
    \ = 0;\n        long smalest_even_index = 0;\n        long smalest_even_index_count\
    \ = 0;\n        long smalest_even_index_count_max = 0;\n        long smalest_even_index_count_min\
    \ = 0;\n        long smalest_even_index_count_sum = 0;\n        long smalest_even_index_count_sum2\
    \ = 0;\n        long smalest_even_index_count_sum3 = 0;\n        long smalest_even_index_count_sum4\
    \ = 0;\n        long smalest_even_index_count_sum5 = 0;\n        long smalest_even_index_count_sum6\
    \ = 0;\n        long smalest_even_index_count_sum7 = 0;\n        long smalest_even_index_count_sum8\
    \ = 0;\n        long smalest_even_index_count_sum9 = 0;\n        long smalest_even_index_count_sum10\
    \ = 0;\n        long smalest_even_index_count_sum11 = 0;\n        long smalest_even_index_count_sum12\
    \ = 0;\n        long smalest_even_index_count_sum13 = 0;\n        long smalest_even_index_count_sum14\
    \ = 0;\n        long smalest_even_index_count_sum15 = 0;\n        long smalest_even_index_count_sum16\
    \ = 0;\n        long smalest_even_index_count_sum17 = 0;\n        long smalest_even_index_count_sum18\
    \ = 0;\n        long smalest_even_index_count_sum19 = 0;\n        long smalest_even_index_count_sum20\
    \ = 0;\n        long smalest_even_index_count_sum21 = 0;\n        long smalest_even_index_count_sum22\
    \ = 0;\n        long smalest_even_index_count_sum23 = 0;\n        long smalest_even_index_count_sum24\
    \ = 0;\n        long smalest_even_index_count_sum25 = 0;\n        long smalest_even_index_count_sum26\
    \ = 0;\n        long smalest_even_index_count_sum27 = 0;\n        long smalest_even_index_count_sum28\
    \ = 0;\n        long smalest_even_index_count_sum29 = 0;\n        long smalest_even_index_count_sum30\
    \ = 0;\n        long smalest_even_index_count_sum31 = 0;\n        long smalest_even_index_count_sum32\
    \ = 0;\n        long smalest_even_index_count_sum33 = 0;\n        long smalest_even_index_count_sum34\
    \ = 0;\n        long smalest_even_index_count_sum35 = 0;\n        long smalest_even_index_count_sum36\
    \ = 0;\n        long smalest_even_index_count_sum37\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L,\
    \ (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n\
    \    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp0fibh1gg.cs(71,44): error CS1002: ; expected

    '
  timestamp: 1659976378
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 2:\n    // Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n    // Example 3:\n    // Example 4:\n    // Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n    // so we will choose\
    \ the first zero, which has the smallest index.\n    // Constraints:\n    // *\
    \ 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n    public static List<long>\
    \ Pluck(List<long> arr) {\n        long smalest_value = arr.Min();\n        List<long>\
    \ result = new List<long>();\n        long smallest_index = 0;\n        long smallest_even_value\
    \ = 0;\n        for (int i = 0; i < arr.Count; i++) {\n            if (arr[i]\
    \ % 2 == 0) {\n                if (arr[i] < smallest_even_value) {\n         \
    \           smallest_even_value = arr[i];\n                    smallest_index\
    \ = i;\n                }\n            }\n        }\n        if (smallest_even_value\
    \ != 0) {\n            result.Add(smallest_even_value);\n            result.Add(smallest_index);\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L,\
    \ (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n  \
    \  Debug.Assert(Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <92c4eb3d8c1d41c19fbbae4aa21b6578>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <92c4eb3d8c1d41c19fbbae4aa21b6578>:0 \n\nUnhandled Exception:\n\
    System.InvalidOperationException: Sequence contains no elements\n  at System.Linq.Enumerable.Min\
    \ (System.Collections.Generic.IEnumerable`1[T] source) [0x00022] in <e540098dd111461e919c5863f6975c29>:0\
    \ \n  at Problem.Pluck (System.Collections.Generic.List`1[T] arr) [0x00001] in\
    \ <92c4eb3d8c1d41c19fbbae4aa21b6578>:0 \n  at Prob"
  stdout: ''
  timestamp: 1659976379
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 2:\n    // Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n    // Example 3:\n    // Example 4:\n    // Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n    // so we will choose\
    \ the first zero, which has the smallest index.\n    // Constraints:\n    // *\
    \ 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n    public static List<long>\
    \ Pluck(List<long> arr) {\n        long smalest_value = arr.Min();\n        List<long>\
    \ result = new List<long>();\n        long smallest_index = 0;\n        bool found\
    \ = false;\n        foreach (long i in arr) {\n            if (i % 2 == 0) {\n\
    \                if (i == smalest_value) {\n                    found = true;\n\
    \                }\n                if (found == true) {\n                   \
    \ result.Add(i);\n                    smallest_index = i;\n                }\n\
    \            }\n        }\n        if (result.Count == 0) {\n            return\
    \ new List<long>();\n        }\n        if (result.Count == 1) {\n           \
    \ return new List<long> { result[0] };\n        }\n        List<long> smallest_values\
    \ = new List<long>();\n        foreach (long i in result) {\n            if (smallest_values.Count\
    \ < i) {\n                smallest_values.Add(i);\n            }\n        }\n\
    \        if (smallest_values.Count == 1) {\n            return new List<long>\
    \ { smallest_values[0] };\n        }\n        List<long> smallest_value_indexes\
    \ = new List<long>();\n        foreach (long i in smallest_values) {\n       \
    \     smallest_value_indexes.Add(smallest_values.IndexOf(i));\n        }\n   \
    \     smallest_value_indexes.Sort();\n        smallest_value_indexes.Reverse();\n\
    \        smallest_value_indexes.RemoveAt(0);\n        smallest_value_indexes.Sort();\n\
    \        smallest_value_indexes.Reverse();\n        smallest_value_indexes.RemoveAt(0);\n\
    \        smallest_value_indexes.Sort();\n        smallest_value_indexes.Reverse();\n\
    \        smallest_value_indexes.RemoveAt(0);\n        smallest_value_indexes.Sort();\n\
    \        smallest_value_indexes.Reverse();\n        smallest_value_indexes.RemoveAt(0);\n\
    \        smallest_value_indexes.Sort();\n        smallest_value_indexes.Reverse();\n\
    \        smallest_value_indexes.RemoveAt(0);\n        smallest_value_indexes.Sort();\n\
    \        smallest_value_indexes.Reverse();\n        smallest_value_indexes.RemoveAt(0);\n\
    \        smallest_value_indexes.Sort();\n        smallest_value_indexes.Reverse();\n\
    \        smallest_value_indexes.RemoveAt(0);\n        smallest_value_indexes.Sort();\n\
    \        smallest_value_indexes.Reverse();\n        smallest_value_indexes.RemoveAt(0);\n\
    \        smallest_value_indexes.Sort();\n        smallest_value_indexes.Reverse();\n\
    \        smallest_value_indexes.RemoveAt(0);\n        smallest_value_indexes.Sort();\n\
    \        smallest_value_indexes.Reverse();\n        smallest_value_indexes.RemoveAt(0);\n\
    \        smallest_value_indexes.Sort();\n        smallest_value_indexes.Reverse();\n\
    \        smallest_value\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,\
    \ (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp6u5er3vh.cs(93,23): error CS1002: ; expected

    '
  timestamp: 1659976378
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 2:\n    // Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n    // Example 3:\n    // Example 4:\n    // Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n    // so we will choose\
    \ the first zero, which has the smallest index.\n    // Constraints:\n    // *\
    \ 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n    public static List<long>\
    \ Pluck(List<long> arr) {\n        long smallest_value = 0;\n        long smallest_index\
    \ = 0;\n        long smallest_even_value = 0;\n        List<long> result = new\
    \ List<long>();\n        foreach (long n in arr) {\n            if (n % 2 == 0)\
    \ {\n                if (smallest_value == 0) {\n                    smallest_value\
    \ = n;\n                    smallest_index = arr.IndexOf(n);\n               \
    \     smallest_even_value = n % 2;\n                } else if (smallest_value\
    \ == n) {\n                    smallest_even_value = n % 2;\n                }\
    \ else if (smallest_even_value < n % 2) {\n                    smallest_value\
    \ = n;\n                    smallest_index = arr.IndexOf(n);\n               \
    \     smallest_even_value = n % 2;\n                }\n            }\n       \
    \ }\n        if (smallest_value == 0) {\n            return new List<long>();\n\
    \        }\n        result.Add(smallest_value);\n        result.Add(smallest_index);\n\
    \        return result;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,\
    \ (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <dc242b0eac2f4597815d2225f3e2c026>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <dc242b0eac2f4597815d2225f3e2c026>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976379
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 2:\n    // Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n    // Example 3:\n    // Example 4:\n    // Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n    // so we will choose\
    \ the first zero, which has the smallest index.\n    // Constraints:\n    // *\
    \ 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n    public static List<long>\
    \ Pluck(List<long> arr) {\n        List<long> result = new List<long>();\n   \
    \     long smallest_value = arr.Min();\n        long smallest_index = -1;\n  \
    \      long smallest_even_value = smallest_value;\n        bool found = false;\n\
    \        for (int i = 0; i < arr.Count; i++) {\n            if (arr[i] % 2 ==\
    \ 0) {\n                if (smallest_value == smallest_even_value) {\n       \
    \             smallest_index = i;\n                    found = true;\n       \
    \             break;\n                }\n                smallest_even_value =\
    \ arr[i];\n                smallest_index = i;\n            }\n        }\n   \
    \     if (found) {\n            result.Add(smallest_even_value);\n           \
    \ result.Add(smallest_index);\n        }\n        return result;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n\
    \    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n   \
    \ Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,\
    \ (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <1ecb0ad139824796ba49c9ae3b293e0e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <1ecb0ad139824796ba49c9ae3b293e0e>:0 \n\nUnhandled Exception:\n\
    System.InvalidOperationException: Sequence contains no elements\n  at System.Linq.Enumerable.Min\
    \ (System.Collections.Generic.IEnumerable`1[T] source) [0x00022] in <e540098dd111461e919c5863f6975c29>:0\
    \ \n  at Problem.Pluck (System.Collections.Generic.List`1[T] arr) [0x00007] in\
    \ <1ecb0ad139824796ba49c9ae3b293e0e>:0 \n  at Prob"
  stdout: ''
  timestamp: 1659976379
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 2:\n    // Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n    // Example 3:\n    // Example 4:\n    // Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n    // so we will choose\
    \ the first zero, which has the smallest index.\n    // Constraints:\n    // *\
    \ 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n    public static List<long>\
    \ Pluck(List<long> arr) {\n        long smalest_value = arr.Min();\n        long\
    \ smalest_index = 0;\n        List<long> result = new List<long>();\n        foreach\
    \ (long n in arr) {\n            if (n % 2 == 0) {\n                if (smalest_value\
    \ < n) {\n                    smalest_value = n;\n                    smalest_index\
    \ = arr.IndexOf(n);\n                }\n            }\n        }\n        if (smalest_index\
    \ != 0) {\n            result.Add(smalest_value);\n            result.Add(smalest_index);\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L,\
    \ (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n  \
    \  Debug.Assert(Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <6040d3fb6bc041419af64eb830d62e50>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <6040d3fb6bc041419af64eb830d62e50>:0 \n\nUnhandled Exception:\n\
    System.InvalidOperationException: Sequence contains no elements\n  at System.Linq.Enumerable.Min\
    \ (System.Collections.Generic.IEnumerable`1[T] source) [0x00022] in <e540098dd111461e919c5863f6975c29>:0\
    \ \n  at Problem.Pluck (System.Collections.Generic.List`1[T] arr) [0x00001] in\
    \ <6040d3fb6bc041419af64eb830d62e50>:0 \n  at Prob"
  stdout: ''
  timestamp: 1659976379
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 2:\n    // Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n    // Example 3:\n    // Example 4:\n    // Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n    // so we will choose\
    \ the first zero, which has the smallest index.\n    // Constraints:\n    // *\
    \ 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n    public static List<long>\
    \ Pluck(List<long> arr) {\n        List<long> result = new List<long>();\n   \
    \     long smallest_value = 0;\n        long smallest_index = 0;\n        long\
    \ smallest_even_value = 0;\n        long smallest_even_count = 0;\n        bool\
    \ found = false;\n        foreach (long n in arr) {\n            if (n % 2 ==\
    \ 0) {\n                smallest_even_value = n;\n                smallest_even_count\
    \ = 1;\n                found = true;\n            }\n            else {\n   \
    \             if (smallest_even_count > 1) {\n                    smallest_value\
    \ = smallest_even_value;\n                    smallest_index = smallest_even_count;\n\
    \                    found = true;\n                }\n                else {\n\
    \                    smallest_even_count++;\n                }\n            }\n\
    \        }\n        if (found) {\n            result.Add(smallest_value);\n  \
    \          result.Add(smallest_index);\n        }\n        return result;\n  \
    \  }\n    public static void Main(string[] args) {\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,\
    \ (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <e0a562592c374e2ea363d1455a091254>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <e0a562592c374e2ea363d1455a091254>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976379
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 2:\n    // Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n    // Example 3:\n    // Example 4:\n    // Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n    // so we will choose\
    \ the first zero, which has the smallest index.\n    // Constraints:\n    // *\
    \ 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n    public static List<long>\
    \ Pluck(List<long> arr) {\n        long smalest_value = 0;\n        long smalest_index\
    \ = 0;\n        List<long> result = new List<long>();\n        foreach (long n\
    \ in arr) {\n            if (n % 2 == 0) {\n                if (smalest_value\
    \ == 0) {\n                    smalest_value = n;\n                    smalest_index\
    \ = arr.IndexOf(n);\n                } else {\n                    if (n < smalest_value)\
    \ {\n                        smalest_value = n;\n                        smalest_index\
    \ = arr.IndexOf(n);\n                    }\n                }\n            }\n\
    \        }\n        if (smalest_value != 0) {\n            result.Add(smalest_value);\n\
    \            result.Add(smalest_index);\n        }\n        return result;\n \
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,\
    \ (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <29977b84e73441c78685c188fd096b5e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <29977b84e73441c78685c188fd096b5e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976379
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 2:\n    // Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n    // Example 3:\n    // Example 4:\n    // Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n    // so we will choose\
    \ the first zero, which has the smallest index.\n    // Constraints:\n    // *\
    \ 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n    public static List<long>\
    \ Pluck(List<long> arr) {\n        List<long> result = new List<long>();\n   \
    \     long smallestEvenValue = 0;\n        long smallestIndex = 0;\n        bool\
    \ hasSmallestEvenValue = false;\n        bool hasSmallestIndex = false;\n    \
    \    foreach (long node in arr) {\n            if (node % 2 == 0) {\n        \
    \        hasSmallestEvenValue = true;\n                smallestEvenValue = node;\n\
    \            }\n            if (node < smallestEvenValue) {\n                hasSmallestEvenValue\
    \ = false;\n                smallestEvenValue = node;\n            }\n       \
    \     if (node == smallestEvenValue) {\n                hasSmallestIndex = true;\n\
    \                smallestIndex = node;\n            }\n            if (node <\
    \ smallestIndex) {\n                hasSmallestIndex = false;\n              \
    \  smallestIndex = node;\n            }\n        }\n        if (hasSmallestEvenValue)\
    \ {\n            result.Add(smallestEvenValue);\n            result.Add(smallestIndex);\n\
    \        }\n        if (hasSmallestIndex) {\n            result.Add(smallestIndex);\n\
    \        }\n        if (result.Count == 0) {\n            return new List<long>();\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L,\
    \ (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n  \
    \  Debug.Assert(Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <b79cb8b5dbcf4f11af617df923a9977d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <b79cb8b5dbcf4f11af617df923a9977d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976379
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 2:\n    // Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n    // Example 3:\n    // Example 4:\n    // Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n    // so we will choose\
    \ the first zero, which has the smallest index.\n    // Constraints:\n    // *\
    \ 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n    public static List<long>\
    \ Pluck(List<long> arr) {\n        List<long> result = new List<long>();\n   \
    \     long smallest_value = 0;\n        long smallest_index = 0;\n        bool\
    \ found = false;\n        foreach (var node in arr) {\n            if (found ==\
    \ true) {\n                if (node % 2 == 0) {\n                    result.Add(smallest_value);\n\
    \                    result.Add(smallest_index);\n                    found =\
    \ false;\n                }\n                else {\n                    smallest_value\
    \ = node;\n                    smallest_index++;\n                }\n        \
    \    }\n            else {\n                if (node % 2 == 0) {\n           \
    \         smallest_value = node;\n                    smallest_index++;\n    \
    \                found = true;\n                }\n            }\n        }\n\
    \        if (found == true) {\n            result.Add(smallest_value);\n     \
    \       result.Add(smallest_index);\n        }\n        return result;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n\
    \    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n   \
    \ Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,\
    \ (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8ab5b64cac214f85945b540decb8bdec>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8ab5b64cac214f85945b540decb8bdec>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976379
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 2:\n    // Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n    // Example 3:\n    // Example 4:\n    // Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n    // so we will choose\
    \ the first zero, which has the smallest index.\n    // Constraints:\n    // *\
    \ 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n    public static List<long>\
    \ Pluck(List<long> arr) {\n        long smalest_value = arr.Min();\n        long\
    \ smalest_index = 0;\n        List<long> result = new List<long>();\n        foreach\
    \ (long i in arr) {\n            if (i % 2 == 0) {\n                if (smalest_value\
    \ == i) {\n                    smalest_index = i;\n                }\n       \
    \         else if (smalest_value < i) {\n                    smalest_value = i;\n\
    \                    smalest_index = i;\n                }\n            }\n  \
    \      }\n        if (smalest_index != 0) {\n            result.Add(smalest_value);\n\
    \            result.Add(smalest_index);\n        }\n        return result;\n \
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,\
    \ (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <423887145e184b41aa13e51dcd54c8ec>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <423887145e184b41aa13e51dcd54c8ec>:0 \n\nUnhandled Exception:\n\
    System.InvalidOperationException: Sequence contains no elements\n  at System.Linq.Enumerable.Min\
    \ (System.Collections.Generic.IEnumerable`1[T] source) [0x00022] in <e540098dd111461e919c5863f6975c29>:0\
    \ \n  at Problem.Pluck (System.Collections.Generic.List`1[T] arr) [0x00001] in\
    \ <423887145e184b41aa13e51dcd54c8ec>:0 \n  at Prob"
  stdout: ''
  timestamp: 1659976379
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 2:\n    // Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n    // Example 3:\n    // Example 4:\n    // Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n    // so we will choose\
    \ the first zero, which has the smallest index.\n    // Constraints:\n    // *\
    \ 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n    public static List<long>\
    \ Pluck(List<long> arr) {\n        List<long> result = new List<long>();\n   \
    \     long smalest_value = 0;\n        int smalest_index = 0;\n        long smalest_value_found\
    \ = 0;\n        int smalest_index_found = 0;\n        long smalest_value_found_index\
    \ = 0;\n        foreach (long n in arr) {\n            if (n % 2 == 0) {\n   \
    \             if (smalest_value == 0) {\n                    smalest_value = n;\n\
    \                    smalest_index = arr.IndexOf(n);\n                    smalest_value_found\
    \ = n;\n                    smalest_index_found = arr.IndexOf(n);\n          \
    \      }\n                else if (smalest_value == n) {\n                   \
    \ smalest_value_found = n;\n                    smalest_index_found = arr.IndexOf(n);\n\
    \                }\n                else {\n                    if (smalest_value_found\
    \ < n) {\n                        smalest_value_found = n;\n                 \
    \       smalest_index_found = arr.IndexOf(n);\n                    }\n       \
    \         }\n            }\n            else {\n                if (smalest_value_found\
    \ == 0) {\n                    smalest_value_found = n;\n                    smalest_index_found\
    \ = arr.IndexOf(n);\n                }\n                else if (smalest_value_found\
    \ < n) {\n                    smalest_value_found = n;\n                    smalest_index_found\
    \ = arr.IndexOf(n);\n                }\n            }\n        }\n        if (smalest_value_found\
    \ == 0) {\n            result.Add(0);\n        }\n        else if (smalest_value_found\
    \ == smalest_value) {\n            result.Add(smalest_value_found);\n        \
    \    result.Add(smalest_index_found);\n        }\n        else {\n           \
    \ result.Add(smalest_value_found);\n            result.Add(smalest_index_found);\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L,\
    \ (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n  \
    \  Debug.Assert(Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <38583389ed4048939c8d09f462fbfcd1>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <38583389ed4048939c8d09f462fbfcd1>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976379
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 2:\n    // Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n    // Example 3:\n    // Example 4:\n    // Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n    // so we will choose\
    \ the first zero, which has the smallest index.\n    // Constraints:\n    // *\
    \ 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n    public static List<long>\
    \ Pluck(List<long> arr) {\n        long smallest_value = arr.Min();\n        long\
    \ smallest_index = -1;\n        List<long> result = new List<long>();\n      \
    \  foreach (long n in arr) {\n            if (n % 2 == 0) {\n                if\
    \ (smallest_value == 0 || n < smallest_value) {\n                    smallest_value\
    \ = n;\n                    smallest_index = arr.IndexOf(n);\n               \
    \ }\n            }\n        }\n        if (smallest_index != -1) {\n         \
    \   result.Add(smallest_value);\n            result.Add(smallest_index);\n   \
    \     }\n        return result;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,\
    \ (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8875def2e2c944f5a32f03dbe27a9d90>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8875def2e2c944f5a32f03dbe27a9d90>:0 \n\nUnhandled Exception:\n\
    System.InvalidOperationException: Sequence contains no elements\n  at System.Linq.Enumerable.Min\
    \ (System.Collections.Generic.IEnumerable`1[T] source) [0x00022] in <e540098dd111461e919c5863f6975c29>:0\
    \ \n  at Problem.Pluck (System.Collections.Generic.List`1[T] arr) [0x00001] in\
    \ <8875def2e2c944f5a32f03dbe27a9d90>:0 \n  at Prob"
  stdout: ''
  timestamp: 1659976379
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 2:\n    // Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n    // Example 3:\n    // Example 4:\n    // Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n    // so we will choose\
    \ the first zero, which has the smallest index.\n    // Constraints:\n    // *\
    \ 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n    public static List<long>\
    \ Pluck(List<long> arr) {\n        List<long> result = new List<long>();\n   \
    \     long smallest_value = arr.Min();\n        long smallest_index = 0;\n   \
    \     bool found = false;\n        for (int i = 0; i < arr.Count; i++) {\n   \
    \         if (arr[i] == smallest_value) {\n                found = true;\n   \
    \             break;\n            }\n        }\n        if (found) {\n       \
    \     result.Add(smallest_value);\n            result.Add(smallest_index);\n \
    \           return result;\n        }\n        long smallest_even_value = arr.Min(x\
    \ => x % 2 == 0);\n        long smallest_even_index = 0;\n        found = false;\n\
    \        for (int i = 0; i < arr.Count; i++) {\n            if (arr[i] == smallest_even_value)\
    \ {\n                found = true;\n                break;\n            }\n  \
    \      }\n        if (found) {\n            result.Add(smallest_even_value);\n\
    \            result.Add(smallest_even_index);\n            return result;\n  \
    \      }\n        long smallest_odd_value = arr.Min(x => x % 2 != 0);\n      \
    \  long smallest_odd_index = 0;\n        found = false;\n        for (int i =\
    \ 0; i < arr.Count; i++) {\n            if (arr[i] == smallest_odd_value) {\n\
    \                found = true;\n                break;\n            }\n      \
    \  }\n        if (found) {\n            result.Add(smallest_odd_value);\n    \
    \        result.Add(smallest_odd_index);\n            return result;\n       \
    \ }\n        return result;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,\
    \ (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp0vnrxci3.cs(42,36): error CS0029: Cannot implicitly convert type ''bool''
    to ''long''

    /tmp/tmp0vnrxci3.cs(56,35): error CS0029: Cannot implicitly convert type ''bool''
    to ''long''

    '
  timestamp: 1659976379
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 2:\n    // Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n    // Example 3:\n    // Example 4:\n    // Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n    // so we will choose\
    \ the first zero, which has the smallest index.\n    // Constraints:\n    // *\
    \ 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n    public static List<long>\
    \ Pluck(List<long> arr) {\n        long smalest_value = arr.Min();\n        long\
    \ smalest_index = 0;\n        List<long> result = new List<long>();\n        foreach\
    \ (long n in arr) {\n            if (n % 2 == 0) {\n                if (smalest_value\
    \ < n) {\n                    smalest_value = n;\n                    smalest_index\
    \ = arr.IndexOf(n);\n                }\n            }\n        }\n        if (smalest_index\
    \ > 0) {\n            result.Add(smalest_value);\n            result.Add(smalest_index);\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L,\
    \ (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n  \
    \  Debug.Assert(Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <549d5fc217d540d29ed6089d76e118a0>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <549d5fc217d540d29ed6089d76e118a0>:0 \n\nUnhandled Exception:\n\
    System.InvalidOperationException: Sequence contains no elements\n  at System.Linq.Enumerable.Min\
    \ (System.Collections.Generic.IEnumerable`1[T] source) [0x00022] in <e540098dd111461e919c5863f6975c29>:0\
    \ \n  at Problem.Pluck (System.Collections.Generic.List`1[T] arr) [0x00001] in\
    \ <549d5fc217d540d29ed6089d76e118a0>:0 \n  at Prob"
  stdout: ''
  timestamp: 1659976380
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 2:\n    // Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n    // Example 3:\n    // Example 4:\n    // Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n    // so we will choose\
    \ the first zero, which has the smallest index.\n    // Constraints:\n    // *\
    \ 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n    public static List<long>\
    \ Pluck(List<long> arr) {\n        List<long> result = new List<long>();\n   \
    \     long smallest_even_value = arr.Min();\n        long smallest_index = arr.IndexOf(smallest_even_value);\n\
    \        long smallest_value = smallest_even_value;\n        long smallest_index_value\
    \ = smallest_index;\n        foreach (long i in arr) {\n            if (i % 2\
    \ == 0) {\n                if (smallest_value == smallest_even_value) {\n    \
    \                smallest_value = i;\n                    smallest_index_value\
    \ = arr.IndexOf(i);\n                }\n            }\n        }\n        result.Add(smallest_value);\n\
    \        result.Add(smallest_index_value);\n        return result;\n    }\n  \
    \  public static void Main(string[] args) {\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n\
    \    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n   \
    \ Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,\
    \ (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8166fbe2c3d64573959a8c1ef6154936>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8166fbe2c3d64573959a8c1ef6154936>:0 \n\nUnhandled Exception:\n\
    System.InvalidOperationException: Sequence contains no elements\n  at System.Linq.Enumerable.Min\
    \ (System.Collections.Generic.IEnumerable`1[T] source) [0x00022] in <e540098dd111461e919c5863f6975c29>:0\
    \ \n  at Problem.Pluck (System.Collections.Generic.List`1[T] arr) [0x00007] in\
    \ <8166fbe2c3d64573959a8c1ef6154936>:0 \n  at Prob"
  stdout: ''
  timestamp: 1659976380
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 2:\n    // Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n    // Example 3:\n    // Example 4:\n    // Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n    // so we will choose\
    \ the first zero, which has the smallest index.\n    // Constraints:\n    // *\
    \ 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n    public static List<long>\
    \ Pluck(List<long> arr) {\n        List<long> result = new List<long>();\n   \
    \     long smallestEvenValue = arr.Min();\n        long smallestIndex = 0;\n \
    \       bool isSmallestEvenValue = true;\n        foreach (long n in arr) {\n\
    \            if (n % 2 == 0) {\n                if (smallestEvenValue < n) {\n\
    \                    smallestEvenValue = n;\n                    smallestIndex\
    \ = arr.IndexOf(n);\n                    isSmallestEvenValue = true;\n       \
    \         }\n                else {\n                    isSmallestEvenValue =\
    \ false;\n                }\n            }\n            else {\n             \
    \   if (smallestEvenValue == n) {\n                    smallestIndex = arr.IndexOf(n);\n\
    \                }\n            }\n        }\n        if (isSmallestEvenValue)\
    \ {\n            result.Add(smallestEvenValue);\n            result.Add(smallestIndex);\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L,\
    \ (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n  \
    \  Debug.Assert(Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <ce36cc7689b5471cb01c2d7849800eff>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <ce36cc7689b5471cb01c2d7849800eff>:0 \n\nUnhandled Exception:\n\
    System.InvalidOperationException: Sequence contains no elements\n  at System.Linq.Enumerable.Min\
    \ (System.Collections.Generic.IEnumerable`1[T] source) [0x00022] in <e540098dd111461e919c5863f6975c29>:0\
    \ \n  at Problem.Pluck (System.Collections.Generic.List`1[T] arr) [0x00007] in\
    \ <ce36cc7689b5471cb01c2d7849800eff>:0 \n  at Prob"
  stdout: ''
  timestamp: 1659976380
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 2:\n    // Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n    // Example 3:\n    // Example 4:\n    // Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n    // so we will choose\
    \ the first zero, which has the smallest index.\n    // Constraints:\n    // *\
    \ 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n    public static List<long>\
    \ Pluck(List<long> arr) {\n        List<long> result = new List<long>();\n   \
    \     long smallest_value = arr.Min();\n        long smallest_index = 0;\n   \
    \     long smallest_even_value = 0;\n        foreach (long i in arr) {\n     \
    \       if (i % 2 == 0) {\n                if (smallest_even_value < i) {\n  \
    \                  smallest_even_value = i;\n                    smallest_index\
    \ = i;\n                }\n            }\n            if (i == smallest_value)\
    \ {\n                result.Add(smallest_value);\n                result.Add(smallest_index);\n\
    \            }\n        }\n        if (result.Count == 0) {\n            return\
    \ new List<long>();\n        }\n        if (result.Count > 1) {\n            int\
    \ smallest_index = result.Min();\n            int smallest_value = result[smallest_index];\n\
    \            int smallest_even_value = result[smallest_index / 2];\n         \
    \   int smallest_odd_value = result[smallest_index / 2 + 1];\n            int\
    \ smallest_odd_index = smallest_index / 2 + 1;\n            while (smallest_odd_value\
    \ < smallest_value) {\n                smallest_odd_value = result[smallest_odd_index];\n\
    \                smallest_odd_index = smallest_odd_index + 1;\n            }\n\
    \            while (smallest_odd_value < smallest_even_value) {\n            \
    \    smallest_odd_value = result[smallest_odd_index];\n                smallest_odd_index\
    \ = smallest_odd_index + 1;\n            }\n            while (smallest_odd_value\
    \ < smallest_odd_value) {\n                smallest_odd_value = result[smallest_odd_index];\n\
    \                smallest_odd_index = smallest_odd_index + 1;\n            }\n\
    \            while (smallest_odd_value < smallest_odd_value) {\n             \
    \   smallest_odd_value = result[smallest_odd_index];\n                smallest_odd_index\
    \ = smallest_odd_index + 1;\n            }\n            while (smallest_odd_value\
    \ < smallest_odd_value) {\n                smallest_odd_value = result[smallest_odd_index];\n\
    \                smallest_odd_index = smallest_odd_index + 1;\n            }\n\
    \            while (smallest_odd_value < smallest_odd_value) {\n             \
    \   smallest_odd_value = result[smallest_odd_index];\n                smallest_odd_index\
    \ = smallest_odd_index + 1;\n            }\n            while (smallest_odd_value\
    \ < smallest_odd_value) {\n                smallest_odd_value = result[smallest_odd_index];\n\
    \                smallest_odd_index = smallest_odd_index + 1;\n            }\n\
    \            while (smallest_odd_value < smallest_odd_value) {\n             \
    \   smallest_odd_value = result[smallest_odd_index];\n                smallest_odd_index\
    \ = smallest_odd_index + 1;\n            }\n            \n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L,\
    \ (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n\
    \    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmphmdwu9rq.cs(86,5): error CS0106: The modifier ''public'' is not valid
    for this item

    /tmp/tmphmdwu9rq.cs(97,2): error CS1513: } expected

    '
  timestamp: 1659976379
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 2:\n    // Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n    // Example 3:\n    // Example 4:\n    // Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n    // so we will choose\
    \ the first zero, which has the smallest index.\n    // Constraints:\n    // *\
    \ 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n    public static List<long>\
    \ Pluck(List<long> arr) {\n        long smalest_value = 0;\n        int smalest_index\
    \ = 0;\n        List<long> result = new List<long>();\n        foreach (long n\
    \ in arr) {\n            if (n % 2 == 0) {\n                if (smalest_value\
    \ == 0) {\n                    smalest_value = n;\n                    smalest_index\
    \ = arr.IndexOf(n);\n                } else {\n                    if (n < smalest_value)\
    \ {\n                        smalest_value = n;\n                        smalest_index\
    \ = arr.IndexOf(n);\n                    }\n                }\n            }\n\
    \        }\n        if (smalest_value == 0) {\n            return new List<long>();\n\
    \        }\n        result.Add(smalest_value);\n        result.Add(smalest_index);\n\
    \        return result;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,\
    \ (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <6bebc4e380d94f2aaaf617e03e99c17e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <6bebc4e380d94f2aaaf617e03e99c17e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976380
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 2:\n    // Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n    // Example 3:\n    // Example 4:\n    // Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n    // so we will choose\
    \ the first zero, which has the smallest index.\n    // Constraints:\n    // *\
    \ 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n    public static List<long>\
    \ Pluck(List<long> arr) {\n        List<long> result = new List<long>();\n   \
    \     long smalest_value = 0;\n        long smalest_index = 0;\n        bool has_even_value\
    \ = false;\n        long smallest_even_value = 0;\n        long smallest_even_index\
    \ = 0;\n        foreach (long n in arr) {\n            if (n % 2 == 0) {\n   \
    \             has_even_value = true;\n                smallest_even_value = n;\n\
    \                smallest_even_index = n;\n            }\n            else {\n\
    \                if (has_even_value) {\n                    if (smallest_even_value\
    \ < n) {\n                        smallest_even_value = n;\n                 \
    \       smallest_even_index = n;\n                    }\n                }\n \
    \               else {\n                    smalest_value = n;\n             \
    \       smalest_index = n;\n                }\n            }\n        }\n    \
    \    if (has_even_value) {\n            result.Add(smallest_even_value);\n   \
    \         result.Add(smallest_even_index);\n        }\n        else {\n      \
    \      result.Add(smalest_value);\n            result.Add(smalest_index);\n  \
    \      }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L,\
    \ (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n  \
    \  Debug.Assert(Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <b5f3865a689347d09e554a27cc823a9d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <b5f3865a689347d09e554a27cc823a9d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976380
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 2:\n    // Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n    // Example 3:\n    // Example 4:\n    // Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n    // so we will choose\
    \ the first zero, which has the smallest index.\n    // Constraints:\n    // *\
    \ 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n    public static List<long>\
    \ Pluck(List<long> arr) {\n        long smalest_value = arr.Min();\n        long\
    \ smalest_index = 0;\n        List<long> result = new List<long>();\n        foreach\
    \ (long n in arr) {\n            if (n % 2 == 0) {\n                if (smalest_value\
    \ == n) {\n                    smalest_index = arr.IndexOf(n);\n             \
    \   }\n                else {\n                    if (smalest_value < n) {\n\
    \                        smalest_value = n;\n                        smalest_index\
    \ = arr.IndexOf(n);\n                    }\n                }\n            }\n\
    \        }\n        if (smalest_index > 0) {\n            result.Add(smalest_value);\n\
    \            result.Add(smalest_index);\n        }\n        return result;\n \
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,\
    \ (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <4a0ce225ea1144bbaf26d2d5e690f5d1>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <4a0ce225ea1144bbaf26d2d5e690f5d1>:0 \n\nUnhandled Exception:\n\
    System.InvalidOperationException: Sequence contains no elements\n  at System.Linq.Enumerable.Min\
    \ (System.Collections.Generic.IEnumerable`1[T] source) [0x00022] in <e540098dd111461e919c5863f6975c29>:0\
    \ \n  at Problem.Pluck (System.Collections.Generic.List`1[T] arr) [0x00001] in\
    \ <4a0ce225ea1144bbaf26d2d5e690f5d1>:0 \n  at Prob"
  stdout: ''
  timestamp: 1659976380
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 2:\n    // Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n    // Example 3:\n    // Example 4:\n    // Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n    // so we will choose\
    \ the first zero, which has the smallest index.\n    // Constraints:\n    // *\
    \ 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n    public static List<long>\
    \ Pluck(List<long> arr) {\n        long smalest_value = arr.Min();\n        long\
    \ smalest_index = 0;\n        List<long> result = new List<long>();\n        foreach\
    \ (long n in arr) {\n            if (n % 2 == 0) {\n                if (smalest_value\
    \ < n) {\n                    smalest_value = n;\n                    smalest_index\
    \ = arr.IndexOf(n);\n                }\n            }\n        }\n        if (smalest_value\
    \ == 0) {\n            return new List<long>();\n        }\n        result.Add(smalest_value);\n\
    \        result.Add(smalest_index);\n        return result;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n\
    \    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n   \
    \ Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,\
    \ (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c89e4448d0a641fd91f34010e9b30020>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c89e4448d0a641fd91f34010e9b30020>:0 \n\nUnhandled Exception:\n\
    System.InvalidOperationException: Sequence contains no elements\n  at System.Linq.Enumerable.Min\
    \ (System.Collections.Generic.IEnumerable`1[T] source) [0x00022] in <e540098dd111461e919c5863f6975c29>:0\
    \ \n  at Problem.Pluck (System.Collections.Generic.List`1[T] arr) [0x00001] in\
    \ <c89e4448d0a641fd91f34010e9b30020>:0 \n  at Prob"
  stdout: ''
  timestamp: 1659976380
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 2:\n    // Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n    // Example 3:\n    // Example 4:\n    // Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n    // so we will choose\
    \ the first zero, which has the smallest index.\n    // Constraints:\n    // *\
    \ 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n    public static List<long>\
    \ Pluck(List<long> arr) {\n        List<long> result = new List<long>();\n   \
    \     long smallest_value = arr.Min();\n        long smallest_index = 0;\n   \
    \     long smallest_even_value = 0;\n        bool found = false;\n        for\
    \ (int i = 0; i < arr.Count; i++) {\n            if (arr[i] % 2 == 0) {\n    \
    \            found = true;\n                if (arr[i] < smallest_value) {\n \
    \                   smallest_value = arr[i];\n                    smallest_index\
    \ = i;\n                    smallest_even_value = arr[i] / 2;\n              \
    \  }\n            }\n        }\n        if (found) {\n            result.Add(smallest_value);\n\
    \            result.Add(smallest_index);\n        } else {\n            result.Add(smallest_even_value);\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L,\
    \ (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n  \
    \  Debug.Assert(Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <75b70477fcb84743b06767a93ebb0f1e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <75b70477fcb84743b06767a93ebb0f1e>:0 \n\nUnhandled Exception:\n\
    System.InvalidOperationException: Sequence contains no elements\n  at System.Linq.Enumerable.Min\
    \ (System.Collections.Generic.IEnumerable`1[T] source) [0x00022] in <e540098dd111461e919c5863f6975c29>:0\
    \ \n  at Problem.Pluck (System.Collections.Generic.List`1[T] arr) [0x00007] in\
    \ <75b70477fcb84743b06767a93ebb0f1e>:0 \n  at Prob"
  stdout: ''
  timestamp: 1659976380
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 2:\n    // Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n    // Example 3:\n    // Example 4:\n    // Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n    // so we will choose\
    \ the first zero, which has the smallest index.\n    // Constraints:\n    // *\
    \ 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n    public static List<long>\
    \ Pluck(List<long> arr) {\n        long smallest_value = arr.Min();\n        long\
    \ smallest_index = -1;\n        List<long> result = new List<long>();\n      \
    \  foreach (long node in arr) {\n            if (node % 2 == 0) {\n          \
    \      if (smallest_value == 0 || node < smallest_value) {\n                 \
    \   smallest_value = node;\n                    smallest_index = arr.IndexOf(node);\n\
    \                }\n            }\n        }\n        if (smallest_index != -1)\
    \ {\n            result.Add(smallest_value);\n            result.Add(smallest_index);\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L,\
    \ (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n  \
    \  Debug.Assert(Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <cc4dbea14c1c4bc29ab1b97c6064df14>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <cc4dbea14c1c4bc29ab1b97c6064df14>:0 \n\nUnhandled Exception:\n\
    System.InvalidOperationException: Sequence contains no elements\n  at System.Linq.Enumerable.Min\
    \ (System.Collections.Generic.IEnumerable`1[T] source) [0x00022] in <e540098dd111461e919c5863f6975c29>:0\
    \ \n  at Problem.Pluck (System.Collections.Generic.List`1[T] arr) [0x00001] in\
    \ <cc4dbea14c1c4bc29ab1b97c6064df14>:0 \n  at Prob"
  stdout: ''
  timestamp: 1659976380
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 2:\n    // Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n    // Example 3:\n    // Example 4:\n    // Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n    // so we will choose\
    \ the first zero, which has the smallest index.\n    // Constraints:\n    // *\
    \ 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n    public static List<long>\
    \ Pluck(List<long> arr) {\n        List<long> result = new List<long>();\n   \
    \     long smallestEvenValue = arr.Min();\n        long smallestIndex = 0;\n \
    \       bool foundSmallestEvenValue = false;\n        for (int i = 0; i < arr.Count;\
    \ i++) {\n            if (arr[i] % 2 == 0) {\n                if (smallestEvenValue\
    \ < arr[i]) {\n                    smallestEvenValue = arr[i];\n             \
    \       smallestIndex = i;\n                    foundSmallestEvenValue = true;\n\
    \                }\n            }\n        }\n        if (foundSmallestEvenValue)\
    \ {\n            result.Add(smallestEvenValue);\n            result.Add(smallestIndex);\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L,\
    \ (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n  \
    \  Debug.Assert(Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <72286c844e304533a254c0b7601c892b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <72286c844e304533a254c0b7601c892b>:0 \n\nUnhandled Exception:\n\
    System.InvalidOperationException: Sequence contains no elements\n  at System.Linq.Enumerable.Min\
    \ (System.Collections.Generic.IEnumerable`1[T] source) [0x00022] in <e540098dd111461e919c5863f6975c29>:0\
    \ \n  at Problem.Pluck (System.Collections.Generic.List`1[T] arr) [0x00007] in\
    \ <72286c844e304533a254c0b7601c892b>:0 \n  at Prob"
  stdout: ''
  timestamp: 1659976380
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 2:\n    // Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n    // Example 3:\n    // Example 4:\n    // Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n    // so we will choose\
    \ the first zero, which has the smallest index.\n    // Constraints:\n    // *\
    \ 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n    public static List<long>\
    \ Pluck(List<long> arr) {\n        List<long> result = new List<long>();\n   \
    \     long smalest_value = 0;\n        int smalest_index = 0;\n        bool has_even_value\
    \ = false;\n        foreach (long n in arr) {\n            if (n % 2 == 0) {\n\
    \                has_even_value = true;\n            }\n            if (has_even_value)\
    \ {\n                smalest_value = n;\n                smalest_index = arr.IndexOf(n);\n\
    \            }\n        }\n        if (smalest_index == -1) {\n            return\
    \ new List<long>();\n        }\n        if (has_even_value) {\n            result.Add(smalest_value);\n\
    \            result.Add(smalest_index);\n        } else {\n            result.Add(smalest_index);\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L,\
    \ (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n  \
    \  Debug.Assert(Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8a52ee777dc144768c7ee12a0910a50b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8a52ee777dc144768c7ee12a0910a50b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976380
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 2:\n    // Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n    // Example 3:\n    // Example 4:\n    // Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n    // so we will choose\
    \ the first zero, which has the smallest index.\n    // Constraints:\n    // *\
    \ 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n    public static List<long>\
    \ Pluck(List<long> arr) {\n        long smalest_value = arr.Min();\n        long\
    \ smalest_index = 0;\n        List<long> result = new List<long>();\n        foreach\
    \ (long n in arr) {\n            if (n % 2 == 0) {\n                if (smalest_value\
    \ < n) {\n                    smalest_value = n;\n                    smalest_index\
    \ = arr.IndexOf(n);\n                }\n            }\n        }\n        if (smalest_index\
    \ > 0) {\n            result.Add(smalest_value);\n            result.Add(smalest_index);\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L,\
    \ (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n  \
    \  Debug.Assert(Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <549d5fc217d540d29ed6089d76e118a0>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <549d5fc217d540d29ed6089d76e118a0>:0 \n\nUnhandled Exception:\n\
    System.InvalidOperationException: Sequence contains no elements\n  at System.Linq.Enumerable.Min\
    \ (System.Collections.Generic.IEnumerable`1[T] source) [0x00022] in <e540098dd111461e919c5863f6975c29>:0\
    \ \n  at Problem.Pluck (System.Collections.Generic.List`1[T] arr) [0x00001] in\
    \ <549d5fc217d540d29ed6089d76e118a0>:0 \n  at Prob"
  stdout: ''
  timestamp: 1659976380
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 2:\n    // Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n    // Example 3:\n    // Example 4:\n    // Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n    // so we will choose\
    \ the first zero, which has the smallest index.\n    // Constraints:\n    // *\
    \ 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n    public static List<long>\
    \ Pluck(List<long> arr) {\n        long smalest_value = arr.Min();\n        long\
    \ smalest_index = 0;\n        List<long> result = new List<long>();\n        foreach\
    \ (long n in arr) {\n            if (n % 2 == 0) {\n                if (smalest_value\
    \ < n) {\n                    smalest_value = n;\n                    smalest_index\
    \ = arr.IndexOf(n);\n                }\n            }\n        }\n        if (smalest_index\
    \ != arr.IndexOf(smalest_value)) {\n            result.Add(smalest_value);\n \
    \           result.Add(smalest_index);\n        }\n        return result;\n  \
    \  }\n    public static void Main(string[] args) {\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,\
    \ (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <ddddabaaa4cf44c0a9655e8e33fe3139>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <ddddabaaa4cf44c0a9655e8e33fe3139>:0 \n\nUnhandled Exception:\n\
    System.InvalidOperationException: Sequence contains no elements\n  at System.Linq.Enumerable.Min\
    \ (System.Collections.Generic.IEnumerable`1[T] source) [0x00022] in <e540098dd111461e919c5863f6975c29>:0\
    \ \n  at Problem.Pluck (System.Collections.Generic.List`1[T] arr) [0x00001] in\
    \ <ddddabaaa4cf44c0a9655e8e33fe3139>:0 \n  at Prob"
  stdout: ''
  timestamp: 1659976380
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 2:\n    // Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n    // Example 3:\n    // Example 4:\n    // Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n    // so we will choose\
    \ the first zero, which has the smallest index.\n    // Constraints:\n    // *\
    \ 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n    public static List<long>\
    \ Pluck(List<long> arr) {\n        List<long> result = new List<long>();\n   \
    \     long smalest_value = arr.Min();\n        int smalest_index = 0;\n      \
    \  foreach (long n in arr) {\n            if (n % 2 == 0) {\n                if\
    \ (smalest_value < n) {\n                    smalest_value = n;\n            \
    \        smalest_index = arr.IndexOf(n);\n                }\n            }\n \
    \       }\n        if (smalest_index > 0) {\n            result.Add(smalest_value);\n\
    \            result.Add(smalest_index);\n        }\n        return result;\n \
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,\
    \ (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <828d62aab51544269baa78a68af351b5>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <828d62aab51544269baa78a68af351b5>:0 \n\nUnhandled Exception:\n\
    System.InvalidOperationException: Sequence contains no elements\n  at System.Linq.Enumerable.Min\
    \ (System.Collections.Generic.IEnumerable`1[T] source) [0x00022] in <e540098dd111461e919c5863f6975c29>:0\
    \ \n  at Problem.Pluck (System.Collections.Generic.List`1[T] arr) [0x00007] in\
    \ <828d62aab51544269baa78a68af351b5>:0 \n  at Prob"
  stdout: ''
  timestamp: 1659976380
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 2:\n    // Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n    // Example 3:\n    // Example 4:\n    // Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n    // so we will choose\
    \ the first zero, which has the smallest index.\n    // Constraints:\n    // *\
    \ 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n    public static List<long>\
    \ Pluck(List<long> arr) {\n        List<long> result = new List<long>();\n   \
    \     long smallestEvenValue = arr.Min();\n        long smallestIndex = 0;\n \
    \       bool isSmallestEvenValueFound = false;\n        bool isSmallestIndexFound\
    \ = false;\n        long smallestEvenValueIndex = 0;\n        long smallestIndexIndex\
    \ = 0;\n        foreach (long n in arr) {\n            if (n % 2 == 0) {\n   \
    \             if (smallestEvenValue < n) {\n                    smallestEvenValue\
    \ = n;\n                    smallestEvenValueIndex = n;\n                    isSmallestEvenValueFound\
    \ = true;\n                }\n                if (smallestIndex < n) {\n     \
    \               smallestIndex = n;\n                    smallestIndexIndex = n;\n\
    \                    isSmallestIndexFound = true;\n                }\n       \
    \     } else {\n                if (smallestEvenValue < n) {\n               \
    \     smallestEvenValue = n;\n                    smallestEvenValueIndex = n;\n\
    \                    isSmallestEvenValueFound = true;\n                }\n   \
    \             if (smallestIndex < n) {\n                    smallestIndex = n;\n\
    \                    smallestIndexIndex = n;\n                    isSmallestIndexFound\
    \ = true;\n                }\n            }\n        }\n        if (isSmallestEvenValueFound)\
    \ {\n            result.Add(smallestEvenValue);\n            result.Add(smallestEvenValueIndex);\n\
    \        }\n        if (isSmallestIndexFound) {\n            result.Add(smallestIndex);\n\
    \            result.Add(smallestIndexIndex);\n        }\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,\
    \ (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8d3e4b89df4b43ca8b6b953093088124>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8d3e4b89df4b43ca8b6b953093088124>:0 \n\nUnhandled Exception:\n\
    System.InvalidOperationException: Sequence contains no elements\n  at System.Linq.Enumerable.Min\
    \ (System.Collections.Generic.IEnumerable`1[T] source) [0x00022] in <e540098dd111461e919c5863f6975c29>:0\
    \ \n  at Problem.Pluck (System.Collections.Generic.List`1[T] arr) [0x00007] in\
    \ <8d3e4b89df4b43ca8b6b953093088124>:0 \n  at Prob"
  stdout: ''
  timestamp: 1659976381
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 2:\n    // Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n    // Example 3:\n    // Example 4:\n    // Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n    // so we will choose\
    \ the first zero, which has the smallest index.\n    // Constraints:\n    // *\
    \ 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n    public static List<long>\
    \ Pluck(List<long> arr) {\n        List<long> result = new List<long>();\n   \
    \     long smallest_value = arr.Min();\n        long smallest_index = 0;\n   \
    \     long smallest_even_value = 0;\n        bool found = false;\n        for\
    \ (int i = 0; i < arr.Count; i++) {\n            if (arr[i] % 2 == 0) {\n    \
    \            if (smallest_value == 0) {\n                    smallest_value =\
    \ arr[i];\n                    smallest_index = i;\n                    smallest_even_value\
    \ = arr[i] / 2;\n                    found = true;\n                } else if\
    \ (smallest_value == arr[i]) {\n                    smallest_index = i;\n    \
    \                smallest_even_value = arr[i] / 2;\n                    found\
    \ = true;\n                } else if (smallest_value == arr[i] && smallest_index\
    \ != i) {\n                    smallest_index = i;\n                    smallest_even_value\
    \ = arr[i] / 2;\n                    found = true;\n                }\n      \
    \      }\n        }\n        if (smallest_value == 0) {\n            return new\
    \ List<long>();\n        }\n        if (found) {\n            result.Add(smallest_value);\n\
    \            result.Add(smallest_index);\n            result.Add(smallest_even_value);\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L,\
    \ (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n  \
    \  Debug.Assert(Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <f363ae789bd0495a8a4c68e8b82507a9>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <f363ae789bd0495a8a4c68e8b82507a9>:0 \n\nUnhandled Exception:\n\
    System.InvalidOperationException: Sequence contains no elements\n  at System.Linq.Enumerable.Min\
    \ (System.Collections.Generic.IEnumerable`1[T] source) [0x00022] in <e540098dd111461e919c5863f6975c29>:0\
    \ \n  at Problem.Pluck (System.Collections.Generic.List`1[T] arr) [0x00007] in\
    \ <f363ae789bd0495a8a4c68e8b82507a9>:0 \n  at Prob"
  stdout: ''
  timestamp: 1659976380
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 2:\n    // Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n    // Example 3:\n    // Example 4:\n    // Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n    // so we will choose\
    \ the first zero, which has the smallest index.\n    // Constraints:\n    // *\
    \ 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n    public static List<long>\
    \ Pluck(List<long> arr) {\n        List<long> result = new List<long>();\n   \
    \     long smallestEvenValue = 0;\n        long smallestIndex = 0;\n        long\
    \ currentIndex = 0;\n        foreach (long i in arr) {\n            if (i % 2\
    \ == 0) {\n                if (smallestEvenValue < i) {\n                    smallestEvenValue\
    \ = i;\n                    smallestIndex = currentIndex;\n                }\n\
    \                currentIndex++;\n            }\n        }\n        if (smallestEvenValue\
    \ == 0) {\n            return result;\n        }\n        result.Add(smallestEvenValue);\n\
    \        result.Add(smallestIndex);\n        return result;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n\
    \    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n   \
    \ Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,\
    \ (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <b5281d85295e40989e0e781842f706d4>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <b5281d85295e40989e0e781842f706d4>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976380
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 2:\n    // Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n    // Example 3:\n    // Example 4:\n    // Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n    // so we will choose\
    \ the first zero, which has the smallest index.\n    // Constraints:\n    // *\
    \ 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n    public static List<long>\
    \ Pluck(List<long> arr) {\n        List<long> result = new List<long>();\n   \
    \     long smallestEvenValue = arr.Min();\n        long smallestIndex = arr.IndexOf(smallestEvenValue);\n\
    \        bool hasEvenValues = arr.Any(x => x % 2 == 0);\n        if (smallestEvenValue\
    \ == 0) {\n            if (hasEvenValues) {\n                result.Add(smallestEvenValue);\n\
    \                result.Add(smallestIndex);\n            }\n            return\
    \ result;\n        }\n        List<long> evenValues = new List<long>();\n    \
    \    List<long> evenIndexes = new List<long>();\n        foreach (long value in\
    \ arr) {\n            if (value % 2 == 0) {\n                evenValues.Add(value);\n\
    \                evenIndexes.Add(arr.IndexOf(value));\n            }\n       \
    \ }\n        if (evenValues.Count > 0) {\n            smallestEvenValue = evenValues.Min();\n\
    \            smallestIndex = evenIndexes.Min();\n        }\n        if (smallestEvenValue\
    \ == 0) {\n            if (hasEvenValues) {\n                result.Add(smallestEvenValue);\n\
    \                result.Add(smallestIndex);\n            }\n            return\
    \ result;\n        }\n        List<long> evenValues2 = new List<long>();\n   \
    \     List<long> evenIndexes2 = new List<long>();\n        foreach (long value\
    \ in arr) {\n            if (value % 2 == 0) {\n                evenValues2.Add(value);\n\
    \                evenIndexes2.Add(arr.IndexOf(value));\n            }\n      \
    \  }\n        if (evenValues2.Count > 0) {\n            smallestEvenValue = evenValues2.Min();\n\
    \            smallestIndex = evenIndexes2.Min();\n        }\n        if (smallestEvenValue\
    \ == 0) {\n            if (hasEvenValues) {\n                result.Add(smallestEvenValue);\n\
    \                result.Add(smallestIndex);\n            }\n            return\
    \ result;\n        }\n        List<long> evenValues3 = new List<long>();\n   \
    \     List<long> evenIndexes3 = new List<long>();\n        foreach (long value\
    \ in arr) {\n            if (value % 2 == 0) {\n                evenValues3.Add(value);\n\
    \                evenIndexes3.Add(arr.IndexOf(value));\n            }\n      \
    \  }\n        if (evenValues3.Count > 0) {\n            smallestEvenValue = evenValues3.Min();\n\
    \            smallestIndex = evenIndexes3.Min();\n        }\n        if (smallestEvenValue\
    \ == 0) {\n            if (hasEvenValues) {\n                result.Add(smallestEvenValue);\n\
    \                result.Add(smallestIndex);\n            }\n            return\
    \ result;\n        }\n        List<long> evenValues4 = new List<long>();\n   \
    \     List<long> evenIndexes4 = new List<long>();\n        foreach (long value\
    \ in arr) {\n            if (value % 2 == 0) {\n                evenValues4.Add(value);\n\
    \                even\n    }\n    public static void Main(string[] args) {\n \
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,\
    \ (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp43xz4bci.cs(100,21): error CS1002: ; expected

    /tmp/tmp43xz4bci.cs(102,5): error CS0106: The modifier ''public'' is not valid
    for this item

    /tmp/tmp43xz4bci.cs(113,2): error CS1513: } expected

    '
  timestamp: 1659976380
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 2:\n    // Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n    // Example 3:\n    // Example 4:\n    // Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n    // so we will choose\
    \ the first zero, which has the smallest index.\n    // Constraints:\n    // *\
    \ 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n    public static List<long>\
    \ Pluck(List<long> arr) {\n        long smalest_value = arr.Min();\n        long\
    \ smalest_index = 0;\n        List<long> result = new List<long>();\n        foreach\
    \ (long n in arr) {\n            if (n % 2 == 0) {\n                if (smalest_value\
    \ == n) {\n                    smalest_index = arr.IndexOf(n);\n             \
    \   }\n                else {\n                    smalest_value = n;\n      \
    \              smalest_index = arr.IndexOf(n);\n                }\n          \
    \  }\n        }\n        if (smalest_index != arr.IndexOf(smalest_value)) {\n\
    \            result.Add(smalest_value);\n            result.Add(smalest_index);\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L,\
    \ (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n  \
    \  Debug.Assert(Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <560d44fed7554865b276f29446b2a48f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <560d44fed7554865b276f29446b2a48f>:0 \n\nUnhandled Exception:\n\
    System.InvalidOperationException: Sequence contains no elements\n  at System.Linq.Enumerable.Min\
    \ (System.Collections.Generic.IEnumerable`1[T] source) [0x00022] in <e540098dd111461e919c5863f6975c29>:0\
    \ \n  at Problem.Pluck (System.Collections.Generic.List`1[T] arr) [0x00001] in\
    \ <560d44fed7554865b276f29446b2a48f>:0 \n  at Prob"
  stdout: ''
  timestamp: 1659976380
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 2:\n    // Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n    // Example 3:\n    // Example 4:\n    // Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n    // so we will choose\
    \ the first zero, which has the smallest index.\n    // Constraints:\n    // *\
    \ 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n    public static List<long>\
    \ Pluck(List<long> arr) {\n        long smalest_value = 0;\n        long smalest_index\
    \ = 0;\n        List<long> result = new List<long>();\n        foreach (long n\
    \ in arr) {\n            if (n % 2 == 0) {\n                if (smalest_value\
    \ < n) {\n                    smalest_value = n;\n                    smalest_index\
    \ = arr.IndexOf(n);\n                }\n            }\n        }\n        if (smalest_value\
    \ == 0) {\n            return new List<long>();\n        }\n        result.Add(smalest_value);\n\
    \        result.Add(smalest_index);\n        return result;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n\
    \    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n   \
    \ Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,\
    \ (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <af70e36f783846a28a2957b1d7970fbb>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <af70e36f783846a28a2957b1d7970fbb>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976380
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 2:\n    // Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n    // Example 3:\n    // Example 4:\n    // Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n    // so we will choose\
    \ the first zero, which has the smallest index.\n    // Constraints:\n    // *\
    \ 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n    public static List<long>\
    \ Pluck(List<long> arr) {\n        List<long> result = new List<long>();\n   \
    \     long smallestEvenValue = arr.Min();\n        long smallestIndex = arr.IndexOf(smallestEvenValue);\n\
    \        if (smallestEvenValue % 2 == 0) {\n            result.Add(smallestEvenValue);\n\
    \            result.Add(smallestIndex);\n            return result;\n        }\n\
    \        long smallestEvenValue2 = arr.Min(x => x % 2 == 0);\n        long smallestIndex2\
    \ = arr.IndexOf(smallestEvenValue2);\n        if (smallestEvenValue2 % 2 == 0)\
    \ {\n            result.Add(smallestEvenValue2);\n            result.Add(smallestIndex2);\n\
    \            return result;\n        }\n        long smallestEvenValue3 = arr.Min(x\
    \ => x % 2 == 0);\n        long smallestIndex3 = arr.IndexOf(smallestEvenValue3);\n\
    \        if (smallestEvenValue3 % 2 == 0) {\n            result.Add(smallestEvenValue3);\n\
    \            result.Add(smallestIndex3);\n            return result;\n       \
    \ }\n        long smallestEvenValue4 = arr.Min(x => x % 2 == 0);\n        long\
    \ smallestIndex4 = arr.IndexOf(smallestEvenValue4);\n        if (smallestEvenValue4\
    \ % 2 == 0) {\n            result.Add(smallestEvenValue4);\n            result.Add(smallestIndex4);\n\
    \            return result;\n        }\n        long smallestEvenValue5 = arr.Min(x\
    \ => x % 2 == 0);\n        long smallestIndex5 = arr.IndexOf(smallestEvenValue5);\n\
    \        if (smallestEvenValue5 % 2 == 0) {\n            result.Add(smallestEvenValue5);\n\
    \            result.Add(smallestIndex5);\n            return result;\n       \
    \ }\n        long smallestEvenValue6 = arr.Min(x => x % 2 == 0);\n        long\
    \ smallestIndex6 = arr.IndexOf(smallestEvenValue6);\n        if (smallestEvenValue6\
    \ % 2 == 0) {\n            result.Add(smallestEvenValue6);\n            result.Add(smallestIndex6);\n\
    \            return result;\n        }\n        long smallestEvenValue7 = arr.Min(x\
    \ => x % 2 == 0);\n        long smallestIndex7 = arr.IndexOf(smallestEvenValue7);\n\
    \        if (smallestEvenValue7 % 2 == 0) {\n            result.Add(smallestEvenValue7);\n\
    \            result.Add(smallestIndex7);\n            return result;\n       \
    \ }\n        long smallestEvenValue8 = arr.Min(x => x % 2 == 0);\n        long\
    \ smallestIndex8 = arr.IndexOf(smallestEvenValue8);\n        if (smallestEvenValue8\
    \ % 2 == 0) {\n            result.Add(smallestEvenValue8);\n            result.Add(smallestIndex8);\n\
    \            return result;\n        }\n        long smallestEvenValue9 = arr.Min(x\
    \ => x % 2 == 0);\n        \n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,\
    \ (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpzi6zcrkf.cs(35,35): error CS0029: Cannot implicitly convert type ''bool''
    to ''long''

    /tmp/tmpzi6zcrkf.cs(42,35): error CS0029: Cannot implicitly convert type ''bool''
    to ''long''

    /tmp/tmpzi6zcrkf.cs(49,35): error CS0029: Cannot implicitly convert type ''bool''
    to ''long''

    /tmp/tmpzi6zcrkf.cs(56,35): error CS0029: Cannot implicitly convert type ''bool''
    to ''long''

    /tmp/tmpzi6zcrkf.cs(63,35): error CS0029: Cannot implicitly convert type ''bool''
    to ''long''

    /tmp/tmpzi6zcrkf.cs(70,35): error CS0029: Cannot implicitly convert type ''bool''
    to ''long''

    /tmp/tmpzi6zcrkf.cs(77,35): error CS0029: Cannot implicitly convert type ''bool''
    to ''long''

    /tmp/tmpzi6zcrkf.cs(84,35): error CS0029: Cannot implicitly convert type ''bool''
    to ''long''

    /tmp/tmpzi6zcrkf.cs(26,30): error CS0161: ''Problem.Pluck(List<long>)'': not all
    code paths return a value

    '
  timestamp: 1659976380
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 2:\n    // Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n    // Example 3:\n    // Example 4:\n    // Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n    // so we will choose\
    \ the first zero, which has the smallest index.\n    // Constraints:\n    // *\
    \ 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n    public static List<long>\
    \ Pluck(List<long> arr) {\n        long smalest_value = arr.Min();\n        long\
    \ smalest_index = 0;\n        List<long> result = new List<long>();\n        foreach\
    \ (long n in arr) {\n            if (n % 2 == 0) {\n                if (smalest_value\
    \ < n) {\n                    smalest_value = n;\n                    smalest_index\
    \ = arr.IndexOf(n);\n                }\n            }\n        }\n        if (smalest_index\
    \ != arr.IndexOf(smalest_value)) {\n            smalest_index = arr.IndexOf(smalest_value);\n\
    \        }\n        result.Add(smalest_value);\n        result.Add(smalest_index);\n\
    \        return result;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,\
    \ (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d8158a5f199448a39b3c5f0d5be128a6>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d8158a5f199448a39b3c5f0d5be128a6>:0 \n\nUnhandled Exception:\n\
    System.InvalidOperationException: Sequence contains no elements\n  at System.Linq.Enumerable.Min\
    \ (System.Collections.Generic.IEnumerable`1[T] source) [0x00022] in <e540098dd111461e919c5863f6975c29>:0\
    \ \n  at Problem.Pluck (System.Collections.Generic.List`1[T] arr) [0x00001] in\
    \ <d8158a5f199448a39b3c5f0d5be128a6>:0 \n  at Prob"
  stdout: ''
  timestamp: 1659976380
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 2:\n    // Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n    // Example 3:\n    // Example 4:\n    // Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n    // so we will choose\
    \ the first zero, which has the smallest index.\n    // Constraints:\n    // *\
    \ 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n    public static List<long>\
    \ Pluck(List<long> arr) {\n        long smalest_value = 0;\n        long smalest_index\
    \ = 0;\n        List<long> result = new List<long>();\n        foreach (long n\
    \ in arr) {\n            if (n % 2 == 0) {\n                if (smalest_value\
    \ == 0) {\n                    smalest_value = n;\n                    smalest_index\
    \ = arr.IndexOf(n);\n                } else {\n                    if (n < smalest_value)\
    \ {\n                        smalest_value = n;\n                        smalest_index\
    \ = arr.IndexOf(n);\n                    }\n                }\n            }\n\
    \        }\n        if (smalest_value == 0) {\n            return new List<long>();\n\
    \        }\n        result.Add(smalest_value);\n        result.Add(smalest_index);\n\
    \        return result;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,\
    \ (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d1367dd304254604b71dfdae11aa3033>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d1367dd304254604b71dfdae11aa3033>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976381
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 2:\n    // Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n    // Example 3:\n    // Example 4:\n    // Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n    // so we will choose\
    \ the first zero, which has the smallest index.\n    // Constraints:\n    // *\
    \ 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n    public static List<long>\
    \ Pluck(List<long> arr) {\n        List<long> result = new List<long>();\n   \
    \     long smallest_value = arr.Min();\n        long smallest_index = -1;\n  \
    \      bool found = false;\n        foreach (long n in arr) {\n            if\
    \ (n % 2 == 0) {\n                if (smallest_value < n) {\n                \
    \    smallest_value = n;\n                    smallest_index = arr.IndexOf(n);\n\
    \                    found = true;\n                }\n            }\n       \
    \ }\n        if (found) {\n            result.Add(smallest_value);\n         \
    \   result.Add(smallest_index);\n        }\n        return result;\n    }\n  \
    \  public static void Main(string[] args) {\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n\
    \    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n   \
    \ Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,\
    \ (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <1ccedd5cab984e9e84dd221c3e6d16df>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <1ccedd5cab984e9e84dd221c3e6d16df>:0 \n\nUnhandled Exception:\n\
    System.InvalidOperationException: Sequence contains no elements\n  at System.Linq.Enumerable.Min\
    \ (System.Collections.Generic.IEnumerable`1[T] source) [0x00022] in <e540098dd111461e919c5863f6975c29>:0\
    \ \n  at Problem.Pluck (System.Collections.Generic.List`1[T] arr) [0x00007] in\
    \ <1ccedd5cab984e9e84dd221c3e6d16df>:0 \n  at Prob"
  stdout: ''
  timestamp: 1659976380
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 2:\n    // Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n    // Example 3:\n    // Example 4:\n    // Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n    // so we will choose\
    \ the first zero, which has the smallest index.\n    // Constraints:\n    // *\
    \ 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n    public static List<long>\
    \ Pluck(List<long> arr) {\n        List<long> result = new List<long>();\n   \
    \     long smallestEven = arr.Min();\n        long smallestIndex = arr.IndexOf(smallestEven);\n\
    \        if (smallestIndex == -1) {\n            return result;\n        }\n \
    \       long smallestValue = arr[smallestIndex];\n        long smallestEvenValue\
    \ = arr[smallestIndex];\n        foreach (long i in arr) {\n            if (i\
    \ % 2 == 0) {\n                if (smallestEvenValue > i) {\n                \
    \    smallestEvenValue = i;\n                    smallestIndex = arr.IndexOf(i);\n\
    \                }\n            }\n        }\n        result.Add(smallestEvenValue);\n\
    \        result.Add(smallestIndex);\n        return result;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n\
    \    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n   \
    \ Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,\
    \ (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpadypeczo.cs(33,34): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmpadypeczo.cs(34,38): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    '
  timestamp: 1659976380
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 2:\n    // Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n    // Example 3:\n    // Example 4:\n    // Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n    // so we will choose\
    \ the first zero, which has the smallest index.\n    // Constraints:\n    // *\
    \ 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n    public static List<long>\
    \ Pluck(List<long> arr) {\n        long smalest_value = arr.Min();\n        long\
    \ smalest_index = 0;\n        List<long> result = new List<long>();\n        foreach\
    \ (var item in arr) {\n            if (item % 2 == 0) {\n                if (item\
    \ < smalest_value) {\n                    smalest_value = item;\n            \
    \        smalest_index = arr.IndexOf(item);\n                }\n            }\n\
    \        }\n        if (smalest_index > 0) {\n            result.Add(smalest_value);\n\
    \            result.Add(smalest_index);\n        }\n        return result;\n \
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,\
    \ (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <870e47883b6848978c953e2285110330>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <870e47883b6848978c953e2285110330>:0 \n\nUnhandled Exception:\n\
    System.InvalidOperationException: Sequence contains no elements\n  at System.Linq.Enumerable.Min\
    \ (System.Collections.Generic.IEnumerable`1[T] source) [0x00022] in <e540098dd111461e919c5863f6975c29>:0\
    \ \n  at Problem.Pluck (System.Collections.Generic.List`1[T] arr) [0x00001] in\
    \ <870e47883b6848978c953e2285110330>:0 \n  at Prob"
  stdout: ''
  timestamp: 1659976381
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 2:\n    // Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n    // Example 3:\n    // Example 4:\n    // Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n    // so we will choose\
    \ the first zero, which has the smallest index.\n    // Constraints:\n    // *\
    \ 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n    public static List<long>\
    \ Pluck(List<long> arr) {\n        long smalest_value = 0;\n        long smalest_index\
    \ = 0;\n        List<long> result = new List<long>();\n        foreach (var node\
    \ in arr) {\n            if (node % 2 == 0) {\n                if (smalest_value\
    \ == 0) {\n                    smalest_value = node;\n                    smalest_index\
    \ = arr.IndexOf(node);\n                } else {\n                    long temp_val\
    \ = node;\n                    if (temp_val < smalest_value) {\n             \
    \           smalest_value = temp_val;\n                        smalest_index =\
    \ arr.IndexOf(temp_val);\n                    }\n                }\n         \
    \   }\n        }\n        if (smalest_value == 0) {\n            return new List<long>();\n\
    \        }\n        result.Add(smalest_value);\n        result.Add(smalest_index);\n\
    \        return result;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,\
    \ (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <595c0dbf6ac8422292ac03b84f0861a9>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <595c0dbf6ac8422292ac03b84f0861a9>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976381
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 2:\n    // Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n    // Example 3:\n    // Example 4:\n    // Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n    // so we will choose\
    \ the first zero, which has the smallest index.\n    // Constraints:\n    // *\
    \ 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n    public static List<long>\
    \ Pluck(List<long> arr) {\n        List<long> result = new List<long>();\n   \
    \     if (arr.Count == 0) {\n            return result;\n        }\n        long\
    \ smallestEvenValue = arr.Min();\n        long smallestIndex = 0;\n        bool\
    \ isSmallestEvenValue = true;\n        for (int i = 0; i < arr.Count; i++) {\n\
    \            if (arr[i] < smallestEvenValue) {\n                isSmallestEvenValue\
    \ = false;\n                smallestEvenValue = arr[i];\n                smallestIndex\
    \ = i;\n            }\n        }\n        if (isSmallestEvenValue) {\n       \
    \     result.Add(smallestEvenValue);\n            result.Add(smallestIndex);\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L,\
    \ (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n  \
    \  Debug.Assert(Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <b4940a9a54e541558a95acb828298970>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <b4940a9a54e541558a95acb828298970>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976381
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 2:\n    // Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n    // Example 3:\n    // Example 4:\n    // Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n    // so we will choose\
    \ the first zero, which has the smallest index.\n    // Constraints:\n    // *\
    \ 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n    public static List<long>\
    \ Pluck(List<long> arr) {\n        List<long> result = new List<long>();\n   \
    \     long smallestEvenValue = arr.Min();\n        long smallestIndex = arr.IndexOf(smallestEvenValue);\n\
    \        long smallestValue = smallestEvenValue;\n        long smallestIndexValue\
    \ = smallestIndex;\n        bool isSmallestEvenValueFound = false;\n        bool\
    \ isSmallestIndexFound = false;\n        bool isSmallestValueFound = false;\n\
    \        bool isSmallestIndexValueFound = false;\n        bool isSmallestEvenValueValueFound\
    \ = false;\n        bool isSmallestIndexValueValueFound = false;\n        bool\
    \ isSmallestEvenValueIndexFound = false;\n        bool isSmallestIndexValueIndexFound\
    \ = false;\n        bool isSmallestEvenValueValueIndexFound = false;\n       \
    \ bool isSmallestIndexValueValueIndexFound = false;\n        bool isSmallestEvenValueIndexFound\
    \ = false;\n        bool isSmallestIndexValueIndexFound = false;\n        bool\
    \ isSmallestEvenValueValueIndexFound = false;\n        bool isSmallestIndexValueValueIndexFound\
    \ = false;\n        bool isSmallestEvenValueIndexFound = false;\n        bool\
    \ isSmallestIndexValueIndexFound = false;\n        bool isSmallestEvenValueValueIndexFound\
    \ = false;\n        bool isSmallestIndexValueValueIndexFound = false;\n      \
    \  bool isSmallestEvenValueIndexFound = false;\n        bool isSmallestIndexValueIndexFound\
    \ = false;\n        bool isSmallestEvenValueValueIndexFound = false;\n       \
    \ bool isSmallestIndexValueValueIndexFound = false;\n        bool isSmallestEvenValueIndexFound\
    \ = false;\n        bool isSmallestIndexValueIndexFound = false;\n        bool\
    \ isSmallestEvenValueValueIndexFound = false;\n        bool isSmallestIndexValueValueIndexFound\
    \ = false;\n        bool isSmallestEvenValueIndexFound = false;\n        bool\
    \ isSmallestIndexValueIndexFound = false;\n        bool isSmallestEvenValueValueIndexFound\
    \ = false;\n        bool isSmallestIndexValueValueIndexFound = false;\n      \
    \  bool isSmallestEvenValueIndexFound = false;\n        bool isSmallestIndexValueIndexFound\
    \ = false;\n        bool isSmallestEvenValueValueIndexFound = false;\n       \
    \ bool isSmallestIndexValueValueIndexFound = false;\n        bool isSmallestEvenValueIndexFound\
    \ = false;\n        bool isSmallestIndexValueIndexFound = false;\n        bool\
    \ isSmallestEvenValueValueIndexFound = false;\n        bool isSmallest\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n\
    \    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n   \
    \ Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,\
    \ (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp5hcj4rzh.cs(69,24): error CS1002: ; expected

    '
  timestamp: 1659976380
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 2:\n    // Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n    // Example 3:\n    // Example 4:\n    // Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n    // so we will choose\
    \ the first zero, which has the smallest index.\n    // Constraints:\n    // *\
    \ 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n    public static List<long>\
    \ Pluck(List<long> arr) {\n        long smalest_value = arr.Min();\n        List<long>\
    \ result = new List<long>();\n        long smallest_index = arr.FindIndex(x =>\
    \ x == smalest_value);\n        if (smallest_index == -1)\n            return\
    \ result;\n        long smallest_value = arr[smallest_index];\n        long smallest_even_value\
    \ = smallest_value % 2 == 0 ? smallest_value : smallest_value - 1;\n        bool\
    \ found = false;\n        for (int i = 0; i < arr.Count; i++) {\n            if\
    \ (arr[i] == smallest_even_value) {\n                found = true;\n         \
    \       result.Add(smallest_value);\n                result.Add(smallest_index);\n\
    \                break;\n            }\n        }\n        if (!found)\n     \
    \       return result;\n        return result;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L,\
    \ (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n\
    \    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpguzdufyu.cs(32,35): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    '
  timestamp: 1659976381
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 2:\n    // Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n    // Example 3:\n    // Example 4:\n    // Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n    // so we will choose\
    \ the first zero, which has the smallest index.\n    // Constraints:\n    // *\
    \ 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n    public static List<long>\
    \ Pluck(List<long> arr) {\n        List<long> result = new List<long>();\n   \
    \     long smallest_value = 0;\n        long smallest_index = 0;\n        bool\
    \ found = false;\n        foreach (long n in arr) {\n            if (n % 2 ==\
    \ 0) {\n                found = true;\n                if (smallest_value == 0)\
    \ {\n                    smallest_value = n;\n                    smallest_index\
    \ = arr.IndexOf(n);\n                }\n                else if (smallest_value\
    \ < n) {\n                    smallest_value = n;\n                    smallest_index\
    \ = arr.IndexOf(n);\n                }\n            }\n        }\n        if (found)\
    \ {\n            result.Add(smallest_value);\n            result.Add(smallest_index);\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L,\
    \ (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n  \
    \  Debug.Assert(Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <bffab2dc81e64a00973fd75ab16ee10f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <bffab2dc81e64a00973fd75ab16ee10f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976381
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 2:\n    // Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n    // Example 3:\n    // Example 4:\n    // Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n    // so we will choose\
    \ the first zero, which has the smallest index.\n    // Constraints:\n    // *\
    \ 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n    public static List<long>\
    \ Pluck(List<long> arr) {\n        List<long> result = new List<long>();\n   \
    \     long smallest_value = arr.Min();\n        long smallest_index = 0;\n   \
    \     bool found = false;\n        for (int i = 0; i < arr.Count; i++) {\n   \
    \         if (arr[i] < smallest_value) {\n                smallest_value = arr[i];\n\
    \                smallest_index = i;\n                found = true;\n        \
    \    }\n        }\n        if (found) {\n            result.Add(smallest_value);\n\
    \            result.Add(smallest_index);\n        }\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,\
    \ (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <857960d744fc4f5c9ed5fd436add136e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <857960d744fc4f5c9ed5fd436add136e>:0 \n\nUnhandled Exception:\n\
    System.InvalidOperationException: Sequence contains no elements\n  at System.Linq.Enumerable.Min\
    \ (System.Collections.Generic.IEnumerable`1[T] source) [0x00022] in <e540098dd111461e919c5863f6975c29>:0\
    \ \n  at Problem.Pluck (System.Collections.Generic.List`1[T] arr) [0x00007] in\
    \ <857960d744fc4f5c9ed5fd436add136e>:0 \n  at Prob"
  stdout: ''
  timestamp: 1659976381
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 2:\n    // Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n    // Example 3:\n    // Example 4:\n    // Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n    // so we will choose\
    \ the first zero, which has the smallest index.\n    // Constraints:\n    // *\
    \ 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n    public static List<long>\
    \ Pluck(List<long> arr) {\n        List<long> result = new List<long>();\n   \
    \     long smallest_value = arr.Min();\n        long smallest_index = 0;\n   \
    \     bool found = false;\n        for (int i = 0; i < arr.Count; i++) {\n   \
    \         if (arr[i] % 2 == 0) {\n                found = true;\n            \
    \    if (arr[i] < smallest_value) {\n                    smallest_value = arr[i];\n\
    \                    smallest_index = i;\n                }\n            }\n \
    \       }\n        if (found) {\n            result.Add(smallest_value);\n   \
    \         result.Add(smallest_index);\n        }\n        return result;\n   \
    \ }\n    public static void Main(string[] args) {\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,\
    \ (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <0fcf7ca898d644f9ac5ddd3bbcdb5a37>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <0fcf7ca898d644f9ac5ddd3bbcdb5a37>:0 \n\nUnhandled Exception:\n\
    System.InvalidOperationException: Sequence contains no elements\n  at System.Linq.Enumerable.Min\
    \ (System.Collections.Generic.IEnumerable`1[T] source) [0x00022] in <e540098dd111461e919c5863f6975c29>:0\
    \ \n  at Problem.Pluck (System.Collections.Generic.List`1[T] arr) [0x00007] in\
    \ <0fcf7ca898d644f9ac5ddd3bbcdb5a37>:0 \n  at Prob"
  stdout: ''
  timestamp: 1659976379
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 2:\n    // Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n    // Example 3:\n    // Example 4:\n    // Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n    // so we will choose\
    \ the first zero, which has the smallest index.\n    // Constraints:\n    // *\
    \ 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n    public static List<long>\
    \ Pluck(List<long> arr) {\n        List<long> result = new List<long>();\n   \
    \     long smallestEvenValue = arr.Min();\n        long smallestIndex = 0;\n \
    \       for (int i = 0; i < arr.Count; i++) {\n            if (arr[i] % 2 == 0)\
    \ {\n                if (smallestEvenValue % 2 == 0) {\n                    smallestEvenValue\
    \ = arr[i];\n                    smallestIndex = i;\n                }\n     \
    \       }\n        }\n        result.Add(smallestEvenValue);\n        result.Add(smallestIndex);\n\
    \        return result;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,\
    \ (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <3c29751ee4794cec84b7e489c5eecca1>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <3c29751ee4794cec84b7e489c5eecca1>:0 \n\nUnhandled Exception:\n\
    System.InvalidOperationException: Sequence contains no elements\n  at System.Linq.Enumerable.Min\
    \ (System.Collections.Generic.IEnumerable`1[T] source) [0x00022] in <e540098dd111461e919c5863f6975c29>:0\
    \ \n  at Problem.Pluck (System.Collections.Generic.List`1[T] arr) [0x00007] in\
    \ <3c29751ee4794cec84b7e489c5eecca1>:0 \n  at Prob"
  stdout: ''
  timestamp: 1659976381
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 2:\n    // Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n    // Example 3:\n    // Example 4:\n    // Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n    // so we will choose\
    \ the first zero, which has the smallest index.\n    // Constraints:\n    // *\
    \ 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n    public static List<long>\
    \ Pluck(List<long> arr) {\n        long smalest_value = arr.Min();\n        List<long>\
    \ result = new List<long>();\n        long smallest_index = -1;\n        foreach\
    \ (var node in arr) {\n            if (node % 2 == 0) {\n                if (smallest_index\
    \ == -1 || node < smalest_value) {\n                    smalest_value = node;\n\
    \                    smallest_index = arr.IndexOf(node);\n                }\n\
    \            }\n        }\n        if (smallest_index != -1) {\n            result.Add(smalest_value);\n\
    \            result.Add(smallest_index);\n        }\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,\
    \ (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <82d26c9b3e8746ad9cf72b58ea3a52a8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <82d26c9b3e8746ad9cf72b58ea3a52a8>:0 \n\nUnhandled Exception:\n\
    System.InvalidOperationException: Sequence contains no elements\n  at System.Linq.Enumerable.Min\
    \ (System.Collections.Generic.IEnumerable`1[T] source) [0x00022] in <e540098dd111461e919c5863f6975c29>:0\
    \ \n  at Problem.Pluck (System.Collections.Generic.List`1[T] arr) [0x00001] in\
    \ <82d26c9b3e8746ad9cf72b58ea3a52a8>:0 \n  at Prob"
  stdout: ''
  timestamp: 1659976381
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 2:\n    // Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n    // Example 3:\n    // Example 4:\n    // Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n    // so we will choose\
    \ the first zero, which has the smallest index.\n    // Constraints:\n    // *\
    \ 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n    public static List<long>\
    \ Pluck(List<long> arr) {\n        long smalest_value = arr.Min();\n        long\
    \ smalest_index = 0;\n        List<long> result = new List<long>();\n        foreach\
    \ (long i in arr) {\n            if (i % 2 == 0) {\n                if (smalest_value\
    \ == i) {\n                    smalest_index = i;\n                }\n       \
    \         else {\n                    if (smalest_index > 0) {\n             \
    \           result.Add(smalest_value);\n                        result.Add(smalest_index);\n\
    \                    }\n                    smalest_value = i;\n             \
    \       smalest_index = i;\n                }\n            }\n        }\n    \
    \    if (smalest_index > 0) {\n            result.Add(smalest_value);\n      \
    \      result.Add(smalest_index);\n        }\n        return result;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n\
    \    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n   \
    \ Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,\
    \ (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <afad787a1d5c4e2eb83b4bd775cb6d60>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <afad787a1d5c4e2eb83b4bd775cb6d60>:0 \n\nUnhandled Exception:\n\
    System.InvalidOperationException: Sequence contains no elements\n  at System.Linq.Enumerable.Min\
    \ (System.Collections.Generic.IEnumerable`1[T] source) [0x00022] in <e540098dd111461e919c5863f6975c29>:0\
    \ \n  at Problem.Pluck (System.Collections.Generic.List`1[T] arr) [0x00001] in\
    \ <afad787a1d5c4e2eb83b4bd775cb6d60>:0 \n  at Prob"
  stdout: ''
  timestamp: 1659976381
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 2:\n    // Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n    // Example 3:\n    // Example 4:\n    // Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n    // so we will choose\
    \ the first zero, which has the smallest index.\n    // Constraints:\n    // *\
    \ 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n    public static List<long>\
    \ Pluck(List<long> arr) {\n        long smalest_value = arr.Min();\n        List<long>\
    \ result = new List<long>();\n        long smallest_index = -1;\n        bool\
    \ found = false;\n        foreach (long node in arr) {\n            if (node %\
    \ 2 == 0) {\n                if (smallest_index == -1 || smallest_index > node)\
    \ {\n                    smallest_index = node;\n                    smalest_value\
    \ = node;\n                    found = true;\n                }\n            }\n\
    \            else if (found) {\n                result.Add(smallest_value);\n\
    \                result.Add(smallest_index);\n                found = false;\n\
    \            }\n        }\n        if (result.Count == 0) {\n            return\
    \ new List<long>();\n        }\n        return result;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L,\
    \ (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n\
    \    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpr5yu9gun.cs(40,28): error CS0103: The name ''smallest_value'' does not
    exist in the current context

    '
  timestamp: 1659976381
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 2:\n    // Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n    // Example 3:\n    // Example 4:\n    // Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n    // so we will choose\
    \ the first zero, which has the smallest index.\n    // Constraints:\n    // *\
    \ 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n    public static List<long>\
    \ Pluck(List<long> arr) {\n        List<long> result = new List<long>();\n   \
    \     long smallest_value = arr.Min();\n        long smallest_index = -1;\n  \
    \      long smallest_even_value = -1;\n        long smallest_even_node_index =\
    \ -1;\n        foreach (long n in arr) {\n            if (n % 2 == 0) {\n    \
    \            if (smallest_even_value == -1) {\n                    smallest_even_value\
    \ = n;\n                    smallest_even_node_index = -1;\n                }\
    \ else if (smallest_even_value == n) {\n                    smallest_even_node_index++;\n\
    \                }\n            } else if (smallest_even_value != -1) {\n    \
    \            if (smallest_even_value == n) {\n                    result.Add(smallest_even_value);\n\
    \                    result.Add(smallest_even_node_index);\n                 \
    \   smallest_even_node_index = -1;\n                    smallest_even_value =\
    \ -1;\n                }\n            }\n            if (smallest_value == n)\
    \ {\n                smallest_index = arr.IndexOf(n);\n            }\n       \
    \ }\n        if (smallest_even_value != -1) {\n            result.Add(smallest_even_value);\n\
    \            result.Add(smallest_even_node_index);\n        }\n        return\
    \ result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,\
    \ (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c9763882d8a842268809b3bd15b9355c>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c9763882d8a842268809b3bd15b9355c>:0 \n\nUnhandled Exception:\n\
    System.InvalidOperationException: Sequence contains no elements\n  at System.Linq.Enumerable.Min\
    \ (System.Collections.Generic.IEnumerable`1[T] source) [0x00022] in <e540098dd111461e919c5863f6975c29>:0\
    \ \n  at Problem.Pluck (System.Collections.Generic.List`1[T] arr) [0x00007] in\
    \ <c9763882d8a842268809b3bd15b9355c>:0 \n  at Prob"
  stdout: ''
  timestamp: 1659976381
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 2:\n    // Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n    // Example 3:\n    // Example 4:\n    // Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n    // so we will choose\
    \ the first zero, which has the smallest index.\n    // Constraints:\n    // *\
    \ 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n    public static List<long>\
    \ Pluck(List<long> arr) {\n        List<long> result = new List<long>();\n   \
    \     long smalest_value = arr.Min();\n        int smalest_index = 0;\n      \
    \  for (int i = 0; i < arr.Count; i++) {\n            if (arr[i] % 2 == 0) {\n\
    \                if (arr[i] < smalest_value) {\n                    smalest_value\
    \ = arr[i];\n                    smalest_index = i;\n                }\n     \
    \       }\n        }\n        result.Add(smalest_value);\n        result.Add(smalest_index);\n\
    \        return result;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,\
    \ (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <b86268c968a0492ea5e721503693db0b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <b86268c968a0492ea5e721503693db0b>:0 \n\nUnhandled Exception:\n\
    System.InvalidOperationException: Sequence contains no elements\n  at System.Linq.Enumerable.Min\
    \ (System.Collections.Generic.IEnumerable`1[T] source) [0x00022] in <e540098dd111461e919c5863f6975c29>:0\
    \ \n  at Problem.Pluck (System.Collections.Generic.List`1[T] arr) [0x00007] in\
    \ <b86268c968a0492ea5e721503693db0b>:0 \n  at Prob"
  stdout: ''
  timestamp: 1659976381
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 2:\n    // Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n    // Example 3:\n    // Example 4:\n    // Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n    // so we will choose\
    \ the first zero, which has the smallest index.\n    // Constraints:\n    // *\
    \ 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n    public static List<long>\
    \ Pluck(List<long> arr) {\n        List<long> result = new List<long>();\n   \
    \     long smallestEvenValue = 0;\n        long smallestIndex = 0;\n        long\
    \ largestEvenValue = 0;\n        long largestIndex = 0;\n        foreach (var\
    \ item in arr) {\n            if (item % 2 == 0) {\n                if (smallestEvenValue\
    \ < item) {\n                    smallestEvenValue = item;\n                 \
    \   smallestIndex = arr.IndexOf(item);\n                }\n                if\
    \ (item > largestEvenValue) {\n                    largestEvenValue = item;\n\
    \                    largestIndex = arr.IndexOf(item);\n                }\n  \
    \          }\n        }\n        if (smallestEvenValue == 0) {\n            return\
    \ new List<long>();\n        }\n        result.Add(smallestEvenValue);\n     \
    \   result.Add(smallestIndex);\n        if (largestEvenValue == 0) {\n       \
    \     return new List<long>();\n        }\n        result.Add(largestEvenValue);\n\
    \        result.Add(largestIndex);\n        return result;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n\
    \    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n   \
    \ Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,\
    \ (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <5cefe23146ec41d3bc5a2d2c0d873a92>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <5cefe23146ec41d3bc5a2d2c0d873a92>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976381
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 2:\n    // Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n    // Example 3:\n    // Example 4:\n    // Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n    // so we will choose\
    \ the first zero, which has the smallest index.\n    // Constraints:\n    // *\
    \ 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n    public static List<long>\
    \ Pluck(List<long> arr) {\n        List<long> result = new List<long>();\n   \
    \     long smallest_even_value = arr.Min();\n        long smallest_even_index\
    \ = arr.IndexOf(smallest_even_value);\n        if (smallest_even_index == -1)\
    \ {\n            return result;\n        }\n        long smallest_value = arr[smallest_even_index];\n\
    \        long smallest_index = smallest_even_index;\n        bool found = false;\n\
    \        for (int i = 0; i < arr.Count; i++) {\n            if (arr[i] < smallest_value)\
    \ {\n                smallest_value = arr[i];\n                smallest_index\
    \ = i;\n                found = true;\n            }\n        }\n        if (found)\
    \ {\n            result.Add(smallest_value);\n            result.Add(smallest_index);\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L,\
    \ (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n  \
    \  Debug.Assert(Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpt9erh_15.cs(33,35): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    '
  timestamp: 1659976381
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 2:\n    // Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n    // Example 3:\n    // Example 4:\n    // Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n    // so we will choose\
    \ the first zero, which has the smallest index.\n    // Constraints:\n    // *\
    \ 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n    public static List<long>\
    \ Pluck(List<long> arr) {\n        List<long> result = new List<long>();\n   \
    \     long smalest_value = 0;\n        long smalest_index = 0;\n        long smalest_index_value\
    \ = 0;\n        long smalest_index_value_2 = 0;\n        long smalest_index_value_3\
    \ = 0;\n        long smalest_index_value_4 = 0;\n        long smalest_index_value_5\
    \ = 0;\n        long smalest_index_value_6 = 0;\n        long smalest_index_value_7\
    \ = 0;\n        long smalest_index_value_8 = 0;\n        long smalest_index_value_9\
    \ = 0;\n        long smalest_index_value_10 = 0;\n        long smalest_index_value_11\
    \ = 0;\n        long smalest_index_value_12 = 0;\n        long smalest_index_value_13\
    \ = 0;\n        long smalest_index_value_14 = 0;\n        long smalest_index_value_15\
    \ = 0;\n        long smalest_index_value_16 = 0;\n        long smalest_index_value_17\
    \ = 0;\n        long smalest_index_value_18 = 0;\n        long smalest_index_value_19\
    \ = 0;\n        long smalest_index_value_20 = 0;\n        long smalest_index_value_21\
    \ = 0;\n        long smalest_index_value_22 = 0;\n        long smalest_index_value_23\
    \ = 0;\n        long smalest_index_value_24 = 0;\n        long smalest_index_value_25\
    \ = 0;\n        long smalest_index_value_26 = 0;\n        long smalest_index_value_27\
    \ = 0;\n        long smalest_index_value_28 = 0;\n        long smalest_index_value_29\
    \ = 0;\n        long smalest_index_value_30 = 0;\n        long smalest_index_value_31\
    \ = 0;\n        long smalest_index_value_32 = 0;\n        long smalest_index_value_33\
    \ = 0;\n        long smalest_index_value_34 = 0;\n        long smalest_index_value_35\
    \ = 0;\n        long smalest_index_value_36 = 0;\n        long smalest_index_value_37\
    \ = 0;\n        long smalest_index_value_38 = 0;\n        long smalest_index_value_39\
    \ = 0;\n        long smalest_index_value_40 = 0;\n        long smalest_index_value_41\
    \ = 0;\n        long smalest_index_value_42 = 0;\n        long smalest_index_value_43\
    \ = 0;\n        long smalest_index_value_44 = 0;\n        long smalest_index_value_45\
    \ = 0;\n        long smalest_index_value_46 = 0;\n        long smalest_index_value_47\
    \ = 0;\n        long smalest_index_value_48 = 0;\n        long smalest_index_value_49\
    \ = 0;\n        \n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,\
    \ (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmprjmancjj.cs(28,14): warning CS0219: The variable ''smalest_value'' is
    assigned but its value is never used

    /tmp/tmprjmancjj.cs(29,14): warning CS0219: The variable ''smalest_index'' is
    assigned but its value is never used

    /tmp/tmprjmancjj.cs(30,14): warning CS0219: The variable ''smalest_index_value''
    is assigned but its value is never used

    /tmp/tmprjmancjj.cs(31,14): warning CS0219: The variable ''smalest_index_value_2''
    is assigned but its value is never used

    /tmp/tmprjmancjj.cs(32,14): warning CS0219: The variable ''smalest_index_value_3''
    is assigned but its value is never used

    /tmp/tmprjmancjj.cs(33,14): warning CS0219: The variable ''smalest_index_value_4''
    is assigned but its value is never used

    /tmp/tmprjmancjj.cs(34,14): warning CS0219: The variable ''smalest_index_value_5''
    is assigned but its value is never used

    /tmp/tmprjmancjj.cs(35,14): warning CS0219: The variable ''smalest_index_value_6''
    is assigned but its value is never used

    /tmp/tmprjmancjj.cs(36,14): warning CS0219: The variable ''smalest_index_value_7''
    is assigned but its value is never used

    /tmp/tmprjmancjj.cs(37,14): warning CS0219: The variable ''smalest_index_value_8''
    is assigned but its value is never used

    /tmp/tmprjmancjj.cs(38,14): warning CS0219: The variable ''smalest_index_value_9''
    is assigned but its value is never used

    /tmp/tmprjmancjj.cs(39,14): warning CS0219: The variable ''smalest_index_value_10''
    is assigned but its value is never used

    /tmp/tmprjmancjj.cs(40,14): warning CS0219: The variable ''smalest_index_value_11''
    is assigned but its value is never used

    /tmp/tmprjmancjj.cs(41,14): warning CS0219: The variable ''smalest_index_value_12''
    is assigned but its value is never used

    /tmp/tmprjmancjj.cs(42,14): warning CS0219: The variable ''smalest_index_value_13''
    is assigned but its value is never used

    /tmp/tmprjmancjj.cs(43,14): warning CS0219: The variable ''smalest_index_value_14''
    is assigned but its value is never use'
  timestamp: 1659976381
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 2:\n    // Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n    // Example 3:\n    // Example 4:\n    // Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n    // so we will choose\
    \ the first zero, which has the smallest index.\n    // Constraints:\n    // *\
    \ 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n    public static List<long>\
    \ Pluck(List<long> arr) {\n        long smalest_value = arr.Min();\n        long\
    \ smalest_index = 0;\n        List<long> result = new List<long>();\n        foreach\
    \ (var item in arr) {\n            if (item % 2 == 0) {\n                if (item\
    \ < smalest_value) {\n                    smalest_value = item;\n            \
    \        smalest_index = arr.IndexOf(item);\n                }\n            }\n\
    \        }\n        if (smalest_index != 0) {\n            result.Add(smalest_value);\n\
    \            result.Add(smalest_index);\n        }\n        return result;\n \
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,\
    \ (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a7ad88b17b5d455ba315e8337ed67a6d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a7ad88b17b5d455ba315e8337ed67a6d>:0 \n\nUnhandled Exception:\n\
    System.InvalidOperationException: Sequence contains no elements\n  at System.Linq.Enumerable.Min\
    \ (System.Collections.Generic.IEnumerable`1[T] source) [0x00022] in <e540098dd111461e919c5863f6975c29>:0\
    \ \n  at Problem.Pluck (System.Collections.Generic.List`1[T] arr) [0x00001] in\
    \ <a7ad88b17b5d455ba315e8337ed67a6d>:0 \n  at Prob"
  stdout: ''
  timestamp: 1659976381
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 2:\n    // Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n    // Example 3:\n    // Example 4:\n    // Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n    // so we will choose\
    \ the first zero, which has the smallest index.\n    // Constraints:\n    // *\
    \ 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n    public static List<long>\
    \ Pluck(List<long> arr) {\n        List<long> result = new List<long>();\n   \
    \     long smallestEvenValue = arr.Min();\n        long smallestIndex = arr.IndexOf(smallestEvenValue);\n\
    \        if (smallestIndex == -1) {\n            return result;\n        }\n \
    \       bool isEven = true;\n        for (int i = 0; i < arr.Count; i++) {\n \
    \           if (arr[i] != smallestEvenValue) {\n                isEven = false;\n\
    \                break;\n            }\n        }\n        if (isEven) {\n   \
    \         result.Add(smallestEvenValue);\n            result.Add(smallestIndex);\n\
    \        } else {\n            int smallestIndex2 = smallestIndex;\n         \
    \   while (smallestIndex2 < arr.Count && arr[smallestIndex2] != smallestEvenValue)\
    \ {\n                smallestIndex2++;\n            }\n            result.Add(smallestEvenValue);\n\
    \            result.Add(smallestIndex2);\n        }\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,\
    \ (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpf9xr_9mn.cs(44,34): error CS0266: Cannot implicitly convert type ''long''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659976381
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 2:\n    // Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n    // Example 3:\n    // Example 4:\n    // Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n    // so we will choose\
    \ the first zero, which has the smallest index.\n    // Constraints:\n    // *\
    \ 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n    public static List<long>\
    \ Pluck(List<long> arr) {\n        long smalest_value = arr.Min();\n        long\
    \ smalest_index = 0;\n        List<long> result = new List<long>();\n        foreach\
    \ (long n in arr) {\n            if (n % 2 == 0) {\n                if (smalest_value\
    \ < n) {\n                    smalest_value = n;\n                    smalest_index\
    \ = arr.IndexOf(n);\n                }\n            }\n        }\n        if (smalest_index\
    \ != 0) {\n            result.Add(smalest_value);\n            result.Add(smalest_index);\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L,\
    \ (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n  \
    \  Debug.Assert(Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <6040d3fb6bc041419af64eb830d62e50>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <6040d3fb6bc041419af64eb830d62e50>:0 \n\nUnhandled Exception:\n\
    System.InvalidOperationException: Sequence contains no elements\n  at System.Linq.Enumerable.Min\
    \ (System.Collections.Generic.IEnumerable`1[T] source) [0x00022] in <e540098dd111461e919c5863f6975c29>:0\
    \ \n  at Problem.Pluck (System.Collections.Generic.List`1[T] arr) [0x00001] in\
    \ <6040d3fb6bc041419af64eb830d62e50>:0 \n  at Prob"
  stdout: ''
  timestamp: 1659976379
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 2:\n    // Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n    // Example 3:\n    // Example 4:\n    // Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n    // so we will choose\
    \ the first zero, which has the smallest index.\n    // Constraints:\n    // *\
    \ 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n    public static List<long>\
    \ Pluck(List<long> arr) {\n        long smalest_value = 0;\n        long smalest_index\
    \ = 0;\n        List<long> result = new List<long>();\n        foreach (long n\
    \ in arr) {\n            if (n % 2 == 0) {\n                if (smalest_value\
    \ == 0) {\n                    smalest_value = n;\n                    smalest_index\
    \ = arr.IndexOf(n);\n                }\n                else if (smalest_value\
    \ < n) {\n                    smalest_value = n;\n                    smalest_index\
    \ = arr.IndexOf(n);\n                }\n            }\n        }\n        if (smalest_value\
    \ != 0) {\n            result.Add(smalest_value);\n            result.Add(smalest_index);\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L,\
    \ (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n  \
    \  Debug.Assert(Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <795f2028e9c64882bb478b9c56dd1284>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <795f2028e9c64882bb478b9c56dd1284>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976381
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 2:\n    // Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n    // Example 3:\n    // Example 4:\n    // Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n    // so we will choose\
    \ the first zero, which has the smallest index.\n    // Constraints:\n    // *\
    \ 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n    public static List<long>\
    \ Pluck(List<long> arr) {\n        long smalest_value = arr.Min();\n        List<long>\
    \ result = new List<long>();\n        long smalest_index = 0;\n        long smalest_index_value\
    \ = 0;\n        foreach (var item in arr) {\n            if (item % 2 == 0) {\n\
    \                if (item < smalest_value) {\n                    smalest_value\
    \ = item;\n                    smalest_index = arr.IndexOf(item);\n          \
    \          smalest_index_value = item;\n                }\n            }\n   \
    \     }\n        if (smalest_value == 0) {\n            return new List<long>();\n\
    \        }\n        result.Add(smalest_value);\n        result.Add(smalest_index);\n\
    \        return result;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,\
    \ (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a129669af71a4cc1bf790eabe60c48eb>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a129669af71a4cc1bf790eabe60c48eb>:0 \n\nUnhandled Exception:\n\
    System.InvalidOperationException: Sequence contains no elements\n  at System.Linq.Enumerable.Min\
    \ (System.Collections.Generic.IEnumerable`1[T] source) [0x00022] in <e540098dd111461e919c5863f6975c29>:0\
    \ \n  at Problem.Pluck (System.Collections.Generic.List`1[T] arr) [0x00001] in\
    \ <a129669af71a4cc1bf790eabe60c48eb>:0 \n  at Prob"
  stdout: ''
  timestamp: 1659976381
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 2:\n    // Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n    // Example 3:\n    // Example 4:\n    // Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n    // so we will choose\
    \ the first zero, which has the smallest index.\n    // Constraints:\n    // *\
    \ 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n    public static List<long>\
    \ Pluck(List<long> arr) {\n        List<long> result = new List<long>();\n   \
    \     long smallest_value = arr.Min();\n        int smallest_index = -1;\n   \
    \     bool found = false;\n        for (int i = 0; i < arr.Count; i++) {\n   \
    \         if (arr[i] < smallest_value) {\n                smallest_value = arr[i];\n\
    \                smallest_index = i;\n                found = true;\n        \
    \    }\n        }\n        if (found) {\n            result.Add(smallest_value);\n\
    \            result.Add(smallest_index);\n        }\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,\
    \ (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c8d64e77cb0e4b5b9de4916f6befb598>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c8d64e77cb0e4b5b9de4916f6befb598>:0 \n\nUnhandled Exception:\n\
    System.InvalidOperationException: Sequence contains no elements\n  at System.Linq.Enumerable.Min\
    \ (System.Collections.Generic.IEnumerable`1[T] source) [0x00022] in <e540098dd111461e919c5863f6975c29>:0\
    \ \n  at Problem.Pluck (System.Collections.Generic.List`1[T] arr) [0x00007] in\
    \ <c8d64e77cb0e4b5b9de4916f6befb598>:0 \n  at Prob"
  stdout: ''
  timestamp: 1659976381
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 2:\n    // Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n    // Example 3:\n    // Example 4:\n    // Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n    // so we will choose\
    \ the first zero, which has the smallest index.\n    // Constraints:\n    // *\
    \ 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n    public static List<long>\
    \ Pluck(List<long> arr) {\n        List<long> result = new List<long>();\n   \
    \     long smallestEvenValue = 0;\n        long smallestIndex = 0;\n        long\
    \ currentEvenValue = 0;\n        long currentIndex = 0;\n        bool found =\
    \ false;\n        foreach (long i in arr) {\n            if (i % 2 == 0) {\n \
    \               currentEvenValue = i;\n                currentIndex = i;\n   \
    \             found = true;\n            }\n            if (found) {\n       \
    \         if (currentEvenValue < smallestEvenValue) {\n                    smallestEvenValue\
    \ = currentEvenValue;\n                    smallestIndex = currentIndex;\n   \
    \             }\n                found = false;\n            }\n        }\n  \
    \      if (smallestEvenValue == 0)\n            return new List<long>();\n   \
    \     result.Add(smallestEvenValue);\n        result.Add(smallestIndex);\n   \
    \     return result;\n    }\n    public static void Main(string[] args) {\n  \
    \  Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,\
    \ (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <729cb67336d944b9af83f4f3d533df78>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <729cb67336d944b9af83f4f3d533df78>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976381
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 2:\n    // Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n    // Example 3:\n    // Example 4:\n    // Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n    // so we will choose\
    \ the first zero, which has the smallest index.\n    // Constraints:\n    // *\
    \ 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n    public static List<long>\
    \ Pluck(List<long> arr) {\n        List<long> result = new List<long>();\n   \
    \     long smallestEven = arr.Min();\n        int smallestIndex = -1;\n      \
    \  for (int i = 0; i < arr.Count; i++) {\n            if (arr[i] % 2 == 0) {\n\
    \                if (smallestEven == arr[i]) {\n                    smallestIndex\
    \ = i;\n                }\n                else if (smallestEven == arr[i] &&\
    \ smallestIndex == -1) {\n                    smallestIndex = i;\n           \
    \     }\n            }\n        }\n        if (smallestIndex != -1) {\n      \
    \      result.Add(smallestEven);\n            result.Add(smallestIndex);\n   \
    \     }\n        return result;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,\
    \ (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <54fac90df3d24faba11e5ff565f21229>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <54fac90df3d24faba11e5ff565f21229>:0 \n\nUnhandled Exception:\n\
    System.InvalidOperationException: Sequence contains no elements\n  at System.Linq.Enumerable.Min\
    \ (System.Collections.Generic.IEnumerable`1[T] source) [0x00022] in <e540098dd111461e919c5863f6975c29>:0\
    \ \n  at Problem.Pluck (System.Collections.Generic.List`1[T] arr) [0x00007] in\
    \ <54fac90df3d24faba11e5ff565f21229>:0 \n  at Prob"
  stdout: ''
  timestamp: 1659976382
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 2:\n    // Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n    // Example 3:\n    // Example 4:\n    // Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n    // so we will choose\
    \ the first zero, which has the smallest index.\n    // Constraints:\n    // *\
    \ 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n    public static List<long>\
    \ Pluck(List<long> arr) {\n        List<long> result = new List<long>();\n   \
    \     long smallestEvenValue = arr.Min();\n        long smallestIndex = 0;\n \
    \       bool hasSmallestEvenValue = false;\n        for (int i = 0; i < arr.Count;\
    \ i++) {\n            if (arr[i] % 2 == 0) {\n                if (smallestEvenValue\
    \ < arr[i]) {\n                    smallestEvenValue = arr[i];\n             \
    \       smallestIndex = i;\n                    hasSmallestEvenValue = true;\n\
    \                }\n            }\n        }\n        if (hasSmallestEvenValue)\
    \ {\n            result.Add(smallestEvenValue);\n            result.Add(smallestIndex);\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L,\
    \ (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n  \
    \  Debug.Assert(Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <1aaffd28913e44bda21f444dbe3dfe60>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <1aaffd28913e44bda21f444dbe3dfe60>:0 \n\nUnhandled Exception:\n\
    System.InvalidOperationException: Sequence contains no elements\n  at System.Linq.Enumerable.Min\
    \ (System.Collections.Generic.IEnumerable`1[T] source) [0x00022] in <e540098dd111461e919c5863f6975c29>:0\
    \ \n  at Problem.Pluck (System.Collections.Generic.List`1[T] arr) [0x00007] in\
    \ <1aaffd28913e44bda21f444dbe3dfe60>:0 \n  at Prob"
  stdout: ''
  timestamp: 1659976382
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 2:\n    // Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n    // Example 3:\n    // Example 4:\n    // Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n    // so we will choose\
    \ the first zero, which has the smallest index.\n    // Constraints:\n    // *\
    \ 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n    public static List<long>\
    \ Pluck(List<long> arr) {\n        List<long> result = new List<long>();\n   \
    \     long smallest_even_value = arr.Min();\n        long smallest_even_index\
    \ = arr.IndexOf(smallest_even_value);\n        long smallest_even_value_plus_one\
    \ = smallest_even_value + 1;\n        long smallest_even_index_plus_one = smallest_even_index\
    \ + 1;\n        bool found = false;\n        foreach (long i in arr) {\n     \
    \       if (i % 2 == 0) {\n                if (i == smallest_even_value) {\n \
    \                   found = true;\n                    break;\n              \
    \  }\n                if (i == smallest_even_value_plus_one) {\n             \
    \       found = true;\n                    break;\n                }\n       \
    \         if (i == smallest_even_index_plus_one) {\n                    found\
    \ = true;\n                    break;\n                }\n            }\n    \
    \    }\n        if (found) {\n            result.Add(smallest_even_value);\n \
    \           result.Add(smallest_even_index);\n        } else {\n            result.Add(smallest_even_value_plus_one);\n\
    \            result.Add(smallest_even_index_plus_one);\n        }\n        return\
    \ result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,\
    \ (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <ecafb7a7cfc84b74bc529410b988ce1a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <ecafb7a7cfc84b74bc529410b988ce1a>:0 \n\nUnhandled Exception:\n\
    System.InvalidOperationException: Sequence contains no elements\n  at System.Linq.Enumerable.Min\
    \ (System.Collections.Generic.IEnumerable`1[T] source) [0x00022] in <e540098dd111461e919c5863f6975c29>:0\
    \ \n  at Problem.Pluck (System.Collections.Generic.List`1[T] arr) [0x00007] in\
    \ <ecafb7a7cfc84b74bc529410b988ce1a>:0 \n  at Prob"
  stdout: ''
  timestamp: 1659976382
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 2:\n    // Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n    // Example 3:\n    // Example 4:\n    // Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n    // so we will choose\
    \ the first zero, which has the smallest index.\n    // Constraints:\n    // *\
    \ 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n    public static List<long>\
    \ Pluck(List<long> arr) {\n        long smalest_value = arr.Min();\n        long\
    \ smalest_index = 0;\n        List<long> result = new List<long>();\n        foreach\
    \ (long n in arr) {\n            if (n % 2 == 0) {\n                if (smalest_value\
    \ == n) {\n                    smalest_index = n;\n                }\n       \
    \         if (smalest_value < n) {\n                    smalest_value = n;\n \
    \                   smalest_index = n;\n                }\n            }\n   \
    \     }\n        if (smalest_index != 0) {\n            result.Add(smalest_value);\n\
    \            result.Add(smalest_index);\n        }\n        return result;\n \
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,\
    \ (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <2a23daca71f44a22b387018ac0b4fc81>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <2a23daca71f44a22b387018ac0b4fc81>:0 \n\nUnhandled Exception:\n\
    System.InvalidOperationException: Sequence contains no elements\n  at System.Linq.Enumerable.Min\
    \ (System.Collections.Generic.IEnumerable`1[T] source) [0x00022] in <e540098dd111461e919c5863f6975c29>:0\
    \ \n  at Problem.Pluck (System.Collections.Generic.List`1[T] arr) [0x00001] in\
    \ <2a23daca71f44a22b387018ac0b4fc81>:0 \n  at Prob"
  stdout: ''
  timestamp: 1659976382
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 2:\n    // Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n    // Example 3:\n    // Example 4:\n    // Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n    // so we will choose\
    \ the first zero, which has the smallest index.\n    // Constraints:\n    // *\
    \ 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n    public static List<long>\
    \ Pluck(List<long> arr) {\n        List<long> result = new List<long>();\n   \
    \     long smalest_value = arr.Min();\n        long smalest_index = 0;\n     \
    \   long smalest_even_value = 0;\n        long smalest_even_index = 0;\n     \
    \   long smalest_even_index_count = 0;\n        long smalest_even_index_count_max\
    \ = 0;\n        long smalest_even_index_count_min = 0;\n        long smalest_even_index_count_sum\
    \ = 0;\n        long smalest_even_index_count_sum_max = 0;\n        long smalest_even_index_count_sum_min\
    \ = 0;\n        long smalest_even_index_count_sum_sum = 0;\n        long smalest_even_index_count_sum_sum_max\
    \ = 0;\n        long smalest_even_index_count_sum_sum_min = 0;\n        long smalest_even_index_count_sum_sum_sum\
    \ = 0;\n        long smalest_even_index_count_sum_sum_sum_max = 0;\n        long\
    \ smalest_even_index_count_sum_sum_sum_min = 0;\n        long smalest_even_index_count_sum_sum_sum_sum\
    \ = 0;\n        long smalest_even_index_count_sum_sum_sum_sum_max = 0;\n     \
    \   long smalest_even_index_count_sum_sum_sum_min = 0;\n        long smalest_even_index_count_sum_sum_sum_sum\
    \ = 0;\n        long smalest_even_index_count_sum_sum_sum_sum_max = 0;\n     \
    \   long smalest_even_index_count_sum_sum_sum_min = 0;\n        long smalest_even_index_count_sum_sum_sum_sum\
    \ = 0;\n        long smalest_even_index_count_sum_sum_sum_sum_max = 0;\n     \
    \   long smalest_even_index_count_sum_sum_sum_min = 0;\n        long smalest_even_index_count_sum_sum_sum_sum\
    \ = 0;\n        long smalest_even_index_count_sum_sum_sum_sum_max = 0;\n     \
    \   long smalest_even_index_count_sum_sum_sum_min = 0;\n        long smalest_even_index_count_sum_sum_sum_sum\
    \ = 0;\n        long smalest_even_index_count_sum_sum_sum_sum_max = 0;\n     \
    \   long smalest_even_index_count_sum_sum_sum_min = 0;\n        long smalest_even_index_count_sum_sum_sum_sum\
    \ = 0;\n        long smalest_even_index_count_sum_sum_sum_sum_max = 0;\n     \
    \   long smalest_even_index_count_sum_sum_sum_min = 0;\n        long smalest_even_index_count_sum_sum_sum_sum\
    \ = 0;\n        long smalest_even_index_count_sum_sum_sum_sum_max = 0;\n     \
    \   long smalest_even_index_count_sum_sum_sum_min = 0;\n        long smalest_even_index_count_sum_sum_sum_sum\
    \ = 0;\n        long smalest_even\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L,\
    \ (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n  \
    \  Debug.Assert(Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp8p2mo0pb.cs(66,26): error CS1002: ; expected

    '
  timestamp: 1659976381
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 2:\n    // Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n    // Example 3:\n    // Example 4:\n    // Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n    // so we will choose\
    \ the first zero, which has the smallest index.\n    // Constraints:\n    // *\
    \ 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n    public static List<long>\
    \ Pluck(List<long> arr) {\n        List<long> result = new List<long>();\n   \
    \     long smalest_value = 0;\n        long smalest_index = 0;\n        long smalest_even_value\
    \ = 0;\n        long smalest_even_index = 0;\n        long smalest_even_index_in_array\
    \ = 0;\n        long smalest_even_index_in_array_in_array = 0;\n        long smalest_even_index_in_array_in_array2\
    \ = 0;\n        long smalest_even_index_in_array_in_array3 = 0;\n        long\
    \ smalest_even_index_in_array_in_array4 = 0;\n        long smalest_even_index_in_array_in_array5\
    \ = 0;\n        long smalest_even_index_in_array_in_array6 = 0;\n        long\
    \ smalest_even_index_in_array_in_array7 = 0;\n        long smalest_even_index_in_array_in_array8\
    \ = 0;\n        long smalest_even_index_in_array_in_array9 = 0;\n        long\
    \ smalest_even_index_in_array_in_array10 = 0;\n        long smalest_even_index_in_array_in_array11\
    \ = 0;\n        long smalest_even_index_in_array_in_array12 = 0;\n        long\
    \ smalest_even_index_in_array_in_array13 = 0;\n        long smalest_even_index_in_array_in_array14\
    \ = 0;\n        long smalest_even_index_in_array_in_array15 = 0;\n        long\
    \ smalest_even_index_in_array_in_array16 = 0;\n        long smalest_even_index_in_array_in_array17\
    \ = 0;\n        long smalest_even_index_in_array_in_array18 = 0;\n        long\
    \ smalest_even_index_in_array_in_array19 = 0;\n        long smalest_even_index_in_array_in_array20\
    \ = 0;\n        long smalest_even_index_in_array_in_array21 = 0;\n        long\
    \ smalest_even_index_in_array_in_array22 = 0;\n        long smalest_even_index_in_array_in_array23\
    \ = 0;\n        long smalest_even_index_in_array_in_array24 = 0;\n        long\
    \ smalest_even_index_in_array_in_array25 = 0;\n        long smalest_even_index_in_array_in_array26\
    \ = 0;\n        long smalest_even_index_in_array_in_array27 = 0;\n        long\
    \ smalest_even_index_in_array_in_array28 = 0;\n        long smalest_even_index_in_array_in_array29\
    \ = 0;\n        long smalest_even_index_in_array_in_array30 = 0;\n        long\
    \ smalest_even_index_in_array_in_array31 = 0;\n        long smalest_even_index_in_array_in_array32\
    \ = 0;\n        long smalest_even_index_in_array_in_array33 = 0;\n\n    }\n  \
    \  public static void Main(string[] args) {\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n\
    \    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n   \
    \ Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,\
    \ (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp385y276v.cs(28,14): warning CS0219: The variable ''smalest_value'' is
    assigned but its value is never used

    /tmp/tmp385y276v.cs(29,14): warning CS0219: The variable ''smalest_index'' is
    assigned but its value is never used

    /tmp/tmp385y276v.cs(30,14): warning CS0219: The variable ''smalest_even_value''
    is assigned but its value is never used

    /tmp/tmp385y276v.cs(31,14): warning CS0219: The variable ''smalest_even_index''
    is assigned but its value is never used

    /tmp/tmp385y276v.cs(32,14): warning CS0219: The variable ''smalest_even_index_in_array''
    is assigned but its value is never used

    /tmp/tmp385y276v.cs(33,14): warning CS0219: The variable ''smalest_even_index_in_array_in_array''
    is assigned but its value is never used

    /tmp/tmp385y276v.cs(34,14): warning CS0219: The variable ''smalest_even_index_in_array_in_array2''
    is assigned but its value is never used

    /tmp/tmp385y276v.cs(35,14): warning CS0219: The variable ''smalest_even_index_in_array_in_array3''
    is assigned but its value is never used

    /tmp/tmp385y276v.cs(36,14): warning CS0219: The variable ''smalest_even_index_in_array_in_array4''
    is assigned but its value is never used

    /tmp/tmp385y276v.cs(37,14): warning CS0219: The variable ''smalest_even_index_in_array_in_array5''
    is assigned but its value is never used

    /tmp/tmp385y276v.cs(38,14): warning CS0219: The variable ''smalest_even_index_in_array_in_array6''
    is assigned but its value is never used

    /tmp/tmp385y276v.cs(39,14): warning CS0219: The variable ''smalest_even_index_in_array_in_array7''
    is assigned but its value is never used

    /tmp/tmp385y276v.cs(40,14): warning CS0219: The variable ''smalest_even_index_in_array_in_array8''
    is assigned but its value is never used

    /tmp/tmp385y276v.cs(41,14): warning CS0219: The variable ''smalest_even_index_in_array_in_array9''
    is assigned but its value is never used

    /tmp/tmp385y276v.cs(42,14): warning CS0219: The variable ''smalest_even_index_in_array_in_array10''
    is'
  timestamp: 1659976381
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 2:\n    // Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n    // Example 3:\n    // Example 4:\n    // Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n    // so we will choose\
    \ the first zero, which has the smallest index.\n    // Constraints:\n    // *\
    \ 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n    public static List<long>\
    \ Pluck(List<long> arr) {\n        List<long> result = new List<long>();\n   \
    \     long smallestEvenValue = arr.Min();\n        long smallestIndex = arr.IndexOf(smallestEvenValue);\n\
    \        if (smallestEvenValue % 2 == 0) {\n            result.Add(smallestEvenValue);\n\
    \            result.Add(smallestIndex);\n        }\n        else {\n         \
    \   int evenCount = 0;\n            int index = 0;\n            foreach (var item\
    \ in arr) {\n                if (item % 2 == 0) {\n                    evenCount++;\n\
    \                    if (evenCount == 1) {\n                        result.Add(item);\n\
    \                        result.Add(index);\n                    }\n         \
    \       }\n                else {\n                    evenCount = 0;\n      \
    \              index++;\n                }\n            }\n        }\n       \
    \ return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,\
    \ (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <ee7cf7a21d6f4338869d5c423677fd12>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <ee7cf7a21d6f4338869d5c423677fd12>:0 \n\nUnhandled Exception:\n\
    System.InvalidOperationException: Sequence contains no elements\n  at System.Linq.Enumerable.Min\
    \ (System.Collections.Generic.IEnumerable`1[T] source) [0x00022] in <e540098dd111461e919c5863f6975c29>:0\
    \ \n  at Problem.Pluck (System.Collections.Generic.List`1[T] arr) [0x00007] in\
    \ <ee7cf7a21d6f4338869d5c423677fd12>:0 \n  at Prob"
  stdout: ''
  timestamp: 1659976382
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 2:\n    // Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n    // Example 3:\n    // Example 4:\n    // Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n    // so we will choose\
    \ the first zero, which has the smallest index.\n    // Constraints:\n    // *\
    \ 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n    public static List<long>\
    \ Pluck(List<long> arr) {\n        List<long> result = new List<long>();\n   \
    \     long smallestEvenValue = arr.Min();\n        long smallestIndex = 0;\n \
    \       bool hasSmallestEvenValue = false;\n        bool hasSmallestIndex = false;\n\
    \        foreach (long n in arr) {\n            if (n % 2 == 0) {\n          \
    \      if (smallestEvenValue % 2 == 0) {\n                    hasSmallestEvenValue\
    \ = true;\n                    smallestEvenValue = n;\n                    smallestIndex\
    \ = arr.IndexOf(n);\n                }\n                else {\n             \
    \       hasSmallestEvenValue = false;\n                }\n            }\n    \
    \        else {\n                if (smallestEvenValue % 2 != 0) {\n         \
    \           hasSmallestEvenValue = true;\n                    smallestEvenValue\
    \ = n;\n                    smallestIndex = arr.IndexOf(n);\n                }\n\
    \                else {\n                    hasSmallestEvenValue = false;\n \
    \               }\n            }\n        }\n        if (hasSmallestEvenValue)\
    \ {\n            result.Add(smallestEvenValue);\n            result.Add(smallestIndex);\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L,\
    \ (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n  \
    \  Debug.Assert(Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8c5824b062314fcaa1562fd210c5d7aa>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8c5824b062314fcaa1562fd210c5d7aa>:0 \n\nUnhandled Exception:\n\
    System.InvalidOperationException: Sequence contains no elements\n  at System.Linq.Enumerable.Min\
    \ (System.Collections.Generic.IEnumerable`1[T] source) [0x00022] in <e540098dd111461e919c5863f6975c29>:0\
    \ \n  at Problem.Pluck (System.Collections.Generic.List`1[T] arr) [0x00007] in\
    \ <8c5824b062314fcaa1562fd210c5d7aa>:0 \n  at Prob"
  stdout: ''
  timestamp: 1659976382
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 2:\n    // Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n    // Example 3:\n    // Example 4:\n    // Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n    // so we will choose\
    \ the first zero, which has the smallest index.\n    // Constraints:\n    // *\
    \ 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n    public static List<long>\
    \ Pluck(List<long> arr) {\n        long smalest_value = arr.Min();\n        long\
    \ smalest_index = 0;\n        List<long> result = new List<long>();\n        foreach\
    \ (long n in arr) {\n            if (n % 2 == 0) {\n                if (smalest_value\
    \ == n) {\n                    smalest_index = n;\n                }\n       \
    \         else {\n                    if (smalest_value < n) {\n             \
    \           smalest_value = n;\n                        smalest_index = n;\n \
    \                   }\n                }\n            }\n        }\n        if\
    \ (smalest_index != 0) {\n            result.Add(smalest_value);\n           \
    \ result.Add(smalest_index);\n        }\n        return result;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n\
    \    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n   \
    \ Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,\
    \ (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <ef8d7ebeb13b459fae2293ea723589d9>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <ef8d7ebeb13b459fae2293ea723589d9>:0 \n\nUnhandled Exception:\n\
    System.InvalidOperationException: Sequence contains no elements\n  at System.Linq.Enumerable.Min\
    \ (System.Collections.Generic.IEnumerable`1[T] source) [0x00022] in <e540098dd111461e919c5863f6975c29>:0\
    \ \n  at Problem.Pluck (System.Collections.Generic.List`1[T] arr) [0x00001] in\
    \ <ef8d7ebeb13b459fae2293ea723589d9>:0 \n  at Prob"
  stdout: ''
  timestamp: 1659976382
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 2:\n    // Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n    // Example 3:\n    // Example 4:\n    // Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n    // so we will choose\
    \ the first zero, which has the smallest index.\n    // Constraints:\n    // *\
    \ 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n    public static List<long>\
    \ Pluck(List<long> arr) {\n        long smalest_value = arr.Min();\n        long\
    \ smalest_index = 0;\n        List<long> result = new List<long>();\n        foreach\
    \ (var item in arr) {\n            if (item % 2 == 0) {\n                if (item\
    \ < smalest_value) {\n                    smalest_value = item;\n            \
    \        smalest_index = arr.IndexOf(item);\n                }\n            }\n\
    \        }\n        if (smalest_index != 0) {\n            result.Add(smalest_value);\n\
    \            result.Add(smalest_index);\n        }\n        return result;\n \
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,\
    \ (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a7ad88b17b5d455ba315e8337ed67a6d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a7ad88b17b5d455ba315e8337ed67a6d>:0 \n\nUnhandled Exception:\n\
    System.InvalidOperationException: Sequence contains no elements\n  at System.Linq.Enumerable.Min\
    \ (System.Collections.Generic.IEnumerable`1[T] source) [0x00022] in <e540098dd111461e919c5863f6975c29>:0\
    \ \n  at Problem.Pluck (System.Collections.Generic.List`1[T] arr) [0x00001] in\
    \ <a7ad88b17b5d455ba315e8337ed67a6d>:0 \n  at Prob"
  stdout: ''
  timestamp: 1659976381
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 2:\n    // Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n    // Example 3:\n    // Example 4:\n    // Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n    // so we will choose\
    \ the first zero, which has the smallest index.\n    // Constraints:\n    // *\
    \ 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n    public static List<long>\
    \ Pluck(List<long> arr) {\n        List<long> result = new List<long>();\n   \
    \     long smallest_value = 0;\n        long smallest_index = 0;\n        foreach\
    \ (long n in arr) {\n            if (n % 2 == 0) {\n                if (smallest_value\
    \ == 0) {\n                    smallest_value = n;\n                    smallest_index\
    \ = arr.IndexOf(n);\n                } else if (smallest_value < n) {\n      \
    \              smallest_value = n;\n                    smallest_index = arr.IndexOf(n);\n\
    \                }\n            }\n        }\n        if (smallest_value != 0)\
    \ {\n            result.Add(smallest_value);\n            result.Add(smallest_index);\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L,\
    \ (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n  \
    \  Debug.Assert(Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <3068a8a7e8754d6b9d78b2f3683ce738>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <3068a8a7e8754d6b9d78b2f3683ce738>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976382
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 2:\n    // Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n    // Example 3:\n    // Example 4:\n    // Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n    // so we will choose\
    \ the first zero, which has the smallest index.\n    // Constraints:\n    // *\
    \ 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n    public static List<long>\
    \ Pluck(List<long> arr) {\n        List<long> result = new List<long>();\n   \
    \     long smallest_value = arr.Min();\n        long smallest_index = 0;\n   \
    \     bool found = false;\n        for (int i = 0; i < arr.Count; i++) {\n   \
    \         if (arr[i] % 2 == 0) {\n                if (smallest_value == arr[i])\
    \ {\n                    found = true;\n                    smallest_index = i;\n\
    \                }\n            }\n        }\n        if (found) {\n         \
    \   result.Add(smallest_value);\n            result.Add(smallest_index);\n   \
    \     }\n        return result;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,\
    \ (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <e47a94c504944c8f9d208da40e2c502c>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <e47a94c504944c8f9d208da40e2c502c>:0 \n\nUnhandled Exception:\n\
    System.InvalidOperationException: Sequence contains no elements\n  at System.Linq.Enumerable.Min\
    \ (System.Collections.Generic.IEnumerable`1[T] source) [0x00022] in <e540098dd111461e919c5863f6975c29>:0\
    \ \n  at Problem.Pluck (System.Collections.Generic.List`1[T] arr) [0x00007] in\
    \ <e47a94c504944c8f9d208da40e2c502c>:0 \n  at Prob"
  stdout: ''
  timestamp: 1659976382
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 2:\n    // Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n    // Example 3:\n    // Example 4:\n    // Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n    // so we will choose\
    \ the first zero, which has the smallest index.\n    // Constraints:\n    // *\
    \ 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n    public static List<long>\
    \ Pluck(List<long> arr) {\n        long smalest_value = arr.Min();\n        List<long>\
    \ result = new List<long>();\n        long smallest_index = -1;\n        long\
    \ smallest_even_value = -1;\n        foreach (long n in arr) {\n            if\
    \ (n % 2 == 0) {\n                if (smallest_even_value == -1) {\n         \
    \           smallest_even_value = n;\n                    smallest_index = n;\n\
    \                } else {\n                    if (n < smallest_even_value) {\n\
    \                        smallest_even_value = n;\n                        smallest_index\
    \ = n;\n                    }\n                }\n            }\n        }\n \
    \       if (smallest_even_value != -1) {\n            result.Add(smallest_even_value);\n\
    \            result.Add(smallest_index);\n        }\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,\
    \ (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a792fef133cc4b76bc53ceba0316a0a7>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a792fef133cc4b76bc53ceba0316a0a7>:0 \n\nUnhandled Exception:\n\
    System.InvalidOperationException: Sequence contains no elements\n  at System.Linq.Enumerable.Min\
    \ (System.Collections.Generic.IEnumerable`1[T] source) [0x00022] in <e540098dd111461e919c5863f6975c29>:0\
    \ \n  at Problem.Pluck (System.Collections.Generic.List`1[T] arr) [0x00001] in\
    \ <a792fef133cc4b76bc53ceba0316a0a7>:0 \n  at Prob"
  stdout: ''
  timestamp: 1659976382
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 2:\n    // Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n    // Example 3:\n    // Example 4:\n    // Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n    // so we will choose\
    \ the first zero, which has the smallest index.\n    // Constraints:\n    // *\
    \ 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n    public static List<long>\
    \ Pluck(List<long> arr) {\n        List<long> result = new List<long>();\n   \
    \     long smalest_value = arr.Min();\n        long smalest_index = 0;\n     \
    \   long smalest_even_value = 0;\n        for (int i = 0; i < arr.Count; i++)\
    \ {\n            if (arr[i] % 2 == 0) {\n                if (smalest_value ==\
    \ 0) {\n                    smalest_value = arr[i];\n                    smalest_index\
    \ = i;\n                    smalest_even_value = arr[i] / 2;\n               \
    \ } else if (smalest_value == arr[i]) {\n                    smalest_index = i;\n\
    \                    smalest_even_value = arr[i] / 2;\n                } else\
    \ if (smalest_value < arr[i]) {\n                    smalest_value = arr[i];\n\
    \                    smalest_index = i;\n                    smalest_even_value\
    \ = arr[i] / 2;\n                }\n            }\n        }\n        if (smalest_value\
    \ == 0) {\n            return new List<long>();\n        }\n        result.Add(smalest_value);\n\
    \        result.Add(smalest_index);\n        result.Add(smalest_even_value);\n\
    \        return result;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,\
    \ (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <20e44f4f938d47a7b3dc0fa663e85090>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <20e44f4f938d47a7b3dc0fa663e85090>:0 \n\nUnhandled Exception:\n\
    System.InvalidOperationException: Sequence contains no elements\n  at System.Linq.Enumerable.Min\
    \ (System.Collections.Generic.IEnumerable`1[T] source) [0x00022] in <e540098dd111461e919c5863f6975c29>:0\
    \ \n  at Problem.Pluck (System.Collections.Generic.List`1[T] arr) [0x00007] in\
    \ <20e44f4f938d47a7b3dc0fa663e85090>:0 \n  at Prob"
  stdout: ''
  timestamp: 1659976382
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 2:\n    // Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n    // Example 3:\n    // Example 4:\n    // Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n    // so we will choose\
    \ the first zero, which has the smallest index.\n    // Constraints:\n    // *\
    \ 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n    public static List<long>\
    \ Pluck(List<long> arr) {\n        long smalest_value = arr.Min();\n        long\
    \ smalest_index = 0;\n        List<long> result = new List<long>();\n        foreach\
    \ (var item in arr) {\n            if (item % 2 == 0) {\n                if (item\
    \ < smalest_value) {\n                    smalest_value = item;\n            \
    \        smalest_index = arr.IndexOf(item);\n                }\n            }\n\
    \        }\n        if (smalest_index > 0) {\n            result.Add(smalest_value);\n\
    \            result.Add(smalest_index);\n        }\n        return result;\n \
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,\
    \ (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <870e47883b6848978c953e2285110330>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <870e47883b6848978c953e2285110330>:0 \n\nUnhandled Exception:\n\
    System.InvalidOperationException: Sequence contains no elements\n  at System.Linq.Enumerable.Min\
    \ (System.Collections.Generic.IEnumerable`1[T] source) [0x00022] in <e540098dd111461e919c5863f6975c29>:0\
    \ \n  at Problem.Pluck (System.Collections.Generic.List`1[T] arr) [0x00001] in\
    \ <870e47883b6848978c953e2285110330>:0 \n  at Prob"
  stdout: ''
  timestamp: 1659976381
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 2:\n    // Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n    // Example 3:\n    // Example 4:\n    // Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n    // so we will choose\
    \ the first zero, which has the smallest index.\n    // Constraints:\n    // *\
    \ 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n    public static List<long>\
    \ Pluck(List<long> arr) {\n        List<long> result = new List<long>();\n   \
    \     long smallest_value = 0;\n        long smallest_index = 0;\n        long\
    \ smallest_even_value = 0;\n        long smallest_even_count = 0;\n        foreach\
    \ (long n in arr) {\n            if (n % 2 == 0) {\n                if (smallest_even_count\
    \ < n) {\n                    smallest_even_value = n;\n                    smallest_even_count\
    \ = n;\n                }\n                if (smallest_even_count == n) {\n \
    \                   smallest_value = smallest_even_value / 2;\n              \
    \      smallest_index = smallest_even_count - 1;\n                }\n        \
    \    }\n        }\n        if (smallest_even_count > 0) {\n            result.Add(smallest_even_value);\n\
    \            result.Add(smallest_index);\n        }\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,\
    \ (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <0cd742094a3d469d8ce4e1ef0928c848>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <0cd742094a3d469d8ce4e1ef0928c848>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976382
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 2:\n    // Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n    // Example 3:\n    // Example 4:\n    // Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n    // so we will choose\
    \ the first zero, which has the smallest index.\n    // Constraints:\n    // *\
    \ 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n    public static List<long>\
    \ Pluck(List<long> arr) {\n        List<long> result = new List<long>();\n   \
    \     long smallestEvenValue = arr.Min();\n        long smallestIndex = 0;\n \
    \       long smallestIndexValue = 0;\n        bool isSmallestEvenValue = true;\n\
    \        bool isSmallestEvenValueIndex = true;\n        bool isSmallestEvenValueIndexValue\
    \ = true;\n        bool isSmallestEvenValueIndexValueValue = true;\n        bool\
    \ isSmallestEvenValueIndexValueValueValue = true;\n        bool isSmallestEvenValueIndexValueValueValueValue\
    \ = true;\n        bool isSmallestEvenValueIndexValueValueValueValueValue = true;\n\
    \        bool isSmallestEvenValueIndexValueValueValueValueValueValue = true;\n\
    \        bool isSmallestEvenValueIndexValueValueValueValueValueValueValue = true;\n\
    \        bool isSmallestEvenValueIndexValueValueValueValueValueValueValue = true;\n\
    \        bool isSmallestEvenValueIndexValueValueValueValueValueValueValueValue\
    \ = true;\n        bool isSmallestEvenValueIndexValueValueValueValueValueValueValueValueValue\
    \ = true;\n        bool isSmallestEvenValueIndexValueValueValueValueValueValueValueValueValueValue\
    \ = true;\n        bool isSmallestEvenValueIndexValueValueValueValueValueValueValueValueValueValueValue\
    \ = true;\n        bool isSmallestEvenValueIndexValueValueValueValueValueValueValueValueValueValueValueValue\
    \ = true;\n        bool isSmallestEvenValueIndexValueValueValueValueValueValueValueValueValueValueValueValue\
    \ = true;\n        bool isSmallestEvenValueIndexValueValueValueValueValueValueValueValueValueValueValueValue\
    \ = true;\n        bool isSmallestEvenValueIndexValueValueValueValueValueValueValueValueValueValueValueValue\
    \ = true;\n        bool isSmallestEvenValueIndexValueValueValueValueValueValueValueValueValueValueValueValueValue\
    \ = true;\n        bool isSmallestEvenValueIndexValueValueValueValueValueValueValueValueValueValueValueValueValueValue\
    \ = true;\n        bool isSmallestEvenValueIndexValueValueValueValueValueValueValueValueValueValueValueValueValueValue\
    \ = true;\n        bool isSmallestEvenValueIndexValueValueValueValueValueValueValueValueValueValueValueValueValueValue\
    \ = true;\n        bool isSmallestEvenValueIndexValueValueValueValueValueValueValueValueValueValueValueValueValueValue\
    \ = true;\n        bool isSmallestEvenValueIndexValueValueValueValueValueValueValueValueValueValueValueValueValueValueValue\
    \ = true;\n        bool isSmallestEvenValueIndex\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L,\
    \ (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n\
    \    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp69yr9n5x.cs(55,38): error CS1002: ; expected

    '
  timestamp: 1659976382
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 2:\n    // Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n    // Example 3:\n    // Example 4:\n    // Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n    // so we will choose\
    \ the first zero, which has the smallest index.\n    // Constraints:\n    // *\
    \ 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n    public static List<long>\
    \ Pluck(List<long> arr) {\n        List<long> result = new List<long>();\n   \
    \     long smallestEvenValue = 0;\n        int smallestIndex = 0;\n        for\
    \ (int i = 0; i < arr.Count; i++) {\n            if (arr[i] % 2 == 0) {\n    \
    \            smallestEvenValue = arr[i];\n                smallestIndex = i;\n\
    \            }\n        }\n        if (smallestEvenValue == 0) {\n           \
    \ return result;\n        }\n        List<long> evenValues = new List<long>();\n\
    \        for (int i = 0; i < arr.Count; i++) {\n            if (arr[i] % 2 ==\
    \ 0) {\n                evenValues.Add(arr[i]);\n            }\n        }\n  \
    \      smallestEvenValue = evenValues.Min();\n        smallestIndex = evenValues.IndexOf(smallestEvenValue);\n\
    \        result.Add(smallestEvenValue);\n        result.Add(smallestIndex);\n\
    \        return result;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,\
    \ (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <236252812071401ab63ffecf80e5332b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <236252812071401ab63ffecf80e5332b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976383
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 2:\n    // Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n    // Example 3:\n    // Example 4:\n    // Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n    // so we will choose\
    \ the first zero, which has the smallest index.\n    // Constraints:\n    // *\
    \ 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n    public static List<long>\
    \ Pluck(List<long> arr) {\n        List<long> result = new List<long>();\n   \
    \     long smallest_value = arr.Min();\n        long smallest_index = 0;\n   \
    \     long smallest_even_value = 0;\n        foreach (var item in arr) {\n   \
    \         if (item % 2 == 0) {\n                if (smallest_even_value < item)\
    \ {\n                    smallest_even_value = item;\n                    smallest_index\
    \ = item;\n                }\n            }\n            if (item < smallest_value)\
    \ {\n                smallest_value = item;\n                smallest_index =\
    \ item;\n            }\n        }\n        result.Add(smallest_value);\n     \
    \   result.Add(smallest_index);\n        return result;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L,\
    \ (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n\
    \    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <f572858f84f24d16a66a64de9cc4a8c2>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <f572858f84f24d16a66a64de9cc4a8c2>:0 \n\nUnhandled Exception:\n\
    System.InvalidOperationException: Sequence contains no elements\n  at System.Linq.Enumerable.Min\
    \ (System.Collections.Generic.IEnumerable`1[T] source) [0x00022] in <e540098dd111461e919c5863f6975c29>:0\
    \ \n  at Problem.Pluck (System.Collections.Generic.List`1[T] arr) [0x00007] in\
    \ <f572858f84f24d16a66a64de9cc4a8c2>:0 \n  at Prob"
  stdout: ''
  timestamp: 1659976382
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 2:\n    // Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n    // Example 3:\n    // Example 4:\n    // Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n    // so we will choose\
    \ the first zero, which has the smallest index.\n    // Constraints:\n    // *\
    \ 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n    public static List<long>\
    \ Pluck(List<long> arr) {\n        List<long> result = new List<long>();\n   \
    \     long smallestEvenValue = arr.Min();\n        long smallestIndex = 0;\n \
    \       foreach (long value in arr) {\n            if (value % 2 == 0) {\n   \
    \             if (smallestEvenValue < value) {\n                    smallestEvenValue\
    \ = value;\n                    smallestIndex = arr.IndexOf(value);\n        \
    \        }\n            }\n        }\n        if (smallestEvenValue == 0) {\n\
    \            return new List<long>();\n        }\n        result.Add(smallestEvenValue);\n\
    \        result.Add(smallestIndex);\n        return result;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n\
    \    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n   \
    \ Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,\
    \ (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <360aac3fdac943158a5d9c106a84cad5>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <360aac3fdac943158a5d9c106a84cad5>:0 \n\nUnhandled Exception:\n\
    System.InvalidOperationException: Sequence contains no elements\n  at System.Linq.Enumerable.Min\
    \ (System.Collections.Generic.IEnumerable`1[T] source) [0x00022] in <e540098dd111461e919c5863f6975c29>:0\
    \ \n  at Problem.Pluck (System.Collections.Generic.List`1[T] arr) [0x00007] in\
    \ <360aac3fdac943158a5d9c106a84cad5>:0 \n  at Prob"
  stdout: ''
  timestamp: 1659976382
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 2:\n    // Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n    // Example 3:\n    // Example 4:\n    // Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n    // so we will choose\
    \ the first zero, which has the smallest index.\n    // Constraints:\n    // *\
    \ 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n    public static List<long>\
    \ Pluck(List<long> arr) {\n        long smalest_value = arr.Min();\n        long\
    \ smalest_index = 0;\n        List<long> result = new List<long>();\n        foreach\
    \ (long n in arr) {\n            if (n % 2 == 0) {\n                if (smalest_value\
    \ == n) {\n                    smalest_index = arr.IndexOf(n);\n             \
    \   }\n                else {\n                    if (smalest_value < n) {\n\
    \                        smalest_value = n;\n                        smalest_index\
    \ = arr.IndexOf(n);\n                    }\n                }\n            }\n\
    \        }\n        if (smalest_index > 0) {\n            result.Add(smalest_value);\n\
    \            result.Add(smalest_index);\n        }\n        return result;\n \
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,\
    \ (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <4a0ce225ea1144bbaf26d2d5e690f5d1>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <4a0ce225ea1144bbaf26d2d5e690f5d1>:0 \n\nUnhandled Exception:\n\
    System.InvalidOperationException: Sequence contains no elements\n  at System.Linq.Enumerable.Min\
    \ (System.Collections.Generic.IEnumerable`1[T] source) [0x00022] in <e540098dd111461e919c5863f6975c29>:0\
    \ \n  at Problem.Pluck (System.Collections.Generic.List`1[T] arr) [0x00001] in\
    \ <4a0ce225ea1144bbaf26d2d5e690f5d1>:0 \n  at Prob"
  stdout: ''
  timestamp: 1659976380
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 2:\n    // Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n    // Example 3:\n    // Example 4:\n    // Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n    // so we will choose\
    \ the first zero, which has the smallest index.\n    // Constraints:\n    // *\
    \ 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n    public static List<long>\
    \ Pluck(List<long> arr) {\n        List<long> result = new List<long>();\n   \
    \     long smallestEven = arr.Min();\n        int smallestIndex = arr.FindIndex(x\
    \ => x == smallestEven);\n        if (smallestIndex == -1) {\n            return\
    \ result;\n        }\n        long smallestValue = arr[smallestIndex];\n     \
    \   long smallestEvenValue = arr[smallestIndex];\n        for (int i = smallestIndex\
    \ + 1; i < arr.Count; i++) {\n            if (arr[i] % 2 == 0) {\n           \
    \     smallestEvenValue = arr[i];\n                smallestEven = arr[i];\n  \
    \              smallestIndex = i;\n            }\n        }\n        result.Add(smallestEvenValue);\n\
    \        result.Add(smallestIndex);\n        return result;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n\
    \    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n   \
    \ Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,\
    \ (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <cb5bf8d1b9da4d63a78a8dbb3c763346>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <cb5bf8d1b9da4d63a78a8dbb3c763346>:0 \n\nUnhandled Exception:\n\
    System.InvalidOperationException: Sequence contains no elements\n  at System.Linq.Enumerable.Min\
    \ (System.Collections.Generic.IEnumerable`1[T] source) [0x00022] in <e540098dd111461e919c5863f6975c29>:0\
    \ \n  at Problem.Pluck (System.Collections.Generic.List`1[T] arr) [0x0000d] in\
    \ <cb5bf8d1b9da4d63a78a8dbb3c763346>:0 \n  at Prob"
  stdout: ''
  timestamp: 1659976382
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 2:\n    // Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n    // Example 3:\n    // Example 4:\n    // Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n    // so we will choose\
    \ the first zero, which has the smallest index.\n    // Constraints:\n    // *\
    \ 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n    public static List<long>\
    \ Pluck(List<long> arr) {\n        long smalest_value = arr.Min();\n        List<long>\
    \ result = new List<long>();\n        long smallest_index = 0;\n        long smallest_even_value\
    \ = 0;\n        bool found = false;\n        for (int i = 0; i < arr.Count; i++)\
    \ {\n            if (arr[i] % 2 == 0) {\n                if (arr[i] < smallest_even_value)\
    \ {\n                    smallest_even_value = arr[i];\n                    smallest_index\
    \ = i;\n                }\n                found = true;\n            }\n    \
    \    }\n        if (found) {\n            result.Add(smallest_even_value);\n \
    \           result.Add(smallest_index);\n        }\n        return result;\n \
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,\
    \ (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <e2ce2a1c9ef84412a005f35fa6ebff6a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <e2ce2a1c9ef84412a005f35fa6ebff6a>:0 \n\nUnhandled Exception:\n\
    System.InvalidOperationException: Sequence contains no elements\n  at System.Linq.Enumerable.Min\
    \ (System.Collections.Generic.IEnumerable`1[T] source) [0x00022] in <e540098dd111461e919c5863f6975c29>:0\
    \ \n  at Problem.Pluck (System.Collections.Generic.List`1[T] arr) [0x00001] in\
    \ <e2ce2a1c9ef84412a005f35fa6ebff6a>:0 \n  at Prob"
  stdout: ''
  timestamp: 1659976382
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 2:\n    // Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n    // Example 3:\n    // Example 4:\n    // Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n    // so we will choose\
    \ the first zero, which has the smallest index.\n    // Constraints:\n    // *\
    \ 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n    public static List<long>\
    \ Pluck(List<long> arr) {\n        List<long> result = new List<long>();\n   \
    \     long smalest_value = arr.Min();\n        long smalest_index = 0;\n     \
    \   bool found = false;\n        for (int i = 0; i < arr.Count; i++) {\n     \
    \       if (arr[i] % 2 == 0) {\n                if (smalest_value == arr[i]) {\n\
    \                    found = true;\n                    smalest_index = i;\n \
    \               }\n                else if (found == true) {\n               \
    \     if (smalest_index == i) {\n                        result.Add(smalest_value);\n\
    \                        result.Add(smalest_index);\n                        found\
    \ = false;\n                    }\n                    else {\n              \
    \          result.Add(smalest_value);\n                        result.Add(smalest_index);\n\
    \                        found = true;\n                    }\n              \
    \  }\n            }\n        }\n        if (found == false) {\n            result.Add(smalest_value);\n\
    \            result.Add(smalest_index);\n        }\n        return result;\n \
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,\
    \ (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <81bbe1664d3b40fea299910abc0ce9bf>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <81bbe1664d3b40fea299910abc0ce9bf>:0 \n\nUnhandled Exception:\n\
    System.InvalidOperationException: Sequence contains no elements\n  at System.Linq.Enumerable.Min\
    \ (System.Collections.Generic.IEnumerable`1[T] source) [0x00022] in <e540098dd111461e919c5863f6975c29>:0\
    \ \n  at Problem.Pluck (System.Collections.Generic.List`1[T] arr) [0x00007] in\
    \ <81bbe1664d3b40fea299910abc0ce9bf>:0 \n  at Prob"
  stdout: ''
  timestamp: 1659976383
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 2:\n    // Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n    // Example 3:\n    // Example 4:\n    // Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n    // so we will choose\
    \ the first zero, which has the smallest index.\n    // Constraints:\n    // *\
    \ 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n    public static List<long>\
    \ Pluck(List<long> arr) {\n        List<long> result = new List<long>();\n   \
    \     long smallestEvenValue = arr.Min();\n        long smallestIndex = 0;\n \
    \       foreach (long value in arr) {\n            if (value % 2 == 0) {\n   \
    \             if (value < smallestEvenValue) {\n                    smallestEvenValue\
    \ = value;\n                    smallestIndex = arr.IndexOf(value);\n        \
    \        }\n            }\n        }\n        result.Add(smallestEvenValue);\n\
    \        result.Add(smallestIndex);\n        return result;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n\
    \    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n   \
    \ Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,\
    \ (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <4c5791f92c004a8b93d69071e8ac8df6>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <4c5791f92c004a8b93d69071e8ac8df6>:0 \n\nUnhandled Exception:\n\
    System.InvalidOperationException: Sequence contains no elements\n  at System.Linq.Enumerable.Min\
    \ (System.Collections.Generic.IEnumerable`1[T] source) [0x00022] in <e540098dd111461e919c5863f6975c29>:0\
    \ \n  at Problem.Pluck (System.Collections.Generic.List`1[T] arr) [0x00007] in\
    \ <4c5791f92c004a8b93d69071e8ac8df6>:0 \n  at Prob"
  stdout: ''
  timestamp: 1659976382
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 2:\n    // Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n    // Example 3:\n    // Example 4:\n    // Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n    // so we will choose\
    \ the first zero, which has the smallest index.\n    // Constraints:\n    // *\
    \ 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n    public static List<long>\
    \ Pluck(List<long> arr) {\n        List<long> result = new List<long>();\n   \
    \     long smalest_value = arr.Min();\n        long smalest_index = 0;\n     \
    \   long smalest_even_value = 0;\n        long smalest_even_index = 0;\n     \
    \   foreach (long i in arr) {\n            if (i % 2 == 0) {\n               \
    \ if (smalest_even_value == 0) {\n                    smalest_even_value = i;\n\
    \                    smalest_even_index = i;\n                } else if (smalest_even_value\
    \ < i) {\n                    smalest_even_value = i;\n                    smalest_even_index\
    \ = i;\n                }\n            } else {\n                if (smalest_value\
    \ == 0) {\n                    smalest_value = i;\n                    smalest_index\
    \ = i;\n                } else if (smalest_value < i) {\n                    smalest_value\
    \ = i;\n                    smalest_index = i;\n                }\n          \
    \  }\n        }\n        if (smalest_even_value == 0) {\n            result.Add(smalest_value);\n\
    \            result.Add(smalest_index);\n        } else {\n            result.Add(smalest_even_value);\n\
    \            result.Add(smalest_even_index);\n        }\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,\
    \ (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <727560a798f045de8cfea1ae021f5023>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <727560a798f045de8cfea1ae021f5023>:0 \n\nUnhandled Exception:\n\
    System.InvalidOperationException: Sequence contains no elements\n  at System.Linq.Enumerable.Min\
    \ (System.Collections.Generic.IEnumerable`1[T] source) [0x00022] in <e540098dd111461e919c5863f6975c29>:0\
    \ \n  at Problem.Pluck (System.Collections.Generic.List`1[T] arr) [0x00007] in\
    \ <727560a798f045de8cfea1ae021f5023>:0 \n  at Prob"
  stdout: ''
  timestamp: 1659976383
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 2:\n    // Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n    // Example 3:\n    // Example 4:\n    // Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n    // so we will choose\
    \ the first zero, which has the smallest index.\n    // Constraints:\n    // *\
    \ 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n    public static List<long>\
    \ Pluck(List<long> arr) {\n        long smalest_value = arr.Min();\n        List<long>\
    \ result = new List<long>();\n        long smallest_index = arr.FindIndex(x =>\
    \ x == smalest_value);\n        if (smallest_index == -1) {\n            return\
    \ result;\n        }\n        long smallest_even_value = arr[smallest_index];\n\
    \        bool found = false;\n        for (int i = 0; i < arr.Count; i++) {\n\
    \            if (arr[i] == smallest_even_value) {\n                found = true;\n\
    \                break;\n            }\n        }\n        if (found) {\n    \
    \        result.Add(smallest_even_value);\n            result.Add(smallest_index);\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L,\
    \ (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n  \
    \  Debug.Assert(Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpnairz4xb.cs(33,40): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    '
  timestamp: 1659976382
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 2:\n    // Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n    // Example 3:\n    // Example 4:\n    // Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n    // so we will choose\
    \ the first zero, which has the smallest index.\n    // Constraints:\n    // *\
    \ 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n    public static List<long>\
    \ Pluck(List<long> arr) {\n        long smalest_value = 0;\n        long smalest_index\
    \ = 0;\n        List<long> result = new List<long>();\n        foreach (long n\
    \ in arr) {\n            if (n % 2 == 0) {\n                if (smalest_value\
    \ < n) {\n                    smalest_value = n;\n                    smalest_index\
    \ = arr.IndexOf(n);\n                }\n            }\n        }\n        if (smalest_index\
    \ != arr.IndexOf(smalest_value)) {\n            smalest_value = arr[smalest_index];\n\
    \            smalest_index = arr.IndexOf(smalest_value);\n        }\n        result.Add(smalest_value);\n\
    \        result.Add(smalest_index);\n        return result;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n\
    \    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n   \
    \ Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,\
    \ (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmptkv3t0r0.cs(39,33): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    '
  timestamp: 1659976382
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 2:\n    // Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n    // Example 3:\n    // Example 4:\n    // Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n    // so we will choose\
    \ the first zero, which has the smallest index.\n    // Constraints:\n    // *\
    \ 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n    public static List<long>\
    \ Pluck(List<long> arr) {\n        long smalest_value = arr.Min();\n        long\
    \ smalest_index = 0;\n        List<long> result = new List<long>();\n        foreach\
    \ (long n in arr) {\n            if (n % 2 == 0) {\n                if (smalest_value\
    \ == 0 || n < smalest_value) {\n                    smalest_value = n;\n     \
    \               smalest_index = arr.IndexOf(n);\n                }\n         \
    \   }\n        }\n        if (smalest_index != 0) {\n            result.Add(smalest_value);\n\
    \            result.Add(smalest_index);\n        }\n        return result;\n \
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,\
    \ (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <86ca285374ad4a0eb6866ee9a61eef63>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <86ca285374ad4a0eb6866ee9a61eef63>:0 \n\nUnhandled Exception:\n\
    System.InvalidOperationException: Sequence contains no elements\n  at System.Linq.Enumerable.Min\
    \ (System.Collections.Generic.IEnumerable`1[T] source) [0x00022] in <e540098dd111461e919c5863f6975c29>:0\
    \ \n  at Problem.Pluck (System.Collections.Generic.List`1[T] arr) [0x00001] in\
    \ <86ca285374ad4a0eb6866ee9a61eef63>:0 \n  at Prob"
  stdout: ''
  timestamp: 1659976383
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 2:\n    // Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n    // Example 3:\n    // Example 4:\n    // Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n    // so we will choose\
    \ the first zero, which has the smallest index.\n    // Constraints:\n    // *\
    \ 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n    public static List<long>\
    \ Pluck(List<long> arr) {\n        List<long> result = new List<long>();\n   \
    \     long smallestEvenValue = 0;\n        long smallestIndex = 0;\n        long\
    \ currentIndex = 0;\n        bool isSmallestEvenValue = true;\n        bool isSmallestIndex\
    \ = true;\n        bool isSmallestValue = true;\n        bool isSmallestIndexValue\
    \ = true;\n        bool isSmallestIndexIndex = true;\n        bool isSmallestIndexEvenValue\
    \ = true;\n        bool isSmallestIndexEvenIndex = true;\n        bool isSmallestIndexEvenValueIndex\
    \ = true;\n        bool isSmallestIndexEvenIndexIndex = true;\n        bool isSmallestIndexEvenIndexValueIndex\
    \ = true;\n        bool isSmallestIndexEvenIndexIndexValueIndex = true;\n    \
    \    bool isSmallestIndexEvenIndexIndexIndexValueIndex = true;\n        bool isSmallestIndexEvenIndexIndexIndexIndexValueIndex\
    \ = true;\n        bool isSmallestIndexEvenIndexIndexIndexIndexIndexValueIndex\
    \ = true;\n        bool isSmallestIndexEvenIndexIndexIndexIndexIndexValueIndex\
    \ = true;\n        bool isSmallestIndexEvenIndexIndexIndexIndexIndexValueIndex\
    \ = true;\n        bool isSmallestIndexEvenIndexIndexIndexIndexIndexValueIndex\
    \ = true;\n        bool isSmallestIndexEvenIndexIndexIndexIndexIndexValueIndex\
    \ = true;\n        bool isSmallestIndexEvenIndexIndexIndexIndexIndexValueIndex\
    \ = true;\n        bool isSmallestIndexEvenIndexIndexIndexIndexIndexValueIndex\
    \ = true;\n        bool isSmallestIndexEvenIndexIndexIndexIndexIndexValueIndex\
    \ = true;\n        bool isSmallestIndexEvenIndexIndexIndexIndexIndexValueIndex\
    \ = true;\n        bool isSmallestIndexEvenIndexIndexIndexIndexIndexValueIndex\
    \ = true;\n        bool isSmallestIndexEvenIndexIndexIndexIndexIndexValueIndex\
    \ = true;\n        bool isSmallestIndexEvenIndexIndexIndexIndexIndexValueIndex\
    \ = true;\n        bool isSmallestIndexEvenIndexIndexIndexIndexIndexValueIndex\
    \ = true;\n        bool isSmallestIndexEvenIndexIndexIndexIndexIndexValueIndex\
    \ = true;\n        bool isSmallestIndexEvenIndexIndexIndexIndexIndexValueIndex\
    \ = true;\n        bool isSmallestIndexEvenIndexIndexIndexIndexIndexValueIndex\
    \ = true;\n        bool isSmallestIndexEvenIndexIndexIndexIndexIndexValueIndex\
    \ = true;\n        bool isSmallestIndexEvenIndexIndexIndexIndexIndexValueIndex\
    \ = true;\n        bool isSmallestIndexEvenIndexIndexIndexIndexIndexValueIndex\
    \ = true;\n        bool isSmallest\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L,\
    \ (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n  \
    \  Debug.Assert(Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpji1o_jhr.cs(63,24): error CS1002: ; expected

    '
  timestamp: 1659976382
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 2:\n    // Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n    // Example 3:\n    // Example 4:\n    // Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n    // so we will choose\
    \ the first zero, which has the smallest index.\n    // Constraints:\n    // *\
    \ 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n    public static List<long>\
    \ Pluck(List<long> arr) {\n        long smalest_value = arr.Min();\n        long\
    \ smalest_index = 0;\n        List<long> result = new List<long>();\n        foreach\
    \ (long n in arr) {\n            if (n % 2 == 0) {\n                if (smalest_value\
    \ < n) {\n                    smalest_value = n;\n                    smalest_index\
    \ = arr.IndexOf(n);\n                }\n            }\n        }\n        if (smalest_value\
    \ == 0) {\n            return new List<long>();\n        }\n        result.Add(smalest_value);\n\
    \        result.Add(smalest_index);\n        return result;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n\
    \    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n   \
    \ Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,\
    \ (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c89e4448d0a641fd91f34010e9b30020>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c89e4448d0a641fd91f34010e9b30020>:0 \n\nUnhandled Exception:\n\
    System.InvalidOperationException: Sequence contains no elements\n  at System.Linq.Enumerable.Min\
    \ (System.Collections.Generic.IEnumerable`1[T] source) [0x00022] in <e540098dd111461e919c5863f6975c29>:0\
    \ \n  at Problem.Pluck (System.Collections.Generic.List`1[T] arr) [0x00001] in\
    \ <c89e4448d0a641fd91f34010e9b30020>:0 \n  at Prob"
  stdout: ''
  timestamp: 1659976380
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 2:\n    // Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n    // Example 3:\n    // Example 4:\n    // Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n    // so we will choose\
    \ the first zero, which has the smallest index.\n    // Constraints:\n    // *\
    \ 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n    public static List<long>\
    \ Pluck(List<long> arr) {\n        long smalest_value = arr.Min();\n        long\
    \ smalest_index = 0;\n        List<long> result = new List<long>();\n        foreach\
    \ (long n in arr) {\n            if (n % 2 == 0) {\n                if (smalest_value\
    \ < n) {\n                    smalest_value = n;\n                    smalest_index\
    \ = arr.IndexOf(n);\n                }\n            }\n        }\n        if (smalest_value\
    \ == 0) {\n            return new List<long>();\n        }\n        result.Add(smalest_value);\n\
    \        result.Add(smalest_index);\n        return result;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n\
    \    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n   \
    \ Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,\
    \ (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c89e4448d0a641fd91f34010e9b30020>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c89e4448d0a641fd91f34010e9b30020>:0 \n\nUnhandled Exception:\n\
    System.InvalidOperationException: Sequence contains no elements\n  at System.Linq.Enumerable.Min\
    \ (System.Collections.Generic.IEnumerable`1[T] source) [0x00022] in <e540098dd111461e919c5863f6975c29>:0\
    \ \n  at Problem.Pluck (System.Collections.Generic.List`1[T] arr) [0x00001] in\
    \ <c89e4448d0a641fd91f34010e9b30020>:0 \n  at Prob"
  stdout: ''
  timestamp: 1659976380
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 2:\n    // Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n    // Example 3:\n    // Example 4:\n    // Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n    // so we will choose\
    \ the first zero, which has the smallest index.\n    // Constraints:\n    // *\
    \ 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n    public static List<long>\
    \ Pluck(List<long> arr) {\n        List<long> result = new List<long>();\n   \
    \     long smallest_value = arr.Min();\n        long smallest_index = 0;\n   \
    \     long smallest_even_value = 0;\n        long smallest_even_count = 0;\n \
    \       bool found = false;\n        for (int i = 0; i < arr.Count; i++) {\n \
    \           if (arr[i] % 2 == 0) {\n                smallest_even_count++;\n \
    \               if (smallest_even_count == 1) {\n                    smallest_even_value\
    \ = arr[i];\n                    found = true;\n                }\n          \
    \  }\n            if (found == true) {\n                if (arr[i] < smallest_value)\
    \ {\n                    smallest_value = arr[i];\n                    smallest_index\
    \ = i;\n                }\n            }\n        }\n        if (smallest_even_count\
    \ == 0) {\n            return result;\n        }\n        List<long> evens = new\
    \ List<long>();\n        for (int i = 0; i < arr.Count; i++) {\n            if\
    \ (arr[i] % 2 == 0) {\n                evens.Add(arr[i]);\n            }\n   \
    \     }\n        evens.Sort();\n        smallest_value = evens.First();\n    \
    \    smallest_index = evens.IndexOf(smallest_value);\n        result.Add(smallest_value);\n\
    \        result.Add(smallest_index);\n        return result;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n\
    \    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n   \
    \ Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,\
    \ (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <0b3f5ddd24fd4d6e8d63597fa7d6fd45>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <0b3f5ddd24fd4d6e8d63597fa7d6fd45>:0 \n\nUnhandled Exception:\n\
    System.InvalidOperationException: Sequence contains no elements\n  at System.Linq.Enumerable.Min\
    \ (System.Collections.Generic.IEnumerable`1[T] source) [0x00022] in <e540098dd111461e919c5863f6975c29>:0\
    \ \n  at Problem.Pluck (System.Collections.Generic.List`1[T] arr) [0x00007] in\
    \ <0b3f5ddd24fd4d6e8d63597fa7d6fd45>:0 \n  at Prob"
  stdout: ''
  timestamp: 1659976383
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 2:\n    // Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n    // Example 3:\n    // Example 4:\n    // Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n    // so we will choose\
    \ the first zero, which has the smallest index.\n    // Constraints:\n    // *\
    \ 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n    public static List<long>\
    \ Pluck(List<long> arr) {\n        List<long> result = new List<long>();\n   \
    \     long smallestEven = arr.Min();\n        long smallestIndex = arr.IndexOf(smallestEven);\n\
    \        long smallestValue = smallestEven;\n        long smallestIndexValue =\
    \ smallestIndex;\n        bool foundSmallestEven = false;\n        bool foundSmallestIndex\
    \ = false;\n        foreach (long n in arr) {\n            if (n % 2 == 0) {\n\
    \                if (foundSmallestEven) {\n                    result.Add(smallestEven);\n\
    \                    result.Add(smallestIndexValue);\n                    break;\n\
    \                }\n                foundSmallestEven = true;\n              \
    \  smallestEven = n;\n                smallestIndexValue = smallestIndex;\n  \
    \              smallestIndex = arr.IndexOf(n);\n                smallestValue\
    \ = smallestEven;\n                foundSmallestIndex = true;\n            }\n\
    \        }\n        if (foundSmallestEven) {\n            result.Add(smallestEven);\n\
    \            result.Add(smallestIndexValue);\n        }\n        if (foundSmallestIndex)\
    \ {\n            result.Add(smallestIndex);\n        }\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,\
    \ (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8f0caf8aaf5d46e183cce22c73cb1b7c>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8f0caf8aaf5d46e183cce22c73cb1b7c>:0 \n\nUnhandled Exception:\n\
    System.InvalidOperationException: Sequence contains no elements\n  at System.Linq.Enumerable.Min\
    \ (System.Collections.Generic.IEnumerable`1[T] source) [0x00022] in <e540098dd111461e919c5863f6975c29>:0\
    \ \n  at Problem.Pluck (System.Collections.Generic.List`1[T] arr) [0x00007] in\
    \ <8f0caf8aaf5d46e183cce22c73cb1b7c>:0 \n  at Prob"
  stdout: ''
  timestamp: 1659976383
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 2:\n    // Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n    // Example 3:\n    // Example 4:\n    // Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n    // so we will choose\
    \ the first zero, which has the smallest index.\n    // Constraints:\n    // *\
    \ 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n    public static List<long>\
    \ Pluck(List<long> arr) {\n        List<long> result = new List<long>();\n   \
    \     long smallest_even_value = arr.Min();\n        long smallest_even_index\
    \ = arr.IndexOf(smallest_even_value);\n        long smallest_value = smallest_even_value;\n\
    \        long smallest_index = smallest_even_index;\n        foreach (long n in\
    \ arr) {\n            if (n % 2 == 0) {\n                if (smallest_value ==\
    \ smallest_even_value) {\n                    smallest_value = n;\n          \
    \          smallest_index = arr.IndexOf(n);\n                }\n             \
    \   else if (smallest_value < n) {\n                    smallest_value = n;\n\
    \                    smallest_index = arr.IndexOf(n);\n                }\n   \
    \         }\n        }\n        result.Add(smallest_value);\n        result.Add(smallest_index);\n\
    \        return result;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,\
    \ (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <bba764cffeb141efa5aea493a4ded471>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <bba764cffeb141efa5aea493a4ded471>:0 \n\nUnhandled Exception:\n\
    System.InvalidOperationException: Sequence contains no elements\n  at System.Linq.Enumerable.Min\
    \ (System.Collections.Generic.IEnumerable`1[T] source) [0x00022] in <e540098dd111461e919c5863f6975c29>:0\
    \ \n  at Problem.Pluck (System.Collections.Generic.List`1[T] arr) [0x00007] in\
    \ <bba764cffeb141efa5aea493a4ded471>:0 \n  at Prob"
  stdout: ''
  timestamp: 1659976383
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 2:\n    // Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n    // Example 3:\n    // Example 4:\n    // Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n    // so we will choose\
    \ the first zero, which has the smallest index.\n    // Constraints:\n    // *\
    \ 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n    public static List<long>\
    \ Pluck(List<long> arr) {\n        List<long> result = new List<long>();\n   \
    \     long smallest_value = arr.Min();\n        long smallest_index = -1;\n  \
    \      long smallest_even_value = smallest_value;\n        bool found = false;\n\
    \        for (int i = 0; i < arr.Count; i++) {\n            if (arr[i] % 2 ==\
    \ 0) {\n                if (smallest_even_value < arr[i]) {\n                \
    \    smallest_even_value = arr[i];\n                    smallest_index = i;\n\
    \                    found = true;\n                }\n            }\n       \
    \ }\n        if (found) {\n            result.Add(smallest_even_value);\n    \
    \        result.Add(smallest_index);\n        }\n        return result;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n\
    \    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n   \
    \ Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,\
    \ (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <33e940eb1df640c4aa18d843d1c34f9e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <33e940eb1df640c4aa18d843d1c34f9e>:0 \n\nUnhandled Exception:\n\
    System.InvalidOperationException: Sequence contains no elements\n  at System.Linq.Enumerable.Min\
    \ (System.Collections.Generic.IEnumerable`1[T] source) [0x00022] in <e540098dd111461e919c5863f6975c29>:0\
    \ \n  at Problem.Pluck (System.Collections.Generic.List`1[T] arr) [0x00007] in\
    \ <33e940eb1df640c4aa18d843d1c34f9e>:0 \n  at Prob"
  stdout: ''
  timestamp: 1659976383
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 2:\n    // Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n    // Example 3:\n    // Example 4:\n    // Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n    // so we will choose\
    \ the first zero, which has the smallest index.\n    // Constraints:\n    // *\
    \ 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n    public static List<long>\
    \ Pluck(List<long> arr) {\n        List<long> result = new List<long>();\n   \
    \     long smallest_value = arr.Min();\n        int smallest_index = -1;\n   \
    \     for (int i = 0; i < arr.Count; i++) {\n            if (arr[i] < smallest_value)\
    \ {\n                smallest_value = arr[i];\n                smallest_index\
    \ = i;\n            }\n        }\n        if (smallest_index != -1) {\n      \
    \      result.Add(smallest_value);\n            result.Add(smallest_index);\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L,\
    \ (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n  \
    \  Debug.Assert(Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <e30d98c9983b4b5ba6c56500827fc12a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <e30d98c9983b4b5ba6c56500827fc12a>:0 \n\nUnhandled Exception:\n\
    System.InvalidOperationException: Sequence contains no elements\n  at System.Linq.Enumerable.Min\
    \ (System.Collections.Generic.IEnumerable`1[T] source) [0x00022] in <e540098dd111461e919c5863f6975c29>:0\
    \ \n  at Problem.Pluck (System.Collections.Generic.List`1[T] arr) [0x00007] in\
    \ <e30d98c9983b4b5ba6c56500827fc12a>:0 \n  at Prob"
  stdout: ''
  timestamp: 1659976383
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 2:\n    // Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n    // Example 3:\n    // Example 4:\n    // Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n    // so we will choose\
    \ the first zero, which has the smallest index.\n    // Constraints:\n    // *\
    \ 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n    public static List<long>\
    \ Pluck(List<long> arr) {\n        List<long> result = new List<long>();\n   \
    \     long smallest_even_value = arr.Min();\n        int smallest_even_index =\
    \ arr.IndexOf(smallest_even_value);\n        long smallest_value = smallest_even_value;\n\
    \        int smallest_index = smallest_even_index;\n        for (int i = 0; i\
    \ < arr.Count; i++) {\n            if (arr[i] % 2 == 0) {\n                if\
    \ (smallest_value % 2 == 0) {\n                    smallest_value = arr[i];\n\
    \                    smallest_index = i;\n                }\n            }\n \
    \       }\n        result.Add(smallest_value);\n        result.Add(smallest_index);\n\
    \        return result;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,\
    \ (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <4536e6ab6eb248c28d37e07e38fb870f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <4536e6ab6eb248c28d37e07e38fb870f>:0 \n\nUnhandled Exception:\n\
    System.InvalidOperationException: Sequence contains no elements\n  at System.Linq.Enumerable.Min\
    \ (System.Collections.Generic.IEnumerable`1[T] source) [0x00022] in <e540098dd111461e919c5863f6975c29>:0\
    \ \n  at Problem.Pluck (System.Collections.Generic.List`1[T] arr) [0x00007] in\
    \ <4536e6ab6eb248c28d37e07e38fb870f>:0 \n  at Prob"
  stdout: ''
  timestamp: 1659976383
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 2:\n    // Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n    // Example 3:\n    // Example 4:\n    // Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n    // so we will choose\
    \ the first zero, which has the smallest index.\n    // Constraints:\n    // *\
    \ 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n    public static List<long>\
    \ Pluck(List<long> arr) {\n        List<long> result = new List<long>();\n   \
    \     if (arr.Count == 0) {\n            return result;\n        }\n        long\
    \ smallest_value = arr.Min();\n        long smallest_index = 0;\n        bool\
    \ is_even = true;\n        for (int i = 0; i < arr.Count; i++) {\n           \
    \ if (arr[i] < smallest_value) {\n                is_even = false;\n         \
    \       smallest_value = arr[i];\n                smallest_index = i;\n      \
    \      }\n        }\n        if (is_even) {\n            result.Add(smallest_value);\n\
    \            result.Add(smallest_index);\n        } else {\n            int smallest_index_with_smallest_value\
    \ = smallest_index;\n            for (int i = 0; i < arr.Count; i++) {\n     \
    \           if (arr[i] == smallest_value) {\n                    smallest_index_with_smallest_value\
    \ = i;\n                    break;\n                }\n            }\n       \
    \     result.Add(smallest_value);\n            result.Add(smallest_index_with_smallest_value);\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L,\
    \ (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n  \
    \  Debug.Assert(Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpz6smfpzy.cs(45,54): error CS0266: Cannot implicitly convert type ''long''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659976383
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 2:\n    // Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n    // Example 3:\n    // Example 4:\n    // Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n    // so we will choose\
    \ the first zero, which has the smallest index.\n    // Constraints:\n    // *\
    \ 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n    public static List<long>\
    \ Pluck(List<long> arr) {\n        List<long> result = new List<long>();\n   \
    \     long smallestEvenValue = arr.Min();\n        long smallestIndex = 0;\n \
    \       for (int i = 0; i < arr.Count; i++) {\n            if (arr[i] % 2 == 0)\
    \ {\n                if (smallestEvenValue < arr[i]) {\n                    smallestEvenValue\
    \ = arr[i];\n                    smallestIndex = i;\n                }\n     \
    \       }\n        }\n        result.Add(smallestEvenValue);\n        result.Add(smallestIndex);\n\
    \        return result;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,\
    \ (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c43415e87f374ebdaa60b1621d57935f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c43415e87f374ebdaa60b1621d57935f>:0 \n\nUnhandled Exception:\n\
    System.InvalidOperationException: Sequence contains no elements\n  at System.Linq.Enumerable.Min\
    \ (System.Collections.Generic.IEnumerable`1[T] source) [0x00022] in <e540098dd111461e919c5863f6975c29>:0\
    \ \n  at Problem.Pluck (System.Collections.Generic.List`1[T] arr) [0x00007] in\
    \ <c43415e87f374ebdaa60b1621d57935f>:0 \n  at Prob"
  stdout: ''
  timestamp: 1659976383
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 2:\n    // Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n    // Example 3:\n    // Example 4:\n    // Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n    // so we will choose\
    \ the first zero, which has the smallest index.\n    // Constraints:\n    // *\
    \ 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n    public static List<long>\
    \ Pluck(List<long> arr) {\n        long smalest_value = arr.Min();\n        long\
    \ smalest_index = 0;\n        List<long> result = new List<long>();\n        foreach\
    \ (long n in arr) {\n            if (n % 2 == 0) {\n                if (smalest_value\
    \ < n) {\n                    smalest_value = n;\n                    smalest_index\
    \ = arr.IndexOf(n);\n                }\n            }\n        }\n        if (smalest_index\
    \ != 0) {\n            result.Add(smalest_value);\n            result.Add(smalest_index);\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L,\
    \ (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n  \
    \  Debug.Assert(Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <6040d3fb6bc041419af64eb830d62e50>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <6040d3fb6bc041419af64eb830d62e50>:0 \n\nUnhandled Exception:\n\
    System.InvalidOperationException: Sequence contains no elements\n  at System.Linq.Enumerable.Min\
    \ (System.Collections.Generic.IEnumerable`1[T] source) [0x00022] in <e540098dd111461e919c5863f6975c29>:0\
    \ \n  at Problem.Pluck (System.Collections.Generic.List`1[T] arr) [0x00001] in\
    \ <6040d3fb6bc041419af64eb830d62e50>:0 \n  at Prob"
  stdout: ''
  timestamp: 1659976379
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 2:\n    // Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n    // Example 3:\n    // Example 4:\n    // Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n    // so we will choose\
    \ the first zero, which has the smallest index.\n    // Constraints:\n    // *\
    \ 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n    public static List<long>\
    \ Pluck(List<long> arr) {\n        long smalest_value = arr.Min();\n        long\
    \ smalest_index = 0;\n        List<long> result = new List<long>();\n        for\
    \ (int i = 0; i < arr.Count; i++) {\n            if (arr[i] % 2 == 0) {\n    \
    \            if (arr[i] < smalest_value) {\n                    smalest_value\
    \ = arr[i];\n                    smalest_index = i;\n                }\n     \
    \       }\n        }\n        if (smalest_index != 0) {\n            result.Add(smalest_value);\n\
    \            result.Add(smalest_index);\n        }\n        return result;\n \
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,\
    \ (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c33d8a2009d9469ba9eb67a9b4905933>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c33d8a2009d9469ba9eb67a9b4905933>:0 \n\nUnhandled Exception:\n\
    System.InvalidOperationException: Sequence contains no elements\n  at System.Linq.Enumerable.Min\
    \ (System.Collections.Generic.IEnumerable`1[T] source) [0x00022] in <e540098dd111461e919c5863f6975c29>:0\
    \ \n  at Problem.Pluck (System.Collections.Generic.List`1[T] arr) [0x00001] in\
    \ <c33d8a2009d9469ba9eb67a9b4905933>:0 \n  at Prob"
  stdout: ''
  timestamp: 1659976383
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 2:\n    // Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n    // Example 3:\n    // Example 4:\n    // Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n    // so we will choose\
    \ the first zero, which has the smallest index.\n    // Constraints:\n    // *\
    \ 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n    public static List<long>\
    \ Pluck(List<long> arr) {\n        long smallest_even_value = 0;\n        long\
    \ smallest_index = 0;\n        List<long> result = new List<long>();\n       \
    \ foreach (long n in arr) {\n            if (n % 2 == 0) {\n                if\
    \ (smallest_even_value < n) {\n                    smallest_even_value = n;\n\
    \                    smallest_index = n;\n                }\n            }\n \
    \       }\n        if (smallest_even_value == 0) {\n            return result;\n\
    \        }\n        long smallest_value = smallest_even_value;\n        long smallest_index\
    \ = smallest_index;\n        List<long> result_2 = new List<long>();\n       \
    \ foreach (long n in arr) {\n            if (n % 2 == 0) {\n                if\
    \ (smallest_even_value < n) {\n                    smallest_even_value = n;\n\
    \                    smallest_index = n;\n                }\n            }\n \
    \       }\n        if (smallest_even_value == 0) {\n            return result;\n\
    \        }\n        long smallest_value = smallest_even_value;\n        long smallest_index\
    \ = smallest_index;\n        List<long> result_3 = new List<long>();\n       \
    \ foreach (long n in arr) {\n            if (n % 2 == 0) {\n                if\
    \ (smallest_even_value < n) {\n                    smallest_even_value = n;\n\
    \                    smallest_index = n;\n                }\n            }\n \
    \       }\n        if (smallest_even_value == 0) {\n            return result;\n\
    \        }\n        long smallest_value = smallest_even_value;\n        long smallest_index\
    \ = smallest_index;\n        List<long> result_4 = new List<long>();\n       \
    \ foreach (long n in arr) {\n            if (n % 2 == 0) {\n                if\
    \ (smallest_even_value < n) {\n                    smallest_even_value = n;\n\
    \                    smallest_index = n;\n                }\n            }\n \
    \       }\n        if (smallest_even_value == 0) {\n            return result;\n\
    \        }\n        long smallest_value = smallest_even_value;\n        long smallest_index\
    \ = smallest_index;\n        List<long> result_5 = new List<long>();\n       \
    \ foreach (long n in arr) {\n            if (n % 2 == 0) {\n                if\
    \ (smallest_even_value < n) {\n                    smallest_even_value = n;\n\
    \                    smallest_index = n;\n                }\n            }\n \
    \       }\n        if (smallest_even_value == 0) {\n            return result;\n\
    \        }\n        long smallest_value = smallest_even_value;\n        long smallest_index\
    \ = smallest_index;\n        List<long> result_6 = new List<long>();\n       \
    \ foreach (long n in arr) {\n            if (n % 2 == 0) {\n                if\
    \ (smallest_even_value < n) {\n                    smallest_even_value = n;\n\
    \                    smallest_index = n;\n                }\n            }\n \
    \       }\n        if (smallest_even_value == 0) {\n            return result;\n\
    \        }\n        long smallest_value = smallest_even_value;\n        long smallest_index\
    \ = smallest_index;\n\n    }\n    public static void Main(string[] args) {\n \
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,\
    \ (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpgaoira57.cs(42,14): error CS0128: A local variable or function named ''smallest_index''
    is already defined in this scope

    /tmp/tmpgaoira57.cs(55,14): error CS0128: A local variable or function named ''smallest_value''
    is already defined in this scope

    /tmp/tmpgaoira57.cs(56,14): error CS0128: A local variable or function named ''smallest_index''
    is already defined in this scope

    /tmp/tmpgaoira57.cs(69,14): error CS0128: A local variable or function named ''smallest_value''
    is already defined in this scope

    /tmp/tmpgaoira57.cs(70,14): error CS0128: A local variable or function named ''smallest_index''
    is already defined in this scope

    /tmp/tmpgaoira57.cs(83,14): error CS0128: A local variable or function named ''smallest_value''
    is already defined in this scope

    /tmp/tmpgaoira57.cs(84,14): error CS0128: A local variable or function named ''smallest_index''
    is already defined in this scope

    /tmp/tmpgaoira57.cs(97,14): error CS0128: A local variable or function named ''smallest_value''
    is already defined in this scope

    /tmp/tmpgaoira57.cs(98,14): error CS0128: A local variable or function named ''smallest_index''
    is already defined in this scope

    /tmp/tmpgaoira57.cs(111,14): error CS0128: A local variable or function named
    ''smallest_value'' is already defined in this scope

    /tmp/tmpgaoira57.cs(112,14): error CS0128: A local variable or function named
    ''smallest_index'' is already defined in this scope

    /tmp/tmpgaoira57.cs(26,30): error CS0161: ''Problem.Pluck(List<long>)'': not all
    code paths return a value

    '
  timestamp: 1659976383
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 2:\n    // Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n    // Example 3:\n    // Example 4:\n    // Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n    // so we will choose\
    \ the first zero, which has the smallest index.\n    // Constraints:\n    // *\
    \ 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n    public static List<long>\
    \ Pluck(List<long> arr) {\n        List<long> result = new List<long>();\n   \
    \     long smallest_value = arr.Min();\n        long smallest_index = -1;\n  \
    \      bool found = false;\n        for (int i = 0; i < arr.Count; i++) {\n  \
    \          if (arr[i] % 2 == 0) {\n                if (smallest_value == arr[i])\
    \ {\n                    found = true;\n                    smallest_index = i;\n\
    \                }\n                else if (found == true) {\n              \
    \      result.Add(smallest_value);\n                    result.Add(smallest_index);\n\
    \                    found = false;\n                }\n            }\n      \
    \  }\n        if (found == true) {\n            result.Add(smallest_value);\n\
    \            result.Add(smallest_index);\n        }\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,\
    \ (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <b7825461b4004298befc35e2cbde0832>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <b7825461b4004298befc35e2cbde0832>:0 \n\nUnhandled Exception:\n\
    System.InvalidOperationException: Sequence contains no elements\n  at System.Linq.Enumerable.Min\
    \ (System.Collections.Generic.IEnumerable`1[T] source) [0x00022] in <e540098dd111461e919c5863f6975c29>:0\
    \ \n  at Problem.Pluck (System.Collections.Generic.List`1[T] arr) [0x00007] in\
    \ <b7825461b4004298befc35e2cbde0832>:0 \n  at Prob"
  stdout: ''
  timestamp: 1659976383
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 2:\n    // Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n    // Example 3:\n    // Example 4:\n    // Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n    // so we will choose\
    \ the first zero, which has the smallest index.\n    // Constraints:\n    // *\
    \ 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n    public static List<long>\
    \ Pluck(List<long> arr) {\n        long smalest_value = arr.Min();\n        long\
    \ smalest_index = 0;\n        List<long> result = new List<long>();\n        foreach\
    \ (long i in arr) {\n            if (i % 2 == 0) {\n                if (smalest_value\
    \ < i) {\n                    smalest_value = i;\n                    smalest_index\
    \ = i;\n                }\n            }\n        }\n        if (smalest_index\
    \ != 0) {\n            result.Add(smalest_value);\n            result.Add(smalest_index);\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L,\
    \ (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n  \
    \  Debug.Assert(Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <af3bb156fff348af81b224c06ebe6c46>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <af3bb156fff348af81b224c06ebe6c46>:0 \n\nUnhandled Exception:\n\
    System.InvalidOperationException: Sequence contains no elements\n  at System.Linq.Enumerable.Min\
    \ (System.Collections.Generic.IEnumerable`1[T] source) [0x00022] in <e540098dd111461e919c5863f6975c29>:0\
    \ \n  at Problem.Pluck (System.Collections.Generic.List`1[T] arr) [0x00001] in\
    \ <af3bb156fff348af81b224c06ebe6c46>:0 \n  at Prob"
  stdout: ''
  timestamp: 1659976379
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 2:\n    // Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n    // Example 3:\n    // Example 4:\n    // Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n    // so we will choose\
    \ the first zero, which has the smallest index.\n    // Constraints:\n    // *\
    \ 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n    public static List<long>\
    \ Pluck(List<long> arr) {\n        List<long> result = new List<long>();\n   \
    \     long smallest_value = arr.Min();\n        long smallest_index = 0;\n   \
    \     bool found = false;\n        for (int i = 0; i < arr.Count; i++) {\n   \
    \         if (arr[i] % 2 == 0) {\n                if (arr[i] < smallest_value)\
    \ {\n                    smallest_value = arr[i];\n                    smallest_index\
    \ = i;\n                    found = true;\n                }\n            }\n\
    \        }\n        if (found) {\n            result.Add(smallest_value);\n  \
    \          result.Add(smallest_index);\n        }\n        return result;\n  \
    \  }\n    public static void Main(string[] args) {\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,\
    \ (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <4876a08823d04a60bf6a05577a9890d1>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <4876a08823d04a60bf6a05577a9890d1>:0 \n\nUnhandled Exception:\n\
    System.InvalidOperationException: Sequence contains no elements\n  at System.Linq.Enumerable.Min\
    \ (System.Collections.Generic.IEnumerable`1[T] source) [0x00022] in <e540098dd111461e919c5863f6975c29>:0\
    \ \n  at Problem.Pluck (System.Collections.Generic.List`1[T] arr) [0x00007] in\
    \ <4876a08823d04a60bf6a05577a9890d1>:0 \n  at Prob"
  stdout: ''
  timestamp: 1659976383
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 2:\n    // Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n    // Example 3:\n    // Example 4:\n    // Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n    // so we will choose\
    \ the first zero, which has the smallest index.\n    // Constraints:\n    // *\
    \ 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n    public static List<long>\
    \ Pluck(List<long> arr) {\n        List<long> result = new List<long>();\n   \
    \     long smallestEvenValue = arr.Min();\n        long smallestIndex = arr.IndexOf(smallestEvenValue);\n\
    \        if (smallestIndex != -1) {\n            result.Add(smallestEvenValue);\n\
    \            result.Add(smallestIndex);\n        }\n        if (arr.Count == 0)\
    \ {\n            return result;\n        }\n        long evenValue = arr.Min();\n\
    \        long index = arr.IndexOf(evenValue);\n        while (index != -1) {\n\
    \            if (evenValue == smallestEvenValue) {\n                result.Add(evenValue);\n\
    \                result.Add(index);\n                break;\n            }\n \
    \           evenValue = arr[index];\n            index = arr.IndexOf(evenValue);\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L,\
    \ (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n  \
    \  Debug.Assert(Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpecsdv33t.cs(45,29): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    '
  timestamp: 1659976383
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 2:\n    // Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n    // Example 3:\n    // Example 4:\n    // Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n    // so we will choose\
    \ the first zero, which has the smallest index.\n    // Constraints:\n    // *\
    \ 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n    public static List<long>\
    \ Pluck(List<long> arr) {\n        List<long> result = new List<long>();\n   \
    \     long smallest_value = 0;\n        long smallest_index = 0;\n        long\
    \ smallest_even_value = 0;\n        long smallest_even_index = 0;\n        foreach\
    \ (var item in arr) {\n            if (item % 2 == 0) {\n                smallest_even_value\
    \ = item;\n                smallest_even_index = arr.IndexOf(item);\n        \
    \    }\n            if (item < smallest_value) {\n                smallest_value\
    \ = item;\n                smallest_index = arr.IndexOf(item);\n            }\n\
    \        }\n        if (smallest_even_index == arr.Count - 1) {\n            result.Add(smallest_value);\n\
    \            result.Add(smallest_index);\n            return result;\n       \
    \ }\n        long smallest_even_value = arr[smallest_even_index];\n        long\
    \ smallest_even_index = smallest_even_index + 1;\n        List<long> evens = new\
    \ List<long>();\n        foreach (var item in arr) {\n            if (item % 2\
    \ == 0) {\n                evens.Add(item);\n            }\n        }\n      \
    \  List<long> evens_pluck_pluck_pluck_pluck_pluck_pluck_pluck_pluck_pluck_pluck_pluck_pluck_pluck_pluck_pluck_pluck_pluck_pluck_pluck_pluck_pluck_pluck_pluck_pluck_pluck_pluck_pluck_pluck_pluck_pluck_pluck_pluck_pluck_pluck_pluck_pluck_pluck_pluck_pluck_pluck_pluck_pluck_pluck_pluck_pluck_pluck_pluck_pluck_pluck_pluck_pluck_pluck_pluck_pluck_pluck_pluck_pluck_pluck_pluck_pluck_pluck_pluck_pluck_pluck_pluck_pluck_pluck_pluck_pluck_pluck_pluck_pluck_pluck_pluck_pluck_pluck_pluck_pluck_pluck_pluck_pluck_pluck_pluck_pluck_pluck_pluck_pluck_pluck_pluck_pluck_pluck_pluck_pluck_pluck_pluck_pluck_pluck_pluck_pluck_pluck_pluck_pluck_pluck_pluck_pluck_pluck_pluck_pluck_pluck_pluck_pluck_pluck_pluck_pluck_pluck_pluck_pluck_pluck_pluck_pluck_pluck_pluck_pluck_pluck_pluck_pluck_pluck_pluck_pluck_pluck_pluck_pluck_pluck_pluck_pluck_pluck_pluck_pluck_pluck_pluck_pluck_pluck_pluck_pluck_pluck_pluck_pluck_pluck_pluck_pluck_pluck_pluck_pluck_pluck_pluck_pluck_pluck_pluck_plu\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,\
    \ (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpt75u0w49.cs(55,977): error CS1002: ; expected

    '
  timestamp: 1659976383
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 2:\n    // Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n    // Example 3:\n    // Example 4:\n    // Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n    // so we will choose\
    \ the first zero, which has the smallest index.\n    // Constraints:\n    // *\
    \ 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n    public static List<long>\
    \ Pluck(List<long> arr) {\n        long smalest_value = arr.Min();\n        long\
    \ smalest_index = 0;\n        List<long> result = new List<long>();\n        foreach\
    \ (long n in arr) {\n            if (n % 2 == 0) {\n                if (smalest_value\
    \ < n) {\n                    smalest_value = n;\n                    smalest_index\
    \ = arr.IndexOf(n);\n                }\n            }\n        }\n        if (smalest_value\
    \ == 0) {\n            return new List<long>();\n        }\n        result.Add(smalest_value);\n\
    \        result.Add(smalest_index);\n        return result;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n\
    \    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n   \
    \ Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,\
    \ (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c89e4448d0a641fd91f34010e9b30020>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c89e4448d0a641fd91f34010e9b30020>:0 \n\nUnhandled Exception:\n\
    System.InvalidOperationException: Sequence contains no elements\n  at System.Linq.Enumerable.Min\
    \ (System.Collections.Generic.IEnumerable`1[T] source) [0x00022] in <e540098dd111461e919c5863f6975c29>:0\
    \ \n  at Problem.Pluck (System.Collections.Generic.List`1[T] arr) [0x00001] in\
    \ <c89e4448d0a641fd91f34010e9b30020>:0 \n  at Prob"
  stdout: ''
  timestamp: 1659976380
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 2:\n    // Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n    // Example 3:\n    // Example 4:\n    // Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n    // so we will choose\
    \ the first zero, which has the smallest index.\n    // Constraints:\n    // *\
    \ 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n    public static List<long>\
    \ Pluck(List<long> arr) {\n        long smalest_value = 0;\n        long smalest_index\
    \ = 0;\n        List<long> result = new List<long>();\n        foreach (var item\
    \ in arr) {\n            if (item % 2 == 0) {\n                if (item < smalest_value)\
    \ {\n                    smalest_value = item;\n                    smalest_index\
    \ = arr.IndexOf(item);\n                }\n            }\n        }\n        if\
    \ (smalest_index != 0) {\n            result.Add(smalest_value);\n           \
    \ result.Add(smalest_index);\n        }\n        return result;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n\
    \    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n   \
    \ Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,\
    \ (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8e52988d54864d579407397869888a1c>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8e52988d54864d579407397869888a1c>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976383
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 2:\n    // Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n    // Example 3:\n    // Example 4:\n    // Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n    // so we will choose\
    \ the first zero, which has the smallest index.\n    // Constraints:\n    // *\
    \ 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n    public static List<long>\
    \ Pluck(List<long> arr) {\n        List<long> result = new List<long>();\n   \
    \     long smallest_even_value = 0;\n        long smallest_index = 0;\n      \
    \  long smallest_value = 0;\n        foreach (long n in arr) {\n            if\
    \ (n % 2 == 0) {\n                if (smallest_even_value < n) {\n           \
    \         smallest_even_value = n;\n                    smallest_index = n;\n\
    \                }\n                if (smallest_even_value == n) {\n        \
    \            smallest_value = n;\n                }\n            }\n        }\n\
    \        if (smallest_even_value == 0) {\n            return new List<long>();\n\
    \        }\n        result.Add(smallest_value);\n        result.Add(smallest_index);\n\
    \        return result;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,\
    \ (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d6292642edef48dd8bbd6eccb408d128>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d6292642edef48dd8bbd6eccb408d128>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976383
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 2:\n    // Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n    // Example 3:\n    // Example 4:\n    // Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n    // so we will choose\
    \ the first zero, which has the smallest index.\n    // Constraints:\n    // *\
    \ 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n    public static List<long>\
    \ Pluck(List<long> arr) {\n        long smalest_value = arr.Min();\n        List<long>\
    \ result = new List<long>();\n        long smallest_index = -1;\n        bool\
    \ found = false;\n        for (int i = 0; i < arr.Count; i++) {\n            if\
    \ (arr[i] % 2 == 0) {\n                if (arr[i] < smalest_value) {\n       \
    \             smalest_value = arr[i];\n                    smallest_index = i;\n\
    \                    found = true;\n                }\n            }\n       \
    \ }\n        if (found) {\n            result.Add(smalest_value);\n          \
    \  result.Add(smallest_index);\n        }\n        return result;\n    }\n   \
    \ public static void Main(string[] args) {\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n\
    \    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n   \
    \ Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,\
    \ (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a0e771be83c04811bdfb07c07c4e1e85>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a0e771be83c04811bdfb07c07c4e1e85>:0 \n\nUnhandled Exception:\n\
    System.InvalidOperationException: Sequence contains no elements\n  at System.Linq.Enumerable.Min\
    \ (System.Collections.Generic.IEnumerable`1[T] source) [0x00022] in <e540098dd111461e919c5863f6975c29>:0\
    \ \n  at Problem.Pluck (System.Collections.Generic.List`1[T] arr) [0x00001] in\
    \ <a0e771be83c04811bdfb07c07c4e1e85>:0 \n  at Prob"
  stdout: ''
  timestamp: 1659976383
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 2:\n    // Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n    // Example 3:\n    // Example 4:\n    // Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n    // so we will choose\
    \ the first zero, which has the smallest index.\n    // Constraints:\n    // *\
    \ 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n    public static List<long>\
    \ Pluck(List<long> arr) {\n        List<long> result = new List<long>();\n   \
    \     long smallest_value = arr.Min();\n        long smallest_index = 0;\n   \
    \     bool found = false;\n        for (int i = 0; i < arr.Count; i++) {\n   \
    \         if (arr[i] < smallest_value) {\n                smallest_value = arr[i];\n\
    \                smallest_index = i;\n            }\n            if (arr[i] ==\
    \ smallest_value && found == false) {\n                found = true;\n       \
    \     }\n        }\n        if (found == true) {\n            result.Add(smallest_value);\n\
    \            result.Add(smallest_index);\n        }\n        if (result.Count\
    \ == 0) {\n            return new List<long>();\n        }\n        if (result.Count\
    \ == 1) {\n            return new List<long>() { result[0] };\n        }\n   \
    \     List<long> result = new List<long>();\n        long smallest_value = result.Min();\n\
    \        long smallest_index = 0;\n        bool found = false;\n        for (int\
    \ i = 0; i < result.Count; i++) {\n            if (result[i] < smallest_value)\
    \ {\n                smallest_value = result[i];\n                smallest_index\
    \ = i;\n            }\n            if (result[i] == smallest_value && found ==\
    \ false) {\n                found = true;\n            }\n        }\n        if\
    \ (found == true) {\n            result.Add(smallest_value);\n            result.Add(smallest_index);\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L,\
    \ (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n  \
    \  Debug.Assert(Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmppqqhu812.cs(50,20): error CS0128: A local variable or function named ''result''
    is already defined in this scope

    /tmp/tmppqqhu812.cs(51,14): error CS0128: A local variable or function named ''smallest_value''
    is already defined in this scope

    /tmp/tmppqqhu812.cs(52,14): error CS0128: A local variable or function named ''smallest_index''
    is already defined in this scope

    /tmp/tmppqqhu812.cs(53,14): error CS0128: A local variable or function named ''found''
    is already defined in this scope

    /tmp/tmppqqhu812.cs(52,14): warning CS0219: The variable ''smallest_index'' is
    assigned but its value is never used

    /tmp/tmppqqhu812.cs(53,14): warning CS0219: The variable ''found'' is assigned
    but its value is never used

    '
  timestamp: 1659976383
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 2:\n    // Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n    // Example 3:\n    // Example 4:\n    // Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n    // so we will choose\
    \ the first zero, which has the smallest index.\n    // Constraints:\n    // *\
    \ 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n    public static List<long>\
    \ Pluck(List<long> arr) {\n        List<long> result = new List<long>();\n   \
    \     long smallestEvenValue = arr.Min();\n        long smallestIndex = arr.IndexOf(smallestEvenValue);\n\
    \        if (smallestEvenValue % 2 == 0) {\n            result.Add(smallestEvenValue);\n\
    \            result.Add(smallestIndex);\n        }\n        else {\n         \
    \   int evenCount = 0;\n            int index = 0;\n            foreach (long\
    \ value in arr) {\n                if (value % 2 == 0) {\n                   \
    \ evenCount++;\n                    if (evenCount == 1) {\n                  \
    \      result.Add(value);\n                        result.Add(index);\n      \
    \              }\n                }\n                else {\n                \
    \    evenCount = 0;\n                    index++;\n                }\n       \
    \     }\n        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L,\
    \ (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n  \
    \  Debug.Assert(Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <86218632819c4c699f738ac1ff1b8d28>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <86218632819c4c699f738ac1ff1b8d28>:0 \n\nUnhandled Exception:\n\
    System.InvalidOperationException: Sequence contains no elements\n  at System.Linq.Enumerable.Min\
    \ (System.Collections.Generic.IEnumerable`1[T] source) [0x00022] in <e540098dd111461e919c5863f6975c29>:0\
    \ \n  at Problem.Pluck (System.Collections.Generic.List`1[T] arr) [0x00007] in\
    \ <86218632819c4c699f738ac1ff1b8d28>:0 \n  at Prob"
  stdout: ''
  timestamp: 1659976383
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 2:\n    // Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n    // Example 3:\n    // Example 4:\n    // Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n    // so we will choose\
    \ the first zero, which has the smallest index.\n    // Constraints:\n    // *\
    \ 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n    public static List<long>\
    \ Pluck(List<long> arr) {\n        long smalest_value = 0;\n        long smalest_index\
    \ = 0;\n        List<long> result = new List<long>();\n        foreach (long n\
    \ in arr) {\n            if (n % 2 == 0) {\n                if (smalest_value\
    \ == 0) {\n                    smalest_value = n;\n                    smalest_index\
    \ = arr.IndexOf(n);\n                }\n                else if (smalest_value\
    \ < n) {\n                    smalest_value = n;\n                    smalest_index\
    \ = arr.IndexOf(n);\n                }\n            }\n        }\n        if (smalest_value\
    \ == 0) {\n            return new List<long>();\n        }\n        else {\n \
    \           result.Add(smalest_value);\n            result.Add(smalest_index);\n\
    \            return result;\n        }\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L,\
    \ (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n  \
    \  Debug.Assert(Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8e7c164b7128435196450974dfbd8b1c>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8e7c164b7128435196450974dfbd8b1c>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976384
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 2:\n    // Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n    // Example 3:\n    // Example 4:\n    // Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n    // so we will choose\
    \ the first zero, which has the smallest index.\n    // Constraints:\n    // *\
    \ 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n    public static List<long>\
    \ Pluck(List<long> arr) {\n        List<long> result = new List<long>();\n   \
    \     long smallest_value = arr.Min();\n        long smallest_index = 0;\n   \
    \     bool found = false;\n        foreach (long value in arr) {\n           \
    \ if (value % 2 == 0) {\n                found = true;\n                if (value\
    \ < smallest_value) {\n                    smallest_value = value;\n         \
    \           smallest_index = arr.IndexOf(value);\n                }\n        \
    \    }\n        }\n        if (found) {\n            result.Add(smallest_value);\n\
    \            result.Add(smallest_index);\n        }\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,\
    \ (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <3f8414b461de4b9fbca6aaecec3d33b8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <3f8414b461de4b9fbca6aaecec3d33b8>:0 \n\nUnhandled Exception:\n\
    System.InvalidOperationException: Sequence contains no elements\n  at System.Linq.Enumerable.Min\
    \ (System.Collections.Generic.IEnumerable`1[T] source) [0x00022] in <e540098dd111461e919c5863f6975c29>:0\
    \ \n  at Problem.Pluck (System.Collections.Generic.List`1[T] arr) [0x00007] in\
    \ <3f8414b461de4b9fbca6aaecec3d33b8>:0 \n  at Prob"
  stdout: ''
  timestamp: 1659976384
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 2:\n    // Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n    // Example 3:\n    // Example 4:\n    // Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n    // so we will choose\
    \ the first zero, which has the smallest index.\n    // Constraints:\n    // *\
    \ 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n    public static List<long>\
    \ Pluck(List<long> arr) {\n        List<long> result = new List<long>();\n   \
    \     long smallestEvenValue = arr.Min();\n        long smallestIndex = 0;\n \
    \       for (int i = 0; i < arr.Count; i++) {\n            if (arr[i] % 2 == 0)\
    \ {\n                if (arr[i] < smallestEvenValue) {\n                    smallestEvenValue\
    \ = arr[i];\n                    smallestIndex = i;\n                }\n     \
    \       }\n        }\n        result.Add(smallestEvenValue);\n        result.Add(smallestIndex);\n\
    \        return result;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,\
    \ (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a26c8b6179aa431c9dae6e92e6d06f93>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a26c8b6179aa431c9dae6e92e6d06f93>:0 \n\nUnhandled Exception:\n\
    System.InvalidOperationException: Sequence contains no elements\n  at System.Linq.Enumerable.Min\
    \ (System.Collections.Generic.IEnumerable`1[T] source) [0x00022] in <e540098dd111461e919c5863f6975c29>:0\
    \ \n  at Problem.Pluck (System.Collections.Generic.List`1[T] arr) [0x00007] in\
    \ <a26c8b6179aa431c9dae6e92e6d06f93>:0 \n  at Prob"
  stdout: ''
  timestamp: 1659976384
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 2:\n    // Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n    // Example 3:\n    // Example 4:\n    // Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n    // so we will choose\
    \ the first zero, which has the smallest index.\n    // Constraints:\n    // *\
    \ 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n    public static List<long>\
    \ Pluck(List<long> arr) {\n        long smalest_value = 0;\n        long smalest_index\
    \ = 0;\n        List<long> result = new List<long>();\n        foreach (var node\
    \ in arr) {\n            if (node % 2 == 0) {\n                if (node < smalest_value)\
    \ {\n                    smalest_value = node;\n                    smalest_index\
    \ = arr.IndexOf(node);\n                }\n            }\n        }\n        if\
    \ (smalest_index != arr.IndexOf(smalest_value)) {\n            smalest_index =\
    \ arr.IndexOf(smalest_value);\n        }\n        result.Add(smalest_value);\n\
    \        result.Add(smalest_index);\n        return result;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n\
    \    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n   \
    \ Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,\
    \ (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <4e2c51ea222d4199997ce555889c8292>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <4e2c51ea222d4199997ce555889c8292>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976384
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 2:\n    // Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n    // Example 3:\n    // Example 4:\n    // Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n    // so we will choose\
    \ the first zero, which has the smallest index.\n    // Constraints:\n    // *\
    \ 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n    public static List<long>\
    \ Pluck(List<long> arr) {\n        List<long> result = new List<long>();\n   \
    \     long smalest_value = arr.Min();\n        long smalest_index = 0;\n     \
    \   long smalest_even_value = 0;\n        long smalest_even_count = 0;\n     \
    \   long smalest_even_index = 0;\n        foreach (long n in arr) {\n        \
    \    if (n % 2 == 0) {\n                smalest_even_value = n;\n            \
    \    smalest_even_count++;\n            }\n            if (smalest_even_count\
    \ == smalest_even_value && smalest_even_count > smalest_even_value && smalest_even_value\
    \ < n) {\n                smalest_even_index = n;\n            }\n           \
    \ if (smalest_even_count == smalest_even_value && smalest_even_count > smalest_even_value\
    \ && smalest_even_value == n) {\n                smalest_even_count++;\n     \
    \       }\n            if (smalest_even_count == smalest_even_value && smalest_even_count\
    \ > smalest_even_value && smalest_even_value == n) {\n                smalest_even_count++;\n\
    \            }\n            if (smalest_even_count == smalest_even_value && smalest_even_count\
    \ > smalest_even_value && smalest_even_value == n) {\n                smalest_even_count++;\n\
    \            }\n            if (smalest_even_count == smalest_even_value && smalest_even_count\
    \ > smalest_even_value && smalest_even_value == n) {\n                smalest_even_count++;\n\
    \            }\n            if (smalest_even_count == smalest_even_value && smalest_even_count\
    \ > smalest_even_value && smalest_even_value == n) {\n                smalest_even_count++;\n\
    \            }\n            if (smalest_even_count == smalest_even_value && smalest_even_count\
    \ > smalest_even_value && smalest_even_value == n) {\n                smalest_even_count++;\n\
    \            }\n            if (smalest_even_count == smalest_even_value && smalest_even_count\
    \ > smalest_even_value && smalest_even_value == n) {\n                smalest_even_count++;\n\
    \            }\n            if (smalest_even_count == smalest_even_value && smalest_even_count\
    \ > smalest_even_value && smalest_even_value == n) {\n                smalest_even_count++;\n\
    \            }\n            if (smalest_\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L,\
    \ (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n  \
    \  Debug.Assert(Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp19vgqit1.cs(65,25): error CS1026: ) expected

    /tmp/tmp19vgqit1.cs(65,25): error CS1525: Invalid expression term ''}''

    /tmp/tmp19vgqit1.cs(65,25): error CS1002: ; expected

    /tmp/tmp19vgqit1.cs(67,5): error CS0106: The modifier ''public'' is not valid
    for this item

    /tmp/tmp19vgqit1.cs(78,2): error CS1513: } expected

    '
  timestamp: 1659976383
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 2:\n    // Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n    // Example 3:\n    // Example 4:\n    // Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n    // so we will choose\
    \ the first zero, which has the smallest index.\n    // Constraints:\n    // *\
    \ 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n    public static List<long>\
    \ Pluck(List<long> arr) {\n        List<long> result = new List<long>();\n   \
    \     long smallest_value = arr.Min();\n        long smallest_index = 0;\n   \
    \     long smallest_even_value = 0;\n        bool found = false;\n        for\
    \ (int i = 0; i < arr.Count; i++) {\n            if (arr[i] % 2 == 0) {\n    \
    \            if (smallest_value == 0) {\n                    smallest_value =\
    \ arr[i];\n                    smallest_index = i;\n                    smallest_even_value\
    \ = arr[i] / 2;\n                    found = true;\n                } else if\
    \ (smallest_value == arr[i]) {\n                    smallest_index = i;\n    \
    \                smallest_even_value = arr[i] / 2;\n                    found\
    \ = true;\n                } else if (smallest_value == arr[i] && smallest_even_value\n\
    \                    == arr[i] / 2) {\n                    smallest_index = i;\n\
    \                    smallest_even_value = arr[i] / 2;\n                    found\
    \ = true;\n                }\n            }\n        }\n        if (found) {\n\
    \            result.Add(smallest_value);\n            result.Add(smallest_index);\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L,\
    \ (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n  \
    \  Debug.Assert(Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <2754d2ef4e5c4b3d915332dc87b89c3c>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <2754d2ef4e5c4b3d915332dc87b89c3c>:0 \n\nUnhandled Exception:\n\
    System.InvalidOperationException: Sequence contains no elements\n  at System.Linq.Enumerable.Min\
    \ (System.Collections.Generic.IEnumerable`1[T] source) [0x00022] in <e540098dd111461e919c5863f6975c29>:0\
    \ \n  at Problem.Pluck (System.Collections.Generic.List`1[T] arr) [0x00007] in\
    \ <2754d2ef4e5c4b3d915332dc87b89c3c>:0 \n  at Prob"
  stdout: ''
  timestamp: 1659976384
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 2:\n    // Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n    // Example 3:\n    // Example 4:\n    // Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n    // so we will choose\
    \ the first zero, which has the smallest index.\n    // Constraints:\n    // *\
    \ 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n    public static List<long>\
    \ Pluck(List<long> arr) {\n        List<long> result = new List<long>();\n   \
    \     long smallest_value = 0;\n        long smallest_index = 0;\n        long\
    \ smallest_even_value = 0;\n        long smallest_even_count = 0;\n        foreach\
    \ (var node in arr) {\n            if (node % 2 == 0) {\n                smallest_even_value\
    \ = node;\n                smallest_even_count = 1;\n            }\n         \
    \   else {\n                if (smallest_even_count > 1) {\n                 \
    \   smallest_value = smallest_even_value;\n                    smallest_index\
    \ = smallest_even_count;\n                }\n                else {\n        \
    \            smallest_value = node;\n                    smallest_index = 1;\n\
    \                }\n                smallest_even_count++;\n            }\n  \
    \      }\n        if (smallest_even_count == 0) {\n            result.Add(smallest_value);\n\
    \            result.Add(smallest_index);\n        }\n        else if (smallest_even_count\
    \ == 1) {\n            result.Add(smallest_value);\n            result.Add(smallest_index);\n\
    \        }\n        else {\n            result.Add(smallest_value);\n        \
    \    result.Add(smallest_index);\n        }\n        return result;\n    }\n \
    \   public static void Main(string[] args) {\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n\
    \    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n   \
    \ Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,\
    \ (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <3c9a28d94f1f4411acea9d3383ee7c20>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <3c9a28d94f1f4411acea9d3383ee7c20>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976384
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 2:\n    // Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n    // Example 3:\n    // Example 4:\n    // Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n    // so we will choose\
    \ the first zero, which has the smallest index.\n    // Constraints:\n    // *\
    \ 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n    public static List<long>\
    \ Pluck(List<long> arr) {\n        long smalest_value = 0;\n        long smalest_index\
    \ = 0;\n        List<long> result = new List<long>();\n        foreach (var node\
    \ in arr) {\n            if (node % 2 == 0) {\n                if (smalest_value\
    \ == 0) {\n                    smalest_value = node;\n                    smalest_index\
    \ = arr.IndexOf(node);\n                } else if (smalest_value < node) {\n \
    \                   smalest_value = node;\n                    smalest_index =\
    \ arr.IndexOf(node);\n                }\n            }\n        }\n        if\
    \ (smalest_value == 0) {\n            return new List<long>();\n        }\n  \
    \      result.Add(smalest_value);\n        result.Add(smalest_index);\n      \
    \  return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,\
    \ (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8da1dd30121e4af48f218d3120fcd16c>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8da1dd30121e4af48f218d3120fcd16c>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976384
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 2:\n    // Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n    // Example 3:\n    // Example 4:\n    // Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n    // so we will choose\
    \ the first zero, which has the smallest index.\n    // Constraints:\n    // *\
    \ 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n    public static List<long>\
    \ Pluck(List<long> arr) {\n        List<long> result = new List<long>();\n   \
    \     long smallest_value = 0;\n        long smallest_index = 0;\n        bool\
    \ found = false;\n        foreach (long n in arr) {\n            if (n % 2 ==\
    \ 0) {\n                if (smallest_value == 0) {\n                    smallest_value\
    \ = n;\n                    smallest_index = arr.IndexOf(n);\n               \
    \     found = true;\n                } else if (smallest_value < n) {\n      \
    \              smallest_value = n;\n                    smallest_index = arr.IndexOf(n);\n\
    \                    found = true;\n                }\n            }\n       \
    \ }\n        if (found) {\n            result.Add(smallest_value);\n         \
    \   result.Add(smallest_index);\n        }\n        return result;\n    }\n  \
    \  public static void Main(string[] args) {\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n\
    \    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n   \
    \ Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,\
    \ (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <fe252acefe2340b192b0aeac00b7f22a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <fe252acefe2340b192b0aeac00b7f22a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976384
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 2:\n    // Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n    // Example 3:\n    // Example 4:\n    // Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n    // so we will choose\
    \ the first zero, which has the smallest index.\n    // Constraints:\n    // *\
    \ 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n    public static List<long>\
    \ Pluck(List<long> arr) {\n        List<long> result = new List<long>();\n   \
    \     long smallest_value = arr.Min();\n        long smallest_index = 0;\n   \
    \     long smallest_even_value = 0;\n        bool found = false;\n        foreach\
    \ (long value in arr) {\n            if (value % 2 == 0) {\n                if\
    \ (smallest_even_value < value) {\n                    smallest_even_value = value;\n\
    \                    smallest_index = arr.IndexOf(value);\n                  \
    \  found = true;\n                }\n            }\n        }\n        if (found)\
    \ {\n            result.Add(smallest_even_value);\n            result.Add(smallest_index);\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L,\
    \ (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n  \
    \  Debug.Assert(Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <0d2d15e8ac8b465d91db48691b0220bf>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <0d2d15e8ac8b465d91db48691b0220bf>:0 \n\nUnhandled Exception:\n\
    System.InvalidOperationException: Sequence contains no elements\n  at System.Linq.Enumerable.Min\
    \ (System.Collections.Generic.IEnumerable`1[T] source) [0x00022] in <e540098dd111461e919c5863f6975c29>:0\
    \ \n  at Problem.Pluck (System.Collections.Generic.List`1[T] arr) [0x00007] in\
    \ <0d2d15e8ac8b465d91db48691b0220bf>:0 \n  at Prob"
  stdout: ''
  timestamp: 1659976384
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 2:\n    // Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n    // Example 3:\n    // Example 4:\n    // Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n    // so we will choose\
    \ the first zero, which has the smallest index.\n    // Constraints:\n    // *\
    \ 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n    public static List<long>\
    \ Pluck(List<long> arr) {\n        List<long> result = new List<long>();\n   \
    \     long smallest_value = arr.Min();\n        long smallest_index = arr.IndexOf(smallest_value);\n\
    \        long smallest_even_value = smallest_value % 2 == 0 ? smallest_value :\
    \ smallest_value - 1;\n        bool found = false;\n        for (int i = 0; i\
    \ < arr.Count; i++) {\n            if (arr[i] == smallest_even_value) {\n    \
    \            found = true;\n                result.Add(smallest_value);\n    \
    \            result.Add(smallest_index);\n                break;\n           \
    \ }\n        }\n        if (!found) {\n            result.Add(smallest_value);\n\
    \            result.Add(smallest_index);\n        }\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,\
    \ (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9a406d56c7c44ebeb9e5783092c77a02>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9a406d56c7c44ebeb9e5783092c77a02>:0 \n\nUnhandled Exception:\n\
    System.InvalidOperationException: Sequence contains no elements\n  at System.Linq.Enumerable.Min\
    \ (System.Collections.Generic.IEnumerable`1[T] source) [0x00022] in <e540098dd111461e919c5863f6975c29>:0\
    \ \n  at Problem.Pluck (System.Collections.Generic.List`1[T] arr) [0x00007] in\
    \ <9a406d56c7c44ebeb9e5783092c77a02>:0 \n  at Prob"
  stdout: ''
  timestamp: 1659976384
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 2:\n    // Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n    // Example 3:\n    // Example 4:\n    // Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n    // so we will choose\
    \ the first zero, which has the smallest index.\n    // Constraints:\n    // *\
    \ 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n    public static List<long>\
    \ Pluck(List<long> arr) {\n        long smalest_value = arr.Min();\n        List<long>\
    \ result = new List<long>();\n        long smallest_index = -1;\n        bool\
    \ found = false;\n        for (int i = 0; i < arr.Count; i++) {\n            if\
    \ (arr[i] % 2 == 0) {\n                if (found == false) {\n               \
    \     smallest_index = i;\n                    found = true;\n               \
    \ }\n                if (arr[i] < smalest_value) {\n                    smalest_value\
    \ = arr[i];\n                }\n            }\n        }\n        if (found ==\
    \ true) {\n            result.Add(smalest_value);\n            result.Add(smallest_index);\n\
    \        }\n        if (result.Count == 0) {\n            return new List<long>();\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L,\
    \ (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n  \
    \  Debug.Assert(Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <01010c8bc5684471b7516b5a2b4e9cbf>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <01010c8bc5684471b7516b5a2b4e9cbf>:0 \n\nUnhandled Exception:\n\
    System.InvalidOperationException: Sequence contains no elements\n  at System.Linq.Enumerable.Min\
    \ (System.Collections.Generic.IEnumerable`1[T] source) [0x00022] in <e540098dd111461e919c5863f6975c29>:0\
    \ \n  at Problem.Pluck (System.Collections.Generic.List`1[T] arr) [0x00001] in\
    \ <01010c8bc5684471b7516b5a2b4e9cbf>:0 \n  at Prob"
  stdout: ''
  timestamp: 1659976384
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 2:\n    // Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n    // Example 3:\n    // Example 4:\n    // Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n    // so we will choose\
    \ the first zero, which has the smallest index.\n    // Constraints:\n    // *\
    \ 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n    public static List<long>\
    \ Pluck(List<long> arr) {\n        long smalest_value = arr.Min();\n        long\
    \ smalest_index = 0;\n        List<long> result = new List<long>();\n        foreach\
    \ (long n in arr) {\n            if (n % 2 == 0) {\n                if (smalest_value\
    \ == n) {\n                    smalest_index = arr.IndexOf(n);\n             \
    \   }\n                else {\n                    smalest_value = n;\n      \
    \              smalest_index = arr.IndexOf(n);\n                }\n          \
    \  }\n        }\n        if (smalest_index > 0) {\n            result.Add(smalest_value);\n\
    \            result.Add(smalest_index);\n        }\n        return result;\n \
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,\
    \ (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <bd9c6d1d36fc4aa7b6936baa172d8345>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <bd9c6d1d36fc4aa7b6936baa172d8345>:0 \n\nUnhandled Exception:\n\
    System.InvalidOperationException: Sequence contains no elements\n  at System.Linq.Enumerable.Min\
    \ (System.Collections.Generic.IEnumerable`1[T] source) [0x00022] in <e540098dd111461e919c5863f6975c29>:0\
    \ \n  at Problem.Pluck (System.Collections.Generic.List`1[T] arr) [0x00001] in\
    \ <bd9c6d1d36fc4aa7b6936baa172d8345>:0 \n  at Prob"
  stdout: ''
  timestamp: 1659976384
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 2:\n    // Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n    // Example 3:\n    // Example 4:\n    // Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n    // so we will choose\
    \ the first zero, which has the smallest index.\n    // Constraints:\n    // *\
    \ 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n    public static List<long>\
    \ Pluck(List<long> arr) {\n        long smalest_value = arr.Min();\n        long\
    \ smalest_index = 0;\n        List<long> result = new List<long>();\n        foreach\
    \ (long n in arr) {\n            if (n % 2 == 0) {\n                if (smalest_value\
    \ < n) {\n                    smalest_value = n;\n                    smalest_index\
    \ = arr.IndexOf(n);\n                }\n            }\n        }\n        if (smalest_index\
    \ != arr.IndexOf(smalest_value)) {\n            smalest_value = arr.Min();\n \
    \           smalest_index = 0;\n        }\n        result.Add(smalest_value);\n\
    \        result.Add(smalest_index);\n        return result;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n\
    \    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n   \
    \ Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,\
    \ (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <541eb8c10cce44eca7047f6eefad484d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <541eb8c10cce44eca7047f6eefad484d>:0 \n\nUnhandled Exception:\n\
    System.InvalidOperationException: Sequence contains no elements\n  at System.Linq.Enumerable.Min\
    \ (System.Collections.Generic.IEnumerable`1[T] source) [0x00022] in <e540098dd111461e919c5863f6975c29>:0\
    \ \n  at Problem.Pluck (System.Collections.Generic.List`1[T] arr) [0x00001] in\
    \ <541eb8c10cce44eca7047f6eefad484d>:0 \n  at Prob"
  stdout: ''
  timestamp: 1659976384
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 2:\n    // Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n    // Example 3:\n    // Example 4:\n    // Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n    // so we will choose\
    \ the first zero, which has the smallest index.\n    // Constraints:\n    // *\
    \ 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n    public static List<long>\
    \ Pluck(List<long> arr) {\n        List<long> result = new List<long>();\n   \
    \     long smallestEven = arr.Min();\n        long smallestIndex = arr.IndexOf(smallestEven);\n\
    \        long smallestValue = smallestEven;\n        long smallestIndexValue =\
    \ smallestIndex;\n        bool foundSmallestEven = false;\n        bool foundSmallestIndex\
    \ = false;\n        foreach (long n in arr) {\n            if (n % 2 == 0) {\n\
    \                if (foundSmallestEven) {\n                    result.Add(smallestEven);\n\
    \                    result.Add(smallestIndex);\n                    break;\n\
    \                }\n                foundSmallestEven = true;\n              \
    \  smallestEven = n;\n                smallestIndexValue = smallestIndex;\n  \
    \              smallestIndex = arr.IndexOf(n);\n                smallestValue\
    \ = smallestEven;\n                foundSmallestIndex = true;\n            }\n\
    \        }\n        if (!foundSmallestEven) {\n            result.Add(smallestEven);\n\
    \            result.Add(smallestIndex);\n        }\n        if (!foundSmallestIndex)\
    \ {\n            result.Add(smallestEven);\n            result.Add(smallestIndex);\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L,\
    \ (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n  \
    \  Debug.Assert(Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a08ce4cf6fc44f94acff7a520fadf4b8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a08ce4cf6fc44f94acff7a520fadf4b8>:0 \n\nUnhandled Exception:\n\
    System.InvalidOperationException: Sequence contains no elements\n  at System.Linq.Enumerable.Min\
    \ (System.Collections.Generic.IEnumerable`1[T] source) [0x00022] in <e540098dd111461e919c5863f6975c29>:0\
    \ \n  at Problem.Pluck (System.Collections.Generic.List`1[T] arr) [0x00007] in\
    \ <a08ce4cf6fc44f94acff7a520fadf4b8>:0 \n  at Prob"
  stdout: ''
  timestamp: 1659976384
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 2:\n    // Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n    // Example 3:\n    // Example 4:\n    // Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n    // so we will choose\
    \ the first zero, which has the smallest index.\n    // Constraints:\n    // *\
    \ 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n    public static List<long>\
    \ Pluck(List<long> arr) {\n        long smalest_value = arr.Min();\n        long\
    \ smalest_index = 0;\n        List<long> result = new List<long>();\n        foreach\
    \ (long n in arr) {\n            if (n % 2 == 0) {\n                if (smalest_value\
    \ < n) {\n                    smalest_value = n;\n                    smalest_index\
    \ = arr.IndexOf(n);\n                }\n            }\n        }\n        if (smalest_index\
    \ != arr.IndexOf(smalest_value)) {\n            smalest_value = arr.Min();\n \
    \           smalest_index = 0;\n        }\n        result.Add(smalest_value);\n\
    \        result.Add(smalest_index);\n        return result;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n\
    \    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n   \
    \ Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,\
    \ (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <541eb8c10cce44eca7047f6eefad484d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <541eb8c10cce44eca7047f6eefad484d>:0 \n\nUnhandled Exception:\n\
    System.InvalidOperationException: Sequence contains no elements\n  at System.Linq.Enumerable.Min\
    \ (System.Collections.Generic.IEnumerable`1[T] source) [0x00022] in <e540098dd111461e919c5863f6975c29>:0\
    \ \n  at Problem.Pluck (System.Collections.Generic.List`1[T] arr) [0x00001] in\
    \ <541eb8c10cce44eca7047f6eefad484d>:0 \n  at Prob"
  stdout: ''
  timestamp: 1659976384
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 2:\n    // Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n    // Example 3:\n    // Example 4:\n    // Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n    // so we will choose\
    \ the first zero, which has the smallest index.\n    // Constraints:\n    // *\
    \ 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n    public static List<long>\
    \ Pluck(List<long> arr) {\n        long smalest_value = arr.Min();\n        long\
    \ smalest_index = 0;\n        List<long> result = new List<long>();\n        foreach\
    \ (long n in arr) {\n            if (n % 2 == 0) {\n                if (smalest_value\
    \ == n) {\n                    smalest_index = arr.IndexOf(n);\n             \
    \   }\n                else {\n                    smalest_value = n;\n      \
    \              smalest_index = arr.IndexOf(n);\n                }\n          \
    \  }\n        }\n        if (smalest_index != arr.IndexOf(smalest_value)) {\n\
    \            smalest_index = arr.IndexOf(smalest_value);\n        }\n        result.Add(smalest_value);\n\
    \        result.Add(smalest_index);\n        return result;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n\
    \    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n   \
    \ Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,\
    \ (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <34163d06a5ff4521bcb12374a08710a4>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <34163d06a5ff4521bcb12374a08710a4>:0 \n\nUnhandled Exception:\n\
    System.InvalidOperationException: Sequence contains no elements\n  at System.Linq.Enumerable.Min\
    \ (System.Collections.Generic.IEnumerable`1[T] source) [0x00022] in <e540098dd111461e919c5863f6975c29>:0\
    \ \n  at Problem.Pluck (System.Collections.Generic.List`1[T] arr) [0x00001] in\
    \ <34163d06a5ff4521bcb12374a08710a4>:0 \n  at Prob"
  stdout: ''
  timestamp: 1659976384
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 2:\n    // Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n    // Example 3:\n    // Example 4:\n    // Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n    // so we will choose\
    \ the first zero, which has the smallest index.\n    // Constraints:\n    // *\
    \ 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n    public static List<long>\
    \ Pluck(List<long> arr) {\n        List<long> result = new List<long>();\n   \
    \     long smallestEvenValue = arr.Min();\n        long smallestIndex = 0;\n \
    \       bool isSmallestEvenValue = true;\n        bool isSmallestIndex = true;\n\
    \        foreach (long i in arr) {\n            if (i % 2 == 0) {\n          \
    \      isSmallestEvenValue = false;\n            }\n            if (i == smallestEvenValue)\
    \ {\n                isSmallestEvenValue = true;\n            }\n            if\
    \ (i == smallestIndex) {\n                isSmallestIndex = false;\n         \
    \   }\n            if (isSmallestEvenValue && isSmallestIndex) {\n           \
    \     result.Add(i);\n            }\n        }\n        return result;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n\
    \    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n   \
    \ Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,\
    \ (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <0aa0f509ca6f43709d2b862c8262fee5>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <0aa0f509ca6f43709d2b862c8262fee5>:0 \n\nUnhandled Exception:\n\
    System.InvalidOperationException: Sequence contains no elements\n  at System.Linq.Enumerable.Min\
    \ (System.Collections.Generic.IEnumerable`1[T] source) [0x00022] in <e540098dd111461e919c5863f6975c29>:0\
    \ \n  at Problem.Pluck (System.Collections.Generic.List`1[T] arr) [0x00007] in\
    \ <0aa0f509ca6f43709d2b862c8262fee5>:0 \n  at Prob"
  stdout: ''
  timestamp: 1659976384
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 2:\n    // Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n    // Example 3:\n    // Example 4:\n    // Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n    // so we will choose\
    \ the first zero, which has the smallest index.\n    // Constraints:\n    // *\
    \ 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n    public static List<long>\
    \ Pluck(List<long> arr) {\n        long smalest_value = arr.Min();\n        List<long>\
    \ result = new List<long>();\n        long smallest_index = -1;\n        long\
    \ smallest_even_value = -1;\n        foreach (long i in arr) {\n            if\
    \ (i % 2 == 0) {\n                if (smallest_even_value == -1) {\n         \
    \           smallest_even_value = i;\n                    smallest_index = i;\n\
    \                } else if (smallest_even_value < i) {\n                    smallest_even_value\
    \ = i;\n                    smallest_index = i;\n                }\n         \
    \   }\n        }\n        if (smallest_even_value == -1) {\n            return\
    \ result;\n        }\n        result.Add(smallest_even_value);\n        result.Add(smallest_index);\n\
    \        return result;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,\
    \ (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <6025c6a0c8c346248d4554020a385251>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <6025c6a0c8c346248d4554020a385251>:0 \n\nUnhandled Exception:\n\
    System.InvalidOperationException: Sequence contains no elements\n  at System.Linq.Enumerable.Min\
    \ (System.Collections.Generic.IEnumerable`1[T] source) [0x00022] in <e540098dd111461e919c5863f6975c29>:0\
    \ \n  at Problem.Pluck (System.Collections.Generic.List`1[T] arr) [0x00001] in\
    \ <6025c6a0c8c346248d4554020a385251>:0 \n  at Prob"
  stdout: ''
  timestamp: 1659976384
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 2:\n    // Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n    // Example 3:\n    // Example 4:\n    // Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n    // so we will choose\
    \ the first zero, which has the smallest index.\n    // Constraints:\n    // *\
    \ 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n    public static List<long>\
    \ Pluck(List<long> arr) {\n        List<long> result = new List<long>();\n   \
    \     long smallestEvenValue = arr.Min();\n        long smallestIndex = 0;\n \
    \       long currentEvenValue = smallestEvenValue;\n        long currentIndex\
    \ = -1;\n        bool found = false;\n        foreach (long n in arr) {\n    \
    \        if (n % 2 == 0) {\n                if (currentEvenValue < n) {\n    \
    \                currentEvenValue = n;\n                    currentIndex = currentEvenValue\
    \ - smallestEvenValue;\n                    found = true;\n                }\n\
    \            }\n            else {\n                if (currentEvenValue == n)\
    \ {\n                    currentIndex++;\n                    found = true;\n\
    \                }\n            }\n        }\n        if (found) {\n         \
    \   result.Add(smallestEvenValue);\n            result.Add(currentIndex);\n  \
    \      }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L,\
    \ (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n  \
    \  Debug.Assert(Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <866dd8f191894ef1909b7724a531ac39>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <866dd8f191894ef1909b7724a531ac39>:0 \n\nUnhandled Exception:\n\
    System.InvalidOperationException: Sequence contains no elements\n  at System.Linq.Enumerable.Min\
    \ (System.Collections.Generic.IEnumerable`1[T] source) [0x00022] in <e540098dd111461e919c5863f6975c29>:0\
    \ \n  at Problem.Pluck (System.Collections.Generic.List`1[T] arr) [0x00007] in\
    \ <866dd8f191894ef1909b7724a531ac39>:0 \n  at Prob"
  stdout: ''
  timestamp: 1659976384
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 2:\n    // Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n    // Example 3:\n    // Example 4:\n    // Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n    // so we will choose\
    \ the first zero, which has the smallest index.\n    // Constraints:\n    // *\
    \ 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n    public static List<long>\
    \ Pluck(List<long> arr) {\n        List<long> result = new List<long>();\n   \
    \     long smallestEvenValue = arr.Min();\n        long smallestIndex = 0;\n \
    \       bool isSmallestEvenValue = true;\n        bool isSmallestIndex = true;\n\
    \        foreach (long n in arr) {\n            if (n % 2 == 0) {\n          \
    \      if (smallestEvenValue < n) {\n                    smallestEvenValue = n;\n\
    \                    isSmallestEvenValue = true;\n                }\n        \
    \        else {\n                    isSmallestEvenValue = false;\n          \
    \      }\n            }\n            else {\n                if (smallestEvenValue\
    \ == n) {\n                    isSmallestEvenValue = true;\n                }\n\
    \                else {\n                    isSmallestEvenValue = false;\n  \
    \              }\n                if (smallestIndex < n) {\n                 \
    \   smallestIndex = n;\n                    isSmallestIndex = true;\n        \
    \        }\n                else {\n                    isSmallestIndex = false;\n\
    \                }\n            }\n        }\n        if (isSmallestEvenValue)\
    \ {\n            result.Add(smallestEvenValue);\n            result.Add(smallestIndex);\n\
    \        }\n        else if (isSmallestIndex) {\n            result.Add(smallestIndex);\n\
    \        }\n        else {\n            result.Add(0);\n        }\n        return\
    \ result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,\
    \ (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d25a791f2dac4ea4a399bcc9f1213b93>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d25a791f2dac4ea4a399bcc9f1213b93>:0 \n\nUnhandled Exception:\n\
    System.InvalidOperationException: Sequence contains no elements\n  at System.Linq.Enumerable.Min\
    \ (System.Collections.Generic.IEnumerable`1[T] source) [0x00022] in <e540098dd111461e919c5863f6975c29>:0\
    \ \n  at Problem.Pluck (System.Collections.Generic.List`1[T] arr) [0x00007] in\
    \ <d25a791f2dac4ea4a399bcc9f1213b93>:0 \n  at Prob"
  stdout: ''
  timestamp: 1659976384
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 2:\n    // Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n    // Example 3:\n    // Example 4:\n    // Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n    // so we will choose\
    \ the first zero, which has the smallest index.\n    // Constraints:\n    // *\
    \ 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n    public static List<long>\
    \ Pluck(List<long> arr) {\n        long smalest_value = arr.Min();\n        List<long>\
    \ result = new List<long>();\n        long smallest_index = -1;\n        foreach\
    \ (long node in arr) {\n            if (node % 2 == 0) {\n                if (smallest_index\
    \ == -1 || node < smalest_value) {\n                    smalest_value = node;\n\
    \                    smallest_index = arr.IndexOf(node);\n                }\n\
    \            }\n        }\n        if (smallest_index != -1) {\n            result.Add(smalest_value);\n\
    \            result.Add(smallest_index);\n        }\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,\
    \ (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <bb2d8699b5c14cfe96cef00b6bc0ca58>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <bb2d8699b5c14cfe96cef00b6bc0ca58>:0 \n\nUnhandled Exception:\n\
    System.InvalidOperationException: Sequence contains no elements\n  at System.Linq.Enumerable.Min\
    \ (System.Collections.Generic.IEnumerable`1[T] source) [0x00022] in <e540098dd111461e919c5863f6975c29>:0\
    \ \n  at Problem.Pluck (System.Collections.Generic.List`1[T] arr) [0x00001] in\
    \ <bb2d8699b5c14cfe96cef00b6bc0ca58>:0 \n  at Prob"
  stdout: ''
  timestamp: 1659976384
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 2:\n    // Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n    // Example 3:\n    // Example 4:\n    // Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n    // so we will choose\
    \ the first zero, which has the smallest index.\n    // Constraints:\n    // *\
    \ 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n    public static List<long>\
    \ Pluck(List<long> arr) {\n        List<long> result = new List<long>();\n   \
    \     long smalest_value = 0;\n        int smalest_index = 0;\n        foreach\
    \ (var item in arr) {\n            if (item % 2 == 0) {\n                smalest_value\
    \ = item;\n                smalest_index = arr.IndexOf(item);\n            }\n\
    \        }\n        if (smalest_index != -1) {\n            result.Add(smalest_value);\n\
    \            result.Add(smalest_index);\n        }\n        return result;\n \
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,\
    \ (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8fe3319e0d724f1ab1d87d96d70d517c>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8fe3319e0d724f1ab1d87d96d70d517c>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976384
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 2:\n    // Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n    // Example 3:\n    // Example 4:\n    // Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n    // so we will choose\
    \ the first zero, which has the smallest index.\n    // Constraints:\n    // *\
    \ 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n    public static List<long>\
    \ Pluck(List<long> arr) {\n        long smalest_value = arr.Min();\n        long\
    \ smalest_index = 0;\n        List<long> result = new List<long>();\n        foreach\
    \ (long n in arr) {\n            if (n % 2 == 0) {\n                if (smalest_value\
    \ == 0 || n < smalest_value) {\n                    smalest_value = n;\n     \
    \               smalest_index = arr.IndexOf(n);\n                }\n         \
    \   }\n        }\n        if (smalest_index != arr.IndexOf(smalest_value)) {\n\
    \            result.Add(smalest_value);\n            result.Add(smalest_index);\n\
    \        } else {\n            result.Add(smalest_value);\n            result.Add(0);\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L,\
    \ (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n  \
    \  Debug.Assert(Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <39320bbc801e42dfbee9cbfa35cafb86>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <39320bbc801e42dfbee9cbfa35cafb86>:0 \n\nUnhandled Exception:\n\
    System.InvalidOperationException: Sequence contains no elements\n  at System.Linq.Enumerable.Min\
    \ (System.Collections.Generic.IEnumerable`1[T] source) [0x00022] in <e540098dd111461e919c5863f6975c29>:0\
    \ \n  at Problem.Pluck (System.Collections.Generic.List`1[T] arr) [0x00001] in\
    \ <39320bbc801e42dfbee9cbfa35cafb86>:0 \n  at Prob"
  stdout: ''
  timestamp: 1659976384
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 2:\n    // Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n    // Example 3:\n    // Example 4:\n    // Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n    // so we will choose\
    \ the first zero, which has the smallest index.\n    // Constraints:\n    // *\
    \ 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n    public static List<long>\
    \ Pluck(List<long> arr) {\n        List<long> result = new List<long>();\n   \
    \     long smalest_value = arr.Min();\n        int smalest_index = 0;\n      \
    \  foreach (long n in arr) {\n            if (n % 2 == 0) {\n                if\
    \ (smalest_value < n) {\n                    smalest_value = n;\n            \
    \        smalest_index = arr.IndexOf(n);\n                }\n            }\n \
    \       }\n        if (smalest_index > 0) {\n            result.Add(smalest_value);\n\
    \            result.Add(smalest_index);\n        }\n        return result;\n \
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,\
    \ (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <828d62aab51544269baa78a68af351b5>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <828d62aab51544269baa78a68af351b5>:0 \n\nUnhandled Exception:\n\
    System.InvalidOperationException: Sequence contains no elements\n  at System.Linq.Enumerable.Min\
    \ (System.Collections.Generic.IEnumerable`1[T] source) [0x00022] in <e540098dd111461e919c5863f6975c29>:0\
    \ \n  at Problem.Pluck (System.Collections.Generic.List`1[T] arr) [0x00007] in\
    \ <828d62aab51544269baa78a68af351b5>:0 \n  at Prob"
  stdout: ''
  timestamp: 1659976380
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 2:\n    // Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n    // Example 3:\n    // Example 4:\n    // Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n    // so we will choose\
    \ the first zero, which has the smallest index.\n    // Constraints:\n    // *\
    \ 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n    public static List<long>\
    \ Pluck(List<long> arr) {\n        List<long> result = new List<long>();\n   \
    \     long smallest_value = arr.Min();\n        long smallest_index = -1;\n  \
    \      long smallest_even_value = -1;\n        foreach (long i in arr) {\n   \
    \         if (i % 2 == 0) {\n                if (smallest_even_value == -1) {\n\
    \                    smallest_even_value = i;\n                    smallest_index\
    \ = i;\n                } else {\n                    if (smallest_even_value\
    \ < i) {\n                        smallest_even_value = i;\n                 \
    \       smallest_index = i;\n                    }\n                }\n      \
    \      }\n        }\n        if (smallest_even_value == -1) {\n            return\
    \ result;\n        }\n        result.Add(smallest_even_value);\n        result.Add(smallest_index);\n\
    \        return result;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,\
    \ (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <7c7ded83cb724b029dfcacdb82dfa90b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <7c7ded83cb724b029dfcacdb82dfa90b>:0 \n\nUnhandled Exception:\n\
    System.InvalidOperationException: Sequence contains no elements\n  at System.Linq.Enumerable.Min\
    \ (System.Collections.Generic.IEnumerable`1[T] source) [0x00022] in <e540098dd111461e919c5863f6975c29>:0\
    \ \n  at Problem.Pluck (System.Collections.Generic.List`1[T] arr) [0x00007] in\
    \ <7c7ded83cb724b029dfcacdb82dfa90b>:0 \n  at Prob"
  stdout: ''
  timestamp: 1659976385
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 2:\n    // Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n    // Example 3:\n    // Example 4:\n    // Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n    // so we will choose\
    \ the first zero, which has the smallest index.\n    // Constraints:\n    // *\
    \ 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n    public static List<long>\
    \ Pluck(List<long> arr) {\n        long smalest_value = arr.Min();\n        List<long>\
    \ result = new List<long>();\n        long smallest_index = -1;\n        bool\
    \ found = false;\n        for (int i = 0; i < arr.Count; i++) {\n            if\
    \ (arr[i] % 2 == 0) {\n                if (found == false) {\n               \
    \     smallest_index = i;\n                    found = true;\n               \
    \ }\n                if (arr[i] < smalest_value) {\n                    smalest_value\
    \ = arr[i];\n                }\n            }\n        }\n        if (found ==\
    \ true) {\n            result.Add(smalest_value);\n            result.Add(smallest_index);\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L,\
    \ (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n  \
    \  Debug.Assert(Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <2186f2dcad37488db09d9cd44d8a4a61>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <2186f2dcad37488db09d9cd44d8a4a61>:0 \n\nUnhandled Exception:\n\
    System.InvalidOperationException: Sequence contains no elements\n  at System.Linq.Enumerable.Min\
    \ (System.Collections.Generic.IEnumerable`1[T] source) [0x00022] in <e540098dd111461e919c5863f6975c29>:0\
    \ \n  at Problem.Pluck (System.Collections.Generic.List`1[T] arr) [0x00001] in\
    \ <2186f2dcad37488db09d9cd44d8a4a61>:0 \n  at Prob"
  stdout: ''
  timestamp: 1659976385
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 2:\n    // Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n    // Example 3:\n    // Example 4:\n    // Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n    // so we will choose\
    \ the first zero, which has the smallest index.\n    // Constraints:\n    // *\
    \ 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n    public static List<long>\
    \ Pluck(List<long> arr) {\n        long smallestEvenValue = arr.Min();\n     \
    \   long smallestIndex = arr.IndexOf(smallestEvenValue);\n        List<long> result\
    \ = new List<long>();\n        if (smallestEvenValue % 2 == 0) {\n           \
    \ result.Add(smallestEvenValue);\n            result.Add(smallestIndex);\n   \
    \     }\n        else {\n            int count = 0;\n            foreach (long\
    \ n in arr) {\n                if (n % 2 == 0) {\n                    result.Add(n);\n\
    \                    result.Add(count);\n                    count++;\n      \
    \          }\n            }\n        }\n        if (result.Count == 0) {\n   \
    \         return new List<long>();\n        }\n        else {\n            return\
    \ result;\n        }\n    }\n    public static void Main(string[] args) {\n  \
    \  Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,\
    \ (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <4330ce5a3c2d476ba48aaad89a4a437d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <4330ce5a3c2d476ba48aaad89a4a437d>:0 \n\nUnhandled Exception:\n\
    System.InvalidOperationException: Sequence contains no elements\n  at System.Linq.Enumerable.Min\
    \ (System.Collections.Generic.IEnumerable`1[T] source) [0x00022] in <e540098dd111461e919c5863f6975c29>:0\
    \ \n  at Problem.Pluck (System.Collections.Generic.List`1[T] arr) [0x00001] in\
    \ <4330ce5a3c2d476ba48aaad89a4a437d>:0 \n  at Prob"
  stdout: ''
  timestamp: 1659976385
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 2:\n    // Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n    // Example 3:\n    // Example 4:\n    // Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n    // so we will choose\
    \ the first zero, which has the smallest index.\n    // Constraints:\n    // *\
    \ 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n    public static List<long>\
    \ Pluck(List<long> arr) {\n        long smallest_value = arr.Min();\n        long\
    \ smallest_index = -1;\n        List<long> result = new List<long>();\n      \
    \  foreach (long n in arr) {\n            if (n % 2 == 0) {\n                if\
    \ (smallest_value == 0 || n < smallest_value) {\n                    smallest_value\
    \ = n;\n                    smallest_index = arr.IndexOf(n);\n               \
    \ }\n            }\n        }\n        if (smallest_index != -1) {\n         \
    \   result.Add(smallest_value);\n            result.Add(smallest_index);\n   \
    \     }\n        return result;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,\
    \ (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8875def2e2c944f5a32f03dbe27a9d90>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8875def2e2c944f5a32f03dbe27a9d90>:0 \n\nUnhandled Exception:\n\
    System.InvalidOperationException: Sequence contains no elements\n  at System.Linq.Enumerable.Min\
    \ (System.Collections.Generic.IEnumerable`1[T] source) [0x00022] in <e540098dd111461e919c5863f6975c29>:0\
    \ \n  at Problem.Pluck (System.Collections.Generic.List`1[T] arr) [0x00001] in\
    \ <8875def2e2c944f5a32f03dbe27a9d90>:0 \n  at Prob"
  stdout: ''
  timestamp: 1659976379
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 2:\n    // Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n    // Example 3:\n    // Example 4:\n    // Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n    // so we will choose\
    \ the first zero, which has the smallest index.\n    // Constraints:\n    // *\
    \ 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n    public static List<long>\
    \ Pluck(List<long> arr) {\n        long smalest_value = arr.Min();\n        long\
    \ smalest_index = 0;\n        List<long> result = new List<long>();\n        foreach\
    \ (long n in arr) {\n            if (n % 2 == 0) {\n                if (smalest_value\
    \ == n) {\n                    smalest_index = arr.IndexOf(n);\n             \
    \   }\n                else {\n                    smalest_value = n;\n      \
    \              smalest_index = arr.IndexOf(n);\n                }\n          \
    \  }\n        }\n        if (smalest_index != arr.IndexOf(smalest_value)) {\n\
    \            smalest_index = arr.IndexOf(smalest_value);\n        }\n        result.Add(smalest_value);\n\
    \        result.Add(smalest_index);\n        return result;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n\
    \    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n   \
    \ Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,\
    \ (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <34163d06a5ff4521bcb12374a08710a4>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <34163d06a5ff4521bcb12374a08710a4>:0 \n\nUnhandled Exception:\n\
    System.InvalidOperationException: Sequence contains no elements\n  at System.Linq.Enumerable.Min\
    \ (System.Collections.Generic.IEnumerable`1[T] source) [0x00022] in <e540098dd111461e919c5863f6975c29>:0\
    \ \n  at Problem.Pluck (System.Collections.Generic.List`1[T] arr) [0x00001] in\
    \ <34163d06a5ff4521bcb12374a08710a4>:0 \n  at Prob"
  stdout: ''
  timestamp: 1659976384
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 2:\n    // Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n    // Example 3:\n    // Example 4:\n    // Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n    // so we will choose\
    \ the first zero, which has the smallest index.\n    // Constraints:\n    // *\
    \ 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n    public static List<long>\
    \ Pluck(List<long> arr) {\n        long smalest_value = 0;\n        long smalest_index\
    \ = 0;\n        long smalest_even_value = 0;\n        long smalest_even_index\
    \ = 0;\n        List<long> result = new List<long>();\n        foreach (long node\
    \ in arr) {\n            if (node % 2 == 0) {\n                if (smalest_value\
    \ == 0) {\n                    smalest_value = node;\n                    smalest_index\
    \ = arr.IndexOf(node);\n                    smalest_even_value = node % 2;\n \
    \                   smalest_even_index = arr.IndexOf(node % 2);\n            \
    \    } else if (smalest_value == node % 2) {\n                    smalest_even_value\
    \ = node % 2;\n                    smalest_even_index = arr.IndexOf(node % 2);\n\
    \                } else {\n                    smalest_value = node;\n       \
    \             smalest_index = arr.IndexOf(node);\n                    smalest_even_value\
    \ = node % 2;\n                    smalest_even_index = arr.IndexOf(node % 2);\n\
    \                }\n            }\n        }\n        if (smalest_value == 0)\
    \ {\n            return new List<long>();\n        }\n        if (smalest_value\
    \ == smalest_even_value) {\n            result.Add(smalest_value);\n         \
    \   result.Add(smalest_index);\n            return result;\n        }\n      \
    \  if (smalest_value == smalest_even_value) {\n            result.Add(smalest_value);\n\
    \            result.Add(smalest_index);\n            result.Add(smalest_even_value);\n\
    \            result.Add(smalest_even_index);\n            return result;\n   \
    \     }\n        if (smalest_value == smalest_even_value) {\n            result.Add(smalest_value);\n\
    \            result.Add(smalest_index);\n            result.Add(smalest_even_value);\n\
    \            result.Add(smalest_even_index);\n            result.Add(smalest_value);\n\
    \            result.Add(smalest_even_index);\n            return result;\n   \
    \     }\n        if (smalest_value == smalest_even_value) {\n            result.Add(smalest_value);\n\
    \            result.Add(smalest_index);\n            result.Add(smalest_even_value);\n\
    \            result.Add(smalest_even_index);\n            result.Add(smalest_value);\n\
    \            result.Add(smalest_even_index);\n            result.Add(smalest_value);\n\
    \            result.Add(smalest_even_index);\n            return result;\n   \
    \     }\n        if (smalest_value == smalest_even_value) {\n            result.Add(smalest_value);\n\
    \            result.Add(smalest_index);\n            result.Add(smalest_even_value);\n\
    \            result.Add(smalest_even_index);\n            result.Add(smalest_value);\n\
    \            result.Add(smalest_even_index);\n            result.Add(smalest_value);\n\
    \            result.Add(smalest_even_index);\n            result.Add(smalest_value);\n\
    \            result.\n    }\n    public static void Main(string[] args) {\n  \
    \  Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,\
    \ (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpei_nyegg.cs(95,20): error CS1001: Identifier expected

    /tmp/tmpei_nyegg.cs(95,20): error CS1002: ; expected

    /tmp/tmpei_nyegg.cs(97,5): error CS0106: The modifier ''public'' is not valid
    for this item

    /tmp/tmpei_nyegg.cs(108,2): error CS1513: } expected

    '
  timestamp: 1659976384
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 2:\n    // Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n    // Example 3:\n    // Example 4:\n    // Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n    // so we will choose\
    \ the first zero, which has the smallest index.\n    // Constraints:\n    // *\
    \ 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n    public static List<long>\
    \ Pluck(List<long> arr) {\n        long smallestEvenValue = arr.Min();\n     \
    \   List<long> result = new List<long>();\n        long smallestIndex = 0;\n \
    \       bool foundSmallestEvenValue = false;\n        for (int i = 0; i < arr.Count;\
    \ i++) {\n            if (arr[i] % 2 == 0) {\n                if (smallestEvenValue\
    \ < arr[i]) {\n                    smallestEvenValue = arr[i];\n             \
    \       foundSmallestEvenValue = true;\n                }\n                if\
    \ (smallestEvenValue == arr[i]) {\n                    smallestIndex = i;\n  \
    \              }\n            }\n        }\n        if (foundSmallestEvenValue)\
    \ {\n            result.Add(smallestEvenValue);\n            result.Add(smallestIndex);\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L,\
    \ (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n  \
    \  Debug.Assert(Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <f053cdafb5dd481e9d308a1c7c1ca1c3>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <f053cdafb5dd481e9d308a1c7c1ca1c3>:0 \n\nUnhandled Exception:\n\
    System.InvalidOperationException: Sequence contains no elements\n  at System.Linq.Enumerable.Min\
    \ (System.Collections.Generic.IEnumerable`1[T] source) [0x00022] in <e540098dd111461e919c5863f6975c29>:0\
    \ \n  at Problem.Pluck (System.Collections.Generic.List`1[T] arr) [0x00001] in\
    \ <f053cdafb5dd481e9d308a1c7c1ca1c3>:0 \n  at Prob"
  stdout: ''
  timestamp: 1659976385
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 2:\n    // Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n    // Example 3:\n    // Example 4:\n    // Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n    // so we will choose\
    \ the first zero, which has the smallest index.\n    // Constraints:\n    // *\
    \ 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n    public static List<long>\
    \ Pluck(List<long> arr) {\n        List<long> result = new List<long>();\n   \
    \     long smallest_value = 0;\n        long smallest_index = 0;\n        long\
    \ smallest_even_value = 0;\n        bool found = false;\n        for (int i =\
    \ 0; i < arr.Count; i++) {\n            if (arr[i] % 2 == 0) {\n             \
    \   smallest_even_value = arr[i];\n                found = true;\n           \
    \ }\n            if (found == true) {\n                if (smallest_value == 0)\
    \ {\n                    smallest_value = arr[i];\n                    smallest_index\
    \ = i;\n                }\n                else if (smallest_value < arr[i]) {\n\
    \                    smallest_value = arr[i];\n                    smallest_index\
    \ = i;\n                }\n            }\n        }\n        if (smallest_value\
    \ == 0) {\n            return new List<long>();\n        }\n        else if (smallest_value\
    \ == smallest_even_value) {\n            result.Add(smallest_value);\n       \
    \     result.Add(smallest_index);\n        }\n        else {\n            List<long>\
    \ temp = new List<long>();\n            temp.Add(smallest_value);\n          \
    \  temp.Add(smallest_index);\n            temp.Add(smallest_even_value);\n   \
    \         result = temp;\n        }\n        return result;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n\
    \    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n   \
    \ Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,\
    \ (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <5a6231b88424426798ea3341f6dc463d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <5a6231b88424426798ea3341f6dc463d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976385
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 2:\n    // Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n    // Example 3:\n    // Example 4:\n    // Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n    // so we will choose\
    \ the first zero, which has the smallest index.\n    // Constraints:\n    // *\
    \ 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n    public static List<long>\
    \ Pluck(List<long> arr) {\n        List<long> result = new List<long>();\n   \
    \     long smallestEvenValue = arr.Min();\n        long smallestIndex = 0;\n \
    \       bool isSmallestEvenValue = true;\n        bool isSmallestIndex = true;\n\
    \        long smallestValue = 0;\n        long smallestIndexValue = 0;\n     \
    \   long currentValue = 0;\n        long currentIndex = 0;\n        foreach (long\
    \ value in arr) {\n            if (isSmallestEvenValue) {\n                if\
    \ (value == smallestEvenValue) {\n                    isSmallestEvenValue = false;\n\
    \                    isSmallestIndex = true;\n                    smallestValue\
    \ = value;\n                    smallestIndexValue = currentValue;\n         \
    \           smallestIndex = currentIndex;\n                }\n               \
    \ else {\n                    isSmallestEvenValue = true;\n                  \
    \  isSmallestIndex = false;\n                }\n            }\n            if\
    \ (isSmallestIndex) {\n                if (value == smallestIndex) {\n       \
    \             isSmallestIndex = false;\n                    isSmallestEvenValue\
    \ = true;\n                    smallestValue = value;\n                    smallestIndexValue\
    \ = currentValue;\n                    smallestIndex = currentIndex;\n       \
    \         }\n                else {\n                    isSmallestIndex = true;\n\
    \                    isSmallestEvenValue = false;\n                }\n       \
    \     }\n            if (isSmallestEvenValue && isSmallestIndex) {\n         \
    \       if (value == smallestIndexValue) {\n                    result.Add(smallestIndex);\n\
    \                    isSmallestIndex = false;\n                    isSmallestEvenValue\
    \ = false;\n                    smallestValue = value;\n                    smallestIndexValue\
    \ = currentValue;\n                    smallestIndex = currentIndex;\n       \
    \         }\n                else {\n                    result.Add(smallestIndex);\n\
    \                    isSmallestIndex = true;\n                    isSmallestEvenValue\
    \ = false;\n                }\n            }\n            currentValue = value;\n\
    \            currentIndex = arr.IndexOf(value);\n        }\n        if (result.Count\
    \ == 0) {\n            return new List<long>();\n        }\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,\
    \ (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <f2f28da3f404481a86999fdbc706599f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <f2f28da3f404481a86999fdbc706599f>:0 \n\nUnhandled Exception:\n\
    System.InvalidOperationException: Sequence contains no elements\n  at System.Linq.Enumerable.Min\
    \ (System.Collections.Generic.IEnumerable`1[T] source) [0x00022] in <e540098dd111461e919c5863f6975c29>:0\
    \ \n  at Problem.Pluck (System.Collections.Generic.List`1[T] arr) [0x00007] in\
    \ <f2f28da3f404481a86999fdbc706599f>:0 \n  at Prob"
  stdout: ''
  timestamp: 1659976385
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 2:\n    // Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n    // Example 3:\n    // Example 4:\n    // Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n    // so we will choose\
    \ the first zero, which has the smallest index.\n    // Constraints:\n    // *\
    \ 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n    public static List<long>\
    \ Pluck(List<long> arr) {\n        long smalest_value = arr.Min();\n        long\
    \ smalest_index = 0;\n        List<long> result = new List<long>();\n        foreach\
    \ (long n in arr) {\n            if (n % 2 == 0) {\n                if (smalest_value\
    \ < n) {\n                    smalest_value = n;\n                    smalest_index\
    \ = arr.IndexOf(n);\n                }\n            }\n        }\n        if (smalest_index\
    \ > 0) {\n            result.Add(smalest_value);\n            result.Add(smalest_index);\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L,\
    \ (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n  \
    \  Debug.Assert(Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <549d5fc217d540d29ed6089d76e118a0>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <549d5fc217d540d29ed6089d76e118a0>:0 \n\nUnhandled Exception:\n\
    System.InvalidOperationException: Sequence contains no elements\n  at System.Linq.Enumerable.Min\
    \ (System.Collections.Generic.IEnumerable`1[T] source) [0x00022] in <e540098dd111461e919c5863f6975c29>:0\
    \ \n  at Problem.Pluck (System.Collections.Generic.List`1[T] arr) [0x00001] in\
    \ <549d5fc217d540d29ed6089d76e118a0>:0 \n  at Prob"
  stdout: ''
  timestamp: 1659976380
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 2:\n    // Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n    // Example 3:\n    // Example 4:\n    // Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n    // so we will choose\
    \ the first zero, which has the smallest index.\n    // Constraints:\n    // *\
    \ 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n    public static List<long>\
    \ Pluck(List<long> arr) {\n        List<long> result = new List<long>();\n   \
    \     long smalest_value = arr.Min();\n        long smalest_index = 0;\n     \
    \   long smalest_even_value = 0;\n        long smalest_even_index = 0;\n     \
    \   foreach (long n in arr) {\n            if (n % 2 == 0) {\n               \
    \ if (smalest_value == 0) {\n                    smalest_value = n;\n        \
    \            smalest_index = arr.IndexOf(n);\n                    smalest_even_value\
    \ = n % 2;\n                    smalest_even_index = n;\n                } else\
    \ if (smalest_value == n) {\n                    smalest_even_value = n % 2;\n\
    \                    smalest_even_index = n;\n                } else if (smalest_value\
    \ < n) {\n                    smalest_value = n;\n                    smalest_index\
    \ = arr.IndexOf(n);\n                    smalest_even_value = n % 2;\n       \
    \             smalest_even_index = n;\n                }\n            }\n    \
    \    }\n        if (smalest_value == 0) {\n            return new List<long>();\n\
    \        }\n        long smalest_even_value_2 = smalest_value % 2;\n        if\
    \ (smalest_even_value_2 == 0) {\n            result.Add(smalest_even_value);\n\
    \            result.Add(smalest_even_index);\n            return result;\n   \
    \     } else {\n            List<long> even_values = new List<long>();\n     \
    \       List<long> even_indexes = new List<long>();\n            foreach (long\
    \ n in arr) {\n                if (n % 2 == 0) {\n                    if (smalest_value\
    \ == 0) {\n                        smalest_value = n;\n                      \
    \  smalest_index = arr.IndexOf(n);\n                        smalest_even_value\
    \ = n % 2;\n                        smalest_even_index = n;\n                \
    \    } else if (smalest_value == n) {\n                        smalest_even_value\
    \ = n % 2;\n                        smalest_even_index = n;\n                \
    \    } else if (smalest_value < n) {\n                        smalest_value =\
    \ n;\n                        smalest_index = arr.IndexOf(n);\n              \
    \          smalest_even_value = n % 2;\n                        smalest_even_index\
    \ = n;\n                    }\n                }\n            }\n            even_values.Add(smalest_even_value);\n\
    \            even_indexes.Add(smalest_even_index);\n            even_values.AddRange(even_values.Where(x\
    \ => x % 2 == 1).Select(x => x % 2));\n            even_indexes.AddRange(even_indexes.Where(x\
    \ => x % 2 == 1).Select(x => x % 2));\n            even_values.Sort();\n     \
    \       even_indexes.Sort();\n            even_values.Reverse();\n           \
    \ even_indexes.Reverse();\n            even_values.Remove(smalest_even_value);\n\
    \            even_indexes.Remove(smalest_even\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L,\
    \ (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n  \
    \  Debug.Assert(Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp0skh86b1.cs(88,45): error CS1026: ) expected

    /tmp/tmp0skh86b1.cs(88,45): error CS1002: ; expected

    /tmp/tmp0skh86b1.cs(90,5): error CS0106: The modifier ''public'' is not valid
    for this item

    /tmp/tmp0skh86b1.cs(101,2): error CS1513: } expected

    '
  timestamp: 1659976384
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 2:\n    // Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n    // Example 3:\n    // Example 4:\n    // Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n    // so we will choose\
    \ the first zero, which has the smallest index.\n    // Constraints:\n    // *\
    \ 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n    public static List<long>\
    \ Pluck(List<long> arr) {\n        List<long> result = new List<long>();\n   \
    \     long smalest_value = arr.Min();\n        long smalest_index = 0;\n     \
    \   long smalest_even_value = 0;\n        bool found = false;\n        for (int\
    \ i = 0; i < arr.Count; i++) {\n            if (arr[i] % 2 == 0) {\n         \
    \       smalest_even_value = arr[i];\n                smalest_index = i;\n   \
    \             found = true;\n                break;\n            }\n        }\n\
    \        if (found) {\n            result.Add(smalest_even_value);\n         \
    \   result.Add(smalest_index);\n        }\n        else {\n            if (arr.Count\
    \ == 0) {\n                result.Add(0);\n                result.Add(0);\n  \
    \          }\n            else {\n                result.Add(smalest_value);\n\
    \                result.Add(0);\n            }\n        }\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,\
    \ (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <0abe03b6da0549d19103b45d666a12cc>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <0abe03b6da0549d19103b45d666a12cc>:0 \n\nUnhandled Exception:\n\
    System.InvalidOperationException: Sequence contains no elements\n  at System.Linq.Enumerable.Min\
    \ (System.Collections.Generic.IEnumerable`1[T] source) [0x00022] in <e540098dd111461e919c5863f6975c29>:0\
    \ \n  at Problem.Pluck (System.Collections.Generic.List`1[T] arr) [0x00007] in\
    \ <0abe03b6da0549d19103b45d666a12cc>:0 \n  at Prob"
  stdout: ''
  timestamp: 1659976385
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 2:\n    // Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n    // Example 3:\n    // Example 4:\n    // Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n    // so we will choose\
    \ the first zero, which has the smallest index.\n    // Constraints:\n    // *\
    \ 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n    public static List<long>\
    \ Pluck(List<long> arr) {\n        long smallest_value = arr.Min();\n        long\
    \ smallest_index = 0;\n        List<long> result = new List<long>();\n       \
    \ foreach (long n in arr) {\n            if (n % 2 == 0) {\n                if\
    \ (smallest_value == n) {\n                    smallest_index = arr.IndexOf(n);\n\
    \                }\n                else {\n                    if (smallest_value\
    \ < n) {\n                        smallest_value = n;\n                      \
    \  smallest_index = arr.IndexOf(n);\n                    }\n                }\n\
    \            }\n        }\n        if (smallest_index != 0) {\n            result.Add(smallest_value);\n\
    \            result.Add(smallest_index);\n        }\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,\
    \ (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <22fae669fad448d8ad2920a006617681>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <22fae669fad448d8ad2920a006617681>:0 \n\nUnhandled Exception:\n\
    System.InvalidOperationException: Sequence contains no elements\n  at System.Linq.Enumerable.Min\
    \ (System.Collections.Generic.IEnumerable`1[T] source) [0x00022] in <e540098dd111461e919c5863f6975c29>:0\
    \ \n  at Problem.Pluck (System.Collections.Generic.List`1[T] arr) [0x00001] in\
    \ <22fae669fad448d8ad2920a006617681>:0 \n  at Prob"
  stdout: ''
  timestamp: 1659976385
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 2:\n    // Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n    // Example 3:\n    // Example 4:\n    // Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n    // so we will choose\
    \ the first zero, which has the smallest index.\n    // Constraints:\n    // *\
    \ 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n    public static List<long>\
    \ Pluck(List<long> arr) {\n        List<long> result = new List<long>();\n   \
    \     long smallestEvenValue = arr.Min();\n        long smallestIndex = arr.IndexOf(smallestEvenValue);\n\
    \        if (smallestEvenValue % 2 == 0) {\n            result.Add(smallestEvenValue);\n\
    \            result.Add(smallestIndex);\n        }\n        else {\n         \
    \   int evenCount = 0;\n            int index = 0;\n            foreach (long\
    \ n in arr) {\n                if (n % 2 == 0) {\n                    evenCount++;\n\
    \                    if (evenCount > 1) {\n                        result.Add(n);\n\
    \                        result.Add(index);\n                        break;\n\
    \                    }\n                }\n                index++;\n        \
    \    }\n        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L,\
    \ (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n  \
    \  Debug.Assert(Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d30318a6f6474defacd8f420e7b820df>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d30318a6f6474defacd8f420e7b820df>:0 \n\nUnhandled Exception:\n\
    System.InvalidOperationException: Sequence contains no elements\n  at System.Linq.Enumerable.Min\
    \ (System.Collections.Generic.IEnumerable`1[T] source) [0x00022] in <e540098dd111461e919c5863f6975c29>:0\
    \ \n  at Problem.Pluck (System.Collections.Generic.List`1[T] arr) [0x00007] in\
    \ <d30318a6f6474defacd8f420e7b820df>:0 \n  at Prob"
  stdout: ''
  timestamp: 1659976385
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 2:\n    // Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n    // Example 3:\n    // Example 4:\n    // Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n    // so we will choose\
    \ the first zero, which has the smallest index.\n    // Constraints:\n    // *\
    \ 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n    public static List<long>\
    \ Pluck(List<long> arr) {\n        List<long> result = new List<long>();\n   \
    \     long smallest_value = 0;\n        long smallest_index = 0;\n        long\
    \ current_value = 0;\n        long current_index = 0;\n        foreach (long n\
    \ in arr) {\n            if (n % 2 == 0) {\n                current_value = n;\n\
    \                current_index = current_index + 1;\n            } else {\n  \
    \              if (current_value < smallest_value) {\n                    smallest_value\
    \ = current_value;\n                    smallest_index = current_index;\n    \
    \            }\n                current_value = n;\n                current_index\
    \ = current_index + 1;\n            }\n        }\n        if (smallest_value ==\
    \ 0) {\n            return new List<long>();\n        }\n        result.Add(smallest_value);\n\
    \        result.Add(smallest_index);\n        return result;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n\
    \    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n   \
    \ Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,\
    \ (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <660cd6a2762d4dfdad0c7773d137470b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <660cd6a2762d4dfdad0c7773d137470b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976385
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 2:\n    // Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n    // Example 3:\n    // Example 4:\n    // Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n    // so we will choose\
    \ the first zero, which has the smallest index.\n    // Constraints:\n    // *\
    \ 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n    public static List<long>\
    \ Pluck(List<long> arr) {\n        long smalest_value = arr.Min();\n        long\
    \ smalest_index = 0;\n        List<long> result = new List<long>();\n        foreach\
    \ (long n in arr) {\n            if (n % 2 == 0) {\n                if (smalest_value\
    \ < n) {\n                    smalest_value = n;\n                    smalest_index\
    \ = arr.IndexOf(n);\n                }\n            }\n        }\n        if (smalest_index\
    \ != 0) {\n            result.Add(smalest_value);\n            result.Add(smalest_index);\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L,\
    \ (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n  \
    \  Debug.Assert(Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <6040d3fb6bc041419af64eb830d62e50>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <6040d3fb6bc041419af64eb830d62e50>:0 \n\nUnhandled Exception:\n\
    System.InvalidOperationException: Sequence contains no elements\n  at System.Linq.Enumerable.Min\
    \ (System.Collections.Generic.IEnumerable`1[T] source) [0x00022] in <e540098dd111461e919c5863f6975c29>:0\
    \ \n  at Problem.Pluck (System.Collections.Generic.List`1[T] arr) [0x00001] in\
    \ <6040d3fb6bc041419af64eb830d62e50>:0 \n  at Prob"
  stdout: ''
  timestamp: 1659976379
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 2:\n    // Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n    // Example 3:\n    // Example 4:\n    // Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n    // so we will choose\
    \ the first zero, which has the smallest index.\n    // Constraints:\n    // *\
    \ 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n    public static List<long>\
    \ Pluck(List<long> arr) {\n        List<long> result = new List<long>();\n   \
    \     long smallestEvenValue = arr.Min();\n        long smallestIndex = 0;\n \
    \       long smallestEvenValueIndex = 0;\n        bool isSmallestEvenValue = true;\n\
    \        bool isSmallestEvenValueIndex = true;\n        foreach (long n in arr)\
    \ {\n            if (n % 2 == 0) {\n                if (isSmallestEvenValue) {\n\
    \                    smallestEvenValue = n;\n                    smallestEvenValueIndex\
    \ = arr.IndexOf(n);\n                }\n                else {\n             \
    \       smallestEvenValue = n;\n                    smallestEvenValueIndex = arr.IndexOf(n);\n\
    \                    isSmallestEvenValue = true;\n                    isSmallestEvenValueIndex\
    \ = true;\n                }\n            }\n            else {\n            \
    \    if (isSmallestEvenValueIndex) {\n                    smallestEvenValue =\
    \ n;\n                    smallestEvenValueIndex = arr.IndexOf(n);\n         \
    \           isSmallestEvenValue = true;\n                    isSmallestEvenValueIndex\
    \ = false;\n                }\n                else {\n                    smallestEvenValue\
    \ = n;\n                    smallestEvenValueIndex = arr.IndexOf(n);\n       \
    \             isSmallestEvenValue = true;\n                    isSmallestEvenValueIndex\
    \ = true;\n                }\n            }\n        }\n        result.Add(smallestEvenValue);\n\
    \        result.Add(smallestEvenValueIndex);\n        return result;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n\
    \    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n   \
    \ Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,\
    \ (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <17b9438b7cc3458cb90fa33fa76f8b0d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <17b9438b7cc3458cb90fa33fa76f8b0d>:0 \n\nUnhandled Exception:\n\
    System.InvalidOperationException: Sequence contains no elements\n  at System.Linq.Enumerable.Min\
    \ (System.Collections.Generic.IEnumerable`1[T] source) [0x00022] in <e540098dd111461e919c5863f6975c29>:0\
    \ \n  at Problem.Pluck (System.Collections.Generic.List`1[T] arr) [0x00007] in\
    \ <17b9438b7cc3458cb90fa33fa76f8b0d>:0 \n  at Prob"
  stdout: ''
  timestamp: 1659976385
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 2:\n    // Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n    // Example 3:\n    // Example 4:\n    // Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n    // so we will choose\
    \ the first zero, which has the smallest index.\n    // Constraints:\n    // *\
    \ 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n    public static List<long>\
    \ Pluck(List<long> arr) {\n        List<long> result = new List<long>();\n   \
    \     long smallest_value = 0;\n        long smallest_index = 0;\n        bool\
    \ found = false;\n        foreach (var node in arr) {\n            if (node %\
    \ 2 == 0) {\n                found = true;\n                if (smallest_value\
    \ == 0) {\n                    smallest_value = node;\n                    smallest_index\
    \ = arr.IndexOf(node);\n                } else {\n                    if (smallest_value\
    \ < node) {\n                        smallest_value = node;\n                \
    \        smallest_index = arr.IndexOf(node);\n                    }\n        \
    \        }\n            }\n        }\n        if (found == true) {\n         \
    \   result.Add(smallest_value);\n            result.Add(smallest_index);\n   \
    \     }\n        return result;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,\
    \ (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <eaaa6014a3ac418f93c01bbe51a389e6>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <eaaa6014a3ac418f93c01bbe51a389e6>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976385
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 2:\n    // Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n    // Example 3:\n    // Example 4:\n    // Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n    // so we will choose\
    \ the first zero, which has the smallest index.\n    // Constraints:\n    // *\
    \ 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n    public static List<long>\
    \ Pluck(List<long> arr) {\n        long smalest_value = 0;\n        long smalest_index\
    \ = 0;\n        List<long> result = new List<long>();\n        foreach (var node\
    \ in arr) {\n            if (node % 2 == 0) {\n                if (smalest_value\
    \ < node) {\n                    smalest_value = node;\n                    smalest_index\
    \ = arr.IndexOf(node);\n                }\n            }\n        }\n        if\
    \ (smalest_value == 0) {\n            return new List<long>();\n        }\n  \
    \      result.Add(smalest_value);\n        result.Add(smalest_index);\n      \
    \  return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,\
    \ (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <10e55049278945b3b80088fba00bee74>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <10e55049278945b3b80088fba00bee74>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976385
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 2:\n    // Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n    // Example 3:\n    // Example 4:\n    // Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n    // so we will choose\
    \ the first zero, which has the smallest index.\n    // Constraints:\n    // *\
    \ 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n    public static List<long>\
    \ Pluck(List<long> arr) {\n        long smalest_value = arr.Min();\n        long\
    \ smalest_index = 0;\n        List<long> result = new List<long>();\n        foreach\
    \ (var item in arr) {\n            if (item % 2 == 0) {\n                if (item\
    \ < smalest_value) {\n                    smalest_value = item;\n            \
    \        smalest_index = arr.IndexOf(item);\n                }\n            }\n\
    \        }\n        if (smalest_index > 0) {\n            result.Add(smalest_value);\n\
    \            result.Add(smalest_index);\n        }\n        return result;\n \
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,\
    \ (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <870e47883b6848978c953e2285110330>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <870e47883b6848978c953e2285110330>:0 \n\nUnhandled Exception:\n\
    System.InvalidOperationException: Sequence contains no elements\n  at System.Linq.Enumerable.Min\
    \ (System.Collections.Generic.IEnumerable`1[T] source) [0x00022] in <e540098dd111461e919c5863f6975c29>:0\
    \ \n  at Problem.Pluck (System.Collections.Generic.List`1[T] arr) [0x00001] in\
    \ <870e47883b6848978c953e2285110330>:0 \n  at Prob"
  stdout: ''
  timestamp: 1659976381
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 2:\n    // Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n    // Example 3:\n    // Example 4:\n    // Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n    // so we will choose\
    \ the first zero, which has the smallest index.\n    // Constraints:\n    // *\
    \ 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n    public static List<long>\
    \ Pluck(List<long> arr) {\n        List<long> result = new List<long>();\n   \
    \     if (arr.Count == 0) {\n            return result;\n        }\n        long\
    \ minValue = arr.Min();\n        long minIndex = 0;\n        long minEvenValue\
    \ = 0;\n        bool isEven = false;\n        for (int i = 0; i < arr.Count; i++)\
    \ {\n            if (arr[i] % 2 == 0) {\n                isEven = true;\n    \
    \        }\n            if (isEven) {\n                if (arr[i] < minEvenValue)\
    \ {\n                    minEvenValue = arr[i];\n                    minIndex\
    \ = i;\n                }\n            }\n            else {\n               \
    \ if (arr[i] < minValue) {\n                    minValue = arr[i];\n         \
    \           minIndex = i;\n                }\n            }\n        }\n     \
    \   result.Add(minValue);\n        result.Add(minIndex);\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,\
    \ (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <661ad01e8a154afaaff8c7e8e08bab62>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <661ad01e8a154afaaff8c7e8e08bab62>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976385
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 2:\n    // Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n    // Example 3:\n    // Example 4:\n    // Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n    // so we will choose\
    \ the first zero, which has the smallest index.\n    // Constraints:\n    // *\
    \ 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n    public static List<long>\
    \ Pluck(List<long> arr) {\n        List<long> result = new List<long>();\n   \
    \     if (arr.Count == 0) {\n            return result;\n        }\n        long\
    \ smallest_value = arr.Min();\n        long smallest_index = 0;\n        bool\
    \ found = false;\n        for (int i = 0; i < arr.Count; i++) {\n            if\
    \ (arr[i] < smallest_value) {\n                smallest_value = arr[i];\n    \
    \            smallest_index = i;\n                found = true;\n            }\n\
    \        }\n        if (found) {\n            result.Add(smallest_value);\n  \
    \          result.Add(smallest_index);\n        }\n        return result;\n  \
    \  }\n    public static void Main(string[] args) {\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,\
    \ (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <6c620c5f321949f9bb6857553ebde329>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <6c620c5f321949f9bb6857553ebde329>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976385
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 2:\n    // Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n    // Example 3:\n    // Example 4:\n    // Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n    // so we will choose\
    \ the first zero, which has the smallest index.\n    // Constraints:\n    // *\
    \ 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n    public static List<long>\
    \ Pluck(List<long> arr) {\n        List<long> result = new List<long>();\n   \
    \     long smallestEven = arr.Min();\n        long smallestIndex = arr.IndexOf(smallestEven);\n\
    \        if (smallestIndex == -1) {\n            return result;\n        }\n \
    \       long smallestValue = arr[smallestIndex];\n        foreach (long n in arr)\
    \ {\n            if (n % 2 == 0) {\n                if (smallestEven < n) {\n\
    \                    smallestEven = n;\n                    smallestIndex = arr.IndexOf(n);\n\
    \                }\n            }\n        }\n        result.Add(smallestEven);\n\
    \        result.Add(smallestIndex);\n        return result;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n\
    \    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n   \
    \ Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,\
    \ (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpe3bwfri3.cs(33,34): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    '
  timestamp: 1659976385
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 2:\n    // Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n    // Example 3:\n    // Example 4:\n    // Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n    // so we will choose\
    \ the first zero, which has the smallest index.\n    // Constraints:\n    // *\
    \ 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n    public static List<long>\
    \ Pluck(List<long> arr) {\n        List<long> result = new List<long>();\n   \
    \     long smallest_value = 0;\n        long smallest_index = 0;\n        bool\
    \ found = false;\n        foreach (long n in arr) {\n            if (n % 2 ==\
    \ 0) {\n                if (smallest_value == 0) {\n                    smallest_value\
    \ = n;\n                    smallest_index = arr.IndexOf(n);\n               \
    \     found = true;\n                } else if (smallest_value < n) {\n      \
    \              smallest_value = n;\n                    smallest_index = arr.IndexOf(n);\n\
    \                    found = true;\n                }\n            }\n       \
    \ }\n        if (found) {\n            result.Add(smallest_value);\n         \
    \   result.Add(smallest_index);\n        }\n        return result;\n    }\n  \
    \  public static void Main(string[] args) {\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n\
    \    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n   \
    \ Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,\
    \ (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <fe252acefe2340b192b0aeac00b7f22a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <fe252acefe2340b192b0aeac00b7f22a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976384
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 2:\n    // Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n    // Example 3:\n    // Example 4:\n    // Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n    // so we will choose\
    \ the first zero, which has the smallest index.\n    // Constraints:\n    // *\
    \ 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n    public static List<long>\
    \ Pluck(List<long> arr) {\n        List<long> result = new List<long>();\n   \
    \     long smallest_value = 0;\n        long smallest_index = 0;\n        long\
    \ smallest_even_value = 0;\n        long smallest_even_index = 0;\n        foreach\
    \ (long n in arr) {\n            if (n % 2 == 0) {\n                if (smallest_value\
    \ == 0) {\n                    smallest_value = n;\n                    smallest_index\
    \ = arr.IndexOf(n);\n                    smallest_even_value = n % 2;\n      \
    \              smallest_even_index = n;\n                } else if (smallest_value\
    \ == n) {\n                    smallest_even_value = n % 2;\n                \
    \    smallest_even_index = n;\n                } else if (smallest_value == n\
    \ % 2) {\n                    smallest_even_value = n % 2;\n                 \
    \   smallest_even_index = n;\n                }\n            }\n        }\n  \
    \      if (smallest_value == 0) {\n            result.Add(smallest_even_value);\n\
    \            result.Add(smallest_even_index);\n        } else if (smallest_value\
    \ == smallest_even_value) {\n            result.Add(smallest_even_index);\n  \
    \      } else {\n            result.Add(smallest_value);\n            result.Add(smallest_index);\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L,\
    \ (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n  \
    \  Debug.Assert(Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <6a61dea597784cb69a2ad205d6088c3a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <6a61dea597784cb69a2ad205d6088c3a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976385
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 2:\n    // Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n    // Example 3:\n    // Example 4:\n    // Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n    // so we will choose\
    \ the first zero, which has the smallest index.\n    // Constraints:\n    // *\
    \ 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n    public static List<long>\
    \ Pluck(List<long> arr) {\n        long smallest_even_value = arr.Min();\n   \
    \     long smallest_index = arr.IndexOf(smallest_even_value);\n        List<long>\
    \ result = new List<long>();\n        if (smallest_index != -1) {\n          \
    \  result.Add(smallest_even_value);\n            result.Add(smallest_index);\n\
    \        }\n        if (arr.Count > 0) {\n            foreach (var item in arr.Skip(smallest_index))\
    \ {\n                if (item % 2 == 0) {\n                    smallest_even_value\
    \ = item;\n                    smallest_index = arr.IndexOf(smallest_even_value);\n\
    \                    result.Add(smallest_even_value);\n                    result.Add(smallest_index);\n\
    \                }\n            }\n        }\n        return result;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n\
    \    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n   \
    \ Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,\
    \ (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpc9k_gz40.cs(35,43): error CS1503: Argument 2: cannot convert from ''long''
    to ''int''

    '
  timestamp: 1659976385
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 2:\n    // Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n    // Example 3:\n    // Example 4:\n    // Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n    // so we will choose\
    \ the first zero, which has the smallest index.\n    // Constraints:\n    // *\
    \ 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n    public static List<long>\
    \ Pluck(List<long> arr) {\n        List<long> result = new List<long>();\n   \
    \     long smallestEvenValue = arr.Min();\n        long smallestIndex = 0;\n \
    \       bool isEven = true;\n        for (int i = 0; i < arr.Count; i++) {\n \
    \           if (arr[i] < smallestEvenValue) {\n                smallestEvenValue\
    \ = arr[i];\n                smallestIndex = i;\n                isEven = true;\n\
    \            } else if (arr[i] == smallestEvenValue) {\n                isEven\
    \ = false;\n            }\n        }\n        if (isEven) {\n            result.Add(smallestEvenValue);\n\
    \            result.Add(smallestIndex);\n        } else {\n            int smallestIndex2\
    \ = arr.FindIndex(x => x == smallestEvenValue);\n            if (smallestIndex2\
    \ != -1) {\n                result.Add(smallestEvenValue);\n                result.Add(smallestIndex2);\n\
    \            }\n        }\n        return result;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L,\
    \ (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n\
    \    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <5c996f3811544cd5a1b1296e7850c678>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <5c996f3811544cd5a1b1296e7850c678>:0 \n\nUnhandled Exception:\n\
    System.InvalidOperationException: Sequence contains no elements\n  at System.Linq.Enumerable.Min\
    \ (System.Collections.Generic.IEnumerable`1[T] source) [0x00022] in <e540098dd111461e919c5863f6975c29>:0\
    \ \n  at Problem.Pluck (System.Collections.Generic.List`1[T] arr) [0x0000d] in\
    \ <5c996f3811544cd5a1b1296e7850c678>:0 \n  at Prob"
  stdout: ''
  timestamp: 1659976385
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 2:\n    // Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n    // Example 3:\n    // Example 4:\n    // Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n    // so we will choose\
    \ the first zero, which has the smallest index.\n    // Constraints:\n    // *\
    \ 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n    public static List<long>\
    \ Pluck(List<long> arr) {\n        List<long> result = new List<long>();\n   \
    \     long smallestEvenValue = arr.Min();\n        long smallestIndex = 0;\n \
    \       long smallestIndexValue = 0;\n        bool isSmallestEvenValue = true;\n\
    \        for (int i = 0; i < arr.Count; i++) {\n            if (arr[i] < smallestEvenValue)\
    \ {\n                smallestEvenValue = arr[i];\n                smallestIndex\
    \ = i;\n                smallestIndexValue = arr[i];\n                isSmallestEvenValue\
    \ = true;\n            } else if (arr[i] == smallestEvenValue && i != smallestIndex)\
    \ {\n                isSmallestEvenValue = false;\n            }\n        }\n\
    \        if (isSmallestEvenValue) {\n            result.Add(smallestEvenValue);\n\
    \            result.Add(smallestIndex);\n        } else {\n            result.Add(smallestIndexValue);\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L,\
    \ (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n  \
    \  Debug.Assert(Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <47ba791212ed42c0adeecf30deb0a55d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <47ba791212ed42c0adeecf30deb0a55d>:0 \n\nUnhandled Exception:\n\
    System.InvalidOperationException: Sequence contains no elements\n  at System.Linq.Enumerable.Min\
    \ (System.Collections.Generic.IEnumerable`1[T] source) [0x00022] in <e540098dd111461e919c5863f6975c29>:0\
    \ \n  at Problem.Pluck (System.Collections.Generic.List`1[T] arr) [0x00007] in\
    \ <47ba791212ed42c0adeecf30deb0a55d>:0 \n  at Prob"
  stdout: ''
  timestamp: 1659976385
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 2:\n    // Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n    // Example 3:\n    // Example 4:\n    // Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n    // so we will choose\
    \ the first zero, which has the smallest index.\n    // Constraints:\n    // *\
    \ 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n    public static List<long>\
    \ Pluck(List<long> arr) {\n        long smalest_value = 0;\n        long smalest_index\
    \ = 0;\n        List<long> result = new List<long>();\n        foreach (var node\
    \ in arr) {\n            if (node % 2 == 0) {\n                smalest_value =\
    \ node;\n                smalest_index = arr.IndexOf(node);\n            }\n \
    \       }\n        if (smalest_value == 0) {\n            return new List<long>();\n\
    \        }\n        List<long> evens = new List<long>();\n        foreach (var\
    \ node in arr) {\n            if (node % 2 == 0) {\n                evens.Add(node);\n\
    \            }\n        }\n        evens.Sort();\n        smalest_value = evens[0];\n\
    \        smalest_index = evens.IndexOf(smalest_value);\n        result.Add(smalest_value);\n\
    \        result.Add(smalest_index);\n        return result;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n\
    \    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n   \
    \ Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,\
    \ (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <775b9178fa604f7bae14ff8dd9ef3b9b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <775b9178fa604f7bae14ff8dd9ef3b9b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976385
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 2:\n    // Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n    // Example 3:\n    // Example 4:\n    // Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n    // so we will choose\
    \ the first zero, which has the smallest index.\n    // Constraints:\n    // *\
    \ 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n    public static List<long>\
    \ Pluck(List<long> arr) {\n        List<long> result = new List<long>();\n   \
    \     long smallestEvenValue = arr.Min();\n        int smallestIndex = 0;\n  \
    \      bool isSmallestEvenValue = true;\n        for (int i = 0; i < arr.Count;\
    \ i++) {\n            if (arr[i] < smallestEvenValue) {\n                smallestEvenValue\
    \ = arr[i];\n                smallestIndex = i;\n                isSmallestEvenValue\
    \ = true;\n            }\n            else if (arr[i] == smallestEvenValue &&\
    \ i != smallestIndex) {\n                isSmallestEvenValue = false;\n      \
    \      }\n        }\n        if (isSmallestEvenValue) {\n            result.Add(smallestEvenValue);\n\
    \            result.Add(smallestIndex);\n        }\n        return result;\n \
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,\
    \ (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <f75981662e1249f895949040d882da27>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <f75981662e1249f895949040d882da27>:0 \n\nUnhandled Exception:\n\
    System.InvalidOperationException: Sequence contains no elements\n  at System.Linq.Enumerable.Min\
    \ (System.Collections.Generic.IEnumerable`1[T] source) [0x00022] in <e540098dd111461e919c5863f6975c29>:0\
    \ \n  at Problem.Pluck (System.Collections.Generic.List`1[T] arr) [0x00007] in\
    \ <f75981662e1249f895949040d882da27>:0 \n  at Prob"
  stdout: ''
  timestamp: 1659976385
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 2:\n    // Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n    // Example 3:\n    // Example 4:\n    // Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n    // so we will choose\
    \ the first zero, which has the smallest index.\n    // Constraints:\n    // *\
    \ 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n    public static List<long>\
    \ Pluck(List<long> arr) {\n        List<long> result = new List<long>();\n   \
    \     long smallestEvenValue = arr.Min();\n        long smallestIndex = 0;\n \
    \       bool isSmallestEvenValue = true;\n        foreach (long n in arr) {\n\
    \            if (n % 2 == 0) {\n                if (smallestEvenValue > n) {\n\
    \                    smallestEvenValue = n;\n                    smallestIndex\
    \ = arr.IndexOf(n);\n                }\n                isSmallestEvenValue =\
    \ true;\n            }\n            else {\n                if (smallestEvenValue\
    \ < n) {\n                    smallestEvenValue = n;\n                    smallestIndex\
    \ = arr.IndexOf(n);\n                }\n                isSmallestEvenValue =\
    \ false;\n            }\n        }\n        if (isSmallestEvenValue) {\n     \
    \       result.Add(smallestEvenValue);\n            result.Add(smallestIndex);\n\
    \        }\n        else {\n            result.Add(smallestIndex);\n        }\n\
    \        return result;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,\
    \ (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <b8325f492cc5472ea9e38ed2ce6ea350>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <b8325f492cc5472ea9e38ed2ce6ea350>:0 \n\nUnhandled Exception:\n\
    System.InvalidOperationException: Sequence contains no elements\n  at System.Linq.Enumerable.Min\
    \ (System.Collections.Generic.IEnumerable`1[T] source) [0x00022] in <e540098dd111461e919c5863f6975c29>:0\
    \ \n  at Problem.Pluck (System.Collections.Generic.List`1[T] arr) [0x00007] in\
    \ <b8325f492cc5472ea9e38ed2ce6ea350>:0 \n  at Prob"
  stdout: ''
  timestamp: 1659976386
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 2:\n    // Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n    // Example 3:\n    // Example 4:\n    // Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n    // so we will choose\
    \ the first zero, which has the smallest index.\n    // Constraints:\n    // *\
    \ 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n    public static List<long>\
    \ Pluck(List<long> arr) {\n        List<long> result = new List<long>();\n   \
    \     long smallestEvenValue = arr.Min();\n        int smallestIndex = 0;\n  \
    \      for (int i = 0; i < arr.Count; i++) {\n            if (arr[i] % 2 == 0)\
    \ {\n                if (arr[i] < smallestEvenValue) {\n                    smallestEvenValue\
    \ = arr[i];\n                    smallestIndex = i;\n                }\n     \
    \       }\n        }\n        result.Add(smallestEvenValue);\n        result.Add(smallestIndex);\n\
    \        return result;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,\
    \ (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <2ccfaadfb31842b69922938de86d9e8e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <2ccfaadfb31842b69922938de86d9e8e>:0 \n\nUnhandled Exception:\n\
    System.InvalidOperationException: Sequence contains no elements\n  at System.Linq.Enumerable.Min\
    \ (System.Collections.Generic.IEnumerable`1[T] source) [0x00022] in <e540098dd111461e919c5863f6975c29>:0\
    \ \n  at Problem.Pluck (System.Collections.Generic.List`1[T] arr) [0x00007] in\
    \ <2ccfaadfb31842b69922938de86d9e8e>:0 \n  at Prob"
  stdout: ''
  timestamp: 1659976386
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 2:\n    // Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n    // Example 3:\n    // Example 4:\n    // Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n    // so we will choose\
    \ the first zero, which has the smallest index.\n    // Constraints:\n    // *\
    \ 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n    public static List<long>\
    \ Pluck(List<long> arr) {\n        long smalest_value = arr.Min();\n        List<long>\
    \ result = new List<long>();\n        long smallest_index = -1;\n        foreach\
    \ (var item in arr) {\n            if (item % 2 == 0) {\n                if (smallest_index\
    \ == -1) {\n                    smallest_index = item;\n                    smalest_value\
    \ = item;\n                } else {\n                    if (item < smalest_value)\
    \ {\n                        smalest_value = item;\n                        smallest_index\
    \ = item;\n                    }\n                }\n            }\n        }\n\
    \        if (smallest_index != -1) {\n            result.Add(smallest_index);\n\
    \            result.Add(smalest_value);\n        }\n        return result;\n \
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,\
    \ (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c692e6ac60f046c9adcfbbdbb965b333>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c692e6ac60f046c9adcfbbdbb965b333>:0 \n\nUnhandled Exception:\n\
    System.InvalidOperationException: Sequence contains no elements\n  at System.Linq.Enumerable.Min\
    \ (System.Collections.Generic.IEnumerable`1[T] source) [0x00022] in <e540098dd111461e919c5863f6975c29>:0\
    \ \n  at Problem.Pluck (System.Collections.Generic.List`1[T] arr) [0x00001] in\
    \ <c692e6ac60f046c9adcfbbdbb965b333>:0 \n  at Prob"
  stdout: ''
  timestamp: 1659976386
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 2:\n    // Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n    // Example 3:\n    // Example 4:\n    // Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n    // so we will choose\
    \ the first zero, which has the smallest index.\n    // Constraints:\n    // *\
    \ 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n    public static List<long>\
    \ Pluck(List<long> arr) {\n        List<long> result = new List<long>();\n   \
    \     long smallest_value = 0;\n        long smallest_index = 0;\n        long\
    \ smallest_even_value = 0;\n        long smallest_even_count = 0;\n        foreach\
    \ (long i in arr) {\n            if (i % 2 == 0) {\n                smallest_even_value\
    \ = i;\n                smallest_even_count = 1;\n            }\n            else\
    \ {\n                if (smallest_even_count > 1) {\n                    smallest_value\
    \ = smallest_even_value;\n                    smallest_index = smallest_even_count;\n\
    \                }\n                else {\n                    smallest_value\
    \ = i;\n                    smallest_index = 1;\n                }\n         \
    \       smallest_even_count++;\n            }\n        }\n        if (smallest_even_count\
    \ == 0) {\n            return new List<long>();\n        }\n        if (smallest_even_count\
    \ == 1) {\n            result.Add(smallest_value);\n            result.Add(smallest_index);\n\
    \            return result;\n        }\n        List<long> evens = new List<long>();\n\
    \        foreach (long i in arr) {\n            if (i % 2 == 0) {\n          \
    \      evens.Add(i);\n            }\n        }\n        smallest_value = evens.Min();\n\
    \        smallest_index = evens.IndexOf(smallest_value);\n        result.Add(smallest_value);\n\
    \        result.Add(smallest_index);\n        return result;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n\
    \    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n   \
    \ Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,\
    \ (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <481d39ac13d543f4916104d20216deb0>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <481d39ac13d543f4916104d20216deb0>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976386
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 2:\n    // Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n    // Example 3:\n    // Example 4:\n    // Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n    // so we will choose\
    \ the first zero, which has the smallest index.\n    // Constraints:\n    // *\
    \ 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n    public static List<long>\
    \ Pluck(List<long> arr) {\n        List<long> result = new List<long>();\n   \
    \     long smalest_value = arr.Min();\n        int smalest_index = 0;\n      \
    \  for (int i = 0; i < arr.Count; i++) {\n            if (arr[i] % 2 == 0) {\n\
    \                if (smalest_value < arr[i]) {\n                    smalest_value\
    \ = arr[i];\n                    smalest_index = i;\n                }\n     \
    \       }\n        }\n        result.Add(smalest_value);\n        result.Add(smalest_index);\n\
    \        return result;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,\
    \ (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <ad6906c2dfdd43cd8fcf937706a77fe6>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <ad6906c2dfdd43cd8fcf937706a77fe6>:0 \n\nUnhandled Exception:\n\
    System.InvalidOperationException: Sequence contains no elements\n  at System.Linq.Enumerable.Min\
    \ (System.Collections.Generic.IEnumerable`1[T] source) [0x00022] in <e540098dd111461e919c5863f6975c29>:0\
    \ \n  at Problem.Pluck (System.Collections.Generic.List`1[T] arr) [0x00007] in\
    \ <ad6906c2dfdd43cd8fcf937706a77fe6>:0 \n  at Prob"
  stdout: ''
  timestamp: 1659976386
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 2:\n    // Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n    // Example 3:\n    // Example 4:\n    // Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n    // so we will choose\
    \ the first zero, which has the smallest index.\n    // Constraints:\n    // *\
    \ 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n    public static List<long>\
    \ Pluck(List<long> arr) {\n        long smalest_value = arr.Min();\n        long\
    \ smalest_index = 0;\n        List<long> result = new List<long>();\n        foreach\
    \ (long n in arr) {\n            if (n % 2 == 0) {\n                if (smalest_value\
    \ < n) {\n                    smalest_value = n;\n                    smalest_index\
    \ = arr.IndexOf(n);\n                }\n            }\n        }\n        if (smalest_index\
    \ != arr.IndexOf(smalest_value)) {\n            smalest_value = arr[smalest_index];\n\
    \        }\n        result.Add(smalest_value);\n        result.Add(smalest_index);\n\
    \        return result;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,\
    \ (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmptnrdk2pn.cs(39,33): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    '
  timestamp: 1659976386
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 2:\n    // Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n    // Example 3:\n    // Example 4:\n    // Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n    // so we will choose\
    \ the first zero, which has the smallest index.\n    // Constraints:\n    // *\
    \ 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n    public static List<long>\
    \ Pluck(List<long> arr) {\n        List<long> result = new List<long>();\n   \
    \     long smallestEvenValue = arr.Min();\n        long smallestIndex = 0;\n \
    \       bool foundSmallestEvenValue = false;\n        bool foundSmallestIndex\
    \ = false;\n        foreach (long n in arr) {\n            if (n % 2 == 0) {\n\
    \                if (smallestEvenValue == n) {\n                    foundSmallestEvenValue\
    \ = true;\n                    smallestIndex = n;\n                }\n       \
    \         else if (smallestEvenValue < n) {\n                    foundSmallestEvenValue\
    \ = true;\n                    smallestEvenValue = n;\n                    smallestIndex\
    \ = n;\n                }\n            }\n            else {\n               \
    \ if (smallestEvenValue == n) {\n                    foundSmallestEvenValue =\
    \ true;\n                    smallestIndex = n;\n                }\n         \
    \       else if (smallestEvenValue < n) {\n                    foundSmallestEvenValue\
    \ = true;\n                    smallestEvenValue = n;\n                    smallestIndex\
    \ = n;\n                }\n            }\n        }\n        if (foundSmallestEvenValue)\
    \ {\n            result.Add(smallestEvenValue);\n            result.Add(smallestIndex);\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L,\
    \ (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n  \
    \  Debug.Assert(Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <75b89be64e264b94829437a191c0f1e7>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <75b89be64e264b94829437a191c0f1e7>:0 \n\nUnhandled Exception:\n\
    System.InvalidOperationException: Sequence contains no elements\n  at System.Linq.Enumerable.Min\
    \ (System.Collections.Generic.IEnumerable`1[T] source) [0x00022] in <e540098dd111461e919c5863f6975c29>:0\
    \ \n  at Problem.Pluck (System.Collections.Generic.List`1[T] arr) [0x00007] in\
    \ <75b89be64e264b94829437a191c0f1e7>:0 \n  at Prob"
  stdout: ''
  timestamp: 1659976386
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 2:\n    // Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n    // Example 3:\n    // Example 4:\n    // Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n    // so we will choose\
    \ the first zero, which has the smallest index.\n    // Constraints:\n    // *\
    \ 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n    public static List<long>\
    \ Pluck(List<long> arr) {\n        List<long> result = new List<long>();\n   \
    \     long smallestEvenValue = arr.Min();\n        long smallestIndex = 0;\n \
    \       long smallestValue = 0;\n        foreach (long n in arr) {\n         \
    \   if (n % 2 == 0) {\n                if (smallestEvenValue < n) {\n        \
    \            smallestEvenValue = n;\n                    smallestIndex = arr.IndexOf(n);\n\
    \                    smallestValue = n;\n                }\n            }\n  \
    \      }\n        if (smallestEvenValue == 0) {\n            return result;\n\
    \        }\n        List<long> evenValues = new List<long>();\n        List<long>\
    \ evenIndexes = new List<long>();\n        foreach (long n in arr) {\n       \
    \     if (n % 2 == 0) {\n                evenValues.Add(n);\n                evenIndexes.Add(arr.IndexOf(n));\n\
    \            }\n        }\n        smallestValue = evenValues.Min();\n       \
    \ smallestIndex = evenIndexes.Min();\n        result.Add(smallestValue);\n   \
    \     result.Add(smallestIndex);\n        return result;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L,\
    \ (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n\
    \    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <623605f0d8c84bf5b4c92ebe346c353e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <623605f0d8c84bf5b4c92ebe346c353e>:0 \n\nUnhandled Exception:\n\
    System.InvalidOperationException: Sequence contains no elements\n  at System.Linq.Enumerable.Min\
    \ (System.Collections.Generic.IEnumerable`1[T] source) [0x00022] in <e540098dd111461e919c5863f6975c29>:0\
    \ \n  at Problem.Pluck (System.Collections.Generic.List`1[T] arr) [0x00007] in\
    \ <623605f0d8c84bf5b4c92ebe346c353e>:0 \n  at Prob"
  stdout: ''
  timestamp: 1659976386
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 2:\n    // Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n    // Example 3:\n    // Example 4:\n    // Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n    // so we will choose\
    \ the first zero, which has the smallest index.\n    // Constraints:\n    // *\
    \ 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n    public static List<long>\
    \ Pluck(List<long> arr) {\n        List<long> result = new List<long>();\n   \
    \     long smallestEven = arr.Min();\n        int smallestIndex = arr.FindIndex(x\
    \ => x == smallestEven);\n        if (smallestIndex == -1) {\n            return\
    \ result;\n        }\n        long smallestValue = arr[smallestIndex];\n     \
    \   long largestEven = arr.Max();\n        int largestIndex = arr.FindIndex(x\
    \ => x == largestEven);\n        if (largestIndex == -1) {\n            return\
    \ result;\n        }\n        long largestValue = arr[largestIndex];\n       \
    \ if (smallestValue == largestEven) {\n            result.Add(smallestEven);\n\
    \            result.Add(smallestIndex);\n            return result;\n        }\n\
    \        if (smallestIndex == largestIndex) {\n            result.Add(smallestEven);\n\
    \            result.Add(smallestIndex);\n            return result;\n        }\n\
    \        if (smallestIndex > largestIndex) {\n            int temp = smallestIndex;\n\
    \            smallestIndex = largestIndex;\n            largestIndex = temp;\n\
    \        }\n        long mid = smallestValue + largestValue;\n        if (mid\
    \ % 2 == 0) {\n            while (smallestIndex < largestIndex) {\n          \
    \      long mid = smallestValue + largestValue;\n                if (mid % 2 ==\
    \ 0) {\n                    result.Add(mid);\n                    smallestIndex++;\n\
    \                    largestIndex--;\n                } else {\n             \
    \       smallestIndex++;\n                }\n            }\n        } else {\n\
    \            while (smallestIndex < largestIndex) {\n                long mid\
    \ = smallestValue + largestValue;\n                if (mid % 2 == 0) {\n     \
    \               result.Add(mid);\n                    largestIndex--;\n      \
    \          } else {\n                    largestIndex--;\n                }\n\
    \            }\n        }\n        return result;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L,\
    \ (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n\
    \    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpa3s0v26w.cs(58,22): error CS0136: A local or parameter named ''mid'' cannot
    be declared in this scope because that name is used in an enclosing local scope
    to define a local or parameter

    /tmp/tmpa3s0v26w.cs(69,22): error CS0136: A local or parameter named ''mid'' cannot
    be declared in this scope because that name is used in an enclosing local scope
    to define a local or parameter

    '
  timestamp: 1659976386
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 2:\n    // Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n    // Example 3:\n    // Example 4:\n    // Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n    // so we will choose\
    \ the first zero, which has the smallest index.\n    // Constraints:\n    // *\
    \ 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n    public static List<long>\
    \ Pluck(List<long> arr) {\n        long smalest_value = 0;\n        long smalest_index\
    \ = 0;\n        List<long> result = new List<long>();\n        foreach (var node\
    \ in arr) {\n            if (node % 2 == 0) {\n                if (smalest_value\
    \ == 0) {\n                    smalest_value = node;\n                    smalest_index\
    \ = arr.IndexOf(node);\n                }\n                else if (node < smalest_value)\
    \ {\n                    smalest_value = node;\n                    smalest_index\
    \ = arr.IndexOf(node);\n                }\n            }\n        }\n        if\
    \ (smalest_value == 0) {\n            return new List<long>();\n        }\n  \
    \      else {\n            result.Add(smalest_value);\n            result.Add(smalest_index);\n\
    \            return result;\n        }\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L,\
    \ (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n  \
    \  Debug.Assert(Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <b0fbe10deba54bd1b593ef1867d07f32>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <b0fbe10deba54bd1b593ef1867d07f32>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976386
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 2:\n    // Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n    // Example 3:\n    // Example 4:\n    // Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n    // so we will choose\
    \ the first zero, which has the smallest index.\n    // Constraints:\n    // *\
    \ 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n    public static List<long>\
    \ Pluck(List<long> arr) {\n        List<long> result = new List<long>();\n   \
    \     long smallest_value = arr.Min();\n        long smallest_index = 0;\n   \
    \     long smallest_even_value = 0;\n        bool found = false;\n        for\
    \ (int i = 0; i < arr.Count; i++) {\n            if (arr[i] % 2 == 0) {\n    \
    \            found = true;\n                smallest_even_value = arr[i];\n  \
    \              smallest_index = i;\n            }\n            if (found && arr[i]\
    \ < smallest_value) {\n                smallest_value = arr[i];\n            \
    \    smallest_index = i;\n                smallest_even_value = arr[i];\n    \
    \        }\n        }\n        if (smallest_value == 0) {\n            return\
    \ result;\n        }\n        if (smallest_value == smallest_even_value) {\n \
    \           result.Add(smallest_value);\n            result.Add(smallest_index);\n\
    \            return result;\n        }\n        List<long> even_values = new List<long>();\n\
    \        for (int i = 0; i < arr.Count; i++) {\n            if (arr[i] % 2 ==\
    \ 0) {\n                even_values.Add(arr[i]);\n            }\n        }\n \
    \       smallest_value = even_values.Min();\n        smallest_index = even_values.IndexOf(smallest_value);\n\
    \        result.Add(smallest_value);\n        result.Add(smallest_index);\n  \
    \      return result;\n    }\n    public static void Main(string[] args) {\n \
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,\
    \ (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <16ffc98e267b4f8f954843c5a2a54889>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <16ffc98e267b4f8f954843c5a2a54889>:0 \n\nUnhandled Exception:\n\
    System.InvalidOperationException: Sequence contains no elements\n  at System.Linq.Enumerable.Min\
    \ (System.Collections.Generic.IEnumerable`1[T] source) [0x00022] in <e540098dd111461e919c5863f6975c29>:0\
    \ \n  at Problem.Pluck (System.Collections.Generic.List`1[T] arr) [0x00007] in\
    \ <16ffc98e267b4f8f954843c5a2a54889>:0 \n  at Prob"
  stdout: ''
  timestamp: 1659976386
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 2:\n    // Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n    // Example 3:\n    // Example 4:\n    // Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n    // so we will choose\
    \ the first zero, which has the smallest index.\n    // Constraints:\n    // *\
    \ 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n    public static List<long>\
    \ Pluck(List<long> arr) {\n        List<long> result = new List<long>();\n   \
    \     long smallestEvenValue = arr.Min();\n        long smallestIndex = 0;\n \
    \       bool foundSmallestEvenValue = false;\n        for (int i = 0; i < arr.Count;\
    \ i++) {\n            if (arr[i] % 2 == 0) {\n                foundSmallestEvenValue\
    \ = true;\n                if (smallestEvenValue > arr[i]) {\n               \
    \     smallestEvenValue = arr[i];\n                    smallestIndex = i;\n  \
    \              }\n            }\n        }\n        if (foundSmallestEvenValue)\
    \ {\n            result.Add(smallestEvenValue);\n            result.Add(smallestIndex);\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L,\
    \ (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n  \
    \  Debug.Assert(Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <306bcc8d23ee4c82aeae192120a9020e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <306bcc8d23ee4c82aeae192120a9020e>:0 \n\nUnhandled Exception:\n\
    System.InvalidOperationException: Sequence contains no elements\n  at System.Linq.Enumerable.Min\
    \ (System.Collections.Generic.IEnumerable`1[T] source) [0x00022] in <e540098dd111461e919c5863f6975c29>:0\
    \ \n  at Problem.Pluck (System.Collections.Generic.List`1[T] arr) [0x00007] in\
    \ <306bcc8d23ee4c82aeae192120a9020e>:0 \n  at Prob"
  stdout: ''
  timestamp: 1659976386
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 2:\n    // Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n    // Example 3:\n    // Example 4:\n    // Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n    // so we will choose\
    \ the first zero, which has the smallest index.\n    // Constraints:\n    // *\
    \ 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n    public static List<long>\
    \ Pluck(List<long> arr) {\n        List<long> result = new List<long>();\n   \
    \     if (arr.Count > 0) {\n            long smallest_value = arr.Min();\n   \
    \         long smallest_index = 0;\n            for (int i = 0; i < arr.Count;\
    \ i++) {\n                if (arr[i] < smallest_value) {\n                   \
    \ smallest_value = arr[i];\n                    smallest_index = i;\n        \
    \        }\n            }\n            result.Add(smallest_value);\n         \
    \   result.Add(smallest_index);\n        }\n        return result;\n    }\n  \
    \  public static void Main(string[] args) {\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n\
    \    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n   \
    \ Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,\
    \ (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <448ae5244c3d4ca3b192a626a7fe5e3e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <448ae5244c3d4ca3b192a626a7fe5e3e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976386
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 2:\n    // Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n    // Example 3:\n    // Example 4:\n    // Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n    // so we will choose\
    \ the first zero, which has the smallest index.\n    // Constraints:\n    // *\
    \ 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n    public static List<long>\
    \ Pluck(List<long> arr) {\n        long smalest_value = arr.Min();\n        long\
    \ smalest_index = 0;\n        List<long> result = new List<long>();\n        foreach\
    \ (long n in arr) {\n            if (n % 2 == 0) {\n                if (smalest_value\
    \ < n) {\n                    smalest_value = n;\n                    smalest_index\
    \ = arr.IndexOf(n);\n                }\n            }\n        }\n        if (smalest_index\
    \ != arr.IndexOf(smalest_value)) {\n            smalest_value = arr[smalest_index];\n\
    \        }\n        result.Add(smalest_value);\n        result.Add(smalest_index);\n\
    \        return result;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,\
    \ (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmptnrdk2pn.cs(39,33): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    '
  timestamp: 1659976386
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 2:\n    // Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n    // Example 3:\n    // Example 4:\n    // Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n    // so we will choose\
    \ the first zero, which has the smallest index.\n    // Constraints:\n    // *\
    \ 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n    public static List<long>\
    \ Pluck(List<long> arr) {\n        List<long> result = new List<long>();\n   \
    \     long smallestEvenValue = arr.Min();\n        long smallestIndex = 0;\n \
    \       for (int i = 0; i < arr.Count; i++) {\n            if (arr[i] % 2 == 0)\
    \ {\n                if (arr[i] < smallestEvenValue) {\n                    smallestEvenValue\
    \ = arr[i];\n                    smallestIndex = i;\n                }\n     \
    \       }\n        }\n        result.Add(smallestEvenValue);\n        result.Add(smallestIndex);\n\
    \        return result;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,\
    \ (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a26c8b6179aa431c9dae6e92e6d06f93>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a26c8b6179aa431c9dae6e92e6d06f93>:0 \n\nUnhandled Exception:\n\
    System.InvalidOperationException: Sequence contains no elements\n  at System.Linq.Enumerable.Min\
    \ (System.Collections.Generic.IEnumerable`1[T] source) [0x00022] in <e540098dd111461e919c5863f6975c29>:0\
    \ \n  at Problem.Pluck (System.Collections.Generic.List`1[T] arr) [0x00007] in\
    \ <a26c8b6179aa431c9dae6e92e6d06f93>:0 \n  at Prob"
  stdout: ''
  timestamp: 1659976384
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 2:\n    // Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n    // Example 3:\n    // Example 4:\n    // Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n    // so we will choose\
    \ the first zero, which has the smallest index.\n    // Constraints:\n    // *\
    \ 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n    public static List<long>\
    \ Pluck(List<long> arr) {\n        long smalest_value = 0;\n        int smalest_index\
    \ = 0;\n        List<long> result = new List<long>();\n        foreach (long node\
    \ in arr) {\n            if (node % 2 == 0) {\n                if (smalest_value\
    \ == 0) {\n                    smalest_value = node;\n                    smalest_index\
    \ = arr.IndexOf(node);\n                }\n                else if (smalest_value\
    \ < node) {\n                    smalest_value = node;\n                    smalest_index\
    \ = arr.IndexOf(node);\n                }\n            }\n        }\n        if\
    \ (smalest_value == 0) {\n            return new List<long>();\n        }\n  \
    \      else if (smalest_value < arr.First()) {\n            result.Add(smalest_value);\n\
    \            result.Add(smalest_index);\n        }\n        else {\n         \
    \   result.Add(smalest_value);\n            result.Add(smalest_index);\n     \
    \   }\n        return result;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,\
    \ (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d6b60a68d9b64f4a95e69285780e86b0>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d6b60a68d9b64f4a95e69285780e86b0>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976386
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \    // Example 2:\n    // Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n    // Example 3:\n    // Example 4:\n    // Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n    // so we will choose\
    \ the first zero, which has the smallest index.\n    // Constraints:\n    // *\
    \ 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n    public static List<long>\
    \ Pluck(List<long> arr) {\n        long smallest_value = arr.Min();\n        long\
    \ smallest_index = arr.IndexOf(smallest_value);\n        List<long> result = new\
    \ List<long>();\n        long smallest_even_value = smallest_value % 2 == 0 ?\
    \ smallest_value : smallest_value - 1;\n        bool found = false;\n        foreach\
    \ (long n in arr) {\n            if (n % 2 == 0) {\n                if (smallest_even_value\
    \ == n) {\n                    found = true;\n                    break;\n   \
    \             }\n                if (smallest_even_value < n) {\n            \
    \        smallest_even_value = n;\n                    smallest_index = arr.IndexOf(smallest_even_value);\n\
    \                }\n            }\n        }\n        if (found) {\n         \
    \   result.Add(smallest_even_value);\n            result.Add(smallest_index);\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L,\
    \ (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n  \
    \  Debug.Assert(Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <142d7e2e0fc145e387b919e997b8cb13>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <142d7e2e0fc145e387b919e997b8cb13>:0 \n\nUnhandled Exception:\n\
    System.InvalidOperationException: Sequence contains no elements\n  at System.Linq.Enumerable.Min\
    \ (System.Collections.Generic.IEnumerable`1[T] source) [0x00022] in <e540098dd111461e919c5863f6975c29>:0\
    \ \n  at Problem.Pluck (System.Collections.Generic.List`1[T] arr) [0x00001] in\
    \ <142d7e2e0fc145e387b919e997b8cb13>:0 \n  at Prob"
  stdout: ''
  timestamp: 1659976386
