name: HumanEval_130_tri
language: cs
prompt: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\n\
  using System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass\
  \ Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by\
  \ mathematicians in \n    // the last couple centuries. However, what people don't\
  \ know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n\
  \    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n\
  \ - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)\
  \ = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n\
  \    // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,\
  \ you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci\
  \ sequence.\n    // Examples:\n    public static List<long> Tri(long n) {\n"
tests: "    }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new\
  \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new\
  \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n\
  \    Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
  \ (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new\
  \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
  \ (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,\
  \ (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n\
  \    Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
  \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n\
  \    Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
  \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n\
  \    Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
  \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,\
  \ (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,\
  \ (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new\
  \ List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new\
  \ long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
completions: ["        List<long> result = new List<long>();\n        if (n == 0)\
    \ return result;\n        if (n == 1) return new List<long>() { 3 };\n       \
    \ if (n % 2 == 0) {\n            int a = Tri(n / 2);\n            int b = Tri(n\
    \ / 2);\n            int c = Tri(n / 2);\n            int d = Tri(n / 2);\n  \
    \          int e = Tri(n / 2);\n            int f = Tri(n / 2);\n            int\
    \ g = Tri(n / 2);\n            int h = Tri(n / 2);\n            int i = Tri(n\
    \ / 2);\n            int j = Tri(n / 2);\n            int k = Tri(n / 2);\n  \
    \          int l = Tri(n / 2);\n            int m = Tri(n / 2);\n            int\
    \ n = Tri(n / 2);\n            int o = Tri(n / 2);\n            int p = Tri(n\
    \ / 2);\n            int q = Tri(n / 2);\n            int r = Tri(n / 2);\n  \
    \          int s = Tri(n / 2);\n            int t = Tri(n / 2);\n            int\
    \ u = Tri(n / 2);\n            int v = Tri(n / 2);\n            int w = Tri(n\
    \ / 2);\n            int x = Tri(n / 2);\n            int y = Tri(n / 2);\n  \
    \          int z = Tri(n / 2);\n            int a = Tri(n / 2);\n            int\
    \ b = Tri(n / 2);\n            int c = Tri(n / 2);\n            int d = Tri(n\
    \ / 2);\n            int e = Tri(n / 2);\n            int f = Tri(n / 2);\n  \
    \          int g = Tri(n / 2);\n            int h = Tri(n / 2);\n            int\
    \ i = Tri(n / 2);\n            int j = Tri(n / 2);\n            int k = Tri(n\
    \ / 2);\n            int l = Tri(n / 2);\n            int m = Tri(n / 2);\n  \
    \          int n = Tri(n / 2);\n            int o = Tri(n / 2);\n            int\
    \ p = Tri(n / 2);\n            int q = Tri(n / 2);\n            int r = Tri(n\
    \ / 2);\n            int s = Tri(n / 2);\n            int t = Tri(n / 2);\n  \
    \          int u = Tri(n / 2);\n            int v = Tri(n / 2);\n            int\
    \ w = Tri(n / 2);\n            int x = Tri(n / 2);\n            int y = Tri(n\
    \ / 2);\n            int z = Tri(n / 2);\n            int a = Tri(n / 2);\n  \
    \          ", "        List<long> result = new List<long>();\n        if (n ==\
    \ 0) {\n            result.Add(0);\n            result.Add(1);\n            result.Add(1);\n\
    \            return result;\n        }\n        if (n == 1) {\n            result.Add(0);\n\
    \            result.Add(1);\n            return result;\n        }\n        if\
    \ (n == 2) {\n            result.Add(0);\n            result.Add(1);\n       \
    \     result.Add(1);\n            return result;\n        }\n        if (n % 2\
    \ == 0) {\n            result.Add(Tri(n - 1) + Tri(n - 2) + Tri(n + 1));\n   \
    \     } else {\n            result.Add(Tri(n - 1) + Tri(n - 2) + Tri(n + 1) +\
    \ Tri(n - 3) + Tri(n - 4));\n        }\n        return result;", "        List<long>\
    \ result = new List<long>();\n        if (n == 0) {\n            result.Add(0);\n\
    \            result.Add(1);\n            return result;\n        }\n        if\
    \ (n == 1) {\n            result.Add(1);\n            result.Add(1);\n       \
    \     return result;\n        }\n        if (n == 2) {\n            result.Add(2);\n\
    \            result.Add(1);\n            return result;\n        }\n        long\
    \ tri1 = Tri(n - 1);\n        long tri2 = Tri(n - 2);\n        long tri3 = Tri(n\
    \ - 3);\n        long tri4 = Tri(n - 4);\n        result.Add(tri1 + tri2 + tri3);\n\
    \        result.Add(tri1 + tri2 + tri4);\n        result.Add(tri1 + tri2 + tri3\
    \ + tri4);\n        return result;", "        List<long> result = new List<long>();\n\
    \        if (n == 1) return new List<long>() { 3 };\n        if (n % 2 == 0) {\n\
    \            result.Add(Tri(n - 1) + Tri(n - 2) + Tri(n + 1));\n        } else\
    \ {\n            result.Add(Tri(n - 1) + Tri(n - 2) + Tri(n + 1));\n         \
    \   result.Add(Tri(n - 1) + Tri(n - 2) + Tri(n + 1));\n        }\n        return\
    \ result;", "        List<long> result = new List<long>();\n        if (n == 1)\
    \ return new List<long> { 3 };\n        if (n % 2 == 0) return Tri(n - 1) + Tri(n\
    \ - 2) + Tri(n + 1);\n        else return Tri(n - 1) + Tri(n - 2) + Tri(n + 1)\
    \ + Tri(n - 3) + Tri(n - 4) + Tri(n - 5) + Tri(n - 6) + Tri(n - 7);", "      \
    \  List<long> result = new List<long>();\n        if (n == 1) return new List<long>()\
    \ { 3 };\n        if (n % 2 == 0) return new List<long>() { 1 + n / 2, Tri(n -\
    \ 1) + Tri(n - 2) + Tri(n + 1) };\n        else return new List<long>() { Tri(n\
    \ - 1) + Tri(n - 2) + Tri(n + 1) };", "        List<long> result = new List<long>();\n\
    \        if (n == 0) {\n            result.Add(0);\n            result.Add(1);\n\
    \            return result;\n        }\n        if (n == 1) {\n            result.Add(1);\n\
    \            return result;\n        }\n        if (n == 2) {\n            result.Add(2);\n\
    \            return result;\n        }\n        if (n % 2 == 0) {\n          \
    \  result.Add(Tri(n - 1) + Tri(n - 2));\n            result.Add(Tri(n + 1) + Tri(n\
    \ + 2));\n        } else {\n            result.Add(Tri(n - 1) + Tri(n - 2) + Tri(n\
    \ + 1));\n        }\n        return result;", "        List<long> result = new\
    \ List<long>();\n        if (n == 1) {\n            result.Add(3);\n         \
    \   return result;\n        }\n        if (n == 2) {\n            result.Add(1);\n\
    \            result.Add(2);\n            return result;\n        }\n        if\
    \ (n % 2 == 0) {\n            result.Add(1);\n            result.Add(n);\n   \
    \         return result;\n        }\n        long tri1 = Tri(n - 1);\n       \
    \ long tri2 = Tri(n - 2);\n        long tri3 = Tri(n - 3);\n        result.Add(tri1);\n\
    \        result.Add(tri2);\n        result.Add(tri3);\n        return result;",
  "        List<long> result = new List<long>();\n        if (n == 0) {\n        \
    \    result.Add(0);\n            result.Add(1);\n            return result;\n\
    \        }\n        if (n == 1) {\n            result.Add(1);\n            return\
    \ result;\n        }\n        if (n % 2 == 0) {\n            result.Add(Tri(n\
    \ - 1) + Tri(n - 2) + Tri(n + 1));\n            return result;\n        }\n  \
    \      result.Add(Tri(n - 1) + Tri(n - 2));\n        return result;", "      \
    \  List<long> result = new List<long>();\n        if (n == 1) {\n            result.Add(3);\n\
    \            return result;\n        }\n        if (n % 2 == 0) {\n          \
    \  result.Add(Tri(n - 1) + Tri(n - 2) + Tri(n + 1));\n            return result;\n\
    \        }\n        result.Add(Tri(n - 1) + Tri(n - 2));\n        return result;",
  "        List<long> result = new List<long>();\n        if (n == 0) {\n        \
    \    result.Add(0);\n            result.Add(1);\n            return result;\n\
    \        }\n        if (n == 1) {\n            result.Add(1);\n            result.Add(1);\n\
    \            return result;\n        }\n        if (n % 2 == 0) {\n          \
    \  result.Add(Tri(n - 1) + Tri(n - 2));\n            result.Add(Tri(n - 2) + Tri(n\
    \ + 1));\n        }\n        else {\n            result.Add(Tri(n - 1) + Tri(n\
    \ - 2) + Tri(n + 1));\n            result.Add(Tri(n - 2) + Tri(n + 1));\n    \
    \        result.Add(Tri(n + 1));\n        }\n        return result;", "      \
    \  List<long> result = new List<long>();\n        if (n == 0) return result;\n\
    \        if (n == 1) return new List<long> { 3 };\n        if (n % 2 == 0) {\n\
    \            result.Add(3);\n            result.Add(1 + n / 2);\n            return\
    \ result;\n        }\n        List<long> tri1 = Tri(n - 1);\n        List<long>\
    \ tri2 = Tri(n - 2);\n        List<long> tri3 = Tri(n - 3);\n        foreach (long\
    \ i in tri1) {\n            foreach (long j in tri2) {\n                foreach\
    \ (long k in tri3) {\n                    result.Add(i + j + k);\n           \
    \     }\n            }\n        }\n        return result;", "        List<long>\
    \ result = new List<long>();\n        if (n == 0) {\n            result.Add(0);\n\
    \            result.Add(1);\n            return result;\n        }\n        if\
    \ (n == 1) {\n            result.Add(1);\n            return result;\n       \
    \ }\n        if (n == 2) {\n            result.Add(2);\n            return result;\n\
    \        }\n        if (n % 2 == 0) {\n            result.Add(Tri(n - 1) + Tri(n\
    \ - 2) + Tri(n + 1));\n        }\n        else {\n            result.Add(Tri(n\
    \ - 1) + Tri(n - 2) + Tri(n + 1) + Tri(n - 3) + Tri(n - 4));\n        }\n    \
    \    return result;", "        List<long> result = new List<long>();\n       \
    \ if (n == 0) result.Add(3);\n        if (n == 1) result.Add(1);\n        if (n\
    \ == 2) result.Add(2);\n        if (n % 2 == 0) result.Add(Tri(n - 1) + Tri(n\
    \ - 2) + Tri(n + 1));\n        else result.Add(Tri(n - 1) + Tri(n - 2));\n   \
    \     return result;", "        List<long> result = new List<long>();\n      \
    \  if (n == 0) {\n            result.Add(0);\n            result.Add(1);\n   \
    \         return result;\n        }\n        if (n == 1) {\n            result.Add(1);\n\
    \            return result;\n        }\n        if (n == 2) {\n            result.Add(2);\n\
    \            return result;\n        }\n        long tri1 = Tri(n - 1);\n    \
    \    long tri2 = Tri(n - 2);\n        long tri3 = Tri(n - 3);\n        result.Add(tri1);\n\
    \        result.Add(tri2);\n        result.Add(tri3);\n        return result;",
  "        List<long> result = new List<long>();\n        if (n == 0) {\n        \
    \    result.Add(0);\n            result.Add(1);\n            return result;\n\
    \        }\n        if (n == 1) {\n            result.Add(1);\n            result.Add(1);\n\
    \            return result;\n        }\n        if (n == 2) {\n            result.Add(1);\n\
    \            result.Add(2);\n            return result;\n        }\n        if\
    \ (n % 2 == 0) {\n            result.Add(Tri(n - 1) + Tri(n - 2));\n         \
    \   result.Add(Tri(n - 2) + Tri(n + 1));\n        } else {\n            result.Add(Tri(n\
    \ - 1) + Tri(n - 2) + Tri(n + 1));\n            result.Add(Tri(n - 2) + Tri(n\
    \ + 1));\n        }\n        return result;", "        List<long> result = new\
    \ List<long>();\n        if (n == 0) {\n            result.Add(0);\n         \
    \   result.Add(1);\n            return result;\n        }\n        if (n == 1)\
    \ {\n            result.Add(1);\n            result.Add(1);\n            return\
    \ result;\n        }\n        if (n % 2 == 0) {\n            result.Add(Tri(n\
    \ - 1) + Tri(n - 2) + Tri(n + 1));\n            return result;\n        }\n  \
    \      result.Add(Tri(n - 1) + Tri(n - 2));\n        return result;", "      \
    \  List<long> result = new List<long>();\n        if (n == 0) return result;\n\
    \        if (n == 1) return new List<long> { 3 };\n        if (n % 2 == 0) {\n\
    \            result.Add(Tri(n - 1) + Tri(n - 2) + Tri(n + 1));\n        } else\
    \ {\n            result.Add(Tri(n - 1) + Tri(n - 2) + Tri(n + 1) + Tri(n - 3)\
    \ + Tri(n - 4));\n        }\n        return result;", "        List<long> result\
    \ = new List<long>();\n        if (n == 0) {\n            result.Add(0);\n   \
    \         result.Add(1);\n            return result;\n        }\n        if (n\
    \ == 1) {\n            result.Add(1);\n            return result;\n        }\n\
    \        if (n == 2) {\n            result.Add(2);\n            result.Add(1);\n\
    \            return result;\n        }\n        if (n % 2 == 0) {\n          \
    \  long tri1 = Tri(n - 1);\n            long tri2 = Tri(n - 2);\n            long\
    \ tri3 = Tri(n - 3);\n            long tri4 = Tri(n - 4);\n            long tri5\
    \ = Tri(n - 5);\n            long tri6 = Tri(n - 6);\n            long tri7 =\
    \ Tri(n - 7);\n            long tri8 = Tri(n - 8);\n            long tri9 = Tri(n\
    \ - 9);\n            long tri10 = Tri(n - 10);\n            long tri11 = Tri(n\
    \ - 11);\n            long tri12 = Tri(n - 12);\n            long tri13 = Tri(n\
    \ - 13);\n            long tri14 = Tri(n - 14);\n            long tri15 = Tri(n\
    \ - 15);\n            long tri16 = Tri(n - 16);\n            long tri17 = Tri(n\
    \ - 17);\n            long tri18 = Tri(n - 18);\n            long tri19 = Tri(n\
    \ - 19);\n            long tri20 = Tri(n - 20);\n            long tri21 = Tri(n\
    \ - 21);\n            long tri22 = Tri(n - 22);\n            long tri23 = Tri(n\
    \ - 23);\n            long tri24 = Tri(n - 24);\n            long tri25 = Tri(n\
    \ - 25);\n            long tri26 = Tri(n - 26);\n            long tri27 = Tri(n\
    \ - 27);\n            long tri28 = Tri(n - 28);\n            long tri29 = Tri(n\
    \ - 29);\n            long tri30 = Tri(n - 30);\n            long tri31 = Tri(n\
    \ - 31);\n            long tri32 = Tri(n - 32);\n            long tri33 = Tri(n\
    \ - 33);\n            long tri34 = Tri(n - 34);\n            long tri35 = Tri(n\
    \ - 35);\n            long tri36 = Tri(n - 36);\n            long tri37 = Tri(n\
    \ - 37);\n            long tri38 = Tri(n - 38);\n            long tri39 = Tri(n\
    \ - 39);\n            long tri40 = Tri(n - 40);\n            long tri41 = Tri(n\
    \ - 41);\n            long tri42 = Tri(n - 42);\n            long tri43 = Tri(n\
    \ - 43);\n            long tri44 = Tri(n - ", "        List<long> result = new\
    \ List<long>();\n        if (n == 0) return result;\n        if (n == 1) return\
    \ new List<long> { 3 };\n        if (n % 2 == 0) return Tri(n - 1) + Tri(n - 2)\
    \ + Tri(n - 1);\n        else return Tri(n - 1) + Tri(n - 2) + Tri(n - 1) + Tri(n\
    \ - 2);", "        List<long> result = new List<long>();\n        if (n == 0)\
    \ return result;\n        if (n == 1) return new List<long>() { 3 };\n       \
    \ if (n % 2 == 0) return Tri(n - 1) + Tri(n - 2) + Tri(n + 1);\n        else return\
    \ Tri(n - 1) + Tri(n - 2) + Tri(n + 1) + Tri(n - 3) + Tri(n - 4);", "        List<long>\
    \ result = new List<long>();\n        if (n == 0) {\n            result.Add(0);\n\
    \            result.Add(1);\n            return result;\n        }\n        if\
    \ (n == 1) {\n            result.Add(1);\n            return result;\n       \
    \ }\n        if (n % 2 == 0) {\n            result.Add(Tri(n - 1) + Tri(n - 2));\n\
    \            result.Add(Tri(n + 1) + Tri(n + 2));\n        }\n        else {\n\
    \            result.Add(Tri(n - 1) + Tri(n - 2) + Tri(n + 1) + Tri(n + 2));\n\
    \        }\n        return result;", "        List<long> result = new List<long>();\n\
    \        if (n == 1) {\n            result.Add(3);\n        }\n        else if\
    \ (n % 2 == 0) {\n            result.Add(Tri(n - 1) + Tri(n - 2));\n        }\n\
    \        else {\n            result.Add(Tri(n - 1) + Tri(n - 2) + Tri(n + 1));\n\
    \        }\n        return result;", "        List<long> result = new List<long>();\n\
    \        if (n == 0) {\n            result.Add(0);\n            result.Add(1);\n\
    \            return result;\n        }\n        if (n == 1) {\n            result.Add(1);\n\
    \            return result;\n        }\n        if (n == 2) {\n            result.Add(1);\n\
    \            result.Add(2);\n            return result;\n        }\n        List<long>\
    \ tri = Tri(n - 1) + Tri(n - 2) + Tri(n + 1);\n        foreach (long tri2 in tri)\
    \ {\n            result.Add(tri2);\n        }\n        return result;", "    \
    \    List<long> result = new List<long>();\n        if (n == 0) {\n          \
    \  result.Add(0);\n            result.Add(1);\n            return result;\n  \
    \      }\n        if (n == 1) {\n            result.Add(1);\n            result.Add(1);\n\
    \            return result;\n        }\n        if (n == 2) {\n            result.Add(2);\n\
    \            result.Add(1);\n            return result;\n        }\n        if\
    \ (n % 2 == 0) {\n            result.Add(Tri(n - 1) + Tri(n - 2));\n         \
    \   result.Add(Tri(n + 1));\n        } else {\n            result.Add(Tri(n -\
    \ 1) + Tri(n - 2) + Tri(n + 1));\n        }\n        return result;", "      \
    \  List<long> result = new List<long>();\n        if (n == 0) {\n            result.Add(0);\n\
    \            result.Add(1);\n            return result;\n        }\n        if\
    \ (n == 1) {\n            result.Add(1);\n            result.Add(1);\n       \
    \     return result;\n        }\n        if (n % 2 == 0) {\n            result.Add(Tri(n\
    \ - 1) + Tri(n - 2));\n            result.Add(Tri(n + 1));\n            return\
    \ result;\n        }\n        result.Add(Tri(n - 1) + Tri(n - 2) + Tri(n + 1));\n\
    \        return result;", "        List<long> result = new List<long>();\n   \
    \     if (n == 0) return result;\n        if (n == 1) return new List<long>()\
    \ { 3 };\n        if (n % 2 == 0) return Tri(n - 1) + Tri(n - 2) + Tri(n + 1);\n\
    \        else return Tri(n - 1) + Tri(n - 2) + Tri(n + 1) + Tri(n + 2);", "  \
    \      List<long> result = new List<long>();\n        if (n == 0) return result;\n\
    \        if (n == 1) return new List<long>() { 3 };\n        if (n % 2 == 0) {\n\
    \            List<long> tri1 = Tri(n - 1);\n            List<long> tri2 = Tri(n\
    \ - 2);\n            tri1.AddRange(tri2);\n            result.AddRange(tri1);\n\
    \        } else {\n            List<long> tri1 = Tri(n - 1);\n            List<long>\
    \ tri2 = Tri(n - 2);\n            tri1.AddRange(tri2);\n            result.AddRange(tri1);\n\
    \            result.AddRange(tri1);\n        }\n        return result;", "   \
    \     List<long> result = new List<long>();\n        if (n == 0) {\n         \
    \   result.Add(0);\n            result.Add(1);\n            result.Add(1);\n \
    \           return result;\n        }\n        if (n == 1) {\n            result.Add(1);\n\
    \            result.Add(1);\n            return result;\n        }\n        if\
    \ (n == 2) {\n            result.Add(1);\n            result.Add(2);\n       \
    \     return result;\n        }\n        if (n % 2 == 0) {\n            long tri1\
    \ = Tri(n - 1);\n            long tri2 = Tri(n - 2);\n            long tri3 =\
    \ Tri(n - 3);\n            long tri4 = tri1 + tri2 + tri3;\n            result.Add(tri1);\n\
    \            result.Add(tri2);\n            result.Add(tri3);\n            result.Add(tri4);\n\
    \            return result;\n        }\n        else {\n            long tri1\
    \ = Tri(n - 1);\n            long tri2 = Tri(n - 2);\n            long tri3 =\
    \ Tri(n - 3);\n            long tri4 = tri1 + tri2 + tri3;\n            result.Add(tri1);\n\
    \            result.Add(tri2);\n            result.Add(tri3);\n            result.Add(tri4);\n\
    \            result.Add(tri1 + tri2 + tri3);\n            return result;\n   \
    \     }", "        List<long> result = new List<long>();\n        if (n == 0)\
    \ return result;\n        if (n == 1) return new List<long>() { 3 };\n       \
    \ if (n % 2 == 0) {\n            result.Add(3);\n            return result;\n\
    \        }\n        long tri1 = Tri(n - 1);\n        long tri2 = Tri(n - 2);\n\
    \        long tri3 = Tri(n - 3);\n        result.Add(tri1);\n        result.Add(tri2);\n\
    \        result.Add(tri3);\n        return result;", "        List<long> result\
    \ = new List<long>();\n        if (n == 1) result.Add(3);\n        if (n == 2)\
    \ result.Add(1);\n        if (n % 2 == 0) result.Add(Tri(n - 1) + Tri(n - 2) +\
    \ Tri(n + 1));\n        else result.Add(Tri(n - 1) + Tri(n - 2));\n        return\
    \ result;", "        List<long> result = new List<long>();\n        if (n == 0)\
    \ return result;\n        if (n == 1) return new List<long>() { 3 };\n       \
    \ if (n % 2 == 0) return Tri(n - 1) + Tri(n - 2) + Tri(n + 1);\n        else return\
    \ Tri(n - 1) + Tri(n - 2) + Tri(n + 1) + Tri(n - 3) + Tri(n - 4);", "        List<long>\
    \ result = new List<long>();\n        if (n == 0) {\n            result.Add(0);\n\
    \            result.Add(1);\n            result.Add(1);\n            return result;\n\
    \        }\n        if (n == 1) {\n            result.Add(1);\n            result.Add(1);\n\
    \            result.Add(1);\n            return result;\n        }\n        if\
    \ (n % 2 == 0) {\n            result.Add(Tri(n - 1) + Tri(n - 2) + Tri(n + 1));\n\
    \        } else {\n            result.Add(Tri(n - 1) + Tri(n - 2) + Tri(n + 1)\
    \ + Tri(n - 3) + Tri(n - 4));\n        }\n        return result;", "        List<long>\
    \ result = new List<long>();\n        if (n == 0) return result;\n        if (n\
    \ == 1) return new List<long> { 1 };\n        if (n % 2 == 0) return Tri(n - 1)\
    \ + Tri(n - 2) + Tri(n + 1);\n        else return Tri(n - 1) + Tri(n - 2) + Tri(n\
    \ + 1) + Tri(n - 3) + Tri(n - 4);", "        List<long> result = new List<long>();\n\
    \        if (n == 0) {\n            result.Add(0);\n            result.Add(1);\n\
    \            return result;\n        }\n        if (n == 1) {\n            result.Add(1);\n\
    \            result.Add(1);\n            return result;\n        }\n        if\
    \ (n == 2) {\n            result.Add(1);\n            result.Add(2);\n       \
    \     return result;\n        }\n        if (n % 2 == 0) {\n            result.Add(1);\n\
    \            result.Add(n / 2);\n            return result;\n        }\n     \
    \   List<long> left = Tri(n - 1);\n        List<long> right = Tri(n - 2);\n  \
    \      List<long> middle = left.Concat(right).ToList();\n        result.AddRange(middle);\n\
    \        result.Add(n);\n        return result;", "        List<long> result =\
    \ new List<long>();\n        if (n == 0) return result;\n        if (n == 1) return\
    \ new List<long>() { 3 };\n        if (n % 2 == 0) {\n            long a = Tri(n\
    \ - 1);\n            long b = Tri(n - 2);\n            long c = Tri(n + 1);\n\
    \            foreach (var item in a) {\n                result.Add(item);\n  \
    \          }\n            foreach (var item in b) {\n                result.Add(item);\n\
    \            }\n            foreach (var item in c) {\n                result.Add(item);\n\
    \            }\n        } else {\n            long a = Tri(n - 1);\n         \
    \   long b = Tri(n - 2);\n            long c = Tri(n + 1);\n            foreach\
    \ (var item in a) {\n                result.Add(item);\n            }\n      \
    \      foreach (var item in b) {\n                result.Add(item);\n        \
    \    }\n            foreach (var item in c) {\n                result.Add(item);\n\
    \            }\n        }\n        return result;", "        List<long> result\
    \ = new List<long>();\n        if (n == 0) {\n            result.Add(0);\n   \
    \         result.Add(1);\n            return result;\n        }\n        if (n\
    \ == 1) {\n            result.Add(0);\n            result.Add(1);\n          \
    \  return result;\n        }\n        if (n == 2) {\n            result.Add(1);\n\
    \            result.Add(1);\n            return result;\n        }\n        if\
    \ (n % 2 == 0) {\n            result.Add(Tri(n - 1) + Tri(n - 2) + Tri(n + 1));\n\
    \        } else {\n            result.Add(Tri(n - 1) + Tri(n - 2) + Tri(n + 1));\n\
    \            result.Add(Tri(n - 1) + Tri(n - 2) + Tri(n + 1));\n        }\n  \
    \      return result;", "        List<long> result = new List<long>();\n     \
    \   if (n == 0) return result;\n        if (n == 1) return new List<long> { 3\
    \ };\n        if (n % 2 == 0) return Tri(n - 1) + Tri(n - 2) + Tri(n + 1);\n \
    \       else return Tri(n - 1) + Tri(n - 2) + Tri(n + 1) + Tri(n - 3) + Tri(n\
    \ - 4) + Tri(n - 5) + Tri(n - 6) + Tri(n - 7) + Tri(n - 8);", "        List<long>\
    \ result = new List<long>();\n        if (n == 1) return new List<long>() { 3\
    \ };\n        if (n % 2 == 0) return Tri(n - 1) + Tri(n - 2) + Tri(n + 1);\n \
    \       else return Tri(n - 1) + Tri(n - 2) + Tri(n + 1) + Tri(n - 3) + Tri(n\
    \ - 4) + Tri(n - 5) + Tri(n - 6) + Tri(n - 7) + Tri(n - 8);", "        List<long>\
    \ result = new List<long>();\n        if (n == 0) {\n            result.Add(0);\n\
    \            result.Add(1);\n            return result;\n        }\n        if\
    \ (n == 1) {\n            result.Add(1);\n            result.Add(1);\n       \
    \     return result;\n        }\n        if (n == 2) {\n            result.Add(1);\n\
    \            result.Add(2);\n            return result;\n        }\n        if\
    \ (n % 2 == 0) {\n            result.Add(1);\n            result.Add(Tri(n - 1)\
    \ + Tri(n - 2));\n        } else {\n            result.Add(Tri(n - 1) + Tri(n\
    \ - 2) + Tri(n - 3));\n        }\n        return result;", "        List<long>\
    \ result = new List<long>();\n        if (n == 0) return result;\n        if (n\
    \ == 1) return new List<long>() { 3 };\n        if (n % 2 == 0) {\n          \
    \  result.Add(3);\n            result.Add(1 + n / 2);\n            result.Add(Tri(n\
    \ - 1) + Tri(n - 2) + Tri(n + 1));\n        } else {\n            result.Add(Tri(n\
    \ - 1) + Tri(n - 2) + Tri(n + 1));\n            result.Add(1 + n / 2);\n     \
    \       result.Add(Tri(n - 1) + Tri(n - 2) + Tri(n + 1));\n        }\n       \
    \ return result;", "        List<long> result = new List<long>();\n        if\
    \ (n == 0) return result;\n        if (n == 1) return new List<long>() { 3 };\n\
    \        if (n % 2 == 0) {\n            result.Add(Tri(n - 1) + Tri(n - 2) + Tri(n\
    \ + 1));\n            return result;\n        }\n        result.Add(Tri(n - 1)\
    \ + Tri(n - 2));\n        return result;", "        List<long> result = new List<long>();\n\
    \        if (n == 0) return result;\n        if (n == 1) return new List<long>\
    \ { 1 };\n        if (n % 2 == 0) {\n            List<long> first = new List<long>\
    \ { 3 };\n            List<long> second = Tri(n - 1);\n            List<long>\
    \ third = Tri(n - 2);\n            List<long> fourth = Tri(n + 1);\n         \
    \   List<long> result = first.Concat(second).Concat(third).Concat(fourth);\n \
    \           return result;\n        }\n        List<long> first = new List<long>\
    \ { 1, 3 };\n        List<long> second = Tri(n - 1);\n        List<long> third\
    \ = Tri(n - 2);\n        List<long> fourth = Tri(n + 1);\n        List<long> result\
    \ = first.Concat(second).Concat(third).Concat(fourth);\n        return result;",
  "        List<long> result = new List<long>();\n        if (n == 0) {\n        \
    \    result.Add(0);\n            result.Add(1);\n            result.Add(1);\n\
    \            return result;\n        }\n        if (n == 1) {\n            result.Add(0);\n\
    \            result.Add(1);\n            return result;\n        }\n        if\
    \ (n == 2) {\n            result.Add(0);\n            result.Add(1);\n       \
    \     result.Add(1);\n            return result;\n        }\n        List<long>\
    \ tri1 = Tri(n - 1);\n        List<long> tri2 = Tri(n - 2);\n        List<long>\
    \ tri3 = Tri(n - 3);\n        List<long> tri4 = Tri(n - 4);\n        List<long>\
    \ tri5 = Tri(n - 5);\n        List<long> tri6 = Tri(n - 6);\n        List<long>\
    \ tri7 = Tri(n - 7);\n        List<long> tri8 = Tri(n - 8);\n        List<long>\
    \ tri9 = Tri(n - 9);\n        List<long> tri10 = Tri(n - 10);\n        List<long>\
    \ tri11 = Tri(n - 11);\n        List<long> tri12 = Tri(n - 12);\n        List<long>\
    \ tri13 = Tri(n - 13);\n        List<long> tri14 = Tri(n - 14);\n        List<long>\
    \ tri15 = Tri(n - 15);\n        List<long> tri16 = Tri(n - 16);\n        List<long>\
    \ tri17 = Tri(n - 17);\n        List<long> tri18 = Tri(n - 18);\n        List<long>\
    \ tri19 = Tri(n - 19);\n        List<long> tri20 = Tri(n - 20);\n        List<long>\
    \ tri21 = Tri(n - 21);\n        List<long> tri22 = Tri(n - 22);\n        List<long>\
    \ tri23 = Tri(n - 23);\n        List<long> tri24 = Tri(n - 24);\n        List<long>\
    \ tri25 = Tri(n - 25);\n        List<long> tri26 = Tri(n - 26);\n        List<long>\
    \ tri27 = Tri(n - 27);\n        List<long> tri28 = Tri(n - 28);\n        List<long>\
    \ tri29 = Tri(n - 29);\n        List<long> tri30 = Tri(n - 30);\n        List<long>\
    \ tri31 = Tri(n - 31);\n        List<long> tri32 = Tri(n - 32);\n        List<long>\
    \ tri33 = Tri(n - 33);\n        List<long> tri34 = Tri(n - 34);\n        List<long>\
    \ tri35 = Tri(n - 35);\n        List<long> tri36 = Tri(n - 36);\n        List<long>\
    \ tri37", "        List<long> result = new List<long>();\n        if (n == 0)\
    \ {\n            result.Add(0);\n            result.Add(1);\n            return\
    \ result;\n        }\n        if (n == 1) {\n            result.Add(1);\n    \
    \        result.Add(1);\n            return result;\n        }\n        if (n\
    \ == 2) {\n            result.Add(1);\n            result.Add(2);\n          \
    \  return result;\n        }\n        if (n % 2 == 0) {\n            result.Add(Tri(n\
    \ - 1) + Tri(n - 2) + Tri(n + 1));\n        }\n        else {\n            result.Add(Tri(n\
    \ - 1) + Tri(n - 2) + Tri(n - 1));\n        }\n        return result;", "    \
    \    List<long> result = new List<long>();\n        if (n == 0) {\n          \
    \  result.Add(0);\n            result.Add(1);\n            return result;\n  \
    \      }\n        if (n == 1) {\n            result.Add(1);\n            return\
    \ result;\n        }\n        if (n == 2) {\n            result.Add(2);\n    \
    \        return result;\n        }\n        if (n % 2 == 0) {\n            result.Add(Tri(n\
    \ - 1) + Tri(n - 2) + Tri(n + 1));\n            return result;\n        }\n  \
    \      result.Add(Tri(n - 1) + Tri(n - 2));\n        return result;", "      \
    \  List<long> result = new List<long>();\n        if (n == 1) result.Add(3);\n\
    \        else if (n % 2 == 0) result.Add(1 + n / 2);\n        else result.Add(Tri(n\
    \ - 1) + Tri(n - 2) + Tri(n + 1));\n        return result;", "        List<long>\
    \ result = new List<long>();\n        if (n == 0) {\n            result.Add(0);\n\
    \            result.Add(1);\n            return result;\n        }\n        if\
    \ (n == 1) {\n            result.Add(1);\n            result.Add(1);\n       \
    \     return result;\n        }\n        if (n == 2) {\n            result.Add(1);\n\
    \            result.Add(2);\n            return result;\n        }\n        if\
    \ (n % 2 == 0) {\n            result.Add(Tri(n - 1) + Tri(n - 2));\n         \
    \   result.Add(Tri(n - 1) + Tri(n - 2) + Tri(n + 1));\n            return result;\n\
    \        }\n        else {\n            result.Add(Tri(n - 1) + Tri(n - 2) + Tri(n\
    \ + 1));\n            result.Add(Tri(n - 1) + Tri(n - 2) + Tri(n + 1) + Tri(n\
    \ + 2));\n            return result;\n        }", "        List<long> result =\
    \ new List<long>();\n        if (n == 0) return result;\n        if (n == 1) return\
    \ new List<long>() { 3 };\n        if (n % 2 == 0) {\n            long tri1 =\
    \ Tri(n - 1) + Tri(n - 2);\n            long tri2 = Tri(n - 1) + Tri(n + 1);\n\
    \            result.Add(tri1);\n            result.Add(tri2);\n            return\
    \ result;\n        }\n        long tri1 = Tri(n - 1) + Tri(n - 2);\n        long\
    \ tri2 = Tri(n - 1) + Tri(n + 1);\n        result.Add(tri1);\n        result.Add(tri2);\n\
    \        result.Add(tri1 + tri2);\n        return result;", "        List<long>\
    \ result = new List<long>();\n        if (n == 0) return result;\n        if (n\
    \ == 1) return new List<long>() { 1 };\n        if (n % 2 == 0) {\n          \
    \  long tri1 = Tri(n - 1);\n            long tri2 = Tri(n - 2);\n            long\
    \ tri3 = Tri(n + 1);\n            foreach (var item in tri1) {\n             \
    \   result.Add(item);\n            }\n            foreach (var item in tri2) {\n\
    \                result.Add(item);\n            }\n            foreach (var item\
    \ in tri3) {\n                result.Add(item);\n            }\n        } else\
    \ {\n            long tri1 = Tri(n - 1);\n            long tri2 = Tri(n - 2);\n\
    \            long tri3 = Tri(n + 1);\n            foreach (var item in tri1) {\n\
    \                result.Add(item);\n            }\n            foreach (var item\
    \ in tri2) {\n                result.Add(item);\n            }\n            foreach\
    \ (var item in tri3) {\n                result.Add(item);\n            }\n   \
    \         foreach (var item in tri1) {\n                result.Add(item);\n  \
    \          }\n        }\n        return result;", "        List<long> result =\
    \ new List<long>();\n        if (n == 0) {\n            result.Add(0);\n     \
    \       result.Add(1);\n            return result;\n        }\n        if (n ==\
    \ 1) {\n            result.Add(1);\n            result.Add(1);\n            return\
    \ result;\n        }\n        if (n == 2) {\n            result.Add(1);\n    \
    \        result.Add(2);\n            return result;\n        }\n        if (n\
    \ % 2 == 0) {\n            long tri1 = Tri(n - 1);\n            long tri2 = Tri(n\
    \ - 2);\n            long tri3 = Tri(n - 3);\n            long tri4 = tri1 + tri2\
    \ + tri3;\n            result.Add(tri1);\n            result.Add(tri2);\n    \
    \        result.Add(tri3);\n            result.Add(tri4);\n            return\
    \ result;\n        }\n        long tri1 = Tri(n - 1);\n        long tri2 = Tri(n\
    \ - 2);\n        long tri3 = tri1 + tri2;\n        result.Add(tri1);\n       \
    \ result.Add(tri2);\n        result.Add(tri3);\n        return result;", "   \
    \     List<long> result = new List<long>();\n        if (n == 1) {\n         \
    \   result.Add(1);\n            return result;\n        }\n        if (n == 2)\
    \ {\n            result.Add(3);\n            return result;\n        }\n     \
    \   if (n % 2 == 0) {\n            result.Add(1 + n / 2);\n            return\
    \ result;\n        }\n        result.Add(Tri(n - 1) + Tri(n - 2) + Tri(n + 1));\n\
    \        return result;", "        List<long> result = new List<long>();\n   \
    \     if (n == 0) return result;\n        if (n == 1) return new List<long> {\
    \ 3 };\n        if (n % 2 == 0) {\n            long a = Tri(n - 1);\n        \
    \    long b = Tri(n - 2);\n            long c = Tri(n + 1);\n            foreach\
    \ (long x in a) result.Add(x);\n            foreach (long x in b) result.Add(x);\n\
    \            foreach (long x in c) result.Add(x);\n            return result;\n\
    \        }\n        else {\n            long a = Tri(n - 1);\n            long\
    \ b = Tri(n - 2);\n            long c = Tri(n + 1);\n            foreach (long\
    \ x in a) result.Add(x);\n            foreach (long x in b) result.Add(x);\n \
    \           foreach (long x in c) result.Add(x);\n            foreach (long x\
    \ in a) result.Add(x);\n            foreach (long x in b) result.Add(x);\n   \
    \         foreach (long x in c) result.Add(x);\n            return result;\n \
    \       }", "        List<long> result = new List<long>();\n        if (n == 0)\
    \ {\n            result.Add(0);\n            result.Add(1);\n            return\
    \ result;\n        }\n        if (n == 1) {\n            result.Add(0);\n    \
    \        return result;\n        }\n        if (n == 2) {\n            result.Add(1);\n\
    \            result.Add(1);\n            return result;\n        }\n        if\
    \ (n % 2 == 0) {\n            result.Add(Tri(n - 1) + Tri(n - 2) + Tri(n + 1));\n\
    \        }\n        else {\n            result.Add(Tri(n - 1) + Tri(n - 2) + Tri(n\
    \ + 1) + Tri(n - 1) + Tri(n - 2) + Tri(n + 1));\n        }\n        return result;",
  "        List<long> result = new List<long>();\n        if (n == 0) {\n        \
    \    result.Add(0);\n            result.Add(1);\n            return result;\n\
    \        }\n        if (n == 1) {\n            result.Add(1);\n            result.Add(1);\n\
    \            return result;\n        }\n        if (n == 2) {\n            result.Add(1);\n\
    \            result.Add(2);\n            return result;\n        }\n        if\
    \ (n % 2 == 0) {\n            long tri1 = Tri(n - 1);\n            long tri2 =\
    \ Tri(n - 2);\n            long tri3 = Tri(n - 3);\n            long tri4 = Tri(n\
    \ - 4);\n            long tri5 = Tri(n - 5);\n            long tri6 = Tri(n -\
    \ 6);\n            long tri7 = Tri(n - 7);\n            long tri8 = Tri(n - 8);\n\
    \            long tri9 = Tri(n - 9);\n            long tri10 = Tri(n - 10);\n\
    \            long tri11 = Tri(n - 11);\n            long tri12 = Tri(n - 12);\n\
    \            long tri13 = Tri(n - 13);\n            long tri14 = Tri(n - 14);\n\
    \            long tri15 = Tri(n - 15);\n            long tri16 = Tri(n - 16);\n\
    \            long tri17 = Tri(n - 17);\n            long tri18 = Tri(n - 18);\n\
    \            long tri19 = Tri(n - 19);\n            long tri20 = Tri(n - 20);\n\
    \            long tri21 = Tri(n - 21);\n            long tri22 = Tri(n - 22);\n\
    \            long tri23 = Tri(n - 23);\n            long tri24 = Tri(n - 24);\n\
    \            long tri25 = Tri(n - 25);\n            long tri26 = Tri(n - 26);\n\
    \            long tri27 = Tri(n - 27);\n            long tri28 = Tri(n - 28);\n\
    \            long tri29 = Tri(n - 29);\n            long tri30 = Tri(n - 30);\n\
    \            long tri31 = Tri(n - 31);\n            long tri32 = Tri(n - 32);\n\
    \            long tri33 = Tri(n - 33);\n            long tri34 = Tri(n - 34);\n\
    \            long tri35 = Tri(n - 35);\n            long tri36 = Tri(n - 36);\n\
    \            long tri37 = Tri(n - 37);\n            long tri38 = Tri(n - 38);\n\
    \            long tri39 = Tri(n - 39);\n            long tri40 = Tri(n - 40);\n\
    \            long tri41 = Tri(n - 41);\n            long tri42 = Tri(n - 42);\n\
    \            long tri43 = Tri(n - 43);\n            long tri44", "        List<long>\
    \ result = new List<long>();\n        if (n == 0) {\n            result.Add(0);\n\
    \            result.Add(1);\n            return result;\n        }\n        if\
    \ (n == 1) {\n            result.Add(1);\n            result.Add(1);\n       \
    \     return result;\n        }\n        if (n == 2) {\n            result.Add(2);\n\
    \            result.Add(1);\n            return result;\n        }\n        if\
    \ (n % 2 == 0) {\n            result.Add(Tri(n - 1) + Tri(n - 2) + Tri(n + 1));\n\
    \            return result;\n        }\n        result.Add(Tri(n - 1) + Tri(n\
    \ - 2));\n        return result;", "        List<long> result = new List<long>();\n\
    \        if (n == 0) return result;\n        if (n == 1) return new List<long>\
    \ { 3 };\n        if (n % 2 == 0) return Tri(n - 1) + Tri(n - 2) + Tri(n - 1);\n\
    \        else return Tri(n - 1) + Tri(n - 2) + Tri(n + 1);", "        List<long>\
    \ result = new List<long>();\n        if (n == 0) {\n            result.Add(0);\n\
    \            result.Add(1);\n            return result;\n        }\n        if\
    \ (n == 1) {\n            result.Add(1);\n            result.Add(1);\n       \
    \     return result;\n        }\n        if (n % 2 == 0) {\n            result.Add(Tri(n\
    \ - 1) + Tri(n - 2) + Tri(n + 1));\n            return result;\n        }\n  \
    \      result.Add(Tri(n - 1) + Tri(n - 2) + Tri(n + 1));\n        result.Add(Tri(n\
    \ - 2) + Tri(n - 1) + Tri(n + 1));\n        return result;", "        List<long>\
    \ result = new List<long>();\n        if (n == 0) {\n            result.Add(0);\n\
    \            result.Add(1);\n            return result;\n        }\n        if\
    \ (n == 1) {\n            result.Add(1);\n            return result;\n       \
    \ }\n        if (n == 2) {\n            result.Add(2);\n            result.Add(1);\n\
    \            return result;\n        }\n        if (n % 2 == 0) {\n          \
    \  result.Add(Tri(n - 1) + Tri(n - 2) + Tri(n + 1));\n        } else {\n     \
    \       result.Add(Tri(n - 1) + Tri(n - 2) + Tri(n + 1) + Tri(n - 3));\n     \
    \   }\n        return result;", "        List<long> result = new List<long>();\n\
    \        if (n == 0) {\n            result.Add(0);\n            result.Add(1);\n\
    \            result.Add(1);\n            return result;\n        }\n        if\
    \ (n == 1) {\n            result.Add(0);\n            result.Add(1);\n       \
    \     return result;\n        }\n        if (n == 2) {\n            result.Add(0);\n\
    \            result.Add(1);\n            result.Add(1);\n            return result;\n\
    \        }\n        List<long> tri = Tri(n - 1);\n        tri.Add(tri[tri.Count\
    \ - 2] + tri[tri.Count - 1]);\n        tri.Add(tri[tri.Count - 2] + tri[tri.Count\
    \ - 1]);\n        return tri;", "        List<long> result = new List<long>();\n\
    \        if (n == 0) {\n            result.Add(0);\n            result.Add(1);\n\
    \            return result;\n        }\n        if (n == 1) {\n            result.Add(3);\n\
    \            return result;\n        }\n        if (n % 2 == 0) {\n          \
    \  result.Add(Tri(n - 1) + Tri(n - 2) + Tri(n + 1));\n            return result;\n\
    \        }\n        result.Add(Tri(n - 1) + Tri(n - 2));\n        return result;",
  "        List<long> result = new List<long>();\n        if (n == 0) {\n        \
    \    result.Add(0);\n            result.Add(1);\n            return result;\n\
    \        }\n        if (n == 1) {\n            result.Add(1);\n            result.Add(1);\n\
    \            return result;\n        }\n        if (n == 2) {\n            result.Add(1);\n\
    \            result.Add(2);\n            return result;\n        }\n        if\
    \ (n % 2 == 0) {\n            result.Add(Tri(n - 1) + Tri(n - 2));\n         \
    \   result.Add(Tri(n - 2) + Tri(n + 1));\n        }\n        else {\n        \
    \    result.Add(Tri(n - 1) + Tri(n - 2) + Tri(n + 1));\n            result.Add(Tri(n\
    \ - 2) + Tri(n + 1));\n        }\n        return result;", "        List<long>\
    \ result = new List<long>();\n        if (n == 0) return result;\n        if (n\
    \ == 1) return new List<long> { 3 };\n        if (n % 2 == 0) {\n            long\
    \ tri1 = Tri(n - 1);\n            long tri2 = Tri(n - 2);\n            long tri3\
    \ = Tri(n + 1);\n            foreach (long i in tri1) {\n                result.Add(i);\n\
    \            }\n            foreach (long i in tri2) {\n                result.Add(i);\n\
    \            }\n            foreach (long i in tri3) {\n                result.Add(i);\n\
    \            }\n            return result;\n        }\n        else {\n      \
    \      long tri1 = Tri(n - 1);\n            long tri2 = Tri(n - 2);\n        \
    \    long tri3 = Tri(n + 1);\n            foreach (long i in tri1) {\n       \
    \         result.Add(i);\n            }\n            foreach (long i in tri2)\
    \ {\n                result.Add(i);\n            }\n            foreach (long\
    \ i in tri3) {\n                result.Add(i);\n            }\n            return\
    \ result;\n        }", "        List<long> result = new List<long>();\n      \
    \  if (n == 0) {\n            result.Add(0);\n            result.Add(1);\n   \
    \         return result;\n        }\n        if (n == 1) {\n            result.Add(1);\n\
    \            result.Add(1);\n            return result;\n        }\n        if\
    \ (n == 2) {\n            result.Add(1);\n            result.Add(2);\n       \
    \     return result;\n        }\n        if (n % 2 == 0) {\n            result.Add(Tri(n\
    \ - 1) + Tri(n - 2) + Tri(n + 1));\n        }\n        else {\n            result.Add(Tri(n\
    \ - 1) + Tri(n - 2) + Tri(n + 1) + Tri(n - 3) + Tri(n - 4));\n        }\n    \
    \    return result;", "        List<long> result = new List<long>();\n       \
    \ if (n == 0) result.Add(0);\n        if (n == 1) result.Add(1);\n        if (n\
    \ == 2) result.Add(2);\n        if (n % 2 == 0) result.Add(Tri(n - 1) + Tri(n\
    \ - 2));\n        else result.Add(Tri(n - 1) + Tri(n - 2) + Tri(n + 1));\n   \
    \     return result;", "        List<long> result = new List<long>();\n      \
    \  if (n == 0) return result;\n        if (n == 1) return new List<long>() { 1\
    \ };\n        if (n % 2 == 0) {\n            long tri1 = Tri(n - 1);\n       \
    \     long tri2 = Tri(n - 2);\n            long tri3 = Tri(n - 3);\n         \
    \   long tri4 = Tri(n - 4);\n            long tri5 = Tri(n - 5);\n           \
    \ long tri6 = Tri(n - 6);\n            long tri7 = Tri(n - 7);\n            long\
    \ tri8 = Tri(n - 8);\n            long tri9 = Tri(n - 9);\n            long tri10\
    \ = Tri(n - 10);\n            long tri11 = Tri(n - 11);\n            long tri12\
    \ = Tri(n - 12);\n            long tri13 = Tri(n - 13);\n            long tri14\
    \ = Tri(n - 14);\n            long tri15 = Tri(n - 15);\n            long tri16\
    \ = Tri(n - 16);\n            long tri17 = Tri(n - 17);\n            long tri18\
    \ = Tri(n - 18);\n            long tri19 = Tri(n - 19);\n            long tri20\
    \ = Tri(n - 20);\n            long tri21 = Tri(n - 21);\n            long tri22\
    \ = Tri(n - 22);\n            long tri23 = Tri(n - 23);\n            long tri24\
    \ = Tri(n - 24);\n            long tri25 = Tri(n - 25);\n            long tri26\
    \ = Tri(n - 26);\n            long tri27 = Tri(n - 27);\n            long tri28\
    \ = Tri(n - 28);\n            long tri29 = Tri(n - 29);\n            long tri30\
    \ = Tri(n - 30);\n            long tri31 = Tri(n - 31);\n            long tri32\
    \ = Tri(n - 32);\n            long tri33 = Tri(n - 33);\n            long tri34\
    \ = Tri(n - 34);\n            long tri35 = Tri(n - 35);\n            long tri36\
    \ = Tri(n - 36);\n            long tri37 = Tri(n - 37);\n            long tri38\
    \ = Tri(n - 38);\n            long tri39 = Tri(n - 39);\n            long tri40\
    \ = Tri(n - 40);\n            long tri41 = Tri(n - 41);\n            long tri42\
    \ = Tri(n - 42);\n            long tri43 = Tri(n - 43);\n            long tri44\
    \ = Tri(n - 44);\n            long tri45 = Tri(n - 45);\n            long tri46\
    \ = Tri(n - 46);\n            long tri", "        List<long> result = new List<long>();\n\
    \        if (n == 0) return result;\n        if (n == 1) return new List<long>\
    \ { 1 };\n        if (n == 2) return new List<long> { 1, 1 };\n        if (n %\
    \ 2 == 0) {\n            List<long> left = new List<long> { 1, 1 };\n        \
    \    List<long> right = new List<long> { 1, 1 };\n            for (int i = 3;\
    \ i <= n; i++) {\n                left.Add(left.Last() + right.Last());\n    \
    \            right.Add(left.Last() + right.Last());\n            }\n         \
    \   result.AddRange(left);\n            result.AddRange(right);\n            return\
    \ result;\n        } else {\n            List<long> left = new List<long> { 1,\
    \ 1 };\n            List<long> right = new List<long> { 1, 1 };\n            for\
    \ (int i = 3; i <= n; i++) {\n                left.Add(left.Last() + right.Last());\n\
    \                right.Add(left.Last() + right.Last());\n            }\n     \
    \       result.AddRange(left);\n            result.AddRange(right);\n        \
    \    result.Add(left.Last() + right.Last());\n            return result;\n   \
    \     }", "        List<long> result = new List<long>();\n        if (n == 0)\
    \ return result;\n        if (n == 1) return new List<long> { 3 };\n        if\
    \ (n % 2 == 0) {\n            long a = Tri(n - 1);\n            long b = Tri(n\
    \ - 2);\n            long c = Tri(n + 1);\n            foreach (var item in a.Concat(b).Concat(c))\
    \ {\n                result.Add(item);\n            }\n        } else {\n    \
    \        long a = Tri(n - 1);\n            long b = Tri(n - 2);\n            long\
    \ c = Tri(n + 1);\n            foreach (var item in a.Concat(b).Concat(c)) {\n\
    \                result.Add(item);\n            }\n            result.Add(Tri(n\
    \ - 1) + Tri(n - 2) + Tri(n + 1));\n        }\n        return result;", "    \
    \    List<long> result = new List<long>();\n        if (n == 0) {\n          \
    \  result.Add(0);\n            result.Add(1);\n            return result;\n  \
    \      }\n        if (n == 1) {\n            result.Add(1);\n            result.Add(1);\n\
    \            return result;\n        }\n        if (n == 2) {\n            result.Add(2);\n\
    \            result.Add(1);\n            return result;\n        }\n        List<long>\
    \ first = new List<long>();\n        List<long> second = new List<long>();\n \
    \       List<long> third = new List<long>();\n        first.Add(3);\n        second.Add(1);\n\
    \        third.Add(1);\n        List<long> result = new List<long>();\n      \
    \  foreach (long i in first) {\n            result.Add(i);\n        }\n      \
    \  foreach (long i in second) {\n            result.Add(i);\n        }\n     \
    \   foreach (long i in third) {\n            result.Add(i);\n        }\n     \
    \   return result;", "        List<long> result = new List<long>();\n        if\
    \ (n == 0) return result;\n        if (n == 1) return new List<long>() { 3 };\n\
    \        if (n % 2 == 0) {\n            long a = Tri(n - 1);\n            long\
    \ b = Tri(n - 2);\n            long c = a + b;\n            result.Add(c);\n \
    \       }\n        else {\n            long a = Tri(n - 1);\n            long\
    \ b = Tri(n - 2);\n            long c = a + b;\n            result.Add(c);\n \
    \           long d = Tri(n - 3);\n            result.Add(d);\n        }\n    \
    \    return result;", "        List<long> result = new List<long>();\n       \
    \ if (n == 1) return new List<long> { 3 };\n        if (n == 2) return new List<long>\
    \ { 1, 3 };\n        if (n % 2 == 0) return Tri(n - 1) + Tri(n - 2) + Tri(n -\
    \ 1);\n        else return Tri(n - 1) + Tri(n - 2) + Tri(n + 1);", "        List<long>\
    \ result = new List<long>();\n        if (n == 1) {\n            result.Add(3);\n\
    \            return result;\n        }\n        if (n == 2) {\n            result.Add(1);\n\
    \            result.Add(2);\n            return result;\n        }\n        if\
    \ (n % 2 == 0) {\n            result.Add(Tri(n - 1) + Tri(n - 2) + Tri(n + 1));\n\
    \            return result;\n        }\n        result.Add(Tri(n - 1) + Tri(n\
    \ - 2));\n        return result;", "        List<long> result = new List<long>();\n\
    \        if (n == 0) return result;\n        if (n == 1) return new List<long>\
    \ { 3 };\n        if (n % 2 == 0) return Tri(n - 1) + Tri(n - 2) + Tri(n + 1);\n\
    \        else return Tri(n - 1) + Tri(n - 2) + Tri(n + 1) + Tri(n - 3) + Tri(n\
    \ - 4) + Tri(n - 5) + Tri(n - 6) + Tri(n - 7);", "        List<long> result =\
    \ new List<long>();\n        if (n == 1) result.Add(3);\n        if (n % 2 ==\
    \ 0) result.Add(1 + n / 2);\n        else result.Add(Tri(n - 1) + Tri(n - 2) +\
    \ Tri(n + 1));\n        return result;", "        List<long> result = new List<long>();\n\
    \        if (n == 0) {\n            result.Add(0);\n            result.Add(1);\n\
    \            return result;\n        }\n        if (n == 1) {\n            result.Add(1);\n\
    \            return result;\n        }\n        if (n == 2) {\n            result.Add(3);\n\
    \            return result;\n        }\n        List<long> tri1 = Tri(n - 1);\n\
    \        List<long> tri2 = Tri(n - 2);\n        List<long> tri3 = Tri(n - 3);\n\
    \        List<long> tri4 = Tri(n - 4);\n        List<long> tri5 = Tri(n - 5);\n\
    \        List<long> tri6 = Tri(n - 6);\n        List<long> tri7 = Tri(n - 7);\n\
    \        List<long> tri8 = Tri(n - 8);\n        List<long> tri9 = Tri(n - 9);\n\
    \        List<long> tri10 = Tri(n - 10);\n        List<long> tri11 = Tri(n - 11);\n\
    \        List<long> tri12 = Tri(n - 12);\n        List<long> tri13 = Tri(n - 13);\n\
    \        List<long> tri14 = Tri(n - 14);\n        List<long> tri15 = Tri(n - 15);\n\
    \        List<long> tri16 = Tri(n - 16);\n        List<long> tri17 = Tri(n - 17);\n\
    \        List<long> tri18 = Tri(n - 18);\n        List<long> tri19 = Tri(n - 19);\n\
    \        List<long> tri20 = Tri(n - 20);\n        List<long> tri21 = Tri(n - 21);\n\
    \        List<long> tri22 = Tri(n - 22);\n        List<long> tri23 = Tri(n - 23);\n\
    \        List<long> tri24 = Tri(n - 24);\n        List<long> tri25 = Tri(n - 25);\n\
    \        List<long> tri26 = Tri(n - 26);\n        List<long> tri27 = Tri(n - 27);\n\
    \        List<long> tri28 = Tri(n - 28);\n        List<long> tri29 = Tri(n - 29);\n\
    \        List<long> tri30 = Tri(n - 30);\n        List<long> tri31 = Tri(n - 31);\n\
    \        List<long> tri32 = Tri(n - 32);\n        List<long> tri33 = Tri(n - 33);\n\
    \        List<long> tri34 = Tri(n - 34);\n        List<long> tri35 = Tri(n - 35);\n\
    \        List<long> tri36 = Tri(n - 36);\n        List<long> tri37 = Tri(n - 37);\n\
    \        List<long> tri38 = Tri(", "        List<long> result = new List<long>();\n\
    \        if (n == 0) return result;\n        if (n == 1) return new List<long>()\
    \ { 1 };\n        if (n % 2 == 0) return Tri(n - 1) + Tri(n - 2) + Tri(n + 1);\n\
    \        else return Tri(n - 1) + Tri(n - 2) + Tri(n + 1) + Tri(n + 2);", "  \
    \      List<long> result = new List<long>();\n        if (n == 0) {\n        \
    \    result.Add(0);\n            result.Add(1);\n            return result;\n\
    \        }\n        if (n == 1) {\n            result.Add(1);\n            return\
    \ result;\n        }\n        if (n == 2) {\n            result.Add(3);\n    \
    \        return result;\n        }\n        if (n % 2 == 0) {\n            result.Add(Tri(n\
    \ - 1) + Tri(n - 2) + Tri(n + 1));\n        }\n        else {\n            result.Add(Tri(n\
    \ - 1) + Tri(n - 2) + Tri(n + 1) + Tri(n - 1) + Tri(n - 2) + Tri(n + 1));\n  \
    \      }\n        return result;", "        List<long> result = new List<long>();\n\
    \        if (n == 0) {\n            result.Add(0);\n            result.Add(1);\n\
    \            return result;\n        }\n        if (n == 1) {\n            result.Add(1);\n\
    \            result.Add(1);\n            return result;\n        }\n        if\
    \ (n % 2 == 0) {\n            result.Add(Tri(n - 1) + Tri(n - 2) + Tri(n + 1));\n\
    \        }\n        else {\n            result.Add(Tri(n - 1) + Tri(n - 2) + Tri(n\
    \ + 1));\n            result.Add(Tri(n - 1) + Tri(n - 2) + Tri(n + 1));\n    \
    \    }\n        return result;", "        List<long> result = new List<long>();\n\
    \        if (n == 0) return result;\n        if (n == 1) return new List<long>()\
    \ { 3 };\n        if (n % 2 == 0) return Tri(n - 1) + Tri(n - 2) + Tri(n - 1);\n\
    \        else return Tri(n - 1) + Tri(n - 2) + Tri(n + 1);", "        List<long>\
    \ result = new List<long>();\n        if (n == 0) return result;\n        if (n\
    \ == 1) return new List<long> { 3 };\n        if (n % 2 == 0) {\n            long\
    \ a = Tri(n - 1);\n            long b = Tri(n - 2);\n            long c = a +\
    \ b;\n            result.Add(c);\n        }\n        else {\n            long\
    \ a = Tri(n - 1);\n            long b = Tri(n - 2);\n            long c = a +\
    \ b;\n            result.Add(c);\n            long d = Tri(n - 3);\n         \
    \   result.Add(d);\n        }\n        return result;", "        List<long> result\
    \ = new List<long>();\n        if (n == 0) {\n            result.Add(0);\n   \
    \         result.Add(1);\n            return result;\n        }\n        if (n\
    \ == 1) {\n            result.Add(1);\n            result.Add(1);\n          \
    \  return result;\n        }\n        if (n == 2) {\n            result.Add(1);\n\
    \            result.Add(2);\n            return result;\n        }\n        long\
    \ tri1 = Tri(n - 1);\n        long tri2 = Tri(n - 2);\n        long tri3 = Tri(n\
    \ - 3);\n        long tri4 = tri1 + tri2 + tri3;\n        result.Add(tri1);\n\
    \        result.Add(tri2);\n        result.Add(tri3);\n        result.Add(tri4);\n\
    \        return result;", "        List<long> result = new List<long>();\n   \
    \     if (n == 0) return result;\n        if (n == 1) return new List<long>()\
    \ { 3 };\n        if (n % 2 == 0) {\n            result.Add(3);\n            return\
    \ result;\n        }\n        long a = Tri(n - 1) + Tri(n - 2) + Tri(n + 1);\n\
    \        result.Add(a);\n        return result;", "        List<long> result =\
    \ new List<long>();\n        if (n == 0) return result;\n        if (n == 1) return\
    \ new List<long> { 3 };\n        if (n % 2 == 0) {\n            long a = Tri(n\
    \ - 1);\n            long b = Tri(n - 2);\n            long c = Tri(n + 1);\n\
    \            foreach (long x in a) result.Add(x);\n            foreach (long x\
    \ in b) result.Add(x);\n            foreach (long x in c) result.Add(x);\n   \
    \         return result;\n        }\n        long a = Tri(n - 1);\n        long\
    \ b = Tri(n - 2);\n        long c = Tri(n + 1);\n        foreach (long x in a)\
    \ result.Add(x);\n        foreach (long x in b) result.Add(x);\n        foreach\
    \ (long x in c) result.Add(x);\n        return result;", "        List<long> result\
    \ = new List<long>();\n        if (n == 0) return result;\n        if (n == 1)\
    \ return new List<long> { 3 };\n        if (n % 2 == 0) {\n            result.Add(3);\n\
    \            result.Add(1 + n / 2);\n        } else {\n            result.Add(3);\n\
    \            result.Add(Tri(n - 1) + Tri(n - 2) + Tri(n + 1));\n        }\n  \
    \      return result;", "        List<long> result = new List<long>();\n     \
    \   if (n == 1) result.Add(3);\n        else if (n % 2 == 0) result.Add(1 + n\
    \ / 2);\n        else result.Add(Tri(n - 1) + Tri(n - 2) + Tri(n + 1));\n    \
    \    return result;", "        List<long> result = new List<long>();\n       \
    \ if (n == 1) {\n            result.Add(1);\n            return result;\n    \
    \    }\n        if (n == 2) {\n            result.Add(3);\n            return\
    \ result;\n        }\n        if (n % 2 == 0) {\n            result.Add(Tri(n\
    \ - 1) + Tri(n - 2) + Tri(n - 1));\n            return result;\n        }\n  \
    \      else {\n            result.Add(Tri(n - 1) + Tri(n - 2) + Tri(n + 1));\n\
    \            return result;\n        }", "        List<long> result = new List<long>();\n\
    \        if (n == 0) return result;\n        if (n == 1) return new List<long>()\
    \ { 1 };\n        if (n == 2) return new List<long>() { 1, 1 };\n        if (n\
    \ % 2 == 0) {\n            List<long> left = Tri(n - 1);\n            List<long>\
    \ right = Tri(n - 2);\n            List<long> result = new List<long>();\n   \
    \         foreach (long i in left) result.Add(i + right[right.Count - 1]);\n \
    \           return result;\n        }\n        List<long> left = Tri(n - 1);\n\
    \        List<long> right = Tri(n - 2);\n        List<long> result = new List<long>();\n\
    \        foreach (long i in left) result.Add(i + right[left.Count - 1]);\n   \
    \     return result;", "        List<long> result = new List<long>();\n      \
    \  if (n == 0) {\n            result.Add(0);\n            result.Add(1);\n   \
    \         return result;\n        }\n        if (n == 1) {\n            result.Add(1);\n\
    \            result.Add(1);\n            return result;\n        }\n        if\
    \ (n == 2) {\n            result.Add(1);\n            result.Add(2);\n       \
    \     return result;\n        }\n        if (n % 2 == 0) {\n            result.Add(Tri(n\
    \ - 1) + Tri(n - 2) + Tri(n + 1));\n        }\n        else {\n            result.Add(Tri(n\
    \ - 1) + Tri(n - 2) + Tri(n + 1) + Tri(n - 3) + Tri(n - 4));\n        }\n    \
    \    return result;", "        List<long> result = new List<long>();\n       \
    \ if (n == 0) return result;\n        if (n == 1) return new List<long> { 1 };\n\
    \        if (n == 2) return new List<long> { 1, 2 };\n        if (n % 2 == 0)\
    \ {\n            List<long> left = Tri(n / 2);\n            List<long> right =\
    \ Tri(n - 1);\n            List<long> result = new List<long>();\n           \
    \ foreach (long i in left) result.Add(i);\n            foreach (long i in right)\
    \ result.Add(i);\n            return result;\n        } else {\n            List<long>\
    \ left = Tri(n / 2);\n            List<long> right = Tri(n - 1);\n           \
    \ List<long> result = new List<long>();\n            foreach (long i in left)\
    \ result.Add(i);\n            foreach (long i in right) result.Add(i);\n     \
    \       List<long> middle = new List<long>();\n            middle.Add(n / 2);\n\
    \            middle.Add(n / 2 + 1);\n            middle.Add(n / 2 + 2);\n    \
    \        foreach (long i in middle) result.Add(i);\n            return result;\n\
    \        }", "        List<long> result = new List<long>();\n        if (n ==\
    \ 0) return result;\n        if (n == 1) return new List<long> { 3 };\n      \
    \  if (n % 2 == 0) {\n            List<long> tri1 = Tri(n - 1);\n            List<long>\
    \ tri2 = Tri(n - 2);\n            tri1.Add(tri2.Last());\n            tri1.AddRange(tri2);\n\
    \            return tri1;\n        }\n        List<long> tri1 = Tri(n - 1);\n\
    \        List<long> tri2 = Tri(n - 2);\n        tri1.Add(tri2.Last());\n     \
    \   tri1.AddRange(tri2);\n        tri1.Add(tri1.Last());\n        return tri1;",
  "        List<long> result = new List<long>();\n        if (n == 1) {\n        \
    \    result.Add(1);\n            return result;\n        }\n        if (n == 2)\
    \ {\n            result.Add(3);\n            return result;\n        }\n     \
    \   if (n % 2 == 0) {\n            result.Add(Tri(n - 1) + Tri(n - 2) + Tri(n\
    \ + 1));\n            return result;\n        }\n        result.Add(Tri(n - 1)\
    \ + Tri(n - 2));\n        return result;", "        List<long> result = new List<long>();\n\
    \        if (n == 0) {\n            result.Add(0);\n            result.Add(1);\n\
    \            return result;\n        }\n        if (n == 1) {\n            result.Add(1);\n\
    \            result.Add(1);\n            return result;\n        }\n        if\
    \ (n == 2) {\n            result.Add(1);\n            result.Add(2);\n       \
    \     return result;\n        }\n        if (n % 2 == 0) {\n            result.Add(Tri(n\
    \ - 1) + Tri(n - 2) + Tri(n + 1));\n        }\n        else {\n            result.Add(Tri(n\
    \ - 1) + Tri(n - 2) + Tri(n + 1) + Tri(n - 3) + Tri(n - 4));\n        }\n    \
    \    return result;", "        List<long> result = new List<long>();\n       \
    \ if (n == 0) return result;\n        if (n == 1) return new List<long> { 3 };\n\
    \        if (n % 2 == 0) return Tri(n - 1) + Tri(n - 2) + Tri(n + 1);\n      \
    \  else return Tri(n - 1) + Tri(n - 2) + Tri(n + 1) + Tri(n - 3) + Tri(n - 4);",
  "        List<long> result = new List<long>();\n        if (n == 0) return result;\n\
    \        if (n == 1) return new List<long>() { 3 };\n        if (n % 2 == 0) return\
    \ Tri(n - 1) + Tri(n - 2) + Tri(n - 1);\n        else return Tri(n - 1) + Tri(n\
    \ - 2) + Tri(n + 1);", "        List<long> result = new List<long>();\n      \
    \  if (n == 0) return result;\n        if (n == 1) return new List<long>() { 3\
    \ };\n        if (n % 2 == 0) {\n            result.Add(3);\n            return\
    \ result;\n        }\n        List<long> tri1 = Tri(n - 1);\n        List<long>\
    \ tri2 = Tri(n - 2);\n        List<long> tri3 = Tri(n - 3);\n        List<long>\
    \ tri4 = Tri(n - 4);\n        List<long> tri5 = Tri(n - 5);\n        List<long>\
    \ tri6 = Tri(n - 6);\n        List<long> tri7 = Tri(n - 7);\n        List<long>\
    \ tri8 = Tri(n - 8);\n        List<long> tri9 = Tri(n - 9);\n        List<long>\
    \ tri10 = Tri(n - 10);\n        List<long> tri11 = Tri(n - 11);\n        List<long>\
    \ tri12 = Tri(n - 12);\n        List<long> tri13 = Tri(n - 13);\n        List<long>\
    \ tri14 = Tri(n - 14);\n        List<long> tri15 = Tri(n - 15);\n        List<long>\
    \ tri16 = Tri(n - 16);\n        List<long> tri17 = Tri(n - 17);\n        List<long>\
    \ tri18 = Tri(n - 18);\n        List<long> tri19 = Tri(n - 19);\n        List<long>\
    \ tri20 = Tri(n - 20);\n        List<long> tri21 = Tri(n - 21);\n        List<long>\
    \ tri22 = Tri(n - 22);\n        List<long> tri23 = Tri(n - 23);\n        List<long>\
    \ tri24 = Tri(n - 24);\n        List<long> tri25 = Tri(n - 25);\n        List<long>\
    \ tri26 = Tri(n - 26);\n        List<long> tri27 = Tri(n - 27);\n        List<long>\
    \ tri28 = Tri(n - 28);\n        List<long> tri29 = Tri(n - 29);\n        List<long>\
    \ tri30 = Tri(n - 30);\n        List<long> tri31 = Tri(n - 31);\n        List<long>\
    \ tri32 = Tri(n - 32);\n        List<long> tri33 = Tri(n - 33);\n        List<long>\
    \ tri34 = Tri(n - 34);\n        List<long> tri35 = Tri(n - 35);\n        List<long>\
    \ tri36 = Tri(n - 36);\n        List<long> tri37 = Tri(n - 37);\n        List<long>\
    \ tri38 = Tri(n - 38);\n        List<long> tri39", "        List<long> result\
    \ = new List<long>();\n        if (n == 0) return result;\n        if (n == 1)\
    \ return new List<long>() { 3 };\n        if (n % 2 == 0) {\n            result.Add(Tri(n\
    \ - 1) + Tri(n - 2) + Tri(n + 1));\n            return result;\n        }\n  \
    \      result.Add(Tri(n - 1) + Tri(n - 2) + Tri(n + 1));\n        result.Add(Tri(n\
    \ - 2) + Tri(n - 1) + Tri(n + 1));\n        return result;", "        List<long>\
    \ result = new List<long>();\n        if (n == 0) return result;\n        if (n\
    \ == 1) return new List<long>() { 3 };\n        if (n % 2 == 0) return Tri(n -\
    \ 1) + Tri(n - 2) + Tri(n + 1);\n        return Tri(n - 1) + Tri(n - 2) + Tri(n\
    \ + 1) + Tri(n - 3) + Tri(n - 4) + Tri(n - 5) + Tri(n - 6) + Tri(n - 7);", " \
    \       List<long> result = new List<long>();\n        if (n == 0) return result;\n\
    \        if (n == 1) return new List<long> { 3 };\n        if (n % 2 == 0) return\
    \ Tri(n - 1) + Tri(n - 2) + Tri(n + 1);\n        else return Tri(n - 1) + Tri(n\
    \ - 2) + Tri(n + 1) + Tri(n - 3) + Tri(n - 4) + Tri(n - 5) + Tri(n - 6) + Tri(n\
    \ - 7);", "        List<long> result = new List<long>();\n        if (n == 0)\
    \ {\n            result.Add(0);\n            result.Add(1);\n            return\
    \ result;\n        }\n        if (n == 1) {\n            result.Add(1);\n    \
    \        return result;\n        }\n        if (n == 2) {\n            result.Add(2);\n\
    \            return result;\n        }\n        if (n % 2 == 0) {\n          \
    \  result.Add(Tri(n - 1) + Tri(n - 2) + Tri(n + 1));\n            return result;\n\
    \        }\n        result.Add(Tri(n - 1) + Tri(n - 2));\n        return result;",
  "        List<long> result = new List<long>();\n        if (n == 1) {\n        \
    \    result.Add(3);\n        }\n        else if (n % 2 == 0) {\n            result.Add(Tri(n\
    \ - 1) + Tri(n - 2) + Tri(n - 3));\n        }\n        else {\n            result.Add(Tri(n\
    \ - 1) + Tri(n - 2) + Tri(n - 3) + Tri(n - 4));\n        }\n        return result;",
  "        List<long> result = new List<long>();\n        if (n == 0) return result;\n\
    \        if (n == 1) return new List<long>() { 3 };\n        if (n % 2 == 0) {\n\
    \            long a = Tri(n - 1);\n            long b = Tri(n - 2);\n        \
    \    long c = Tri(n + 1);\n            foreach (var item in a.Concat(b).Concat(c))\
    \ {\n                result.Add(item);\n            }\n        } else {\n    \
    \        long a = Tri(n - 1);\n            long b = Tri(n - 2);\n            long\
    \ c = Tri(n + 1);\n            foreach (var item in a.Concat(b).Concat(c)) {\n\
    \                result.Add(item);\n            }\n            result.Add(Tri(n\
    \ - 1) + Tri(n - 2) + Tri(n + 1));\n        }\n        return result;", "    \
    \    List<long> result = new List<long>();\n        if (n == 0) return result;\n\
    \        if (n == 1) return new List<long>() { 3 };\n        if (n % 2 == 0) {\n\
    \            long a = Tri(n - 1);\n            long b = Tri(n - 2);\n        \
    \    long c = Tri(n + 1);\n            foreach (var item in a.Concat(b).Concat(c))\
    \ {\n                result.Add(item);\n            }\n        } else {\n    \
    \        long a = Tri(n - 1);\n            long b = Tri(n - 2);\n            long\
    \ c = Tri(n + 1);\n            long d = Tri(n - 3);\n            foreach (var\
    \ item in a.Concat(b).Concat(c).Concat(d)) {\n                result.Add(item);\n\
    \            }\n        }\n        return result;", "        List<long> result\
    \ = new List<long>();\n        if (n == 0) result.Add(0);\n        if (n == 1)\
    \ result.Add(1);\n        if (n == 2) result.Add(2);\n        if (n % 2 == 0)\
    \ result.Add(Tri(n - 1) + Tri(n - 2) + Tri(n + 1));\n        else result.Add(Tri(n\
    \ - 1) + Tri(n - 2));\n        return result;", "        List<long> result = new\
    \ List<long>();\n        if (n == 0) {\n            result.Add(0);\n         \
    \   result.Add(1);\n            return result;\n        }\n        if (n == 1)\
    \ {\n            result.Add(1);\n            result.Add(1);\n            return\
    \ result;\n        }\n        if (n == 2) {\n            result.Add(1);\n    \
    \        result.Add(2);\n            return result;\n        }\n        List<long>\
    \ tri1 = Tri(n - 1);\n        List<long> tri2 = Tri(n - 2);\n        List<long>\
    \ tri3 = Tri(n - 3);\n        List<long> tri4 = Tri(n - 4);\n        List<long>\
    \ tri5 = Tri(n - 5);\n        List<long> tri6 = Tri(n - 6);\n        List<long>\
    \ tri7 = Tri(n - 7);\n        List<long> tri8 = Tri(n - 8);\n        List<long>\
    \ tri9 = Tri(n - 9);\n        List<long> tri10 = Tri(n - 10);\n        List<long>\
    \ tri11 = Tri(n - 11);\n        List<long> tri12 = Tri(n - 12);\n        List<long>\
    \ tri13 = Tri(n - 13);\n        List<long> tri14 = Tri(n - 14);\n        List<long>\
    \ tri15 = Tri(n - 15);\n        List<long> tri16 = Tri(n - 16);\n        List<long>\
    \ tri17 = Tri(n - 17);\n        List<long> tri18 = Tri(n - 18);\n        List<long>\
    \ tri19 = Tri(n - 19);\n        List<long> tri20 = Tri(n - 20);\n        List<long>\
    \ tri21 = Tri(n - 21);\n        List<long> tri22 = Tri(n - 22);\n        List<long>\
    \ tri23 = Tri(n - 23);\n        List<long> tri24 = Tri(n - 24);\n        List<long>\
    \ tri25 = Tri(n - 25);\n        List<long> tri26 = Tri(n - 26);\n        List<long>\
    \ tri27 = Tri(n - 27);\n        List<long> tri28 = Tri(n - 28);\n        List<long>\
    \ tri29 = Tri(n - 29);\n        List<long> tri30 = Tri(n - 30);\n        List<long>\
    \ tri31 = Tri(n - 31);\n        List<long> tri32 = Tri(n - 32);\n        List<long>\
    \ tri33 = Tri(n - 33);\n        List<long> tri34 = Tri(n - 34);\n        List<long>\
    \ tri35 = Tri(n - 35);\n        List<long> tri36 = Tri(n - 36);\n        List<long>\
    \ tri37 = Tri(n - 37);\n        ", "        List<long> result = new List<long>();\n\
    \        if (n == 0) {\n            result.Add(0);\n            result.Add(1);\n\
    \            return result;\n        }\n        if (n == 1) {\n            result.Add(1);\n\
    \            return result;\n        }\n        if (n == 2) {\n            result.Add(2);\n\
    \            result.Add(1);\n            return result;\n        }\n        long\
    \ tri1 = Tri(n - 1);\n        long tri2 = Tri(n - 2);\n        long tri3 = Tri(n\
    \ - 3);\n        long tri4 = Tri(n - 4);\n        long tri5 = Tri(n - 5);\n  \
    \      long tri6 = Tri(n - 6);\n        long tri7 = Tri(n - 7);\n        long\
    \ tri8 = Tri(n - 8);\n        long tri9 = Tri(n - 9);\n        long tri10 = Tri(n\
    \ - 10);\n        long tri11 = Tri(n - 11);\n        long tri12 = Tri(n - 12);\n\
    \        long tri13 = Tri(n - 13);\n        long tri14 = Tri(n - 14);\n      \
    \  long tri15 = Tri(n - 15);\n        long tri16 = Tri(n - 16);\n        long\
    \ tri17 = Tri(n - 17);\n        long tri18 = Tri(n - 18);\n        long tri19\
    \ = Tri(n - 19);\n        long tri20 = Tri(n - 20);\n        long tri21 = Tri(n\
    \ - 21);\n        long tri22 = Tri(n - 22);\n        long tri23 = Tri(n - 23);\n\
    \        long tri24 = Tri(n - 24);\n        long tri25 = Tri(n - 25);\n      \
    \  long tri26 = Tri(n - 26);\n        long tri27 = Tri(n - 27);\n        long\
    \ tri28 = Tri(n - 28);\n        long tri29 = Tri(n - 29);\n        long tri30\
    \ = Tri(n - 30);\n        long tri31 = Tri(n - 31);\n        long tri32 = Tri(n\
    \ - 32);\n        long tri33 = Tri(n - 33);\n        long tri34 = Tri(n - 34);\n\
    \        long tri35 = Tri(n - 35);\n        long tri36 = Tri(n - 36);\n      \
    \  long tri37 = Tri(n - 37);\n        long tri38 = Tri(n - 38);\n        long\
    \ tri39 = Tri(n - 39);\n        long tri40 = Tri(n - 40);\n        long tri41\
    \ = Tri(n - 41);\n        long tri42 = Tri(n - 42);\n        long tri43 = Tri(n\
    \ - 43);\n        long tri44 = Tri(n - 44);\n        long ", "        List<long>\
    \ result = new List<long>();\n        if (n == 0) return result;\n        if (n\
    \ == 1) return new List<long>() { 3 };\n        if (n % 2 == 0) {\n          \
    \  long tri1 = Tri(n - 1);\n            long tri2 = Tri(n - 2);\n            long\
    \ tri3 = Tri(n - 3);\n            long tri4 = tri1 + tri2 + tri3;\n          \
    \  result.Add(tri4);\n            return result;\n        }\n        else {\n\
    \            long tri1 = Tri(n - 1);\n            long tri2 = Tri(n - 2);\n  \
    \          long tri3 = tri1 + tri2;\n            result.Add(tri3);\n         \
    \   return result;\n        }", "        List<long> result = new List<long>();\n\
    \        if (n == 0) return result;\n        if (n == 1) return new List<long>()\
    \ { 1 };\n        if (n == 2) return new List<long>() { 1, 1 };\n        if (n\
    \ % 2 == 0) {\n            int a = Tri(n / 2);\n            int b = Tri(n / 2\
    \ + 1);\n            int c = Tri(n / 2 + 2);\n            int sum = a + b + c;\n\
    \            result.Add(sum);\n            return result;\n        } else {\n\
    \            int a = Tri(n / 2);\n            int b = Tri(n / 2 + 1);\n      \
    \      int c = Tri(n / 2 + 2);\n            int sum = a + b + c;\n           \
    \ result.Add(sum);\n            return result;\n        }", "        List<long>\
    \ result = new List<long>();\n        if (n == 0) return result;\n        if (n\
    \ == 1) return new List<long> { 3 };\n        if (n % 2 == 0) {\n            result.Add(Tri(n\
    \ - 1) + Tri(n - 2) + Tri(n + 1));\n            return result;\n        }\n  \
    \      result.Add(Tri(n - 1) + Tri(n - 2));\n        return result;", "      \
    \  List<long> result = new List<long>();\n        if (n == 0) {\n            result.Add(0);\n\
    \            result.Add(1);\n            result.Add(1);\n            return result;\n\
    \        }\n        if (n == 1) {\n            result.Add(1);\n            result.Add(1);\n\
    \            result.Add(1);\n            return result;\n        }\n        if\
    \ (n % 2 == 0) {\n            result.Add(Tri(n - 1) + Tri(n - 2) + Tri(n + 1));\n\
    \        } else {\n            result.Add(Tri(n - 1) + Tri(n - 2) + Tri(n + 1));\n\
    \            result.Add(Tri(n - 1) + Tri(n - 2) + Tri(n + 1));\n        }\n  \
    \      return result;", "        List<long> result = new List<long>();\n     \
    \   if (n == 0) result.Add(0);\n        if (n == 1) result.Add(1);\n        if\
    \ (n == 2) result.Add(2);\n        if (n % 2 == 0) {\n            long tri1 =\
    \ Tri(n - 1);\n            long tri2 = Tri(n - 2);\n            long tri3 = Tri(n\
    \ - 3);\n            result.Add((tri1 + tri2 + tri3));\n        }\n        else\
    \ {\n            long tri1 = Tri(n - 1);\n            long tri2 = Tri(n - 2);\n\
    \            long tri3 = Tri(n - 3);\n            result.Add((tri1 + tri2 + tri3));\n\
    \            result.Add((tri1 + tri2 + tri3));\n        }\n        return result;",
  "        List<long> result = new List<long>();\n        if (n == 0) return result;\n\
    \        if (n == 1) return new List<long> { 3 };\n        if (n % 2 == 0) return\
    \ Tri(n - 1) + Tri(n - 2) + Tri(n + 1);\n        else return Tri(n - 1) + Tri(n\
    \ - 2) + Tri(n + 1) + Tri(n - 3) + Tri(n - 4);", "        List<long> result =\
    \ new List<long>();\n        if (n == 0) {\n            result.Add(0);\n     \
    \       result.Add(1);\n            return result;\n        }\n        if (n ==\
    \ 1) {\n            result.Add(1);\n            result.Add(1);\n            return\
    \ result;\n        }\n        if (n == 2) {\n            result.Add(1);\n    \
    \        result.Add(2);\n            return result;\n        }\n        if (n\
    \ % 2 == 0) {\n            result.Add(Tri(n - 1) + Tri(n - 2));\n            result.Add(Tri(n\
    \ - 2) + Tri(n + 1));\n        }\n        else {\n            result.Add(Tri(n\
    \ - 1) + Tri(n - 2) + Tri(n + 1));\n            result.Add(Tri(n - 2) + Tri(n\
    \ + 1));\n        }\n        return result;", "        List<long> result = new\
    \ List<long>();\n        if (n == 0) return result;\n        if (n == 1) return\
    \ new List<long>() { 3 };\n        if (n % 2 == 0) return Tri(n - 1) + Tri(n -\
    \ 2) + Tri(n + 1);\n        else return Tri(n - 1) + Tri(n - 2) + Tri(n + 1) +\
    \ Tri(n - 3) + Tri(n - 4);", "        List<long> result = new List<long>();\n\
    \        if (n == 0) return result;\n        if (n == 1) return new List<long>\
    \ { 3 };\n        if (n % 2 == 0) return Tri(n - 1) + Tri(n - 2) + Tri(n + 1);\n\
    \        else return Tri(n - 1) + Tri(n - 2) + Tri(n + 1) + Tri(n - 3) + Tri(n\
    \ - 4);", "        List<long> result = new List<long>();\n        if (n == 0)\
    \ {\n            result.Add(0);\n            result.Add(1);\n            return\
    \ result;\n        }\n        if (n == 1) {\n            result.Add(1);\n    \
    \        return result;\n        }\n        if (n == 2) {\n            result.Add(2);\n\
    \            return result;\n        }\n        if (n % 2 == 0) {\n          \
    \  result.Add(Tri(n - 1) + Tri(n - 2) + Tri(n + 1));\n        }\n        else\
    \ {\n            result.Add(Tri(n - 1) + Tri(n - 2) + Tri(n + 1) + Tri(n - 3)\
    \ + Tri(n - 4) + Tri(n - 5) + Tri(n - 6));\n        }\n        return result;",
  "        List<long> result = new List<long>();\n        if (n == 0) {\n        \
    \    result.Add(0);\n            result.Add(1);\n            return result;\n\
    \        }\n        if (n == 1) {\n            result.Add(1);\n            return\
    \ result;\n        }\n        if (n == 2) {\n            result.Add(3);\n    \
    \        return result;\n        }\n        if (n % 2 == 0) {\n            result.Add(Tri(n\
    \ - 1) + Tri(n - 2) + Tri(n + 1));\n        } else {\n            result.Add(Tri(n\
    \ - 1) + Tri(n - 2) + Tri(n + 1) + Tri(n - 1) + Tri(n - 2) + Tri(n + 1));\n  \
    \      }\n        return result;", "        List<long> result = new List<long>();\n\
    \        if (n == 0) return result;\n        if (n == 1) return new List<long>()\
    \ { 3 };\n        if (n % 2 == 0) {\n            result.Add(Tri(n - 1) + Tri(n\
    \ - 2) + Tri(n + 1));\n            return result;\n        }\n        result.Add(Tri(n\
    \ - 1) + Tri(n - 2));\n        return result;", "        List<long> result = new\
    \ List<long>();\n        if (n == 1) return new List<long>() { 1 };\n        if\
    \ (n == 2) return new List<long>() { 1, 2 };\n        if (n % 2 == 0) {\n    \
    \        List<long> first = new List<long>() { 1 };\n            List<long> second\
    \ = new List<long>() { 1, 2 };\n            List<long> third = new List<long>()\
    \ { 1, 2, 3 };\n            List<long> fourth = new List<long>() { 1, 2, 3, 4\
    \ };\n            List<long> fifth = new List<long>() { 1, 2, 3, 4, 5 };\n   \
    \         List<long> sixth = new List<long>() { 1, 2, 3, 4, 5, 6 };\n        \
    \    List<long> seventh = new List<long>() { 1, 2, 3, 4, 5, 6, 7 };\n        \
    \    List<long> eighth = new List<long>() { 1, 2, 3, 4, 5, 6, 7, 8 };\n      \
    \      List<long> ninth = new List<long>() { 1, 2, 3, 4, 5, 6, 7, 8, 9 };\n  \
    \          List<long> tenth = new List<long>() { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10\
    \ };\n            List<long> eleventh = new List<long>() { 1, 2, 3, 4, 5, 6, 7,\
    \ 8, 9, 10, 11 };\n            List<long> twelfth = new List<long>() { 1, 2, 3,\
    \ 4, 5, 6, 7, 8, 9, 10, 11, 12 };\n            List<long> thirteenth = new List<long>()\
    \ { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13 };\n            List<long> fourteenth\
    \ = new List<long>() { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14 };\n    \
    \        List<long> fifteenth = new List<long>() { 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ 10, 11, 12, 13, 14, 15 };\n            List<long> sixteenth = new List<long>()\
    \ { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16 };\n            List<long>\
    \ seventeenth = new List<long>() { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,\
    \ 14, 15, 16, 17 };\n            List<long> eighteenth = new List<long>() { 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18 };\n            List<long>\
    \ nineteenth = new List<long>() { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14,\
    \ 15, 16, 17, 18, 19 };\n            List<long> twentieth = new List<long>() {\
    \ 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20 };\n \
    \           List<long> twentyfirst = new List<long>() { 1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21 };\n            List<long>\
    \ twent", "        List<long> result = new List<long>();\n        if (n == 0)\
    \ {\n            result.Add(0);\n            result.Add(1);\n            return\
    \ result;\n        }\n        if (n == 1) {\n            result.Add(1);\n    \
    \        return result;\n        }\n        if (n == 2) {\n            result.Add(3);\n\
    \            return result;\n        }\n        if (n % 2 == 0) {\n          \
    \  result.Add(Tri(n - 1) + Tri(n - 2) + Tri(n + 1));\n            return result;\n\
    \        }\n        else {\n            result.Add(Tri(n - 1) + Tri(n - 2) + Tri(n\
    \ + 1) + Tri(n - 3) + Tri(n - 4));\n            return result;\n        }", " \
    \       List<long> result = new List<long>();\n        if (n == 0) {\n       \
    \     result.Add(0);\n            result.Add(1);\n            return result;\n\
    \        }\n        if (n == 1) {\n            result.Add(1);\n            result.Add(1);\n\
    \            return result;\n        }\n        if (n == 2) {\n            result.Add(2);\n\
    \            result.Add(1);\n            return result;\n        }\n        if\
    \ (n % 2 == 0) {\n            result.Add(Tri(n - 1) + Tri(n - 2));\n         \
    \   result.Add(Tri(n + 1));\n            return result;\n        }\n        else\
    \ {\n            result.Add(Tri(n - 1) + Tri(n - 2) + Tri(n + 1));\n         \
    \   return result;\n        }", "        List<long> result = new List<long>();\n\
    \        if (n == 0) return result;\n        if (n == 1) return new List<long>\
    \ { 3 };\n        if (n % 2 == 0) {\n            long tri1 = Tri(n - 1) + Tri(n\
    \ - 2) + Tri(n + 1);\n            long tri2 = Tri(n - 1) + Tri(n - 2) + Tri(n\
    \ + 1);\n            long tri3 = Tri(n - 1) + Tri(n - 2) + Tri(n + 1);\n     \
    \       result.Add(tri1);\n            result.Add(tri2);\n            result.Add(tri3);\n\
    \            return result;\n        }\n        else {\n            long tri1\
    \ = Tri(n - 1) + Tri(n - 2) + Tri(n + 1);\n            long tri2 = Tri(n - 1)\
    \ + Tri(n - 2) + Tri(n + 1);\n            long tri3 = Tri(n - 1) + Tri(n - 2)\
    \ + Tri(n + 1);\n            result.Add(tri1);\n            result.Add(tri2);\n\
    \            result.Add(tri3);\n            result.Add(tri1 + tri2);\n       \
    \     result.Add(tri1 + tri3);\n            result.Add(tri2 + tri3);\n       \
    \     return result;\n        }", "        List<long> result = new List<long>();\n\
    \        if (n == 0) return result;\n        if (n == 1) return new List<long>\
    \ { 3 };\n        if (n % 2 == 0) {\n            long a = Tri(n - 1);\n      \
    \      long b = Tri(n - 2);\n            long c = Tri(n + 1);\n            foreach\
    \ (var item in a.Concat(b).Concat(c)) {\n                result.Add(item);\n \
    \           }\n        } else {\n            long a = Tri(n - 1);\n          \
    \  long b = Tri(n - 2);\n            long c = Tri(n + 1);\n            long d\
    \ = Tri(n - 3);\n            foreach (var item in a.Concat(b).Concat(c).Concat(d))\
    \ {\n                result.Add(item);\n            }\n        }\n        return\
    \ result;", "        List<long> result = new List<long>();\n        if (n == 0)\
    \ {\n            result.Add(0);\n            result.Add(1);\n            return\
    \ result;\n        }\n        if (n == 1) {\n            result.Add(1);\n    \
    \        return result;\n        }\n        if (n == 2) {\n            result.Add(3);\n\
    \            return result;\n        }\n        long tri1 = Tri(n - 1);\n    \
    \    long tri2 = Tri(n - 2);\n        long tri3 = Tri(n - 3);\n        long tri4\
    \ = tri1 + tri2 + tri3;\n        result.Add(tri1);\n        result.Add(tri2);\n\
    \        result.Add(tri3);\n        result.Add(tri4);\n        return result;",
  "        List<long> result = new List<long>();\n        if (n == 0) {\n        \
    \    result.Add(0);\n            result.Add(1);\n            return result;\n\
    \        }\n        if (n == 1) {\n            result.Add(1);\n            result.Add(1);\n\
    \            return result;\n        }\n        if (n % 2 == 0) {\n          \
    \  result.Add(Tri(n - 1) + Tri(n - 2) + Tri(n + 1));\n        }\n        else\
    \ {\n            result.Add(Tri(n - 1) + Tri(n - 2) + Tri(n + 1));\n         \
    \   result.Add(Tri(n - 1) + Tri(n - 2) + Tri(n + 1));\n        }\n        return\
    \ result;", "        List<long> result = new List<long>();\n        if (n == 0)\
    \ {\n            result.Add(0);\n            result.Add(1);\n            return\
    \ result;\n        }\n        if (n == 1) {\n            result.Add(3);\n    \
    \        return result;\n        }\n        if (n == 2) {\n            result.Add(3);\n\
    \            result.Add(1);\n            return result;\n        }\n        if\
    \ (n % 2 == 0) {\n            result.Add(Tri(n - 1) + Tri(n - 2) + Tri(n + 1));\n\
    \        }\n        else {\n            result.Add(Tri(n - 1) + Tri(n - 2));\n\
    \        }\n        return result;", "        List<long> result = new List<long>();\n\
    \        if (n == 0) return result;\n        if (n == 1) return new List<long>\
    \ { 1 };\n        if (n % 2 == 0) return Tri(n - 1) + Tri(n - 2) + Tri(n + 1);\n\
    \        else return Tri(n - 1) + Tri(n - 2) + Tri(n + 1) + Tri(n - 3) + Tri(n\
    \ - 4) + Tri(n - 5) + Tri(n - 6) + Tri(n - 7);", "        List<long> result =\
    \ new List<long>();\n        if (n == 1) {\n            result.Add(1);\n     \
    \       return result;\n        }\n        if (n == 2) {\n            result.Add(3);\n\
    \            return result;\n        }\n        if (n % 2 == 0) {\n          \
    \  result.Add(Tri(n - 1) + Tri(n - 2) + Tri(n + 1));\n            return result;\n\
    \        }\n        else {\n            result.Add(Tri(n - 1) + Tri(n - 2) + Tri(n\
    \ + 1) + Tri(n - 3) + Tri(n - 4) + Tri(n + 2));\n            return result;\n\
    \        }", "        List<long> result = new List<long>();\n        if (n ==\
    \ 0) return result;\n        if (n == 1) return new List<long>() { 1 };\n    \
    \    if (n % 2 == 0) {\n            result.Add(Tri(n - 1) + Tri(n - 2) + Tri(n\
    \ + 1));\n            return result;\n        }\n        else {\n            result.Add(Tri(n\
    \ - 1) + Tri(n - 2) + Tri(n - 3));\n            return result;\n        }", " \
    \       List<long> result = new List<long>();\n        if (n == 0) return result;\n\
    \        if (n == 1) return new List<long> { 3 };\n        if (n % 2 == 0) return\
    \ Tri(n - 1) + Tri(n - 2) + Tri(n + 1);\n        else return Tri(n - 1) + Tri(n\
    \ - 2) + Tri(n + 1) + Tri(n - 3) + Tri(n - 4) + Tri(n - 5) + Tri(n - 6);", " \
    \       List<long> result = new List<long>();\n        if (n == 1) result.Add(3);\n\
    \        else if (n % 2 == 0) result.Add(1 + n / 2);\n        else result.Add(Tri(n\
    \ - 1) + Tri(n - 2) + Tri(n + 1));\n        return result;", "        List<long>\
    \ result = new List<long>();\n        if (n == 0) {\n            result.Add(0);\n\
    \            result.Add(1);\n            return result;\n        }\n        if\
    \ (n == 1) {\n            result.Add(1);\n            result.Add(1);\n       \
    \     return result;\n        }\n        if (n == 2) {\n            result.Add(1);\n\
    \            result.Add(2);\n            return result;\n        }\n        if\
    \ (n % 2 == 0) {\n            result.Add(1);\n            result.Add(n / 2);\n\
    \            return result;\n        }\n        List<long> left = Tri(n - 1);\n\
    \        List<long> right = Tri(n - 2);\n        List<long> result = new List<long>();\n\
    \        foreach (long i in left) {\n            foreach (long j in right) {\n\
    \                result.Add(i + j);\n            }\n        }\n        return\
    \ result;", "        List<long> result = new List<long>();\n        if (n == 0)\
    \ return result;\n        if (n == 1) return new List<long> { 3 };\n        if\
    \ (n % 2 == 0) {\n            result.Add(Tri(n - 1) + Tri(n - 2) + Tri(n + 1));\n\
    \            return result;\n        }\n        result.Add(Tri(n - 1) + Tri(n\
    \ - 2) + Tri(n + 1));\n        result.Add(Tri(n - 1) + Tri(n - 2) + Tri(n + 1));\n\
    \        return result;", "        List<long> result = new List<long>();\n   \
    \     if (n == 0) {\n            result.Add(0);\n            result.Add(1);\n\
    \            return result;\n        }\n        if (n == 1) {\n            result.Add(3);\n\
    \            return result;\n        }\n        if (n % 2 == 0) {\n          \
    \  result.Add(Tri(n - 1) + Tri(n - 2) + Tri(n + 1));\n            return result;\n\
    \        }\n        result.Add(Tri(n - 1) + Tri(n - 2) + Tri(n + 1));\n      \
    \  result.Add(Tri(n - 1) + Tri(n - 2) + Tri(n + 1));\n        return result;",
  "        List<long> result = new List<long>();\n        if (n == 0) return result;\n\
    \        if (n == 1) return new List<long>() { 3 };\n        if (n % 2 == 0) {\n\
    \            result.Add(Tri(n - 1) + Tri(n - 2) + Tri(n + 1));\n        } else\
    \ {\n            result.Add(Tri(n - 1) + Tri(n - 2) + Tri(n + 1) + Tri(n - 3)\
    \ + Tri(n - 4));\n        }\n        return result;", "        List<long> result\
    \ = new List<long>();\n        if (n == 0) {\n            result.Add(0);\n   \
    \         result.Add(1);\n            return result;\n        }\n        if (n\
    \ == 1) {\n            result.Add(1);\n            result.Add(1);\n          \
    \  return result;\n        }\n        if (n == 2) {\n            result.Add(2);\n\
    \            result.Add(1);\n            return result;\n        }\n        if\
    \ (n % 2 == 0) {\n            result.Add(Tri(n - 1) + Tri(n - 2) + Tri(n + 1));\n\
    \        }\n        else {\n            result.Add(Tri(n - 1) + Tri(n - 2) + Tri(n\
    \ + 1) + Tri(n - 3) + Tri(n - 4));\n        }\n        return result;", "    \
    \    List<long> result = new List<long>();\n        if (n == 0) result.Add(3);\n\
    \        if (n == 1) result.Add(1);\n        if (n == 2) result.Add(2);\n    \
    \    if (n % 2 == 0) {\n            int n1 = n - 1;\n            int n2 = n -\
    \ 2;\n            int n3 = n + 1;\n            int n4 = n + 2;\n            int\
    \ n5 = n + 3;\n            int n6 = n + 4;\n            int n7 = n + 5;\n    \
    \        int n8 = n + 6;\n            int n9 = n + 7;\n            int n10 = n\
    \ + 8;\n            int n11 = n + 9;\n            int n12 = n + 10;\n        \
    \    int n13 = n + 11;\n            int n14 = n + 12;\n            int n15 = n\
    \ + 13;\n            int n16 = n + 14;\n            int n17 = n + 15;\n      \
    \      int n18 = n + 16;\n            int n19 = n + 17;\n            int n20 =\
    \ n + 18;\n            int n21 = n + 19;\n            int n22 = n + 20;\n    \
    \        int n23 = n + 21;\n            int n24 = n + 22;\n            int n25\
    \ = n + 23;\n            int n26 = n + 24;\n            int n27 = n + 25;\n  \
    \          int n28 = n + 26;\n            int n29 = n + 27;\n            int n30\
    \ = n + 28;\n            int n31 = n + 29;\n            int n32 = n + 30;\n  \
    \          int n33 = n + 31;\n            int n34 = n + 32;\n            int n35\
    \ = n + 33;\n            int n36 = n + 34;\n            int n37 = n + 35;\n  \
    \          int n38 = n + 36;\n            int n39 = n + 37;\n            int n40\
    \ = n + 38;\n            int n41 = n + 39;\n            int n42 = n + 40;\n  \
    \          int n43 = n + 41;\n            int n44 = n + 42;\n            int n45\
    \ = n + 43;\n            int n46 = n + 44;\n            int n47 = n + 45;\n  \
    \          int n48 = n + 46;\n            int n49 = n + 47;\n            int n50\
    \ = n + 48;\n            int n51 = n + 49;\n            int n52 = n + 50;\n  \
    \          int n53 = n + 51;\n            int n54 = n + 52;\n            int n55\
    \ = n + 53;\n            int n56 = n + 54;\n            int n57 = n + ", "   \
    \     List<long> result = new List<long>();\n        if (n == 0) {\n         \
    \   result.Add(0);\n            result.Add(1);\n            return result;\n \
    \       }\n        if (n == 1) {\n            result.Add(1);\n            return\
    \ result;\n        }\n        if (n == 2) {\n            result.Add(2);\n    \
    \        result.Add(1);\n            return result;\n        }\n        if (n\
    \ % 2 == 0) {\n            result.Add(Tri(n - 1) + Tri(n - 2) + Tri(n + 1));\n\
    \        } else {\n            result.Add(Tri(n - 1) + Tri(n - 2) + Tri(n + 1)\
    \ + Tri(n - 3) + Tri(n - 4) + Tri(n + 2));\n        }\n        return result;",
  "        List<long> result = new List<long>();\n        if (n == 1) {\n        \
    \    result.Add(1);\n            return result;\n        }\n        if (n == 2)\
    \ {\n            result.Add(3);\n            return result;\n        }\n     \
    \   if (n % 2 == 0) {\n            result.Add(Tri(n - 1) + Tri(n - 2) + Tri(n\
    \ + 1));\n            return result;\n        }\n        result.Add(Tri(n - 1)\
    \ + Tri(n - 2));\n        return result;", "        List<long> result = new List<long>();\n\
    \        if (n == 0) result.Add(0);\n        if (n == 1) result.Add(1);\n    \
    \    if (n == 2) result.Add(2);\n        if (n % 2 == 0) {\n            long tri1\
    \ = Tri(n - 1);\n            long tri2 = Tri(n - 2);\n            long tri3 =\
    \ Tri(n + 1);\n            long sum = tri1 + tri2 + tri3;\n            result.Add(sum);\n\
    \        }\n        return result;", "        List<long> result = new List<long>();\n\
    \        if (n == 0) {\n            result.Add(0);\n            result.Add(1);\n\
    \            result.Add(1);\n            return result;\n        }\n        if\
    \ (n == 1) {\n            result.Add(0);\n            result.Add(1);\n       \
    \     return result;\n        }\n        if (n == 2) {\n            result.Add(0);\n\
    \            result.Add(1);\n            result.Add(1);\n            return result;\n\
    \        }\n        if (n % 2 == 0) {\n            result.Add(Tri(n - 1) + Tri(n\
    \ - 2) + Tri(n + 1));\n        } else {\n            result.Add(Tri(n - 1) + Tri(n\
    \ - 2) + Tri(n + 1) + Tri(n - 1) + Tri(n - 2) + Tri(n + 1));\n        }\n    \
    \    return result;", "        List<long> result = new List<long>();\n       \
    \ if (n == 0) {\n            result.Add(0);\n            result.Add(1);\n    \
    \        return result;\n        }\n        if (n == 1) {\n            result.Add(1);\n\
    \            return result;\n        }\n        if (n == 2) {\n            result.Add(3);\n\
    \            return result;\n        }\n        List<long> firstHalf = Tri(n /\
    \ 2);\n        List<long> secondHalf = Tri(n - firstHalf.Count);\n        firstHalf.AddRange(secondHalf);\n\
    \        result.AddRange(firstHalf);\n        return result;", "        List<long>\
    \ result = new List<long>();\n        if (n == 0) return result;\n        if (n\
    \ == 1) return new List<long>() { 1 };\n        if (n % 2 == 0) {\n          \
    \  result.Add(Tri(n - 1) + Tri(n - 2));\n            result.Add(Tri(n - 1) + Tri(n\
    \ - 2) + Tri(n + 1));\n        } else {\n            result.Add(Tri(n - 1) + Tri(n\
    \ - 2) + Tri(n + 1));\n            result.Add(Tri(n - 1) + Tri(n - 2) + Tri(n\
    \ + 1) + Tri(n + 2));\n        }\n        return result;", "        List<long>\
    \ result = new List<long>();\n        if (n == 0) return result;\n        if (n\
    \ == 1) return new List<long>() { 3 };\n        if (n % 2 == 0) {\n          \
    \  List<long> first = new List<long>() { 3 };\n            List<long> second =\
    \ Tri(n - 1);\n            List<long> third = Tri(n - 2);\n            List<long>\
    \ result = first.Concat(second).Concat(third).ToList();\n            return result;\n\
    \        }\n        else {\n            List<long> first = new List<long>() {\
    \ 3 };\n            List<long> second = Tri(n - 1);\n            List<long> third\
    \ = Tri(n - 2);\n            List<long> result = first.Concat(second).Concat(third).ToList();\n\
    \            return result;\n        }", "        List<long> result = new List<long>();\n\
    \        if (n == 0) return result;\n        if (n == 1) return new List<long>()\
    \ { 3 };\n        if (n % 2 == 0) {\n            long a = Tri(n - 1);\n      \
    \      long b = Tri(n - 2);\n            long c = a + b;\n            result.Add(c);\n\
    \            return result;\n        } else {\n            long a = Tri(n - 1);\n\
    \            long b = Tri(n - 2);\n            long c = a + b;\n            result.Add(c);\n\
    \            long d = Tri(n - 3);\n            result.Add(d);\n            return\
    \ result;\n        }", "        List<long> result = new List<long>();\n      \
    \  if (n == 1) return new List<long> { 3 };\n        if (n == 2) return new List<long>\
    \ { 1, 3 };\n        if (n % 2 == 0) return Tri(n - 1) + Tri(n - 2) + Tri(n +\
    \ 1);\n        else return Tri(n - 1) + Tri(n - 2) + Tri(n + 1) + Tri(n - 3) +\
    \ Tri(n - 4) + Tri(n - 5) + Tri(n - 6) + Tri(n - 7);", "        List<long> result\
    \ = new List<long>();\n        if (n == 0) return result;\n        if (n == 1)\
    \ return new List<long>() { 3 };\n        if (n % 2 == 0) return Tri(n - 1) +\
    \ Tri(n - 2) + Tri(n + 1);\n        else return Tri(n - 1) + Tri(n - 2) + Tri(n\
    \ + 1) + Tri(n - 3) + Tri(n - 4) + Tri(n - 5) + Tri(n - 6) + Tri(n - 7);", " \
    \       List<long> result = new List<long>();\n        if (n == 0) return result;\n\
    \        if (n == 1) return new List<long>() { 1 };\n        if (n % 2 == 0) {\n\
    \            result.Add(Tri(n - 1) + Tri(n - 2) + Tri(n + 1));\n            return\
    \ result;\n        }\n        result.Add(Tri(n - 1) + Tri(n - 2));\n        return\
    \ result;", "        List<long> result = new List<long>();\n        if (n == 0)\
    \ return result;\n        if (n == 1) return new List<long>() { 3 };\n       \
    \ if (n % 2 == 0) return Tri(n - 1) + Tri(n - 2) + Tri(n + 1);\n        else return\
    \ Tri(n - 1) + Tri(n - 2) + Tri(n + 1) + Tri(n + 2);", "        List<long> result\
    \ = new List<long>();\n        if (n == 0) return result;\n        if (n == 1)\
    \ return new List<long>() { 1 };\n        if (n % 2 == 0) {\n            result.Add(Tri(n\
    \ - 1) + Tri(n - 2) + Tri(n + 1));\n        } else {\n            result.Add(Tri(n\
    \ - 1) + Tri(n - 2) + Tri(n + 1) + Tri(n + 2));\n        }\n        return result;",
  "        List<long> result = new List<long>();\n        if (n == 0) return result;\n\
    \        if (n == 1) return new List<long>() { 1 };\n        if (n == 2) return\
    \ new List<long>() { 1, 1 };\n        if (n % 2 == 0) {\n            List<long>\
    \ first = new List<long>() { 1, 1 };\n            List<long> second = new List<long>()\
    \ { 1, 1 };\n            List<long> third = new List<long>() { 1, 1 };\n     \
    \       for (int i = 3; i <= n; i++) {\n                third.Add(first[first.Count\
    \ - 1] + second[second.Count - 1]);\n                second.Add(first[first.Count\
    \ - 1]);\n                first.Add(second[second.Count - 1]);\n            }\n\
    \            third.Add(first[first.Count - 1] + second[second.Count - 1]);\n \
    \           result.AddRange(third);\n        } else {\n            List<long>\
    \ first = new List<long>() { 1, 1 };\n            List<long> second = new List<long>()\
    \ { 1, 1 };\n            List<long> third = new List<long>() { 1, 1 };\n     \
    \       for (int i = 3; i <= n; i++) {\n                third.Add(first[first.Count\
    \ - 1] + second[second.Count - 1]);\n                second.Add(first[first.Count\
    \ - 1]);\n                first.Add(second[second.Count - 1]);\n            }\n\
    \            result.AddRange(third);\n            result.AddRange(first);\n  \
    \          result.AddRange(second);\n        }\n        return result;", "   \
    \     List<long> result = new List<long>();\n        if (n == 0) {\n         \
    \   result.Add(0);\n            result.Add(1);\n            return result;\n \
    \       }\n        if (n == 1) {\n            result.Add(1);\n            return\
    \ result;\n        }\n        if (n == 2) {\n            result.Add(2);\n    \
    \        result.Add(1);\n            return result;\n        }\n        if (n\
    \ % 2 == 0) {\n            result.Add(Tri(n - 1) + Tri(n - 2));\n            result.Add(Tri(n\
    \ + 1) + Tri(n + 2));\n        } else {\n            result.Add(Tri(n - 1) + Tri(n\
    \ - 2) + Tri(n + 1));\n        }\n        return result;", "        List<long>\
    \ result = new List<long>();\n        if (n == 0) {\n            result.Add(0);\n\
    \            result.Add(1);\n            return result;\n        }\n        if\
    \ (n == 1) {\n            result.Add(1);\n            return result;\n       \
    \ }\n        if (n % 2 == 0) {\n            result.Add(Tri(n - 1) + Tri(n - 2)\
    \ + Tri(n - 3));\n            return result;\n        }\n        result.Add(Tri(n\
    \ - 1) + Tri(n - 2) + Tri(n - 3));\n        result.Add(Tri(n - 2) + Tri(n - 3)\
    \ + Tri(n - 4));\n        return result;", "        List<long> result = new List<long>();\n\
    \        if (n == 0) {\n            result.Add(0);\n            result.Add(1);\n\
    \            return result;\n        }\n        if (n == 1) {\n            result.Add(1);\n\
    \            return result;\n        }\n        if (n == 2) {\n            result.Add(2);\n\
    \            return result;\n        }\n        long tri1 = Tri(n - 1);\n    \
    \    long tri2 = Tri(n - 2);\n        long tri3 = Tri(n - 3);\n        result.Add(tri1\
    \ + tri2 + tri3);\n        return result;", "        List<long> result = new List<long>();\n\
    \        if (n == 0) return result;\n        if (n == 1) return new List<long>\
    \ { 3 };\n        if (n % 2 == 0) {\n            result.Add(Tri(n - 1) + Tri(n\
    \ - 2) + Tri(n + 1));\n        } else {\n            result.Add(Tri(n - 1) + Tri(n\
    \ - 2) + Tri(n + 1) + Tri(n - 3) + Tri(n - 4));\n        }\n        return result;",
  "        List<long> result = new List<long>();\n        if (n == 0) {\n        \
    \    result.Add(0);\n            result.Add(1);\n            return result;\n\
    \        }\n        if (n == 1) {\n            result.Add(1);\n            result.Add(1);\n\
    \            return result;\n        }\n        if (n == 2) {\n            result.Add(1);\n\
    \            result.Add(2);\n            return result;\n        }\n        if\
    \ (n % 2 == 0) {\n            result.Add(Tri(n - 1) + Tri(n - 2));\n         \
    \   result.Add(Tri(n - 2) + Tri(n + 1));\n            return result;\n       \
    \ }\n        else {\n            result.Add(Tri(n - 1) + Tri(n - 2) + Tri(n +\
    \ 1));\n            result.Add(Tri(n - 2) + Tri(n + 1));\n            return result;\n\
    \        }", "        List<long> result = new List<long>();\n        if (n ==\
    \ 0) {\n            result.Add(0);\n            result.Add(1);\n            return\
    \ result;\n        }\n        if (n == 1) {\n            result.Add(1);\n    \
    \        result.Add(1);\n            return result;\n        }\n        if (n\
    \ == 2) {\n            result.Add(2);\n            result.Add(1);\n          \
    \  return result;\n        }\n        List<long> left = new List<long>();\n  \
    \      List<long> right = new List<long>();\n        left.Add(1);\n        right.Add(1);\n\
    \        List<long> middle = new List<long>();\n        middle.Add(1);\n     \
    \   middle.Add(1);\n        middle.Add(1);\n        middle.Add(1);\n        middle.Add(1);\n\
    \        middle.Add(1);\n        middle.Add(1);\n        middle.Add(1);\n    \
    \    middle.Add(1);\n        middle.Add(1);\n        middle.Add(1);\n        middle.Add(1);\n\
    \        middle.Add(1);\n        middle.Add(1);\n        middle.Add(1);\n    \
    \    middle.Add(1);\n        middle.Add(1);\n        middle.Add(1);\n        middle.Add(1);\n\
    \        middle.Add(1);\n        middle.Add(1);\n        middle.Add(1);\n    \
    \    middle.Add(1);\n        middle.Add(1);\n        middle.Add(1);\n        middle.Add(1);\n\
    \        middle.Add(1);\n        middle.Add(1);\n        middle.Add(1);\n    \
    \    middle.Add(1);\n        middle.Add(1);\n        middle.Add(1);\n        middle.Add(1);\n\
    \        middle.Add(1);\n        middle.Add(1);\n        middle.Add(1);\n    \
    \    middle.Add(1);\n        middle.Add(1);\n        middle.Add(1);\n        middle.Add(1);\n\
    \        middle.Add(1);\n        middle.Add(1);\n        middle.Add(1);\n    \
    \    middle.Add(1);\n        middle.Add(1);\n        middle.Add(1);\n        middle.Add(1);\n\
    \        middle.Add(1);\n        middle.Add(1);\n        middle.Add(1);\n    \
    \    middle.Add(1);\n        middle.Add(1);\n        middle.Add(1);\n        middle.Add(1);\n\
    \        middle.Add(1);\n        middle.Add(1);\n        middle.Add(1);\n    \
    \    middle.Add(1);\n        middle.Add(1);\n        middle.Add(1);\n        middle.Add(1);\n\
    \        middle.Add(1);\n        middle.Add(1);\n        middle.Add(1);\n    \
    \    middle.Add(1);\n        middle.Add(1);\n        middle.Add(1);\n        middle.Add(1);\n\
    \        middle.", "        List<long> result = new List<long>();\n        if\
    \ (n == 0) return result;\n        if (n == 1) return new List<long> { 3 };\n\
    \        if (n % 2 == 0) {\n            result.Add(Tri(n - 1) + Tri(n - 2) + Tri(n\
    \ + 1));\n            return result;\n        }\n        result.Add(Tri(n - 1)\
    \ + Tri(n - 2));\n        return result;", "        List<long> result = new List<long>();\n\
    \        if (n == 0) return result;\n        if (n == 1) return new List<long>()\
    \ { 3 };\n        if (n % 2 == 0) {\n            long a = Tri(n - 1);\n      \
    \      long b = Tri(n - 2);\n            long c = a + b;\n            result.Add(c);\n\
    \            return result;\n        }\n        else {\n            long a = Tri(n\
    \ - 1);\n            long b = Tri(n - 2);\n            long c = a + b;\n     \
    \       result.Add(c);\n            long d = Tri(n + 1);\n            result.Add(d);\n\
    \            return result;\n        }", "        List<long> result = new List<long>();\n\
    \        if (n == 0) {\n            result.Add(0);\n            result.Add(1);\n\
    \            return result;\n        }\n        if (n == 1) {\n            result.Add(1);\n\
    \            result.Add(1);\n            return result;\n        }\n        if\
    \ (n == 2) {\n            result.Add(2);\n            result.Add(1);\n       \
    \     return result;\n        }\n        if (n % 2 == 0) {\n            result.Add(Tri(n\
    \ - 1) + Tri(n - 2) + Tri(n + 1));\n        } else {\n            result.Add(Tri(n\
    \ - 1) + Tri(n - 2) + Tri(n + 1) + Tri(n - 3) + Tri(n - 4) + Tri(n + 2));\n  \
    \      }\n        return result;", "        List<long> result = new List<long>();\n\
    \        if (n == 1) {\n            result.Add(1);\n            return result;\n\
    \        }\n        if (n == 2) {\n            result.Add(3);\n            return\
    \ result;\n        }\n        if (n % 2 == 0) {\n            long a = Tri(n -\
    \ 1);\n            long b = Tri(n - 2);\n            long c = Tri(n + 1);\n  \
    \          long sum = 0;\n            foreach (var item in a) {\n            \
    \    sum += item;\n            }\n            foreach (var item in b) {\n    \
    \            sum += item;\n            }\n            foreach (var item in c)\
    \ {\n                sum += item;\n            }\n            result.Add(sum);\n\
    \            return result;\n        }\n        else {\n            long a = Tri(n\
    \ - 1);\n            long b = Tri(n - 2);\n            long c = Tri(n + 1);\n\
    \            long sum = 0;\n            foreach (var item in a) {\n          \
    \      sum += item;\n            }\n            foreach (var item in b) {\n  \
    \              sum += item;\n            }\n            foreach (var item in c)\
    \ {\n                sum += item;\n            }\n            result.Add(sum);\n\
    \            result.Add(sum);\n            return result;\n        }", "     \
    \   List<long> result = new List<long>();\n        if (n == 0) return result;\n\
    \        if (n == 1) return new List<long> { 3 };\n        if (n % 2 == 0) return\
    \ Tri(n - 1) + Tri(n - 2) + Tri(n - 1);\n        else return Tri(n - 1) + Tri(n\
    \ - 2) + Tri(n + 1);", "        List<long> result = new List<long>();\n      \
    \  if (n == 0) return result;\n        if (n == 1) return new List<long>() { 1\
    \ };\n        if (n % 2 == 0) {\n            List<long> tri = Tri(n - 1) + Tri(n\
    \ - 2) + Tri(n + 1);\n            foreach (long i in tri) result.Add(i);\n   \
    \     } else {\n            List<long> tri = Tri(n - 1) + Tri(n - 2) + Tri(n +\
    \ 1);\n            foreach (long i in tri) result.Add(i + tri[tri.Count - 1]);\n\
    \        }\n        return result;", "        List<long> result = new List<long>();\n\
    \        if (n == 0) {\n            result.Add(0);\n            result.Add(1);\n\
    \            return result;\n        }\n        if (n == 1) {\n            result.Add(1);\n\
    \            result.Add(1);\n            return result;\n        }\n        if\
    \ (n == 2) {\n            result.Add(1);\n            result.Add(2);\n       \
    \     return result;\n        }\n        if (n % 2 == 0) {\n            result.Add(Tri(n\
    \ - 1) + Tri(n - 2));\n            result.Add(Tri(n + 1) + Tri(n + 2));\n    \
    \        return result;\n        }\n        else {\n            result.Add(Tri(n\
    \ - 1) + Tri(n - 2) + Tri(n + 1) + Tri(n + 2));\n            return result;\n\
    \        }", "        List<long> result = new List<long>();\n        if (n ==\
    \ 0) return result;\n        if (n == 1) return new List<long>() { 3 };\n    \
    \    if (n % 2 == 0) {\n            long a = Tri(n - 1);\n            long b =\
    \ Tri(n - 2);\n            long c = Tri(n + 1);\n            foreach (var item\
    \ in a.Concat(b).Concat(c)) {\n                result.Add(item);\n           \
    \ }\n        } else {\n            long a = Tri(n - 1);\n            long b =\
    \ Tri(n - 2);\n            long c = Tri(n + 1);\n            foreach (var item\
    \ in a.Concat(b).Concat(c)) {\n                result.Add(item);\n           \
    \ }\n            result.Add(Tri(n + 2));\n        }\n        return result;",
  "        List<long> result = new List<long>();\n        if (n == 0) return result;\n\
    \        if (n == 1) return new List<long> { 3 };\n        if (n % 2 == 0) return\
    \ Tri(n - 1) + Tri(n - 2) + Tri(n + 1);\n        else return Tri(n - 1) + Tri(n\
    \ - 2) + Tri(n + 1) + Tri(n - 3) + Tri(n - 4);", "        List<long> result =\
    \ new List<long>();\n        if (n == 0) {\n            result.Add(0);\n     \
    \       result.Add(1);\n            return result;\n        }\n        if (n ==\
    \ 1) {\n            result.Add(1);\n            result.Add(1);\n            return\
    \ result;\n        }\n        if (n == 2) {\n            result.Add(1);\n    \
    \        result.Add(2);\n            return result;\n        }\n        if (n\
    \ % 2 == 0) {\n            result.Add(1);\n            result.Add(n / 2);\n  \
    \          return result;\n        }\n        List<long> left = new List<long>();\n\
    \        List<long> right = new List<long>();\n        left.Add(1);\n        right.Add(1);\n\
    \        right.Add(1);\n        right.Add(1);\n        right.Add(1);\n       \
    \ right.Add(1);\n        right.Add(1);\n        right.Add(1);\n        right.Add(1);\n\
    \        right.Add(1);\n        right.Add(1);\n        right.Add(1);\n       \
    \ right.Add(1);\n        right.Add(1);\n        right.Add(1);\n        right.Add(1);\n\
    \        right.Add(1);\n        right.Add(1);\n        right.Add(1);\n       \
    \ right.Add(1);\n        right.Add(1);\n        right.Add(1);\n        right.Add(1);\n\
    \        right.Add(1);\n        right.Add(1);\n        right.Add(1);\n       \
    \ right.Add(1);\n        right.Add(1);\n        right.Add(1);\n        right.Add(1);\n\
    \        right.Add(1);\n        right.Add(1);\n        right.Add(1);\n       \
    \ right.Add(1);\n        right.Add(1);\n        right.Add(1);\n        right.Add(1);\n\
    \        right.Add(1);\n        right.Add(1);\n        right.Add(1);\n       \
    \ right.Add(1);\n        right.Add(1);\n        right.Add(1);\n        right.Add(1);\n\
    \        right.Add(1);\n        right.Add(1);\n        right.Add(1);\n       \
    \ right.Add(1);\n        right.Add(1);\n        right.Add(1);\n        right.Add(1);\n\
    \        right.Add(1);\n        right.Add(1);\n        right.Add(1);\n       \
    \ right.Add(1);\n        right.Add(1);\n        right.Add(1);\n        right.Add(1);\n\
    \        right.Add(1);\n        right.Add(1);\n        right.Add(1);\n       \
    \ right.Add(1);\n        right.Add(1);\n        right.Add(1);\n        right.Add(1);\n\
    \        right.Add(1);\n        right.Add(1);\n        right.Add(1);\n       \
    \ right.Add(1);\n        right.Add(1);\n        right.Add(1);\n        right.Add(1);\n\
    \        right.Add(1);\n        right.Add(1);\n        right.Add(1);\n       \
    \ right.Add(1);\n        right.Add(1);\n        right.Add(1);\n        right.Add(1);\n\
    \        right.Add(1);\n        right.Add(1);\n        right.Add(1);\n        ",
  "        List<long> result = new List<long>();\n        if (n == 0) return result;\n\
    \        if (n == 1) return new List<long>() { 1 };\n        if (n % 2 == 0) {\n\
    \            long a = Tri(n - 1);\n            long b = Tri(n - 2);\n        \
    \    long c = Tri(n + 1);\n            foreach (long x in a) result.Add(x);\n\
    \            foreach (long x in b) result.Add(x);\n            foreach (long x\
    \ in c) result.Add(x);\n        } else {\n            long a = Tri(n - 1);\n \
    \           long b = Tri(n - 2);\n            long c = Tri(n + 1);\n         \
    \   foreach (long x in a) result.Add(x);\n            foreach (long x in b) result.Add(x);\n\
    \            foreach (long x in c) result.Add(x);\n            long d = Tri(n\
    \ - 3);\n            foreach (long x in d) result.Add(x);\n        }\n       \
    \ return result;", "        List<long> result = new List<long>();\n        if\
    \ (n == 0) {\n            result.Add(0);\n            result.Add(1);\n       \
    \     return result;\n        }\n        if (n == 1) {\n            result.Add(1);\n\
    \            result.Add(1);\n            return result;\n        }\n        if\
    \ (n == 2) {\n            result.Add(2);\n            result.Add(1);\n       \
    \     return result;\n        }\n        long tri1 = Tri(n - 1);\n        long\
    \ tri2 = Tri(n - 2);\n        long tri3 = Tri(n - 3);\n        result.Add(tri1);\n\
    \        result.Add(tri2);\n        result.Add(tri3);\n        return result;",
  "        List<long> result = new List<long>();\n        if (n == 0) {\n        \
    \    result.Add(0);\n            result.Add(1);\n            return result;\n\
    \        }\n        if (n == 1) {\n            result.Add(3);\n            return\
    \ result;\n        }\n        if (n == 2) {\n            result.Add(3);\n    \
    \        result.Add(1);\n            return result;\n        }\n        List<long>\
    \ first = new List<long>();\n        List<long> second = new List<long>();\n \
    \       List<long> third = new List<long>();\n        first.Add(3);\n        second.Add(1);\n\
    \        third.Add(1);\n        third.Add(2);\n        third.Add(3);\n       \
    \ List<long> result = new List<long>();\n        result.AddRange(first);\n   \
    \     result.AddRange(second);\n        result.AddRange(third);\n        List<long>\
    \ newResult = new List<long>();\n        foreach (long item in result) {\n   \
    \         newResult.Add(item + newResult.Last());\n        }\n        return newResult;",
  "        List<long> result = new List<long>();\n        if (n == 0) {\n        \
    \    result.Add(0);\n            result.Add(1);\n            return result;\n\
    \        }\n        if (n == 1) {\n            result.Add(3);\n            return\
    \ result;\n        }\n        if (n == 2) {\n            result.Add(3);\n    \
    \        result.Add(1);\n            return result;\n        }\n        if (n\
    \ % 2 == 0) {\n            long tri1 = Tri(n - 1);\n            long tri2 = Tri(n\
    \ - 2);\n            long tri3 = Tri(n - 3);\n            long tri4 = tri1 + tri2\
    \ + tri3;\n            result.Add(tri1);\n            result.Add(tri2);\n    \
    \        result.Add(tri3);\n            result.Add(tri4);\n            return\
    \ result;\n        }\n        long tri1 = Tri(n - 1);\n        long tri2 = Tri(n\
    \ - 2);\n        long tri3 = Tri(n - 3);\n        long tri4 = tri1 + tri2 + tri3;\n\
    \        result.Add(tri1);\n        result.Add(tri2);\n        result.Add(tri3);\n\
    \        result.Add(tri4);\n        result.Add(tri1 + tri2 + tri3);\n        return\
    \ result;", "        List<long> result = new List<long>();\n        if (n == 1)\
    \ result.Add(3);\n        else if (n % 2 == 0) result.Add(1 + n / 2);\n      \
    \  else result.Add(Tri(n - 1) + Tri(n - 2) + Tri(n + 1));\n        return result;",
  "        List<long> result = new List<long>();\n        if (n == 0) {\n        \
    \    result.Add(0);\n            result.Add(1);\n            return result;\n\
    \        }\n        if (n == 1) {\n            result.Add(1);\n            result.Add(1);\n\
    \            return result;\n        }\n        if (n == 2) {\n            result.Add(1);\n\
    \            result.Add(2);\n            return result;\n        }\n        List<long>\
    \ left = Tri(n - 1);\n        List<long> right = Tri(n - 2);\n        List<long>\
    \ middle = left.Concat(right).ToList();\n        result.Add(middle[0]);\n    \
    \    result.Add(middle[1]);\n        return result;", "        List<long> result\
    \ = new List<long>();\n        if (n == 0) {\n            result.Add(0);\n   \
    \         result.Add(1);\n            return result;\n        }\n        if (n\
    \ == 1) {\n            result.Add(1);\n            result.Add(1);\n          \
    \  return result;\n        }\n        if (n == 2) {\n            result.Add(1);\n\
    \            result.Add(2);\n            return result;\n        }\n        if\
    \ (n % 2 == 0) {\n            result.Add(1);\n            result.Add(2);\n   \
    \         result.Add((n + 1) / 2);\n            return result;\n        }\n  \
    \      result.Add(1);\n        result.Add(3);\n        result.Add((n - 1) / 2);\n\
    \        result.Add((n - 2) / 2);\n        return result;", "        List<long>\
    \ result = new List<long>();\n        if (n == 0) {\n            result.Add(0);\n\
    \            result.Add(1);\n            return result;\n        }\n        if\
    \ (n == 1) {\n            result.Add(3);\n            return result;\n       \
    \ }\n        if (n % 2 == 0) {\n            result.Add(Tri(n - 1) + Tri(n - 2)\
    \ + Tri(n + 1));\n        } else {\n            result.Add(Tri(n - 1) + Tri(n\
    \ - 2) + Tri(n + 1) + Tri(n + 2));\n        }\n        return result;", "    \
    \    List<long> result = new List<long>();\n        if (n == 0) return result;\n\
    \        if (n == 1) return new List<long> { 3 };\n        if (n % 2 == 0) return\
    \ Tri(n - 1) + Tri(n - 2) + Tri(n - 1);\n        else return Tri(n - 1) + Tri(n\
    \ - 2) + Tri(n + 1);", "        List<long> result = new List<long>();\n      \
    \  if (n == 0) {\n            result.Add(0);\n            result.Add(1);\n   \
    \         return result;\n        }\n        if (n == 1) {\n            result.Add(3);\n\
    \            return result;\n        }\n        if (n % 2 == 0) {\n          \
    \  result.Add(Tri(n - 1) + Tri(n - 2) + Tri(n + 1));\n        } else {\n     \
    \       result.Add(Tri(n - 1) + Tri(n - 2) + Tri(n + 1));\n            result.Add(Tri(n\
    \ - 1) + Tri(n - 2) + Tri(n + 1));\n        }\n        return result;", "    \
    \    List<long> result = new List<long>();\n        if (n == 0) return result;\n\
    \        if (n == 1) return new List<long> { 3 };\n        if (n % 2 == 0) {\n\
    \            long a = Tri(n - 1);\n            long b = Tri(n - 2);\n        \
    \    long c = a + b;\n            result.Add(c);\n            return result;\n\
    \        }\n        long a = Tri(n - 1);\n        long b = Tri(n - 2);\n     \
    \   long c = a + b;\n        result.Add(c);\n        result.Add(a + b);\n    \
    \    return result;", "        List<long> result = new List<long>();\n       \
    \ if (n == 0) return result;\n        if (n == 1) return new List<long> { 1 };\n\
    \        if (n % 2 == 0) return Tri(n - 1) + Tri(n - 2) + Tri(n - 1);\n      \
    \  else return Tri(n - 1) + Tri(n - 2) + Tri(n + 1);", "        List<long> result\
    \ = new List<long>();\n        if (n == 1) {\n            result.Add(3);\n   \
    \         return result;\n        }\n        if (n % 2 == 0) {\n            result.Add(1);\n\
    \            result.Add(n / 2);\n            return result;\n        }\n     \
    \   List<long> tri1 = Tri(n - 1);\n        List<long> tri2 = Tri(n - 2);\n   \
    \     List<long> tri3 = Tri(n - 3);\n        result.AddRange(tri1);\n        result.AddRange(tri2);\n\
    \        result.AddRange(tri3);\n        return result;", "        List<long>\
    \ result = new List<long>();\n        if (n == 0) return result;\n        if (n\
    \ == 1) return new List<long>() { 1 };\n        if (n % 2 == 0) {\n          \
    \  List<long> first = new List<long>() { 3 };\n            List<long> second =\
    \ Tri(n - 1);\n            List<long> third = Tri(n - 2);\n            List<long>\
    \ fourth = Tri(n + 1);\n            first = first.Concat(second).Concat(third).Concat(fourth);\n\
    \            return first;\n        } else {\n            List<long> first = new\
    \ List<long>() { 1 };\n            List<long> second = Tri(n - 1);\n         \
    \   List<long> third = Tri(n - 2);\n            List<long> fourth = Tri(n + 1);\n\
    \            first = first.Concat(second).Concat(third).Concat(fourth);\n    \
    \        return first;\n        }", "        List<long> result = new List<long>();\n\
    \        if (n == 0) return result;\n        if (n == 1) return new List<long>()\
    \ { 3 };\n        if (n % 2 == 0) {\n            long a = Tri(n - 1);\n      \
    \      long b = Tri(n - 2);\n            long c = Tri(n + 1);\n            foreach\
    \ (var item in a.Concat(b).Concat(c)) {\n                result.Add(item);\n \
    \           }\n        } else {\n            long a = Tri(n - 1);\n          \
    \  long b = Tri(n - 2);\n            long c = Tri(n + 1);\n            long d\
    \ = Tri(n - 3);\n            foreach (var item in a.Concat(b).Concat(c).Concat(d))\
    \ {\n                result.Add(item);\n            }\n        }\n        return\
    \ result;", "        List<long> result = new List<long>();\n        if (n == 0)\
    \ {\n            result.Add(0);\n            result.Add(1);\n            return\
    \ result;\n        }\n        if (n == 1) {\n            result.Add(1);\n    \
    \        return result;\n        }\n        if (n == 2) {\n            result.Add(2);\n\
    \            result.Add(1);\n            return result;\n        }\n        if\
    \ (n % 2 == 0) {\n            result.Add(Tri(n - 1) + Tri(n - 2) + Tri(n + 1));\n\
    \        } else {\n            result.Add(Tri(n - 1) + Tri(n - 2));\n        }\n\
    \        return result;", "        List<long> result = new List<long>();\n   \
    \     if (n == 0) {\n            result.Add(0);\n            result.Add(1);\n\
    \            result.Add(1);\n            return result;\n        }\n        if\
    \ (n == 1) {\n            result.Add(0);\n            result.Add(1);\n       \
    \     result.Add(1);\n            return result;\n        }\n        if (n ==\
    \ 2) {\n            result.Add(0);\n            result.Add(1);\n            result.Add(1);\n\
    \            return result;\n        }\n        if (n % 2 == 0) {\n          \
    \  result.Add(Tri(n - 1) + Tri(n - 2) + Tri(n + 1));\n        }\n        else\
    \ {\n            result.Add(Tri(n - 1) + Tri(n - 2) + Tri(n + 1) + Tri(n - 1)\
    \ + Tri(n - 2) + Tri(n + 1));\n        }\n        return result;", "        List<long>\
    \ result = new List<long>();\n        if (n == 0) return result;\n        if (n\
    \ == 1) return new List<long> { 3 };\n        if (n % 2 == 0) return Tri(n - 1)\
    \ + Tri(n - 2) + Tri(n + 1);\n        else return Tri(n - 1) + Tri(n - 2) + Tri(n\
    \ + 1) + Tri(n - 3) + Tri(n - 4);", "        List<long> result = new List<long>();\n\
    \        if (n == 0) return result;\n        if (n == 1) return new List<long>()\
    \ { 3 };\n        if (n % 2 == 0) {\n            result.Add(Tri(n - 1) + Tri(n\
    \ - 2) + Tri(n + 1));\n            return result;\n        }\n        result.Add(Tri(n\
    \ - 1) + Tri(n - 2) + Tri(n + 1));\n        result.Add(Tri(n - 1) + Tri(n - 2)\
    \ + Tri(n + 1));\n        return result;", "        List<long> result = new List<long>();\n\
    \        if (n == 0) {\n            result.Add(0);\n            result.Add(1);\n\
    \            return result;\n        }\n        if (n == 1) {\n            result.Add(1);\n\
    \            result.Add(1);\n            return result;\n        }\n        if\
    \ (n == 2) {\n            result.Add(1);\n            result.Add(2);\n       \
    \     return result;\n        }\n        if (n % 2 == 0) {\n            result.Add(Tri(n\
    \ - 1) + Tri(n - 2));\n            result.Add(Tri(n - 1) + Tri(n - 2) + Tri(n\
    \ + 1));\n        }\n        else {\n            result.Add(Tri(n - 1) + Tri(n\
    \ - 2) + Tri(n + 1));\n            result.Add(Tri(n - 1) + Tri(n - 2) + Tri(n\
    \ + 1) + Tri(n + 2));\n        }\n        return result;", "        List<long>\
    \ result = new List<long>();\n        if (n == 0) {\n            result.Add(0);\n\
    \            result.Add(1);\n            return result;\n        }\n        if\
    \ (n == 1) {\n            result.Add(1);\n            return result;\n       \
    \ }\n        if (n % 2 == 0) {\n            result.Add(Tri(n - 1) + Tri(n - 2));\n\
    \            result.Add(Tri(n + 1));\n        } else {\n            result.Add(Tri(n\
    \ - 1) + Tri(n - 2) + Tri(n + 1));\n        }\n        return result;", "    \
    \    List<long> result = new List<long>();\n        if (n == 0) {\n          \
    \  result.Add(0);\n            result.Add(1);\n            result.Add(1);\n  \
    \          return result;\n        }\n        if (n == 1) {\n            result.Add(0);\n\
    \            result.Add(1);\n            return result;\n        }\n        if\
    \ (n == 2) {\n            result.Add(0);\n            result.Add(1);\n       \
    \     result.Add(2);\n            return result;\n        }\n        if (n % 2\
    \ == 0) {\n            result.Add(Tri(n - 1) + Tri(n - 2) + Tri(n - 3));\n   \
    \     }\n        else {\n            result.Add(Tri(n - 1) + Tri(n - 2) + Tri(n\
    \ - 3) + Tri(n - 4));\n        }\n        return result;", "        List<long>\
    \ result = new List<long>();\n        if (n == 0) return result;\n        if (n\
    \ == 1) return new List<long> { 3 };\n        if (n % 2 == 0) return Tri(n - 1)\
    \ + Tri(n - 2) + Tri(n - 1);\n        else return Tri(n - 1) + Tri(n - 2) + Tri(n\
    \ + 1);", "        List<long> result = new List<long>();\n        if (n == 0)\
    \ {\n            result.Add(0);\n            result.Add(1);\n            return\
    \ result;\n        }\n        if (n == 1) {\n            result.Add(1);\n    \
    \        result.Add(1);\n            return result;\n        }\n        if (n\
    \ == 2) {\n            result.Add(1);\n            result.Add(2);\n          \
    \  return result;\n        }\n        if (n % 2 == 0) {\n            result.Add(Tri(n\
    \ - 1) + Tri(n - 2));\n            result.Add(Tri(n - 2) + Tri(n + 1));\n    \
    \    } else {\n            result.Add(Tri(n - 1) + Tri(n - 2) + Tri(n + 1));\n\
    \            result.Add(Tri(n - 2) + Tri(n + 1));\n        }\n        return result;",
  "        List<long> result = new List<long>();\n        if (n == 0) return result;\n\
    \        if (n == 1) return new List<long>() { 1 };\n        if (n % 2 == 0) return\
    \ Tri(n - 1) + Tri(n - 2) + Tri(n - 1);\n        else return Tri(n - 1) + Tri(n\
    \ - 2) + Tri(n + 1);", "        List<long> result = new List<long>();\n      \
    \  if (n == 0) {\n            result.Add(0);\n            result.Add(1);\n   \
    \         return result;\n        }\n        if (n == 1) {\n            result.Add(3);\n\
    \            return result;\n        }\n        if (n == 2) {\n            result.Add(3);\n\
    \            result.Add(1);\n            return result;\n        }\n        long\
    \ tri1 = Tri(n - 1);\n        long tri2 = Tri(n - 2);\n        long tri3 = Tri(n\
    \ - 3);\n        long tri4 = Tri(n - 4);\n        result.Add((tri1 + tri2 + tri3\
    \ + tri4) / 4);\n        return result;", "        List<long> result = new List<long>();\n\
    \        if (n == 0) return result;\n        if (n == 1) return new List<long>\
    \ { 3 };\n        if (n % 2 == 0) {\n            long a = Tri(n - 1);\n      \
    \      long b = Tri(n - 2);\n            long c = a + b;\n            result.Add(c);\n\
    \            return result;\n        }\n        long a = Tri(n - 1);\n       \
    \ long b = Tri(n - 2);\n        long c = a + b;\n        result.Add(c);\n    \
    \    result.Add(a + b);\n        return result;", "        List<long> result =\
    \ new List<long>();\n        if (n == 0) return result;\n        if (n == 1) return\
    \ new List<long>() { 3 };\n        if (n % 2 == 0) return Tri(n - 1) + Tri(n -\
    \ 2) + Tri(n + 1);\n        else return Tri(n - 1) + Tri(n - 2) + Tri(n + 1) +\
    \ Tri(n - 3) + Tri(n - 4) + Tri(n - 5) + Tri(n - 6) + Tri(n - 7);", "        List<long>\
    \ result = new List<long>();\n        if (n == 0) {\n            result.Add(0);\n\
    \            result.Add(1);\n            return result;\n        }\n        if\
    \ (n == 1) {\n            result.Add(1);\n            return result;\n       \
    \ }\n        if (n == 2) {\n            result.Add(2);\n            result.Add(1);\n\
    \            return result;\n        }\n        if (n % 2 == 0) {\n          \
    \  result.Add(Tri(n - 1) + Tri(n - 2) + Tri(n + 1));\n        }\n        else\
    \ {\n            result.Add(Tri(n - 1) + Tri(n - 2) + Tri(n + 1) + Tri(n - 1)\
    \ + Tri(n - 2) + Tri(n + 1));\n        }\n        return result;", "        List<long>\
    \ result = new List<long>();\n        if (n == 0) {\n            result.Add(0);\n\
    \            result.Add(1);\n            result.Add(1);\n            return result;\n\
    \        }\n        if (n == 1) {\n            result.Add(0);\n            result.Add(1);\n\
    \            result.Add(1);\n            return result;\n        }\n        if\
    \ (n == 2) {\n            result.Add(0);\n            result.Add(1);\n       \
    \     result.Add(1);\n            return result;\n        }\n        if (n % 2\
    \ == 0) {\n            result.Add(Tri(n - 1) + Tri(n - 2) + Tri(n + 1));\n   \
    \     }\n        else {\n            result.Add(Tri(n - 1) + Tri(n - 2) + Tri(n\
    \ + 1) + Tri(n - 3) + Tri(n - 4) + Tri(n - 5));\n        }\n        return result;",
  "        List<long> result = new List<long>();\n        if (n == 0) {\n        \
    \    result.Add(0);\n            result.Add(1);\n            return result;\n\
    \        }\n        if (n == 1) {\n            result.Add(0);\n            return\
    \ result;\n        }\n        if (n == 2) {\n            result.Add(1);\n    \
    \        result.Add(1);\n            return result;\n        }\n        if (n\
    \ % 2 == 0) {\n            result.Add(Tri(n - 1) + Tri(n - 2) + Tri(n + 1));\n\
    \        }\n        else {\n            result.Add(Tri(n - 1) + Tri(n - 2) + Tri(n\
    \ + 1) + Tri(n - 1) + Tri(n - 2) + Tri(n + 1));\n        }\n        return result;",
  "        List<long> result = new List<long>();\n        if (n == 1) {\n        \
    \    result.Add(1);\n            return result;\n        }\n        if (n == 2)\
    \ {\n            result.Add(3);\n            return result;\n        }\n     \
    \   if (n % 2 == 0) {\n            result.Add(Tri(n - 1) + Tri(n - 2) + Tri(n\
    \ + 1));\n            return result;\n        }\n        result.Add(Tri(n - 1)\
    \ + Tri(n - 2));\n        return result;", "        List<long> result = new List<long>();\n\
    \        if (n == 0) return result;\n        if (n == 1) return new List<long>()\
    \ { 3 };\n        if (n % 2 == 0) {\n            result.Add(Tri(n - 1) + Tri(n\
    \ - 2) + Tri(n - 3));\n            return result;\n        }\n        result.Add(Tri(n\
    \ - 1) + Tri(n - 2) + Tri(n - 3));\n        result.Add(Tri(n - 1) + Tri(n - 2)\
    \ + Tri(n - 3));\n        result.Add(Tri(n - 1) + Tri(n - 2) + Tri(n - 3));\n\
    \        return result;", "        List<long> result = new List<long>();\n   \
    \     if (n == 0) return result;\n        if (n == 1) return new List<long> {\
    \ 3 };\n        if (n % 2 == 0) {\n            result.Add(3);\n            return\
    \ result;\n        }\n        long a = Tri(n - 1) + Tri(n - 2) + Tri(n + 1);\n\
    \        result.Add(a);\n        return result;"]
stop_tokens:
- "\n    }\n"
