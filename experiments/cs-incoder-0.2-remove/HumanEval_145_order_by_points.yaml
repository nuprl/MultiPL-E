name: HumanEval_145_order_by_points
language: cs
prompt: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\n\
  using System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass\
  \ Problem {\n    // Write a function which sorts the given list of integers\n  \
  \  // in ascending order according to the sum of their digits.\n    // Note: if\
  \ there are several items with similar sum of their digits,\n    // order them based\
  \ on their index in original list.\n    // For example:\n    public static List<long>\
  \ OrderByPoints(List<long> nums) {\n"
tests: "    }\n    public static void Main(string[] args) {\n    Debug.Assert(OrderByPoints((new\
  \ List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L}))).Equals((new\
  \ List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n\
  \    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1234L, (long)423L,\
  \ (long)463L, (long)145L, (long)2L, (long)423L, (long)423L, (long)53L, (long)6L,\
  \ (long)37L, (long)3457L, (long)3L, (long)56L, (long)0L, (long)46L}))).Equals((new\
  \ List<long>(new long[]{(long)0L, (long)2L, (long)3L, (long)6L, (long)53L, (long)423L,\
  \ (long)423L, (long)423L, (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L,\
  \ (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new List<long>())).Equals((new\
  \ List<long>())));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L,\
  \ (long)-11L, (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new\
  \ List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,\
  \ (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
  \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L,\
  \ (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,\
  \ (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
  \ (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)0L,\
  \ (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new\
  \ List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L, (long)6L,\
  \ (long)6L}))));\n    }\n\n}\n"
completions: ["        List<long> result = new List<long>();\n        long sum = 0;\n\
    \        foreach (long n in nums) {\n            sum += n;\n            result.Add(sum);\n\
    \        }\n        Array.Sort(result, (a, b) => a - b);\n        return result;",
  '        // TODO: Write your solution here', "        List<long> result = new List<long>();\n\
    \        long sum = 0;\n        foreach (long n in nums) {\n            sum +=\
    \ n;\n            result.Add(sum);\n        }\n        return result.OrderBy(x\
    \ => x).ToList();", "        // TODO: Write your code here\n        List<long>\
    \ result = new List<long>();\n        long sum = 0;\n        foreach (long num\
    \ in nums)\n        {\n            sum += num;\n            result.Add(sum);\n\
    \        }\n        return result;", "        long sum = 0;\n        List<long>\
    \ result = new List<long>();\n        foreach (long n in nums) {\n           \
    \ sum += n;\n            result.Add(sum);\n        }\n        return result;",
  "        List<long> result = new List<long>();\n        long sum = 0;\n        foreach\
    \ (long n in nums) {\n            sum += n;\n            result.Add(sum);\n  \
    \      }\n        Array.Sort(result, new Comparison<long>((x, y) => { return x\
    \ - y; }));\n        return result;", "        List<long> result = new List<long>();\n\
    \        long sum = 0;\n        foreach (long n in nums) {\n            sum +=\
    \ n;\n            result.Add(sum);\n        }\n        return result;", "    \
    \    // TODO: Write your code here\n        List<long> result = new List<long>();\n\
    \        long sum = 0;\n        foreach (long num in nums) {\n            sum\
    \ += num;\n            result.Add(num);\n        }\n        Array.Sort(result,\
    \ (a, b) => sum - b);\n        return result;", "        long sum = 0;\n     \
    \   List<long> result = new List<long>();\n        foreach (long n in nums) {\n\
    \            sum += n;\n            result.Add(sum);\n        }\n        Array.Sort(result,\
    \ (x, y) => { return x.CompareTo(y); });\n        return result;", "        //\
    \ TODO: Write your solution here\n        long sum = 0;\n        long maxSum =\
    \ 0;\n        long maxIndex = 0;\n        foreach (long i in nums)\n        {\n\
    \            sum += i;\n            if (sum > maxSum)\n            {\n       \
    \         maxSum = sum;\n                maxIndex = i;\n            }\n      \
    \  }\n        List<long> result = new List<long>();\n        foreach (long i in\
    \ nums)\n        {\n            if (i == maxIndex)\n            {\n          \
    \      result.Add(i);\n            }\n            else\n            {\n      \
    \          result.Add(maxIndex);\n            }\n        }\n        return result;",
  "        // TODO: Write your code here\n        List<long> result = new List<long>();\n\
    \        long sum = 0;\n        foreach (long n in nums)\n        {\n        \
    \    sum += n;\n            result.Add(sum);\n        }\n        return result;",
  "        List<long> result = new List<long>();\n        long sum = 0;\n        foreach\
    \ (long n in nums) {\n            sum += n;\n            result.Add(n);\n    \
    \    }\n        Array.Sort(result, (x, y) => sum - x);\n        return result;",
  "        List<long> result = new List<long>();\n        long sum = 0;\n        foreach\
    \ (long num in nums) {\n            sum += num;\n            result.Add(num);\n\
    \        }\n        Array.Sort(result, new Comparison<long>((x, y) => { return\
    \ SumDigits(x) - SumDigits(y); }));\n        return result;", "        List<long>\
    \ result = new List<long>();\n        long sum = 0;\n        foreach (long num\
    \ in nums) {\n            sum += num;\n            result.Add(sum);\n        }\n\
    \        Array.Sort(result, new Comparison<long>((x, y) => { return y - x; }));\n\
    \        return result;", "        // TODO: Write your code here\n        List<long>\
    \ result = new List<long>();\n        long sum = 0;\n        foreach (long n in\
    \ nums) {\n            sum += n;\n            result.Add(sum);\n        }\n  \
    \      return result;", "        long sum = 0;\n        List<long> result = new\
    \ List<long>();\n        foreach (long n in nums) {\n            sum += n;\n \
    \           result.Add(n);\n        }\n        Array.Sort(result, (x, y) => {\
    \ return SumDigits(x) - SumDigits(y); });\n        return result;", "        //\
    \ TODO: write your code here\n        long sum = 0;\n        List<long> result\
    \ = new List<long>();\n        foreach (long n in nums) {\n            sum +=\
    \ n;\n            result.Add(sum);\n        }\n        return result;", "    \
    \    // TODO: Write your code here\n        long sum = 0;\n        long max =\
    \ 0;\n        long min = 0;\n        foreach (long num in nums) {\n          \
    \  sum += num;\n            if (sum > max) {\n                max = sum;\n   \
    \         }\n            if (sum < min) {\n                min = sum;\n      \
    \      }\n        }\n        List<long> result = new List<long>();\n        foreach\
    \ (long num in nums) {\n            sum += num;\n            if (sum == max) {\n\
    \                result.Add(num);\n            }\n            if (sum == min)\
    \ {\n                result.Add(num);\n            }\n        }\n        return\
    \ result;", "        List<long> result = new List<long>();\n        long sum =\
    \ 0;\n        foreach (long num in nums) {\n            sum += num;\n        \
    \    result.Add(sum);\n        }\n        Array.Sort(result, new Comparer<long>()\
    \ {\n            public int Compare(long x, long y) {\n                return\
    \ x - y;\n            }\n        });\n        return result;", "        List<long>\
    \ result = new List<long>();\n        long sum = 0;\n        foreach (long n in\
    \ nums) {\n            sum += n;\n            result.Add(sum);\n        }\n  \
    \      Array.Sort(result, (x, y) => { return y - x; });\n        return result;",
  "        List<long> result = new List<long>();\n        long sum = 0;\n        foreach\
    \ (long n in nums) {\n            sum += n;\n            result.Add(n);\n    \
    \    }\n        Array.Sort(result, (x, y) => sum - x - y);\n        return result;",
  "        List<long> result = new List<long>();\n        long sum = 0;\n        foreach\
    \ (long num in nums) {\n            sum += num;\n            result.Add(num);\n\
    \        }\n        Array.Sort(result, (a, b) => sum - b);\n        return result;",
  "        List<long> result = new List<long>();\n        long sum = 0;\n        foreach\
    \ (long n in nums) {\n            sum += n;\n            result.Add(sum);\n  \
    \      }\n        return result.OrderBy(n => n).ToList();", "        List<long>\
    \ result = new List<long>();\n        long sum = 0;\n        foreach (long n in\
    \ nums) {\n            sum += n;\n            result.Add(n);\n        }\n    \
    \    Array.Sort(result, (a, b) => sum - a - b);\n        return result;", "  \
    \      List<long> result = new List<long>();\n        long sum = 0;\n        foreach\
    \ (long num in nums) {\n            sum += num;\n            result.Add(sum);\n\
    \        }\n        return result;", "        List<long> result = new List<long>();\n\
    \        long sum = 0;\n        foreach (long n in nums) {\n            sum +=\
    \ n;\n            result.Add(n);\n        }\n        Array.Sort(result, (a, b)\
    \ => sum - a - b);\n        return result;", "        List<long> result = new\
    \ List<long>();\n        long sum = 0;\n        foreach (long n in nums) {\n \
    \           sum += n;\n            result.Add(sum);\n        }\n        Array.Sort(result,\
    \ (x, y) => { return x.CompareTo(y); });\n        return result;", "        List<long>\
    \ result = new List<long>();\n        long sum = 0;\n        foreach (long n in\
    \ nums) {\n            sum += n;\n            result.Add(n);\n        }\n    \
    \    Array.Sort(result, (a, b) => sum - a - b);\n        return result;", "  \
    \      // TODO: Write your code here\n        List<long> result = new List<long>();\n\
    \        long sum = 0;\n        foreach (long n in nums)\n        {\n        \
    \    sum += n;\n            result.Add(n);\n        }\n        Array.Sort(result,\
    \ (x, y) => { return (y - x); });\n        return result;", "        List<long>\
    \ result = new List<long>();\n        long sum = 0;\n        foreach (long num\
    \ in nums) {\n            sum += num;\n            result.Add(sum);\n        }\n\
    \        return result;", "        List<long> result = new List<long>();\n   \
    \     long sum = 0;\n        foreach (long n in nums) {\n            sum += n;\n\
    \            result.Add(n);\n        }\n        Array.Sort(result, (x, y) => {\
    \ return sum - y - x; });\n        return result;", "        List<long> result\
    \ = new List<long>();\n        long sum = 0;\n        foreach (long n in nums)\
    \ {\n            sum += n;\n            result.Add(sum);\n        }\n        Array.Sort(result,\
    \ (x, y) => { return y - x; });\n        return result;", "        List<long>\
    \ result = new List<long>();\n        long sum = 0;\n        foreach (long n in\
    \ nums) {\n            sum += n;\n            result.Add(sum);\n        }\n  \
    \      Array.Sort(result, new Comparison<long>((x, y) => { return y - x; }));\n\
    \        return result;", "        List<long> result = new List<long>();\n   \
    \     long sum = 0;\n        foreach (long n in nums) {\n            sum += n;\n\
    \            result.Add(sum);\n        }\n        Array.Sort(result, (x, y) =>\
    \ { return y - x; });\n        return result;", "        List<long> result = new\
    \ List<long>();\n        long sum = 0;\n        foreach (long num in nums) {\n\
    \            sum += num;\n            result.Add(num);\n        }\n        Array.Sort(result,\
    \ (x, y) => { return SumDigits(x) - SumDigits(y); });\n        return result;",
  "        List<long> result = new List<long>();\n        long sum = 0;\n        foreach\
    \ (long num in nums) {\n            sum += num;\n            result.Add(sum);\n\
    \        }\n        Array.Sort(result, (a, b) => a - b);\n        return result;",
  "        // TODO: write your code here\n        List<long> result = new List<long>();\n\
    \        long sum = 0;\n        foreach (long num in nums) {\n            sum\
    \ += num;\n            result.Add(sum);\n        }\n        long maxSum = result.Max();\n\
    \        List<long> result2 = new List<long>();\n        foreach (long num in\
    \ nums) {\n            if (sum == maxSum) {\n                result2.Add(num);\n\
    \            }\n        }\n        return result;", "        List<long> result\
    \ = new List<long>();\n        long sum = 0;\n        foreach (long num in nums)\
    \ {\n            sum += num;\n            result.Add(sum);\n        }\n      \
    \  return result.OrderBy(x => x).ToList();", "        // TODO: Write your code\
    \ here\n        List<long> result = new List<long>();\n        long sum = 0;\n\
    \        long max = 0;\n        foreach (long num in nums) {\n            sum\
    \ += num;\n            if (sum > max) {\n                max = sum;\n        \
    \    }\n            result.Add(num);\n        }\n        List<long> result2 =\
    \ new List<long>();\n        foreach (long num in nums) {\n            if (num\
    \ == max) {\n                result2.Add(num);\n            }\n        }\n   \
    \     List<long> result3 = new List<long>();\n        foreach (long num in nums)\
    \ {\n            if (num != max) {\n                result3.Add(num);\n      \
    \      }\n        }\n        List<long> result4 = new List<long>();\n        foreach\
    \ (long num in nums) {\n            if (num != max) {\n                result4.Add(num);\n\
    \            }\n        }\n        List<long> result5 = new List<long>();\n  \
    \      foreach (long num in nums) {\n            if (num != max) {\n         \
    \       result5.Add(num);\n            }\n        }\n        List<long> result6\
    \ = new List<long>();\n        foreach (long num in nums) {\n            if (num\
    \ != max) {\n                result6.Add(num);\n            }\n        }\n   \
    \     List<long> result7 = new List<long>();\n        foreach (long num in nums)\
    \ {\n            if (num != max) {\n                result7.Add(num);\n      \
    \      }\n        }\n        List<long> result8 = new List<long>();\n        foreach\
    \ (long num in nums) {\n            if (num != max) {\n                result8.Add(num);\n\
    \            }\n        }\n        List<long> result9 = new List<long>();\n  \
    \      foreach (long num in nums) {\n            if (num != max) {\n         \
    \       result9.Add(num);\n            }\n        }\n        List<long> result10\
    \ = new List<long>();\n        foreach (long num in nums) {\n            if (num\
    \ != max) {\n                result10.Add(num);\n            }\n        }\n  \
    \      List<long> result11 = new List<long>();\n        foreach (long num in nums)\
    \ {\n            if (num != max) {\n                result11.Add(num);\n     \
    \       }\n        }\n        List<long> result12 = new List<long>();\n      \
    \  foreach (long num in nums) {\n            if (num != max) {\n             \
    \   result12.Add(num);\n            }\n        }\n        List<long> result13\
    \ = new List<long>();\n        foreach (long num in nums) {\n            if (num\
    \ != max) {\n                result13.Add(num);\n            }\n        }\n  \
    \      List<long> result14 = new List<long>();\n        foreach (long num in nums)\
    \ {\n            if (num != max) {\n                result14.Add(num);\n     \
    \       }\n", "        List<long> result = new List<long>();\n        long sum\
    \ = 0;\n        foreach (long n in nums) {\n            sum += n;\n          \
    \  result.Add(n);\n        }\n        Array.Sort(result, (a, b) => sum - a - b);\n\
    \        return result;", "        // TODO: Write your code here.\n        long\
    \ sum = 0;\n        long max = 0;\n        long min = 0;\n        foreach (long\
    \ n in nums)\n        {\n            sum += n;\n            if (sum > max)\n \
    \           {\n                max = sum;\n            }\n            if (sum\
    \ < min)\n            {\n                min = sum;\n            }\n        }\n\
    \        List<long> result = new List<long>();\n        foreach (long n in nums)\n\
    \        {\n            if (sum == max)\n            {\n                result.Add(n);\n\
    \            }\n            else if (sum == min)\n            {\n            \
    \    result.Insert(0, n);\n            }\n            else\n            {\n  \
    \              result.Insert(0, n);\n                result.Add(n);\n        \
    \    }\n        }\n        return result;", "        List<long> result = new List<long>();\n\
    \        long sum = 0;\n        foreach (long n in nums) {\n            sum +=\
    \ n;\n            result.Add(n);\n        }\n        Array.Sort(result, (x, y)\
    \ => { return SumDigits(x) - SumDigits(y); });\n        return result;", "   \
    \     // TODO: Write your code here\n        long sum = 0;\n        long max =\
    \ 0;\n        long min = 0;\n        long sumOfDigits = 0;\n        long maxOfDigits\
    \ = 0;\n        long minOfDigits = 0;\n        long maxSum = 0;\n        long\
    \ minSum = 0;\n        long maxSumOfDigits = 0;\n        long minSumOfDigits =\
    \ 0;\n        long maxSumOfDigits = 0;\n        long minSumOfDigits = 0;\n   \
    \     long maxSumOfDigits = 0;\n        long minSumOfDigits = 0;\n        long\
    \ maxSumOfDigits = 0;\n        long minSumOfDigits = 0;\n        long maxSumOfDigits\
    \ = 0;\n        long minSumOfDigits = 0;\n        long maxSumOfDigits = 0;\n \
    \       long minSumOfDigits = 0;\n        long maxSumOfDigits = 0;\n        long\
    \ minSumOfDigits = 0;\n        long maxSumOfDigits = 0;\n        long minSumOfDigits\
    \ = 0;\n        long maxSumOfDigits = 0;\n        long minSumOfDigits = 0;\n \
    \       long maxSumOfDigits = 0;\n        long minSumOfDigits = 0;\n        long\
    \ maxSumOfDigits = 0;\n        long minSumOfDigits = 0;\n        long maxSumOfDigits\
    \ = 0;\n        long minSumOfDigits = 0;\n        long maxSumOfDigits = 0;\n \
    \       long minSumOfDigits = 0;\n        long maxSumOfDigits = 0;\n        long\
    \ minSumOfDigits = 0;\n        long maxSumOfDigits = 0;\n        long minSumOfDigits\
    \ = 0;\n        long maxSumOfDigits = 0;\n        long minSumOfDigits = 0;\n \
    \       long maxSumOfDigits = 0;\n        long minSumOfDigits = 0;\n        long\
    \ maxSumOfDigits = 0;\n        long minSumOfDigits = 0;\n        long maxSumOfDigits\
    \ = 0;\n        long minSumOfDigits = 0;\n        long maxSumOfDigits = 0;\n \
    \       long minSumOfDigits = 0;\n        long maxSumOfDigits = 0;\n        long\
    \ minSumOfDigits = 0;\n        long maxSumOfDigits = 0;\n        long minSumOfDigits\
    \ = 0;\n        long maxSumOfDigits = 0;\n        long minSumOfDigits = 0;\n \
    \       long maxSumOfDigits = 0;\n        long minSumOfDigits = 0;\n        long\
    \ maxSumOfDigits = 0;\n        long minSumOfDigits = 0;\n        long maxSumOfDigits\
    \ = 0;\n        long minSumOfDigits = 0;\n        long maxSumOfDigits = 0;\n \
    \       long minSumOfDigits = 0;\n        long maxSumOfDigits = 0;\n        long\
    \ minSumOfDigits = 0;\n        long maxSumOfDigits = 0;\n        long ", "   \
    \     List<long> result = new List<long>();\n        long sum = 0;\n        foreach\
    \ (long n in nums) {\n            sum += n;\n            result.Add(sum);\n  \
    \      }\n        return result;", "        List<long> result = new List<long>();\n\
    \        long sum = 0;\n        foreach (long n in nums) {\n            sum +=\
    \ n;\n            result.Add(sum);\n        }\n        Array.Sort(result, (a,\
    \ b) => a - b);\n        return result;", "        List<long> result = new List<long>();\n\
    \        long sum = 0;\n        foreach (long n in nums) {\n            sum +=\
    \ n;\n            result.Add(n);\n        }\n        Array.Sort(result, (x, y)\
    \ => { return SumDigits(x) - SumDigits(y); });\n        return result;", "   \
    \     List<long> result = new List<long>();\n        long sum = 0;\n        foreach\
    \ (long n in nums) {\n            sum += n;\n            result.Add(sum);\n  \
    \      }\n        Array.Sort(result, (a, b) => a - b);\n        return result;",
  "        List<long> result = new List<long>();\n        long sum = 0;\n        foreach\
    \ (long n in nums) {\n            sum += n;\n            result.Add(sum);\n  \
    \      }\n        Array.Sort(result, (a, b) => { return b - a; });\n        return\
    \ result;", "        List<long> result = new List<long>();\n        long sum =\
    \ 0;\n        foreach (long n in nums) {\n            sum += n;\n            result.Add(sum);\n\
    \        }\n        Array.Sort(result, (a, b) => a - b);\n        return result;",
  "        List<long> result = new List<long>();\n        long sum = 0;\n        foreach\
    \ (long n in nums) {\n            sum += n;\n            result.Add(n);\n    \
    \    }\n        Array.Sort(result, (x, y) => { return SumOfDigits(x) - SumOfDigits(y);\
    \ });\n        return result;", "        List<long> result = new List<long>();\n\
    \        long sum = 0;\n        foreach (long num in nums) {\n            sum\
    \ += num;\n            result.Add(num);\n        }\n        Array.Sort(result,\
    \ (x, y) => { return SumDigits(x) - SumDigits(y); });\n        return result;",
  "        List<long> result = new List<long>();\n        long sum = 0;\n        foreach\
    \ (long num in nums) {\n            sum += num;\n            result.Add(sum);\n\
    \        }\n        return result;", "        List<long> result = new List<long>();\n\
    \        long sum = 0;\n        foreach (long num in nums) {\n            sum\
    \ += num;\n            result.Add(num);\n        }\n        Array.Sort(result,\
    \ (x, y) => sum - x - y);\n        return result;", "        List<long> result\
    \ = new List<long>();\n        long sum = 0;\n        foreach (long n in nums)\
    \ {\n            sum += n;\n            result.Add(n);\n        }\n        Array.Sort(result,\
    \ (a, b) => { return SumOfDigits(a) - SumOfDigits(b); });\n        return result;",
  "        long sum = 0;\n        List<long> result = new List<long>();\n        foreach\
    \ (long n in nums) {\n            sum += n;\n            result.Add(n);\n    \
    \    }\n        Array.Sort(result, (x, y) => { return sum - x + y; });\n     \
    \   return result;", "        List<long> result = new List<long>();\n        long\
    \ sum = 0;\n        foreach (long n in nums) {\n            sum += n;\n      \
    \      result.Add(sum);\n        }\n        Array.Sort(result, (a, b) => { return\
    \ a.CompareTo(b.Value); });\n        return result;", "        List<long> result\
    \ = new List<long>();\n        long sum = 0;\n        foreach (long n in nums)\
    \ {\n            sum += n;\n            result.Add(n);\n        }\n        Array.Sort(result,\
    \ (x, y) => sum - x - y);\n        return result;", "        List<long> result\
    \ = new List<long>();\n        long sum = 0;\n        foreach (long n in nums)\
    \ {\n            sum += n;\n            result.Add(n);\n        }\n        Array.Sort(result,\
    \ (x, y) => { return SumOfDigits(x) - SumOfDigits(y); });\n        return result;",
  "        // TODO: Write your code here\n        List<long> result = new List<long>();\n\
    \        long sum = 0;\n        foreach (long n in nums) {\n            sum +=\
    \ n;\n            result.Add(n);\n        }\n        Array.Sort(result, (x, y)\
    \ => { return SumDigits(x) - SumDigits(y); });\n        return result;", "   \
    \     List<long> result = new List<long>();\n        long sum = 0;\n        foreach\
    \ (long n in nums) {\n            sum += n;\n            result.Add(sum);\n  \
    \      }\n        Array.Sort(result, (x, y) => { return y - x; });\n        return\
    \ result;", "        List<long> result = new List<long>();\n        long sum =\
    \ 0;\n        foreach (long n in nums) {\n            sum += n;\n            result.Add(n);\n\
    \        }\n        Array.Sort(result, (x, y) => { return SumDigits(x) - SumDigits(y);\
    \ });\n        return result;", "        long sum = 0;\n        foreach (long\
    \ n in nums) {\n            sum += n;\n        }\n        List<long> result =\
    \ new List<long>();\n        foreach (long n in nums) {\n            if (sum ==\
    \ n) {\n                result.Add(n);\n            }\n        }\n        return\
    \ result;", "        List<long> result = new List<long>();\n        long sum =\
    \ 0;\n        foreach (long n in nums) {\n            sum += n;\n            result.Add(n);\n\
    \        }\n        Array.Sort(result, (a, b) => sum - a - b);\n        return\
    \ result;", "        long sum = 0;\n        List<long> result = new List<long>();\n\
    \        foreach (long n in nums) {\n            sum += n;\n            result.Add(sum);\n\
    \        }\n        return result;", "        List<long> result = new List<long>();\n\
    \        long sum = 0;\n        foreach (long num in nums) {\n            sum\
    \ += num;\n            result.Add(num);\n        }\n        Array.Sort(result,\
    \ (x, y) => { return SumDigits(x) - SumDigits(y); });\n        return result;",
  "        List<long> result = new List<long>();\n        long sum = 0;\n        foreach\
    \ (long n in nums) {\n            sum += n;\n            result.Add(sum);\n  \
    \      }\n        Array.Sort(result, (a, b) => { return b - a; });\n        return\
    \ result;", "        // TODO: Write your code here\n        List<long> result\
    \ = new List<long>();\n        long sum = 0;\n        long max = 0;\n        foreach\
    \ (long n in nums) {\n            sum += n;\n            if (sum > max) {\n  \
    \              max = sum;\n            }\n        }\n        foreach (long n in\
    \ nums) {\n            sum += n;\n            if (sum == max) {\n            \
    \    result.Add(n);\n            }\n        }\n        return result;", "    \
    \    List<long> result = new List<long>();\n        long sum = 0;\n        foreach\
    \ (long n in nums) {\n            sum += n;\n            result.Add(sum);\n  \
    \      }\n        Array.Sort(result, (x, y) => { return y - x; });\n        return\
    \ result;", "        List<long> result = new List<long>();\n        long sum =\
    \ 0;\n        foreach (long num in nums) {\n            sum += num;\n        \
    \    result.Add(num);\n        }\n        Array.Sort(result, (a, b) => { return\
    \ SumOfDigits(a) - SumOfDigits(b); });\n        return result;", "        long\
    \ sum = 0;\n        List<long> result = new List<long>();\n        foreach (long\
    \ n in nums) {\n            sum += n;\n            result.Add(n);\n        }\n\
    \        Array.Sort(result, (x, y) => { return SumOfDigits(x) - SumOfDigits(y);\
    \ });\n        return result;", "        // TODO: Write your solution here\n \
    \       long sum = 0;\n        List<long> result = new List<long>();\n       \
    \ foreach (long n in nums)\n        {\n            sum += n;\n            result.Add(n);\n\
    \        }\n        Array.Sort(result, (x, y) => { return sum - x + y; });\n \
    \       return result;", "        List<long> result = new List<long>();\n    \
    \    long sum = 0;\n        foreach (long n in nums) {\n            sum += n;\n\
    \            result.Add(n);\n        }\n        Array.Sort(result, (a, b) => sum\
    \ - b);\n        return result;", "        List<long> result = new List<long>();\n\
    \        long sum = 0;\n        foreach (long n in nums) {\n            sum +=\
    \ n;\n            result.Add(sum);\n        }\n        Array.Sort(result, (a,\
    \ b) => a - b);\n        return result;", "        List<long> result = new List<long>();\n\
    \        long sum = 0;\n        foreach (long num in nums) {\n            sum\
    \ += num;\n            result.Add(sum);\n        }\n        Array.Sort(result,\
    \ (a, b) => a - b);\n        return result;", "        long sum = 0;\n       \
    \ foreach (long num in nums) {\n            sum += num;\n        }\n        List<long>\
    \ result = new List<long>();\n        foreach (long num in nums) {\n         \
    \   if (sum == num) {\n                result.Add(num);\n            }\n     \
    \   }\n        return result;", "        List<long> result = new List<long>();\n\
    \        long sum = 0;\n        foreach (long n in nums) {\n            sum +=\
    \ n;\n            result.Add(sum);\n        }\n        Array.Sort(result, new\
    \ Comparison<long>((x, y) => { return y - x; }));\n        return result;", " \
    \       long sum = 0;\n        List<long> result = new List<long>();\n       \
    \ foreach (long n in nums) {\n            sum += n;\n            result.Add(n);\n\
    \        }\n        Array.Sort(result, (a, b) => sum - a - b);\n        return\
    \ result;", "        List<long> result = new List<long>();\n        long sum =\
    \ 0;\n        foreach (long n in nums) {\n            sum += n;\n            result.Add(n);\n\
    \        }\n        Array.Sort(result, (x, y) => { return SumDigits(x) - SumDigits(y);\
    \ });\n        return result;", '        // TODO: write your solution here', " \
    \       List<long> result = new List<long>();\n        long sum = 0;\n       \
    \ foreach (long n in nums) {\n            sum += n;\n            result.Add(n);\n\
    \        }\n        Array.Sort(result, (x, y) => sum - x);\n        return result;",
  "        List<long> result = new List<long>();\n        long sum = 0;\n        foreach\
    \ (long n in nums) {\n            sum += n;\n            result.Add(n);\n    \
    \    }\n        Array.Sort(result, (a, b) => sum - a - b);\n        return result;",
  "        List<long> result = new List<long>();\n        long sum = 0;\n        foreach\
    \ (long n in nums) {\n            sum += n;\n            result.Add(sum);\n  \
    \      }\n        return result;", "        List<long> result = new List<long>();\n\
    \        long sum = 0;\n        foreach (long n in nums) {\n            sum +=\
    \ n;\n            result.Add(n);\n        }\n        Array.Sort(result, (a, b)\
    \ => sum - a - b);\n        return result;", "        // TODO: Write your code\
    \ here\n        List<long> result = new List<long>();\n        long sum = 0;\n\
    \        foreach (long n in nums) {\n            sum += n;\n            result.Add(n);\n\
    \        }\n        Array.Sort(result, (x, y) => { return SumDigits(x) - SumDigits(y);\
    \ });\n        return result;", "        List<long> result = new List<long>();\n\
    \        long sum = 0;\n        foreach (long n in nums) {\n            sum +=\
    \ n;\n            result.Add(n);\n        }\n        Array.Sort(result, (x, y)\
    \ => { return SumDigits(x) - SumDigits(y); });\n        return result;", "   \
    \     List<long> result = new List<long>();\n        long sum = 0;\n        foreach\
    \ (long n in nums) {\n            sum += n;\n            result.Add(sum);\n  \
    \      }\n        Array.Sort(result, new Comparison<long>((x, y) => { return y\
    \ - x; }));\n        return result;", "        // TODO: Write your code here\n\
    \        List<long> result = new List<long>();\n        long sum = 0;\n      \
    \  long max = 0;\n        long min = 0;\n        foreach (long n in nums) {\n\
    \            sum += n;\n            if (sum > max) {\n                max = sum;\n\
    \            }\n            if (sum < min) {\n                min = sum;\n   \
    \         }\n            result.Add(n);\n        }\n        List<long> ordered\
    \ = new List<long>();\n        long sum = 0;\n        foreach (long n in result)\
    \ {\n            sum += n;\n            if (sum == max) {\n                ordered.Add(n);\n\
    \            }\n            if (sum == min) {\n                ordered.Add(n);\n\
    \            }\n        }\n        return ordered;", "        List<long> result\
    \ = new List<long>();\n        long sum = 0;\n        foreach (long n in nums)\
    \ {\n            sum += n;\n            result.Add(n);\n        }\n        Array.Sort(result,\
    \ (a, b) => { return SumDigits(a) - SumDigits(b); });\n        return result;",
  "        List<long> result = new List<long>();\n        long sum = 0;\n        foreach\
    \ (long n in nums) {\n            sum += n;\n            result.Add(n);\n    \
    \    }\n        Array.Sort(result, (a, b) => { return SumOfDigits(a) - SumOfDigits(b);\
    \ });\n        return result;", "        long sum = 0;\n        List<long> result\
    \ = new List<long>();\n        foreach (long num in nums) {\n            sum +=\
    \ num;\n            result.Add(sum);\n        }\n        return result;", "  \
    \      List<long> result = new List<long>();\n        long sum = 0;\n        foreach\
    \ (long num in nums) {\n            sum += num;\n            result.Add(num);\n\
    \        }\n        Array.Sort(result, (x, y) => sum - x);\n        return result;",
  "        long sum = 0;\n        foreach (long n in nums) {\n            sum += n;\n\
    \        }\n        List<long> result = new List<long>();\n        foreach (long\
    \ n in nums) {\n            if (sum == n) {\n                result.Add(n);\n\
    \            }\n        }\n        return result;", "        List<long> result\
    \ = new List<long>();\n        long sum = 0;\n        foreach (long num in nums)\
    \ {\n            sum += num;\n            result.Add(sum);\n        }\n      \
    \  Array.Sort(result, (a, b) => { return b - a; });\n        return result;",
  "        List<long> result = new List<long>();\n        long sum = 0;\n        foreach\
    \ (long num in nums) {\n            sum += num;\n            result.Add(sum);\n\
    \        }\n        Array.Sort(result, new Comparer<long>() {\n            public\
    \ int Compare(long x, long y) {\n                return x - y;\n            }\n\
    \        });\n        return result;", "        List<long> result = new List<long>();\n\
    \        long sum = 0;\n        foreach (long n in nums) {\n            sum +=\
    \ n;\n            result.Add(sum);\n        }\n        Array.Sort(result, (a,\
    \ b) => a - b);\n        return result;", "        // TODO: Write your code here\n\
    \        List<long> result = new List<long>();\n        long sum = 0;\n      \
    \  foreach (long n in nums) {\n            sum += n;\n            result.Add(sum);\n\
    \        }\n        Array.Sort(result, (x, y) => { return x - y; });\n       \
    \ return result;", "        List<long> result = new List<long>();\n        long\
    \ sum = 0;\n        foreach (long n in nums) {\n            sum += n;\n      \
    \      result.Add(sum);\n        }\n        return result.OrderBy(n => n).ToList();",
  "        List<long> result = new List<long>();\n        long sum = 0;\n        foreach\
    \ (long num in nums) {\n            sum += num;\n            result.Add(sum);\n\
    \        }\n        Array.Sort(result, new Comparison<long>((x, y) => { return\
    \ y - x; }));\n        return result;", "        List<long> result = new List<long>();\n\
    \        long sum = 0;\n        foreach (long n in nums) {\n            sum +=\
    \ n;\n            result.Add(n);\n        }\n        Array.Sort(result, (x, y)\
    \ => { return SumDigits(x) - SumDigits(y); });\n        return result;", "   \
    \     List<long> result = new List<long>();\n        long sum = 0;\n        foreach\
    \ (long num in nums) {\n            sum += num;\n            result.Add(sum);\n\
    \        }\n        return result.OrderBy(x => x).ToList();", "        List<long>\
    \ result = new List<long>();\n        long sum = 0;\n        foreach (long n in\
    \ nums) {\n            sum += n;\n            result.Add(n);\n        }\n    \
    \    Array.Sort(result, (x, y) => { return SumDigits(x) - SumDigits(y); });\n\
    \        return result;", "        List<long> result = new List<long>();\n   \
    \     long sum = 0;\n        foreach (long n in nums) {\n            sum += n;\n\
    \            result.Add(n);\n        }\n        Array.Sort(result, (x, y) => {\
    \ return SumDigits(x) - SumDigits(y); });\n        return result;", "        List<long>\
    \ result = new List<long>();\n        long sum = 0;\n        foreach (long n in\
    \ nums) {\n            sum += n;\n            result.Add(n);\n        }\n    \
    \    Array.Sort(result, (x, y) => { return SumDigits(x) - SumDigits(y); });\n\
    \        return result;", "        long sum = 0;\n        List<long> result =\
    \ new List<long>();\n        foreach (long n in nums) {\n            sum += n;\n\
    \            result.Add(n);\n        }\n        Array.Sort(result, (x, y) => {\
    \ return SumDigits(x) - SumDigits(y); });\n        return result;", "        List<long>\
    \ result = new List<long>();\n        long sum = 0;\n        foreach (long num\
    \ in nums) {\n            sum += num;\n            result.Add(num);\n        }\n\
    \        Array.Sort(result, (x, y) => { return SumDigits(x) - SumDigits(y); });\n\
    \        return result;", "        List<long> result = new List<long>();\n   \
    \     long sum = 0;\n        foreach (long num in nums) {\n            sum +=\
    \ num;\n            result.Add(sum);\n        }\n        Array.Sort(result, (a,\
    \ b) => a - b);\n        return result;", "        List<long> result = new List<long>();\n\
    \        long sum = 0;\n        foreach (long n in nums) {\n            sum +=\
    \ n;\n            result.Add(sum);\n        }\n        Array.Sort(result, new\
    \ Comparison<long>((x, y) => { return y - x; }));\n        return result;", " \
    \       List<long> result = new List<long>();\n        long sum = 0;\n       \
    \ foreach (long num in nums) {\n            sum += num;\n            result.Add(sum);\n\
    \        }\n        Array.Sort(result, new Comparison<long>((x, y) => { return\
    \ x - y; }));\n        return result;", "        // Your code here\n        long\
    \ sum = 0;\n        List<long> result = new List<long>();\n        foreach (long\
    \ n in nums) {\n            sum += n;\n            result.Add(n);\n        }\n\
    \        Array.Sort(result, (x, y) => { return sum - x + y; });\n        return\
    \ result;", "        long sum = 0;\n        List<long> result = new List<long>();\n\
    \        foreach (long n in nums) {\n            sum += n;\n            result.Add(n);\n\
    \        }\n        Array.Sort(result, (a, b) => a - b);\n        return result;",
  "        List<long> result = new List<long>();\n        long sum = 0;\n        foreach\
    \ (long n in nums) {\n            sum += n;\n            result.Add(n);\n    \
    \    }\n        Array.Sort(result, (x, y) => sum - x - y);\n        return result;",
  "        List<long> result = new List<long>();\n        long sum = 0;\n        foreach\
    \ (long num in nums) {\n            sum += num;\n            result.Add(num);\n\
    \        }\n        Array.Sort(result, (a, b) => sum - b);\n        return result;",
  "        List<long> result = new List<long>();\n        long sum = 0;\n        foreach\
    \ (long n in nums) {\n            sum += n;\n            result.Add(n);\n    \
    \    }\n        Array.Sort(result, (x, y) => { return SumDigits(x) - SumDigits(y);\
    \ });\n        return result;", "        List<long> result = new List<long>();\n\
    \        long sum = 0;\n        foreach (long n in nums) {\n            sum +=\
    \ n;\n            result.Add(n);\n        }\n        Array.Sort(result, (x, y)\
    \ => { return SumDigits(x) - SumDigits(y); });\n        return result;", "   \
    \     List<long> result = new List<long>();\n        long sum = 0;\n        foreach\
    \ (long num in nums) {\n            sum += num;\n            result.Add(sum);\n\
    \        }\n        Array.Sort(result, (x, y) => { return y - x; });\n       \
    \ return result;", "        List<long> result = new List<long>();\n        long\
    \ sum = 0;\n        foreach (long n in nums) {\n            sum += n;\n      \
    \      result.Add(n);\n        }\n        Array.Sort(result, (a, b) => sum - a\
    \ - b);\n        return result;", "        List<long> result = new List<long>();\n\
    \        long sum = 0;\n        foreach (long n in nums) {\n            sum +=\
    \ n;\n            result.Add(sum);\n        }\n        Array.Sort(result, (a,\
    \ b) => { return b - a; });\n        return result;", "        List<long> result\
    \ = new List<long>();\n        long sum = 0;\n        foreach (long n in nums)\
    \ {\n            sum += n;\n            result.Add(n);\n        }\n        Array.Sort(result,\
    \ (a, b) => sum - a - b);\n        return result;", "        List<long> result\
    \ = new List<long>();\n        long sum = 0;\n        foreach (long n in nums)\
    \ {\n            sum += n;\n            result.Add(n);\n        }\n        Array.Sort(result,\
    \ (x, y) => { return sum - x - y; });\n        return result;", "        List<long>\
    \ result = new List<long>();\n        long sum = 0;\n        foreach (long n in\
    \ nums) {\n            sum += n;\n            result.Add(sum);\n        }\n  \
    \      Array.Sort(result, new Comparison<long>((x, y) => { return x - y; }));\n\
    \        return result;", "        List<long> result = new List<long>();\n   \
    \     long sum = 0;\n        foreach (long n in nums) {\n            sum += n;\n\
    \            result.Add(n);\n        }\n        Array.Sort(result, (x, y) => sum\
    \ - x);\n        return result;", "        List<long> result = new List<long>();\n\
    \        long sum = 0;\n        foreach (long n in nums) {\n            sum +=\
    \ n;\n            result.Add(sum);\n        }\n        Array.Sort(result, (x,\
    \ y) => { return y - x; });\n        return result;", "        List<long> result\
    \ = new List<long>();\n        long sum = 0;\n        foreach (long n in nums)\
    \ {\n            sum += n;\n            result.Add(sum);\n        }\n        return\
    \ result;", "        List<long> result = new List<long>();\n        long sum =\
    \ 0;\n        foreach (long n in nums) {\n            sum += n;\n            result.Add(n);\n\
    \        }\n        Array.Sort(result, (x, y) => { return SumOfDigits(x) - SumOfDigits(y);\
    \ });\n        return result;", "        // TODO: Write your code here\n     \
    \   List<long> result = new List<long>();\n        long sum = 0;\n        foreach\
    \ (long num in nums) {\n            sum += num;\n            result.Add(num);\n\
    \        }\n        Array.Sort(result, delegate(long x, long y) { return (x -\
    \ y); });\n        return result;", "        // TODO: Write your code here\n \
    \       long sum = 0;\n        List<long> result = new List<long>();\n       \
    \ foreach (long n in nums)\n        {\n            sum += n;\n            result.Add(sum);\n\
    \        }\n        return result;", "        // TODO: Write your code here\n\
    \        List<long> result = new List<long>();\n        long sum = 0;\n      \
    \  long max = 0;\n        foreach (long num in nums) {\n            sum += num;\n\
    \            if (sum > max) {\n                max = sum;\n            }\n   \
    \         result.Add(num);\n        }\n        List<long> result = new List<long>();\n\
    \        long sum = 0;\n        long max = 0;\n        foreach (long num in nums)\
    \ {\n            sum += num;\n            if (sum > max) {\n                max\
    \ = sum;\n            }\n            result.Add(num);\n        }\n        return\
    \ result;", "        // TODO: Write your code here.\n        long sum = 0;\n \
    \       List<long> result = new List<long>();\n        foreach (long num in nums)\
    \ {\n            sum += num;\n            result.Add(num);\n        }\n      \
    \  Array.Sort(result, delegate(long x, long y) { return (sum - x) * (sum - y);\
    \ });\n        return result;", "        List<long> result = new List<long>();\n\
    \        long sum = 0;\n        foreach (long num in nums) {\n            sum\
    \ += num;\n            result.Add(sum);\n        }\n        Array.Sort(result,\
    \ (x, y) => { return y - x; });\n        return result;", "        // TODO: Write\
    \ your code here\n        long sum = 0;\n        List<long> result = new List<long>();\n\
    \        foreach (long n in nums) {\n            sum += n;\n            result.Add(n);\n\
    \        }\n        Array.Sort(result, (x, y) => { return sum - y; });\n     \
    \   return result;", "        long sum = 0;\n        List<long> result = new List<long>();\n\
    \        foreach (long n in nums) {\n            sum += n;\n            result.Add(sum);\n\
    \        }\n        Array.Sort(result, new Comparer<long>() {\n            public\
    \ int Compare(long x, long y) {\n                return x - y;\n            }\n\
    \        });\n        return result;", "        List<long> result = new List<long>();\n\
    \        long sum = 0;\n        foreach (long n in nums) {\n            sum +=\
    \ n;\n            result.Add(n);\n        }\n        Array.Sort(result, (a, b)\
    \ => { return SumOfDigits(a) - SumOfDigits(b); });\n        return result;", " \
    \       List<long> result = new List<long>();\n        long sum = 0;\n       \
    \ foreach (long n in nums) {\n            sum += n;\n            result.Add(n);\n\
    \        }\n        Array.Sort(result, (x, y) => { return SumDigits(x) - SumDigits(y);\
    \ });\n        return result;", "        List<long> result = new List<long>();\n\
    \        long sum = 0;\n        foreach (long num in nums) {\n            sum\
    \ += num;\n            result.Add(num);\n        }\n        Array.Sort(result,\
    \ (a, b) => a.CompareTo(b));\n        return result;", "        List<long> result\
    \ = new List<long>();\n        long sum = 0;\n        foreach (long n in nums)\
    \ {\n            sum += n;\n            result.Add(n);\n        }\n        Array.Sort(result,\
    \ (a, b) => sum - a - b);\n        return result;", "        // TODO: Write your\
    \ code here\n        List<long> result = new List<long>();\n        long sum =\
    \ 0;\n        foreach (long n in nums)\n        {\n            sum += n;\n   \
    \         result.Add(n);\n        }\n        Array.Sort(result, (x, y) => { return\
    \ SumDigits(x) - SumDigits(y); });\n        return result;", "        // TODO:\
    \ Write your code here\n        List<long> result = new List<long>();\n      \
    \  long sum = 0;\n        foreach (long num in nums) {\n            sum += num;\n\
    \            result.Add(sum);\n        }\n        Array.Sort(result);\n      \
    \  return result;", "        List<long> result = new List<long>();\n        long\
    \ sum = 0;\n        foreach (long n in nums) {\n            sum += n;\n      \
    \      result.Add(n);\n        }\n        Array.Sort(result, (a, b) => sum - a\
    \ - b);\n        return result;", "        // TODO: Write your code here\n   \
    \     List<long> result = new List<long>();\n        long sum = 0;\n        long\
    \ max = 0;\n        long min = 0;\n        foreach (long n in nums) {\n      \
    \      sum += n;\n            if (sum > max) {\n                max = sum;\n \
    \           }\n            if (sum < min) {\n                min = sum;\n    \
    \        }\n            result.Add(n);\n        }\n        List<long> sorted =\
    \ new List<long>();\n        foreach (long n in result) {\n            sorted.Add(n);\n\
    \        }\n        sorted.Sort();\n        foreach (long n in sorted) {\n   \
    \         sorted.Remove(n);\n        }\n        foreach (long n in sorted) {\n\
    \            result.Add(n);\n        }\n        return result;", "        List<long>\
    \ result = new List<long>();\n        long sum = 0;\n        foreach (long n in\
    \ nums) {\n            sum += n;\n            result.Add(n);\n        }\n    \
    \    Array.Sort(result, (a, b) => sum - a - b);\n        return result;", "  \
    \      long sum = 0;\n        List<long> result = new List<long>();\n        foreach\
    \ (long num in nums) {\n            sum += num;\n            result.Add(sum);\n\
    \        }\n        return result;", "        // TODO: Write your code here\n\
    \        List<long> result = new List<long>();\n        long sum = 0;\n      \
    \  foreach (long n in nums) {\n            sum += n;\n            result.Add(n);\n\
    \        }\n        Array.Sort(result, (x, y) => { return SumDigits(x) - SumDigits(y);\
    \ });\n        return result;", "        long sum = 0;\n        List<long> result\
    \ = new List<long>();\n        foreach (long n in nums) {\n            sum +=\
    \ n;\n            result.Add(n);\n        }\n        Array.Sort(result, (x, y)\
    \ => { return SumDigits(x) - SumDigits(y); });\n        return result;", "   \
    \     List<long> result = new List<long>();\n        long sum = 0;\n        foreach\
    \ (long n in nums) {\n            sum += n;\n            result.Add(sum);\n  \
    \      }\n        Array.Sort(result, (a, b) => a - b);\n        return result;",
  "        List<long> result = new List<long>();\n        long sum = 0;\n        foreach\
    \ (long n in nums) {\n            sum += n;\n            result.Add(n);\n    \
    \    }\n        Array.Sort(result, (a, b) => sum - a - b);\n        return result;",
  "        List<long> result = new List<long>();\n        long sum = 0;\n        foreach\
    \ (long n in nums) {\n            sum += n;\n            result.Add(n);\n    \
    \    }\n        Array.Sort(result, (x, y) => { return SumDigits(x) - SumDigits(y);\
    \ });\n        return result;", "        List<long> result = new List<long>();\n\
    \        long sum = 0;\n        foreach (long n in nums) {\n            sum +=\
    \ n;\n            result.Add(n);\n        }\n        Array.Sort(result, (a, b)\
    \ => sum - a - b);\n        return result;", "        List<long> result = new\
    \ List<long>();\n        long sum = 0;\n        foreach (long num in nums) {\n\
    \            sum += num;\n            result.Add(sum);\n        }\n        Array.Sort(result,\
    \ (x, y) => { return y - x; });\n        return result;", "        long sum =\
    \ 0;\n        foreach (long n in nums) {\n            sum += n;\n        }\n \
    \       List<long> result = new List<long>();\n        foreach (long n in nums)\
    \ {\n            if (sum == n) {\n                result.Add(n);\n           \
    \ }\n        }\n        return result;", "        // TODO: Write your code here\n\
    \        long sum = 0;\n        long max = 0;\n        foreach (long n in nums)\
    \ {\n            sum += n;\n            if (sum > max) {\n                max\
    \ = sum;\n            }\n        }\n        List<long> result = new List<long>();\n\
    \        foreach (long n in nums) {\n            if (sum - n == max) {\n     \
    \           result.Add(n);\n            }\n        }\n        return result;",
  "        List<long> result = new List<long>();\n        long sum = 0;\n        foreach\
    \ (long num in nums) {\n            sum += num;\n            result.Add(num);\n\
    \        }\n        Array.Sort(result, (x, y) => { return SumOfDigits(x) - SumOfDigits(y);\
    \ });\n        return result;", "        List<long> result = new List<long>();\n\
    \        long sum = 0;\n        foreach (long n in nums) {\n            sum +=\
    \ n;\n            result.Add(n);\n        }\n        Array.Sort(result, (a, b)\
    \ => { return SumOfDigits(a) - SumOfDigits(b); });\n        return result;", " \
    \       // TODO: Write your code here\n        long sum = 0;\n        foreach\
    \ (long n in nums)\n        {\n            sum += n;\n        }\n        List<long>\
    \ result = new List<long>();\n        foreach (long n in nums)\n        {\n  \
    \          if (sum == n)\n            {\n                result.Add(n);\n    \
    \        }\n            else\n            {\n                long temp = n;\n\
    \                while (sum > n)\n                {\n                    sum -=\
    \ temp;\n                    temp = sum;\n                }\n                result.Add(temp);\n\
    \            }\n        }\n        return result;", "        long sum = 0;\n \
    \       List<long> result = new List<long>();\n        foreach (long n in nums)\
    \ {\n            sum += n;\n            result.Add(n);\n        }\n        Array.Sort(result,\
    \ (a, b) => sum - a - b);\n        return result;", "        List<long> result\
    \ = new List<long>();\n        long sum = 0;\n        foreach (long n in nums)\
    \ {\n            sum += n;\n            result.Add(n);\n        }\n        Array.Sort(result,\
    \ (x, y) => { return SumDigits(x) - SumDigits(y); });\n        return result;",
  "        List<long> result = new List<long>();\n        long sum = 0;\n        foreach\
    \ (long n in nums) {\n            sum += n;\n            result.Add(n);\n    \
    \    }\n        Array.Sort(result, (a, b) => sum - a - b);\n        return result;",
  "        // TODO: Write your code here\n        long sum = 0;\n        foreach (long\
    \ n in nums)\n        {\n            sum += n;\n        }\n        List<long>\
    \ result = new List<long>();\n        foreach (long n in nums)\n        {\n  \
    \          if (sum == n)\n            {\n                result.Add(n);\n    \
    \        }\n            else\n            {\n                long temp = n;\n\
    \                while (sum > n)\n                {\n                    temp\
    \ = temp * 10;\n                    sum -= n;\n                }\n           \
    \     result.Add(temp);\n            }\n        }\n        return result;", " \
    \       List<long> result = new List<long>();\n        long sum = 0;\n       \
    \ foreach (long num in nums) {\n            sum += num;\n            result.Add(num);\n\
    \        }\n        Array.Sort(result, (a, b) => sum - a - b);\n        return\
    \ result;", "        List<long> result = new List<long>();\n        long sum =\
    \ 0;\n        foreach (long n in nums) {\n            sum += n;\n            result.Add(sum);\n\
    \        }\n        Array.Sort(result, (x, y) => { return y - x; });\n       \
    \ return result;", "        // TODO: Write your code here\n        long sum =\
    \ 0;\n        List<long> result = new List<long>();\n        foreach (long num\
    \ in nums)\n        {\n            sum += num;\n            result.Add(num);\n\
    \        }\n        Array.Sort(result, new Comparison<long>((x, y) => { return\
    \ SumOfDigits(x) - SumOfDigits(y); }));\n        return result;", "        //\
    \ Your code goes here\n        long sum = 0;\n        long max = 0;\n        long\
    \ min = 0;\n        foreach (long num in nums) {\n            sum += num;\n  \
    \          if (sum > max) {\n                max = sum;\n            }\n     \
    \       if (sum < min) {\n                min = sum;\n            }\n        }\n\
    \        List<long> result = new List<long>();\n        foreach (long num in nums)\
    \ {\n            if (sum == num) {\n                result.Add(num);\n       \
    \     }\n        }\n        foreach (long num in nums) {\n            if (sum\
    \ - num == min) {\n                result.Insert(0, num);\n            }\n   \
    \     }\n        foreach (long num in nums) {\n            if (sum - num == max)\
    \ {\n                result.Add(num);\n            }\n        }\n        return\
    \ result;", "        List<long> result = new List<long>();\n        long sum =\
    \ 0;\n        foreach (long n in nums) {\n            sum += n;\n            result.Add(n);\n\
    \        }\n        Array.Sort(result, (x, y) => sum - x - y);\n        return\
    \ result;", "        List<long> result = new List<long>();\n        long sum =\
    \ 0;\n        foreach (long num in nums) {\n            sum += num;\n        \
    \    result.Add(num);\n        }\n        Array.Sort(result, (a, b) => sum - a\
    \ - b);\n        return result;", "        List<long> result = new List<long>();\n\
    \        long sum = 0;\n        foreach (long n in nums) {\n            sum +=\
    \ n;\n            result.Add(n);\n        }\n        Array.Sort(result, (x, y)\
    \ => { return SumDigits(x) - SumDigits(y); });\n        return result;", "   \
    \     List<long> result = new List<long>();\n        long sum = 0;\n        foreach\
    \ (long n in nums) {\n            sum += n;\n            result.Add(n);\n    \
    \    }\n        Array.Sort(result, (x, y) => { return SumDigits(x) - SumDigits(y);\
    \ });\n        return result;", "        // TODO: Write your code here\n     \
    \   List<long> result = new List<long>();\n        long sum = 0;\n        foreach\
    \ (long num in nums) {\n            sum += num;\n            result.Add(sum);\n\
    \        }\n        Array.Sort(result);\n        return result;", "        List<long>\
    \ result = new List<long>();\n        long sum = 0;\n        foreach (long n in\
    \ nums) {\n            sum += n;\n            result.Add(n);\n        }\n    \
    \    Array.Sort(result, (x, y) => sum - x - y);\n        return result;", "  \
    \      List<long> result = new List<long>();\n        long sum = 0;\n        foreach\
    \ (long num in nums) {\n            sum += num;\n            result.Add(sum);\n\
    \        }\n        return result;", "        long sum = 0;\n        List<long>\
    \ result = new List<long>();\n        foreach (long n in nums) {\n           \
    \ sum += n;\n            result.Add(n);\n        }\n        Array.Sort(result,\
    \ (x, y) => sum - x);\n        return result;", "        List<long> result = new\
    \ List<long>();\n        long sum = 0;\n        foreach (long n in nums) {\n \
    \           sum += n;\n            result.Add(n);\n        }\n        Array.Sort(result,\
    \ (a, b) => sum - a - b);\n        return result;", "        List<long> result\
    \ = new List<long>();\n        long sum = 0;\n        foreach (long n in nums)\
    \ {\n            sum += n;\n            result.Add(n);\n        }\n        Array.Sort(result,\
    \ (x, y) => { return SumDigits(x) - SumDigits(y); });\n        return result;",
  "        // TODO: Write your code here\n        List<long> result = new List<long>();\n\
    \        long sum = 0;\n        foreach (long num in nums)\n        {\n      \
    \      sum += num;\n            result.Add(sum);\n        }\n        return result;",
  "        List<long> result = new List<long>();\n        long sum = 0;\n        foreach\
    \ (long n in nums) {\n            sum += n;\n            result.Add(sum);\n  \
    \      }\n        return result;", "        List<long> result = new List<long>();\n\
    \        long sum = 0;\n        foreach (long n in nums) {\n            sum +=\
    \ n;\n            result.Add(sum);\n        }\n        return result;", "    \
    \    List<long> result = new List<long>();\n        long sum = 0;\n        foreach\
    \ (long n in nums) {\n            sum += n;\n            result.Add(n);\n    \
    \    }\n        Array.Sort(result, (x, y) => { return SumDigits(x) - SumDigits(y);\
    \ });\n        return result;", "        List<long> result = new List<long>();\n\
    \        long sum = 0;\n        foreach (long n in nums) {\n            sum +=\
    \ n;\n            result.Add(sum);\n        }\n        Array.Sort(result, (a,\
    \ b) => { return a.CompareTo(b.Value); });\n        return result;", "       \
    \ long sum = 0;\n        List<long> result = new List<long>();\n        foreach\
    \ (long n in nums) {\n            sum += n;\n            result.Add(n);\n    \
    \    }\n        Array.Sort(result, (a, b) => { return SumOfDigits(a) - SumOfDigits(b);\
    \ });\n        return result;", "        // TODO: Write your code here\n     \
    \   long sum = 0;\n        long max = 0;\n        long min = 0;\n        long\
    \ temp = 0;\n        List<long> result = new List<long>();\n        foreach (long\
    \ num in nums) {\n            sum += num;\n            if (sum > max) {\n    \
    \            max = sum;\n            }\n            if (sum < min) {\n       \
    \         min = sum;\n            }\n        }\n        foreach (long num in nums)\
    \ {\n            temp = num;\n            while (temp > 0) {\n               \
    \ temp = temp / 10;\n                sum += temp;\n            }\n           \
    \ if (sum == max) {\n                result.Add(num);\n            }\n       \
    \     if (sum == min) {\n                result.Add(num);\n            }\n   \
    \     }\n        return result;", "        List<long> result = new List<long>();\n\
    \        long sum = 0;\n        foreach (long n in nums) {\n            sum +=\
    \ n;\n            result.Add(sum);\n        }\n        Array.Sort(result, (x,\
    \ y) => { return y - x; });\n        return result;", "        List<long> result\
    \ = new List<long>();\n        long sum = 0;\n        foreach (long n in nums)\
    \ {\n            sum += n;\n            result.Add(sum);\n        }\n        Array.Sort(result,\
    \ new Comparison<long>((x, y) => { return x.CompareTo(y); }));\n        return\
    \ result;", "        List<long> result = new List<long>();\n        long sum =\
    \ 0;\n        foreach (long n in nums) {\n            sum += n;\n            result.Add(sum);\n\
    \        }\n        Array.Sort(result, (a, b) => { return a.CompareTo(b); });\n\
    \        return result;", "        long sum = 0;\n        List<long> result =\
    \ new List<long>();\n        foreach (long n in nums) {\n            sum += n;\n\
    \            result.Add(n);\n        }\n        Array.Sort(result, (a, b) => {\
    \ return SumOfDigits(a) - SumOfDigits(b); });\n        return result;", "    \
    \    List<long> result = new List<long>();\n        long sum = 0;\n        foreach\
    \ (long n in nums) {\n            sum += n;\n            result.Add(sum);\n  \
    \      }\n        Array.Sort(result, (a, b) => a - b);\n        return result;",
  "        List<long> result = new List<long>();\n        long sum = 0;\n        foreach\
    \ (long n in nums) {\n            sum += n;\n            result.Add(n);\n    \
    \    }\n        Array.Sort(result, (x, y) => { return SumDigits(x) - SumDigits(y);\
    \ });\n        return result;", "        long sum = 0;\n        List<long> result\
    \ = new List<long>();\n        foreach (long n in nums) {\n            sum +=\
    \ n;\n            result.Add(n);\n        }\n        Array.Sort(result, (a, b)\
    \ => sum - a - b);\n        return result;", "        // TODO: Write your code\
    \ here\n        List<long> result = new List<long>();\n        long sum = 0;\n\
    \        foreach (long num in nums) {\n            sum += num;\n            result.Add(sum);\n\
    \        }\n        return result;", "        List<long> result = new List<long>();\n\
    \        long sum = 0;\n        foreach (long n in nums) {\n            sum +=\
    \ n;\n            result.Add(sum);\n        }\n        Array.Sort(result, (x,\
    \ y) => { return y - x; });\n        return result;", "        long sum = 0;\n\
    \        List<long> result = new List<long>();\n        foreach (long n in nums)\
    \ {\n            sum += n;\n            result.Add(sum);\n        }\n        Array.Sort(result,\
    \ new Comparison<long>((x, y) => { return x - y; }));\n        return result;",
  "        // TODO: Write your code here\n        long sum = 0;\n        long max\
    \ = 0;\n        long min = 0;\n        long sum2 = 0;\n        long max2 = 0;\n\
    \        long min2 = 0;\n        foreach (long n in nums) {\n            sum +=\
    \ n;\n            if (sum > max) {\n                max = sum;\n            }\n\
    \            if (sum < min) {\n                min = sum;\n            }\n   \
    \         sum2 += n;\n            if (sum2 > max2) {\n                max2 = sum2;\n\
    \            }\n            if (sum2 < min2) {\n                min2 = sum2;\n\
    \            }\n        }\n        List<long> result = new List<long>();\n   \
    \     foreach (long n in nums) {\n            long sum = 0;\n            long\
    \ sum2 = 0;\n            long max = 0;\n            long min = 0;\n          \
    \  foreach (long n in nums) {\n                sum += n;\n                if (sum\
    \ > max) {\n                    max = sum;\n                }\n              \
    \  if (sum < min) {\n                    min = sum;\n                }\n     \
    \           sum2 += n;\n                if (sum2 > max2) {\n                 \
    \   max2 = sum2;\n                }\n                if (sum2 < min2) {\n    \
    \                min2 = sum2;\n                }\n            }\n            if\
    \ (sum == sum2) {\n                result.Add(n);\n            }\n        }\n\
    \        return result;", "        List<long> result = new List<long>();\n   \
    \     long sum = 0;\n        foreach (long num in nums) {\n            sum +=\
    \ num;\n            result.Add(sum);\n        }\n        Array.Sort(result, (a,\
    \ b) => a - b);\n        return result;", "        List<long> result = new List<long>();\n\
    \        long sum = 0;\n        foreach (long n in nums) {\n            sum +=\
    \ n;\n            result.Add(n);\n        }\n        Array.Sort(result, (x, y)\
    \ => { return SumDigits(x) - SumDigits(y); });\n        return result;", "   \
    \     List<long> result = new List<long>();\n        long sum = 0;\n        foreach\
    \ (long num in nums) {\n            sum += num;\n            result.Add(sum);\n\
    \        }\n        Array.Sort(result, new Comparison<long>((x, y) => { return\
    \ y - x; }));\n        return result;", "        long sum = 0;\n        List<long>\
    \ result = new List<long>();\n        foreach (long n in nums) {\n           \
    \ sum += n;\n            result.Add(n);\n        }\n        Array.Sort(result,\
    \ (a, b) => sum - b);\n        return result;", "        long sum = 0;\n     \
    \   List<long> result = new List<long>();\n        foreach (long n in nums) {\n\
    \            sum += n;\n            result.Add(n);\n        }\n        Array.Sort(result,\
    \ (x, y) => { return sum - x - y; });\n        return result;", "        // TODO:\
    \ Write your code here\n        List<long> result = new List<long>();\n      \
    \  long sum = 0;\n        foreach (long n in nums) {\n            sum += n;\n\
    \            result.Add(n);\n        }\n        Array.Sort(result, (a, b) => sum\
    \ - a - b);\n        return result;", "        List<long> result = new List<long>();\n\
    \        long sum = 0;\n        foreach (long num in nums) {\n            sum\
    \ += num;\n            result.Add(num);\n        }\n        Array.Sort(result,\
    \ (a, b) => sum - b);\n        return result;", "        List<long> result = new\
    \ List<long>();\n        long sum = 0;\n        foreach (long n in nums) {\n \
    \           sum += n;\n            result.Add(n);\n        }\n        Array.Sort(result,\
    \ (a, b) => { return SumDigits(a) - SumDigits(b); });\n        return result;",
  "        List<long> result = new List<long>();\n        long sum = 0;\n        foreach\
    \ (long n in nums) {\n            sum += n;\n            result.Add(sum);\n  \
    \      }\n        Array.Sort(result, (a, b) => { return a.CompareTo(b); });\n\
    \        return result;", "        // TODO: write your code here\n        List<long>\
    \ result = new List<long>();\n        long sum = 0;\n        foreach (long num\
    \ in nums) {\n            sum += num;\n            result.Add(sum);\n        }\n\
    \        Array.Sort(result);\n        return result;", "        List<long> result\
    \ = new List<long>();\n        long sum = 0;\n        foreach (long n in nums)\
    \ {\n            sum += n;\n            result.Add(n);\n        }\n        Array.Sort(result,\
    \ (a, b) => sum - a - b);\n        return result;"]
stop_tokens:
- "\n    }\n"
