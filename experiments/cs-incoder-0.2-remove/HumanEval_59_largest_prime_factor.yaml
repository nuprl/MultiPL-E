name: HumanEval_59_largest_prime_factor
language: cs
prompt: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\n\
  using System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass\
  \ Problem {\n    // Return the largest prime factor of n. Assume n > 1 and is not\
  \ a prime.\n    public static long LargestPrimeFactor(long n) {\n"
tests: "    }\n    public static void Main(string[] args) {\n    Debug.Assert(LargestPrimeFactor((15L))\
  \ == (5L));\n    Debug.Assert(LargestPrimeFactor((27L)) == (3L));\n    Debug.Assert(LargestPrimeFactor((63L))\
  \ == (7L));\n    Debug.Assert(LargestPrimeFactor((330L)) == (11L));\n    Debug.Assert(LargestPrimeFactor((13195L))\
  \ == (29L));\n    }\n\n}\n"
completions: ["        long maxFactor = 1;\n        long currentFactor = 2;\n    \
    \    while (currentFactor <= n) {\n            if (n % currentFactor == 0) {\n\
    \                maxFactor = currentFactor;\n            }\n            currentFactor++;\n\
    \        }\n        return maxFactor;", "        long maxFactor = 1;\n       \
    \ long factor = 2;\n        while (factor < n) {\n            if (n % factor ==\
    \ 0) {\n                maxFactor = factor;\n            }\n            factor++;\n\
    \        }\n        return maxFactor;", "        long maxFactor = 1;\n       \
    \ long currentFactor = 2;\n        while (currentFactor <= n) {\n            if\
    \ (n % currentFactor == 0) {\n                maxFactor = currentFactor;\n   \
    \         }\n            currentFactor++;\n        }\n        return maxFactor;",
  "        long maxFactor = 1;\n        long factor = 2;\n        while (factor <\
    \ n) {\n            if (n % factor == 0) {\n                maxFactor = factor;\n\
    \            }\n            factor++;\n        }\n        return maxFactor;",
  "        long maxFactor = 1;\n        long factor = 2;\n        while (factor <\
    \ n) {\n            if (n % factor == 0) {\n                maxFactor = factor;\n\
    \            }\n            factor++;\n        }\n        return maxFactor;",
  "        long maxFactor = 1;\n        long currentFactor = 2;\n        while (currentFactor\
    \ <= n) {\n            if (n % currentFactor == 0) {\n                maxFactor\
    \ = currentFactor;\n            }\n            currentFactor++;\n        }\n \
    \       return maxFactor;", "        long maxFactor = n;\n        long factor\
    \ = 2;\n        while (factor <= maxFactor) {\n            while (n % factor ==\
    \ 0) {\n                maxFactor = factor;\n                factor++;\n     \
    \       }\n            n/=factor;\n        }\n        return maxFactor;", "  \
    \      long maxFactor = 1;\n        long currentFactor = 2;\n        while (currentFactor\
    \ <= n) {\n            if (n % currentFactor == 0) {\n                maxFactor\
    \ = currentFactor;\n            }\n            currentFactor++;\n        }\n \
    \       return maxFactor;", "        long maxFactor = n;\n        long factor\
    \ = 2;\n        while (factor <= maxFactor) {\n            if (n % factor == 0)\
    \ {\n                maxFactor = factor;\n            } else {\n             \
    \   while (n % factor == 0) {\n                    n /= factor;\n            \
    \    }\n            }\n            factor++;\n        }\n        return maxFactor;",
  "        long largestPrimeFactor = 2;\n        long currentPrime = 2;\n        while\
    \ (n > 1) {\n            while (n % currentPrime == 0) {\n                largestPrimeFactor\
    \ = currentPrime;\n                n /= currentPrime;\n            }\n       \
    \     currentPrime++;\n        }\n        return largestPrimeFactor;", "     \
    \   long maxFactor = 1;\n        long factor = 2;\n        while (factor <= n)\
    \ {\n            if (n % factor == 0) {\n                maxFactor = factor;\n\
    \            }\n            factor++;\n        }\n        return maxFactor;",
  "        long maxFactor = n;\n        long factor = 2;\n        while (factor <\
    \ maxFactor) {\n            while (n % factor == 0) {\n                maxFactor\
    \ = factor;\n            }\n            factor++;\n        }\n        return maxFactor;",
  "        long maxFactor = 1;\n        long currentFactor = 2;\n        while (currentFactor\
    \ <= n) {\n            if (n % currentFactor == 0) {\n                maxFactor\
    \ = currentFactor;\n            }\n            currentFactor++;\n        }\n \
    \       return maxFactor;", "        long maxFactor = n;\n        long factor\
    \ = 2;\n        while (factor <= maxFactor) {\n            if (n % factor == 0)\
    \ {\n                maxFactor = factor;\n            }\n            factor++;\n\
    \        }\n        return maxFactor;", "        long maxFactor = 1;\n       \
    \ long currentFactor = 2;\n        while (currentFactor <= n) {\n            if\
    \ (n % currentFactor == 0) {\n                maxFactor = currentFactor;\n   \
    \             break;\n            }\n            currentFactor++;\n        }\n\
    \        return maxFactor;", "        long maxFactor = n;\n        long factor\
    \ = 2;\n        while (factor <= maxFactor) {\n            while (n % factor ==\
    \ 0) {\n                n = n / factor;\n            }\n            maxFactor\
    \ = factor;\n            factor++;\n        }\n        return maxFactor;", " \
    \       long maxFactor = 0;\n        long factor = 2;\n        while (factor <\
    \ n) {\n            if (n % factor == 0) {\n                maxFactor = factor;\n\
    \            }\n            factor++;\n        }\n        return maxFactor;",
  "        long maxFactor = 1;\n        long factor = 2;\n        while (factor <\
    \ n) {\n            if (n % factor == 0) {\n                maxFactor = factor;\n\
    \            }\n            factor++;\n        }\n        return maxFactor;",
  "        long maxFactor = n;\n        long factor = 2;\n        while (factor <=\
    \ maxFactor) {\n            while (n % factor == 0) {\n                maxFactor\
    \ = factor;\n            }\n            factor++;\n        }\n        return maxFactor;",
  "        long maxFactor = 1;\n        long factor = 2;\n        while (factor <=\
    \ n) {\n            if (n % factor == 0) {\n                maxFactor = factor;\n\
    \            }\n            factor++;\n        }\n        return maxFactor;",
  "        long maxFactor = n;\n        long factor = 2;\n        while (factor <\
    \ maxFactor) {\n            if (n % factor == 0) {\n                maxFactor\
    \ = factor;\n            }\n            factor++;\n        }\n        return maxFactor;",
  "        long maxFactor = n;\n        long factor = 2;\n        while (factor <\
    \ maxFactor) {\n            while (n % factor == 0) {\n                maxFactor\
    \ = factor;\n            }\n            factor++;\n        }\n        return maxFactor;",
  "        long maxFactor = 1;\n        long currentFactor = 2;\n        while (currentFactor\
    \ <= n) {\n            if (n % currentFactor == 0) {\n                maxFactor\
    \ = currentFactor;\n            }\n            currentFactor++;\n        }\n \
    \       return maxFactor;", "        long maxFactor = n;\n        long factor\
    \ = 2;\n        while (factor <= maxFactor) {\n            if (n % factor == 0)\
    \ {\n                maxFactor = factor;\n            }\n            factor++;\n\
    \        }\n        return maxFactor;", "        long maxFactor = n;\n       \
    \ long factor = 2;\n        while (factor <= maxFactor) {\n            if (n %\
    \ factor == 0) {\n                maxFactor = factor;\n            }\n       \
    \     factor++;\n        }\n        return maxFactor;", "        long maxFactor\
    \ = n;\n        long factor = 2;\n        while (factor < maxFactor) {\n     \
    \       if (n % factor == 0) {\n                maxFactor = factor;\n        \
    \    }\n            factor++;\n        }\n        return maxFactor;", "      \
    \  long maxFactor = 0;\n        long factor = 2;\n        while (factor < n) {\n\
    \            if (n % factor == 0) {\n                maxFactor = factor;\n   \
    \         }\n            factor++;\n        }\n        return maxFactor;", " \
    \       long maxFactor = 1;\n        long factor = 2;\n        while (factor <\
    \ n) {\n            if (n % factor == 0) {\n                maxFactor = factor;\n\
    \            }\n            factor++;\n        }\n        return maxFactor;",
  "        long maxFactor = 1;\n        long factor = 2;\n        while (factor <\
    \ n) {\n            if (n % factor == 0) {\n                maxFactor = factor;\n\
    \            }\n            factor++;\n        }\n        return maxFactor;",
  "        long maxFactor = 1;\n        long currentFactor = 2;\n        while (currentFactor\
    \ <= n) {\n            if (n % currentFactor == 0) {\n                maxFactor\
    \ = currentFactor;\n            }\n            currentFactor++;\n        }\n \
    \       return maxFactor;", "        long maxFactor = n;\n        long factor\
    \ = 2;\n        while (factor <= maxFactor) {\n            if (n % factor == 0)\
    \ {\n                maxFactor = factor;\n            }\n            factor++;\n\
    \        }\n        return maxFactor;", "        long maxFactor = 0;\n       \
    \ long factor = 2;\n        while (factor <= n) {\n            if (n % factor\
    \ == 0) {\n                maxFactor = factor;\n            }\n            factor++;\n\
    \        }\n        return maxFactor;", "        long maxFactor = 1;\n       \
    \ long currentFactor = 2;\n        while (currentFactor <= n) {\n            if\
    \ (n % currentFactor == 0) {\n                maxFactor = currentFactor;\n   \
    \         }\n            currentFactor++;\n        }\n        return maxFactor;",
  "        long largestPrimeFactor = n;\n        long factor = 2;\n        while (factor\
    \ < n) {\n            if (n % factor == 0) {\n                largestPrimeFactor\
    \ = factor;\n                break;\n            }\n            factor++;\n  \
    \      }\n        return largestPrimeFactor;", "        long maxFactor = 1;\n\
    \        long factor = 2;\n        while (factor <= n) {\n            if (n %\
    \ factor == 0) {\n                maxFactor = factor;\n            }\n       \
    \     factor++;\n        }\n        return maxFactor;", "        long maxFactor\
    \ = n;\n        long factor = 2;\n        while (factor <= maxFactor) {\n    \
    \        if (n % factor == 0) {\n                maxFactor = factor;\n       \
    \     }\n            factor++;\n        }\n        return maxFactor;", "     \
    \   long maxFactor = 0;\n        long factor = 2;\n        while (factor < n)\
    \ {\n            if (n % factor == 0) {\n                maxFactor = factor;\n\
    \            }\n            factor++;\n        }\n        return maxFactor;",
  "        long maxFactor = n;\n        long factor = 2;\n        while (factor <\
    \ maxFactor) {\n            if (n % factor == 0) {\n                maxFactor\
    \ = factor;\n            }\n            factor++;\n        }\n        return maxFactor;",
  "        long maxFactor = n;\n        long factor = 2;\n        while (factor <\
    \ maxFactor) {\n            if (n % factor == 0) {\n                maxFactor\
    \ = factor;\n            }\n            factor++;\n        }\n        return maxFactor;",
  "        long maxFactor = n;\n        long factor = 2;\n        while (factor <=\
    \ maxFactor) {\n            if (n % factor == 0) {\n                maxFactor\
    \ = factor;\n            }\n            factor++;\n        }\n        return maxFactor;",
  "        long maxFactor = n;\n        long maxFactorPrime = 1;\n        long maxFactorPrimePrime\
    \ = 2;\n        long maxFactorPrimePrimePrime = 3;\n        long maxFactorPrimePrimePrimePrime\
    \ = 4;\n        long maxFactorPrimePrimePrimePrimePrime = 5;\n        long maxFactorPrimePrimePrimePrimePrime\
    \ = 6;\n        long maxFactorPrimePrimePrimePrimePrimePrime = 7;\n        long\
    \ maxFactorPrimePrimePrimePrimePrimePrimePrime = 8;\n        long maxFactorPrimePrimePrimePrimePrimePrimePrime\
    \ = 9;\n        long maxFactorPrimePrimePrimePrimePrimePrimePrime = 10;\n    \
    \    long maxFactorPrimePrimePrimePrimePrimePrimePrime = 11;\n        long maxFactorPrimePrimePrimePrimePrimePrimePrime\
    \ = 12;\n        long maxFactorPrimePrimePrimePrimePrimePrimePrimePrime = 13;\n\
    \        long maxFactorPrimePrimePrimePrimePrimePrimePrimePrime = 14;\n      \
    \  long maxFactorPrimePrimePrimePrimePrimePrimePrimePrime = 15;\n        long\
    \ maxFactorPrimePrimePrimePrimePrimePrimePrimePrime = 16;\n        long maxFactorPrimePrimePrimePrimePrimePrimePrimePrime\
    \ = 17;\n        long maxFactorPrimePrimePrimePrimePrimePrimePrimePrimePrime =\
    \ 18;\n        long maxFactorPrimePrimePrimePrimePrimePrimePrimePrimePrime = 19;\n\
    \        long maxFactorPrimePrimePrimePrimePrimePrimePrimePrimePrime = 20;\n \
    \       long maxFactorPrimePrimePrimePrimePrimePrimePrimePrimePrime = 21;\n  \
    \      long maxFactorPrimePrimePrimePrimePrimePrimePrimePrimePrime = 22;\n   \
    \     long maxFactorPrimePrimePrimePrimePrimePrimePrimePrimePrime = 23;\n    \
    \    long maxFactorPrimePrimePrimePrimePrimePrimePrimePrimePrime = 24;\n     \
    \   long maxFactorPrimePrimePrimePrimePrimePrimePrimePrime", "        long maxFactor\
    \ = n;\n        long maxFactorPrime = 1;\n        long factor = 2;\n        while\
    \ (factor <= maxFactor) {\n            if (n % factor == 0) {\n              \
    \  maxFactorPrime = factor;\n            }\n            factor++;\n        }\n\
    \        return maxFactorPrime;", "        long maxFactor = n;\n        long factor\
    \ = 2;\n        while (factor < maxFactor) {\n            if (n % factor == 0)\
    \ {\n                maxFactor = factor;\n            }\n            factor++;\n\
    \        }\n        return maxFactor;", "        long largestPrimeFactor = n;\n\
    \        long i = 2;\n        while (largestPrimeFactor % i == 0) {\n        \
    \    largestPrimeFactor = largestPrimeFactor / i;\n            i++;\n        }\n\
    \        return largestPrimeFactor;", "        long maxFactor = n;\n        long\
    \ factor = 2;\n        while (factor <= maxFactor) {\n            if (n % factor\
    \ == 0) {\n                maxFactor = factor;\n            }\n            factor++;\n\
    \        }\n        return maxFactor;", "        long maxFactor = n;\n       \
    \ long factor = 2;\n        while (factor < maxFactor) {\n            if (n %\
    \ factor == 0) {\n                maxFactor = factor;\n            }\n       \
    \     factor++;\n        }\n        return maxFactor;", "        long maxFactor\
    \ = n;\n        long factor = 2;\n        while (factor < maxFactor) {\n     \
    \       while (n % factor == 0) {\n                maxFactor = factor;\n     \
    \       }\n            factor++;\n        }\n        return maxFactor;", "   \
    \     long maxFactor = 0;\n        long factor = 2;\n        while (factor < n)\
    \ {\n            if (n % factor == 0) {\n                maxFactor = factor;\n\
    \            }\n            factor++;\n        }\n        return maxFactor;",
  "        long maxFactor = n;\n        long factor = 2;\n        while (factor <\
    \ maxFactor) {\n            if (n % factor == 0) {\n                maxFactor\
    \ = factor;\n            }\n            factor++;\n        }\n        return maxFactor;",
  "        long largestPrimeFactor = n;\n        long largestPrimeFactorOfN = 1;\n\
    \        long largestPrimeFactorOfNPlusOne = 2;\n        bool isPrime = true;\n\
    \        bool isPrimePlusOne = true;\n        long primeFactorOfN = 2;\n     \
    \   long primeFactorOfNPlusOne = 2;\n        long primeFactorOfNMinusOne = 2;\n\
    \        long primeFactorOfNMinusOnePlusOne = 2;\n        long primeFactorOfNMinusOnePlusTwo\
    \ = 2;\n        long primeFactorOfNMinusOnePlusThree = 2;\n        long primeFactorOfNMinusOnePlusFour\
    \ = 2;\n        long primeFactorOfNMinusOnePlusFive = 2;\n        long primeFactorOfNMinusOnePlusSix\
    \ = 2;\n        long primeFactorOfNMinusOnePlusSeven = 2;\n        long primeFactorOfNMinusOnePlusEight\
    \ = 2;\n        long primeFactorOfNMinusOnePlusNine = 2;\n        long primeFactorOfNMinusOnePlusTen\
    \ = 2;\n        long primeFactorOfNMinusOnePlusEleven = 2;\n        long primeFactorOfNMinusOnePlusTwelve\
    \ = 2;\n        long primeFactorOfNMinusOnePlusThirteen = 2;\n        long primeFactorOfNMinusOnePlusFourteen\
    \ = 2;\n        long primeFactorOfNMinusOnePlusFifteen = 2;\n        long primeFactorOfNMinusOnePlusSixteen\
    \ = 2;\n        long primeFactorOfNMinusOnePlusSeventeen = 2;\n        long primeFactorOfNMinusOnePlusEighteen\
    \ = 2;\n        long primeFactorOfNMinusOnePlusNineteen = 2;\n        long primeFactorOfNMinusOnePlusTwenty\
    \ = 2;\n        long primeFactorOfNMinusOnePlusTwentyTwo = 2;\n        long primeFactorOfNMinusOnePlusTwentyThree\
    \ = 2;\n        long primeFactorOfNMinusOnePlusTwentyFour = 2;\n        long primeFactorOfNMinusOnePlusTwentyFive\
    \ = 2;\n        long primeFactorOfNMinusOnePlusTwentySix = 2;\n        long primeFactorOfNMinusOnePlusTwentySeven\
    \ = 2;\n        long primeFactorOfNMinusOnePlusTwentyEight = 2;\n        long\
    \ primeFactorOfNMinusOnePlusTwentyNine = 2;\n        long primeFactorOfNMinusOnePlusTwentyTen\
    \ = 2;\n        long ", "        long maxFactor = n;\n        long factor = 2;\n\
    \        while (factor < maxFactor) {\n            if (n % factor == 0) {\n  \
    \              maxFactor = factor;\n            }\n            factor++;\n   \
    \     }\n        return maxFactor;", "        long maxFactor = 1;\n        long\
    \ factor = 2;\n        while (factor < n) {\n            if (n % factor == 0)\
    \ {\n                maxFactor = factor;\n            }\n            factor++;\n\
    \        }\n        return maxFactor;", "        long maxFactor = n;\n       \
    \ long factor = 2;\n        while (factor <= maxFactor) {\n            if (n %\
    \ factor == 0) {\n                maxFactor = factor;\n            }\n       \
    \     factor++;\n        }\n        return maxFactor;", "        long maxFactor\
    \ = n;\n        long factor = 2;\n        while (factor < maxFactor) {\n     \
    \       while (n % factor == 0) {\n                maxFactor = factor;\n     \
    \           factor++;\n            }\n            n--;\n        }\n        return\
    \ maxFactor;", "        long maxFactor = 1;\n        long currentFactor = 2;\n\
    \        while (currentFactor <= n) {\n            if (n % currentFactor == 0)\
    \ {\n                maxFactor = currentFactor;\n            }\n            currentFactor++;\n\
    \        }\n        return maxFactor;", "        long maxFactor = n;\n       \
    \ long factor = 2;\n        while (factor <= maxFactor) {\n            if (n %\
    \ factor == 0) {\n                maxFactor = factor;\n            }\n       \
    \     factor++;\n        }\n        return maxFactor;", "        long maxFactor\
    \ = 1;\n        long currentFactor = 2;\n        while (currentFactor <= n) {\n\
    \            if (n % currentFactor == 0) {\n                maxFactor = currentFactor;\n\
    \                break;\n            }\n            currentFactor++;\n       \
    \ }\n        return maxFactor;", "        long maxFactor = 1;\n        long currentFactor\
    \ = 2;\n        while (currentFactor <= n) {\n            if (n % currentFactor\
    \ == 0) {\n                maxFactor = currentFactor;\n            }\n       \
    \     currentFactor++;\n        }\n        return maxFactor;", "        long largestPrimeFactor\
    \ = n;\n        long largestPrimeFactorFactor = 1;\n        long largestPrimeFactorFactorFactor\
    \ = 2;\n        while (largestPrimeFactorFactor <= n) {\n            long primeFactor\
    \ = largestPrimeFactorFactor;\n            long primeFactorFactor = 1;\n     \
    \       long primeFactorFactorFactor = 2;\n            while (primeFactorFactor\
    \ <= n) {\n                if (n % primeFactor == 0) {\n                    primeFactorFactorFactor\
    \ *= primeFactor;\n                    break;\n                }\n           \
    \     primeFactorFactor++;\n            }\n            if (primeFactorFactorFactor\
    \ > largestPrimeFactorFactorFactor) {\n                largestPrimeFactorFactor\
    \ = primeFactorFactor;\n                largestPrimeFactorFactorFactor = primeFactorFactorFactor;\n\
    \            }\n            largestPrimeFactorFactorFactor++;\n        }\n   \
    \     return largestPrimeFactorFactor;", "        long maxFactor = n;\n      \
    \  long factor = 2;\n        while (factor <= maxFactor) {\n            if (n\
    \ % factor == 0) {\n                maxFactor = factor;\n            }\n     \
    \       factor++;\n        }\n        return maxFactor;", "        long maxFactor\
    \ = 1;\n        long factor = 2;\n        while (factor < n) {\n            if\
    \ (n % factor == 0) {\n                maxFactor = factor;\n            }\n  \
    \          factor++;\n        }\n        return maxFactor;", "        long largestPrimeFactor\
    \ = 1;\n        long currentPrime = 2;\n        while (currentPrime < n) {\n \
    \           while (n % currentPrime == 0) {\n                largestPrimeFactor\
    \ = currentPrime;\n                n /= currentPrime;\n            }\n       \
    \     currentPrime++;\n        }\n        return largestPrimeFactor;", "     \
    \   long largestPrimeFactor = n;\n        long currentPrime = 2;\n        while\
    \ (currentPrime < largestPrimeFactor) {\n            long currentFactor = currentPrime;\n\
    \            while (currentPrime * currentPrime <= largestPrimeFactor) {\n   \
    \             if (n % currentPrime == 0) {\n                    largestPrimeFactor\
    \ = currentPrime;\n                    break;\n                }\n           \
    \     currentPrime++;\n            }\n            currentPrime++;\n        }\n\
    \        return largestPrimeFactor;", "        long maxFactor = n;\n        long\
    \ factor = 2;\n        while (factor <= maxFactor) {\n            if (n % factor\
    \ == 0) {\n                maxFactor = factor;\n            }\n            factor++;\n\
    \        }\n        return maxFactor;", "        long maxFactor = n;\n       \
    \ long factor = 2;\n        while (factor < maxFactor) {\n            if (n %\
    \ factor == 0) {\n                maxFactor = factor;\n            }\n       \
    \     factor++;\n        }\n        return maxFactor;", "        long maxFactor\
    \ = n;\n        long factor = 2;\n        while (factor < maxFactor) {\n     \
    \       if (n % factor == 0) {\n                maxFactor = factor;\n        \
    \    }\n            factor++;\n        }\n        return maxFactor;", "      \
    \  long maxFactor = n;\n        long factor = 2;\n        while (factor <= maxFactor)\
    \ {\n            if (n % factor == 0) {\n                maxFactor = factor;\n\
    \            }\n            factor++;\n        }\n        return maxFactor;",
  "        long maxFactor = 1;\n        long currentFactor = 2;\n        while (currentFactor\
    \ <= n) {\n            if (n % currentFactor == 0) {\n                maxFactor\
    \ = currentFactor;\n            }\n            currentFactor++;\n        }\n \
    \       return maxFactor;", "        long maxFactor = 1;\n        long factor\
    \ = 2;\n        while (factor <= n / 2) {\n            if (n % factor == 0) {\n\
    \                maxFactor = factor;\n            }\n            factor++;\n \
    \       }\n        return maxFactor;", "        long maxFactor = 1;\n        long\
    \ currentFactor = 2;\n        while (currentFactor <= n) {\n            if (n\
    \ % currentFactor == 0) {\n                maxFactor = currentFactor;\n      \
    \      }\n            currentFactor++;\n        }\n        return maxFactor;",
  "        long maxFactor = n;\n        long factor = 2;\n        while (factor <=\
    \ maxFactor) {\n            if (n % factor == 0) {\n                maxFactor\
    \ = factor;\n            }\n            factor++;\n        }\n        return maxFactor;",
  "        long maxFactor = n;\n        long factor = 2;\n        while (factor <\
    \ maxFactor) {\n            while (n % factor == 0) {\n                maxFactor\
    \ = factor;\n                factor++;\n            }\n            n--;\n    \
    \    }\n        return maxFactor;", "        long largestPrimeFactor = n;\n  \
    \      long largestPrimeFactorFactor = 1;\n        long largestPrimeFactorFactorFactor\
    \ = 2;\n        bool isPrime = true;\n        long primeFactor = 2;\n        long\
    \ primeFactorFactor = 1;\n        long primeFactorFactorFactor = 2;\n        while\
    \ (isPrime) {\n            isPrime = false;\n            primeFactor = 2;\n  \
    \          primeFactorFactor = 1;\n            primeFactorFactorFactor = 2;\n\
    \            while (primeFactorFactor <= largestPrimeFactorFactorFactor) {\n \
    \               if (n % primeFactor == 0) {\n                    isPrime = true;\n\
    \                    break;\n                }\n                primeFactorFactor++;\n\
    \            }\n            while (primeFactorFactorFactor <= largestPrimeFactorFactorFactorFactor)\
    \ {\n                if (n % primeFactorFactor == 0) {\n                    isPrime\
    \ = true;\n                    break;\n                }\n                primeFactorFactor++;\n\
    \            }\n            if (isPrime) {\n                largestPrimeFactorFactor\
    \ = largestPrimeFactorFactorFactor;\n                largestPrimeFactorFactorFactor\
    \ = primeFactorFactorFactor;\n                largestPrimeFactorFactorFactorFactor\
    \ = primeFactorFactorFactor;\n            }\n            else {\n            \
    \    largestPrimeFactorFactor = primeFactorFactor;\n                largestPrimeFactorFactorFactor\
    \ = primeFactorFactorFactor;\n                largestPrimeFactorFactorFactorFactor\
    \ = primeFactorFactorFactor;\n            }\n        }\n        return largestPrimeFactorFactor;",
  "        long maxFactor = 1;\n        long currentFactor = 2;\n        while (currentFactor\
    \ <= n) {\n            if (n % currentFactor == 0) {\n                maxFactor\
    \ = currentFactor;\n            }\n            currentFactor++;\n        }\n \
    \       return maxFactor;", "        long maxFactor = n;\n        long factor\
    \ = 2;\n        while (factor < maxFactor) {\n            if (n % factor == 0)\
    \ {\n                maxFactor = factor;\n            }\n            factor++;\n\
    \        }\n        return maxFactor;", "        long maxFactor = 1;\n       \
    \ long factor = 2;\n        while (factor <= n) {\n            if (n % factor\
    \ == 0) {\n                maxFactor = factor;\n            }\n            factor++;\n\
    \        }\n        return maxFactor;", "        long maxFactor = n;\n       \
    \ long factor = 2;\n        while (factor <= maxFactor) {\n            while (n\
    \ % factor == 0) {\n                maxFactor = factor;\n            }\n     \
    \       factor++;\n        }\n        return maxFactor;", "        long maxFactor\
    \ = 1;\n        long factor = 2;\n        while (factor <= n) {\n            if\
    \ (n % factor == 0) {\n                maxFactor = factor;\n            }\n  \
    \          factor++;\n        }\n        return maxFactor;", "        long maxFactor\
    \ = n;\n        long factor = 2;\n        while (factor <= maxFactor) {\n    \
    \        if (n % factor == 0) {\n                maxFactor = factor;\n       \
    \     } else {\n                while (n % factor == 0) {\n                  \
    \  n /= factor;\n                }\n            }\n            factor++;\n   \
    \     }\n        return maxFactor;", "        long maxFactor = n;\n        long\
    \ factor = 2;\n        while (factor <= maxFactor) {\n            if (n % factor\
    \ == 0) {\n                maxFactor = factor;\n            }\n            factor++;\n\
    \        }\n        return maxFactor;", "        long maxFactor = 0;\n       \
    \ long factor = 2;\n        while (factor <= n) {\n            if (n % factor\
    \ == 0) {\n                maxFactor = factor;\n            }\n            factor++;\n\
    \        }\n        return maxFactor;", "        long maxFactor = 1;\n       \
    \ long currentFactor = 2;\n        while (currentFactor <= n / 2) {\n        \
    \    if (n % currentFactor == 0) {\n                maxFactor = currentFactor;\n\
    \                break;\n            }\n            currentFactor++;\n       \
    \ }\n        return maxFactor;", "        long maxFactor = n;\n        long factor\
    \ = 2;\n        while (factor <= maxFactor) {\n            if (n % factor == 0)\
    \ {\n                maxFactor = factor;\n            }\n            factor++;\n\
    \        }\n        return maxFactor;", "        long maxFactor = 1;\n       \
    \ long factor = 2;\n        while (factor <= n / 2) {\n            if (n % factor\
    \ == 0) {\n                maxFactor = factor;\n            }\n            factor++;\n\
    \        }\n        return maxFactor;", "        long largestPrimeFactor = n;\n\
    \        long factor = 2;\n        while (factor < n) {\n            if (n % factor\
    \ == 0) {\n                largestPrimeFactor = factor;\n                break;\n\
    \            }\n            factor++;\n        }\n        return largestPrimeFactor;",
  "        long maxFactor = 0;\n        long factor = 2;\n        while (factor <=\
    \ n) {\n            if (n % factor == 0) {\n                maxFactor = factor;\n\
    \            }\n            factor++;\n        }\n        return maxFactor;",
  "        long maxFactor = 0;\n        long factor = 2;\n        while (factor <=\
    \ n) {\n            if (n % factor == 0) {\n                maxFactor = factor;\n\
    \            }\n            factor++;\n        }\n        return maxFactor;",
  "        long maxFactor = n;\n        long factor = 2;\n        while (factor <=\
    \ maxFactor) {\n            if (n % factor == 0) {\n                maxFactor\
    \ = factor;\n            }\n            factor++;\n        }\n        return maxFactor;",
  "        long largestPrimeFactor = n;\n        long currentPrime = 2;\n        while\
    \ (currentPrime < largestPrimeFactor) {\n            if (n % currentPrime == 0)\
    \ {\n                largestPrimeFactor = currentPrime;\n            }\n     \
    \       currentPrime++;\n        }\n        return largestPrimeFactor;", "   \
    \     long maxFactor = n;\n        long maxFactorPrime = 2;\n        while (maxFactorPrime\
    \ * maxFactorPrime <= n) {\n            long currentFactor = maxFactorPrime;\n\
    \            while (n % currentFactor == 0) {\n                maxFactor = currentFactor;\n\
    \                maxFactorPrime++;\n            }\n        }\n        return maxFactor;",
  "        long maxFactor = n;\n        long factor = 2;\n        while (factor <=\
    \ maxFactor) {\n            if (n % factor == 0) {\n                maxFactor\
    \ = factor;\n            }\n            factor++;\n        }\n        return maxFactor;",
  "        long maxFactor = 1;\n        long currentFactor = 2;\n        while (currentFactor\
    \ <= n) {\n            if (n % currentFactor == 0) {\n                maxFactor\
    \ = currentFactor;\n            }\n            currentFactor++;\n        }\n \
    \       return maxFactor;", "        long maxFactor = 1;\n        long factor\
    \ = 2;\n        while (factor <= n / 2) {\n            if (n % factor == 0) {\n\
    \                maxFactor = factor;\n                break;\n            }\n\
    \            factor++;\n        }\n        return maxFactor;", "        long maxFactor\
    \ = n;\n        long maxFactorFound = n;\n        long factor = 2;\n        while\
    \ (factor <= maxFactor) {\n            while (n % factor == 0) {\n           \
    \     maxFactorFound = factor;\n                factor++;\n            }\n   \
    \         n--;\n        }\n        return maxFactorFound;", "        long maxFactor\
    \ = 1;\n        long factor = 2;\n        while (factor <= n / 2) {\n        \
    \    if (n % factor == 0) {\n                maxFactor = factor;\n           \
    \ }\n            factor++;\n        }\n        return maxFactor;", "        long\
    \ maxFactor = 1;\n        long currentFactor = 2;\n        while (currentFactor\
    \ <= n) {\n            if (n % currentFactor == 0) {\n                maxFactor\
    \ = currentFactor;\n            }\n            currentFactor++;\n        }\n \
    \       return maxFactor;", "        long maxFactor = n;\n        long factor\
    \ = 2;\n        while (factor <= maxFactor) {\n            if (n % factor == 0)\
    \ {\n                maxFactor = factor;\n            }\n            factor++;\n\
    \        }\n        return maxFactor;", "        long maxFactor = n;\n       \
    \ long factor = 2;\n        while (factor < maxFactor) {\n            if (n %\
    \ factor == 0) {\n                maxFactor = factor;\n            }\n       \
    \     factor++;\n        }\n        return maxFactor;", "        long maxFactor\
    \ = n;\n        long factor = 2;\n        while (factor <= maxFactor) {\n    \
    \        while (n % factor == 0) {\n                maxFactor = factor;\n    \
    \        }\n            factor++;\n        }\n        return maxFactor;", "  \
    \      long maxFactor = n;\n        long factor = 2;\n        while (factor <=\
    \ maxFactor) {\n            if (n % factor == 0) {\n                maxFactor\
    \ = factor;\n            } else {\n                factor++;\n            }\n\
    \        }\n        return maxFactor;", "        long maxFactor = n;\n       \
    \ long factor = 2;\n        while (factor <= maxFactor) {\n            if (n %\
    \ factor == 0) {\n                maxFactor = factor;\n            }\n       \
    \     factor++;\n        }\n        return maxFactor;", "        long maxFactor\
    \ = n;\n        long factor = 2;\n        while (factor <= maxFactor) {\n    \
    \        while (n % factor == 0) {\n                maxFactor = factor;\n    \
    \        }\n            factor++;\n        }\n        return maxFactor;", "  \
    \      long maxFactor = 0;\n        long factor = 2;\n        while (factor <=\
    \ n) {\n            if (n % factor == 0) {\n                maxFactor = factor;\n\
    \            }\n            factor++;\n        }\n        return maxFactor;",
  "        long maxFactor = n;\n        long factor = 2;\n        while (factor <\
    \ maxFactor) {\n            if (n % factor == 0) {\n                maxFactor\
    \ = factor;\n            }\n            factor++;\n        }\n        return maxFactor;",
  "        long maxFactor = n;\n        long factor = 2;\n        while (factor <=\
    \ maxFactor) {\n            if (n % factor == 0) {\n                maxFactor\
    \ = factor;\n            }\n            factor++;\n        }\n        return maxFactor;",
  "        long maxFactor = n;\n        long factor = 2;\n        while (factor <\
    \ maxFactor) {\n            while (n % factor == 0) {\n                maxFactor\
    \ = factor;\n            }\n            factor++;\n        }\n        return maxFactor;",
  "        long maxFactor = 1;\n        long currentFactor = 2;\n        while (currentFactor\
    \ <= n) {\n            if (n % currentFactor == 0) {\n                maxFactor\
    \ = currentFactor;\n            }\n            currentFactor++;\n        }\n \
    \       return maxFactor;", "        long maxFactor = n;\n        long factor\
    \ = 2;\n        while (factor < maxFactor) {\n            if (n % factor == 0)\
    \ {\n                maxFactor = factor;\n            }\n            factor++;\n\
    \        }\n        return maxFactor;", "        long maxFactor = 1;\n       \
    \ long currentFactor = 2;\n        while (currentFactor <= n) {\n            if\
    \ (n % currentFactor == 0) {\n                maxFactor = currentFactor;\n   \
    \         }\n            currentFactor++;\n        }\n        return maxFactor;",
  "        long maxFactor = 1;\n        long currentFactor = 2;\n        while (currentFactor\
    \ <= n) {\n            if (n % currentFactor == 0) {\n                maxFactor\
    \ = currentFactor;\n            }\n            currentFactor++;\n        }\n \
    \       return maxFactor;", "        long maxFactor = 1;\n        long currentFactor\
    \ = 2;\n        while (n > 1) {\n            while (n % currentFactor == 0) {\n\
    \                maxFactor = currentFactor;\n                currentFactor++;\n\
    \            }\n            n--;\n        }\n        return maxFactor;", "   \
    \     long maxFactor = 0;\n        long factor = 2;\n        while (factor <=\
    \ n) {\n            if (n % factor == 0) {\n                maxFactor = factor;\n\
    \            }\n            factor++;\n        }\n        return maxFactor;",
  "        long largestPrimeFactor = 1;\n        long currentPrime = 2;\n        while\
    \ (currentPrime < n) {\n            while (n % currentPrime == 0) {\n        \
    \        largestPrimeFactor = currentPrime;\n                n /= currentPrime;\n\
    \            }\n            currentPrime++;\n        }\n        return largestPrimeFactor;",
  "        long maxFactor = n;\n        long factor = 2;\n        while (factor <=\
    \ maxFactor) {\n            if (n % factor == 0) {\n                maxFactor\
    \ = factor;\n            }\n            factor++;\n        }\n        return maxFactor;",
  "        long maxFactor = n;\n        long factor = 2;\n        while (factor <\
    \ maxFactor) {\n            if (n % factor == 0) {\n                maxFactor\
    \ = factor;\n            }\n            factor++;\n        }\n        return maxFactor;",
  "        long maxFactor = n;\n        long factor = 2;\n        while (factor <\
    \ maxFactor) {\n            if (n % factor == 0) {\n                maxFactor\
    \ = factor;\n            }\n            factor++;\n        }\n        return maxFactor;",
  "        long maxFactor = 1;\n        long factor = 2;\n        while (factor <\
    \ n) {\n            if (n % factor == 0) {\n                maxFactor = factor;\n\
    \            }\n            factor++;\n        }\n        return maxFactor;",
  "        long maxFactor = n;\n        long factor = 2;\n        while (factor <\
    \ maxFactor) {\n            if (n % factor == 0) {\n                maxFactor\
    \ = factor;\n            }\n            factor++;\n        }\n        return maxFactor;",
  "        long maxFactor = n;\n        long factor = 2;\n        while (factor <=\
    \ maxFactor) {\n            if (n % factor == 0) {\n                maxFactor\
    \ = factor;\n            } else {\n                factor++;\n            }\n\
    \        }\n        return maxFactor;", "        long maxFactor = 1;\n       \
    \ long currentFactor = 2;\n        while (currentFactor <= n) {\n            if\
    \ (n % currentFactor == 0) {\n                maxFactor = currentFactor;\n   \
    \         }\n            currentFactor++;\n        }\n        return maxFactor;",
  "        long maxFactor = n;\n        long factor = 2;\n        while (factor <=\
    \ maxFactor) {\n            while (n % factor == 0) {\n                maxFactor\
    \ = factor;\n            }\n            factor++;\n        }\n        return maxFactor;",
  "        long maxFactor = n;\n        long factor = 2;\n        while (factor <\
    \ maxFactor) {\n            if (n % factor == 0) {\n                maxFactor\
    \ = factor;\n            }\n            factor++;\n        }\n        return maxFactor;",
  "        long maxFactor = n;\n        long factor = 2;\n        while (factor <\
    \ maxFactor) {\n            if (n % factor == 0) {\n                maxFactor\
    \ = factor;\n            }\n            factor++;\n        }\n        return maxFactor;",
  "        long maxFactor = 1;\n        long currentFactor = 2;\n        while (currentFactor\
    \ <= n) {\n            if (n % currentFactor == 0) {\n                maxFactor\
    \ = currentFactor;\n            }\n            currentFactor++;\n        }\n \
    \       return maxFactor;", "        long maxFactor = 1;\n        long factor\
    \ = 2;\n        while (factor < n) {\n            if (n % factor == 0) {\n   \
    \             maxFactor = factor;\n            }\n            factor++;\n    \
    \    }\n        return maxFactor;", "        long maxFactor = 0;\n        long\
    \ factor = 2;\n        while (factor <= n) {\n            if (n % factor == 0)\
    \ {\n                maxFactor = factor;\n                break;\n           \
    \ }\n            factor++;\n        }\n        return maxFactor;", "        long\
    \ largestPrimeFactor = 2;\n        long currentPrime = 2;\n        while (currentPrime\
    \ < n) {\n            if (n % currentPrime == 0) {\n                largestPrimeFactor\
    \ = currentPrime;\n                break;\n            }\n            currentPrime++;\n\
    \        }\n        return largestPrimeFactor;", "        long maxFactor = n;\n\
    \        long factor = 2;\n        while (factor <= maxFactor) {\n           \
    \ while (n % factor == 0) {\n                maxFactor = factor;\n           \
    \ }\n            factor++;\n        }\n        return maxFactor;", "        long\
    \ maxFactor = n;\n        long factor = 2;\n        while (factor < maxFactor)\
    \ {\n            if (n % factor == 0) {\n                maxFactor = factor;\n\
    \            }\n            factor++;\n        }\n        return maxFactor;",
  "        long maxFactor = 1;\n        long currentFactor = 2;\n        while (currentFactor\
    \ <= n) {\n            if (n % currentFactor == 0) {\n                maxFactor\
    \ = currentFactor;\n                break;\n            }\n            currentFactor++;\n\
    \        }\n        return maxFactor;", "        long maxFactor = n;\n       \
    \ long factor = 2;\n        while (factor <= maxFactor) {\n            if (n %\
    \ factor == 0) {\n                maxFactor = factor;\n            }\n       \
    \     factor++;\n        }\n        return maxFactor;", "        long maxFactor\
    \ = 0;\n        long factor = 2;\n        while (factor <= n / 2) {\n        \
    \    if (n % factor == 0) {\n                maxFactor = factor;\n           \
    \     break;\n            }\n            factor++;\n        }\n        return\
    \ maxFactor;", "        long maxFactor = n;\n        long factor = 2;\n      \
    \  while (factor <= maxFactor) {\n            if (n % factor == 0) {\n       \
    \         maxFactor = factor;\n            }\n            factor++;\n        }\n\
    \        return maxFactor;", "        long maxFactor = 1;\n        long factor\
    \ = 2;\n        while (factor <= n) {\n            if (n % factor == 0) {\n  \
    \              maxFactor = factor;\n            }\n            factor++;\n   \
    \     }\n        return maxFactor;", "        long maxFactor = n;\n        long\
    \ factor = 2;\n        while (factor <= maxFactor) {\n            if (n % factor\
    \ == 0) {\n                maxFactor = factor;\n            }\n            factor++;\n\
    \        }\n        return maxFactor;", "        long maxFactor = n;\n       \
    \ long factor = 2;\n        while (factor <= maxFactor) {\n            if (n %\
    \ factor == 0) {\n                maxFactor = factor;\n            }\n       \
    \     factor++;\n        }\n        return maxFactor;", "        long maxFactor\
    \ = n;\n        long factor = 2;\n        while (factor < maxFactor) {\n     \
    \       if (n % factor == 0) {\n                maxFactor = factor;\n        \
    \    }\n            factor++;\n        }\n        return maxFactor;", "      \
    \  long maxFactor = 1;\n        long factor = 2;\n        while (factor < n) {\n\
    \            if (n % factor == 0) {\n                maxFactor = factor;\n   \
    \         }\n            factor++;\n        }\n        return maxFactor;", " \
    \       long maxFactor = 1;\n        long currentFactor = 2;\n        while (currentFactor\
    \ <= n) {\n            if (n % currentFactor == 0) {\n                maxFactor\
    \ = currentFactor;\n            }\n            currentFactor++;\n        }\n \
    \       return maxFactor;", "        long maxFactor = n;\n        long factor\
    \ = 2;\n        while (factor < maxFactor) {\n            while (n % factor ==\
    \ 0) {\n                maxFactor = factor;\n            }\n            factor++;\n\
    \        }\n        return maxFactor;", "        long maxFactor = 0;\n       \
    \ long factor = 2;\n        while (factor <= n) {\n            if (n % factor\
    \ == 0) {\n                maxFactor = factor;\n            }\n            factor++;\n\
    \        }\n        return maxFactor;", "        long maxFactor = n;\n       \
    \ long factor = 2;\n        while (factor < maxFactor) {\n            if (n %\
    \ factor == 0) {\n                maxFactor = factor;\n            }\n       \
    \     factor++;\n        }\n        return maxFactor;", "        long maxFactor\
    \ = 0;\n        long currentFactor = 1;\n        while (n > 1) {\n           \
    \ currentFactor = n % currentFactor;\n            if (currentFactor > maxFactor)\
    \ {\n                maxFactor = currentFactor;\n            }\n            n\
    \ = n / currentFactor;\n        }\n        return maxFactor;", "        long maxFactor\
    \ = 1;\n        long factor = 2;\n        while (factor <= n) {\n            if\
    \ (n % factor == 0) {\n                maxFactor = factor;\n            }\n  \
    \          factor++;\n        }\n        return maxFactor;", "        long maxFactor\
    \ = 1;\n        long factor = 2;\n        while (factor < n) {\n            if\
    \ (n % factor == 0) {\n                maxFactor = factor;\n            }\n  \
    \          factor++;\n        }\n        return maxFactor;", "        long largestPrimeFactor\
    \ = 1;\n        long currentPrime = 2;\n        while (n > 1) {\n            while\
    \ (n % currentPrime == 0) {\n                largestPrimeFactor = currentPrime;\n\
    \                n /= currentPrime;\n            }\n            currentPrime++;\n\
    \        }\n        return largestPrimeFactor;", "        long maxFactor = n;\n\
    \        long factor = 2;\n        while (factor <= maxFactor) {\n           \
    \ while (n % factor == 0) {\n                n = n / factor;\n            }\n\
    \            if (n != 1) {\n                maxFactor = factor;\n            }\n\
    \            factor++;\n        }\n        return maxFactor;", "        long largestPrimeFactor\
    \ = 1;\n        long currentPrime = 2;\n        while (currentPrime < n) {\n \
    \           if (n % currentPrime == 0) {\n                largestPrimeFactor =\
    \ currentPrime;\n            }\n            currentPrime++;\n        }\n     \
    \   return largestPrimeFactor;", "        long maxFactor = n;\n        long factor\
    \ = 2;\n        while (factor <= maxFactor) {\n            if (n % factor == 0)\
    \ {\n                maxFactor = factor;\n            }\n            factor++;\n\
    \        }\n        return maxFactor;", "        long maxFactor = 1;\n       \
    \ long factor = 2;\n        while (factor <= n / 2) {\n            if (n % factor\
    \ == 0) {\n                maxFactor = factor;\n            }\n            factor++;\n\
    \        }\n        return maxFactor;", "        long maxFactor = 1;\n       \
    \ long factor = 2;\n        while (factor <= n) {\n            if (n % factor\
    \ == 0) {\n                maxFactor = factor;\n            }\n            factor++;\n\
    \        }\n        return maxFactor;", "        long maxFactor = n;\n       \
    \ long factor = 2;\n        while (factor < maxFactor) {\n            if (n %\
    \ factor == 0) {\n                maxFactor = factor;\n            }\n       \
    \     factor++;\n        }\n        return maxFactor;", "        long largestPrimeFactor\
    \ = n;\n        long i = 2;\n        while (largestPrimeFactor % i == 0) {\n \
    \           largestPrimeFactor = largestPrimeFactor / i;\n            i++;\n \
    \       }\n        return largestPrimeFactor;", "        long maxFactor = 1;\n\
    \        long factor = 2;\n        while (factor < n) {\n            if (n % factor\
    \ == 0) {\n                maxFactor = factor;\n            }\n            factor++;\n\
    \        }\n        return maxFactor;", "        long maxFactor = 0;\n       \
    \ long factor = 2;\n        while (factor < n) {\n            if (n % factor ==\
    \ 0) {\n                maxFactor = factor;\n            }\n            factor++;\n\
    \        }\n        return maxFactor;", "        long maxFactor = n;\n       \
    \ long factor = 2;\n        while (factor < maxFactor) {\n            if (n %\
    \ factor == 0) {\n                maxFactor = factor;\n            }\n       \
    \     factor++;\n        }\n        return maxFactor;", "        long largestPrimeFactor\
    \ = n;\n        long i = 2;\n        while (i <= largestPrimeFactor) {\n     \
    \       if (n % i == 0) {\n                largestPrimeFactor = i;\n         \
    \   }\n            i += 2;\n        }\n        return largestPrimeFactor;", " \
    \       long maxFactor = n;\n        long factor = 2;\n        while (factor <\
    \ maxFactor) {\n            if (n % factor == 0) {\n                maxFactor\
    \ = factor;\n            }\n            factor++;\n        }\n        return maxFactor;",
  "        long maxFactor = n;\n        long maxFactorPrime = 1;\n        long currentFactor\
    \ = 1;\n        while (n > 1) {\n            currentFactor = n % currentFactor;\n\
    \            if (currentFactor > maxFactor) {\n                maxFactor = currentFactor;\n\
    \                maxFactorPrime = currentFactor;\n            } else if (currentFactor\
    \ == maxFactor) {\n                maxFactorPrime++;\n            }\n        \
    \    n = n / currentFactor;\n        }\n        return maxFactorPrime;", "   \
    \     long largestPrimeFactor = n;\n        long factor = 2;\n        while (factor\
    \ <= largestPrimeFactor) {\n            while (n % factor == 0) {\n          \
    \      largestPrimeFactor = factor;\n            }\n            factor++;\n  \
    \      }\n        return largestPrimeFactor;", "        long maxFactor = 1;\n\
    \        long currentFactor = 2;\n        while (n > 1) {\n            while (n\
    \ % currentFactor == 0) {\n                maxFactor = currentFactor;\n      \
    \          currentFactor++;\n            }\n            n--;\n        }\n    \
    \    return maxFactor;", "        long maxFactor = n;\n        long factor = 2;\n\
    \        while (factor < maxFactor) {\n            if (n % factor == 0) {\n  \
    \              maxFactor = factor;\n            }\n            factor++;\n   \
    \     }\n        return maxFactor;", "        long largestPrimeFactor = n;\n \
    \       long factor = 2;\n        while (factor <= largestPrimeFactor) {\n   \
    \         if (n % factor == 0) {\n                largestPrimeFactor = factor;\n\
    \            }\n            factor++;\n        }\n        return largestPrimeFactor;",
  "        long largestPrimeFactor = n;\n        long factor = 2;\n        while (factor\
    \ <= largestPrimeFactor) {\n            if (n % factor == 0) {\n             \
    \   largestPrimeFactor = factor;\n            }\n            factor++;\n     \
    \   }\n        return largestPrimeFactor;", "        long maxFactor = 0;\n   \
    \     long factor = 2;\n        while (factor <= n) {\n            if (n % factor\
    \ == 0) {\n                maxFactor = factor;\n            }\n            factor++;\n\
    \        }\n        return maxFactor;", "        long maxFactor = n;\n       \
    \ long factor = 2;\n        while (factor <= maxFactor) {\n            if (n %\
    \ factor == 0) {\n                maxFactor = factor;\n            } else {\n\
    \                factor++;\n            }\n        }\n        return maxFactor;",
  "        long maxFactor = 1;\n        long currentFactor = 2;\n        while (currentFactor\
    \ <= n) {\n            if (n % currentFactor == 0) {\n                maxFactor\
    \ = currentFactor;\n            }\n            currentFactor++;\n        }\n \
    \       return maxFactor;", "        long maxFactor = n;\n        long factor\
    \ = 2;\n        while (factor <= maxFactor) {\n            while (n % factor ==\
    \ 0) {\n                maxFactor = factor;\n            }\n            factor++;\n\
    \        }\n        return maxFactor;", "        long maxFactor = 1;\n       \
    \ long currentFactor = 2;\n        while (currentFactor <= n) {\n            if\
    \ (n % currentFactor == 0) {\n                maxFactor = currentFactor;\n   \
    \         }\n            currentFactor++;\n        }\n        return maxFactor;",
  "        long maxFactor = 1;\n        long currentFactor = 2;\n        while (n\
    \ > 1) {\n            while (n % currentFactor == 0) {\n                maxFactor\
    \ = currentFactor;\n                currentFactor++;\n            }\n        \
    \    n/=currentFactor;\n            currentFactor++;\n        }\n        return\
    \ maxFactor;", "        long maxFactor = n;\n        long factor = 2;\n      \
    \  while (factor < maxFactor) {\n            if (n % factor == 0) {\n        \
    \        maxFactor = factor;\n            }\n            factor++;\n        }\n\
    \        return maxFactor;", "        long largestPrimeFactor = n;\n        long\
    \ factor = 2;\n        while (factor <= largestPrimeFactor) {\n            if\
    \ (n % factor == 0) {\n                largestPrimeFactor = factor;\n        \
    \    }\n            factor++;\n        }\n        return largestPrimeFactor;",
  "        long maxFactor = 1;\n        long factor = 2;\n        while (factor <\
    \ n) {\n            if (n % factor == 0) {\n                maxFactor = factor;\n\
    \            }\n            factor++;\n        }\n        return maxFactor;",
  "        long maxFactor = 1;\n        long currentFactor = 2;\n        while (currentFactor\
    \ <= n) {\n            if (n % currentFactor == 0) {\n                maxFactor\
    \ = currentFactor;\n            }\n            currentFactor++;\n        }\n \
    \       return maxFactor;", "        long maxFactor = n;\n        long factor\
    \ = 2;\n        while (factor <= maxFactor) {\n            if (n % factor == 0)\
    \ {\n                maxFactor = factor;\n            }\n            factor++;\n\
    \        }\n        return maxFactor;", "        long maxFactor = 0;\n       \
    \ long currentFactor = 2;\n        while (currentFactor <= n) {\n            if\
    \ (n % currentFactor == 0) {\n                maxFactor = currentFactor;\n   \
    \         }\n            currentFactor++;\n        }\n        return maxFactor;",
  "        long maxFactor = n;\n        long factor = 2;\n        while (factor <\
    \ maxFactor) {\n            if (n % factor == 0) {\n                maxFactor\
    \ = factor;\n            }\n            factor++;\n        }\n        return maxFactor;",
  "        long largestPrimeFactor = n;\n        long maxFactor = n;\n        long\
    \ factor = 2;\n        while (factor <= maxFactor) {\n            if (n % factor\
    \ == 0) {\n                largestPrimeFactor = factor;\n                maxFactor\
    \ = n / factor;\n            }\n            factor++;\n        }\n        return\
    \ largestPrimeFactor;", "        long maxFactor = 1;\n        long factor = 2;\n\
    \        while (factor < n) {\n            if (n % factor == 0) {\n          \
    \      maxFactor = factor;\n            }\n            factor++;\n        }\n\
    \        return maxFactor;", "        long maxFactor = 1;\n        long currentFactor\
    \ = 2;\n        while (currentFactor <= n) {\n            if (n % currentFactor\
    \ == 0) {\n                maxFactor = currentFactor;\n                break;\n\
    \            }\n            currentFactor++;\n        }\n        return maxFactor;",
  "        long maxFactor = n;\n        long factor = 2;\n        while (factor <=\
    \ maxFactor) {\n            if (n % factor == 0) {\n                maxFactor\
    \ = factor;\n            }\n            factor++;\n        }\n        return maxFactor;",
  "        long maxFactor = 1;\n        long currentFactor = 2;\n        while (n\
    \ > 1) {\n            while (n % currentFactor == 0) {\n                maxFactor\
    \ = currentFactor;\n                currentFactor++;\n            }\n        \
    \    n/=currentFactor;\n            currentFactor++;\n        }\n        return\
    \ maxFactor;", "        long maxFactor = 1;\n        long currentFactor = 2;\n\
    \        while (currentFactor <= n) {\n            if (n % currentFactor == 0)\
    \ {\n                maxFactor = currentFactor;\n            }\n            currentFactor++;\n\
    \        }\n        return maxFactor;", "        long maxFactor = 1;\n       \
    \ long currentFactor = 2;\n        while (currentFactor <= n) {\n            if\
    \ (n % currentFactor == 0) {\n                maxFactor = currentFactor;\n   \
    \         }\n            currentFactor++;\n        }\n        return maxFactor;",
  "        long maxFactor = n;\n        long factor = 2;\n        while (factor <=\
    \ maxFactor) {\n            while (n % factor == 0) {\n                maxFactor\
    \ = factor;\n                factor++;\n            }\n            n--;\n    \
    \    }\n        return maxFactor;", "        long maxFactor = n;\n        long\
    \ factor = 2;\n        while (factor <= maxFactor) {\n            if (n % factor\
    \ == 0) {\n                maxFactor = factor;\n            } else {\n       \
    \         factor++;\n            }\n        }\n        return maxFactor;", " \
    \       long maxFactor = n;\n        long factor = 2;\n        while (factor <=\
    \ maxFactor) {\n            if (n % factor == 0) {\n                maxFactor\
    \ = factor;\n            }\n            factor++;\n        }\n        return maxFactor;",
  "        long maxFactor = n;\n        long factor = 2;\n        while (factor <=\
    \ maxFactor) {\n            if (n % factor == 0) {\n                maxFactor\
    \ = factor;\n            }\n            factor++;\n        }\n        return maxFactor;",
  "        long maxFactor = n;\n        long factor = 2;\n        while (factor <=\
    \ maxFactor) {\n            while (n % factor == 0) {\n                maxFactor\
    \ = factor;\n            }\n            factor++;\n        }\n        return maxFactor;",
  "        long largestPrimeFactor = n;\n        long currentPrime = 2;\n        while\
    \ (currentPrime < largestPrimeFactor) {\n            while (n % currentPrime ==\
    \ 0) {\n                largestPrimeFactor = currentPrime;\n                n\
    \ /= currentPrime;\n            }\n            currentPrime++;\n        }\n  \
    \      return largestPrimeFactor;", "        long maxFactor = 1;\n        long\
    \ currentFactor = 2;\n        while (currentFactor <= n) {\n            if (n\
    \ % currentFactor == 0) {\n                maxFactor = currentFactor;\n      \
    \      }\n            currentFactor++;\n        }\n        return maxFactor;",
  "        long largestPrimeFactor = 1;\n        long currentPrime = 2;\n        while\
    \ (currentPrime < n) {\n            if (n % currentPrime == 0) {\n           \
    \     largestPrimeFactor = currentPrime;\n                break;\n           \
    \ }\n            currentPrime++;\n        }\n        return largestPrimeFactor;",
  "        long maxFactor = n;\n        long factor = 2;\n        while (factor <=\
    \ maxFactor) {\n            if (n % factor == 0) {\n                maxFactor\
    \ = factor;\n            }\n            factor++;\n        }\n        return maxFactor;",
  "        long maxFactor = 1;\n        long currentFactor = 2;\n        while (currentFactor\
    \ <= n) {\n            if (n % currentFactor == 0) {\n                maxFactor\
    \ = currentFactor;\n            }\n            currentFactor++;\n        }\n \
    \       return maxFactor;", "        long maxFactor = 1;\n        long factor\
    \ = 2;\n        while (factor <= n) {\n            if (n % factor == 0) {\n  \
    \              maxFactor = factor;\n            }\n            factor++;\n   \
    \     }\n        return maxFactor;", "        long maxFactor = n;\n        long\
    \ factor = 2;\n        while (factor < maxFactor) {\n            if (n % factor\
    \ == 0) {\n                maxFactor = factor;\n            }\n            factor++;\n\
    \        }\n        return maxFactor;", "        long maxFactor = 1;\n       \
    \ long currentFactor = 2;\n        while (currentFactor <= n) {\n            if\
    \ (n % currentFactor == 0) {\n                maxFactor = currentFactor;\n   \
    \             break;\n            }\n            currentFactor++;\n        }\n\
    \        return maxFactor;", "        long maxFactor = n;\n        long factor\
    \ = 2;\n        while (factor < maxFactor) {\n            if (n % factor == 0)\
    \ {\n                maxFactor = factor;\n            }\n            factor++;\n\
    \        }\n        return maxFactor;", "        long maxFactor = n;\n       \
    \ long factor = 2;\n        while (factor <= maxFactor) {\n            if (n %\
    \ factor == 0) {\n                maxFactor = factor;\n            }\n       \
    \     factor++;\n        }\n        return maxFactor;", "        long maxFactor\
    \ = 1;\n        long factor = 2;\n        while (factor < n) {\n            if\
    \ (n % factor == 0) {\n                maxFactor = factor;\n            }\n  \
    \          factor++;\n        }\n        return maxFactor;"]
stop_tokens:
- "\n    }\n"
