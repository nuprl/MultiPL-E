language: cs
name: HumanEval_3_below_zero
results:
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You're given a list of deposit and withdrawal operations\
    \ on a bank account that starts with\n    // zero balance. Your task is to detect\
    \ if at any point the balance of account fallls below zero, and\n    // at that\
    \ point function should return True. Otherwise it should return False.\n    public\
    \ static bool BelowZero(List<long> operations) {\n        // Your code here\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(BelowZero((new\
    \ List<long>())) == (false));\n    Debug.Assert(BelowZero((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)-3L, (long)1L, (long)2L, (long)-3L}))) == (false));\n\
    \    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)2L, (long)-4L,\
    \ (long)5L, (long)6L}))) == (true));\n    Debug.Assert(BelowZero((new List<long>(new\
    \ long[]{(long)1L, (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L,\
    \ (long)-4L}))) == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-5L})))\
    \ == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L})))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpv88q_5wl.cs(12,24): error CS0161: ''Problem.BelowZero(List<long>)'': not
    all code paths return a value

    '
  timestamp: 1659977270
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You're given a list of deposit and withdrawal operations\
    \ on a bank account that starts with\n    // zero balance. Your task is to detect\
    \ if at any point the balance of account fallls below zero, and\n    // at that\
    \ point function should return True. Otherwise it should return False.\n    public\
    \ static bool BelowZero(List<long> operations) {\n        long balance = 0;\n\
    \        foreach (var operation in operations) {\n            long amount = operation;\n\
    \            if (amount < 0) {\n                balance = balance - amount;\n\
    \            } else {\n                balance = balance + amount;\n         \
    \   }\n        }\n        return balance < 0;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(BelowZero((new List<long>())) == (false));\n    Debug.Assert(BelowZero((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)-3L, (long)1L, (long)2L, (long)-3L})))\
    \ == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)-4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(BelowZero((new\
    \ List<long>(new long[]{(long)1L, (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L,\
    \ (long)4L, (long)-4L}))) == (false));\n    Debug.Assert(BelowZero((new List<long>(new\
    \ long[]{(long)1L, (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L,\
    \ (long)-5L}))) == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L})))\
    \ == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <e3cf9b7c3bd04288a0d3be6c238a3fee>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <e3cf9b7c3bd04288a0d3be6c238a3fee>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659977271
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You're given a list of deposit and withdrawal operations\
    \ on a bank account that starts with\n    // zero balance. Your task is to detect\
    \ if at any point the balance of account fallls below zero, and\n    // at that\
    \ point function should return True. Otherwise it should return False.\n    public\
    \ static bool BelowZero(List<long> operations) {\n        long balance = 0;\n\
    \        foreach (var operation in operations) {\n            long deposit = operation[0];\n\
    \            long withdrawal = operation[1];\n            if (deposit > withdrawal)\
    \ {\n                balance += deposit;\n            } else {\n             \
    \   balance -= withdrawal;\n            }\n        }\n        return balance <\
    \ 0;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(BelowZero((new\
    \ List<long>())) == (false));\n    Debug.Assert(BelowZero((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)-3L, (long)1L, (long)2L, (long)-3L}))) == (false));\n\
    \    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)2L, (long)-4L,\
    \ (long)5L, (long)6L}))) == (true));\n    Debug.Assert(BelowZero((new List<long>(new\
    \ long[]{(long)1L, (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L,\
    \ (long)-4L}))) == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-5L})))\
    \ == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L})))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp4yvxqdgl.cs(15,28): error CS0021: Cannot apply indexing with [] to an
    expression of type ''long''

    /tmp/tmp4yvxqdgl.cs(16,31): error CS0021: Cannot apply indexing with [] to an
    expression of type ''long''

    '
  timestamp: 1659977271
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You're given a list of deposit and withdrawal operations\
    \ on a bank account that starts with\n    // zero balance. Your task is to detect\
    \ if at any point the balance of account fallls below zero, and\n    // at that\
    \ point function should return True. Otherwise it should return False.\n    public\
    \ static bool BelowZero(List<long> operations) {\n        long balance = 0;\n\
    \        foreach (var operation in operations) {\n            switch (operation)\
    \ {\n                case Deposit:\n                    balance += 1;\n      \
    \              break;\n                case Withdraw:\n                    balance\
    \ -= 1;\n                    break;\n            }\n        }\n        return\
    \ balance < 0;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(BelowZero((new\
    \ List<long>())) == (false));\n    Debug.Assert(BelowZero((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)-3L, (long)1L, (long)2L, (long)-3L}))) == (false));\n\
    \    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)2L, (long)-4L,\
    \ (long)5L, (long)6L}))) == (true));\n    Debug.Assert(BelowZero((new List<long>(new\
    \ long[]{(long)1L, (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L,\
    \ (long)-4L}))) == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-5L})))\
    \ == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L})))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpk77zp5he.cs(16,22): error CS0103: The name ''Deposit'' does not exist
    in the current context

    /tmp/tmpk77zp5he.cs(19,22): error CS0103: The name ''Withdraw'' does not exist
    in the current context

    '
  timestamp: 1659977271
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You're given a list of deposit and withdrawal operations\
    \ on a bank account that starts with\n    // zero balance. Your task is to detect\
    \ if at any point the balance of account fallls below zero, and\n    // at that\
    \ point function should return True. Otherwise it should return False.\n    public\
    \ static bool BelowZero(List<long> operations) {\n        // Your code goes here\n\
    \        long balance = 0;\n        foreach (var operation in operations) {\n\
    \            if (operation == Deposit) {\n                balance += operations[operations.Count\
    \ - 1];\n            }\n            else if (operation == Withdraw) {\n      \
    \          balance -= operations[operations.Count - 1];\n            }\n     \
    \   }\n        return balance < 0;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(BelowZero((new List<long>())) == (false));\n    Debug.Assert(BelowZero((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)-3L, (long)1L, (long)2L, (long)-3L})))\
    \ == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)-4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(BelowZero((new\
    \ List<long>(new long[]{(long)1L, (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L,\
    \ (long)4L, (long)-4L}))) == (false));\n    Debug.Assert(BelowZero((new List<long>(new\
    \ long[]{(long)1L, (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L,\
    \ (long)-5L}))) == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L})))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpzv6m0rpv.cs(16,30): error CS0103: The name ''Deposit'' does not exist
    in the current context

    /tmp/tmpzv6m0rpv.cs(19,35): error CS0103: The name ''Withdraw'' does not exist
    in the current context

    '
  timestamp: 1659977271
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You're given a list of deposit and withdrawal operations\
    \ on a bank account that starts with\n    // zero balance. Your task is to detect\
    \ if at any point the balance of account fallls below zero, and\n    // at that\
    \ point function should return True. Otherwise it should return False.\n    public\
    \ static bool BelowZero(List<long> operations) {\n        // Your code here\n\
    \        long balance = 0;\n        foreach (var operation in operations) {\n\
    \            if (operation == 1) {\n                balance += operation;\n  \
    \          }\n            else if (operation == -1) {\n                balance\
    \ -= operation;\n            }\n            else if (operation == 0) {\n     \
    \           if (balance < 0) {\n                    return true;\n           \
    \     }\n                else {\n                    return false;\n         \
    \       }\n            }\n        }\n        return false;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(BelowZero((new List<long>()))\
    \ == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)-3L, (long)1L, (long)2L, (long)-3L}))) == (false));\n    Debug.Assert(BelowZero((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)-4L, (long)5L, (long)6L})))\
    \ == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L})))\
    \ == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-5L})))\
    \ == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L})))\
    \ == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d52b48f05e564cf59b59d837475d2a8f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d52b48f05e564cf59b59d837475d2a8f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659977271
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You're given a list of deposit and withdrawal operations\
    \ on a bank account that starts with\n    // zero balance. Your task is to detect\
    \ if at any point the balance of account fallls below zero, and\n    // at that\
    \ point function should return True. Otherwise it should return False.\n    public\
    \ static bool BelowZero(List<long> operations) {\n        long balance = 0;\n\
    \        foreach (var operation in operations) {\n            if (operation ==\
    \ Deposit) {\n                balance += operation.Amount;\n            } else\
    \ if (operation == Withdraw) {\n                balance -= operation.Amount;\n\
    \            }\n        }\n        return balance < 0;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(BelowZero((new List<long>())) ==\
    \ (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)-3L, (long)1L, (long)2L, (long)-3L}))) == (false));\n    Debug.Assert(BelowZero((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)-4L, (long)5L, (long)6L})))\
    \ == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L})))\
    \ == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-5L})))\
    \ == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L})))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpw4sbewol.cs(15,30): error CS0103: The name ''Deposit'' does not exist
    in the current context

    /tmp/tmpw4sbewol.cs(16,38): error CS1061: ''long'' does not contain a definition
    for ''Amount'' and no accessible extension method ''Amount'' accepting a first
    argument of type ''long'' could be found (are you missing a using directive or
    an assembly reference?)

    /tmp/tmpw4sbewol.cs(17,37): error CS0103: The name ''Withdraw'' does not exist
    in the current context

    /tmp/tmpw4sbewol.cs(18,38): error CS1061: ''long'' does not contain a definition
    for ''Amount'' and no accessible extension method ''Amount'' accepting a first
    argument of type ''long'' could be found (are you missing a using directive or
    an assembly reference?)

    '
  timestamp: 1659977271
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You're given a list of deposit and withdrawal operations\
    \ on a bank account that starts with\n    // zero balance. Your task is to detect\
    \ if at any point the balance of account fallls below zero, and\n    // at that\
    \ point function should return True. Otherwise it should return False.\n    public\
    \ static bool BelowZero(List<long> operations) {\n        // Your code here\n\
    \        long balance = 0;\n        foreach (var operation in operations) {\n\
    \            if (operation.Operation == Operation.Deposit) {\n               \
    \ balance += operation.Amount;\n            } else if (operation.Operation ==\
    \ Operation.Withdraw) {\n                balance -= operation.Amount;\n      \
    \      }\n        }\n        return balance < 0;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(BelowZero((new List<long>())) == (false));\n\
    \    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)2L, (long)-3L,\
    \ (long)1L, (long)2L, (long)-3L}))) == (false));\n    Debug.Assert(BelowZero((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)-4L, (long)5L, (long)6L})))\
    \ == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L})))\
    \ == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-5L})))\
    \ == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L})))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp20olh1oh.cs(16,27): error CS1061: ''long'' does not contain a definition
    for ''Operation'' and no accessible extension method ''Operation'' accepting a
    first argument of type ''long'' could be found (are you missing a using directive
    or an assembly reference?)

    /tmp/tmp20olh1oh.cs(16,40): error CS0103: The name ''Operation'' does not exist
    in the current context

    /tmp/tmp20olh1oh.cs(17,38): error CS1061: ''long'' does not contain a definition
    for ''Amount'' and no accessible extension method ''Amount'' accepting a first
    argument of type ''long'' could be found (are you missing a using directive or
    an assembly reference?)

    /tmp/tmp20olh1oh.cs(18,34): error CS1061: ''long'' does not contain a definition
    for ''Operation'' and no accessible extension method ''Operation'' accepting a
    first argument of type ''long'' could be found (are you missing a using directive
    or an assembly reference?)

    /tmp/tmp20olh1oh.cs(18,47): error CS0103: The name ''Operation'' does not exist
    in the current context

    /tmp/tmp20olh1oh.cs(19,38): error CS1061: ''long'' does not contain a definition
    for ''Amount'' and no accessible extension method ''Amount'' accepting a first
    argument of type ''long'' could be found (are you missing a using directive or
    an assembly reference?)

    '
  timestamp: 1659977271
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You're given a list of deposit and withdrawal operations\
    \ on a bank account that starts with\n    // zero balance. Your task is to detect\
    \ if at any point the balance of account fallls below zero, and\n    // at that\
    \ point function should return True. Otherwise it should return False.\n    public\
    \ static bool BelowZero(List<long> operations) {\n        long balance = 0;\n\
    \        foreach (var operation in operations) {\n            if (operation ==\
    \ Deposit) {\n                balance += operation.Amount;\n            } else\
    \ if (operation == Withdraw) {\n                balance -= operation.Amount;\n\
    \            }\n        }\n        return balance < 0;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(BelowZero((new List<long>())) ==\
    \ (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)-3L, (long)1L, (long)2L, (long)-3L}))) == (false));\n    Debug.Assert(BelowZero((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)-4L, (long)5L, (long)6L})))\
    \ == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L})))\
    \ == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-5L})))\
    \ == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L})))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpw4sbewol.cs(15,30): error CS0103: The name ''Deposit'' does not exist
    in the current context

    /tmp/tmpw4sbewol.cs(16,38): error CS1061: ''long'' does not contain a definition
    for ''Amount'' and no accessible extension method ''Amount'' accepting a first
    argument of type ''long'' could be found (are you missing a using directive or
    an assembly reference?)

    /tmp/tmpw4sbewol.cs(17,37): error CS0103: The name ''Withdraw'' does not exist
    in the current context

    /tmp/tmpw4sbewol.cs(18,38): error CS1061: ''long'' does not contain a definition
    for ''Amount'' and no accessible extension method ''Amount'' accepting a first
    argument of type ''long'' could be found (are you missing a using directive or
    an assembly reference?)

    '
  timestamp: 1659977271
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You're given a list of deposit and withdrawal operations\
    \ on a bank account that starts with\n    // zero balance. Your task is to detect\
    \ if at any point the balance of account fallls below zero, and\n    // at that\
    \ point function should return True. Otherwise it should return False.\n    public\
    \ static bool BelowZero(List<long> operations) {\n        long balance = operations.First();\n\
    \        foreach (var operation in operations.Skip(1)) {\n            if (balance\
    \ < 0)\n                return true;\n            balance += operation;\n    \
    \    }\n        return false;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(BelowZero((new List<long>())) == (false));\n    Debug.Assert(BelowZero((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)-3L, (long)1L, (long)2L, (long)-3L})))\
    \ == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)-4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(BelowZero((new\
    \ List<long>(new long[]{(long)1L, (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L,\
    \ (long)4L, (long)-4L}))) == (false));\n    Debug.Assert(BelowZero((new List<long>(new\
    \ long[]{(long)1L, (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L,\
    \ (long)-5L}))) == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L})))\
    \ == (true));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.InvalidOperationException: Sequence contains\
    \ no elements\n  at System.Linq.Enumerable.First[TSource] (System.Collections.Generic.IEnumerable`1[T]\
    \ source) [0x00010] in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem.BelowZero\
    \ (System.Collections.Generic.List`1[T] operations) [0x00001] in <072a6c949ade414f8083455169ea03f6>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <072a6c949ade414f8083455169ea03f6>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.InvalidOperationException: Sequence\
    \ contains no elements\n  at System.Linq.Enumerable.First[TSource] (System.Collections.Generic.IEnumerable`1[T]\
    \ source) [0x00010] in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem.BelowZero\
    \ (System.Collections.Generic.List`1[T] operations) [0x00001] in <072a6c949ade414f8083455169ea03f6>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <072a6c949ade414f8083455169ea03f6>:0\
    \ \n"
  stdout: ''
  timestamp: 1659977271
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You're given a list of deposit and withdrawal operations\
    \ on a bank account that starts with\n    // zero balance. Your task is to detect\
    \ if at any point the balance of account fallls below zero, and\n    // at that\
    \ point function should return True. Otherwise it should return False.\n    public\
    \ static bool BelowZero(List<long> operations) {\n        // Your code goes here\n\
    \        long balance = 0;\n        foreach (var operation in operations) {\n\
    \            if (operation == Deposit) {\n                balance += operation.Amount;\n\
    \            } else if (operation == Withdraw) {\n                balance -= operation.Amount;\n\
    \            }\n        }\n        return balance < 0;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(BelowZero((new List<long>())) ==\
    \ (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)-3L, (long)1L, (long)2L, (long)-3L}))) == (false));\n    Debug.Assert(BelowZero((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)-4L, (long)5L, (long)6L})))\
    \ == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L})))\
    \ == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-5L})))\
    \ == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L})))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp4v_v_6_2.cs(16,30): error CS0103: The name ''Deposit'' does not exist
    in the current context

    /tmp/tmp4v_v_6_2.cs(17,38): error CS1061: ''long'' does not contain a definition
    for ''Amount'' and no accessible extension method ''Amount'' accepting a first
    argument of type ''long'' could be found (are you missing a using directive or
    an assembly reference?)

    /tmp/tmp4v_v_6_2.cs(18,37): error CS0103: The name ''Withdraw'' does not exist
    in the current context

    /tmp/tmp4v_v_6_2.cs(19,38): error CS1061: ''long'' does not contain a definition
    for ''Amount'' and no accessible extension method ''Amount'' accepting a first
    argument of type ''long'' could be found (are you missing a using directive or
    an assembly reference?)

    '
  timestamp: 1659977270
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You're given a list of deposit and withdrawal operations\
    \ on a bank account that starts with\n    // zero balance. Your task is to detect\
    \ if at any point the balance of account fallls below zero, and\n    // at that\
    \ point function should return True. Otherwise it should return False.\n    public\
    \ static bool BelowZero(List<long> operations) {\n        long balance = operations.Sum();\n\
    \        if (balance < 0) {\n            return true;\n        }\n        return\
    \ false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(BelowZero((new\
    \ List<long>())) == (false));\n    Debug.Assert(BelowZero((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)-3L, (long)1L, (long)2L, (long)-3L}))) == (false));\n\
    \    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)2L, (long)-4L,\
    \ (long)5L, (long)6L}))) == (true));\n    Debug.Assert(BelowZero((new List<long>(new\
    \ long[]{(long)1L, (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L,\
    \ (long)-4L}))) == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-5L})))\
    \ == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L})))\
    \ == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <270d355c99ae46c8a6f2c1e388b408ea>:0 \n"
  stdout: ''
  timestamp: 1659977271
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You're given a list of deposit and withdrawal operations\
    \ on a bank account that starts with\n    // zero balance. Your task is to detect\
    \ if at any point the balance of account fallls below zero, and\n    // at that\
    \ point function should return True. Otherwise it should return False.\n    public\
    \ static bool BelowZero(List<long> operations) {\n        long balance = operations.Sum();\n\
    \        if (balance < 0) {\n            return true;\n        }\n        return\
    \ false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(BelowZero((new\
    \ List<long>())) == (false));\n    Debug.Assert(BelowZero((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)-3L, (long)1L, (long)2L, (long)-3L}))) == (false));\n\
    \    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)2L, (long)-4L,\
    \ (long)5L, (long)6L}))) == (true));\n    Debug.Assert(BelowZero((new List<long>(new\
    \ long[]{(long)1L, (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L,\
    \ (long)-4L}))) == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-5L})))\
    \ == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L})))\
    \ == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <270d355c99ae46c8a6f2c1e388b408ea>:0 \n"
  stdout: ''
  timestamp: 1659977271
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You're given a list of deposit and withdrawal operations\
    \ on a bank account that starts with\n    // zero balance. Your task is to detect\
    \ if at any point the balance of account fallls below zero, and\n    // at that\
    \ point function should return True. Otherwise it should return False.\n    public\
    \ static bool BelowZero(List<long> operations) {\n        long balance = 0;\n\
    \        foreach (var operation in operations) {\n            balance = balance\
    \ + operation;\n            if (balance < 0) {\n                return true;\n\
    \            }\n        }\n        return false;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(BelowZero((new List<long>())) == (false));\n\
    \    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)2L, (long)-3L,\
    \ (long)1L, (long)2L, (long)-3L}))) == (false));\n    Debug.Assert(BelowZero((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)-4L, (long)5L, (long)6L})))\
    \ == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L})))\
    \ == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-5L})))\
    \ == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L})))\
    \ == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977271
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You're given a list of deposit and withdrawal operations\
    \ on a bank account that starts with\n    // zero balance. Your task is to detect\
    \ if at any point the balance of account fallls below zero, and\n    // at that\
    \ point function should return True. Otherwise it should return False.\n    public\
    \ static bool BelowZero(List<long> operations) {\n        long balance = 0;\n\
    \        foreach (var operation in operations) {\n            if (operation.OperationType\
    \ == OperationType.Deposit) {\n                balance += operation.Amount;\n\
    \            } else if (operation.OperationType == OperationType.Withdraw) {\n\
    \                balance -= operation.Amount;\n            }\n        }\n    \
    \    return balance < 0;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(BelowZero((new List<long>())) == (false));\n    Debug.Assert(BelowZero((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)-3L, (long)1L, (long)2L, (long)-3L})))\
    \ == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)-4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(BelowZero((new\
    \ List<long>(new long[]{(long)1L, (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L,\
    \ (long)4L, (long)-4L}))) == (false));\n    Debug.Assert(BelowZero((new List<long>(new\
    \ long[]{(long)1L, (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L,\
    \ (long)-5L}))) == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L})))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpn3pcb0y9.cs(15,27): error CS1061: ''long'' does not contain a definition
    for ''OperationType'' and no accessible extension method ''OperationType'' accepting
    a first argument of type ''long'' could be found (are you missing a using directive
    or an assembly reference?)

    /tmp/tmpn3pcb0y9.cs(15,44): error CS0103: The name ''OperationType'' does not
    exist in the current context

    /tmp/tmpn3pcb0y9.cs(16,38): error CS1061: ''long'' does not contain a definition
    for ''Amount'' and no accessible extension method ''Amount'' accepting a first
    argument of type ''long'' could be found (are you missing a using directive or
    an assembly reference?)

    /tmp/tmpn3pcb0y9.cs(17,34): error CS1061: ''long'' does not contain a definition
    for ''OperationType'' and no accessible extension method ''OperationType'' accepting
    a first argument of type ''long'' could be found (are you missing a using directive
    or an assembly reference?)

    /tmp/tmpn3pcb0y9.cs(17,51): error CS0103: The name ''OperationType'' does not
    exist in the current context

    /tmp/tmpn3pcb0y9.cs(18,38): error CS1061: ''long'' does not contain a definition
    for ''Amount'' and no accessible extension method ''Amount'' accepting a first
    argument of type ''long'' could be found (are you missing a using directive or
    an assembly reference?)

    '
  timestamp: 1659977270
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You're given a list of deposit and withdrawal operations\
    \ on a bank account that starts with\n    // zero balance. Your task is to detect\
    \ if at any point the balance of account fallls below zero, and\n    // at that\
    \ point function should return True. Otherwise it should return False.\n    public\
    \ static bool BelowZero(List<long> operations) {\n        // Your code here\n\
    \        long balance = 0;\n        foreach (var operation in operations) {\n\
    \            long amount = operation;\n            if (amount > 0) {\n       \
    \         balance += amount;\n            }\n            else if (amount < 0)\
    \ {\n                balance -= amount;\n            }\n        }\n        return\
    \ balance < 0;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(BelowZero((new\
    \ List<long>())) == (false));\n    Debug.Assert(BelowZero((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)-3L, (long)1L, (long)2L, (long)-3L}))) == (false));\n\
    \    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)2L, (long)-4L,\
    \ (long)5L, (long)6L}))) == (true));\n    Debug.Assert(BelowZero((new List<long>(new\
    \ long[]{(long)1L, (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L,\
    \ (long)-4L}))) == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-5L})))\
    \ == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L})))\
    \ == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a2b348caae0b443887aece9a9a0702a9>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a2b348caae0b443887aece9a9a0702a9>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659977271
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You're given a list of deposit and withdrawal operations\
    \ on a bank account that starts with\n    // zero balance. Your task is to detect\
    \ if at any point the balance of account fallls below zero, and\n    // at that\
    \ point function should return True. Otherwise it should return False.\n    public\
    \ static bool BelowZero(List<long> operations) {\n        // Your code here\n\
    \        long balance = 0;\n        foreach (var operation in operations) {\n\
    \            if (operation.Operation.Equals(\"deposit\")) {\n                balance\
    \ += operation.Amount;\n            }\n            else if (operation.Operation.Equals(\"\
    withdraw\")) {\n                balance -= operation.Amount;\n            }\n\
    \        }\n        return balance < 0;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(BelowZero((new List<long>())) == (false));\n    Debug.Assert(BelowZero((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)-3L, (long)1L, (long)2L, (long)-3L})))\
    \ == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)-4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(BelowZero((new\
    \ List<long>(new long[]{(long)1L, (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L,\
    \ (long)4L, (long)-4L}))) == (false));\n    Debug.Assert(BelowZero((new List<long>(new\
    \ long[]{(long)1L, (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L,\
    \ (long)-5L}))) == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L})))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpdfsmp1nx.cs(16,27): error CS1061: ''long'' does not contain a definition
    for ''Operation'' and no accessible extension method ''Operation'' accepting a
    first argument of type ''long'' could be found (are you missing a using directive
    or an assembly reference?)

    /tmp/tmpdfsmp1nx.cs(17,38): error CS1061: ''long'' does not contain a definition
    for ''Amount'' and no accessible extension method ''Amount'' accepting a first
    argument of type ''long'' could be found (are you missing a using directive or
    an assembly reference?)

    /tmp/tmpdfsmp1nx.cs(19,32): error CS1061: ''long'' does not contain a definition
    for ''Operation'' and no accessible extension method ''Operation'' accepting a
    first argument of type ''long'' could be found (are you missing a using directive
    or an assembly reference?)

    /tmp/tmpdfsmp1nx.cs(20,38): error CS1061: ''long'' does not contain a definition
    for ''Amount'' and no accessible extension method ''Amount'' accepting a first
    argument of type ''long'' could be found (are you missing a using directive or
    an assembly reference?)

    '
  timestamp: 1659977271
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You're given a list of deposit and withdrawal operations\
    \ on a bank account that starts with\n    // zero balance. Your task is to detect\
    \ if at any point the balance of account fallls below zero, and\n    // at that\
    \ point function should return True. Otherwise it should return False.\n    public\
    \ static bool BelowZero(List<long> operations) {\n        // Your code here\n\
    \        long balance = operations.Sum(x => x);\n        return balance < 0;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(BelowZero((new\
    \ List<long>())) == (false));\n    Debug.Assert(BelowZero((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)-3L, (long)1L, (long)2L, (long)-3L}))) == (false));\n\
    \    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)2L, (long)-4L,\
    \ (long)5L, (long)6L}))) == (true));\n    Debug.Assert(BelowZero((new List<long>(new\
    \ long[]{(long)1L, (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L,\
    \ (long)-4L}))) == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-5L})))\
    \ == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L})))\
    \ == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a6bec069eb4f47c895fade055101f5ad>:0 \n"
  stdout: ''
  timestamp: 1659977271
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You're given a list of deposit and withdrawal operations\
    \ on a bank account that starts with\n    // zero balance. Your task is to detect\
    \ if at any point the balance of account fallls below zero, and\n    // at that\
    \ point function should return True. Otherwise it should return False.\n    public\
    \ static bool BelowZero(List<long> operations) {\n        long balance = 0;\n\
    \        foreach (var operation in operations) {\n            long amount = operation;\n\
    \            if (amount < 0) {\n                balance = balance - amount;\n\
    \            } else {\n                balance = balance + amount;\n         \
    \   }\n        }\n        return balance < 0;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(BelowZero((new List<long>())) == (false));\n    Debug.Assert(BelowZero((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)-3L, (long)1L, (long)2L, (long)-3L})))\
    \ == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)-4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(BelowZero((new\
    \ List<long>(new long[]{(long)1L, (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L,\
    \ (long)4L, (long)-4L}))) == (false));\n    Debug.Assert(BelowZero((new List<long>(new\
    \ long[]{(long)1L, (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L,\
    \ (long)-5L}))) == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L})))\
    \ == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <e3cf9b7c3bd04288a0d3be6c238a3fee>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <e3cf9b7c3bd04288a0d3be6c238a3fee>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659977271
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You're given a list of deposit and withdrawal operations\
    \ on a bank account that starts with\n    // zero balance. Your task is to detect\
    \ if at any point the balance of account fallls below zero, and\n    // at that\
    \ point function should return True. Otherwise it should return False.\n    public\
    \ static bool BelowZero(List<long> operations) {\n        long balance = 0;\n\
    \        foreach (var op in operations) {\n            balance = balance + op;\n\
    \            if (balance < 0) {\n                return true;\n            }\n\
    \        }\n        return false;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(BelowZero((new List<long>())) == (false));\n    Debug.Assert(BelowZero((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)-3L, (long)1L, (long)2L, (long)-3L})))\
    \ == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)-4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(BelowZero((new\
    \ List<long>(new long[]{(long)1L, (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L,\
    \ (long)4L, (long)-4L}))) == (false));\n    Debug.Assert(BelowZero((new List<long>(new\
    \ long[]{(long)1L, (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L,\
    \ (long)-5L}))) == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L})))\
    \ == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977271
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You're given a list of deposit and withdrawal operations\
    \ on a bank account that starts with\n    // zero balance. Your task is to detect\
    \ if at any point the balance of account fallls below zero, and\n    // at that\
    \ point function should return True. Otherwise it should return False.\n    public\
    \ static bool BelowZero(List<long> operations) {\n        long balance = 0;\n\
    \        foreach (long operation in operations) {\n            if (operation <\
    \ 0)\n                return false;\n            balance += operation;\n     \
    \   }\n        return balance < 0;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(BelowZero((new List<long>())) == (false));\n    Debug.Assert(BelowZero((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)-3L, (long)1L, (long)2L, (long)-3L})))\
    \ == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)-4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(BelowZero((new\
    \ List<long>(new long[]{(long)1L, (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L,\
    \ (long)4L, (long)-4L}))) == (false));\n    Debug.Assert(BelowZero((new List<long>(new\
    \ long[]{(long)1L, (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L,\
    \ (long)-5L}))) == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L})))\
    \ == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <14839d6ca509412781129a2e212fe77c>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <14839d6ca509412781129a2e212fe77c>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659977271
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You're given a list of deposit and withdrawal operations\
    \ on a bank account that starts with\n    // zero balance. Your task is to detect\
    \ if at any point the balance of account fallls below zero, and\n    // at that\
    \ point function should return True. Otherwise it should return False.\n    public\
    \ static bool BelowZero(List<long> operations) {\n        long balance = operations.Sum();\n\
    \        return balance < 0;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(BelowZero((new List<long>())) == (false));\n    Debug.Assert(BelowZero((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)-3L, (long)1L, (long)2L, (long)-3L})))\
    \ == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)-4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(BelowZero((new\
    \ List<long>(new long[]{(long)1L, (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L,\
    \ (long)4L, (long)-4L}))) == (false));\n    Debug.Assert(BelowZero((new List<long>(new\
    \ long[]{(long)1L, (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L,\
    \ (long)-5L}))) == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L})))\
    \ == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <01777425a6274e0da651fa719a3f2c54>:0 \n"
  stdout: ''
  timestamp: 1659977271
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You're given a list of deposit and withdrawal operations\
    \ on a bank account that starts with\n    // zero balance. Your task is to detect\
    \ if at any point the balance of account fallls below zero, and\n    // at that\
    \ point function should return True. Otherwise it should return False.\n    public\
    \ static bool BelowZero(List<long> operations) {\n        long balance = 0;\n\
    \        foreach (long operation in operations) {\n            balance = balance\
    \ + operation;\n            if (balance < 0) {\n                return true;\n\
    \            }\n        }\n        return false;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(BelowZero((new List<long>())) == (false));\n\
    \    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)2L, (long)-3L,\
    \ (long)1L, (long)2L, (long)-3L}))) == (false));\n    Debug.Assert(BelowZero((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)-4L, (long)5L, (long)6L})))\
    \ == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L})))\
    \ == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-5L})))\
    \ == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L})))\
    \ == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977271
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You're given a list of deposit and withdrawal operations\
    \ on a bank account that starts with\n    // zero balance. Your task is to detect\
    \ if at any point the balance of account fallls below zero, and\n    // at that\
    \ point function should return True. Otherwise it should return False.\n    public\
    \ static bool BelowZero(List<long> operations) {\n        long balance = 0;\n\
    \        foreach (var operation in operations) {\n            if (operation ==\
    \ Deposit) {\n                balance += 1;\n            } else if (operation\
    \ == Withdraw) {\n                balance -= 1;\n            }\n        }\n  \
    \      return balance < 0;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(BelowZero((new List<long>())) == (false));\n    Debug.Assert(BelowZero((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)-3L, (long)1L, (long)2L, (long)-3L})))\
    \ == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)-4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(BelowZero((new\
    \ List<long>(new long[]{(long)1L, (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L,\
    \ (long)4L, (long)-4L}))) == (false));\n    Debug.Assert(BelowZero((new List<long>(new\
    \ long[]{(long)1L, (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L,\
    \ (long)-5L}))) == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L})))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmphnna2qxr.cs(15,30): error CS0103: The name ''Deposit'' does not exist
    in the current context

    /tmp/tmphnna2qxr.cs(17,37): error CS0103: The name ''Withdraw'' does not exist
    in the current context

    '
  timestamp: 1659977271
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You're given a list of deposit and withdrawal operations\
    \ on a bank account that starts with\n    // zero balance. Your task is to detect\
    \ if at any point the balance of account fallls below zero, and\n    // at that\
    \ point function should return True. Otherwise it should return False.\n    public\
    \ static bool BelowZero(List<long> operations) {\n        long balance = 0;\n\
    \        foreach (var operation in operations) {\n            if (operation ==\
    \ Deposit) {\n                balance += 1;\n            } else if (operation\
    \ == Withdraw) {\n                balance -= 1;\n            }\n        }\n  \
    \      return balance < 0;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(BelowZero((new List<long>())) == (false));\n    Debug.Assert(BelowZero((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)-3L, (long)1L, (long)2L, (long)-3L})))\
    \ == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)-4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(BelowZero((new\
    \ List<long>(new long[]{(long)1L, (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L,\
    \ (long)4L, (long)-4L}))) == (false));\n    Debug.Assert(BelowZero((new List<long>(new\
    \ long[]{(long)1L, (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L,\
    \ (long)-5L}))) == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L})))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmphnna2qxr.cs(15,30): error CS0103: The name ''Deposit'' does not exist
    in the current context

    /tmp/tmphnna2qxr.cs(17,37): error CS0103: The name ''Withdraw'' does not exist
    in the current context

    '
  timestamp: 1659977271
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You're given a list of deposit and withdrawal operations\
    \ on a bank account that starts with\n    // zero balance. Your task is to detect\
    \ if at any point the balance of account fallls below zero, and\n    // at that\
    \ point function should return True. Otherwise it should return False.\n    public\
    \ static bool BelowZero(List<long> operations) {\n        long balance = 0;\n\
    \        foreach (var operation in operations) {\n            switch (operation)\
    \ {\n                case Deposit:\n                    balance += 1;\n      \
    \              break;\n                case Withdraw:\n                    balance\
    \ -= 1;\n                    break;\n            }\n        }\n        return\
    \ balance < 0;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(BelowZero((new\
    \ List<long>())) == (false));\n    Debug.Assert(BelowZero((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)-3L, (long)1L, (long)2L, (long)-3L}))) == (false));\n\
    \    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)2L, (long)-4L,\
    \ (long)5L, (long)6L}))) == (true));\n    Debug.Assert(BelowZero((new List<long>(new\
    \ long[]{(long)1L, (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L,\
    \ (long)-4L}))) == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-5L})))\
    \ == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L})))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpk77zp5he.cs(16,22): error CS0103: The name ''Deposit'' does not exist
    in the current context

    /tmp/tmpk77zp5he.cs(19,22): error CS0103: The name ''Withdraw'' does not exist
    in the current context

    '
  timestamp: 1659977271
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You're given a list of deposit and withdrawal operations\
    \ on a bank account that starts with\n    // zero balance. Your task is to detect\
    \ if at any point the balance of account fallls below zero, and\n    // at that\
    \ point function should return True. Otherwise it should return False.\n    public\
    \ static bool BelowZero(List<long> operations) {\n        long balance = 0;\n\
    \        foreach (var operation in operations) {\n            if (operation ==\
    \ Deposit) {\n                balance += 1;\n            } else if (operation\
    \ == Withdraw) {\n                balance -= 1;\n            }\n        }\n  \
    \      return balance < 0;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(BelowZero((new List<long>())) == (false));\n    Debug.Assert(BelowZero((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)-3L, (long)1L, (long)2L, (long)-3L})))\
    \ == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)-4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(BelowZero((new\
    \ List<long>(new long[]{(long)1L, (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L,\
    \ (long)4L, (long)-4L}))) == (false));\n    Debug.Assert(BelowZero((new List<long>(new\
    \ long[]{(long)1L, (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L,\
    \ (long)-5L}))) == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L})))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmphnna2qxr.cs(15,30): error CS0103: The name ''Deposit'' does not exist
    in the current context

    /tmp/tmphnna2qxr.cs(17,37): error CS0103: The name ''Withdraw'' does not exist
    in the current context

    '
  timestamp: 1659977271
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You're given a list of deposit and withdrawal operations\
    \ on a bank account that starts with\n    // zero balance. Your task is to detect\
    \ if at any point the balance of account fallls below zero, and\n    // at that\
    \ point function should return True. Otherwise it should return False.\n    public\
    \ static bool BelowZero(List<long> operations) {\n        long balance = 0;\n\
    \        foreach (var operation in operations) {\n            if (operation.Operation.Equals(\"\
    deposit\")) {\n                balance += operation.Amount;\n            }\n \
    \           else if (operation.Operation.Equals(\"withdraw\")) {\n           \
    \     balance -= operation.Amount;\n            }\n        }\n        return balance\
    \ < 0;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(BelowZero((new\
    \ List<long>())) == (false));\n    Debug.Assert(BelowZero((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)-3L, (long)1L, (long)2L, (long)-3L}))) == (false));\n\
    \    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)2L, (long)-4L,\
    \ (long)5L, (long)6L}))) == (true));\n    Debug.Assert(BelowZero((new List<long>(new\
    \ long[]{(long)1L, (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L,\
    \ (long)-4L}))) == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-5L})))\
    \ == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L})))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp882nym8y.cs(15,27): error CS1061: ''long'' does not contain a definition
    for ''Operation'' and no accessible extension method ''Operation'' accepting a
    first argument of type ''long'' could be found (are you missing a using directive
    or an assembly reference?)

    /tmp/tmp882nym8y.cs(16,38): error CS1061: ''long'' does not contain a definition
    for ''Amount'' and no accessible extension method ''Amount'' accepting a first
    argument of type ''long'' could be found (are you missing a using directive or
    an assembly reference?)

    /tmp/tmp882nym8y.cs(18,32): error CS1061: ''long'' does not contain a definition
    for ''Operation'' and no accessible extension method ''Operation'' accepting a
    first argument of type ''long'' could be found (are you missing a using directive
    or an assembly reference?)

    /tmp/tmp882nym8y.cs(19,38): error CS1061: ''long'' does not contain a definition
    for ''Amount'' and no accessible extension method ''Amount'' accepting a first
    argument of type ''long'' could be found (are you missing a using directive or
    an assembly reference?)

    '
  timestamp: 1659977271
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You're given a list of deposit and withdrawal operations\
    \ on a bank account that starts with\n    // zero balance. Your task is to detect\
    \ if at any point the balance of account fallls below zero, and\n    // at that\
    \ point function should return True. Otherwise it should return False.\n    public\
    \ static bool BelowZero(List<long> operations) {\n        long balance = 0;\n\
    \        foreach (var op in operations) {\n            if (op == Deposit) {\n\
    \                balance += opAmount;\n            } else if (op == Withdraw)\
    \ {\n                balance -= opAmount;\n            }\n        }\n        return\
    \ balance < 0;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(BelowZero((new\
    \ List<long>())) == (false));\n    Debug.Assert(BelowZero((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)-3L, (long)1L, (long)2L, (long)-3L}))) == (false));\n\
    \    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)2L, (long)-4L,\
    \ (long)5L, (long)6L}))) == (true));\n    Debug.Assert(BelowZero((new List<long>(new\
    \ long[]{(long)1L, (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L,\
    \ (long)-4L}))) == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-5L})))\
    \ == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L})))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp4w8_wc63.cs(15,23): error CS0103: The name ''Deposit'' does not exist
    in the current context

    /tmp/tmp4w8_wc63.cs(16,28): error CS0103: The name ''opAmount'' does not exist
    in the current context

    /tmp/tmp4w8_wc63.cs(17,30): error CS0103: The name ''Withdraw'' does not exist
    in the current context

    /tmp/tmp4w8_wc63.cs(18,28): error CS0103: The name ''opAmount'' does not exist
    in the current context

    '
  timestamp: 1659977271
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You're given a list of deposit and withdrawal operations\
    \ on a bank account that starts with\n    // zero balance. Your task is to detect\
    \ if at any point the balance of account fallls below zero, and\n    // at that\
    \ point function should return True. Otherwise it should return False.\n    public\
    \ static bool BelowZero(List<long> operations) {\n        // Your code here\n\
    \        long balance = 0;\n        foreach (var operation in operations) {\n\
    \            if (operation.OperationType == OperationType.Deposit) {\n       \
    \         balance += operation.Amount;\n            } else if (operation.OperationType\
    \ == OperationType.Withdraw) {\n                balance -= operation.Amount;\n\
    \            }\n        }\n        return balance < 0;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(BelowZero((new List<long>())) ==\
    \ (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)-3L, (long)1L, (long)2L, (long)-3L}))) == (false));\n    Debug.Assert(BelowZero((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)-4L, (long)5L, (long)6L})))\
    \ == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L})))\
    \ == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-5L})))\
    \ == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L})))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpxq3758mn.cs(16,27): error CS1061: ''long'' does not contain a definition
    for ''OperationType'' and no accessible extension method ''OperationType'' accepting
    a first argument of type ''long'' could be found (are you missing a using directive
    or an assembly reference?)

    /tmp/tmpxq3758mn.cs(16,44): error CS0103: The name ''OperationType'' does not
    exist in the current context

    /tmp/tmpxq3758mn.cs(17,38): error CS1061: ''long'' does not contain a definition
    for ''Amount'' and no accessible extension method ''Amount'' accepting a first
    argument of type ''long'' could be found (are you missing a using directive or
    an assembly reference?)

    /tmp/tmpxq3758mn.cs(18,34): error CS1061: ''long'' does not contain a definition
    for ''OperationType'' and no accessible extension method ''OperationType'' accepting
    a first argument of type ''long'' could be found (are you missing a using directive
    or an assembly reference?)

    /tmp/tmpxq3758mn.cs(18,51): error CS0103: The name ''OperationType'' does not
    exist in the current context

    /tmp/tmpxq3758mn.cs(19,38): error CS1061: ''long'' does not contain a definition
    for ''Amount'' and no accessible extension method ''Amount'' accepting a first
    argument of type ''long'' could be found (are you missing a using directive or
    an assembly reference?)

    '
  timestamp: 1659977271
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You're given a list of deposit and withdrawal operations\
    \ on a bank account that starts with\n    // zero balance. Your task is to detect\
    \ if at any point the balance of account fallls below zero, and\n    // at that\
    \ point function should return True. Otherwise it should return False.\n    public\
    \ static bool BelowZero(List<long> operations) {\n        long balance = operations.First();\n\
    \        foreach (long operation in operations.Skip(1))\n        {\n         \
    \   if (operation < 0)\n            {\n                return false;\n       \
    \     }\n            balance += operation;\n        }\n        return balance\
    \ < 0;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(BelowZero((new\
    \ List<long>())) == (false));\n    Debug.Assert(BelowZero((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)-3L, (long)1L, (long)2L, (long)-3L}))) == (false));\n\
    \    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)2L, (long)-4L,\
    \ (long)5L, (long)6L}))) == (true));\n    Debug.Assert(BelowZero((new List<long>(new\
    \ long[]{(long)1L, (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L,\
    \ (long)-4L}))) == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-5L})))\
    \ == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L})))\
    \ == (true));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.InvalidOperationException: Sequence contains\
    \ no elements\n  at System.Linq.Enumerable.First[TSource] (System.Collections.Generic.IEnumerable`1[T]\
    \ source) [0x00010] in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem.BelowZero\
    \ (System.Collections.Generic.List`1[T] operations) [0x00001] in <163378b73bf24c2aba5541cbaa7b5f3e>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <163378b73bf24c2aba5541cbaa7b5f3e>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.InvalidOperationException: Sequence\
    \ contains no elements\n  at System.Linq.Enumerable.First[TSource] (System.Collections.Generic.IEnumerable`1[T]\
    \ source) [0x00010] in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem.BelowZero\
    \ (System.Collections.Generic.List`1[T] operations) [0x00001] in <163378b73bf24c2aba5541cbaa7b5f3e>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <163378b73bf24c2aba5541cbaa7b5f3e>:0\
    \ \n"
  stdout: ''
  timestamp: 1659977271
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You're given a list of deposit and withdrawal operations\
    \ on a bank account that starts with\n    // zero balance. Your task is to detect\
    \ if at any point the balance of account fallls below zero, and\n    // at that\
    \ point function should return True. Otherwise it should return False.\n    public\
    \ static bool BelowZero(List<long> operations) {\n        long balance = 0;\n\
    \        foreach (var operation in operations) {\n            if (operation ==\
    \ Deposit) {\n                balance += 1;\n            } else if (operation\
    \ == Withdraw) {\n                balance -= 1;\n            }\n        }\n  \
    \      return balance < 0;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(BelowZero((new List<long>())) == (false));\n    Debug.Assert(BelowZero((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)-3L, (long)1L, (long)2L, (long)-3L})))\
    \ == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)-4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(BelowZero((new\
    \ List<long>(new long[]{(long)1L, (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L,\
    \ (long)4L, (long)-4L}))) == (false));\n    Debug.Assert(BelowZero((new List<long>(new\
    \ long[]{(long)1L, (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L,\
    \ (long)-5L}))) == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L})))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmphnna2qxr.cs(15,30): error CS0103: The name ''Deposit'' does not exist
    in the current context

    /tmp/tmphnna2qxr.cs(17,37): error CS0103: The name ''Withdraw'' does not exist
    in the current context

    '
  timestamp: 1659977271
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You're given a list of deposit and withdrawal operations\
    \ on a bank account that starts with\n    // zero balance. Your task is to detect\
    \ if at any point the balance of account fallls below zero, and\n    // at that\
    \ point function should return True. Otherwise it should return False.\n    public\
    \ static bool BelowZero(List<long> operations) {\n        // Your code goes here\n\
    \        long sum = 0;\n        foreach (var item in operations) {\n         \
    \   sum += item;\n        }\n        if (sum < 0)\n            return true;\n\
    \        else\n            return false;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(BelowZero((new List<long>())) == (false));\n    Debug.Assert(BelowZero((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)-3L, (long)1L, (long)2L, (long)-3L})))\
    \ == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)-4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(BelowZero((new\
    \ List<long>(new long[]{(long)1L, (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L,\
    \ (long)4L, (long)-4L}))) == (false));\n    Debug.Assert(BelowZero((new List<long>(new\
    \ long[]{(long)1L, (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L,\
    \ (long)-5L}))) == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L})))\
    \ == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <88d26d8942244f608e7c2b9530fea4f0>:0 \n"
  stdout: ''
  timestamp: 1659977271
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You're given a list of deposit and withdrawal operations\
    \ on a bank account that starts with\n    // zero balance. Your task is to detect\
    \ if at any point the balance of account fallls below zero, and\n    // at that\
    \ point function should return True. Otherwise it should return False.\n    public\
    \ static bool BelowZero(List<long> operations) {\n        // Your code goes here\n\
    \        long balance = 0;\n        foreach (var operation in operations) {\n\
    \            long amount = operation;\n            if (amount < 0) {\n       \
    \         balance = balance - amount;\n            } else {\n                balance\
    \ = balance + amount;\n            }\n        }\n        return balance < 0;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(BelowZero((new\
    \ List<long>())) == (false));\n    Debug.Assert(BelowZero((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)-3L, (long)1L, (long)2L, (long)-3L}))) == (false));\n\
    \    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)2L, (long)-4L,\
    \ (long)5L, (long)6L}))) == (true));\n    Debug.Assert(BelowZero((new List<long>(new\
    \ long[]{(long)1L, (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L,\
    \ (long)-4L}))) == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-5L})))\
    \ == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L})))\
    \ == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9626c85cb1404ae2926e9400658c35df>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9626c85cb1404ae2926e9400658c35df>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659977272
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You're given a list of deposit and withdrawal operations\
    \ on a bank account that starts with\n    // zero balance. Your task is to detect\
    \ if at any point the balance of account fallls below zero, and\n    // at that\
    \ point function should return True. Otherwise it should return False.\n    public\
    \ static bool BelowZero(List<long> operations) {\n        long balance = 0;\n\
    \        foreach (var operation in operations) {\n            switch (operation)\
    \ {\n                case Deposit:\n                    balance += 1;\n      \
    \              break;\n                case Withdraw:\n                    balance\
    \ -= 1;\n                    break;\n            }\n        }\n        return\
    \ balance < 0;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(BelowZero((new\
    \ List<long>())) == (false));\n    Debug.Assert(BelowZero((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)-3L, (long)1L, (long)2L, (long)-3L}))) == (false));\n\
    \    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)2L, (long)-4L,\
    \ (long)5L, (long)6L}))) == (true));\n    Debug.Assert(BelowZero((new List<long>(new\
    \ long[]{(long)1L, (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L,\
    \ (long)-4L}))) == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-5L})))\
    \ == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L})))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpk77zp5he.cs(16,22): error CS0103: The name ''Deposit'' does not exist
    in the current context

    /tmp/tmpk77zp5he.cs(19,22): error CS0103: The name ''Withdraw'' does not exist
    in the current context

    '
  timestamp: 1659977271
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You're given a list of deposit and withdrawal operations\
    \ on a bank account that starts with\n    // zero balance. Your task is to detect\
    \ if at any point the balance of account fallls below zero, and\n    // at that\
    \ point function should return True. Otherwise it should return False.\n    public\
    \ static bool BelowZero(List<long> operations) {\n        long balance = 0;\n\
    \        foreach (var operation in operations) {\n            switch (operation)\
    \ {\n                case Deposit:\n                    balance += operation.Amount;\n\
    \                    break;\n                case Withdraw:\n                \
    \    balance -= operation.Amount;\n                    break;\n            }\n\
    \        }\n        return balance < 0;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(BelowZero((new List<long>())) == (false));\n    Debug.Assert(BelowZero((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)-3L, (long)1L, (long)2L, (long)-3L})))\
    \ == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)-4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(BelowZero((new\
    \ List<long>(new long[]{(long)1L, (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L,\
    \ (long)4L, (long)-4L}))) == (false));\n    Debug.Assert(BelowZero((new List<long>(new\
    \ long[]{(long)1L, (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L,\
    \ (long)-5L}))) == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L})))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmptw977unr.cs(16,22): error CS0103: The name ''Deposit'' does not exist
    in the current context

    /tmp/tmptw977unr.cs(17,42): error CS1061: ''long'' does not contain a definition
    for ''Amount'' and no accessible extension method ''Amount'' accepting a first
    argument of type ''long'' could be found (are you missing a using directive or
    an assembly reference?)

    /tmp/tmptw977unr.cs(19,22): error CS0103: The name ''Withdraw'' does not exist
    in the current context

    /tmp/tmptw977unr.cs(20,42): error CS1061: ''long'' does not contain a definition
    for ''Amount'' and no accessible extension method ''Amount'' accepting a first
    argument of type ''long'' could be found (are you missing a using directive or
    an assembly reference?)

    '
  timestamp: 1659977271
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You're given a list of deposit and withdrawal operations\
    \ on a bank account that starts with\n    // zero balance. Your task is to detect\
    \ if at any point the balance of account fallls below zero, and\n    // at that\
    \ point function should return True. Otherwise it should return False.\n    public\
    \ static bool BelowZero(List<long> operations) {\n        // Your code here\n\
    \        long balance = operations.Sum();\n        if (balance < 0)\n        \
    \    return true;\n        else\n            return false;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(BelowZero((new List<long>()))\
    \ == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)-3L, (long)1L, (long)2L, (long)-3L}))) == (false));\n    Debug.Assert(BelowZero((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)-4L, (long)5L, (long)6L})))\
    \ == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L})))\
    \ == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-5L})))\
    \ == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L})))\
    \ == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <73fa3c75b2e0498aa5058cef24114e8c>:0 \n"
  stdout: ''
  timestamp: 1659977272
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You're given a list of deposit and withdrawal operations\
    \ on a bank account that starts with\n    // zero balance. Your task is to detect\
    \ if at any point the balance of account fallls below zero, and\n    // at that\
    \ point function should return True. Otherwise it should return False.\n    public\
    \ static bool BelowZero(List<long> operations) {\n        long balance = 0;\n\
    \        foreach (var operation in operations) {\n            long amount = operation;\n\
    \            if (amount < 0) {\n                throw new ArgumentException(\"\
    Negative amount is not allowed\");\n            }\n            balance = balance\
    \ + amount;\n        }\n        return balance < 0;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(BelowZero((new List<long>())) ==\
    \ (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)-3L, (long)1L, (long)2L, (long)-3L}))) == (false));\n    Debug.Assert(BelowZero((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)-4L, (long)5L, (long)6L})))\
    \ == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L})))\
    \ == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-5L})))\
    \ == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L})))\
    \ == (true));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentException: Negative amount is not\
    \ allowed\n  at Problem.BelowZero (System.Collections.Generic.List`1[T] operations)\
    \ [0x00025] in <e0f7681981a7469bbae21ded8a67081f>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x0002a] in <e0f7681981a7469bbae21ded8a67081f>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.ArgumentException: Negative amount is not allowed\n  at Problem.BelowZero\
    \ (System.Collections.Generic.List`1[T] operations) [0x00025] in <e0f7681981a7469bbae21ded8a67081f>:0\
    \ \n  at Problem.Main (System.String[] args) [0x0002a] in <e0f7681981a7469bbae21ded8a67081f>:0\
    \ \n"
  stdout: ''
  timestamp: 1659977272
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You're given a list of deposit and withdrawal operations\
    \ on a bank account that starts with\n    // zero balance. Your task is to detect\
    \ if at any point the balance of account fallls below zero, and\n    // at that\
    \ point function should return True. Otherwise it should return False.\n    public\
    \ static bool BelowZero(List<long> operations) {\n        // Your code here\n\
    \        long balance = 0;\n        foreach (var operation in operations) {\n\
    \            if (operation == Deposit) {\n                balance += operation.Amount;\n\
    \            } else if (operation == Withdraw) {\n                balance -= operation.Amount;\n\
    \            }\n        }\n        return balance < 0;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(BelowZero((new List<long>())) ==\
    \ (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)-3L, (long)1L, (long)2L, (long)-3L}))) == (false));\n    Debug.Assert(BelowZero((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)-4L, (long)5L, (long)6L})))\
    \ == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L})))\
    \ == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-5L})))\
    \ == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L})))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpmq21yh99.cs(16,30): error CS0103: The name ''Deposit'' does not exist
    in the current context

    /tmp/tmpmq21yh99.cs(17,38): error CS1061: ''long'' does not contain a definition
    for ''Amount'' and no accessible extension method ''Amount'' accepting a first
    argument of type ''long'' could be found (are you missing a using directive or
    an assembly reference?)

    /tmp/tmpmq21yh99.cs(18,37): error CS0103: The name ''Withdraw'' does not exist
    in the current context

    /tmp/tmpmq21yh99.cs(19,38): error CS1061: ''long'' does not contain a definition
    for ''Amount'' and no accessible extension method ''Amount'' accepting a first
    argument of type ''long'' could be found (are you missing a using directive or
    an assembly reference?)

    '
  timestamp: 1659977272
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You're given a list of deposit and withdrawal operations\
    \ on a bank account that starts with\n    // zero balance. Your task is to detect\
    \ if at any point the balance of account fallls below zero, and\n    // at that\
    \ point function should return True. Otherwise it should return False.\n    public\
    \ static bool BelowZero(List<long> operations) {\n        long balance = 0;\n\
    \        foreach (var operation in operations) {\n            if (operation.Operation.Equals(\"\
    deposit\")) {\n                balance += operation.Amount;\n            } else\
    \ if (operation.Operation.Equals(\"withdraw\")) {\n                balance -=\
    \ operation.Amount;\n            }\n        }\n        return balance < 0;\n \
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(BelowZero((new\
    \ List<long>())) == (false));\n    Debug.Assert(BelowZero((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)-3L, (long)1L, (long)2L, (long)-3L}))) == (false));\n\
    \    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)2L, (long)-4L,\
    \ (long)5L, (long)6L}))) == (true));\n    Debug.Assert(BelowZero((new List<long>(new\
    \ long[]{(long)1L, (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L,\
    \ (long)-4L}))) == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-5L})))\
    \ == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L})))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpb0bb01d8.cs(15,27): error CS1061: ''long'' does not contain a definition
    for ''Operation'' and no accessible extension method ''Operation'' accepting a
    first argument of type ''long'' could be found (are you missing a using directive
    or an assembly reference?)

    /tmp/tmpb0bb01d8.cs(16,38): error CS1061: ''long'' does not contain a definition
    for ''Amount'' and no accessible extension method ''Amount'' accepting a first
    argument of type ''long'' could be found (are you missing a using directive or
    an assembly reference?)

    /tmp/tmpb0bb01d8.cs(17,34): error CS1061: ''long'' does not contain a definition
    for ''Operation'' and no accessible extension method ''Operation'' accepting a
    first argument of type ''long'' could be found (are you missing a using directive
    or an assembly reference?)

    /tmp/tmpb0bb01d8.cs(18,38): error CS1061: ''long'' does not contain a definition
    for ''Amount'' and no accessible extension method ''Amount'' accepting a first
    argument of type ''long'' could be found (are you missing a using directive or
    an assembly reference?)

    '
  timestamp: 1659977271
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You're given a list of deposit and withdrawal operations\
    \ on a bank account that starts with\n    // zero balance. Your task is to detect\
    \ if at any point the balance of account fallls below zero, and\n    // at that\
    \ point function should return True. Otherwise it should return False.\n    public\
    \ static bool BelowZero(List<long> operations) {\n        // Your code here\n\
    \        long balance = 0;\n        foreach (var operation in operations) {\n\
    \            if (operation.OperationType == OperationType.Deposit) {\n       \
    \         balance += operation.Amount;\n            }\n            else if (operation.OperationType\
    \ == OperationType.Withdraw) {\n                balance -= operation.Amount;\n\
    \            }\n        }\n        return balance < 0;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(BelowZero((new List<long>())) ==\
    \ (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)-3L, (long)1L, (long)2L, (long)-3L}))) == (false));\n    Debug.Assert(BelowZero((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)-4L, (long)5L, (long)6L})))\
    \ == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L})))\
    \ == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-5L})))\
    \ == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L})))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpjqaub0u7.cs(16,27): error CS1061: ''long'' does not contain a definition
    for ''OperationType'' and no accessible extension method ''OperationType'' accepting
    a first argument of type ''long'' could be found (are you missing a using directive
    or an assembly reference?)

    /tmp/tmpjqaub0u7.cs(16,44): error CS0103: The name ''OperationType'' does not
    exist in the current context

    /tmp/tmpjqaub0u7.cs(17,38): error CS1061: ''long'' does not contain a definition
    for ''Amount'' and no accessible extension method ''Amount'' accepting a first
    argument of type ''long'' could be found (are you missing a using directive or
    an assembly reference?)

    /tmp/tmpjqaub0u7.cs(19,32): error CS1061: ''long'' does not contain a definition
    for ''OperationType'' and no accessible extension method ''OperationType'' accepting
    a first argument of type ''long'' could be found (are you missing a using directive
    or an assembly reference?)

    /tmp/tmpjqaub0u7.cs(19,49): error CS0103: The name ''OperationType'' does not
    exist in the current context

    /tmp/tmpjqaub0u7.cs(20,38): error CS1061: ''long'' does not contain a definition
    for ''Amount'' and no accessible extension method ''Amount'' accepting a first
    argument of type ''long'' could be found (are you missing a using directive or
    an assembly reference?)

    '
  timestamp: 1659977271
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You're given a list of deposit and withdrawal operations\
    \ on a bank account that starts with\n    // zero balance. Your task is to detect\
    \ if at any point the balance of account fallls below zero, and\n    // at that\
    \ point function should return True. Otherwise it should return False.\n    public\
    \ static bool BelowZero(List<long> operations) {\n        long balance = operations.Sum();\n\
    \        if (balance < 0)\n            return true;\n        else\n          \
    \  return false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(BelowZero((new\
    \ List<long>())) == (false));\n    Debug.Assert(BelowZero((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)-3L, (long)1L, (long)2L, (long)-3L}))) == (false));\n\
    \    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)2L, (long)-4L,\
    \ (long)5L, (long)6L}))) == (true));\n    Debug.Assert(BelowZero((new List<long>(new\
    \ long[]{(long)1L, (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L,\
    \ (long)-4L}))) == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-5L})))\
    \ == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L})))\
    \ == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <0de71e94902445309c3efa5af52d4424>:0 \n"
  stdout: ''
  timestamp: 1659977272
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You're given a list of deposit and withdrawal operations\
    \ on a bank account that starts with\n    // zero balance. Your task is to detect\
    \ if at any point the balance of account fallls below zero, and\n    // at that\
    \ point function should return True. Otherwise it should return False.\n    public\
    \ static bool BelowZero(List<long> operations) {\n        long balance = operations.First();\n\
    \        foreach (var operation in operations.Skip(1))\n        {\n          \
    \  if (operation == Deposit)\n            {\n                balance += operation;\n\
    \            }\n            else if (operation == Withdraw)\n            {\n \
    \               balance -= operation;\n            }\n            else\n     \
    \       {\n                throw new ArgumentException(\"Operation not recognized\"\
    );\n            }\n            if (balance < 0)\n            {\n             \
    \   return true;\n            }\n        }\n        return false;\n    }\n   \
    \ public static void Main(string[] args) {\n    Debug.Assert(BelowZero((new List<long>()))\
    \ == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)-3L, (long)1L, (long)2L, (long)-3L}))) == (false));\n    Debug.Assert(BelowZero((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)-4L, (long)5L, (long)6L})))\
    \ == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L})))\
    \ == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-5L})))\
    \ == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L})))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpt09fefmx.cs(16,30): error CS0103: The name ''Deposit'' does not exist
    in the current context

    /tmp/tmpt09fefmx.cs(20,35): error CS0103: The name ''Withdraw'' does not exist
    in the current context

    '
  timestamp: 1659977271
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You're given a list of deposit and withdrawal operations\
    \ on a bank account that starts with\n    // zero balance. Your task is to detect\
    \ if at any point the balance of account fallls below zero, and\n    // at that\
    \ point function should return True. Otherwise it should return False.\n    public\
    \ static bool BelowZero(List<long> operations) {\n        // Your code here\n\
    \        long balance = 0;\n        foreach (var operation in operations) {\n\
    \            if (operation.Operator == Operator.Deposit) {\n                balance\
    \ += operation.Amount;\n            }\n            else if (operation.Operator\
    \ == Operator.Withdraw) {\n                balance -= operation.Amount;\n    \
    \        }\n        }\n        return balance < 0;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(BelowZero((new List<long>())) == (false));\n\
    \    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)2L, (long)-3L,\
    \ (long)1L, (long)2L, (long)-3L}))) == (false));\n    Debug.Assert(BelowZero((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)-4L, (long)5L, (long)6L})))\
    \ == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L})))\
    \ == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-5L})))\
    \ == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L})))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp5l_xn1db.cs(16,27): error CS1061: ''long'' does not contain a definition
    for ''Operator'' and no accessible extension method ''Operator'' accepting a first
    argument of type ''long'' could be found (are you missing a using directive or
    an assembly reference?)

    /tmp/tmp5l_xn1db.cs(16,39): error CS0103: The name ''Operator'' does not exist
    in the current context

    /tmp/tmp5l_xn1db.cs(17,38): error CS1061: ''long'' does not contain a definition
    for ''Amount'' and no accessible extension method ''Amount'' accepting a first
    argument of type ''long'' could be found (are you missing a using directive or
    an assembly reference?)

    /tmp/tmp5l_xn1db.cs(19,32): error CS1061: ''long'' does not contain a definition
    for ''Operator'' and no accessible extension method ''Operator'' accepting a first
    argument of type ''long'' could be found (are you missing a using directive or
    an assembly reference?)

    /tmp/tmp5l_xn1db.cs(19,44): error CS0103: The name ''Operator'' does not exist
    in the current context

    /tmp/tmp5l_xn1db.cs(20,38): error CS1061: ''long'' does not contain a definition
    for ''Amount'' and no accessible extension method ''Amount'' accepting a first
    argument of type ''long'' could be found (are you missing a using directive or
    an assembly reference?)

    '
  timestamp: 1659977271
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You're given a list of deposit and withdrawal operations\
    \ on a bank account that starts with\n    // zero balance. Your task is to detect\
    \ if at any point the balance of account fallls below zero, and\n    // at that\
    \ point function should return True. Otherwise it should return False.\n    public\
    \ static bool BelowZero(List<long> operations) {\n        long balance = 0;\n\
    \        foreach (var op in operations) {\n            long amount = op.Amount;\n\
    \            long deposit = op.Deposit;\n            long withdrawal = op.Withdrawal;\n\
    \            balance = balance + amount;\n            if (balance < 0) {\n   \
    \             return true;\n            }\n            if (balance > 0) {\n  \
    \              balance = balance - withdrawal;\n            }\n        }\n   \
    \     return false;\n    }\n    public static void Main(string[] args) {\n   \
    \ Debug.Assert(BelowZero((new List<long>())) == (false));\n    Debug.Assert(BelowZero((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)-3L, (long)1L, (long)2L, (long)-3L})))\
    \ == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)-4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(BelowZero((new\
    \ List<long>(new long[]{(long)1L, (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L,\
    \ (long)4L, (long)-4L}))) == (false));\n    Debug.Assert(BelowZero((new List<long>(new\
    \ long[]{(long)1L, (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L,\
    \ (long)-5L}))) == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L})))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp_uuk815d.cs(15,30): error CS1061: ''long'' does not contain a definition
    for ''Amount'' and no accessible extension method ''Amount'' accepting a first
    argument of type ''long'' could be found (are you missing a using directive or
    an assembly reference?)

    /tmp/tmp_uuk815d.cs(16,31): error CS1061: ''long'' does not contain a definition
    for ''Deposit'' and no accessible extension method ''Deposit'' accepting a first
    argument of type ''long'' could be found (are you missing a using directive or
    an assembly reference?)

    /tmp/tmp_uuk815d.cs(17,34): error CS1061: ''long'' does not contain a definition
    for ''Withdrawal'' and no accessible extension method ''Withdrawal'' accepting
    a first argument of type ''long'' could be found (are you missing a using directive
    or an assembly reference?)

    '
  timestamp: 1659977271
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You're given a list of deposit and withdrawal operations\
    \ on a bank account that starts with\n    // zero balance. Your task is to detect\
    \ if at any point the balance of account fallls below zero, and\n    // at that\
    \ point function should return True. Otherwise it should return False.\n    public\
    \ static bool BelowZero(List<long> operations) {\n        // Your code here\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(BelowZero((new\
    \ List<long>())) == (false));\n    Debug.Assert(BelowZero((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)-3L, (long)1L, (long)2L, (long)-3L}))) == (false));\n\
    \    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)2L, (long)-4L,\
    \ (long)5L, (long)6L}))) == (true));\n    Debug.Assert(BelowZero((new List<long>(new\
    \ long[]{(long)1L, (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L,\
    \ (long)-4L}))) == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-5L})))\
    \ == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L})))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpv88q_5wl.cs(12,24): error CS0161: ''Problem.BelowZero(List<long>)'': not
    all code paths return a value

    '
  timestamp: 1659977270
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You're given a list of deposit and withdrawal operations\
    \ on a bank account that starts with\n    // zero balance. Your task is to detect\
    \ if at any point the balance of account fallls below zero, and\n    // at that\
    \ point function should return True. Otherwise it should return False.\n    public\
    \ static bool BelowZero(List<long> operations) {\n        long balance = 0;\n\
    \        foreach (var operation in operations) {\n            if (operation.Operation.Equals(\"\
    deposit\")) {\n                balance += operation.Amount;\n            } else\
    \ if (operation.Operation.Equals(\"withdraw\")) {\n                balance -=\
    \ operation.Amount;\n            }\n        }\n        return balance < 0;\n \
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(BelowZero((new\
    \ List<long>())) == (false));\n    Debug.Assert(BelowZero((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)-3L, (long)1L, (long)2L, (long)-3L}))) == (false));\n\
    \    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)2L, (long)-4L,\
    \ (long)5L, (long)6L}))) == (true));\n    Debug.Assert(BelowZero((new List<long>(new\
    \ long[]{(long)1L, (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L,\
    \ (long)-4L}))) == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-5L})))\
    \ == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L})))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpb0bb01d8.cs(15,27): error CS1061: ''long'' does not contain a definition
    for ''Operation'' and no accessible extension method ''Operation'' accepting a
    first argument of type ''long'' could be found (are you missing a using directive
    or an assembly reference?)

    /tmp/tmpb0bb01d8.cs(16,38): error CS1061: ''long'' does not contain a definition
    for ''Amount'' and no accessible extension method ''Amount'' accepting a first
    argument of type ''long'' could be found (are you missing a using directive or
    an assembly reference?)

    /tmp/tmpb0bb01d8.cs(17,34): error CS1061: ''long'' does not contain a definition
    for ''Operation'' and no accessible extension method ''Operation'' accepting a
    first argument of type ''long'' could be found (are you missing a using directive
    or an assembly reference?)

    /tmp/tmpb0bb01d8.cs(18,38): error CS1061: ''long'' does not contain a definition
    for ''Amount'' and no accessible extension method ''Amount'' accepting a first
    argument of type ''long'' could be found (are you missing a using directive or
    an assembly reference?)

    '
  timestamp: 1659977271
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You're given a list of deposit and withdrawal operations\
    \ on a bank account that starts with\n    // zero balance. Your task is to detect\
    \ if at any point the balance of account fallls below zero, and\n    // at that\
    \ point function should return True. Otherwise it should return False.\n    public\
    \ static bool BelowZero(List<long> operations) {\n        // Your code here\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(BelowZero((new\
    \ List<long>())) == (false));\n    Debug.Assert(BelowZero((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)-3L, (long)1L, (long)2L, (long)-3L}))) == (false));\n\
    \    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)2L, (long)-4L,\
    \ (long)5L, (long)6L}))) == (true));\n    Debug.Assert(BelowZero((new List<long>(new\
    \ long[]{(long)1L, (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L,\
    \ (long)-4L}))) == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-5L})))\
    \ == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L})))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpv88q_5wl.cs(12,24): error CS0161: ''Problem.BelowZero(List<long>)'': not
    all code paths return a value

    '
  timestamp: 1659977270
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You're given a list of deposit and withdrawal operations\
    \ on a bank account that starts with\n    // zero balance. Your task is to detect\
    \ if at any point the balance of account fallls below zero, and\n    // at that\
    \ point function should return True. Otherwise it should return False.\n    public\
    \ static bool BelowZero(List<long> operations) {\n        // Your code here\n\
    \        long balance = 0;\n        foreach (var operation in operations) {\n\
    \            if (operation == 1) {\n                balance += operation;\n  \
    \          }\n            else if (operation == -1) {\n                balance\
    \ -= operation;\n            }\n        }\n        return balance < 0;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(BelowZero((new\
    \ List<long>())) == (false));\n    Debug.Assert(BelowZero((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)-3L, (long)1L, (long)2L, (long)-3L}))) == (false));\n\
    \    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)2L, (long)-4L,\
    \ (long)5L, (long)6L}))) == (true));\n    Debug.Assert(BelowZero((new List<long>(new\
    \ long[]{(long)1L, (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L,\
    \ (long)-4L}))) == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-5L})))\
    \ == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L})))\
    \ == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <f961c6e274424284a632eff28163e3d8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <f961c6e274424284a632eff28163e3d8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659977272
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You're given a list of deposit and withdrawal operations\
    \ on a bank account that starts with\n    // zero balance. Your task is to detect\
    \ if at any point the balance of account fallls below zero, and\n    // at that\
    \ point function should return True. Otherwise it should return False.\n    public\
    \ static bool BelowZero(List<long> operations) {\n        // Your code here\n\
    \        long balance = operations.Sum(x => x);\n        return balance < 0;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(BelowZero((new\
    \ List<long>())) == (false));\n    Debug.Assert(BelowZero((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)-3L, (long)1L, (long)2L, (long)-3L}))) == (false));\n\
    \    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)2L, (long)-4L,\
    \ (long)5L, (long)6L}))) == (true));\n    Debug.Assert(BelowZero((new List<long>(new\
    \ long[]{(long)1L, (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L,\
    \ (long)-4L}))) == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-5L})))\
    \ == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L})))\
    \ == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a6bec069eb4f47c895fade055101f5ad>:0 \n"
  stdout: ''
  timestamp: 1659977271
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You're given a list of deposit and withdrawal operations\
    \ on a bank account that starts with\n    // zero balance. Your task is to detect\
    \ if at any point the balance of account fallls below zero, and\n    // at that\
    \ point function should return True. Otherwise it should return False.\n    public\
    \ static bool BelowZero(List<long> operations) {\n        // Your code here\n\
    \        long balance = 0;\n        foreach (var operation in operations) {\n\
    \            balance = balance + operation;\n            if (balance < 0) {\n\
    \                return true;\n            }\n        }\n        return false;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(BelowZero((new\
    \ List<long>())) == (false));\n    Debug.Assert(BelowZero((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)-3L, (long)1L, (long)2L, (long)-3L}))) == (false));\n\
    \    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)2L, (long)-4L,\
    \ (long)5L, (long)6L}))) == (true));\n    Debug.Assert(BelowZero((new List<long>(new\
    \ long[]{(long)1L, (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L,\
    \ (long)-4L}))) == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-5L})))\
    \ == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L})))\
    \ == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977272
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You're given a list of deposit and withdrawal operations\
    \ on a bank account that starts with\n    // zero balance. Your task is to detect\
    \ if at any point the balance of account fallls below zero, and\n    // at that\
    \ point function should return True. Otherwise it should return False.\n    public\
    \ static bool BelowZero(List<long> operations) {\n        long balance = operations.Sum();\n\
    \        if (balance < 0) {\n            return true;\n        }\n        return\
    \ false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(BelowZero((new\
    \ List<long>())) == (false));\n    Debug.Assert(BelowZero((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)-3L, (long)1L, (long)2L, (long)-3L}))) == (false));\n\
    \    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)2L, (long)-4L,\
    \ (long)5L, (long)6L}))) == (true));\n    Debug.Assert(BelowZero((new List<long>(new\
    \ long[]{(long)1L, (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L,\
    \ (long)-4L}))) == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-5L})))\
    \ == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L})))\
    \ == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <270d355c99ae46c8a6f2c1e388b408ea>:0 \n"
  stdout: ''
  timestamp: 1659977271
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You're given a list of deposit and withdrawal operations\
    \ on a bank account that starts with\n    // zero balance. Your task is to detect\
    \ if at any point the balance of account fallls below zero, and\n    // at that\
    \ point function should return True. Otherwise it should return False.\n    public\
    \ static bool BelowZero(List<long> operations) {\n        long balance = 0;\n\
    \        foreach (var operation in operations) {\n            long amount = operation;\n\
    \            balance = balance + amount;\n            if (balance < 0) {\n   \
    \             return true;\n            }\n        }\n        return false;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(BelowZero((new\
    \ List<long>())) == (false));\n    Debug.Assert(BelowZero((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)-3L, (long)1L, (long)2L, (long)-3L}))) == (false));\n\
    \    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)2L, (long)-4L,\
    \ (long)5L, (long)6L}))) == (true));\n    Debug.Assert(BelowZero((new List<long>(new\
    \ long[]{(long)1L, (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L,\
    \ (long)-4L}))) == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-5L})))\
    \ == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L})))\
    \ == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977272
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You're given a list of deposit and withdrawal operations\
    \ on a bank account that starts with\n    // zero balance. Your task is to detect\
    \ if at any point the balance of account fallls below zero, and\n    // at that\
    \ point function should return True. Otherwise it should return False.\n    public\
    \ static bool BelowZero(List<long> operations) {\n        long balance = 0;\n\
    \        foreach (var operation in operations) {\n            long amount = operation;\n\
    \            if (amount < 0) {\n                balance -= amount;\n         \
    \   } else {\n                balance += amount;\n            }\n        }\n \
    \       return balance < 0;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(BelowZero((new List<long>())) == (false));\n    Debug.Assert(BelowZero((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)-3L, (long)1L, (long)2L, (long)-3L})))\
    \ == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)-4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(BelowZero((new\
    \ List<long>(new long[]{(long)1L, (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L,\
    \ (long)4L, (long)-4L}))) == (false));\n    Debug.Assert(BelowZero((new List<long>(new\
    \ long[]{(long)1L, (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L,\
    \ (long)-5L}))) == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L})))\
    \ == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <b1e8b835fb6a40aa8966a2ddb55c10e7>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <b1e8b835fb6a40aa8966a2ddb55c10e7>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659977272
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You're given a list of deposit and withdrawal operations\
    \ on a bank account that starts with\n    // zero balance. Your task is to detect\
    \ if at any point the balance of account fallls below zero, and\n    // at that\
    \ point function should return True. Otherwise it should return False.\n    public\
    \ static bool BelowZero(List<long> operations) {\n        long balance = operations.Sum();\n\
    \        return balance < 0;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(BelowZero((new List<long>())) == (false));\n    Debug.Assert(BelowZero((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)-3L, (long)1L, (long)2L, (long)-3L})))\
    \ == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)-4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(BelowZero((new\
    \ List<long>(new long[]{(long)1L, (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L,\
    \ (long)4L, (long)-4L}))) == (false));\n    Debug.Assert(BelowZero((new List<long>(new\
    \ long[]{(long)1L, (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L,\
    \ (long)-5L}))) == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L})))\
    \ == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <01777425a6274e0da651fa719a3f2c54>:0 \n"
  stdout: ''
  timestamp: 1659977271
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You're given a list of deposit and withdrawal operations\
    \ on a bank account that starts with\n    // zero balance. Your task is to detect\
    \ if at any point the balance of account fallls below zero, and\n    // at that\
    \ point function should return True. Otherwise it should return False.\n    public\
    \ static bool BelowZero(List<long> operations) {\n        long balance = 0;\n\
    \        foreach (long operation in operations) {\n            if (operation <\
    \ 0) {\n                balance -= operation;\n            }\n            else\
    \ if (operation > 0) {\n                balance += operation;\n            }\n\
    \            else {\n                throw new ArgumentException(\"Operation cannot\
    \ be both positive and negative\");\n            }\n        }\n        return\
    \ balance < 0;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(BelowZero((new\
    \ List<long>())) == (false));\n    Debug.Assert(BelowZero((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)-3L, (long)1L, (long)2L, (long)-3L}))) == (false));\n\
    \    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)2L, (long)-4L,\
    \ (long)5L, (long)6L}))) == (true));\n    Debug.Assert(BelowZero((new List<long>(new\
    \ long[]{(long)1L, (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L,\
    \ (long)-4L}))) == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-5L})))\
    \ == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L})))\
    \ == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c928fa26848045f1a76435c41c4277f2>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c928fa26848045f1a76435c41c4277f2>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659977272
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You're given a list of deposit and withdrawal operations\
    \ on a bank account that starts with\n    // zero balance. Your task is to detect\
    \ if at any point the balance of account fallls below zero, and\n    // at that\
    \ point function should return True. Otherwise it should return False.\n    public\
    \ static bool BelowZero(List<long> operations) {\n        long balance = operations.Sum();\n\
    \        return balance < 0;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(BelowZero((new List<long>())) == (false));\n    Debug.Assert(BelowZero((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)-3L, (long)1L, (long)2L, (long)-3L})))\
    \ == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)-4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(BelowZero((new\
    \ List<long>(new long[]{(long)1L, (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L,\
    \ (long)4L, (long)-4L}))) == (false));\n    Debug.Assert(BelowZero((new List<long>(new\
    \ long[]{(long)1L, (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L,\
    \ (long)-5L}))) == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L})))\
    \ == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <01777425a6274e0da651fa719a3f2c54>:0 \n"
  stdout: ''
  timestamp: 1659977271
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You're given a list of deposit and withdrawal operations\
    \ on a bank account that starts with\n    // zero balance. Your task is to detect\
    \ if at any point the balance of account fallls below zero, and\n    // at that\
    \ point function should return True. Otherwise it should return False.\n    public\
    \ static bool BelowZero(List<long> operations) {\n        // Your code here\n\
    \        long balance = operations.Sum();\n        if (balance < 0)\n        {\n\
    \            return true;\n        }\n        else\n        {\n            return\
    \ false;\n        }\n    }\n    public static void Main(string[] args) {\n   \
    \ Debug.Assert(BelowZero((new List<long>())) == (false));\n    Debug.Assert(BelowZero((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)-3L, (long)1L, (long)2L, (long)-3L})))\
    \ == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)-4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(BelowZero((new\
    \ List<long>(new long[]{(long)1L, (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L,\
    \ (long)4L, (long)-4L}))) == (false));\n    Debug.Assert(BelowZero((new List<long>(new\
    \ long[]{(long)1L, (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L,\
    \ (long)-5L}))) == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L})))\
    \ == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a4c55fe3fe1c4408941292a042786b70>:0 \n"
  stdout: ''
  timestamp: 1659977272
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You're given a list of deposit and withdrawal operations\
    \ on a bank account that starts with\n    // zero balance. Your task is to detect\
    \ if at any point the balance of account fallls below zero, and\n    // at that\
    \ point function should return True. Otherwise it should return False.\n    public\
    \ static bool BelowZero(List<long> operations) {\n        // Your code goes here\n\
    \        long balance = 0;\n        foreach (var operation in operations) {\n\
    \            if (operation == Deposit) {\n                balance += operations.ElementAt(operations.Count\
    \ - 1);\n            }\n            else if (operation == Withdraw) {\n      \
    \          balance -= operations.ElementAt(operations.Count - 1);\n          \
    \  }\n        }\n        return balance < 0;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(BelowZero((new List<long>())) == (false));\n    Debug.Assert(BelowZero((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)-3L, (long)1L, (long)2L, (long)-3L})))\
    \ == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)-4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(BelowZero((new\
    \ List<long>(new long[]{(long)1L, (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L,\
    \ (long)4L, (long)-4L}))) == (false));\n    Debug.Assert(BelowZero((new List<long>(new\
    \ long[]{(long)1L, (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L,\
    \ (long)-5L}))) == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L})))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpek4vc12q.cs(16,30): error CS0103: The name ''Deposit'' does not exist
    in the current context

    /tmp/tmpek4vc12q.cs(19,35): error CS0103: The name ''Withdraw'' does not exist
    in the current context

    '
  timestamp: 1659977272
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You're given a list of deposit and withdrawal operations\
    \ on a bank account that starts with\n    // zero balance. Your task is to detect\
    \ if at any point the balance of account fallls below zero, and\n    // at that\
    \ point function should return True. Otherwise it should return False.\n    public\
    \ static bool BelowZero(List<long> operations) {\n        // Your code here\n\
    \        long balance = 0;\n        foreach (var operation in operations) {\n\
    \            if (operation.Operation.Equals(\"deposit\")) {\n                balance\
    \ += operation.Amount;\n            }\n            else if (operation.Operation.Equals(\"\
    withdraw\")) {\n                balance -= operation.Amount;\n            }\n\
    \        }\n        return balance < 0;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(BelowZero((new List<long>())) == (false));\n    Debug.Assert(BelowZero((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)-3L, (long)1L, (long)2L, (long)-3L})))\
    \ == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)-4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(BelowZero((new\
    \ List<long>(new long[]{(long)1L, (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L,\
    \ (long)4L, (long)-4L}))) == (false));\n    Debug.Assert(BelowZero((new List<long>(new\
    \ long[]{(long)1L, (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L,\
    \ (long)-5L}))) == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L})))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpdfsmp1nx.cs(16,27): error CS1061: ''long'' does not contain a definition
    for ''Operation'' and no accessible extension method ''Operation'' accepting a
    first argument of type ''long'' could be found (are you missing a using directive
    or an assembly reference?)

    /tmp/tmpdfsmp1nx.cs(17,38): error CS1061: ''long'' does not contain a definition
    for ''Amount'' and no accessible extension method ''Amount'' accepting a first
    argument of type ''long'' could be found (are you missing a using directive or
    an assembly reference?)

    /tmp/tmpdfsmp1nx.cs(19,32): error CS1061: ''long'' does not contain a definition
    for ''Operation'' and no accessible extension method ''Operation'' accepting a
    first argument of type ''long'' could be found (are you missing a using directive
    or an assembly reference?)

    /tmp/tmpdfsmp1nx.cs(20,38): error CS1061: ''long'' does not contain a definition
    for ''Amount'' and no accessible extension method ''Amount'' accepting a first
    argument of type ''long'' could be found (are you missing a using directive or
    an assembly reference?)

    '
  timestamp: 1659977271
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You're given a list of deposit and withdrawal operations\
    \ on a bank account that starts with\n    // zero balance. Your task is to detect\
    \ if at any point the balance of account fallls below zero, and\n    // at that\
    \ point function should return True. Otherwise it should return False.\n    public\
    \ static bool BelowZero(List<long> operations) {\n        long balance = 0;\n\
    \        foreach (var operation in operations) {\n            if (operation.Operation\
    \ == Operation.Deposit) {\n                balance += operation.Amount;\n    \
    \        } else if (operation.Operation == Operation.Withdraw) {\n           \
    \     balance -= operation.Amount;\n            }\n        }\n        return balance\
    \ < 0;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(BelowZero((new\
    \ List<long>())) == (false));\n    Debug.Assert(BelowZero((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)-3L, (long)1L, (long)2L, (long)-3L}))) == (false));\n\
    \    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)2L, (long)-4L,\
    \ (long)5L, (long)6L}))) == (true));\n    Debug.Assert(BelowZero((new List<long>(new\
    \ long[]{(long)1L, (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L,\
    \ (long)-4L}))) == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-5L})))\
    \ == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L})))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpzkhs4mwt.cs(15,27): error CS1061: ''long'' does not contain a definition
    for ''Operation'' and no accessible extension method ''Operation'' accepting a
    first argument of type ''long'' could be found (are you missing a using directive
    or an assembly reference?)

    /tmp/tmpzkhs4mwt.cs(15,40): error CS0103: The name ''Operation'' does not exist
    in the current context

    /tmp/tmpzkhs4mwt.cs(16,38): error CS1061: ''long'' does not contain a definition
    for ''Amount'' and no accessible extension method ''Amount'' accepting a first
    argument of type ''long'' could be found (are you missing a using directive or
    an assembly reference?)

    /tmp/tmpzkhs4mwt.cs(17,34): error CS1061: ''long'' does not contain a definition
    for ''Operation'' and no accessible extension method ''Operation'' accepting a
    first argument of type ''long'' could be found (are you missing a using directive
    or an assembly reference?)

    /tmp/tmpzkhs4mwt.cs(17,47): error CS0103: The name ''Operation'' does not exist
    in the current context

    /tmp/tmpzkhs4mwt.cs(18,38): error CS1061: ''long'' does not contain a definition
    for ''Amount'' and no accessible extension method ''Amount'' accepting a first
    argument of type ''long'' could be found (are you missing a using directive or
    an assembly reference?)

    '
  timestamp: 1659977272
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You're given a list of deposit and withdrawal operations\
    \ on a bank account that starts with\n    // zero balance. Your task is to detect\
    \ if at any point the balance of account fallls below zero, and\n    // at that\
    \ point function should return True. Otherwise it should return False.\n    public\
    \ static bool BelowZero(List<long> operations) {\n        // Your code goes here\n\
    \        long balance = 0;\n        foreach (var operation in operations) {\n\
    \            long amount = operation;\n            if (amount < 0) {\n       \
    \         amount = 0;\n            }\n            balance += amount;\n       \
    \ }\n        return balance < 0;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(BelowZero((new List<long>())) == (false));\n    Debug.Assert(BelowZero((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)-3L, (long)1L, (long)2L, (long)-3L})))\
    \ == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)-4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(BelowZero((new\
    \ List<long>(new long[]{(long)1L, (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L,\
    \ (long)4L, (long)-4L}))) == (false));\n    Debug.Assert(BelowZero((new List<long>(new\
    \ long[]{(long)1L, (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L,\
    \ (long)-5L}))) == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L})))\
    \ == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9cc8b70636294c5792b0c371660b3274>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9cc8b70636294c5792b0c371660b3274>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659977272
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You're given a list of deposit and withdrawal operations\
    \ on a bank account that starts with\n    // zero balance. Your task is to detect\
    \ if at any point the balance of account fallls below zero, and\n    // at that\
    \ point function should return True. Otherwise it should return False.\n    public\
    \ static bool BelowZero(List<long> operations) {\n        long balance = operations.First();\n\
    \        foreach (var operation in operations.Skip(1))\n        {\n          \
    \  if (balance < 0)\n            {\n                return true;\n           \
    \ }\n            balance = balance - operation;\n        }\n        return false;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(BelowZero((new\
    \ List<long>())) == (false));\n    Debug.Assert(BelowZero((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)-3L, (long)1L, (long)2L, (long)-3L}))) == (false));\n\
    \    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)2L, (long)-4L,\
    \ (long)5L, (long)6L}))) == (true));\n    Debug.Assert(BelowZero((new List<long>(new\
    \ long[]{(long)1L, (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L,\
    \ (long)-4L}))) == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-5L})))\
    \ == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L})))\
    \ == (true));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.InvalidOperationException: Sequence contains\
    \ no elements\n  at System.Linq.Enumerable.First[TSource] (System.Collections.Generic.IEnumerable`1[T]\
    \ source) [0x00010] in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem.BelowZero\
    \ (System.Collections.Generic.List`1[T] operations) [0x00001] in <808599aeed254896b0fd87721d250026>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <808599aeed254896b0fd87721d250026>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.InvalidOperationException: Sequence\
    \ contains no elements\n  at System.Linq.Enumerable.First[TSource] (System.Collections.Generic.IEnumerable`1[T]\
    \ source) [0x00010] in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem.BelowZero\
    \ (System.Collections.Generic.List`1[T] operations) [0x00001] in <808599aeed254896b0fd87721d250026>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <808599aeed254896b0fd87721d250026>:0\
    \ \n"
  stdout: ''
  timestamp: 1659977272
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You're given a list of deposit and withdrawal operations\
    \ on a bank account that starts with\n    // zero balance. Your task is to detect\
    \ if at any point the balance of account fallls below zero, and\n    // at that\
    \ point function should return True. Otherwise it should return False.\n    public\
    \ static bool BelowZero(List<long> operations) {\n        // Your code goes here\n\
    \        long balance = operations.Sum();\n        if (balance < 0) {\n      \
    \      return true;\n        }\n        return false;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(BelowZero((new List<long>())) ==\
    \ (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)-3L, (long)1L, (long)2L, (long)-3L}))) == (false));\n    Debug.Assert(BelowZero((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)-4L, (long)5L, (long)6L})))\
    \ == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L})))\
    \ == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-5L})))\
    \ == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L})))\
    \ == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9f9fff4afd934f22bde40a2cf23272e5>:0 \n"
  stdout: ''
  timestamp: 1659977272
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You're given a list of deposit and withdrawal operations\
    \ on a bank account that starts with\n    // zero balance. Your task is to detect\
    \ if at any point the balance of account fallls below zero, and\n    // at that\
    \ point function should return True. Otherwise it should return False.\n    public\
    \ static bool BelowZero(List<long> operations) {\n        // Your code goes here\n\
    \        long balance = 0;\n        foreach (var operation in operations) {\n\
    \            if (operation == 1) {\n                balance += operation;\n  \
    \          }\n            else if (operation == -1) {\n                balance\
    \ -= operation;\n            }\n        }\n        return balance < 0;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(BelowZero((new\
    \ List<long>())) == (false));\n    Debug.Assert(BelowZero((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)-3L, (long)1L, (long)2L, (long)-3L}))) == (false));\n\
    \    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)2L, (long)-4L,\
    \ (long)5L, (long)6L}))) == (true));\n    Debug.Assert(BelowZero((new List<long>(new\
    \ long[]{(long)1L, (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L,\
    \ (long)-4L}))) == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-5L})))\
    \ == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L})))\
    \ == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <670e3b71ea9848b38c5238b6724a7ea5>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <670e3b71ea9848b38c5238b6724a7ea5>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659977272
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You're given a list of deposit and withdrawal operations\
    \ on a bank account that starts with\n    // zero balance. Your task is to detect\
    \ if at any point the balance of account fallls below zero, and\n    // at that\
    \ point function should return True. Otherwise it should return False.\n    public\
    \ static bool BelowZero(List<long> operations) {\n        long balance = operations.First();\n\
    \        foreach (long operation in operations.Skip(1))\n        {\n         \
    \   if (operation < 0)\n            {\n                balance = balance - operation;\n\
    \            }\n            else\n            {\n                balance = balance\
    \ + operation;\n            }\n            if (balance < 0)\n            {\n \
    \               return true;\n            }\n        }\n        return false;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(BelowZero((new\
    \ List<long>())) == (false));\n    Debug.Assert(BelowZero((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)-3L, (long)1L, (long)2L, (long)-3L}))) == (false));\n\
    \    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)2L, (long)-4L,\
    \ (long)5L, (long)6L}))) == (true));\n    Debug.Assert(BelowZero((new List<long>(new\
    \ long[]{(long)1L, (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L,\
    \ (long)-4L}))) == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-5L})))\
    \ == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L})))\
    \ == (true));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.InvalidOperationException: Sequence contains\
    \ no elements\n  at System.Linq.Enumerable.First[TSource] (System.Collections.Generic.IEnumerable`1[T]\
    \ source) [0x00010] in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem.BelowZero\
    \ (System.Collections.Generic.List`1[T] operations) [0x00001] in <b03a4855f324489180b2480a6af3ed01>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <b03a4855f324489180b2480a6af3ed01>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.InvalidOperationException: Sequence\
    \ contains no elements\n  at System.Linq.Enumerable.First[TSource] (System.Collections.Generic.IEnumerable`1[T]\
    \ source) [0x00010] in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem.BelowZero\
    \ (System.Collections.Generic.List`1[T] operations) [0x00001] in <b03a4855f324489180b2480a6af3ed01>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <b03a4855f324489180b2480a6af3ed01>:0\
    \ \n"
  stdout: ''
  timestamp: 1659977272
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You're given a list of deposit and withdrawal operations\
    \ on a bank account that starts with\n    // zero balance. Your task is to detect\
    \ if at any point the balance of account fallls below zero, and\n    // at that\
    \ point function should return True. Otherwise it should return False.\n    public\
    \ static bool BelowZero(List<long> operations) {\n        long balance = 0;\n\
    \        foreach (var operation in operations) {\n            switch (operation)\
    \ {\n                case Deposit:\n                    balance += 1;\n      \
    \              break;\n                case Withdraw:\n                    balance\
    \ -= 1;\n                    break;\n            }\n        }\n        return\
    \ balance < 0;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(BelowZero((new\
    \ List<long>())) == (false));\n    Debug.Assert(BelowZero((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)-3L, (long)1L, (long)2L, (long)-3L}))) == (false));\n\
    \    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)2L, (long)-4L,\
    \ (long)5L, (long)6L}))) == (true));\n    Debug.Assert(BelowZero((new List<long>(new\
    \ long[]{(long)1L, (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L,\
    \ (long)-4L}))) == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-5L})))\
    \ == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L})))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpk77zp5he.cs(16,22): error CS0103: The name ''Deposit'' does not exist
    in the current context

    /tmp/tmpk77zp5he.cs(19,22): error CS0103: The name ''Withdraw'' does not exist
    in the current context

    '
  timestamp: 1659977271
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You're given a list of deposit and withdrawal operations\
    \ on a bank account that starts with\n    // zero balance. Your task is to detect\
    \ if at any point the balance of account fallls below zero, and\n    // at that\
    \ point function should return True. Otherwise it should return False.\n    public\
    \ static bool BelowZero(List<long> operations) {\n        long balance = 0;\n\
    \        foreach (var operation in operations) {\n            switch (operation)\
    \ {\n                case 1:\n                    balance += 1;\n            \
    \        break;\n                case 2:\n                    balance -= 1;\n\
    \                    break;\n                case 3:\n                    balance\
    \ *= 2;\n                    break;\n                case 4:\n               \
    \     balance /= 2;\n                    break;\n            }\n        }\n  \
    \      return balance < 0;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(BelowZero((new List<long>())) == (false));\n    Debug.Assert(BelowZero((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)-3L, (long)1L, (long)2L, (long)-3L})))\
    \ == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)-4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(BelowZero((new\
    \ List<long>(new long[]{(long)1L, (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L,\
    \ (long)4L, (long)-4L}))) == (false));\n    Debug.Assert(BelowZero((new List<long>(new\
    \ long[]{(long)1L, (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L,\
    \ (long)-5L}))) == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L})))\
    \ == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <ffbed6a44a474714b188d2a84984706c>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <ffbed6a44a474714b188d2a84984706c>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659977272
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You're given a list of deposit and withdrawal operations\
    \ on a bank account that starts with\n    // zero balance. Your task is to detect\
    \ if at any point the balance of account fallls below zero, and\n    // at that\
    \ point function should return True. Otherwise it should return False.\n    public\
    \ static bool BelowZero(List<long> operations) {\n        // Your code here\n\
    \        long balance = 0;\n        foreach (var operation in operations) {\n\
    \            if (operation == Deposit) {\n                balance += operation.Amount;\n\
    \            } else if (operation == Withdraw) {\n                balance -= operation.Amount;\n\
    \            }\n        }\n        return balance < 0;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(BelowZero((new List<long>())) ==\
    \ (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)-3L, (long)1L, (long)2L, (long)-3L}))) == (false));\n    Debug.Assert(BelowZero((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)-4L, (long)5L, (long)6L})))\
    \ == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L})))\
    \ == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-5L})))\
    \ == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L})))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpmq21yh99.cs(16,30): error CS0103: The name ''Deposit'' does not exist
    in the current context

    /tmp/tmpmq21yh99.cs(17,38): error CS1061: ''long'' does not contain a definition
    for ''Amount'' and no accessible extension method ''Amount'' accepting a first
    argument of type ''long'' could be found (are you missing a using directive or
    an assembly reference?)

    /tmp/tmpmq21yh99.cs(18,37): error CS0103: The name ''Withdraw'' does not exist
    in the current context

    /tmp/tmpmq21yh99.cs(19,38): error CS1061: ''long'' does not contain a definition
    for ''Amount'' and no accessible extension method ''Amount'' accepting a first
    argument of type ''long'' could be found (are you missing a using directive or
    an assembly reference?)

    '
  timestamp: 1659977272
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You're given a list of deposit and withdrawal operations\
    \ on a bank account that starts with\n    // zero balance. Your task is to detect\
    \ if at any point the balance of account fallls below zero, and\n    // at that\
    \ point function should return True. Otherwise it should return False.\n    public\
    \ static bool BelowZero(List<long> operations) {\n        long balance = operations.Sum();\n\
    \        return balance < 0;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(BelowZero((new List<long>())) == (false));\n    Debug.Assert(BelowZero((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)-3L, (long)1L, (long)2L, (long)-3L})))\
    \ == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)-4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(BelowZero((new\
    \ List<long>(new long[]{(long)1L, (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L,\
    \ (long)4L, (long)-4L}))) == (false));\n    Debug.Assert(BelowZero((new List<long>(new\
    \ long[]{(long)1L, (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L,\
    \ (long)-5L}))) == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L})))\
    \ == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <01777425a6274e0da651fa719a3f2c54>:0 \n"
  stdout: ''
  timestamp: 1659977271
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You're given a list of deposit and withdrawal operations\
    \ on a bank account that starts with\n    // zero balance. Your task is to detect\
    \ if at any point the balance of account fallls below zero, and\n    // at that\
    \ point function should return True. Otherwise it should return False.\n    public\
    \ static bool BelowZero(List<long> operations) {\n        long balance = 0;\n\
    \        foreach (var operation in operations) {\n            switch (operation)\
    \ {\n                case Deposit:\n                    balance += 1;\n      \
    \              break;\n                case Withdraw:\n                    balance\
    \ -= 1;\n                    break;\n            }\n        }\n        return\
    \ balance < 0;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(BelowZero((new\
    \ List<long>())) == (false));\n    Debug.Assert(BelowZero((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)-3L, (long)1L, (long)2L, (long)-3L}))) == (false));\n\
    \    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)2L, (long)-4L,\
    \ (long)5L, (long)6L}))) == (true));\n    Debug.Assert(BelowZero((new List<long>(new\
    \ long[]{(long)1L, (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L,\
    \ (long)-4L}))) == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-5L})))\
    \ == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L})))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpk77zp5he.cs(16,22): error CS0103: The name ''Deposit'' does not exist
    in the current context

    /tmp/tmpk77zp5he.cs(19,22): error CS0103: The name ''Withdraw'' does not exist
    in the current context

    '
  timestamp: 1659977271
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You're given a list of deposit and withdrawal operations\
    \ on a bank account that starts with\n    // zero balance. Your task is to detect\
    \ if at any point the balance of account fallls below zero, and\n    // at that\
    \ point function should return True. Otherwise it should return False.\n    public\
    \ static bool BelowZero(List<long> operations) {\n        long balance = operations.Sum();\n\
    \        return balance < 0;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(BelowZero((new List<long>())) == (false));\n    Debug.Assert(BelowZero((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)-3L, (long)1L, (long)2L, (long)-3L})))\
    \ == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)-4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(BelowZero((new\
    \ List<long>(new long[]{(long)1L, (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L,\
    \ (long)4L, (long)-4L}))) == (false));\n    Debug.Assert(BelowZero((new List<long>(new\
    \ long[]{(long)1L, (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L,\
    \ (long)-5L}))) == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L})))\
    \ == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <01777425a6274e0da651fa719a3f2c54>:0 \n"
  stdout: ''
  timestamp: 1659977271
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You're given a list of deposit and withdrawal operations\
    \ on a bank account that starts with\n    // zero balance. Your task is to detect\
    \ if at any point the balance of account fallls below zero, and\n    // at that\
    \ point function should return True. Otherwise it should return False.\n    public\
    \ static bool BelowZero(List<long> operations) {\n        long balance = operations.Sum();\n\
    \        if (balance < 0) {\n            return true;\n        }\n        return\
    \ false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(BelowZero((new\
    \ List<long>())) == (false));\n    Debug.Assert(BelowZero((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)-3L, (long)1L, (long)2L, (long)-3L}))) == (false));\n\
    \    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)2L, (long)-4L,\
    \ (long)5L, (long)6L}))) == (true));\n    Debug.Assert(BelowZero((new List<long>(new\
    \ long[]{(long)1L, (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L,\
    \ (long)-4L}))) == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-5L})))\
    \ == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L})))\
    \ == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <270d355c99ae46c8a6f2c1e388b408ea>:0 \n"
  stdout: ''
  timestamp: 1659977271
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You're given a list of deposit and withdrawal operations\
    \ on a bank account that starts with\n    // zero balance. Your task is to detect\
    \ if at any point the balance of account fallls below zero, and\n    // at that\
    \ point function should return True. Otherwise it should return False.\n    public\
    \ static bool BelowZero(List<long> operations) {\n        long balance = operations.First();\n\
    \        foreach (var operation in operations.Skip(1))\n        {\n          \
    \  if (balance < 0)\n            {\n                return true;\n           \
    \ }\n            balance = balance - operation;\n        }\n        return false;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(BelowZero((new\
    \ List<long>())) == (false));\n    Debug.Assert(BelowZero((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)-3L, (long)1L, (long)2L, (long)-3L}))) == (false));\n\
    \    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)2L, (long)-4L,\
    \ (long)5L, (long)6L}))) == (true));\n    Debug.Assert(BelowZero((new List<long>(new\
    \ long[]{(long)1L, (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L,\
    \ (long)-4L}))) == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-5L})))\
    \ == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L})))\
    \ == (true));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.InvalidOperationException: Sequence contains\
    \ no elements\n  at System.Linq.Enumerable.First[TSource] (System.Collections.Generic.IEnumerable`1[T]\
    \ source) [0x00010] in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem.BelowZero\
    \ (System.Collections.Generic.List`1[T] operations) [0x00001] in <808599aeed254896b0fd87721d250026>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <808599aeed254896b0fd87721d250026>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.InvalidOperationException: Sequence\
    \ contains no elements\n  at System.Linq.Enumerable.First[TSource] (System.Collections.Generic.IEnumerable`1[T]\
    \ source) [0x00010] in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem.BelowZero\
    \ (System.Collections.Generic.List`1[T] operations) [0x00001] in <808599aeed254896b0fd87721d250026>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <808599aeed254896b0fd87721d250026>:0\
    \ \n"
  stdout: ''
  timestamp: 1659977272
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You're given a list of deposit and withdrawal operations\
    \ on a bank account that starts with\n    // zero balance. Your task is to detect\
    \ if at any point the balance of account fallls below zero, and\n    // at that\
    \ point function should return True. Otherwise it should return False.\n    public\
    \ static bool BelowZero(List<long> operations) {\n        // Your code here\n\
    \        long balance = 0;\n        foreach (var operation in operations) {\n\
    \            if (operation == Deposit) {\n                balance += operations.ElementAt(operations.Count\
    \ - 1);\n            }\n            if (operation == Withdraw) {\n           \
    \     balance -= operations.ElementAt(operations.Count - 1);\n            }\n\
    \        }\n        return balance < 0;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(BelowZero((new List<long>())) == (false));\n    Debug.Assert(BelowZero((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)-3L, (long)1L, (long)2L, (long)-3L})))\
    \ == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)-4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(BelowZero((new\
    \ List<long>(new long[]{(long)1L, (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L,\
    \ (long)4L, (long)-4L}))) == (false));\n    Debug.Assert(BelowZero((new List<long>(new\
    \ long[]{(long)1L, (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L,\
    \ (long)-5L}))) == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L})))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpg5bmjhox.cs(16,30): error CS0103: The name ''Deposit'' does not exist
    in the current context

    /tmp/tmpg5bmjhox.cs(19,30): error CS0103: The name ''Withdraw'' does not exist
    in the current context

    '
  timestamp: 1659977272
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You're given a list of deposit and withdrawal operations\
    \ on a bank account that starts with\n    // zero balance. Your task is to detect\
    \ if at any point the balance of account fallls below zero, and\n    // at that\
    \ point function should return True. Otherwise it should return False.\n    public\
    \ static bool BelowZero(List<long> operations) {\n        // Your code here\n\
    \        long sum = 0;\n        foreach (var item in operations) {\n         \
    \   sum += item;\n        }\n        if (sum < 0)\n            return true;\n\
    \        else\n            return false;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(BelowZero((new List<long>())) == (false));\n    Debug.Assert(BelowZero((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)-3L, (long)1L, (long)2L, (long)-3L})))\
    \ == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)-4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(BelowZero((new\
    \ List<long>(new long[]{(long)1L, (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L,\
    \ (long)4L, (long)-4L}))) == (false));\n    Debug.Assert(BelowZero((new List<long>(new\
    \ long[]{(long)1L, (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L,\
    \ (long)-5L}))) == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L})))\
    \ == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <f6975a1b397243018b3797167ae4991f>:0 \n"
  stdout: ''
  timestamp: 1659977272
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You're given a list of deposit and withdrawal operations\
    \ on a bank account that starts with\n    // zero balance. Your task is to detect\
    \ if at any point the balance of account fallls below zero, and\n    // at that\
    \ point function should return True. Otherwise it should return False.\n    public\
    \ static bool BelowZero(List<long> operations) {\n        long balance = 0;\n\
    \        foreach (long operation in operations) {\n            balance = balance\
    \ + operation;\n            if (balance < 0) {\n                return true;\n\
    \            }\n        }\n        return false;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(BelowZero((new List<long>())) == (false));\n\
    \    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)2L, (long)-3L,\
    \ (long)1L, (long)2L, (long)-3L}))) == (false));\n    Debug.Assert(BelowZero((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)-4L, (long)5L, (long)6L})))\
    \ == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L})))\
    \ == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-5L})))\
    \ == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L})))\
    \ == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977271
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You're given a list of deposit and withdrawal operations\
    \ on a bank account that starts with\n    // zero balance. Your task is to detect\
    \ if at any point the balance of account fallls below zero, and\n    // at that\
    \ point function should return True. Otherwise it should return False.\n    public\
    \ static bool BelowZero(List<long> operations) {\n        // Your code here\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(BelowZero((new\
    \ List<long>())) == (false));\n    Debug.Assert(BelowZero((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)-3L, (long)1L, (long)2L, (long)-3L}))) == (false));\n\
    \    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)2L, (long)-4L,\
    \ (long)5L, (long)6L}))) == (true));\n    Debug.Assert(BelowZero((new List<long>(new\
    \ long[]{(long)1L, (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L,\
    \ (long)-4L}))) == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-5L})))\
    \ == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L})))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpv88q_5wl.cs(12,24): error CS0161: ''Problem.BelowZero(List<long>)'': not
    all code paths return a value

    '
  timestamp: 1659977270
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You're given a list of deposit and withdrawal operations\
    \ on a bank account that starts with\n    // zero balance. Your task is to detect\
    \ if at any point the balance of account fallls below zero, and\n    // at that\
    \ point function should return True. Otherwise it should return False.\n    public\
    \ static bool BelowZero(List<long> operations) {\n        long balance = operations.Sum();\n\
    \        if (balance < 0)\n            return true;\n        return false;\n \
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(BelowZero((new\
    \ List<long>())) == (false));\n    Debug.Assert(BelowZero((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)-3L, (long)1L, (long)2L, (long)-3L}))) == (false));\n\
    \    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)2L, (long)-4L,\
    \ (long)5L, (long)6L}))) == (true));\n    Debug.Assert(BelowZero((new List<long>(new\
    \ long[]{(long)1L, (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L,\
    \ (long)-4L}))) == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-5L})))\
    \ == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L})))\
    \ == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <e0d80f6d6bee4d7d8842622ac0a7c86f>:0 \n"
  stdout: ''
  timestamp: 1659977272
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You're given a list of deposit and withdrawal operations\
    \ on a bank account that starts with\n    // zero balance. Your task is to detect\
    \ if at any point the balance of account fallls below zero, and\n    // at that\
    \ point function should return True. Otherwise it should return False.\n    public\
    \ static bool BelowZero(List<long> operations) {\n        long balance = operations.Sum();\n\
    \        return balance < 0;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(BelowZero((new List<long>())) == (false));\n    Debug.Assert(BelowZero((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)-3L, (long)1L, (long)2L, (long)-3L})))\
    \ == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)-4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(BelowZero((new\
    \ List<long>(new long[]{(long)1L, (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L,\
    \ (long)4L, (long)-4L}))) == (false));\n    Debug.Assert(BelowZero((new List<long>(new\
    \ long[]{(long)1L, (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L,\
    \ (long)-5L}))) == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L})))\
    \ == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <01777425a6274e0da651fa719a3f2c54>:0 \n"
  stdout: ''
  timestamp: 1659977271
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You're given a list of deposit and withdrawal operations\
    \ on a bank account that starts with\n    // zero balance. Your task is to detect\
    \ if at any point the balance of account fallls below zero, and\n    // at that\
    \ point function should return True. Otherwise it should return False.\n    public\
    \ static bool BelowZero(List<long> operations) {\n        long balance = 0;\n\
    \        foreach (var operation in operations) {\n            if (operation.Operation\
    \ == Operation.Deposit) {\n                balance += operation.Amount;\n    \
    \        } else if (operation.Operation == Operation.Withdraw) {\n           \
    \     balance -= operation.Amount;\n            }\n        }\n        return balance\
    \ < 0;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(BelowZero((new\
    \ List<long>())) == (false));\n    Debug.Assert(BelowZero((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)-3L, (long)1L, (long)2L, (long)-3L}))) == (false));\n\
    \    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)2L, (long)-4L,\
    \ (long)5L, (long)6L}))) == (true));\n    Debug.Assert(BelowZero((new List<long>(new\
    \ long[]{(long)1L, (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L,\
    \ (long)-4L}))) == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-5L})))\
    \ == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L})))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpzkhs4mwt.cs(15,27): error CS1061: ''long'' does not contain a definition
    for ''Operation'' and no accessible extension method ''Operation'' accepting a
    first argument of type ''long'' could be found (are you missing a using directive
    or an assembly reference?)

    /tmp/tmpzkhs4mwt.cs(15,40): error CS0103: The name ''Operation'' does not exist
    in the current context

    /tmp/tmpzkhs4mwt.cs(16,38): error CS1061: ''long'' does not contain a definition
    for ''Amount'' and no accessible extension method ''Amount'' accepting a first
    argument of type ''long'' could be found (are you missing a using directive or
    an assembly reference?)

    /tmp/tmpzkhs4mwt.cs(17,34): error CS1061: ''long'' does not contain a definition
    for ''Operation'' and no accessible extension method ''Operation'' accepting a
    first argument of type ''long'' could be found (are you missing a using directive
    or an assembly reference?)

    /tmp/tmpzkhs4mwt.cs(17,47): error CS0103: The name ''Operation'' does not exist
    in the current context

    /tmp/tmpzkhs4mwt.cs(18,38): error CS1061: ''long'' does not contain a definition
    for ''Amount'' and no accessible extension method ''Amount'' accepting a first
    argument of type ''long'' could be found (are you missing a using directive or
    an assembly reference?)

    '
  timestamp: 1659977272
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You're given a list of deposit and withdrawal operations\
    \ on a bank account that starts with\n    // zero balance. Your task is to detect\
    \ if at any point the balance of account fallls below zero, and\n    // at that\
    \ point function should return True. Otherwise it should return False.\n    public\
    \ static bool BelowZero(List<long> operations) {\n        long balance = 0;\n\
    \        foreach (long operation in operations) {\n            balance = balance\
    \ + operation;\n            if (balance < 0) {\n                return true;\n\
    \            }\n        }\n        return false;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(BelowZero((new List<long>())) == (false));\n\
    \    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)2L, (long)-3L,\
    \ (long)1L, (long)2L, (long)-3L}))) == (false));\n    Debug.Assert(BelowZero((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)-4L, (long)5L, (long)6L})))\
    \ == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L})))\
    \ == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-5L})))\
    \ == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L})))\
    \ == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977271
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You're given a list of deposit and withdrawal operations\
    \ on a bank account that starts with\n    // zero balance. Your task is to detect\
    \ if at any point the balance of account fallls below zero, and\n    // at that\
    \ point function should return True. Otherwise it should return False.\n    public\
    \ static bool BelowZero(List<long> operations) {\n        long balance = 0;\n\
    \        foreach (var operation in operations) {\n            long operationAmount\
    \ = operation;\n            switch (operation) {\n                case 1:\n  \
    \                  balance += operationAmount;\n                    break;\n \
    \               case 2:\n                    balance -= operationAmount;\n   \
    \                 break;\n                case 3:\n                    balance\
    \ *= operationAmount;\n                    break;\n                case 4:\n \
    \                   balance /= operationAmount;\n                    break;\n\
    \            }\n        }\n        return balance < 0;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(BelowZero((new List<long>())) ==\
    \ (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)-3L, (long)1L, (long)2L, (long)-3L}))) == (false));\n    Debug.Assert(BelowZero((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)-4L, (long)5L, (long)6L})))\
    \ == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L})))\
    \ == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-5L})))\
    \ == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L})))\
    \ == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d437033656ed44a782db6480795396c3>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d437033656ed44a782db6480795396c3>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659977272
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You're given a list of deposit and withdrawal operations\
    \ on a bank account that starts with\n    // zero balance. Your task is to detect\
    \ if at any point the balance of account fallls below zero, and\n    // at that\
    \ point function should return True. Otherwise it should return False.\n    public\
    \ static bool BelowZero(List<long> operations) {\n        // Your code here\n\
    \        long balance = 0;\n        foreach (var operation in operations) {\n\
    \            if (operation.Operator == Operation.Deposit) {\n                balance\
    \ += operation.Amount;\n            } else if (operation.Operator == Operation.Withdraw)\
    \ {\n                balance -= operation.Amount;\n            }\n        }\n\
    \        return balance < 0;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(BelowZero((new List<long>())) == (false));\n    Debug.Assert(BelowZero((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)-3L, (long)1L, (long)2L, (long)-3L})))\
    \ == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)-4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(BelowZero((new\
    \ List<long>(new long[]{(long)1L, (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L,\
    \ (long)4L, (long)-4L}))) == (false));\n    Debug.Assert(BelowZero((new List<long>(new\
    \ long[]{(long)1L, (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L,\
    \ (long)-5L}))) == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L})))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpi_xd0j6c.cs(16,27): error CS1061: ''long'' does not contain a definition
    for ''Operator'' and no accessible extension method ''Operator'' accepting a first
    argument of type ''long'' could be found (are you missing a using directive or
    an assembly reference?)

    /tmp/tmpi_xd0j6c.cs(16,39): error CS0103: The name ''Operation'' does not exist
    in the current context

    /tmp/tmpi_xd0j6c.cs(17,38): error CS1061: ''long'' does not contain a definition
    for ''Amount'' and no accessible extension method ''Amount'' accepting a first
    argument of type ''long'' could be found (are you missing a using directive or
    an assembly reference?)

    /tmp/tmpi_xd0j6c.cs(18,34): error CS1061: ''long'' does not contain a definition
    for ''Operator'' and no accessible extension method ''Operator'' accepting a first
    argument of type ''long'' could be found (are you missing a using directive or
    an assembly reference?)

    /tmp/tmpi_xd0j6c.cs(18,46): error CS0103: The name ''Operation'' does not exist
    in the current context

    /tmp/tmpi_xd0j6c.cs(19,38): error CS1061: ''long'' does not contain a definition
    for ''Amount'' and no accessible extension method ''Amount'' accepting a first
    argument of type ''long'' could be found (are you missing a using directive or
    an assembly reference?)

    '
  timestamp: 1659977272
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You're given a list of deposit and withdrawal operations\
    \ on a bank account that starts with\n    // zero balance. Your task is to detect\
    \ if at any point the balance of account fallls below zero, and\n    // at that\
    \ point function should return True. Otherwise it should return False.\n    public\
    \ static bool BelowZero(List<long> operations) {\n        long balance = 0;\n\
    \        foreach (var operation in operations) {\n            long operationAmount\
    \ = operation;\n            if (operationAmount < 0) {\n                operationAmount\
    \ = -operationAmount;\n            }\n            balance += operationAmount;\n\
    \        }\n        return balance < 0;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(BelowZero((new List<long>())) == (false));\n    Debug.Assert(BelowZero((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)-3L, (long)1L, (long)2L, (long)-3L})))\
    \ == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)-4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(BelowZero((new\
    \ List<long>(new long[]{(long)1L, (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L,\
    \ (long)4L, (long)-4L}))) == (false));\n    Debug.Assert(BelowZero((new List<long>(new\
    \ long[]{(long)1L, (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L,\
    \ (long)-5L}))) == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L})))\
    \ == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <0ab39c4bde874d4b86b069a75492b0e7>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <0ab39c4bde874d4b86b069a75492b0e7>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659977272
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You're given a list of deposit and withdrawal operations\
    \ on a bank account that starts with\n    // zero balance. Your task is to detect\
    \ if at any point the balance of account fallls below zero, and\n    // at that\
    \ point function should return True. Otherwise it should return False.\n    public\
    \ static bool BelowZero(List<long> operations) {\n        long balance = 0;\n\
    \        foreach (var operation in operations) {\n            if (operation.Operation.Equals(\"\
    deposit\")) {\n                balance += operation.Amount;\n            } else\
    \ if (operation.Operation.Equals(\"withdraw\")) {\n                balance -=\
    \ operation.Amount;\n            }\n        }\n        return balance < 0;\n \
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(BelowZero((new\
    \ List<long>())) == (false));\n    Debug.Assert(BelowZero((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)-3L, (long)1L, (long)2L, (long)-3L}))) == (false));\n\
    \    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)2L, (long)-4L,\
    \ (long)5L, (long)6L}))) == (true));\n    Debug.Assert(BelowZero((new List<long>(new\
    \ long[]{(long)1L, (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L,\
    \ (long)-4L}))) == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-5L})))\
    \ == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L})))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpb0bb01d8.cs(15,27): error CS1061: ''long'' does not contain a definition
    for ''Operation'' and no accessible extension method ''Operation'' accepting a
    first argument of type ''long'' could be found (are you missing a using directive
    or an assembly reference?)

    /tmp/tmpb0bb01d8.cs(16,38): error CS1061: ''long'' does not contain a definition
    for ''Amount'' and no accessible extension method ''Amount'' accepting a first
    argument of type ''long'' could be found (are you missing a using directive or
    an assembly reference?)

    /tmp/tmpb0bb01d8.cs(17,34): error CS1061: ''long'' does not contain a definition
    for ''Operation'' and no accessible extension method ''Operation'' accepting a
    first argument of type ''long'' could be found (are you missing a using directive
    or an assembly reference?)

    /tmp/tmpb0bb01d8.cs(18,38): error CS1061: ''long'' does not contain a definition
    for ''Amount'' and no accessible extension method ''Amount'' accepting a first
    argument of type ''long'' could be found (are you missing a using directive or
    an assembly reference?)

    '
  timestamp: 1659977271
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You're given a list of deposit and withdrawal operations\
    \ on a bank account that starts with\n    // zero balance. Your task is to detect\
    \ if at any point the balance of account fallls below zero, and\n    // at that\
    \ point function should return True. Otherwise it should return False.\n    public\
    \ static bool BelowZero(List<long> operations) {\n        long balance = operations.Sum();\n\
    \        return balance < 0;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(BelowZero((new List<long>())) == (false));\n    Debug.Assert(BelowZero((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)-3L, (long)1L, (long)2L, (long)-3L})))\
    \ == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)-4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(BelowZero((new\
    \ List<long>(new long[]{(long)1L, (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L,\
    \ (long)4L, (long)-4L}))) == (false));\n    Debug.Assert(BelowZero((new List<long>(new\
    \ long[]{(long)1L, (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L,\
    \ (long)-5L}))) == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L})))\
    \ == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <01777425a6274e0da651fa719a3f2c54>:0 \n"
  stdout: ''
  timestamp: 1659977271
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You're given a list of deposit and withdrawal operations\
    \ on a bank account that starts with\n    // zero balance. Your task is to detect\
    \ if at any point the balance of account fallls below zero, and\n    // at that\
    \ point function should return True. Otherwise it should return False.\n    public\
    \ static bool BelowZero(List<long> operations) {\n        long balance = 0;\n\
    \        foreach (var operation in operations) {\n            switch (operation)\
    \ {\n                case Deposit:\n                    balance += operation.Amount;\n\
    \                    break;\n                case Withdraw:\n                \
    \    balance -= operation.Amount;\n                    break;\n            }\n\
    \        }\n        return balance < 0;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(BelowZero((new List<long>())) == (false));\n    Debug.Assert(BelowZero((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)-3L, (long)1L, (long)2L, (long)-3L})))\
    \ == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)-4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(BelowZero((new\
    \ List<long>(new long[]{(long)1L, (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L,\
    \ (long)4L, (long)-4L}))) == (false));\n    Debug.Assert(BelowZero((new List<long>(new\
    \ long[]{(long)1L, (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L,\
    \ (long)-5L}))) == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L})))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmptw977unr.cs(16,22): error CS0103: The name ''Deposit'' does not exist
    in the current context

    /tmp/tmptw977unr.cs(17,42): error CS1061: ''long'' does not contain a definition
    for ''Amount'' and no accessible extension method ''Amount'' accepting a first
    argument of type ''long'' could be found (are you missing a using directive or
    an assembly reference?)

    /tmp/tmptw977unr.cs(19,22): error CS0103: The name ''Withdraw'' does not exist
    in the current context

    /tmp/tmptw977unr.cs(20,42): error CS1061: ''long'' does not contain a definition
    for ''Amount'' and no accessible extension method ''Amount'' accepting a first
    argument of type ''long'' could be found (are you missing a using directive or
    an assembly reference?)

    '
  timestamp: 1659977271
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You're given a list of deposit and withdrawal operations\
    \ on a bank account that starts with\n    // zero balance. Your task is to detect\
    \ if at any point the balance of account fallls below zero, and\n    // at that\
    \ point function should return True. Otherwise it should return False.\n    public\
    \ static bool BelowZero(List<long> operations) {\n        long balance = 0;\n\
    \        foreach (var op in operations) {\n            balance = balance + op;\n\
    \            if (balance < 0) {\n                return true;\n            }\n\
    \        }\n        return false;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(BelowZero((new List<long>())) == (false));\n    Debug.Assert(BelowZero((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)-3L, (long)1L, (long)2L, (long)-3L})))\
    \ == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)-4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(BelowZero((new\
    \ List<long>(new long[]{(long)1L, (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L,\
    \ (long)4L, (long)-4L}))) == (false));\n    Debug.Assert(BelowZero((new List<long>(new\
    \ long[]{(long)1L, (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L,\
    \ (long)-5L}))) == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L})))\
    \ == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977271
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You're given a list of deposit and withdrawal operations\
    \ on a bank account that starts with\n    // zero balance. Your task is to detect\
    \ if at any point the balance of account fallls below zero, and\n    // at that\
    \ point function should return True. Otherwise it should return False.\n    public\
    \ static bool BelowZero(List<long> operations) {\n        long balance = 0;\n\
    \        foreach (long operation in operations) {\n            if (operation >\
    \ 0)\n                balance += operation;\n            else if (operation <\
    \ 0)\n                balance -= operation;\n            else\n              \
    \  return true;\n        }\n        return balance < 0;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(BelowZero((new List<long>())) ==\
    \ (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)-3L, (long)1L, (long)2L, (long)-3L}))) == (false));\n    Debug.Assert(BelowZero((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)-4L, (long)5L, (long)6L})))\
    \ == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L})))\
    \ == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-5L})))\
    \ == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L})))\
    \ == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <748e57b868214d78b0e30c36eae24050>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <748e57b868214d78b0e30c36eae24050>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659977272
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You're given a list of deposit and withdrawal operations\
    \ on a bank account that starts with\n    // zero balance. Your task is to detect\
    \ if at any point the balance of account fallls below zero, and\n    // at that\
    \ point function should return True. Otherwise it should return False.\n    public\
    \ static bool BelowZero(List<long> operations) {\n        // Your code goes here\n\
    \        long balance = 0;\n        foreach (var operation in operations) {\n\
    \            if (operation == Deposit) {\n                balance += operation.Amount;\n\
    \            } else if (operation == Withdraw) {\n                balance -= operation.Amount;\n\
    \            }\n        }\n        return balance < 0;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(BelowZero((new List<long>())) ==\
    \ (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)-3L, (long)1L, (long)2L, (long)-3L}))) == (false));\n    Debug.Assert(BelowZero((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)-4L, (long)5L, (long)6L})))\
    \ == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L})))\
    \ == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-5L})))\
    \ == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L})))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp4v_v_6_2.cs(16,30): error CS0103: The name ''Deposit'' does not exist
    in the current context

    /tmp/tmp4v_v_6_2.cs(17,38): error CS1061: ''long'' does not contain a definition
    for ''Amount'' and no accessible extension method ''Amount'' accepting a first
    argument of type ''long'' could be found (are you missing a using directive or
    an assembly reference?)

    /tmp/tmp4v_v_6_2.cs(18,37): error CS0103: The name ''Withdraw'' does not exist
    in the current context

    /tmp/tmp4v_v_6_2.cs(19,38): error CS1061: ''long'' does not contain a definition
    for ''Amount'' and no accessible extension method ''Amount'' accepting a first
    argument of type ''long'' could be found (are you missing a using directive or
    an assembly reference?)

    '
  timestamp: 1659977270
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You're given a list of deposit and withdrawal operations\
    \ on a bank account that starts with\n    // zero balance. Your task is to detect\
    \ if at any point the balance of account fallls below zero, and\n    // at that\
    \ point function should return True. Otherwise it should return False.\n    public\
    \ static bool BelowZero(List<long> operations) {\n        // Your code here\n\
    \        long sum = 0;\n        foreach (var operation in operations) {\n    \
    \        sum += operation;\n        }\n        return sum < 0;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(BelowZero((new List<long>()))\
    \ == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)-3L, (long)1L, (long)2L, (long)-3L}))) == (false));\n    Debug.Assert(BelowZero((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)-4L, (long)5L, (long)6L})))\
    \ == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L})))\
    \ == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-5L})))\
    \ == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L})))\
    \ == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <df7516e24dbd42b38ae53e3820298920>:0 \n"
  stdout: ''
  timestamp: 1659977273
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You're given a list of deposit and withdrawal operations\
    \ on a bank account that starts with\n    // zero balance. Your task is to detect\
    \ if at any point the balance of account fallls below zero, and\n    // at that\
    \ point function should return True. Otherwise it should return False.\n    public\
    \ static bool BelowZero(List<long> operations) {\n        long balance = operations.Sum();\n\
    \        return balance < 0;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(BelowZero((new List<long>())) == (false));\n    Debug.Assert(BelowZero((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)-3L, (long)1L, (long)2L, (long)-3L})))\
    \ == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)-4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(BelowZero((new\
    \ List<long>(new long[]{(long)1L, (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L,\
    \ (long)4L, (long)-4L}))) == (false));\n    Debug.Assert(BelowZero((new List<long>(new\
    \ long[]{(long)1L, (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L,\
    \ (long)-5L}))) == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L})))\
    \ == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <01777425a6274e0da651fa719a3f2c54>:0 \n"
  stdout: ''
  timestamp: 1659977271
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You're given a list of deposit and withdrawal operations\
    \ on a bank account that starts with\n    // zero balance. Your task is to detect\
    \ if at any point the balance of account fallls below zero, and\n    // at that\
    \ point function should return True. Otherwise it should return False.\n    public\
    \ static bool BelowZero(List<long> operations) {\n        long balance = 0;\n\
    \        foreach (var operation in operations) {\n            if (operation ==\
    \ Deposit) {\n                balance += operations[operations.IndexOf(operation)];\n\
    \            } else if (operation == Withdraw) {\n                balance -= operations[operations.IndexOf(operation)];\n\
    \            }\n        }\n        return balance < 0;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(BelowZero((new List<long>())) ==\
    \ (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)-3L, (long)1L, (long)2L, (long)-3L}))) == (false));\n    Debug.Assert(BelowZero((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)-4L, (long)5L, (long)6L})))\
    \ == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L})))\
    \ == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-5L})))\
    \ == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L})))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp_chqrnm5.cs(15,30): error CS0103: The name ''Deposit'' does not exist
    in the current context

    /tmp/tmp_chqrnm5.cs(17,37): error CS0103: The name ''Withdraw'' does not exist
    in the current context

    '
  timestamp: 1659977272
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You're given a list of deposit and withdrawal operations\
    \ on a bank account that starts with\n    // zero balance. Your task is to detect\
    \ if at any point the balance of account fallls below zero, and\n    // at that\
    \ point function should return True. Otherwise it should return False.\n    public\
    \ static bool BelowZero(List<long> operations) {\n        long balance = 0;\n\
    \        foreach (var operation in operations) {\n            if (operation ==\
    \ Deposit) {\n                balance += operation.Amount;\n            } else\
    \ if (operation == Withdraw) {\n                balance -= operation.Amount;\n\
    \            }\n        }\n        return balance < 0;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(BelowZero((new List<long>())) ==\
    \ (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)-3L, (long)1L, (long)2L, (long)-3L}))) == (false));\n    Debug.Assert(BelowZero((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)-4L, (long)5L, (long)6L})))\
    \ == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L})))\
    \ == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-5L})))\
    \ == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L})))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpw4sbewol.cs(15,30): error CS0103: The name ''Deposit'' does not exist
    in the current context

    /tmp/tmpw4sbewol.cs(16,38): error CS1061: ''long'' does not contain a definition
    for ''Amount'' and no accessible extension method ''Amount'' accepting a first
    argument of type ''long'' could be found (are you missing a using directive or
    an assembly reference?)

    /tmp/tmpw4sbewol.cs(17,37): error CS0103: The name ''Withdraw'' does not exist
    in the current context

    /tmp/tmpw4sbewol.cs(18,38): error CS1061: ''long'' does not contain a definition
    for ''Amount'' and no accessible extension method ''Amount'' accepting a first
    argument of type ''long'' could be found (are you missing a using directive or
    an assembly reference?)

    '
  timestamp: 1659977271
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You're given a list of deposit and withdrawal operations\
    \ on a bank account that starts with\n    // zero balance. Your task is to detect\
    \ if at any point the balance of account fallls below zero, and\n    // at that\
    \ point function should return True. Otherwise it should return False.\n    public\
    \ static bool BelowZero(List<long> operations) {\n        // Your code goes here\n\
    \        long balance = operations.Sum();\n        return balance < 0;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(BelowZero((new\
    \ List<long>())) == (false));\n    Debug.Assert(BelowZero((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)-3L, (long)1L, (long)2L, (long)-3L}))) == (false));\n\
    \    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)2L, (long)-4L,\
    \ (long)5L, (long)6L}))) == (true));\n    Debug.Assert(BelowZero((new List<long>(new\
    \ long[]{(long)1L, (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L,\
    \ (long)-4L}))) == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-5L})))\
    \ == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L})))\
    \ == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <7d6bcf0ed084423dbd39543c63f2fe8a>:0 \n"
  stdout: ''
  timestamp: 1659977273
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You're given a list of deposit and withdrawal operations\
    \ on a bank account that starts with\n    // zero balance. Your task is to detect\
    \ if at any point the balance of account fallls below zero, and\n    // at that\
    \ point function should return True. Otherwise it should return False.\n    public\
    \ static bool BelowZero(List<long> operations) {\n        // Your code here\n\
    \        long balance = operations.Sum();\n        if (balance < 0) {\n      \
    \      return true;\n        }\n        return false;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(BelowZero((new List<long>())) ==\
    \ (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)-3L, (long)1L, (long)2L, (long)-3L}))) == (false));\n    Debug.Assert(BelowZero((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)-4L, (long)5L, (long)6L})))\
    \ == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L})))\
    \ == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-5L})))\
    \ == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L})))\
    \ == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c7018792dca243c1a9fa923b241dae72>:0 \n"
  stdout: ''
  timestamp: 1659977273
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You're given a list of deposit and withdrawal operations\
    \ on a bank account that starts with\n    // zero balance. Your task is to detect\
    \ if at any point the balance of account fallls below zero, and\n    // at that\
    \ point function should return True. Otherwise it should return False.\n    public\
    \ static bool BelowZero(List<long> operations) {\n        long balance = 0;\n\
    \        foreach (var operation in operations) {\n            if (operation ==\
    \ Deposit) {\n                balance += 1;\n            } else if (operation\
    \ == Withdraw) {\n                balance -= 1;\n            }\n        }\n  \
    \      return balance < 0;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(BelowZero((new List<long>())) == (false));\n    Debug.Assert(BelowZero((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)-3L, (long)1L, (long)2L, (long)-3L})))\
    \ == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)-4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(BelowZero((new\
    \ List<long>(new long[]{(long)1L, (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L,\
    \ (long)4L, (long)-4L}))) == (false));\n    Debug.Assert(BelowZero((new List<long>(new\
    \ long[]{(long)1L, (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L,\
    \ (long)-5L}))) == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L})))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmphnna2qxr.cs(15,30): error CS0103: The name ''Deposit'' does not exist
    in the current context

    /tmp/tmphnna2qxr.cs(17,37): error CS0103: The name ''Withdraw'' does not exist
    in the current context

    '
  timestamp: 1659977271
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You're given a list of deposit and withdrawal operations\
    \ on a bank account that starts with\n    // zero balance. Your task is to detect\
    \ if at any point the balance of account fallls below zero, and\n    // at that\
    \ point function should return True. Otherwise it should return False.\n    public\
    \ static bool BelowZero(List<long> operations) {\n        long balance = 0;\n\
    \        foreach (var operation in operations) {\n            if (operation ==\
    \ Deposit) {\n                balance += 1;\n            } else if (operation\
    \ == Withdraw) {\n                balance -= 1;\n            }\n        }\n  \
    \      return balance < 0;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(BelowZero((new List<long>())) == (false));\n    Debug.Assert(BelowZero((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)-3L, (long)1L, (long)2L, (long)-3L})))\
    \ == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)-4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(BelowZero((new\
    \ List<long>(new long[]{(long)1L, (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L,\
    \ (long)4L, (long)-4L}))) == (false));\n    Debug.Assert(BelowZero((new List<long>(new\
    \ long[]{(long)1L, (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L,\
    \ (long)-5L}))) == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L})))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmphnna2qxr.cs(15,30): error CS0103: The name ''Deposit'' does not exist
    in the current context

    /tmp/tmphnna2qxr.cs(17,37): error CS0103: The name ''Withdraw'' does not exist
    in the current context

    '
  timestamp: 1659977271
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You're given a list of deposit and withdrawal operations\
    \ on a bank account that starts with\n    // zero balance. Your task is to detect\
    \ if at any point the balance of account fallls below zero, and\n    // at that\
    \ point function should return True. Otherwise it should return False.\n    public\
    \ static bool BelowZero(List<long> operations) {\n        long balance = 0;\n\
    \        foreach (var operation in operations) {\n            if (operation ==\
    \ Deposit) {\n                balance += 1;\n            } else if (operation\
    \ == Withdraw) {\n                balance -= 1;\n            }\n        }\n  \
    \      return balance < 0;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(BelowZero((new List<long>())) == (false));\n    Debug.Assert(BelowZero((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)-3L, (long)1L, (long)2L, (long)-3L})))\
    \ == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)-4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(BelowZero((new\
    \ List<long>(new long[]{(long)1L, (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L,\
    \ (long)4L, (long)-4L}))) == (false));\n    Debug.Assert(BelowZero((new List<long>(new\
    \ long[]{(long)1L, (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L,\
    \ (long)-5L}))) == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L})))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmphnna2qxr.cs(15,30): error CS0103: The name ''Deposit'' does not exist
    in the current context

    /tmp/tmphnna2qxr.cs(17,37): error CS0103: The name ''Withdraw'' does not exist
    in the current context

    '
  timestamp: 1659977271
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You're given a list of deposit and withdrawal operations\
    \ on a bank account that starts with\n    // zero balance. Your task is to detect\
    \ if at any point the balance of account fallls below zero, and\n    // at that\
    \ point function should return True. Otherwise it should return False.\n    public\
    \ static bool BelowZero(List<long> operations) {\n        long balance = operations.Sum();\n\
    \        return balance < 0;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(BelowZero((new List<long>())) == (false));\n    Debug.Assert(BelowZero((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)-3L, (long)1L, (long)2L, (long)-3L})))\
    \ == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)-4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(BelowZero((new\
    \ List<long>(new long[]{(long)1L, (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L,\
    \ (long)4L, (long)-4L}))) == (false));\n    Debug.Assert(BelowZero((new List<long>(new\
    \ long[]{(long)1L, (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L,\
    \ (long)-5L}))) == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L})))\
    \ == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <01777425a6274e0da651fa719a3f2c54>:0 \n"
  stdout: ''
  timestamp: 1659977271
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You're given a list of deposit and withdrawal operations\
    \ on a bank account that starts with\n    // zero balance. Your task is to detect\
    \ if at any point the balance of account fallls below zero, and\n    // at that\
    \ point function should return True. Otherwise it should return False.\n    public\
    \ static bool BelowZero(List<long> operations) {\n        long balance = 0;\n\
    \        foreach (var operation in operations) {\n            if (operation ==\
    \ Deposit) {\n                balance += operations[operations.IndexOf(operation)];\n\
    \            } else if (operation == Withdraw) {\n                balance -= operations[operations.IndexOf(operation)];\n\
    \            }\n        }\n        return balance < 0;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(BelowZero((new List<long>())) ==\
    \ (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)-3L, (long)1L, (long)2L, (long)-3L}))) == (false));\n    Debug.Assert(BelowZero((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)-4L, (long)5L, (long)6L})))\
    \ == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L})))\
    \ == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-5L})))\
    \ == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L})))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp_chqrnm5.cs(15,30): error CS0103: The name ''Deposit'' does not exist
    in the current context

    /tmp/tmp_chqrnm5.cs(17,37): error CS0103: The name ''Withdraw'' does not exist
    in the current context

    '
  timestamp: 1659977272
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You're given a list of deposit and withdrawal operations\
    \ on a bank account that starts with\n    // zero balance. Your task is to detect\
    \ if at any point the balance of account fallls below zero, and\n    // at that\
    \ point function should return True. Otherwise it should return False.\n    public\
    \ static bool BelowZero(List<long> operations) {\n        // Your code goes here\n\
    \        long balance = 0;\n        foreach (var operation in operations) {\n\
    \            long amount = operation;\n            if (amount < 0) {\n       \
    \         balance -= amount;\n            } else {\n                balance +=\
    \ amount;\n            }\n        }\n        return balance < 0;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(BelowZero((new List<long>()))\
    \ == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)-3L, (long)1L, (long)2L, (long)-3L}))) == (false));\n    Debug.Assert(BelowZero((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)-4L, (long)5L, (long)6L})))\
    \ == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L})))\
    \ == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-5L})))\
    \ == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L})))\
    \ == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <82cc3784abe045869de6bdbb6973c438>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <82cc3784abe045869de6bdbb6973c438>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659977273
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You're given a list of deposit and withdrawal operations\
    \ on a bank account that starts with\n    // zero balance. Your task is to detect\
    \ if at any point the balance of account fallls below zero, and\n    // at that\
    \ point function should return True. Otherwise it should return False.\n    public\
    \ static bool BelowZero(List<long> operations) {\n        // Your code here\n\
    \        long balance = 0;\n        foreach (var operation in operations) {\n\
    \            long amount = operation;\n            if (amount < 0) {\n       \
    \         amount = 0;\n            }\n            balance += amount;\n       \
    \ }\n        return balance < 0;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(BelowZero((new List<long>())) == (false));\n    Debug.Assert(BelowZero((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)-3L, (long)1L, (long)2L, (long)-3L})))\
    \ == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)-4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(BelowZero((new\
    \ List<long>(new long[]{(long)1L, (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L,\
    \ (long)4L, (long)-4L}))) == (false));\n    Debug.Assert(BelowZero((new List<long>(new\
    \ long[]{(long)1L, (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L,\
    \ (long)-5L}))) == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L})))\
    \ == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <96d797ed919a4a29a319efd019ec4b06>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <96d797ed919a4a29a319efd019ec4b06>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659977273
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You're given a list of deposit and withdrawal operations\
    \ on a bank account that starts with\n    // zero balance. Your task is to detect\
    \ if at any point the balance of account fallls below zero, and\n    // at that\
    \ point function should return True. Otherwise it should return False.\n    public\
    \ static bool BelowZero(List<long> operations) {\n        // Your code here\n\
    \        long balance = operations.Sum();\n        if (balance < 0)\n        \
    \    return true;\n        else\n            return false;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(BelowZero((new List<long>()))\
    \ == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)-3L, (long)1L, (long)2L, (long)-3L}))) == (false));\n    Debug.Assert(BelowZero((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)-4L, (long)5L, (long)6L})))\
    \ == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L})))\
    \ == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-5L})))\
    \ == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L})))\
    \ == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <73fa3c75b2e0498aa5058cef24114e8c>:0 \n"
  stdout: ''
  timestamp: 1659977272
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You're given a list of deposit and withdrawal operations\
    \ on a bank account that starts with\n    // zero balance. Your task is to detect\
    \ if at any point the balance of account fallls below zero, and\n    // at that\
    \ point function should return True. Otherwise it should return False.\n    public\
    \ static bool BelowZero(List<long> operations) {\n        long balance = 0;\n\
    \        foreach (var operation in operations) {\n            switch (operation)\
    \ {\n                case Deposit:\n                    balance += 1;\n      \
    \              break;\n                case Withdraw:\n                    balance\
    \ -= 1;\n                    break;\n            }\n        }\n        return\
    \ balance < 0;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(BelowZero((new\
    \ List<long>())) == (false));\n    Debug.Assert(BelowZero((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)-3L, (long)1L, (long)2L, (long)-3L}))) == (false));\n\
    \    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)2L, (long)-4L,\
    \ (long)5L, (long)6L}))) == (true));\n    Debug.Assert(BelowZero((new List<long>(new\
    \ long[]{(long)1L, (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L,\
    \ (long)-4L}))) == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-5L})))\
    \ == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L})))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpk77zp5he.cs(16,22): error CS0103: The name ''Deposit'' does not exist
    in the current context

    /tmp/tmpk77zp5he.cs(19,22): error CS0103: The name ''Withdraw'' does not exist
    in the current context

    '
  timestamp: 1659977271
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You're given a list of deposit and withdrawal operations\
    \ on a bank account that starts with\n    // zero balance. Your task is to detect\
    \ if at any point the balance of account fallls below zero, and\n    // at that\
    \ point function should return True. Otherwise it should return False.\n    public\
    \ static bool BelowZero(List<long> operations) {\n        // Your code goes here\n\
    \        long balance = 0;\n        foreach (var operation in operations) {\n\
    \            balance = balance + operation;\n            if (balance < 0) {\n\
    \                return true;\n            }\n        }\n        return false;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(BelowZero((new\
    \ List<long>())) == (false));\n    Debug.Assert(BelowZero((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)-3L, (long)1L, (long)2L, (long)-3L}))) == (false));\n\
    \    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)2L, (long)-4L,\
    \ (long)5L, (long)6L}))) == (true));\n    Debug.Assert(BelowZero((new List<long>(new\
    \ long[]{(long)1L, (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L,\
    \ (long)-4L}))) == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-5L})))\
    \ == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L})))\
    \ == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977273
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You're given a list of deposit and withdrawal operations\
    \ on a bank account that starts with\n    // zero balance. Your task is to detect\
    \ if at any point the balance of account fallls below zero, and\n    // at that\
    \ point function should return True. Otherwise it should return False.\n    public\
    \ static bool BelowZero(List<long> operations) {\n        long balance = 0;\n\
    \        foreach (long operation in operations) {\n            balance = balance\
    \ + operation;\n            if (balance < 0) {\n                return true;\n\
    \            }\n        }\n        return false;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(BelowZero((new List<long>())) == (false));\n\
    \    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)2L, (long)-3L,\
    \ (long)1L, (long)2L, (long)-3L}))) == (false));\n    Debug.Assert(BelowZero((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)-4L, (long)5L, (long)6L})))\
    \ == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L})))\
    \ == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-5L})))\
    \ == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L})))\
    \ == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977271
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You're given a list of deposit and withdrawal operations\
    \ on a bank account that starts with\n    // zero balance. Your task is to detect\
    \ if at any point the balance of account fallls below zero, and\n    // at that\
    \ point function should return True. Otherwise it should return False.\n    public\
    \ static bool BelowZero(List<long> operations) {\n        long balance = 0;\n\
    \        foreach (var operation in operations) {\n            if (operation.Operation.Equals(\"\
    deposit\")) {\n                balance += operation.Amount;\n            }\n \
    \           else if (operation.Operation.Equals(\"withdraw\")) {\n           \
    \     balance -= operation.Amount;\n            }\n        }\n        return balance\
    \ < 0;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(BelowZero((new\
    \ List<long>())) == (false));\n    Debug.Assert(BelowZero((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)-3L, (long)1L, (long)2L, (long)-3L}))) == (false));\n\
    \    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)2L, (long)-4L,\
    \ (long)5L, (long)6L}))) == (true));\n    Debug.Assert(BelowZero((new List<long>(new\
    \ long[]{(long)1L, (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L,\
    \ (long)-4L}))) == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-5L})))\
    \ == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L})))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp882nym8y.cs(15,27): error CS1061: ''long'' does not contain a definition
    for ''Operation'' and no accessible extension method ''Operation'' accepting a
    first argument of type ''long'' could be found (are you missing a using directive
    or an assembly reference?)

    /tmp/tmp882nym8y.cs(16,38): error CS1061: ''long'' does not contain a definition
    for ''Amount'' and no accessible extension method ''Amount'' accepting a first
    argument of type ''long'' could be found (are you missing a using directive or
    an assembly reference?)

    /tmp/tmp882nym8y.cs(18,32): error CS1061: ''long'' does not contain a definition
    for ''Operation'' and no accessible extension method ''Operation'' accepting a
    first argument of type ''long'' could be found (are you missing a using directive
    or an assembly reference?)

    /tmp/tmp882nym8y.cs(19,38): error CS1061: ''long'' does not contain a definition
    for ''Amount'' and no accessible extension method ''Amount'' accepting a first
    argument of type ''long'' could be found (are you missing a using directive or
    an assembly reference?)

    '
  timestamp: 1659977271
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You're given a list of deposit and withdrawal operations\
    \ on a bank account that starts with\n    // zero balance. Your task is to detect\
    \ if at any point the balance of account fallls below zero, and\n    // at that\
    \ point function should return True. Otherwise it should return False.\n    public\
    \ static bool BelowZero(List<long> operations) {\n        // Your code here\n\
    \        long balance = operations.Sum(x => x);\n        return balance < 0;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(BelowZero((new\
    \ List<long>())) == (false));\n    Debug.Assert(BelowZero((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)-3L, (long)1L, (long)2L, (long)-3L}))) == (false));\n\
    \    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)2L, (long)-4L,\
    \ (long)5L, (long)6L}))) == (true));\n    Debug.Assert(BelowZero((new List<long>(new\
    \ long[]{(long)1L, (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L,\
    \ (long)-4L}))) == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-5L})))\
    \ == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L})))\
    \ == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a6bec069eb4f47c895fade055101f5ad>:0 \n"
  stdout: ''
  timestamp: 1659977271
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You're given a list of deposit and withdrawal operations\
    \ on a bank account that starts with\n    // zero balance. Your task is to detect\
    \ if at any point the balance of account fallls below zero, and\n    // at that\
    \ point function should return True. Otherwise it should return False.\n    public\
    \ static bool BelowZero(List<long> operations) {\n        long balance = 0;\n\
    \        foreach (var operation in operations) {\n            long amount = operation;\n\
    \            if (amount < 0) {\n                balance -= amount;\n         \
    \   } else {\n                balance += amount;\n            }\n        }\n \
    \       return balance < 0;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(BelowZero((new List<long>())) == (false));\n    Debug.Assert(BelowZero((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)-3L, (long)1L, (long)2L, (long)-3L})))\
    \ == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)-4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(BelowZero((new\
    \ List<long>(new long[]{(long)1L, (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L,\
    \ (long)4L, (long)-4L}))) == (false));\n    Debug.Assert(BelowZero((new List<long>(new\
    \ long[]{(long)1L, (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L,\
    \ (long)-5L}))) == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L})))\
    \ == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <b1e8b835fb6a40aa8966a2ddb55c10e7>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <b1e8b835fb6a40aa8966a2ddb55c10e7>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659977272
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You're given a list of deposit and withdrawal operations\
    \ on a bank account that starts with\n    // zero balance. Your task is to detect\
    \ if at any point the balance of account fallls below zero, and\n    // at that\
    \ point function should return True. Otherwise it should return False.\n    public\
    \ static bool BelowZero(List<long> operations) {\n        long balance = 0;\n\
    \        foreach (long operation in operations) {\n            if (operation ==\
    \ Deposit) {\n                balance += 1;\n            } else if (operation\
    \ == Withdraw) {\n                balance -= 1;\n            }\n        }\n  \
    \      return balance < 0;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(BelowZero((new List<long>())) == (false));\n    Debug.Assert(BelowZero((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)-3L, (long)1L, (long)2L, (long)-3L})))\
    \ == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)-4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(BelowZero((new\
    \ List<long>(new long[]{(long)1L, (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L,\
    \ (long)4L, (long)-4L}))) == (false));\n    Debug.Assert(BelowZero((new List<long>(new\
    \ long[]{(long)1L, (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L,\
    \ (long)-5L}))) == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L})))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpaypakagc.cs(15,30): error CS0103: The name ''Deposit'' does not exist
    in the current context

    /tmp/tmpaypakagc.cs(17,37): error CS0103: The name ''Withdraw'' does not exist
    in the current context

    '
  timestamp: 1659977272
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You're given a list of deposit and withdrawal operations\
    \ on a bank account that starts with\n    // zero balance. Your task is to detect\
    \ if at any point the balance of account fallls below zero, and\n    // at that\
    \ point function should return True. Otherwise it should return False.\n    public\
    \ static bool BelowZero(List<long> operations) {\n        long balance = 0;\n\
    \        foreach (var operation in operations) {\n            long amount = operation;\n\
    \            if (amount < 0) {\n                balance -= amount;\n         \
    \   } else {\n                balance += amount;\n            }\n        }\n \
    \       return balance < 0;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(BelowZero((new List<long>())) == (false));\n    Debug.Assert(BelowZero((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)-3L, (long)1L, (long)2L, (long)-3L})))\
    \ == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)-4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(BelowZero((new\
    \ List<long>(new long[]{(long)1L, (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L,\
    \ (long)4L, (long)-4L}))) == (false));\n    Debug.Assert(BelowZero((new List<long>(new\
    \ long[]{(long)1L, (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L,\
    \ (long)-5L}))) == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L})))\
    \ == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <b1e8b835fb6a40aa8966a2ddb55c10e7>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <b1e8b835fb6a40aa8966a2ddb55c10e7>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659977272
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You're given a list of deposit and withdrawal operations\
    \ on a bank account that starts with\n    // zero balance. Your task is to detect\
    \ if at any point the balance of account fallls below zero, and\n    // at that\
    \ point function should return True. Otherwise it should return False.\n    public\
    \ static bool BelowZero(List<long> operations) {\n        long balance = operations.Sum();\n\
    \        return balance < 0;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(BelowZero((new List<long>())) == (false));\n    Debug.Assert(BelowZero((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)-3L, (long)1L, (long)2L, (long)-3L})))\
    \ == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)-4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(BelowZero((new\
    \ List<long>(new long[]{(long)1L, (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L,\
    \ (long)4L, (long)-4L}))) == (false));\n    Debug.Assert(BelowZero((new List<long>(new\
    \ long[]{(long)1L, (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L,\
    \ (long)-5L}))) == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L})))\
    \ == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <01777425a6274e0da651fa719a3f2c54>:0 \n"
  stdout: ''
  timestamp: 1659977271
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You're given a list of deposit and withdrawal operations\
    \ on a bank account that starts with\n    // zero balance. Your task is to detect\
    \ if at any point the balance of account fallls below zero, and\n    // at that\
    \ point function should return True. Otherwise it should return False.\n    public\
    \ static bool BelowZero(List<long> operations) {\n        long balance = 0;\n\
    \        foreach (var operation in operations) {\n            if (operation ==\
    \ Deposit) {\n                balance += operations[operations.IndexOf(operation)];\n\
    \            } else if (operation == Withdraw) {\n                balance -= operations[operations.IndexOf(operation)];\n\
    \            }\n        }\n        return balance < 0;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(BelowZero((new List<long>())) ==\
    \ (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)-3L, (long)1L, (long)2L, (long)-3L}))) == (false));\n    Debug.Assert(BelowZero((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)-4L, (long)5L, (long)6L})))\
    \ == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L})))\
    \ == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-5L})))\
    \ == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L})))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp_chqrnm5.cs(15,30): error CS0103: The name ''Deposit'' does not exist
    in the current context

    /tmp/tmp_chqrnm5.cs(17,37): error CS0103: The name ''Withdraw'' does not exist
    in the current context

    '
  timestamp: 1659977272
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You're given a list of deposit and withdrawal operations\
    \ on a bank account that starts with\n    // zero balance. Your task is to detect\
    \ if at any point the balance of account fallls below zero, and\n    // at that\
    \ point function should return True. Otherwise it should return False.\n    public\
    \ static bool BelowZero(List<long> operations) {\n        // Your code goes here\n\
    \        long sum = 0;\n        foreach (var item in operations) {\n         \
    \   sum += item;\n        }\n        if (sum < 0)\n            return true;\n\
    \        else\n            return false;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(BelowZero((new List<long>())) == (false));\n    Debug.Assert(BelowZero((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)-3L, (long)1L, (long)2L, (long)-3L})))\
    \ == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)-4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(BelowZero((new\
    \ List<long>(new long[]{(long)1L, (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L,\
    \ (long)4L, (long)-4L}))) == (false));\n    Debug.Assert(BelowZero((new List<long>(new\
    \ long[]{(long)1L, (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L,\
    \ (long)-5L}))) == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L})))\
    \ == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <88d26d8942244f608e7c2b9530fea4f0>:0 \n"
  stdout: ''
  timestamp: 1659977271
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You're given a list of deposit and withdrawal operations\
    \ on a bank account that starts with\n    // zero balance. Your task is to detect\
    \ if at any point the balance of account fallls below zero, and\n    // at that\
    \ point function should return True. Otherwise it should return False.\n    public\
    \ static bool BelowZero(List<long> operations) {\n        long balance = 0;\n\
    \        foreach (var operation in operations) {\n            switch (operation)\
    \ {\n                case Deposit:\n                    balance += 1;\n      \
    \              break;\n                case Withdraw:\n                    balance\
    \ -= 1;\n                    break;\n            }\n        }\n        return\
    \ balance < 0;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(BelowZero((new\
    \ List<long>())) == (false));\n    Debug.Assert(BelowZero((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)-3L, (long)1L, (long)2L, (long)-3L}))) == (false));\n\
    \    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)2L, (long)-4L,\
    \ (long)5L, (long)6L}))) == (true));\n    Debug.Assert(BelowZero((new List<long>(new\
    \ long[]{(long)1L, (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L,\
    \ (long)-4L}))) == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-5L})))\
    \ == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L})))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpk77zp5he.cs(16,22): error CS0103: The name ''Deposit'' does not exist
    in the current context

    /tmp/tmpk77zp5he.cs(19,22): error CS0103: The name ''Withdraw'' does not exist
    in the current context

    '
  timestamp: 1659977271
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You're given a list of deposit and withdrawal operations\
    \ on a bank account that starts with\n    // zero balance. Your task is to detect\
    \ if at any point the balance of account fallls below zero, and\n    // at that\
    \ point function should return True. Otherwise it should return False.\n    public\
    \ static bool BelowZero(List<long> operations) {\n        long balance = 0;\n\
    \        foreach (var operation in operations) {\n            switch (operation)\
    \ {\n                case 1:\n                    balance += 1;\n            \
    \        break;\n                case 2:\n                    balance -= 1;\n\
    \                    break;\n                case 3:\n                    balance\
    \ *= 2;\n                    break;\n                case 4:\n               \
    \     balance /= 2;\n                    break;\n            }\n        }\n  \
    \      return balance < 0;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(BelowZero((new List<long>())) == (false));\n    Debug.Assert(BelowZero((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)-3L, (long)1L, (long)2L, (long)-3L})))\
    \ == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)-4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(BelowZero((new\
    \ List<long>(new long[]{(long)1L, (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L,\
    \ (long)4L, (long)-4L}))) == (false));\n    Debug.Assert(BelowZero((new List<long>(new\
    \ long[]{(long)1L, (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L,\
    \ (long)-5L}))) == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L})))\
    \ == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <ffbed6a44a474714b188d2a84984706c>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <ffbed6a44a474714b188d2a84984706c>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659977272
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You're given a list of deposit and withdrawal operations\
    \ on a bank account that starts with\n    // zero balance. Your task is to detect\
    \ if at any point the balance of account fallls below zero, and\n    // at that\
    \ point function should return True. Otherwise it should return False.\n    public\
    \ static bool BelowZero(List<long> operations) {\n        // Your code here\n\
    \        long balance = 0;\n        foreach (var operation in operations) {\n\
    \            if (operation == 1) {\n                balance += operation;\n  \
    \          }\n            else if (operation == -1) {\n                balance\
    \ -= operation;\n            }\n            else {\n                throw new\
    \ ArgumentException(\"Operation should be 1 or -1\");\n            }\n       \
    \ }\n        return balance < 0;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(BelowZero((new List<long>())) == (false));\n    Debug.Assert(BelowZero((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)-3L, (long)1L, (long)2L, (long)-3L})))\
    \ == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)-4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(BelowZero((new\
    \ List<long>(new long[]{(long)1L, (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L,\
    \ (long)4L, (long)-4L}))) == (false));\n    Debug.Assert(BelowZero((new List<long>(new\
    \ long[]{(long)1L, (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L,\
    \ (long)-5L}))) == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L})))\
    \ == (true));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentException: Operation should be 1\
    \ or -1\n  at Problem.BelowZero (System.Collections.Generic.List`1[T] operations)\
    \ [0x0003c] in <912bec8964854707adee25be0d184b5c>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x0002a] in <912bec8964854707adee25be0d184b5c>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.ArgumentException: Operation should be 1 or -1\n  at Problem.BelowZero\
    \ (System.Collections.Generic.List`1[T] operations) [0x0003c] in <912bec8964854707adee25be0d184b5c>:0\
    \ \n  at Problem.Main (System.String[] args) [0x0002a] in <912bec8964854707adee25be0d184b5c>:0\
    \ \n"
  stdout: ''
  timestamp: 1659977273
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You're given a list of deposit and withdrawal operations\
    \ on a bank account that starts with\n    // zero balance. Your task is to detect\
    \ if at any point the balance of account fallls below zero, and\n    // at that\
    \ point function should return True. Otherwise it should return False.\n    public\
    \ static bool BelowZero(List<long> operations) {\n        long balance = operations.Sum();\n\
    \        if (balance < 0) {\n            return true;\n        }\n        return\
    \ false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(BelowZero((new\
    \ List<long>())) == (false));\n    Debug.Assert(BelowZero((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)-3L, (long)1L, (long)2L, (long)-3L}))) == (false));\n\
    \    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)2L, (long)-4L,\
    \ (long)5L, (long)6L}))) == (true));\n    Debug.Assert(BelowZero((new List<long>(new\
    \ long[]{(long)1L, (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L,\
    \ (long)-4L}))) == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-5L})))\
    \ == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L})))\
    \ == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <270d355c99ae46c8a6f2c1e388b408ea>:0 \n"
  stdout: ''
  timestamp: 1659977271
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You're given a list of deposit and withdrawal operations\
    \ on a bank account that starts with\n    // zero balance. Your task is to detect\
    \ if at any point the balance of account fallls below zero, and\n    // at that\
    \ point function should return True. Otherwise it should return False.\n    public\
    \ static bool BelowZero(List<long> operations) {\n        // Your code here\n\
    \        long balance = operations.Sum();\n        return balance < 0;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(BelowZero((new\
    \ List<long>())) == (false));\n    Debug.Assert(BelowZero((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)-3L, (long)1L, (long)2L, (long)-3L}))) == (false));\n\
    \    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)2L, (long)-4L,\
    \ (long)5L, (long)6L}))) == (true));\n    Debug.Assert(BelowZero((new List<long>(new\
    \ long[]{(long)1L, (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L,\
    \ (long)-4L}))) == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-5L})))\
    \ == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L})))\
    \ == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <fc2b0f2343b0493895c87b1714074ad8>:0 \n"
  stdout: ''
  timestamp: 1659977273
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You're given a list of deposit and withdrawal operations\
    \ on a bank account that starts with\n    // zero balance. Your task is to detect\
    \ if at any point the balance of account fallls below zero, and\n    // at that\
    \ point function should return True. Otherwise it should return False.\n    public\
    \ static bool BelowZero(List<long> operations) {\n        // Your code here\n\
    \        long balance = operations.Sum();\n        if (balance < 0) {\n      \
    \      return true;\n        }\n        return false;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(BelowZero((new List<long>())) ==\
    \ (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)-3L, (long)1L, (long)2L, (long)-3L}))) == (false));\n    Debug.Assert(BelowZero((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)-4L, (long)5L, (long)6L})))\
    \ == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L})))\
    \ == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-5L})))\
    \ == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L})))\
    \ == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c7018792dca243c1a9fa923b241dae72>:0 \n"
  stdout: ''
  timestamp: 1659977273
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You're given a list of deposit and withdrawal operations\
    \ on a bank account that starts with\n    // zero balance. Your task is to detect\
    \ if at any point the balance of account fallls below zero, and\n    // at that\
    \ point function should return True. Otherwise it should return False.\n    public\
    \ static bool BelowZero(List<long> operations) {\n        long balance = operations.Sum();\n\
    \        if (balance < 0)\n            return true;\n        else\n          \
    \  return false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(BelowZero((new\
    \ List<long>())) == (false));\n    Debug.Assert(BelowZero((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)-3L, (long)1L, (long)2L, (long)-3L}))) == (false));\n\
    \    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)2L, (long)-4L,\
    \ (long)5L, (long)6L}))) == (true));\n    Debug.Assert(BelowZero((new List<long>(new\
    \ long[]{(long)1L, (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L,\
    \ (long)-4L}))) == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-5L})))\
    \ == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L})))\
    \ == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <0de71e94902445309c3efa5af52d4424>:0 \n"
  stdout: ''
  timestamp: 1659977272
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You're given a list of deposit and withdrawal operations\
    \ on a bank account that starts with\n    // zero balance. Your task is to detect\
    \ if at any point the balance of account fallls below zero, and\n    // at that\
    \ point function should return True. Otherwise it should return False.\n    public\
    \ static bool BelowZero(List<long> operations) {\n        // Your code here\n\
    \        long balance = operations.Sum();\n        if (balance < 0)\n        \
    \    return true;\n        else\n            return false;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(BelowZero((new List<long>()))\
    \ == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)-3L, (long)1L, (long)2L, (long)-3L}))) == (false));\n    Debug.Assert(BelowZero((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)-4L, (long)5L, (long)6L})))\
    \ == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L})))\
    \ == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-5L})))\
    \ == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L})))\
    \ == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <73fa3c75b2e0498aa5058cef24114e8c>:0 \n"
  stdout: ''
  timestamp: 1659977272
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You're given a list of deposit and withdrawal operations\
    \ on a bank account that starts with\n    // zero balance. Your task is to detect\
    \ if at any point the balance of account fallls below zero, and\n    // at that\
    \ point function should return True. Otherwise it should return False.\n    public\
    \ static bool BelowZero(List<long> operations) {\n        // Your code here\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(BelowZero((new\
    \ List<long>())) == (false));\n    Debug.Assert(BelowZero((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)-3L, (long)1L, (long)2L, (long)-3L}))) == (false));\n\
    \    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)2L, (long)-4L,\
    \ (long)5L, (long)6L}))) == (true));\n    Debug.Assert(BelowZero((new List<long>(new\
    \ long[]{(long)1L, (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L,\
    \ (long)-4L}))) == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-5L})))\
    \ == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L})))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpv88q_5wl.cs(12,24): error CS0161: ''Problem.BelowZero(List<long>)'': not
    all code paths return a value

    '
  timestamp: 1659977270
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You're given a list of deposit and withdrawal operations\
    \ on a bank account that starts with\n    // zero balance. Your task is to detect\
    \ if at any point the balance of account fallls below zero, and\n    // at that\
    \ point function should return True. Otherwise it should return False.\n    public\
    \ static bool BelowZero(List<long> operations) {\n        // Your code goes here\n\
    \        long balance = 0;\n        foreach (var operation in operations) {\n\
    \            if (operation.Operation.Equals(\"deposit\")) {\n                balance\
    \ += operation.Amount;\n            }\n            else if (operation.Operation.Equals(\"\
    withdraw\")) {\n                balance -= operation.Amount;\n            }\n\
    \        }\n        return balance < 0;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(BelowZero((new List<long>())) == (false));\n    Debug.Assert(BelowZero((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)-3L, (long)1L, (long)2L, (long)-3L})))\
    \ == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)-4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(BelowZero((new\
    \ List<long>(new long[]{(long)1L, (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L,\
    \ (long)4L, (long)-4L}))) == (false));\n    Debug.Assert(BelowZero((new List<long>(new\
    \ long[]{(long)1L, (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L,\
    \ (long)-5L}))) == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L})))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp_3mwx6dc.cs(16,27): error CS1061: ''long'' does not contain a definition
    for ''Operation'' and no accessible extension method ''Operation'' accepting a
    first argument of type ''long'' could be found (are you missing a using directive
    or an assembly reference?)

    /tmp/tmp_3mwx6dc.cs(17,38): error CS1061: ''long'' does not contain a definition
    for ''Amount'' and no accessible extension method ''Amount'' accepting a first
    argument of type ''long'' could be found (are you missing a using directive or
    an assembly reference?)

    /tmp/tmp_3mwx6dc.cs(19,32): error CS1061: ''long'' does not contain a definition
    for ''Operation'' and no accessible extension method ''Operation'' accepting a
    first argument of type ''long'' could be found (are you missing a using directive
    or an assembly reference?)

    /tmp/tmp_3mwx6dc.cs(20,38): error CS1061: ''long'' does not contain a definition
    for ''Amount'' and no accessible extension method ''Amount'' accepting a first
    argument of type ''long'' could be found (are you missing a using directive or
    an assembly reference?)

    '
  timestamp: 1659977273
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You're given a list of deposit and withdrawal operations\
    \ on a bank account that starts with\n    // zero balance. Your task is to detect\
    \ if at any point the balance of account fallls below zero, and\n    // at that\
    \ point function should return True. Otherwise it should return False.\n    public\
    \ static bool BelowZero(List<long> operations) {\n        long balance = 0;\n\
    \        foreach (var operation in operations) {\n            if (operation ==\
    \ Deposit) {\n                balance += operation.Amount;\n            } else\
    \ if (operation == Withdraw) {\n                balance -= operation.Amount;\n\
    \            }\n        }\n        return balance < 0;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(BelowZero((new List<long>())) ==\
    \ (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)-3L, (long)1L, (long)2L, (long)-3L}))) == (false));\n    Debug.Assert(BelowZero((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)-4L, (long)5L, (long)6L})))\
    \ == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L})))\
    \ == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-5L})))\
    \ == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L})))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpw4sbewol.cs(15,30): error CS0103: The name ''Deposit'' does not exist
    in the current context

    /tmp/tmpw4sbewol.cs(16,38): error CS1061: ''long'' does not contain a definition
    for ''Amount'' and no accessible extension method ''Amount'' accepting a first
    argument of type ''long'' could be found (are you missing a using directive or
    an assembly reference?)

    /tmp/tmpw4sbewol.cs(17,37): error CS0103: The name ''Withdraw'' does not exist
    in the current context

    /tmp/tmpw4sbewol.cs(18,38): error CS1061: ''long'' does not contain a definition
    for ''Amount'' and no accessible extension method ''Amount'' accepting a first
    argument of type ''long'' could be found (are you missing a using directive or
    an assembly reference?)

    '
  timestamp: 1659977271
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You're given a list of deposit and withdrawal operations\
    \ on a bank account that starts with\n    // zero balance. Your task is to detect\
    \ if at any point the balance of account fallls below zero, and\n    // at that\
    \ point function should return True. Otherwise it should return False.\n    public\
    \ static bool BelowZero(List<long> operations) {\n        // Your code here\n\
    \        long balance = operations.Sum();\n        if (balance < 0) {\n      \
    \      return true;\n        }\n        return false;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(BelowZero((new List<long>())) ==\
    \ (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)-3L, (long)1L, (long)2L, (long)-3L}))) == (false));\n    Debug.Assert(BelowZero((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)-4L, (long)5L, (long)6L})))\
    \ == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L})))\
    \ == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-5L})))\
    \ == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L})))\
    \ == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c7018792dca243c1a9fa923b241dae72>:0 \n"
  stdout: ''
  timestamp: 1659977273
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You're given a list of deposit and withdrawal operations\
    \ on a bank account that starts with\n    // zero balance. Your task is to detect\
    \ if at any point the balance of account fallls below zero, and\n    // at that\
    \ point function should return True. Otherwise it should return False.\n    public\
    \ static bool BelowZero(List<long> operations) {\n        // Your code here\n\
    \        long balance = 0;\n        foreach (var operation in operations) {\n\
    \            long deposit = operation.Deposit;\n            long withdraw = operation.Withdraw;\n\
    \            balance = balance + deposit - withdraw;\n        }\n        return\
    \ balance < 0;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(BelowZero((new\
    \ List<long>())) == (false));\n    Debug.Assert(BelowZero((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)-3L, (long)1L, (long)2L, (long)-3L}))) == (false));\n\
    \    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)2L, (long)-4L,\
    \ (long)5L, (long)6L}))) == (true));\n    Debug.Assert(BelowZero((new List<long>(new\
    \ long[]{(long)1L, (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L,\
    \ (long)-4L}))) == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-5L})))\
    \ == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L})))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpxj39y_md.cs(16,38): error CS1061: ''long'' does not contain a definition
    for ''Deposit'' and no accessible extension method ''Deposit'' accepting a first
    argument of type ''long'' could be found (are you missing a using directive or
    an assembly reference?)

    /tmp/tmpxj39y_md.cs(17,39): error CS1061: ''long'' does not contain a definition
    for ''Withdraw'' and no accessible extension method ''Withdraw'' accepting a first
    argument of type ''long'' could be found (are you missing a using directive or
    an assembly reference?)

    '
  timestamp: 1659977273
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You're given a list of deposit and withdrawal operations\
    \ on a bank account that starts with\n    // zero balance. Your task is to detect\
    \ if at any point the balance of account fallls below zero, and\n    // at that\
    \ point function should return True. Otherwise it should return False.\n    public\
    \ static bool BelowZero(List<long> operations) {\n        long balance = 0;\n\
    \        foreach (var operation in operations) {\n            switch (operation)\
    \ {\n                case Deposit:\n                    balance += operation.Amount;\n\
    \                    break;\n                case Withdraw:\n                \
    \    balance -= operation.Amount;\n                    break;\n            }\n\
    \        }\n        return balance < 0;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(BelowZero((new List<long>())) == (false));\n    Debug.Assert(BelowZero((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)-3L, (long)1L, (long)2L, (long)-3L})))\
    \ == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)-4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(BelowZero((new\
    \ List<long>(new long[]{(long)1L, (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L,\
    \ (long)4L, (long)-4L}))) == (false));\n    Debug.Assert(BelowZero((new List<long>(new\
    \ long[]{(long)1L, (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L,\
    \ (long)-5L}))) == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L})))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmptw977unr.cs(16,22): error CS0103: The name ''Deposit'' does not exist
    in the current context

    /tmp/tmptw977unr.cs(17,42): error CS1061: ''long'' does not contain a definition
    for ''Amount'' and no accessible extension method ''Amount'' accepting a first
    argument of type ''long'' could be found (are you missing a using directive or
    an assembly reference?)

    /tmp/tmptw977unr.cs(19,22): error CS0103: The name ''Withdraw'' does not exist
    in the current context

    /tmp/tmptw977unr.cs(20,42): error CS1061: ''long'' does not contain a definition
    for ''Amount'' and no accessible extension method ''Amount'' accepting a first
    argument of type ''long'' could be found (are you missing a using directive or
    an assembly reference?)

    '
  timestamp: 1659977271
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You're given a list of deposit and withdrawal operations\
    \ on a bank account that starts with\n    // zero balance. Your task is to detect\
    \ if at any point the balance of account fallls below zero, and\n    // at that\
    \ point function should return True. Otherwise it should return False.\n    public\
    \ static bool BelowZero(List<long> operations) {\n        long balance = 0;\n\
    \        foreach (long operation in operations) {\n            if (operation <\
    \ 0) {\n                balance -= operation;\n            } else {\n        \
    \        balance += operation;\n            }\n            if (balance < 0) {\n\
    \                return true;\n            }\n        }\n        return false;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(BelowZero((new\
    \ List<long>())) == (false));\n    Debug.Assert(BelowZero((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)-3L, (long)1L, (long)2L, (long)-3L}))) == (false));\n\
    \    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)2L, (long)-4L,\
    \ (long)5L, (long)6L}))) == (true));\n    Debug.Assert(BelowZero((new List<long>(new\
    \ long[]{(long)1L, (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L,\
    \ (long)-4L}))) == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-5L})))\
    \ == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L})))\
    \ == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <aca5306e69d244879f7a7cb3ed984afa>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <aca5306e69d244879f7a7cb3ed984afa>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659977273
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You're given a list of deposit and withdrawal operations\
    \ on a bank account that starts with\n    // zero balance. Your task is to detect\
    \ if at any point the balance of account fallls below zero, and\n    // at that\
    \ point function should return True. Otherwise it should return False.\n    public\
    \ static bool BelowZero(List<long> operations) {\n        long balance = 0;\n\
    \        foreach (var operation in operations) {\n            switch (operation)\
    \ {\n                case Deposit:\n                    balance += 1;\n      \
    \              break;\n                case Withdraw:\n                    balance\
    \ -= 1;\n                    break;\n            }\n        }\n        return\
    \ balance < 0;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(BelowZero((new\
    \ List<long>())) == (false));\n    Debug.Assert(BelowZero((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)-3L, (long)1L, (long)2L, (long)-3L}))) == (false));\n\
    \    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)2L, (long)-4L,\
    \ (long)5L, (long)6L}))) == (true));\n    Debug.Assert(BelowZero((new List<long>(new\
    \ long[]{(long)1L, (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L,\
    \ (long)-4L}))) == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-5L})))\
    \ == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L})))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpk77zp5he.cs(16,22): error CS0103: The name ''Deposit'' does not exist
    in the current context

    /tmp/tmpk77zp5he.cs(19,22): error CS0103: The name ''Withdraw'' does not exist
    in the current context

    '
  timestamp: 1659977271
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You're given a list of deposit and withdrawal operations\
    \ on a bank account that starts with\n    // zero balance. Your task is to detect\
    \ if at any point the balance of account fallls below zero, and\n    // at that\
    \ point function should return True. Otherwise it should return False.\n    public\
    \ static bool BelowZero(List<long> operations) {\n        long balance = 0;\n\
    \        foreach (long op in operations) {\n            if (op == 1) {\n     \
    \           balance += 1;\n            } else if (op == -1) {\n              \
    \  balance -= 1;\n            }\n        }\n        return balance < 0;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(BelowZero((new\
    \ List<long>())) == (false));\n    Debug.Assert(BelowZero((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)-3L, (long)1L, (long)2L, (long)-3L}))) == (false));\n\
    \    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)2L, (long)-4L,\
    \ (long)5L, (long)6L}))) == (true));\n    Debug.Assert(BelowZero((new List<long>(new\
    \ long[]{(long)1L, (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L,\
    \ (long)-4L}))) == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-5L})))\
    \ == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L})))\
    \ == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <2bccfcc36e85491c92b4cc3edea16acd>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <2bccfcc36e85491c92b4cc3edea16acd>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659977273
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You're given a list of deposit and withdrawal operations\
    \ on a bank account that starts with\n    // zero balance. Your task is to detect\
    \ if at any point the balance of account fallls below zero, and\n    // at that\
    \ point function should return True. Otherwise it should return False.\n    public\
    \ static bool BelowZero(List<long> operations) {\n        // Your code here\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(BelowZero((new\
    \ List<long>())) == (false));\n    Debug.Assert(BelowZero((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)-3L, (long)1L, (long)2L, (long)-3L}))) == (false));\n\
    \    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)2L, (long)-4L,\
    \ (long)5L, (long)6L}))) == (true));\n    Debug.Assert(BelowZero((new List<long>(new\
    \ long[]{(long)1L, (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L,\
    \ (long)-4L}))) == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-5L})))\
    \ == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L})))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpv88q_5wl.cs(12,24): error CS0161: ''Problem.BelowZero(List<long>)'': not
    all code paths return a value

    '
  timestamp: 1659977270
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You're given a list of deposit and withdrawal operations\
    \ on a bank account that starts with\n    // zero balance. Your task is to detect\
    \ if at any point the balance of account fallls below zero, and\n    // at that\
    \ point function should return True. Otherwise it should return False.\n    public\
    \ static bool BelowZero(List<long> operations) {\n        long balance = 0;\n\
    \        foreach (var operation in operations) {\n            if (operation ==\
    \ Deposit) {\n                balance += 1;\n            } else if (operation\
    \ == Withdraw) {\n                balance -= 1;\n            }\n        }\n  \
    \      return balance < 0;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(BelowZero((new List<long>())) == (false));\n    Debug.Assert(BelowZero((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)-3L, (long)1L, (long)2L, (long)-3L})))\
    \ == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)-4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(BelowZero((new\
    \ List<long>(new long[]{(long)1L, (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L,\
    \ (long)4L, (long)-4L}))) == (false));\n    Debug.Assert(BelowZero((new List<long>(new\
    \ long[]{(long)1L, (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L,\
    \ (long)-5L}))) == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L})))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmphnna2qxr.cs(15,30): error CS0103: The name ''Deposit'' does not exist
    in the current context

    /tmp/tmphnna2qxr.cs(17,37): error CS0103: The name ''Withdraw'' does not exist
    in the current context

    '
  timestamp: 1659977271
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You're given a list of deposit and withdrawal operations\
    \ on a bank account that starts with\n    // zero balance. Your task is to detect\
    \ if at any point the balance of account fallls below zero, and\n    // at that\
    \ point function should return True. Otherwise it should return False.\n    public\
    \ static bool BelowZero(List<long> operations) {\n        long balance = operations.Sum();\n\
    \        return balance < 0;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(BelowZero((new List<long>())) == (false));\n    Debug.Assert(BelowZero((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)-3L, (long)1L, (long)2L, (long)-3L})))\
    \ == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)-4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(BelowZero((new\
    \ List<long>(new long[]{(long)1L, (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L,\
    \ (long)4L, (long)-4L}))) == (false));\n    Debug.Assert(BelowZero((new List<long>(new\
    \ long[]{(long)1L, (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L,\
    \ (long)-5L}))) == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L})))\
    \ == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <01777425a6274e0da651fa719a3f2c54>:0 \n"
  stdout: ''
  timestamp: 1659977271
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You're given a list of deposit and withdrawal operations\
    \ on a bank account that starts with\n    // zero balance. Your task is to detect\
    \ if at any point the balance of account fallls below zero, and\n    // at that\
    \ point function should return True. Otherwise it should return False.\n    public\
    \ static bool BelowZero(List<long> operations) {\n        long balance = operations.Sum();\n\
    \        return balance < 0;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(BelowZero((new List<long>())) == (false));\n    Debug.Assert(BelowZero((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)-3L, (long)1L, (long)2L, (long)-3L})))\
    \ == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)-4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(BelowZero((new\
    \ List<long>(new long[]{(long)1L, (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L,\
    \ (long)4L, (long)-4L}))) == (false));\n    Debug.Assert(BelowZero((new List<long>(new\
    \ long[]{(long)1L, (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L,\
    \ (long)-5L}))) == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L})))\
    \ == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <01777425a6274e0da651fa719a3f2c54>:0 \n"
  stdout: ''
  timestamp: 1659977271
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You're given a list of deposit and withdrawal operations\
    \ on a bank account that starts with\n    // zero balance. Your task is to detect\
    \ if at any point the balance of account fallls below zero, and\n    // at that\
    \ point function should return True. Otherwise it should return False.\n    public\
    \ static bool BelowZero(List<long> operations) {\n        long balance = operations.Sum();\n\
    \        return balance < 0;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(BelowZero((new List<long>())) == (false));\n    Debug.Assert(BelowZero((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)-3L, (long)1L, (long)2L, (long)-3L})))\
    \ == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)-4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(BelowZero((new\
    \ List<long>(new long[]{(long)1L, (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L,\
    \ (long)4L, (long)-4L}))) == (false));\n    Debug.Assert(BelowZero((new List<long>(new\
    \ long[]{(long)1L, (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L,\
    \ (long)-5L}))) == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L})))\
    \ == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <01777425a6274e0da651fa719a3f2c54>:0 \n"
  stdout: ''
  timestamp: 1659977271
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You're given a list of deposit and withdrawal operations\
    \ on a bank account that starts with\n    // zero balance. Your task is to detect\
    \ if at any point the balance of account fallls below zero, and\n    // at that\
    \ point function should return True. Otherwise it should return False.\n    public\
    \ static bool BelowZero(List<long> operations) {\n        // Your code here\n\
    \        long balance = 0;\n        foreach (var operation in operations) {\n\
    \            if (operation.Operation.Equals(\"deposit\")) {\n                balance\
    \ += operation.Amount;\n            }\n            else if (operation.Operation.Equals(\"\
    withdraw\")) {\n                balance -= operation.Amount;\n            }\n\
    \        }\n        return balance < 0;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(BelowZero((new List<long>())) == (false));\n    Debug.Assert(BelowZero((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)-3L, (long)1L, (long)2L, (long)-3L})))\
    \ == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)-4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(BelowZero((new\
    \ List<long>(new long[]{(long)1L, (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L,\
    \ (long)4L, (long)-4L}))) == (false));\n    Debug.Assert(BelowZero((new List<long>(new\
    \ long[]{(long)1L, (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L,\
    \ (long)-5L}))) == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L})))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpdfsmp1nx.cs(16,27): error CS1061: ''long'' does not contain a definition
    for ''Operation'' and no accessible extension method ''Operation'' accepting a
    first argument of type ''long'' could be found (are you missing a using directive
    or an assembly reference?)

    /tmp/tmpdfsmp1nx.cs(17,38): error CS1061: ''long'' does not contain a definition
    for ''Amount'' and no accessible extension method ''Amount'' accepting a first
    argument of type ''long'' could be found (are you missing a using directive or
    an assembly reference?)

    /tmp/tmpdfsmp1nx.cs(19,32): error CS1061: ''long'' does not contain a definition
    for ''Operation'' and no accessible extension method ''Operation'' accepting a
    first argument of type ''long'' could be found (are you missing a using directive
    or an assembly reference?)

    /tmp/tmpdfsmp1nx.cs(20,38): error CS1061: ''long'' does not contain a definition
    for ''Amount'' and no accessible extension method ''Amount'' accepting a first
    argument of type ''long'' could be found (are you missing a using directive or
    an assembly reference?)

    '
  timestamp: 1659977271
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You're given a list of deposit and withdrawal operations\
    \ on a bank account that starts with\n    // zero balance. Your task is to detect\
    \ if at any point the balance of account fallls below zero, and\n    // at that\
    \ point function should return True. Otherwise it should return False.\n    public\
    \ static bool BelowZero(List<long> operations) {\n        // Your code here\n\
    \        long balance = 0;\n        foreach (var operation in operations) {\n\
    \            long amount = operation;\n            balance = balance + amount;\n\
    \        }\n        if (balance < 0) {\n            return true;\n        }\n\
    \        return false;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(BelowZero((new List<long>())) == (false));\n    Debug.Assert(BelowZero((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)-3L, (long)1L, (long)2L, (long)-3L})))\
    \ == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)-4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(BelowZero((new\
    \ List<long>(new long[]{(long)1L, (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L,\
    \ (long)4L, (long)-4L}))) == (false));\n    Debug.Assert(BelowZero((new List<long>(new\
    \ long[]{(long)1L, (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L,\
    \ (long)-5L}))) == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L})))\
    \ == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <b1a62560dc7142c1aac597f648d7033d>:0 \n"
  stdout: ''
  timestamp: 1659977273
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You're given a list of deposit and withdrawal operations\
    \ on a bank account that starts with\n    // zero balance. Your task is to detect\
    \ if at any point the balance of account fallls below zero, and\n    // at that\
    \ point function should return True. Otherwise it should return False.\n    public\
    \ static bool BelowZero(List<long> operations) {\n        // Your code here\n\
    \        long balance = 0;\n        foreach (var op in operations) {\n       \
    \     long deposit = op.Deposit;\n            long withdrawal = op.Withdrawal;\n\
    \            balance = balance + deposit - withdrawal;\n        }\n        return\
    \ balance < 0;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(BelowZero((new\
    \ List<long>())) == (false));\n    Debug.Assert(BelowZero((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)-3L, (long)1L, (long)2L, (long)-3L}))) == (false));\n\
    \    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)2L, (long)-4L,\
    \ (long)5L, (long)6L}))) == (true));\n    Debug.Assert(BelowZero((new List<long>(new\
    \ long[]{(long)1L, (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L,\
    \ (long)-4L}))) == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-5L})))\
    \ == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L})))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp7phs8c9_.cs(16,31): error CS1061: ''long'' does not contain a definition
    for ''Deposit'' and no accessible extension method ''Deposit'' accepting a first
    argument of type ''long'' could be found (are you missing a using directive or
    an assembly reference?)

    /tmp/tmp7phs8c9_.cs(17,34): error CS1061: ''long'' does not contain a definition
    for ''Withdrawal'' and no accessible extension method ''Withdrawal'' accepting
    a first argument of type ''long'' could be found (are you missing a using directive
    or an assembly reference?)

    '
  timestamp: 1659977273
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You're given a list of deposit and withdrawal operations\
    \ on a bank account that starts with\n    // zero balance. Your task is to detect\
    \ if at any point the balance of account fallls below zero, and\n    // at that\
    \ point function should return True. Otherwise it should return False.\n    public\
    \ static bool BelowZero(List<long> operations) {\n        // Your code goes here\n\
    \        long sum = 0;\n        foreach (var item in operations) {\n         \
    \   sum += item;\n        }\n        if (sum < 0)\n            return true;\n\
    \        else\n            return false;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(BelowZero((new List<long>())) == (false));\n    Debug.Assert(BelowZero((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)-3L, (long)1L, (long)2L, (long)-3L})))\
    \ == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)-4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(BelowZero((new\
    \ List<long>(new long[]{(long)1L, (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L,\
    \ (long)4L, (long)-4L}))) == (false));\n    Debug.Assert(BelowZero((new List<long>(new\
    \ long[]{(long)1L, (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L,\
    \ (long)-5L}))) == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L})))\
    \ == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <88d26d8942244f608e7c2b9530fea4f0>:0 \n"
  stdout: ''
  timestamp: 1659977271
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You're given a list of deposit and withdrawal operations\
    \ on a bank account that starts with\n    // zero balance. Your task is to detect\
    \ if at any point the balance of account fallls below zero, and\n    // at that\
    \ point function should return True. Otherwise it should return False.\n    public\
    \ static bool BelowZero(List<long> operations) {\n        long balance = 0;\n\
    \        foreach (var operation in operations) {\n            if (operation ==\
    \ Deposit) {\n                balance += operation.Amount;\n            } else\
    \ if (operation == Withdraw) {\n                balance -= operation.Amount;\n\
    \            }\n        }\n        return balance < 0;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(BelowZero((new List<long>())) ==\
    \ (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)-3L, (long)1L, (long)2L, (long)-3L}))) == (false));\n    Debug.Assert(BelowZero((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)-4L, (long)5L, (long)6L})))\
    \ == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L})))\
    \ == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-5L})))\
    \ == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L})))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpw4sbewol.cs(15,30): error CS0103: The name ''Deposit'' does not exist
    in the current context

    /tmp/tmpw4sbewol.cs(16,38): error CS1061: ''long'' does not contain a definition
    for ''Amount'' and no accessible extension method ''Amount'' accepting a first
    argument of type ''long'' could be found (are you missing a using directive or
    an assembly reference?)

    /tmp/tmpw4sbewol.cs(17,37): error CS0103: The name ''Withdraw'' does not exist
    in the current context

    /tmp/tmpw4sbewol.cs(18,38): error CS1061: ''long'' does not contain a definition
    for ''Amount'' and no accessible extension method ''Amount'' accepting a first
    argument of type ''long'' could be found (are you missing a using directive or
    an assembly reference?)

    '
  timestamp: 1659977271
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You're given a list of deposit and withdrawal operations\
    \ on a bank account that starts with\n    // zero balance. Your task is to detect\
    \ if at any point the balance of account fallls below zero, and\n    // at that\
    \ point function should return True. Otherwise it should return False.\n    public\
    \ static bool BelowZero(List<long> operations) {\n        // Your code here\n\
    \        long balance = 0;\n        foreach (var operation in operations) {\n\
    \            if (operation == 1) {\n                balance += operation;\n  \
    \          }\n            else if (operation == -1) {\n                balance\
    \ -= operation;\n            }\n        }\n        return balance < 0;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(BelowZero((new\
    \ List<long>())) == (false));\n    Debug.Assert(BelowZero((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)-3L, (long)1L, (long)2L, (long)-3L}))) == (false));\n\
    \    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)2L, (long)-4L,\
    \ (long)5L, (long)6L}))) == (true));\n    Debug.Assert(BelowZero((new List<long>(new\
    \ long[]{(long)1L, (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L,\
    \ (long)-4L}))) == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-5L})))\
    \ == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L})))\
    \ == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <f961c6e274424284a632eff28163e3d8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <f961c6e274424284a632eff28163e3d8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659977272
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You're given a list of deposit and withdrawal operations\
    \ on a bank account that starts with\n    // zero balance. Your task is to detect\
    \ if at any point the balance of account fallls below zero, and\n    // at that\
    \ point function should return True. Otherwise it should return False.\n    public\
    \ static bool BelowZero(List<long> operations) {\n        long balance = operations.First();\n\
    \        foreach (var operation in operations.Skip(1))\n        {\n          \
    \  if (balance < 0)\n            {\n                return true;\n           \
    \ }\n            balance = balance - operation;\n        }\n        return false;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(BelowZero((new\
    \ List<long>())) == (false));\n    Debug.Assert(BelowZero((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)-3L, (long)1L, (long)2L, (long)-3L}))) == (false));\n\
    \    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)2L, (long)-4L,\
    \ (long)5L, (long)6L}))) == (true));\n    Debug.Assert(BelowZero((new List<long>(new\
    \ long[]{(long)1L, (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L,\
    \ (long)-4L}))) == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-5L})))\
    \ == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L})))\
    \ == (true));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.InvalidOperationException: Sequence contains\
    \ no elements\n  at System.Linq.Enumerable.First[TSource] (System.Collections.Generic.IEnumerable`1[T]\
    \ source) [0x00010] in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem.BelowZero\
    \ (System.Collections.Generic.List`1[T] operations) [0x00001] in <808599aeed254896b0fd87721d250026>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <808599aeed254896b0fd87721d250026>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.InvalidOperationException: Sequence\
    \ contains no elements\n  at System.Linq.Enumerable.First[TSource] (System.Collections.Generic.IEnumerable`1[T]\
    \ source) [0x00010] in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem.BelowZero\
    \ (System.Collections.Generic.List`1[T] operations) [0x00001] in <808599aeed254896b0fd87721d250026>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <808599aeed254896b0fd87721d250026>:0\
    \ \n"
  stdout: ''
  timestamp: 1659977272
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You're given a list of deposit and withdrawal operations\
    \ on a bank account that starts with\n    // zero balance. Your task is to detect\
    \ if at any point the balance of account fallls below zero, and\n    // at that\
    \ point function should return True. Otherwise it should return False.\n    public\
    \ static bool BelowZero(List<long> operations) {\n        long balance = 0;\n\
    \        foreach (var operation in operations) {\n            if (operation ==\
    \ Deposit) {\n                balance += 1;\n            } else if (operation\
    \ == Withdraw) {\n                balance -= 1;\n            }\n        }\n  \
    \      return balance < 0;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(BelowZero((new List<long>())) == (false));\n    Debug.Assert(BelowZero((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)-3L, (long)1L, (long)2L, (long)-3L})))\
    \ == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)-4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(BelowZero((new\
    \ List<long>(new long[]{(long)1L, (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L,\
    \ (long)4L, (long)-4L}))) == (false));\n    Debug.Assert(BelowZero((new List<long>(new\
    \ long[]{(long)1L, (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L,\
    \ (long)-5L}))) == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L})))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmphnna2qxr.cs(15,30): error CS0103: The name ''Deposit'' does not exist
    in the current context

    /tmp/tmphnna2qxr.cs(17,37): error CS0103: The name ''Withdraw'' does not exist
    in the current context

    '
  timestamp: 1659977271
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You're given a list of deposit and withdrawal operations\
    \ on a bank account that starts with\n    // zero balance. Your task is to detect\
    \ if at any point the balance of account fallls below zero, and\n    // at that\
    \ point function should return True. Otherwise it should return False.\n    public\
    \ static bool BelowZero(List<long> operations) {\n        // Your code goes here\n\
    \        long balance = 0;\n        foreach (var operation in operations) {\n\
    \            long amount = operation;\n            if (amount < 0) {\n       \
    \         balance = balance - amount;\n            } else {\n                balance\
    \ = balance + amount;\n            }\n        }\n        return balance < 0;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(BelowZero((new\
    \ List<long>())) == (false));\n    Debug.Assert(BelowZero((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)-3L, (long)1L, (long)2L, (long)-3L}))) == (false));\n\
    \    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)2L, (long)-4L,\
    \ (long)5L, (long)6L}))) == (true));\n    Debug.Assert(BelowZero((new List<long>(new\
    \ long[]{(long)1L, (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L,\
    \ (long)-4L}))) == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-5L})))\
    \ == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L})))\
    \ == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9626c85cb1404ae2926e9400658c35df>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9626c85cb1404ae2926e9400658c35df>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659977272
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You're given a list of deposit and withdrawal operations\
    \ on a bank account that starts with\n    // zero balance. Your task is to detect\
    \ if at any point the balance of account fallls below zero, and\n    // at that\
    \ point function should return True. Otherwise it should return False.\n    public\
    \ static bool BelowZero(List<long> operations) {\n        long balance = 0;\n\
    \        foreach (var operation in operations) {\n            switch (operation)\
    \ {\n                case Deposit:\n                    balance += operation.Amount;\n\
    \                    break;\n                case Withdraw:\n                \
    \    balance -= operation.Amount;\n                    break;\n            }\n\
    \        }\n        return balance < 0;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(BelowZero((new List<long>())) == (false));\n    Debug.Assert(BelowZero((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)-3L, (long)1L, (long)2L, (long)-3L})))\
    \ == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)-4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(BelowZero((new\
    \ List<long>(new long[]{(long)1L, (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L,\
    \ (long)4L, (long)-4L}))) == (false));\n    Debug.Assert(BelowZero((new List<long>(new\
    \ long[]{(long)1L, (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L,\
    \ (long)-5L}))) == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L})))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmptw977unr.cs(16,22): error CS0103: The name ''Deposit'' does not exist
    in the current context

    /tmp/tmptw977unr.cs(17,42): error CS1061: ''long'' does not contain a definition
    for ''Amount'' and no accessible extension method ''Amount'' accepting a first
    argument of type ''long'' could be found (are you missing a using directive or
    an assembly reference?)

    /tmp/tmptw977unr.cs(19,22): error CS0103: The name ''Withdraw'' does not exist
    in the current context

    /tmp/tmptw977unr.cs(20,42): error CS1061: ''long'' does not contain a definition
    for ''Amount'' and no accessible extension method ''Amount'' accepting a first
    argument of type ''long'' could be found (are you missing a using directive or
    an assembly reference?)

    '
  timestamp: 1659977271
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You're given a list of deposit and withdrawal operations\
    \ on a bank account that starts with\n    // zero balance. Your task is to detect\
    \ if at any point the balance of account fallls below zero, and\n    // at that\
    \ point function should return True. Otherwise it should return False.\n    public\
    \ static bool BelowZero(List<long> operations) {\n        // Your code here\n\
    \        long balance = operations.Sum();\n        if (balance < 0)\n        \
    \    return true;\n        else\n            return false;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(BelowZero((new List<long>()))\
    \ == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)-3L, (long)1L, (long)2L, (long)-3L}))) == (false));\n    Debug.Assert(BelowZero((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)-4L, (long)5L, (long)6L})))\
    \ == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L})))\
    \ == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-5L})))\
    \ == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L})))\
    \ == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <73fa3c75b2e0498aa5058cef24114e8c>:0 \n"
  stdout: ''
  timestamp: 1659977272
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You're given a list of deposit and withdrawal operations\
    \ on a bank account that starts with\n    // zero balance. Your task is to detect\
    \ if at any point the balance of account fallls below zero, and\n    // at that\
    \ point function should return True. Otherwise it should return False.\n    public\
    \ static bool BelowZero(List<long> operations) {\n        // Your code here\n\
    \        long sum = 0;\n        foreach (var item in operations)\n        {\n\
    \            sum += item;\n        }\n        if (sum < 0)\n        {\n      \
    \      return true;\n        }\n        else\n        {\n            return false;\n\
    \        }\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(BelowZero((new\
    \ List<long>())) == (false));\n    Debug.Assert(BelowZero((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)-3L, (long)1L, (long)2L, (long)-3L}))) == (false));\n\
    \    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)2L, (long)-4L,\
    \ (long)5L, (long)6L}))) == (true));\n    Debug.Assert(BelowZero((new List<long>(new\
    \ long[]{(long)1L, (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L,\
    \ (long)-4L}))) == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-5L})))\
    \ == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L})))\
    \ == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <2701f8063f1248b0aa6142cac3e0f0c5>:0 \n"
  stdout: ''
  timestamp: 1659977273
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You're given a list of deposit and withdrawal operations\
    \ on a bank account that starts with\n    // zero balance. Your task is to detect\
    \ if at any point the balance of account fallls below zero, and\n    // at that\
    \ point function should return True. Otherwise it should return False.\n    public\
    \ static bool BelowZero(List<long> operations) {\n        long balance = 0;\n\
    \        foreach (var operation in operations) {\n            if (operation ==\
    \ Deposit) {\n                balance += 1;\n            } else if (operation\
    \ == Withdraw) {\n                balance -= 1;\n            }\n        }\n  \
    \      return balance < 0;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(BelowZero((new List<long>())) == (false));\n    Debug.Assert(BelowZero((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)-3L, (long)1L, (long)2L, (long)-3L})))\
    \ == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)-4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(BelowZero((new\
    \ List<long>(new long[]{(long)1L, (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L,\
    \ (long)4L, (long)-4L}))) == (false));\n    Debug.Assert(BelowZero((new List<long>(new\
    \ long[]{(long)1L, (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L,\
    \ (long)-5L}))) == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L})))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmphnna2qxr.cs(15,30): error CS0103: The name ''Deposit'' does not exist
    in the current context

    /tmp/tmphnna2qxr.cs(17,37): error CS0103: The name ''Withdraw'' does not exist
    in the current context

    '
  timestamp: 1659977271
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You're given a list of deposit and withdrawal operations\
    \ on a bank account that starts with\n    // zero balance. Your task is to detect\
    \ if at any point the balance of account fallls below zero, and\n    // at that\
    \ point function should return True. Otherwise it should return False.\n    public\
    \ static bool BelowZero(List<long> operations) {\n        // Your code here\n\
    \        long balance = 0;\n        foreach (var operation in operations) {\n\
    \            if (operation == 1) {\n                balance += operation;\n  \
    \          } else if (operation == -1) {\n                balance -= operation;\n\
    \            }\n        }\n        return balance < 0;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(BelowZero((new List<long>())) ==\
    \ (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)-3L, (long)1L, (long)2L, (long)-3L}))) == (false));\n    Debug.Assert(BelowZero((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)-4L, (long)5L, (long)6L})))\
    \ == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L})))\
    \ == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-5L})))\
    \ == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L})))\
    \ == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <bf44c0321f344fcf876a2ee4ee450416>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <bf44c0321f344fcf876a2ee4ee450416>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659977273
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You're given a list of deposit and withdrawal operations\
    \ on a bank account that starts with\n    // zero balance. Your task is to detect\
    \ if at any point the balance of account fallls below zero, and\n    // at that\
    \ point function should return True. Otherwise it should return False.\n    public\
    \ static bool BelowZero(List<long> operations) {\n        long balance = 0;\n\
    \        foreach (var operation in operations) {\n            if (operation ==\
    \ Deposit) {\n                balance += 1;\n            } else if (operation\
    \ == Withdraw) {\n                balance -= 1;\n            }\n        }\n  \
    \      return balance < 0;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(BelowZero((new List<long>())) == (false));\n    Debug.Assert(BelowZero((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)-3L, (long)1L, (long)2L, (long)-3L})))\
    \ == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)-4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(BelowZero((new\
    \ List<long>(new long[]{(long)1L, (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L,\
    \ (long)4L, (long)-4L}))) == (false));\n    Debug.Assert(BelowZero((new List<long>(new\
    \ long[]{(long)1L, (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L,\
    \ (long)-5L}))) == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L})))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmphnna2qxr.cs(15,30): error CS0103: The name ''Deposit'' does not exist
    in the current context

    /tmp/tmphnna2qxr.cs(17,37): error CS0103: The name ''Withdraw'' does not exist
    in the current context

    '
  timestamp: 1659977271
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You're given a list of deposit and withdrawal operations\
    \ on a bank account that starts with\n    // zero balance. Your task is to detect\
    \ if at any point the balance of account fallls below zero, and\n    // at that\
    \ point function should return True. Otherwise it should return False.\n    public\
    \ static bool BelowZero(List<long> operations) {\n        // Your code goes here\n\
    \        long balance = 0;\n        foreach (var operation in operations) {\n\
    \            if (operation == Deposit) {\n                balance += operation.Amount;\n\
    \            } else if (operation == Withdraw) {\n                balance -= operation.Amount;\n\
    \            }\n        }\n        return balance < 0;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(BelowZero((new List<long>())) ==\
    \ (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)-3L, (long)1L, (long)2L, (long)-3L}))) == (false));\n    Debug.Assert(BelowZero((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)-4L, (long)5L, (long)6L})))\
    \ == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L})))\
    \ == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-5L})))\
    \ == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L})))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp4v_v_6_2.cs(16,30): error CS0103: The name ''Deposit'' does not exist
    in the current context

    /tmp/tmp4v_v_6_2.cs(17,38): error CS1061: ''long'' does not contain a definition
    for ''Amount'' and no accessible extension method ''Amount'' accepting a first
    argument of type ''long'' could be found (are you missing a using directive or
    an assembly reference?)

    /tmp/tmp4v_v_6_2.cs(18,37): error CS0103: The name ''Withdraw'' does not exist
    in the current context

    /tmp/tmp4v_v_6_2.cs(19,38): error CS1061: ''long'' does not contain a definition
    for ''Amount'' and no accessible extension method ''Amount'' accepting a first
    argument of type ''long'' could be found (are you missing a using directive or
    an assembly reference?)

    '
  timestamp: 1659977270
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You're given a list of deposit and withdrawal operations\
    \ on a bank account that starts with\n    // zero balance. Your task is to detect\
    \ if at any point the balance of account fallls below zero, and\n    // at that\
    \ point function should return True. Otherwise it should return False.\n    public\
    \ static bool BelowZero(List<long> operations) {\n        long balance = operations.First();\n\
    \        foreach (var operation in operations.Skip(1))\n        {\n          \
    \  if (operation == Deposit)\n            {\n                balance += operation;\n\
    \            }\n            else if (operation == Withdraw)\n            {\n \
    \               balance -= operation;\n            }\n            else\n     \
    \       {\n                throw new ArgumentException(\"Invalid operation\");\n\
    \            }\n            if (balance < 0)\n            {\n                return\
    \ true;\n            }\n        }\n        return false;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(BelowZero((new List<long>())) ==\
    \ (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)-3L, (long)1L, (long)2L, (long)-3L}))) == (false));\n    Debug.Assert(BelowZero((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)-4L, (long)5L, (long)6L})))\
    \ == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L})))\
    \ == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-5L})))\
    \ == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L})))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpjft0wkie.cs(16,30): error CS0103: The name ''Deposit'' does not exist
    in the current context

    /tmp/tmpjft0wkie.cs(20,35): error CS0103: The name ''Withdraw'' does not exist
    in the current context

    '
  timestamp: 1659977273
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You're given a list of deposit and withdrawal operations\
    \ on a bank account that starts with\n    // zero balance. Your task is to detect\
    \ if at any point the balance of account fallls below zero, and\n    // at that\
    \ point function should return True. Otherwise it should return False.\n    public\
    \ static bool BelowZero(List<long> operations) {\n        long balance = 0;\n\
    \        foreach (var operation in operations) {\n            if (operation.Operation.Equals(\"\
    deposit\")) {\n                balance += operation.Amount;\n            }\n \
    \           else if (operation.Operation.Equals(\"withdraw\")) {\n           \
    \     balance -= operation.Amount;\n            }\n        }\n        return balance\
    \ < 0;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(BelowZero((new\
    \ List<long>())) == (false));\n    Debug.Assert(BelowZero((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)-3L, (long)1L, (long)2L, (long)-3L}))) == (false));\n\
    \    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)2L, (long)-4L,\
    \ (long)5L, (long)6L}))) == (true));\n    Debug.Assert(BelowZero((new List<long>(new\
    \ long[]{(long)1L, (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L,\
    \ (long)-4L}))) == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-5L})))\
    \ == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L})))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp882nym8y.cs(15,27): error CS1061: ''long'' does not contain a definition
    for ''Operation'' and no accessible extension method ''Operation'' accepting a
    first argument of type ''long'' could be found (are you missing a using directive
    or an assembly reference?)

    /tmp/tmp882nym8y.cs(16,38): error CS1061: ''long'' does not contain a definition
    for ''Amount'' and no accessible extension method ''Amount'' accepting a first
    argument of type ''long'' could be found (are you missing a using directive or
    an assembly reference?)

    /tmp/tmp882nym8y.cs(18,32): error CS1061: ''long'' does not contain a definition
    for ''Operation'' and no accessible extension method ''Operation'' accepting a
    first argument of type ''long'' could be found (are you missing a using directive
    or an assembly reference?)

    /tmp/tmp882nym8y.cs(19,38): error CS1061: ''long'' does not contain a definition
    for ''Amount'' and no accessible extension method ''Amount'' accepting a first
    argument of type ''long'' could be found (are you missing a using directive or
    an assembly reference?)

    '
  timestamp: 1659977271
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You're given a list of deposit and withdrawal operations\
    \ on a bank account that starts with\n    // zero balance. Your task is to detect\
    \ if at any point the balance of account fallls below zero, and\n    // at that\
    \ point function should return True. Otherwise it should return False.\n    public\
    \ static bool BelowZero(List<long> operations) {\n        // Your code here\n\
    \        long balance = operations.Sum();\n        if (balance < 0) {\n      \
    \      return true;\n        }\n        return false;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(BelowZero((new List<long>())) ==\
    \ (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)-3L, (long)1L, (long)2L, (long)-3L}))) == (false));\n    Debug.Assert(BelowZero((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)-4L, (long)5L, (long)6L})))\
    \ == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L})))\
    \ == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-5L})))\
    \ == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L})))\
    \ == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c7018792dca243c1a9fa923b241dae72>:0 \n"
  stdout: ''
  timestamp: 1659977273
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You're given a list of deposit and withdrawal operations\
    \ on a bank account that starts with\n    // zero balance. Your task is to detect\
    \ if at any point the balance of account fallls below zero, and\n    // at that\
    \ point function should return True. Otherwise it should return False.\n    public\
    \ static bool BelowZero(List<long> operations) {\n        // Your code goes here\n\
    \        long balance = 0;\n        foreach (var operation in operations) {\n\
    \            long amount = operation;\n            if (amount < 0) {\n       \
    \         amount = 0;\n            }\n            balance = balance + amount;\n\
    \        }\n        return balance < 0;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(BelowZero((new List<long>())) == (false));\n    Debug.Assert(BelowZero((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)-3L, (long)1L, (long)2L, (long)-3L})))\
    \ == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)-4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(BelowZero((new\
    \ List<long>(new long[]{(long)1L, (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L,\
    \ (long)4L, (long)-4L}))) == (false));\n    Debug.Assert(BelowZero((new List<long>(new\
    \ long[]{(long)1L, (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L,\
    \ (long)-5L}))) == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L})))\
    \ == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <b02134e8e560418eaf6944c7e285bc67>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <b02134e8e560418eaf6944c7e285bc67>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659977273
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You're given a list of deposit and withdrawal operations\
    \ on a bank account that starts with\n    // zero balance. Your task is to detect\
    \ if at any point the balance of account fallls below zero, and\n    // at that\
    \ point function should return True. Otherwise it should return False.\n    public\
    \ static bool BelowZero(List<long> operations) {\n        // Your code here\n\
    \        long balance = operations.Sum();\n        if (balance < 0) {\n      \
    \      return true;\n        }\n        return false;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(BelowZero((new List<long>())) ==\
    \ (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)-3L, (long)1L, (long)2L, (long)-3L}))) == (false));\n    Debug.Assert(BelowZero((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)-4L, (long)5L, (long)6L})))\
    \ == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L})))\
    \ == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-5L})))\
    \ == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L})))\
    \ == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c7018792dca243c1a9fa923b241dae72>:0 \n"
  stdout: ''
  timestamp: 1659977273
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You're given a list of deposit and withdrawal operations\
    \ on a bank account that starts with\n    // zero balance. Your task is to detect\
    \ if at any point the balance of account fallls below zero, and\n    // at that\
    \ point function should return True. Otherwise it should return False.\n    public\
    \ static bool BelowZero(List<long> operations) {\n        // Your code here\n\
    \        long balance = 0;\n        foreach (var operation in operations) {\n\
    \            long deposit = operation[0];\n            long withdrawal = operation[1];\n\
    \            balance = balance + deposit - withdrawal;\n        }\n        if\
    \ (balance < 0) {\n            return true;\n        }\n        return false;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(BelowZero((new\
    \ List<long>())) == (false));\n    Debug.Assert(BelowZero((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)-3L, (long)1L, (long)2L, (long)-3L}))) == (false));\n\
    \    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)2L, (long)-4L,\
    \ (long)5L, (long)6L}))) == (true));\n    Debug.Assert(BelowZero((new List<long>(new\
    \ long[]{(long)1L, (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L,\
    \ (long)-4L}))) == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-5L})))\
    \ == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L})))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp4a43817b.cs(16,28): error CS0021: Cannot apply indexing with [] to an
    expression of type ''long''

    /tmp/tmp4a43817b.cs(17,31): error CS0021: Cannot apply indexing with [] to an
    expression of type ''long''

    '
  timestamp: 1659977273
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You're given a list of deposit and withdrawal operations\
    \ on a bank account that starts with\n    // zero balance. Your task is to detect\
    \ if at any point the balance of account fallls below zero, and\n    // at that\
    \ point function should return True. Otherwise it should return False.\n    public\
    \ static bool BelowZero(List<long> operations) {\n        // Your code here\n\
    \        long balance = operations.Sum();\n        if (balance < 0) {\n      \
    \      return true;\n        }\n        return false;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(BelowZero((new List<long>())) ==\
    \ (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)-3L, (long)1L, (long)2L, (long)-3L}))) == (false));\n    Debug.Assert(BelowZero((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)-4L, (long)5L, (long)6L})))\
    \ == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L})))\
    \ == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-5L})))\
    \ == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L})))\
    \ == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c7018792dca243c1a9fa923b241dae72>:0 \n"
  stdout: ''
  timestamp: 1659977273
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You're given a list of deposit and withdrawal operations\
    \ on a bank account that starts with\n    // zero balance. Your task is to detect\
    \ if at any point the balance of account fallls below zero, and\n    // at that\
    \ point function should return True. Otherwise it should return False.\n    public\
    \ static bool BelowZero(List<long> operations) {\n        long balance = 0;\n\
    \        foreach (var operation in operations) {\n            switch (operation)\
    \ {\n                case 1:\n                    balance += 1;\n            \
    \        break;\n                case 2:\n                    balance -= 1;\n\
    \                    break;\n                case 3:\n                    balance\
    \ *= 2;\n                    break;\n                case 4:\n               \
    \     balance /= 2;\n                    break;\n            }\n        }\n  \
    \      return balance < 0;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(BelowZero((new List<long>())) == (false));\n    Debug.Assert(BelowZero((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)-3L, (long)1L, (long)2L, (long)-3L})))\
    \ == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)-4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(BelowZero((new\
    \ List<long>(new long[]{(long)1L, (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L,\
    \ (long)4L, (long)-4L}))) == (false));\n    Debug.Assert(BelowZero((new List<long>(new\
    \ long[]{(long)1L, (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L,\
    \ (long)-5L}))) == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L})))\
    \ == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <ffbed6a44a474714b188d2a84984706c>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <ffbed6a44a474714b188d2a84984706c>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659977272
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You're given a list of deposit and withdrawal operations\
    \ on a bank account that starts with\n    // zero balance. Your task is to detect\
    \ if at any point the balance of account fallls below zero, and\n    // at that\
    \ point function should return True. Otherwise it should return False.\n    public\
    \ static bool BelowZero(List<long> operations) {\n        // Your code here\n\
    \        long balance = 0;\n        foreach (var operation in operations) {\n\
    \            if (operation == 1) {\n                balance += operation;\n  \
    \          }\n            else if (operation == -1) {\n                balance\
    \ -= operation;\n            }\n        }\n        return balance < 0;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(BelowZero((new\
    \ List<long>())) == (false));\n    Debug.Assert(BelowZero((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)-3L, (long)1L, (long)2L, (long)-3L}))) == (false));\n\
    \    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)2L, (long)-4L,\
    \ (long)5L, (long)6L}))) == (true));\n    Debug.Assert(BelowZero((new List<long>(new\
    \ long[]{(long)1L, (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L,\
    \ (long)-4L}))) == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-5L})))\
    \ == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L})))\
    \ == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <f961c6e274424284a632eff28163e3d8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <f961c6e274424284a632eff28163e3d8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659977272
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You're given a list of deposit and withdrawal operations\
    \ on a bank account that starts with\n    // zero balance. Your task is to detect\
    \ if at any point the balance of account fallls below zero, and\n    // at that\
    \ point function should return True. Otherwise it should return False.\n    public\
    \ static bool BelowZero(List<long> operations) {\n        long balance = 0;\n\
    \        foreach (var operation in operations) {\n            if (operation ==\
    \ Deposit) {\n                balance += operations[operations.IndexOf(operation)];\n\
    \            } else if (operation == Withdraw) {\n                balance -= operations[operations.IndexOf(operation)];\n\
    \            }\n        }\n        return balance < 0;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(BelowZero((new List<long>())) ==\
    \ (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)-3L, (long)1L, (long)2L, (long)-3L}))) == (false));\n    Debug.Assert(BelowZero((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)-4L, (long)5L, (long)6L})))\
    \ == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L})))\
    \ == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-5L})))\
    \ == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L})))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp_chqrnm5.cs(15,30): error CS0103: The name ''Deposit'' does not exist
    in the current context

    /tmp/tmp_chqrnm5.cs(17,37): error CS0103: The name ''Withdraw'' does not exist
    in the current context

    '
  timestamp: 1659977272
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You're given a list of deposit and withdrawal operations\
    \ on a bank account that starts with\n    // zero balance. Your task is to detect\
    \ if at any point the balance of account fallls below zero, and\n    // at that\
    \ point function should return True. Otherwise it should return False.\n    public\
    \ static bool BelowZero(List<long> operations) {\n        // Your code here\n\
    \        long balance = operations.Sum();\n        if (balance < 0)\n        \
    \    return true;\n        else\n            return false;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(BelowZero((new List<long>()))\
    \ == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)-3L, (long)1L, (long)2L, (long)-3L}))) == (false));\n    Debug.Assert(BelowZero((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)-4L, (long)5L, (long)6L})))\
    \ == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L})))\
    \ == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-5L})))\
    \ == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L})))\
    \ == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <73fa3c75b2e0498aa5058cef24114e8c>:0 \n"
  stdout: ''
  timestamp: 1659977272
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You're given a list of deposit and withdrawal operations\
    \ on a bank account that starts with\n    // zero balance. Your task is to detect\
    \ if at any point the balance of account fallls below zero, and\n    // at that\
    \ point function should return True. Otherwise it should return False.\n    public\
    \ static bool BelowZero(List<long> operations) {\n        long balance = 0;\n\
    \        foreach (var operation in operations) {\n            if (operation ==\
    \ Deposit) {\n                balance += 1;\n            } else if (operation\
    \ == Withdraw) {\n                balance -= 1;\n            }\n        }\n  \
    \      return balance < 0;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(BelowZero((new List<long>())) == (false));\n    Debug.Assert(BelowZero((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)-3L, (long)1L, (long)2L, (long)-3L})))\
    \ == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)-4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(BelowZero((new\
    \ List<long>(new long[]{(long)1L, (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L,\
    \ (long)4L, (long)-4L}))) == (false));\n    Debug.Assert(BelowZero((new List<long>(new\
    \ long[]{(long)1L, (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L,\
    \ (long)-5L}))) == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L})))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmphnna2qxr.cs(15,30): error CS0103: The name ''Deposit'' does not exist
    in the current context

    /tmp/tmphnna2qxr.cs(17,37): error CS0103: The name ''Withdraw'' does not exist
    in the current context

    '
  timestamp: 1659977271
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You're given a list of deposit and withdrawal operations\
    \ on a bank account that starts with\n    // zero balance. Your task is to detect\
    \ if at any point the balance of account fallls below zero, and\n    // at that\
    \ point function should return True. Otherwise it should return False.\n    public\
    \ static bool BelowZero(List<long> operations) {\n        // Your code here\n\
    \        long balance = 0;\n        foreach (var operation in operations) {\n\
    \            if (operation.Operator == Operation.Deposit) {\n                balance\
    \ += operation.Amount;\n            } else if (operation.Operator == Operation.Withdraw)\
    \ {\n                balance -= operation.Amount;\n            }\n        }\n\
    \        return balance < 0;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(BelowZero((new List<long>())) == (false));\n    Debug.Assert(BelowZero((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)-3L, (long)1L, (long)2L, (long)-3L})))\
    \ == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)-4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(BelowZero((new\
    \ List<long>(new long[]{(long)1L, (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L,\
    \ (long)4L, (long)-4L}))) == (false));\n    Debug.Assert(BelowZero((new List<long>(new\
    \ long[]{(long)1L, (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L,\
    \ (long)-5L}))) == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L})))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpi_xd0j6c.cs(16,27): error CS1061: ''long'' does not contain a definition
    for ''Operator'' and no accessible extension method ''Operator'' accepting a first
    argument of type ''long'' could be found (are you missing a using directive or
    an assembly reference?)

    /tmp/tmpi_xd0j6c.cs(16,39): error CS0103: The name ''Operation'' does not exist
    in the current context

    /tmp/tmpi_xd0j6c.cs(17,38): error CS1061: ''long'' does not contain a definition
    for ''Amount'' and no accessible extension method ''Amount'' accepting a first
    argument of type ''long'' could be found (are you missing a using directive or
    an assembly reference?)

    /tmp/tmpi_xd0j6c.cs(18,34): error CS1061: ''long'' does not contain a definition
    for ''Operator'' and no accessible extension method ''Operator'' accepting a first
    argument of type ''long'' could be found (are you missing a using directive or
    an assembly reference?)

    /tmp/tmpi_xd0j6c.cs(18,46): error CS0103: The name ''Operation'' does not exist
    in the current context

    /tmp/tmpi_xd0j6c.cs(19,38): error CS1061: ''long'' does not contain a definition
    for ''Amount'' and no accessible extension method ''Amount'' accepting a first
    argument of type ''long'' could be found (are you missing a using directive or
    an assembly reference?)

    '
  timestamp: 1659977272
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You're given a list of deposit and withdrawal operations\
    \ on a bank account that starts with\n    // zero balance. Your task is to detect\
    \ if at any point the balance of account fallls below zero, and\n    // at that\
    \ point function should return True. Otherwise it should return False.\n    public\
    \ static bool BelowZero(List<long> operations) {\n        long balance = 0;\n\
    \        foreach (var operation in operations) {\n            switch (operation)\
    \ {\n                case Deposit:\n                    balance += operation.Amount;\n\
    \                    break;\n                case Withdraw:\n                \
    \    balance -= operation.Amount;\n                    break;\n            }\n\
    \        }\n        return balance < 0;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(BelowZero((new List<long>())) == (false));\n    Debug.Assert(BelowZero((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)-3L, (long)1L, (long)2L, (long)-3L})))\
    \ == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)-4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(BelowZero((new\
    \ List<long>(new long[]{(long)1L, (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L,\
    \ (long)4L, (long)-4L}))) == (false));\n    Debug.Assert(BelowZero((new List<long>(new\
    \ long[]{(long)1L, (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L,\
    \ (long)-5L}))) == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L})))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmptw977unr.cs(16,22): error CS0103: The name ''Deposit'' does not exist
    in the current context

    /tmp/tmptw977unr.cs(17,42): error CS1061: ''long'' does not contain a definition
    for ''Amount'' and no accessible extension method ''Amount'' accepting a first
    argument of type ''long'' could be found (are you missing a using directive or
    an assembly reference?)

    /tmp/tmptw977unr.cs(19,22): error CS0103: The name ''Withdraw'' does not exist
    in the current context

    /tmp/tmptw977unr.cs(20,42): error CS1061: ''long'' does not contain a definition
    for ''Amount'' and no accessible extension method ''Amount'' accepting a first
    argument of type ''long'' could be found (are you missing a using directive or
    an assembly reference?)

    '
  timestamp: 1659977271
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You're given a list of deposit and withdrawal operations\
    \ on a bank account that starts with\n    // zero balance. Your task is to detect\
    \ if at any point the balance of account fallls below zero, and\n    // at that\
    \ point function should return True. Otherwise it should return False.\n    public\
    \ static bool BelowZero(List<long> operations) {\n        long balance = 0;\n\
    \        foreach (var operation in operations) {\n            if (operation.Operator\
    \ == Operator.Deposit) {\n                balance += operation.Amount;\n     \
    \       } else if (operation.Operator == Operator.Withdraw) {\n              \
    \  balance -= operation.Amount;\n            }\n        }\n        return balance\
    \ < 0;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(BelowZero((new\
    \ List<long>())) == (false));\n    Debug.Assert(BelowZero((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)-3L, (long)1L, (long)2L, (long)-3L}))) == (false));\n\
    \    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)2L, (long)-4L,\
    \ (long)5L, (long)6L}))) == (true));\n    Debug.Assert(BelowZero((new List<long>(new\
    \ long[]{(long)1L, (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L,\
    \ (long)-4L}))) == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-5L})))\
    \ == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L})))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp5cwc9drn.cs(15,27): error CS1061: ''long'' does not contain a definition
    for ''Operator'' and no accessible extension method ''Operator'' accepting a first
    argument of type ''long'' could be found (are you missing a using directive or
    an assembly reference?)

    /tmp/tmp5cwc9drn.cs(15,39): error CS0103: The name ''Operator'' does not exist
    in the current context

    /tmp/tmp5cwc9drn.cs(16,38): error CS1061: ''long'' does not contain a definition
    for ''Amount'' and no accessible extension method ''Amount'' accepting a first
    argument of type ''long'' could be found (are you missing a using directive or
    an assembly reference?)

    /tmp/tmp5cwc9drn.cs(17,34): error CS1061: ''long'' does not contain a definition
    for ''Operator'' and no accessible extension method ''Operator'' accepting a first
    argument of type ''long'' could be found (are you missing a using directive or
    an assembly reference?)

    /tmp/tmp5cwc9drn.cs(17,46): error CS0103: The name ''Operator'' does not exist
    in the current context

    /tmp/tmp5cwc9drn.cs(18,38): error CS1061: ''long'' does not contain a definition
    for ''Amount'' and no accessible extension method ''Amount'' accepting a first
    argument of type ''long'' could be found (are you missing a using directive or
    an assembly reference?)

    '
  timestamp: 1659977273
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You're given a list of deposit and withdrawal operations\
    \ on a bank account that starts with\n    // zero balance. Your task is to detect\
    \ if at any point the balance of account fallls below zero, and\n    // at that\
    \ point function should return True. Otherwise it should return False.\n    public\
    \ static bool BelowZero(List<long> operations) {\n        long balance = 0;\n\
    \        foreach (var operation in operations) {\n            if (operation ==\
    \ Deposit) {\n                balance += 1;\n            } else if (operation\
    \ == Withdraw) {\n                balance -= 1;\n            }\n        }\n  \
    \      return balance < 0;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(BelowZero((new List<long>())) == (false));\n    Debug.Assert(BelowZero((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)-3L, (long)1L, (long)2L, (long)-3L})))\
    \ == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)-4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(BelowZero((new\
    \ List<long>(new long[]{(long)1L, (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L,\
    \ (long)4L, (long)-4L}))) == (false));\n    Debug.Assert(BelowZero((new List<long>(new\
    \ long[]{(long)1L, (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L,\
    \ (long)-5L}))) == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L})))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmphnna2qxr.cs(15,30): error CS0103: The name ''Deposit'' does not exist
    in the current context

    /tmp/tmphnna2qxr.cs(17,37): error CS0103: The name ''Withdraw'' does not exist
    in the current context

    '
  timestamp: 1659977271
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You're given a list of deposit and withdrawal operations\
    \ on a bank account that starts with\n    // zero balance. Your task is to detect\
    \ if at any point the balance of account fallls below zero, and\n    // at that\
    \ point function should return True. Otherwise it should return False.\n    public\
    \ static bool BelowZero(List<long> operations) {\n        // Your code here\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(BelowZero((new\
    \ List<long>())) == (false));\n    Debug.Assert(BelowZero((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)-3L, (long)1L, (long)2L, (long)-3L}))) == (false));\n\
    \    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)2L, (long)-4L,\
    \ (long)5L, (long)6L}))) == (true));\n    Debug.Assert(BelowZero((new List<long>(new\
    \ long[]{(long)1L, (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L,\
    \ (long)-4L}))) == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-5L})))\
    \ == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L})))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpv88q_5wl.cs(12,24): error CS0161: ''Problem.BelowZero(List<long>)'': not
    all code paths return a value

    '
  timestamp: 1659977270
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You're given a list of deposit and withdrawal operations\
    \ on a bank account that starts with\n    // zero balance. Your task is to detect\
    \ if at any point the balance of account fallls below zero, and\n    // at that\
    \ point function should return True. Otherwise it should return False.\n    public\
    \ static bool BelowZero(List<long> operations) {\n        long balance = 0;\n\
    \        foreach (var operation in operations) {\n            if (operation ==\
    \ Deposit) {\n                balance += 1;\n            } else if (operation\
    \ == Withdraw) {\n                balance -= 1;\n            }\n        }\n  \
    \      return balance < 0;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(BelowZero((new List<long>())) == (false));\n    Debug.Assert(BelowZero((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)-3L, (long)1L, (long)2L, (long)-3L})))\
    \ == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)-4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(BelowZero((new\
    \ List<long>(new long[]{(long)1L, (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L,\
    \ (long)4L, (long)-4L}))) == (false));\n    Debug.Assert(BelowZero((new List<long>(new\
    \ long[]{(long)1L, (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L,\
    \ (long)-5L}))) == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L})))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmphnna2qxr.cs(15,30): error CS0103: The name ''Deposit'' does not exist
    in the current context

    /tmp/tmphnna2qxr.cs(17,37): error CS0103: The name ''Withdraw'' does not exist
    in the current context

    '
  timestamp: 1659977271
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You're given a list of deposit and withdrawal operations\
    \ on a bank account that starts with\n    // zero balance. Your task is to detect\
    \ if at any point the balance of account fallls below zero, and\n    // at that\
    \ point function should return True. Otherwise it should return False.\n    public\
    \ static bool BelowZero(List<long> operations) {\n        // Your code goes here\n\
    \        long sum = 0;\n        foreach (var item in operations) {\n         \
    \   sum += item;\n        }\n        if (sum < 0)\n            return true;\n\
    \        else\n            return false;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(BelowZero((new List<long>())) == (false));\n    Debug.Assert(BelowZero((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)-3L, (long)1L, (long)2L, (long)-3L})))\
    \ == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)-4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(BelowZero((new\
    \ List<long>(new long[]{(long)1L, (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L,\
    \ (long)4L, (long)-4L}))) == (false));\n    Debug.Assert(BelowZero((new List<long>(new\
    \ long[]{(long)1L, (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L,\
    \ (long)-5L}))) == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L})))\
    \ == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <88d26d8942244f608e7c2b9530fea4f0>:0 \n"
  stdout: ''
  timestamp: 1659977271
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You're given a list of deposit and withdrawal operations\
    \ on a bank account that starts with\n    // zero balance. Your task is to detect\
    \ if at any point the balance of account fallls below zero, and\n    // at that\
    \ point function should return True. Otherwise it should return False.\n    public\
    \ static bool BelowZero(List<long> operations) {\n        // Your code here\n\
    \        long balance = 0;\n        foreach (var operation in operations) {\n\
    \            long amount = operation;\n            if (amount < 0) {\n       \
    \         balance = balance - amount;\n            }\n            else {\n   \
    \             balance = balance + amount;\n            }\n        }\n        return\
    \ balance < 0;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(BelowZero((new\
    \ List<long>())) == (false));\n    Debug.Assert(BelowZero((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)-3L, (long)1L, (long)2L, (long)-3L}))) == (false));\n\
    \    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)2L, (long)-4L,\
    \ (long)5L, (long)6L}))) == (true));\n    Debug.Assert(BelowZero((new List<long>(new\
    \ long[]{(long)1L, (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L,\
    \ (long)-4L}))) == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-5L})))\
    \ == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L})))\
    \ == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <ad7acf569def43c28f04b2b068a3e471>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <ad7acf569def43c28f04b2b068a3e471>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659977274
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You're given a list of deposit and withdrawal operations\
    \ on a bank account that starts with\n    // zero balance. Your task is to detect\
    \ if at any point the balance of account fallls below zero, and\n    // at that\
    \ point function should return True. Otherwise it should return False.\n    public\
    \ static bool BelowZero(List<long> operations) {\n        // Your code here\n\
    \        long balance = 0;\n        foreach (var operation in operations) {\n\
    \            long amount = operation;\n            if (amount < 0) {\n       \
    \         balance -= amount;\n            } else {\n                balance +=\
    \ amount;\n            }\n        }\n        return balance < 0;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(BelowZero((new List<long>()))\
    \ == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)-3L, (long)1L, (long)2L, (long)-3L}))) == (false));\n    Debug.Assert(BelowZero((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)-4L, (long)5L, (long)6L})))\
    \ == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L})))\
    \ == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-5L})))\
    \ == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L})))\
    \ == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <672556ee19ae4dd8b47588446d0742cd>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <672556ee19ae4dd8b47588446d0742cd>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659977273
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You're given a list of deposit and withdrawal operations\
    \ on a bank account that starts with\n    // zero balance. Your task is to detect\
    \ if at any point the balance of account fallls below zero, and\n    // at that\
    \ point function should return True. Otherwise it should return False.\n    public\
    \ static bool BelowZero(List<long> operations) {\n        long balance = 0;\n\
    \        foreach (var operation in operations) {\n            long amount = operation;\n\
    \            if (amount < 0) {\n                amount = -amount;\n          \
    \  }\n            balance = balance + amount;\n        }\n        return balance\
    \ < 0;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(BelowZero((new\
    \ List<long>())) == (false));\n    Debug.Assert(BelowZero((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)-3L, (long)1L, (long)2L, (long)-3L}))) == (false));\n\
    \    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)2L, (long)-4L,\
    \ (long)5L, (long)6L}))) == (true));\n    Debug.Assert(BelowZero((new List<long>(new\
    \ long[]{(long)1L, (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L,\
    \ (long)-4L}))) == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-5L})))\
    \ == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L})))\
    \ == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a5436202cb3542c88c2cd625ed09f7d9>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a5436202cb3542c88c2cd625ed09f7d9>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659977274
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You're given a list of deposit and withdrawal operations\
    \ on a bank account that starts with\n    // zero balance. Your task is to detect\
    \ if at any point the balance of account fallls below zero, and\n    // at that\
    \ point function should return True. Otherwise it should return False.\n    public\
    \ static bool BelowZero(List<long> operations) {\n        // Your code here\n\
    \        long balance = operations.Sum();\n        if (balance < 0) {\n      \
    \      return true;\n        }\n        return false;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(BelowZero((new List<long>())) ==\
    \ (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)-3L, (long)1L, (long)2L, (long)-3L}))) == (false));\n    Debug.Assert(BelowZero((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)-4L, (long)5L, (long)6L})))\
    \ == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L})))\
    \ == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-5L})))\
    \ == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L})))\
    \ == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c7018792dca243c1a9fa923b241dae72>:0 \n"
  stdout: ''
  timestamp: 1659977273
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You're given a list of deposit and withdrawal operations\
    \ on a bank account that starts with\n    // zero balance. Your task is to detect\
    \ if at any point the balance of account fallls below zero, and\n    // at that\
    \ point function should return True. Otherwise it should return False.\n    public\
    \ static bool BelowZero(List<long> operations) {\n        long balance = 0;\n\
    \        foreach (var operation in operations) {\n            long amount = operation;\n\
    \            if (amount < 0) {\n                balance -= amount;\n         \
    \   } else {\n                balance += amount;\n            }\n        }\n \
    \       return balance < 0;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(BelowZero((new List<long>())) == (false));\n    Debug.Assert(BelowZero((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)-3L, (long)1L, (long)2L, (long)-3L})))\
    \ == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)-4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(BelowZero((new\
    \ List<long>(new long[]{(long)1L, (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L,\
    \ (long)4L, (long)-4L}))) == (false));\n    Debug.Assert(BelowZero((new List<long>(new\
    \ long[]{(long)1L, (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L,\
    \ (long)-5L}))) == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L})))\
    \ == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <b1e8b835fb6a40aa8966a2ddb55c10e7>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <b1e8b835fb6a40aa8966a2ddb55c10e7>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659977272
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You're given a list of deposit and withdrawal operations\
    \ on a bank account that starts with\n    // zero balance. Your task is to detect\
    \ if at any point the balance of account fallls below zero, and\n    // at that\
    \ point function should return True. Otherwise it should return False.\n    public\
    \ static bool BelowZero(List<long> operations) {\n        // Your code here\n\
    \        long sum = 0;\n        foreach (var item in operations) {\n         \
    \   sum += item;\n        }\n        if (sum < 0)\n            return true;\n\
    \        else\n            return false;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(BelowZero((new List<long>())) == (false));\n    Debug.Assert(BelowZero((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)-3L, (long)1L, (long)2L, (long)-3L})))\
    \ == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)-4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(BelowZero((new\
    \ List<long>(new long[]{(long)1L, (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L,\
    \ (long)4L, (long)-4L}))) == (false));\n    Debug.Assert(BelowZero((new List<long>(new\
    \ long[]{(long)1L, (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L,\
    \ (long)-5L}))) == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L})))\
    \ == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <f6975a1b397243018b3797167ae4991f>:0 \n"
  stdout: ''
  timestamp: 1659977272
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You're given a list of deposit and withdrawal operations\
    \ on a bank account that starts with\n    // zero balance. Your task is to detect\
    \ if at any point the balance of account fallls below zero, and\n    // at that\
    \ point function should return True. Otherwise it should return False.\n    public\
    \ static bool BelowZero(List<long> operations) {\n        long balance = 0;\n\
    \        foreach (var operation in operations) {\n            long amount = operation;\n\
    \            if (amount < 0) {\n                balance -= amount;\n         \
    \   } else {\n                balance += amount;\n            }\n        }\n \
    \       return balance < 0;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(BelowZero((new List<long>())) == (false));\n    Debug.Assert(BelowZero((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)-3L, (long)1L, (long)2L, (long)-3L})))\
    \ == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)-4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(BelowZero((new\
    \ List<long>(new long[]{(long)1L, (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L,\
    \ (long)4L, (long)-4L}))) == (false));\n    Debug.Assert(BelowZero((new List<long>(new\
    \ long[]{(long)1L, (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L,\
    \ (long)-5L}))) == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L})))\
    \ == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <b1e8b835fb6a40aa8966a2ddb55c10e7>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <b1e8b835fb6a40aa8966a2ddb55c10e7>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659977272
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You're given a list of deposit and withdrawal operations\
    \ on a bank account that starts with\n    // zero balance. Your task is to detect\
    \ if at any point the balance of account fallls below zero, and\n    // at that\
    \ point function should return True. Otherwise it should return False.\n    public\
    \ static bool BelowZero(List<long> operations) {\n        // Your code here\n\
    \        long balance = operations.Sum();\n        if (balance < 0)\n        \
    \    return true;\n        else\n            return false;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(BelowZero((new List<long>()))\
    \ == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)-3L, (long)1L, (long)2L, (long)-3L}))) == (false));\n    Debug.Assert(BelowZero((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)-4L, (long)5L, (long)6L})))\
    \ == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L})))\
    \ == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-5L})))\
    \ == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L})))\
    \ == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <73fa3c75b2e0498aa5058cef24114e8c>:0 \n"
  stdout: ''
  timestamp: 1659977272
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You're given a list of deposit and withdrawal operations\
    \ on a bank account that starts with\n    // zero balance. Your task is to detect\
    \ if at any point the balance of account fallls below zero, and\n    // at that\
    \ point function should return True. Otherwise it should return False.\n    public\
    \ static bool BelowZero(List<long> operations) {\n        // Your code here\n\
    \        long balance = 0;\n        foreach (var operation in operations) {\n\
    \            long amount = operation;\n            balance = balance + amount;\n\
    \        }\n        if (balance < 0) {\n            return true;\n        }\n\
    \        return false;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(BelowZero((new List<long>())) == (false));\n    Debug.Assert(BelowZero((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)-3L, (long)1L, (long)2L, (long)-3L})))\
    \ == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)-4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(BelowZero((new\
    \ List<long>(new long[]{(long)1L, (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L,\
    \ (long)4L, (long)-4L}))) == (false));\n    Debug.Assert(BelowZero((new List<long>(new\
    \ long[]{(long)1L, (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L,\
    \ (long)-5L}))) == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L})))\
    \ == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <b1a62560dc7142c1aac597f648d7033d>:0 \n"
  stdout: ''
  timestamp: 1659977273
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You're given a list of deposit and withdrawal operations\
    \ on a bank account that starts with\n    // zero balance. Your task is to detect\
    \ if at any point the balance of account fallls below zero, and\n    // at that\
    \ point function should return True. Otherwise it should return False.\n    public\
    \ static bool BelowZero(List<long> operations) {\n        long balance = 0;\n\
    \        foreach (var operation in operations) {\n            long amount = operation;\n\
    \            balance = balance + amount;\n        }\n        if (balance < 0)\
    \ {\n            return true;\n        }\n        return false;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(BelowZero((new List<long>()))\
    \ == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)-3L, (long)1L, (long)2L, (long)-3L}))) == (false));\n    Debug.Assert(BelowZero((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)-4L, (long)5L, (long)6L})))\
    \ == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L})))\
    \ == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-5L})))\
    \ == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L})))\
    \ == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9843afdd44fe47f2bcbc62a5d9cdc789>:0 \n"
  stdout: ''
  timestamp: 1659977274
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You're given a list of deposit and withdrawal operations\
    \ on a bank account that starts with\n    // zero balance. Your task is to detect\
    \ if at any point the balance of account fallls below zero, and\n    // at that\
    \ point function should return True. Otherwise it should return False.\n    public\
    \ static bool BelowZero(List<long> operations) {\n        long balance = 0;\n\
    \        foreach (var operation in operations) {\n            long deposit = operation[0];\n\
    \            long withdrawal = operation[1];\n            balance = balance +\
    \ deposit - withdrawal;\n        }\n        return balance < 0;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(BelowZero((new List<long>()))\
    \ == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)-3L, (long)1L, (long)2L, (long)-3L}))) == (false));\n    Debug.Assert(BelowZero((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)-4L, (long)5L, (long)6L})))\
    \ == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L})))\
    \ == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-5L})))\
    \ == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L})))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpg9mcc_z6.cs(15,28): error CS0021: Cannot apply indexing with [] to an
    expression of type ''long''

    /tmp/tmpg9mcc_z6.cs(16,31): error CS0021: Cannot apply indexing with [] to an
    expression of type ''long''

    '
  timestamp: 1659977273
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You're given a list of deposit and withdrawal operations\
    \ on a bank account that starts with\n    // zero balance. Your task is to detect\
    \ if at any point the balance of account fallls below zero, and\n    // at that\
    \ point function should return True. Otherwise it should return False.\n    public\
    \ static bool BelowZero(List<long> operations) {\n        // Your code here\n\
    \        long balance = operations.Sum();\n        if (balance < 0) {\n      \
    \      return true;\n        }\n        return false;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(BelowZero((new List<long>())) ==\
    \ (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)-3L, (long)1L, (long)2L, (long)-3L}))) == (false));\n    Debug.Assert(BelowZero((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)-4L, (long)5L, (long)6L})))\
    \ == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L})))\
    \ == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-5L})))\
    \ == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L})))\
    \ == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c7018792dca243c1a9fa923b241dae72>:0 \n"
  stdout: ''
  timestamp: 1659977273
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You're given a list of deposit and withdrawal operations\
    \ on a bank account that starts with\n    // zero balance. Your task is to detect\
    \ if at any point the balance of account fallls below zero, and\n    // at that\
    \ point function should return True. Otherwise it should return False.\n    public\
    \ static bool BelowZero(List<long> operations) {\n        // Your code here\n\
    \        long sum = 0;\n        foreach (var item in operations) {\n         \
    \   sum += item;\n        }\n        if (sum < 0)\n            return true;\n\
    \        else\n            return false;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(BelowZero((new List<long>())) == (false));\n    Debug.Assert(BelowZero((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)-3L, (long)1L, (long)2L, (long)-3L})))\
    \ == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)-4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(BelowZero((new\
    \ List<long>(new long[]{(long)1L, (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L,\
    \ (long)4L, (long)-4L}))) == (false));\n    Debug.Assert(BelowZero((new List<long>(new\
    \ long[]{(long)1L, (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L,\
    \ (long)-5L}))) == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L})))\
    \ == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <f6975a1b397243018b3797167ae4991f>:0 \n"
  stdout: ''
  timestamp: 1659977272
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You're given a list of deposit and withdrawal operations\
    \ on a bank account that starts with\n    // zero balance. Your task is to detect\
    \ if at any point the balance of account fallls below zero, and\n    // at that\
    \ point function should return True. Otherwise it should return False.\n    public\
    \ static bool BelowZero(List<long> operations) {\n        // Your code goes here\n\
    \        long balance = 0;\n        foreach (var operation in operations) {\n\
    \            if (operation == Deposit) {\n                balance += operation.Amount;\n\
    \            } else if (operation == Withdraw) {\n                balance -= operation.Amount;\n\
    \            }\n        }\n        return balance < 0;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(BelowZero((new List<long>())) ==\
    \ (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)-3L, (long)1L, (long)2L, (long)-3L}))) == (false));\n    Debug.Assert(BelowZero((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)-4L, (long)5L, (long)6L})))\
    \ == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L})))\
    \ == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-5L})))\
    \ == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L})))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp4v_v_6_2.cs(16,30): error CS0103: The name ''Deposit'' does not exist
    in the current context

    /tmp/tmp4v_v_6_2.cs(17,38): error CS1061: ''long'' does not contain a definition
    for ''Amount'' and no accessible extension method ''Amount'' accepting a first
    argument of type ''long'' could be found (are you missing a using directive or
    an assembly reference?)

    /tmp/tmp4v_v_6_2.cs(18,37): error CS0103: The name ''Withdraw'' does not exist
    in the current context

    /tmp/tmp4v_v_6_2.cs(19,38): error CS1061: ''long'' does not contain a definition
    for ''Amount'' and no accessible extension method ''Amount'' accepting a first
    argument of type ''long'' could be found (are you missing a using directive or
    an assembly reference?)

    '
  timestamp: 1659977270
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You're given a list of deposit and withdrawal operations\
    \ on a bank account that starts with\n    // zero balance. Your task is to detect\
    \ if at any point the balance of account fallls below zero, and\n    // at that\
    \ point function should return True. Otherwise it should return False.\n    public\
    \ static bool BelowZero(List<long> operations) {\n        // Your code here\n\
    \        long sum = 0;\n        foreach (var item in operations) {\n         \
    \   sum += item;\n        }\n        if (sum < 0)\n            return true;\n\
    \        return false;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(BelowZero((new List<long>())) == (false));\n    Debug.Assert(BelowZero((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)-3L, (long)1L, (long)2L, (long)-3L})))\
    \ == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)-4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(BelowZero((new\
    \ List<long>(new long[]{(long)1L, (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L,\
    \ (long)4L, (long)-4L}))) == (false));\n    Debug.Assert(BelowZero((new List<long>(new\
    \ long[]{(long)1L, (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L,\
    \ (long)-5L}))) == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L})))\
    \ == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <b01dcc92da8147018a8913c93a61a810>:0 \n"
  stdout: ''
  timestamp: 1659977274
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You're given a list of deposit and withdrawal operations\
    \ on a bank account that starts with\n    // zero balance. Your task is to detect\
    \ if at any point the balance of account fallls below zero, and\n    // at that\
    \ point function should return True. Otherwise it should return False.\n    public\
    \ static bool BelowZero(List<long> operations) {\n        long balance = 0;\n\
    \        foreach (var operation in operations) {\n            if (operation ==\
    \ Deposit) {\n                balance += operation.Amount;\n            } else\
    \ if (operation == Withdraw) {\n                balance -= operation.Amount;\n\
    \            }\n        }\n        return balance < 0;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(BelowZero((new List<long>())) ==\
    \ (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)-3L, (long)1L, (long)2L, (long)-3L}))) == (false));\n    Debug.Assert(BelowZero((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)-4L, (long)5L, (long)6L})))\
    \ == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L})))\
    \ == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-5L})))\
    \ == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L})))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpw4sbewol.cs(15,30): error CS0103: The name ''Deposit'' does not exist
    in the current context

    /tmp/tmpw4sbewol.cs(16,38): error CS1061: ''long'' does not contain a definition
    for ''Amount'' and no accessible extension method ''Amount'' accepting a first
    argument of type ''long'' could be found (are you missing a using directive or
    an assembly reference?)

    /tmp/tmpw4sbewol.cs(17,37): error CS0103: The name ''Withdraw'' does not exist
    in the current context

    /tmp/tmpw4sbewol.cs(18,38): error CS1061: ''long'' does not contain a definition
    for ''Amount'' and no accessible extension method ''Amount'' accepting a first
    argument of type ''long'' could be found (are you missing a using directive or
    an assembly reference?)

    '
  timestamp: 1659977271
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You're given a list of deposit and withdrawal operations\
    \ on a bank account that starts with\n    // zero balance. Your task is to detect\
    \ if at any point the balance of account fallls below zero, and\n    // at that\
    \ point function should return True. Otherwise it should return False.\n    public\
    \ static bool BelowZero(List<long> operations) {\n        long balance = 0;\n\
    \        foreach (var operation in operations) {\n            if (operation ==\
    \ Deposit) {\n                balance += 1;\n            } else if (operation\
    \ == Withdraw) {\n                balance -= 1;\n            }\n        }\n  \
    \      return balance < 0;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(BelowZero((new List<long>())) == (false));\n    Debug.Assert(BelowZero((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)-3L, (long)1L, (long)2L, (long)-3L})))\
    \ == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)-4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(BelowZero((new\
    \ List<long>(new long[]{(long)1L, (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L,\
    \ (long)4L, (long)-4L}))) == (false));\n    Debug.Assert(BelowZero((new List<long>(new\
    \ long[]{(long)1L, (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L,\
    \ (long)-5L}))) == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L})))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmphnna2qxr.cs(15,30): error CS0103: The name ''Deposit'' does not exist
    in the current context

    /tmp/tmphnna2qxr.cs(17,37): error CS0103: The name ''Withdraw'' does not exist
    in the current context

    '
  timestamp: 1659977271
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You're given a list of deposit and withdrawal operations\
    \ on a bank account that starts with\n    // zero balance. Your task is to detect\
    \ if at any point the balance of account fallls below zero, and\n    // at that\
    \ point function should return True. Otherwise it should return False.\n    public\
    \ static bool BelowZero(List<long> operations) {\n        long balance = 0;\n\
    \        foreach (var operation in operations) {\n            switch(operation)\
    \ {\n                case Deposit:\n                    balance += operation.Amount;\n\
    \                    break;\n                case Withdraw:\n                \
    \    balance -= operation.Amount;\n                    break;\n            }\n\
    \        }\n        return balance < 0;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(BelowZero((new List<long>())) == (false));\n    Debug.Assert(BelowZero((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)-3L, (long)1L, (long)2L, (long)-3L})))\
    \ == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)-4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(BelowZero((new\
    \ List<long>(new long[]{(long)1L, (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L,\
    \ (long)4L, (long)-4L}))) == (false));\n    Debug.Assert(BelowZero((new List<long>(new\
    \ long[]{(long)1L, (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L,\
    \ (long)-5L}))) == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L})))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpuusn6z41.cs(16,22): error CS0103: The name ''Deposit'' does not exist
    in the current context

    /tmp/tmpuusn6z41.cs(17,42): error CS1061: ''long'' does not contain a definition
    for ''Amount'' and no accessible extension method ''Amount'' accepting a first
    argument of type ''long'' could be found (are you missing a using directive or
    an assembly reference?)

    /tmp/tmpuusn6z41.cs(19,22): error CS0103: The name ''Withdraw'' does not exist
    in the current context

    /tmp/tmpuusn6z41.cs(20,42): error CS1061: ''long'' does not contain a definition
    for ''Amount'' and no accessible extension method ''Amount'' accepting a first
    argument of type ''long'' could be found (are you missing a using directive or
    an assembly reference?)

    '
  timestamp: 1659977273
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You're given a list of deposit and withdrawal operations\
    \ on a bank account that starts with\n    // zero balance. Your task is to detect\
    \ if at any point the balance of account fallls below zero, and\n    // at that\
    \ point function should return True. Otherwise it should return False.\n    public\
    \ static bool BelowZero(List<long> operations) {\n        long balance = 0;\n\
    \        foreach (var operation in operations) {\n            if (operation ==\
    \ Deposit) {\n                balance += operations[operations.IndexOf(operation)];\n\
    \            } else if (operation == Withdraw) {\n                balance -= operations[operations.IndexOf(operation)];\n\
    \            }\n        }\n        return balance < 0;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(BelowZero((new List<long>())) ==\
    \ (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)-3L, (long)1L, (long)2L, (long)-3L}))) == (false));\n    Debug.Assert(BelowZero((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)-4L, (long)5L, (long)6L})))\
    \ == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L})))\
    \ == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-5L})))\
    \ == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L})))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp_chqrnm5.cs(15,30): error CS0103: The name ''Deposit'' does not exist
    in the current context

    /tmp/tmp_chqrnm5.cs(17,37): error CS0103: The name ''Withdraw'' does not exist
    in the current context

    '
  timestamp: 1659977272
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You're given a list of deposit and withdrawal operations\
    \ on a bank account that starts with\n    // zero balance. Your task is to detect\
    \ if at any point the balance of account fallls below zero, and\n    // at that\
    \ point function should return True. Otherwise it should return False.\n    public\
    \ static bool BelowZero(List<long> operations) {\n        long balance = 0;\n\
    \        foreach (long operation in operations) {\n            if (operation ==\
    \ Deposit) {\n                balance += operations[operations.Count - 1];\n \
    \           } else if (operation == Withdraw) {\n                balance -= operations[operations.Count\
    \ - 1];\n            }\n        }\n        return balance < 0;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(BelowZero((new List<long>()))\
    \ == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)-3L, (long)1L, (long)2L, (long)-3L}))) == (false));\n    Debug.Assert(BelowZero((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)-4L, (long)5L, (long)6L})))\
    \ == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L})))\
    \ == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-5L})))\
    \ == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L})))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp2hw67ied.cs(15,30): error CS0103: The name ''Deposit'' does not exist
    in the current context

    /tmp/tmp2hw67ied.cs(17,37): error CS0103: The name ''Withdraw'' does not exist
    in the current context

    '
  timestamp: 1659977273
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You're given a list of deposit and withdrawal operations\
    \ on a bank account that starts with\n    // zero balance. Your task is to detect\
    \ if at any point the balance of account fallls below zero, and\n    // at that\
    \ point function should return True. Otherwise it should return False.\n    public\
    \ static bool BelowZero(List<long> operations) {\n        // Your code goes here\n\
    \        long sum = 0;\n        foreach (var item in operations) {\n         \
    \   sum += item;\n        }\n        if (sum < 0)\n            return true;\n\
    \        else\n            return false;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(BelowZero((new List<long>())) == (false));\n    Debug.Assert(BelowZero((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)-3L, (long)1L, (long)2L, (long)-3L})))\
    \ == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)-4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(BelowZero((new\
    \ List<long>(new long[]{(long)1L, (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L,\
    \ (long)4L, (long)-4L}))) == (false));\n    Debug.Assert(BelowZero((new List<long>(new\
    \ long[]{(long)1L, (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L,\
    \ (long)-5L}))) == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L})))\
    \ == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <88d26d8942244f608e7c2b9530fea4f0>:0 \n"
  stdout: ''
  timestamp: 1659977271
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You're given a list of deposit and withdrawal operations\
    \ on a bank account that starts with\n    // zero balance. Your task is to detect\
    \ if at any point the balance of account fallls below zero, and\n    // at that\
    \ point function should return True. Otherwise it should return False.\n    public\
    \ static bool BelowZero(List<long> operations) {\n        // Your code here\n\
    \        long balance = operations.Sum();\n        return balance < 0;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(BelowZero((new\
    \ List<long>())) == (false));\n    Debug.Assert(BelowZero((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)-3L, (long)1L, (long)2L, (long)-3L}))) == (false));\n\
    \    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)2L, (long)-4L,\
    \ (long)5L, (long)6L}))) == (true));\n    Debug.Assert(BelowZero((new List<long>(new\
    \ long[]{(long)1L, (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L,\
    \ (long)-4L}))) == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-5L})))\
    \ == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L})))\
    \ == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <fc2b0f2343b0493895c87b1714074ad8>:0 \n"
  stdout: ''
  timestamp: 1659977273
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You're given a list of deposit and withdrawal operations\
    \ on a bank account that starts with\n    // zero balance. Your task is to detect\
    \ if at any point the balance of account fallls below zero, and\n    // at that\
    \ point function should return True. Otherwise it should return False.\n    public\
    \ static bool BelowZero(List<long> operations) {\n        long balance = operations.Sum();\n\
    \        if (balance < 0) {\n            return true;\n        }\n        return\
    \ false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(BelowZero((new\
    \ List<long>())) == (false));\n    Debug.Assert(BelowZero((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)-3L, (long)1L, (long)2L, (long)-3L}))) == (false));\n\
    \    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)2L, (long)-4L,\
    \ (long)5L, (long)6L}))) == (true));\n    Debug.Assert(BelowZero((new List<long>(new\
    \ long[]{(long)1L, (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L,\
    \ (long)-4L}))) == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-5L})))\
    \ == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L})))\
    \ == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <270d355c99ae46c8a6f2c1e388b408ea>:0 \n"
  stdout: ''
  timestamp: 1659977271
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You're given a list of deposit and withdrawal operations\
    \ on a bank account that starts with\n    // zero balance. Your task is to detect\
    \ if at any point the balance of account fallls below zero, and\n    // at that\
    \ point function should return True. Otherwise it should return False.\n    public\
    \ static bool BelowZero(List<long> operations) {\n        long balance = operations.First();\n\
    \        foreach (long op in operations.Skip(1)) {\n            if (op > balance)\
    \ {\n                return true;\n            }\n            balance -= op;\n\
    \        }\n        return false;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(BelowZero((new List<long>())) == (false));\n    Debug.Assert(BelowZero((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)-3L, (long)1L, (long)2L, (long)-3L})))\
    \ == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)-4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(BelowZero((new\
    \ List<long>(new long[]{(long)1L, (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L,\
    \ (long)4L, (long)-4L}))) == (false));\n    Debug.Assert(BelowZero((new List<long>(new\
    \ long[]{(long)1L, (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L,\
    \ (long)-5L}))) == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L})))\
    \ == (true));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.InvalidOperationException: Sequence contains\
    \ no elements\n  at System.Linq.Enumerable.First[TSource] (System.Collections.Generic.IEnumerable`1[T]\
    \ source) [0x00010] in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem.BelowZero\
    \ (System.Collections.Generic.List`1[T] operations) [0x00001] in <34db62fb770d4ef8925b30df4570fe48>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <34db62fb770d4ef8925b30df4570fe48>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.InvalidOperationException: Sequence\
    \ contains no elements\n  at System.Linq.Enumerable.First[TSource] (System.Collections.Generic.IEnumerable`1[T]\
    \ source) [0x00010] in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem.BelowZero\
    \ (System.Collections.Generic.List`1[T] operations) [0x00001] in <34db62fb770d4ef8925b30df4570fe48>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <34db62fb770d4ef8925b30df4570fe48>:0\
    \ \n"
  stdout: ''
  timestamp: 1659977274
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You're given a list of deposit and withdrawal operations\
    \ on a bank account that starts with\n    // zero balance. Your task is to detect\
    \ if at any point the balance of account fallls below zero, and\n    // at that\
    \ point function should return True. Otherwise it should return False.\n    public\
    \ static bool BelowZero(List<long> operations) {\n        long balance = 0;\n\
    \        foreach (var operation in operations) {\n            switch (operation)\
    \ {\n                case Deposit:\n                    balance += 1;\n      \
    \              break;\n                case Withdraw:\n                    balance\
    \ -= 1;\n                    break;\n            }\n        }\n        return\
    \ balance < 0;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(BelowZero((new\
    \ List<long>())) == (false));\n    Debug.Assert(BelowZero((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)-3L, (long)1L, (long)2L, (long)-3L}))) == (false));\n\
    \    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)2L, (long)-4L,\
    \ (long)5L, (long)6L}))) == (true));\n    Debug.Assert(BelowZero((new List<long>(new\
    \ long[]{(long)1L, (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L,\
    \ (long)-4L}))) == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-5L})))\
    \ == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L})))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpk77zp5he.cs(16,22): error CS0103: The name ''Deposit'' does not exist
    in the current context

    /tmp/tmpk77zp5he.cs(19,22): error CS0103: The name ''Withdraw'' does not exist
    in the current context

    '
  timestamp: 1659977271
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You're given a list of deposit and withdrawal operations\
    \ on a bank account that starts with\n    // zero balance. Your task is to detect\
    \ if at any point the balance of account fallls below zero, and\n    // at that\
    \ point function should return True. Otherwise it should return False.\n    public\
    \ static bool BelowZero(List<long> operations) {\n        // Your code goes here\n\
    \        long balance = 0;\n        foreach (var operation in operations) {\n\
    \            if (operation == Deposit) {\n                balance += operation.Amount;\n\
    \            } else if (operation == Withdraw) {\n                balance -= operation.Amount;\n\
    \            }\n        }\n        return balance < 0;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(BelowZero((new List<long>())) ==\
    \ (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)-3L, (long)1L, (long)2L, (long)-3L}))) == (false));\n    Debug.Assert(BelowZero((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)-4L, (long)5L, (long)6L})))\
    \ == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L})))\
    \ == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-5L})))\
    \ == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L})))\
    \ == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp4v_v_6_2.cs(16,30): error CS0103: The name ''Deposit'' does not exist
    in the current context

    /tmp/tmp4v_v_6_2.cs(17,38): error CS1061: ''long'' does not contain a definition
    for ''Amount'' and no accessible extension method ''Amount'' accepting a first
    argument of type ''long'' could be found (are you missing a using directive or
    an assembly reference?)

    /tmp/tmp4v_v_6_2.cs(18,37): error CS0103: The name ''Withdraw'' does not exist
    in the current context

    /tmp/tmp4v_v_6_2.cs(19,38): error CS1061: ''long'' does not contain a definition
    for ''Amount'' and no accessible extension method ''Amount'' accepting a first
    argument of type ''long'' could be found (are you missing a using directive or
    an assembly reference?)

    '
  timestamp: 1659977270
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You're given a list of deposit and withdrawal operations\
    \ on a bank account that starts with\n    // zero balance. Your task is to detect\
    \ if at any point the balance of account fallls below zero, and\n    // at that\
    \ point function should return True. Otherwise it should return False.\n    public\
    \ static bool BelowZero(List<long> operations) {\n        // Your code goes here\n\
    \        long sum = 0;\n        foreach (var item in operations) {\n         \
    \   sum += item;\n        }\n        if (sum < 0)\n            return true;\n\
    \        return false;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(BelowZero((new List<long>())) == (false));\n    Debug.Assert(BelowZero((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)-3L, (long)1L, (long)2L, (long)-3L})))\
    \ == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)-4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(BelowZero((new\
    \ List<long>(new long[]{(long)1L, (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L,\
    \ (long)4L, (long)-4L}))) == (false));\n    Debug.Assert(BelowZero((new List<long>(new\
    \ long[]{(long)1L, (long)-1L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L,\
    \ (long)-5L}))) == (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
    \ (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L})))\
    \ == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c2e0b349288e42a6b9434a09d45d7998>:0 \n"
  stdout: ''
  timestamp: 1659977274
