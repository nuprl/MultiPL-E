name: HumanEval_153_Strongest_Extension
language: cs
prompt: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\n\
  using System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass\
  \ Problem {\n    // You will be given the name of a class (a string) and a list\
  \ of extensions.\n    // The extensions are to be used to load additional classes\
  \ to the class. The\n    // strength of the extension is as follows: Let CAP be\
  \ the number of the uppercase\n    // letters in the extension's name, and let SM\
  \ be the number of lowercase letters \n    // in the extension's name, the strength\
  \ is given by the fraction CAP - SM. \n    // You should find the strongest extension\
  \ and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
  \    // If there are two or more extensions with the same strength, you should\n\
  \    // choose the one that comes first in the list.\n    // For example, if you\
  \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
  \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
  \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n  \
  \  // Example:\n    public static string StrongestExtension(string class_name, List<string>\
  \ extensions) {\n"
tests: "    }\n    public static void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"\
  Watashi\"), (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\", (string)\"\
  eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n    Debug.Assert(StrongestExtension((\"\
  Boku123\"), (new List<string>(new string[]{(string)\"nani\", (string)\"NazeDa\"\
  , (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\"\
  )));\n    Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new\
  \ string[]{(string)\"t\", (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\"\
  , (string)\"NuLl__\", (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\"\
  )));\n    Debug.Assert(StrongestExtension((\"K\"), (new List<string>(new string[]{(string)\"\
  Ta\", (string)\"TAR\", (string)\"t234An\", (string)\"cosSo\"}))).Equals((\"K.TAR\"\
  )));\n    Debug.Assert(StrongestExtension((\"__HAHA\"), (new List<string>(new string[]{(string)\"\
  Tab\", (string)\"123\", (string)\"781345\", (string)\"-_-\"}))).Equals((\"__HAHA.123\"\
  )));\n    Debug.Assert(StrongestExtension((\"YameRore\"), (new List<string>(new\
  \ string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"WorkOut\", (string)\"\
  Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\")));\n    Debug.Assert(StrongestExtension((\"\
  finNNalLLly\"), (new List<string>(new string[]{(string)\"Die\", (string)\"NowW\"\
  , (string)\"Wow\", (string)\"WoW\"}))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"\
  _\"), (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"\
  _.Bb\")));\n    Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new\
  \ string[]{(string)\"671235\", (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n  \
  \  }\n\n}\n"
completions: ["        // Your code here\n        string strongest_extension = class_name;\n\
    \        foreach (string extension in extensions) {\n            int cap = extension.Count(c\
    \ => char.IsUpper(c));\n            int sm = extension.Count(c => char.IsLower(c));\n\
    \            int strength = cap - sm;\n            if (strength > 0) {\n     \
    \           strongest_extension += \".\" + extension;\n            }\n       \
    \ }\n        return strongest_extension;", "        // Your code here\n      \
    \  string strongest_extension = class_name;\n        foreach (string extension\
    \ in extensions) {\n            int cap = extension.Count(c => char.IsUpper(c));\n\
    \            int sm = extension.Count(c => char.IsLower(c));\n            int\
    \ strength = cap - sm;\n            if (strength > 0) {\n                strongest_extension\
    \ = class_name + \".\" + extension;\n                break;\n            }\n \
    \       }\n        return strongest_extension;", "        // Your code here\n\
    \        string strongest = string.Empty;\n        foreach (string extension in\
    \ extensions)\n        {\n            int cap = extension.Count(x => char.IsUpper(x));\n\
    \            int sm = extension.Count(x => char.IsLower(x));\n            int\
    \ strength = cap - sm;\n            if (strength > 0)\n            {\n       \
    \         strongest = class_name + extension;\n                break;\n      \
    \      }\n        }\n        return strongest;", "        string extension_strength\
    \ = extensions[0].ToUpper().Count() - extensions[0].ToLower().Count();\n     \
    \   foreach (string extension in extensions) {\n            extension_strength\
    \ += extension.ToUpper().Count() - extension.ToLower().Count();\n        }\n \
    \       if (extension_strength > 0) {\n            return class_name + extensions[0];\n\
    \        }\n        return class_name;", "        // Your code here\n        string\
    \ strongest_extension = class_name;\n        int sm = 0;\n        int cap = 0;\n\
    \        foreach (string extension in extensions) {\n            cap = extension.Count(x\
    \ => char.IsUpper(x));\n            sm = extension.Count(x => char.IsLower(x));\n\
    \            int strength = cap - sm;\n            if (strength > 0) {\n     \
    \           strongest_extension = class_name + extension;\n                break;\n\
    \            }\n        }\n        return strongest_extension;", "        // Your\
    \ code here\n        string strongest_extension = \"\";\n        foreach (string\
    \ extension in extensions) {\n            int cap = extension.ToUpper().Count();\n\
    \            int sm = extension.ToLower().Count();\n            int strength =\
    \ cap - sm;\n            if (strength > 0) {\n                strongest_extension\
    \ = class_name + extension;\n                break;\n            }\n        }\n\
    \        return strongest_extension;", "        string extension_strength = extensions[0].ToUpper().Count()\
    \ - extensions[0].ToLower().Count();\n        foreach (string extension in extensions)\
    \ {\n            extension_strength += extension.ToUpper().Count() - extension.ToLower().Count();\n\
    \        }\n        extension_strength = extension_strength / extensions.Count();\n\
    \        extension_strength = extension_strength.ToString();\n        string strongest_extension\
    \ = class_name + extension_strength;\n        return strongest_extension;", " \
    \       string strongest_extension = extensions[0];\n        foreach (string extension\
    \ in extensions) {\n            int extension_strength = GetExtensionStrength(extension);\n\
    \            if (extension_strength > strongest_extension.Length) {\n        \
    \        strongest_extension = extension;\n            }\n        }\n        return\
    \ class_name + \".\" + strongest_extension;", "        // Your code here\n   \
    \     string strongest = null;\n        double strength = 0;\n        foreach\
    \ (string extension in extensions) {\n            int cap = extension.Length;\n\
    \            int sm = class_name.Length;\n            double frac = cap - sm;\n\
    \            strength += frac;\n        }\n        if (strength > 0) {\n     \
    \       strongest = class_name + extensions[0];\n        }\n        return strongest;",
  "        // Your code here\n        string strongest = string.Empty;\n        foreach\
    \ (string extension in extensions)\n        {\n            int cap = extension.Count(x\
    \ => char.IsUpper(x));\n            int sm = extension.Count(x => char.IsLower(x));\n\
    \            int strength = cap - sm;\n            if (strength > 0)\n       \
    \     {\n                strongest = class_name + extension;\n               \
    \ break;\n            }\n        }\n        return strongest;", "        // Your\
    \ code here\n        string strongest_extension = \"\";\n        foreach (string\
    \ extension in extensions) {\n            int cap = extension.ToUpper().Count();\n\
    \            int sm = extension.ToLower().Count();\n            int strength =\
    \ cap - sm;\n            if (strength > 0) {\n                strongest_extension\
    \ = class_name + extension;\n                break;\n            }\n        }\n\
    \        return strongest_extension;", "        // Your code here\n        string\
    \ strongest = string.Empty;\n        foreach (string extension in extensions)\
    \ {\n            int cap = extension.Count(x => x == char.ToUpper(x));\n     \
    \       int sm = extension.Count(x => x == char.ToLower(x));\n            int\
    \ strength = cap - sm;\n            if (strength > 0) {\n                strongest\
    \ = class_name + \".\" + extension;\n                break;\n            }\n \
    \       }\n        return strongest;", "        // Your code here\n        string\
    \ strongest_extension = \"\";\n        foreach (string extension in extensions)\
    \ {\n            int cap = extension.Count(x => char.IsUpper(x));\n          \
    \  int sm = extension.Count(x => char.IsLower(x));\n            int strength =\
    \ cap - sm;\n            if (strength > 0) {\n                strongest_extension\
    \ = class_name + \".\" + extension;\n                break;\n            }\n \
    \       }\n        return strongest_extension;", "        string extension = extensions[0];\n\
    \        int cap = class_name.Length;\n        int sm = extension.Length;\n  \
    \      int strength = cap - sm;\n        foreach (string s in extensions) {\n\
    \            int cap2 = s.Length;\n            int sm2 = extension.Length;\n \
    \           int strength2 = cap2 - sm2;\n            if (strength2 > strength)\
    \ {\n                extension = s;\n                cap = cap2;\n           \
    \     sm = sm2;\n                strength = strength2;\n            }\n      \
    \  }\n        return class_name + \".\" + extension;", "        // Your code here\n\
    \        string strongest = class_name;\n        foreach (string extension in\
    \ extensions) {\n            int cap = extension.Count(c => char.IsUpper(c));\n\
    \            int sm = extension.Count(c => char.IsLower(c));\n            int\
    \ strength = cap - sm;\n            if (strength > 0) {\n                strongest\
    \ = class_name + \".\" + extension;\n                break;\n            }\n \
    \       }\n        return strongest;", "        // Your code here\n        string\
    \ strongest = extensions[0];\n        foreach (string extension in extensions)\
    \ {\n            int cap = extension.Count(x => char.IsUpper(x));\n          \
    \  int sm = extension.Count(x => char.IsLower(x));\n            int strength =\
    \ cap - sm;\n            if (strength > 0) {\n                strongest = extension;\n\
    \            }\n        }\n        return class_name + \".\" + strongest;", " \
    \       // Your code here\n        string strongest = string.Empty;\n        foreach\
    \ (string extension in extensions) {\n            int cap = extension.Count(x\
    \ => char.IsUpper(x));\n            int sm = extension.Count(x => char.IsLower(x));\n\
    \            int strength = cap - sm;\n            if (strength > 0) {\n     \
    \           strongest = class_name + \".\" + extension;\n                break;\n\
    \            }\n        }\n        return strongest;", "        // Your code here\n\
    \        string strongest_extension = \"\";\n        double strongest_strength\
    \ = 0;\n        foreach (string extension in extensions) {\n            int cap\
    \ = extension.Count(x => x == char.ToUpper(x));\n            int sm = extension.Count(x\
    \ => x == char.ToLower());\n            double strength = cap - sm;\n        \
    \    if (strength > strongest_strength) {\n                strongest_strength\
    \ = strength;\n                strongest_extension = extension;\n            }\n\
    \        }\n        return class_name + \".\" + strongest_extension;", "     \
    \   // Your code goes here\n        string strongest = string.Empty;\n       \
    \ foreach (string extension in extensions)\n        {\n            int cap = extension.Count(c\
    \ => char.IsUpper(c));\n            int sm = extension.Count(c => char.IsLower(c));\n\
    \            int strength = cap - sm;\n            if (strength > 0)\n       \
    \     {\n                strongest = class_name + extension;\n               \
    \ break;\n            }\n        }\n        return strongest;", "        string\
    \ strongest_extension = extensions[0];\n        foreach (string extension in extensions)\
    \ {\n            int cap = extension.ToUpper().Count();\n            int sm =\
    \ extension.ToLower().Count();\n            int strength = cap - sm;\n       \
    \     if (strength > strongest_extension.ToUpper().Count() - strongest_extension.ToLower().Count())\
    \ {\n                strongest_extension = extension;\n            }\n       \
    \ }\n        return class_name + \".\" + strongest_extension;", "        // Your\
    \ code here\n        string strongest = extensions[0];\n        int cap = class_name.ToUpper().Count();\n\
    \        int sm = class_name.ToLower().Count();\n        double strength = cap\
    \ - sm;\n        double max = extensions.Max(x => x.ToUpper().Count() - x.ToLower().Count());\n\
    \        double min = extensions.Min(x => x.ToUpper().Count() - x.ToLower().Count());\n\
    \        double average = extensions.Average(x => x.ToUpper().Count() - x.ToLower().Count());\n\
    \        double median = extensions.Median(x => x.ToUpper().Count() - x.ToLower().Count());\n\
    \        double mode = extensions.Mode(x => x.ToUpper().Count() - x.ToLower().Count());\n\
    \        double variance = extensions.Variance(x => x.ToUpper().Count() - x.ToLower().Count());\n\
    \        double standardDeviation = extensions.StandardDeviation(x => x.ToUpper().Count()\
    \ - x.ToLower().Count());\n        double sum = extensions.Sum(x => x.ToUpper().Count()\
    \ - x.ToLower().Count());\n        double max = extensions.Max(x => x.ToUpper().Count()\
    \ - x.ToLower().Count());\n        double min = extensions.Min(x => x.ToUpper().Count()\
    \ - x.ToLower().Count());\n        double average = extensions.Average(x => x.ToUpper().Count()\
    \ - x.ToLower().Count());\n        double median = extensions.Median(x => x.ToUpper().Count()\
    \ - x.ToLower().Count());\n        double mode = extensions.Mode(x => x.ToUpper().Count()\
    \ - x.ToLower().Count());\n        double variance = extensions.Variance(x =>\
    \ x.ToUpper().Count() - x.ToLower().Count());\n        double standardDeviation\
    \ = extensions.StandardDeviation(x => x.ToUpper().Count() - x.ToLower().Count());\n\
    \        double sum = extensions.Sum(x => x.ToUpper().Count() - x.ToLower().Count());\n\
    \        double max = extensions.Max(x => x.ToUpper().Count() - x.ToLower().Count());\n\
    \        double min = extensions.Min(x => x.ToUpper().Count() - x.ToLower().Count());\n\
    \        double average = extensions.Average(x => x.ToUpper().Count() - x.ToLower().Count());\n\
    \        double median = extensions.Median(x => x.ToUpper().Count() - x.ToLower().Count());\n\
    \        double mode = extensions.Mode(x => x.ToUpper().Count() - x.ToLower().Count());\n\
    \        double variance = extensions.Vari", "        // Your code here\n    \
    \    string strongest_extension = class_name;\n        foreach (string extension\
    \ in extensions) {\n            int cap = extension.Count(c => c == 'A');\n  \
    \          int sm = extension.Count(c => c == 'a');\n            int strength\
    \ = cap - sm;\n            if (strength > 0) {\n                strongest_extension\
    \ = class_name + extension;\n                break;\n            }\n        }\n\
    \        return strongest_extension;", "        // Your code here\n        string\
    \ strongest = string.Empty;\n        foreach (string extension in extensions)\
    \ {\n            int cap = extension.Count(c => char.IsUpper(c));\n          \
    \  int sm = extension.Count(c => char.IsLower(c));\n            int strength =\
    \ cap - sm;\n            if (strength > 0) {\n                strongest = class_name\
    \ + \".\" + extension;\n                break;\n            }\n        }\n   \
    \     return strongest;", "        // Your code here\n        string strongest_extension\
    \ = string.Empty;\n        foreach (string extension in extensions) {\n      \
    \      int cap = extension.Count(c => char.IsUpper(c));\n            int sm =\
    \ extension.Count(c => char.IsLower(c));\n            int strength = cap - sm;\n\
    \            if (strength > 0) {\n                strongest_extension = class_name\
    \ + \".\" + extension;\n                break;\n            }\n        }\n   \
    \     return strongest_extension;", "        string strongest_extension = class_name;\n\
    \        int strongest_extension_strength = -1;\n        foreach (string extension\
    \ in extensions) {\n            int extension_strength = extension.Count(x =>\
    \ char.IsUpper(x)) -\n                extension.Count(x => char.IsLower(x));\n\
    \            if (extension_strength > strongest_extension_strength) {\n      \
    \          strongest_extension_strength = extension_strength;\n              \
    \  strongest_extension = extension;\n            }\n        }\n        return\
    \ strongest_extension;", "        string strongest_extension = null;\n       \
    \ string extension_strength = null;\n        foreach (string extension in extensions)\
    \ {\n            int extension_strength_numerator = extension.Count(c => char.IsUpper(c));\n\
    \            int extension_strength_denominator = extension.Count(c => char.IsLower(c));\n\
    \            int extension_strength = extension_strength_numerator - extension_strength_denominator;\n\
    \            if (extension_strength > 0) {\n                if (extension_strength_numerator\
    \ == extension_strength_denominator) {\n                    extension_strength\
    \ = -1;\n                }\n                else {\n                    extension_strength\
    \ = extension_strength / extension_strength_numerator;\n                }\n  \
    \          }\n            if (extension_strength > 0) {\n                if (strongest_extension\
    \ == null) {\n                    strongest_extension = extension;\n         \
    \           extension_strength = extension_strength;\n                }\n    \
    \            else if (extension_strength > extension_strength_numerator) {\n \
    \                   strongest_extension = extension;\n                    extension_strength\
    \ = extension_strength;\n                }\n            }\n        }\n       \
    \ if (strongest_extension != null) {\n            return class_name + \".\" +\
    \ strongest_extension;\n        }\n        else {\n            return class_name;\n\
    \        }", "        string extension = extensions[0];\n        foreach (string\
    \ extension2 in extensions) {\n            int SM = extension2.Length;\n     \
    \       int CAP = extension.Length;\n            int strength = CAP - SM;\n  \
    \          if (strength > 0) {\n                extension = extension2;\n    \
    \        }\n        }\n        return class_name + \".\" + extension;", "    \
    \    string strongest_extension = extensions[0];\n        int strongest_extension_strength\
    \ = -1;\n        foreach (string extension in extensions) {\n            int extension_strength\
    \ = extension.Count(c => char.IsUpper(c));\n            if (extension_strength\
    \ > strongest_extension_strength) {\n                strongest_extension = extension;\n\
    \                strongest_extension_strength = extension_strength;\n        \
    \    }\n        }\n        return class_name + \".\" + strongest_extension;",
  "        // Your code here\n        string strongest = \"\";\n        foreach (string\
    \ extension in extensions) {\n            int cap = extension.ToUpper().Count();\n\
    \            int sm = extension.ToLower().Count();\n            int strength =\
    \ cap - sm;\n            if (strength > 0) {\n                strongest = class_name\
    \ + \".\" + extension;\n                break;\n            }\n        }\n   \
    \     return strongest;", "        // Your code here\n        var extensions_count\
    \ = extensions.Count();\n        var extensions_count_upper = extensions.Count(x\
    \ => x.ToUpper().Count() == x.ToUpper().Count());\n        var extensions_count_lower\
    \ = extensions.Count(x => x.ToLower().Count() == x.ToLower().Count());\n     \
    \   var extensions_count_diff = extensions_count_upper - extensions_count_lower;\n\
    \        var extensions_count_diff_frac = extensions_count_diff / extensions_count;\n\
    \        var extensions_count_diff_frac_max = Math.Max(extensions_count_diff_frac,\
    \ 1);\n        var extensions_count_diff_frac_min = Math.Min(extensions_count_diff_frac,\
    \ 1);\n        var extensions_count_diff_frac_sum = extensions_count_diff_frac_max\
    \ * extensions_count_diff_frac_min;\n        var extensions_count_diff_frac_sum_squared\
    \ = extensions_count_diff_frac_sum * extensions_count_diff_frac_sum;\n       \
    \ var extensions_count_diff_frac_sum_cubed = extensions_count_diff_frac_sum_squared\
    \ * extensions_count_diff_frac_sum;\n        var extensions_count_diff_frac_sum_cubed\
    \ = extensions_count_diff_frac_sum_cubed * extensions_count_diff_frac_sum;\n \
    \       var extensions_count_diff_frac_sum_cubed2 = extensions_count_diff_frac_sum_cubed\
    \ * extensions_count_diff_frac_sum;\n        var extensions_count_diff_frac_sum_cubed3\
    \ = extensions_count_diff_frac_sum_cubed2 * extensions_count_diff_frac_sum;\n\
    \        var extensions_count_diff_frac_sum_cubed4 = extensions_count_diff_frac_sum_cubed3\
    \ * extensions_count_diff_frac_sum;\n        var extensions_count_diff_frac_sum_cubed5\
    \ = extensions_count_diff_frac_sum_cubed4 * extensions_count_diff_frac_sum;\n\
    \        var extensions_count_diff_frac_sum_cubed6 = extensions_count_diff_frac_sum_cubed5\
    \ * extensions_count_diff_frac_sum;\n        var extensions_count_diff_frac_sum_cubed7\
    \ = extensions_count_diff_frac_sum_cubed6 * extensions_count_diff_frac_sum;\n\
    \        var extensions_count_diff_frac_sum_cubed8 = extensions_count_diff_frac_sum_cubed7\
    \ * extensions_count_diff_frac_sum;\n        var extensions_count_diff_frac_sum_cubed9\
    \ = extensions_count_diff_frac_sum_cubed8 * extensions_count_diff_frac_sum;\n\
    \        var extensions_count_diff_frac_sum_cubed10 = extensions_count_diff_frac_sum_cubed9\
    \ * extensions_count_diff_frac_sum;\n        var extension", "        // Your\
    \ code here\n        string strongest_extension = class_name;\n        foreach\
    \ (string extension in extensions) {\n            int cap = extension.Length;\n\
    \            int sm = class_name.Length;\n            int strength = cap - sm;\n\
    \            if (strength > 0) {\n                strongest_extension = class_name\
    \ + extension;\n                break;\n            }\n        }\n        return\
    \ strongest_extension;", "        // Your code here\n        string strongest_extension\
    \ = class_name;\n        foreach (string extension in extensions) {\n        \
    \    int cap = extension.Count(c => char.IsUpper(c));\n            int sm = extension.Count(c\
    \ => char.IsLower(c));\n            int strength = cap - sm;\n            if (strength\
    \ > 0) {\n                strongest_extension = class_name + extension;\n    \
    \            break;\n            }\n        }\n        return strongest_extension;",
  "        // Your code here\n        string strongest = string.Empty;\n        foreach\
    \ (string extension in extensions) {\n            int cap = extension.Count(x\
    \ => char.IsUpper(x));\n            int sm = extension.Count(x => char.IsLower(x));\n\
    \            int strength = cap - sm;\n            if (strength > 0) {\n     \
    \           strongest = class_name + \".\" + extension;\n                break;\n\
    \            }\n        }\n        return strongest;", "        string extension\
    \ = extensions[0];\n        string extension_strength = extension.Substring(extension.Length\
    \ - 1, 1);\n        string extension_strength_str = extension_strength.ToString();\n\
    \        string extension_strength_str_upper = extension_strength_str.ToUpper();\n\
    \        int extension_strength_int = int.Parse(extension_strength_str_upper);\n\
    \        int extension_strength_int_upper = extension_strength_int % 2; // 0 %\
    \ 2 = 0, 1 % 2 = 1\n        int extension_strength_int_lower = extension_strength_int\
    \ / 2; // 0 / 2 = 0, 1 / 2 = 1\n        string extension_strength_str_lower =\
    \ extension_strength_str.ToLower();\n        int extension_strength_int_lower\
    \ = int.Parse(extension_strength_str_lower);\n        int extension_strength_int_lower_upper\
    \ = extension_strength_int_lower % 2; // 0 % 2 = 0, 1 % 2 = 1\n        int extension_strength_int_lower_lower\
    \ = extension_strength_int_lower / 2; // 0 / 2 = 0, 1 / 2 = 1\n        string\
    \ extension_strength_str_lower_upper = extension_strength_str_lower.ToUpper();\n\
    \        int extension_strength_int_lower_upper = int.Parse(extension_strength_str_lower_upper);\n\
    \        int extension_strength_int_lower_lower_upper = extension_strength_int_lower_upper\
    \ % 2; // 0 % 2 = 0, 1 % 2 = 1\n        int extension_strength_int_lower_lower_lower\
    \ = extension_strength_int_lower_upper / 2; // 0 / 2 = 0, 1 / 2 = 1\n        string\
    \ extension_strength_str_lower_lower_upper = extension_strength_str_lower_upper.ToUpper();\n\
    \        int extension_strength_int_lower_lower_upper = int.Parse(extension_strength_str_lower_lower_upper);\n\
    \        int extension_strength_int_lower_lower_lower_upper = extension_strength_int_lower_lower_upper\
    \ % 2; // 0 % 2 = 0, 1 % 2 = 1\n        int extension_strength_int_lower_lower_lower_lower\
    \ = extension_strength_int_lower_lower_upper / 2; // 0 / 2 = 0, 1 / 2 = 1\n  \
    \      string extension_strength_str_lower_lower_lower_upper = extension_strength_str_lower_lower_upper.ToUpper();\n\
    \        int extension_strength_int_lower_lower_lower_upper = int.Parse(extension_strength_str_lower_lower_lower_upper);\n\
    \        int extension_strength_int_lower_lower_lower_lower_upper = extension_strength_int_lower_lower_lower_upper\
    \ % 2; // 0 % 2 = 0, 1 % 2 = 1\n        int extension_strength_int_lower_lower_lower_lower_lower\
    \ = extension_strength_int_lower_lower_lower_upper / 2; // 0 / 2 = 0, 1 / 2 =\
    \ 1\n        string extension_strength_", "        string strongest = null;\n\
    \        foreach (string extension in extensions) {\n            int cap = extension.Count(c\
    \ => char.IsUpper(c));\n            int sm = extension.Count(c => char.IsLower(c));\n\
    \            int strength = cap - sm;\n            if (strongest == null || strength\
    \ > strongest.Length) {\n                strongest = class_name + extension;\n\
    \            }\n        }\n        return strongest;", '        // Your code here',
  "        // Your code here\n        string strongest_extension = \"\";\n       \
    \ foreach (string extension in extensions) {\n            int cap = extension.Count(c\
    \ => char.IsUpper(c));\n            int sm = extension.Count(c => char.IsLower(c));\n\
    \            int strength = cap - sm;\n            if (strength > 0) {\n     \
    \           strongest_extension = class_name + \".\" + extension;\n          \
    \      break;\n            }\n        }\n        return strongest_extension;",
  "        string strongest_extension = \"\";\n        foreach (string extension in\
    \ extensions) {\n            int cap = extension.Count(c => char.IsUpper(c));\n\
    \            int sm = extension.Count(c => char.IsLower(c));\n            int\
    \ strength = cap - sm;\n            if (strength > 0) {\n                strongest_extension\
    \ = class_name + \".\" + extension;\n                break;\n            }\n \
    \       }\n        return strongest_extension;", "        // Your code here\n\
    \        string strongest_extension = string.Empty;\n        foreach (string extension\
    \ in extensions)\n        {\n            int cap = extension.ToUpper().Count(x\
    \ => x == char.ToUpper(x));\n            int sm = extension.ToLower().Count(x\
    \ => x == char.ToLower(x));\n            int strength = cap - sm;\n          \
    \  if (strength > 0)\n            {\n                strongest_extension = class_name\
    \ + extension;\n                break;\n            }\n        }\n        return\
    \ strongest_extension;", "        // Your code here\n        string strongest_extension\
    \ = \"\";\n        foreach (string extension in extensions) {\n            int\
    \ cap = extension.ToUpper().Count();\n            int sm = extension.ToLower().Count();\n\
    \            int strength = cap - sm;\n            if (strength > 0) {\n     \
    \           strongest_extension = extension;\n                break;\n       \
    \     }\n        }\n        return class_name + \".\" + strongest_extension;",
  "        // Your code here\n        string strongest_extension = class_name;\n \
    \       foreach (string extension in extensions) {\n            int cap = extension.Count(x\
    \ => char.IsUpper(x));\n            int sm = extension.Count(x => char.IsLower(x));\n\
    \            int strength = cap - sm;\n            if (strength > 0) {\n     \
    \           strongest_extension = class_name + extension;\n                break;\n\
    \            }\n        }\n        return strongest_extension;", "        // Your\
    \ code here\n        string strongest_extension = string.Empty;\n        foreach\
    \ (string extension in extensions) {\n            int cap = extension.Count(c\
    \ => char.IsUpper(c));\n            int sm = extension.Count(c => char.IsLower(c));\n\
    \            int strength = cap - sm;\n            if (strength > 0) {\n     \
    \           strongest_extension = class_name + \".\" + extension;\n          \
    \      break;\n            }\n        }\n        return strongest_extension;",
  "        // Your code here\n        string extension = extensions[0];\n        foreach\
    \ (string ext in extensions) {\n            int cap = ext.ToUpper().Count();\n\
    \            int sm = ext.ToLower().Count();\n            double strength = cap\
    \ - sm;\n            if (strength > 0) {\n                extension = ext;\n \
    \               break;\n            }\n        }\n        return class_name +\
    \ \".\" + extension;", "        // Your code here\n        string strongest_extension\
    \ = class_name;\n        foreach (string extension in extensions) {\n        \
    \    int cap = extension.Count(c => char.IsUpper(c));\n            int sm = extension.Count(c\
    \ => char.IsLower(c));\n            int strength = cap - sm;\n            if (strength\
    \ > 0) {\n                strongest_extension += \".\" + extension;\n        \
    \    }\n        }\n        return strongest_extension;", "        // Your code\
    \ here\n        string strongest = string.Empty;\n        foreach (string extension\
    \ in extensions)\n        {\n            int cap = extension.Count(x => char.IsUpper(x));\n\
    \            int sm = extension.Count(x => char.IsLower(x));\n            int\
    \ strength = cap - sm;\n            if (strength > 0)\n            {\n       \
    \         strongest = class_name + extension;\n                break;\n      \
    \      }\n        }\n        return strongest;", "        // Your code here\n\
    \        string strongest = string.Empty;\n        foreach (string extension in\
    \ extensions) {\n            int cap = extension.ToUpper().Count(x => x == char.ToUpper(x));\n\
    \            int sm = extension.ToLower().Count(x => x == char.ToLower(x));\n\
    \            int strength = cap - sm;\n            if (strength > 0) {\n     \
    \           strongest = class_name + \".\" + extension;\n                break;\n\
    \            }\n        }\n        return strongest;", "        string extension_strength\
    \ = extensions[0].ToUpper().Substring(1).ToLower();\n        foreach (string extension\
    \ in extensions) {\n            string extension_strength_new = extension.ToUpper().Substring(1).ToLower();\n\
    \            if (extension_strength_new != extension_strength) {\n           \
    \     extension_strength = extension_strength_new;\n            }\n        }\n\
    \        return class_name + \".\" + extension_strength;", "        string extension_strength\
    \ = extensions[0].ToUpper().Substring(1).ToLower();\n        foreach (string extension\
    \ in extensions) {\n            string extension_strength_new = extension.ToUpper().Substring(1).ToLower();\n\
    \            if (extension_strength_new == extension_strength) {\n           \
    \     extension_strength = extension_strength_new;\n            }\n        }\n\
    \        return class_name + \".\" + extension_strength;", "        string strongest_extension\
    \ = string.Empty;\n        double strength = double.MaxValue;\n        foreach\
    \ (string extension in extensions) {\n            int cap = extension.ToUpper().Count();\n\
    \            int sm = extension.ToLower().Count();\n            double fraction\
    \ = cap - sm;\n            if (fraction > strength) {\n                strongest_extension\
    \ = extension;\n                strength = fraction;\n            }\n        }\n\
    \        return class_name + \".\" + strongest_extension;", "        // Your code\
    \ here\n        string extension = extensions[0];\n        string extension_class\
    \ = class_name + extension;\n        string extension_class_name = extension_class.Substring(0,\
    \ extension_class.Length - extension.Length);\n        string extension_class_name_with_extension\
    \ = extension_class_name + extension;\n        string extension_class_name_with_extension_without_extension\
    \ = extension_class_name_with_extension.Substring(0, extension_class_name_with_extension.Length\
    \ - extension_class_name_with_extension.LastIndexOf('.'));\n        string extension_class_name_without_extension\
    \ = extension_class_name_with_extension_without_extension.Substring(0, extension_class_name_with_extension_without_extension.LastIndexOf('.'));\n\
    \        string extension_class_name_without_extension_without_extension = extension_class_name_without_extension.Substring(0,\
    \ extension_class_name_without_extension.LastIndexOf('.'));\n        string extension_class_name_without_extension_without_extension_without_extension\
    \ = extension_class_name_without_extension_without_extension.Substring(0, extension_class_name_without_extension_without_extension.LastIndexOf('.'));\n\
    \        string extension_class_name_without_extension_without_extension_without_extension_without_extension\
    \ = extension_class_name_without_extension_without_extension_without_extension.Substring(0,\
    \ extension_class_name_without_extension_without_extension_without_extension.LastIndexOf('.'));\n\
    \        string extension_class_name_without_extension_without_extension_without_extension_without_extension_without_extension\
    \ = extension_class_name_without_extension_without_extension_without_extension_without_extension.Substring(0,\
    \ extension_class_name_without_extension_without_extension_without_extension_without_extension.LastIndexOf('.'));\n\
    \        string extension_class_name_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension\
    \ = extension_class_name_without_extension_without_extension_without_extension_without_extension_without_extension.Substring(0,\
    \ extension_class_name_without_extension_without_extension_without_extension_without_extension_without_extension.LastIndexOf('.'));\n\
    \        string extension_class_name_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension\
    \ = extension_class_name_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension.Substring(0,\
    \ extension_class_name_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension.LastIndexOf('.'));\n\
    \        string extension_class_name_without_extension_without_extension_without_extension_without_extension",
  "        // Your code here\n        string strongest_extension = string.Empty;\n\
    \        foreach (string extension in extensions) {\n            int cap = extension.Count(x\
    \ => x == char.ToUpper(x));\n            int sm = extension.Count(x => x == char.ToLower(x));\n\
    \            int strength = cap - sm;\n            if (strength > 0) {\n     \
    \           strongest_extension = class_name + \".\" + extension;\n          \
    \      break;\n            }\n        }\n        return strongest_extension;",
  "        string extension_strength = extensions[0];\n        foreach (string extension\
    \ in extensions) {\n            int extension_capitalized = extension.Count(c\
    \ => Char.IsUpper(c));\n            int extension_smallcased = extension.Count(c\
    \ => Char.IsLower(c));\n            int extension_strength = extension_capitalized\
    \ - extension_smallcased;\n            if (extension_strength > extension_strength)\
    \ {\n                extension_strength = extension_strength;\n            }\n\
    \        }\n        return class_name + extension_strength;", "        // Your\
    \ code here\n        string strongest_extension = class_name;\n        foreach\
    \ (string extension in extensions) {\n            int cap = extension.Length;\n\
    \            int sm = class_name.Length;\n            int strength = cap - sm;\n\
    \            if (strength > 0) {\n                strongest_extension = class_name\
    \ + extension;\n                break;\n            }\n        }\n        return\
    \ strongest_extension;", "        string strongest_extension = extensions[0];\n\
    \        foreach (string extension in extensions) {\n            int extension_strength\
    \ = extension.Count(c => char.IsUpper(c));\n            int class_strength = class_name.Count(c\
    \ => char.IsUpper(c));\n            int strength = extension_strength - class_strength;\n\
    \            if (strength > 0) {\n                strongest_extension = extension;\n\
    \            }\n        }\n        return class_name + \".\" + strongest_extension;",
  "        // Your code here\n        string strongest_extension = string.Empty;\n\
    \        foreach (string extension in extensions) {\n            int cap = extension.Count(c\
    \ => char.IsUpper(c));\n            int sm = extension.Count(c => char.IsLower(c));\n\
    \            int strength = cap - sm;\n            if (strength > 0) {\n     \
    \           strongest_extension = class_name + \".\" + extension;\n          \
    \      break;\n            }\n        }\n        return strongest_extension;",
  '        // Your code here', "        // Your code here\n        string strongest\
    \ = string.Empty;\n        foreach (string extension in extensions) {\n      \
    \      int cap = extension.Count(x => x == char.ToUpper(x));\n            int\
    \ sm = extension.Count(x => x == char.ToLower(x));\n            int strength =\
    \ cap - sm;\n            if (strength > 0) {\n                strongest = class_name\
    \ + extension.Substring(0, extension.IndexOf(char.ToUpper(extension[0])));\n \
    \               break;\n            }\n        }\n        return strongest;",
  "        // Your code here\n        string strongest_extension = class_name;\n \
    \       foreach (string extension in extensions) {\n            int cap = extension.Count(c\
    \ => char.IsUpper(c));\n            int sm = extension.Count(c => char.IsLower(c));\n\
    \            int strength = cap - sm;\n            if (strength > 0) {\n     \
    \           strongest_extension = class_name + extension;\n                break;\n\
    \            }\n        }\n        return strongest_extension;", "        // Your\
    \ code here\n        string strongest_extension = \"\";\n        int cap = 0;\n\
    \        int sm = 0;\n        foreach (string extension in extensions) {\n   \
    \         cap = extension.Count(x => char.IsUpper(x));\n            sm = extension.Count(x\
    \ => char.IsLower(x));\n            int strength = cap - sm;\n            if (strength\
    \ > 0) {\n                strongest_extension = class_name + \".\" + extension;\n\
    \                break;\n            }\n        }\n        return strongest_extension;",
  "        // Your code here\n        string strongest_extension = class_name;\n \
    \       foreach (string extension in extensions) {\n            int cap = extension.Count(c\
    \ => char.IsUpper(c));\n            int sm = extension.Count(c => char.IsLower(c));\n\
    \            int strength = cap - sm;\n            if (strength > 0) {\n     \
    \           strongest_extension = class_name + extension;\n                break;\n\
    \            }\n        }\n        return strongest_extension;", "        // Your\
    \ code here\n        string strongest_extension = \"\";\n        double strongest_strength\
    \ = 0;\n        foreach (string extension in extensions) {\n            int cap\
    \ = extension.Count(x => char.IsUpper(x));\n            int sm = extension.Count(x\
    \ => char.IsLower(x));\n            double strength = cap - sm;\n            if\
    \ (strength > strongest_strength) {\n                strongest_strength = strength;\n\
    \                strongest_extension = extension;\n            }\n        }\n\
    \        return class_name + \".\" + strongest_extension;", "        // Your code\
    \ here\n        string strongest_extension = \"\";\n        foreach (string extension\
    \ in extensions) {\n            int cap = extension.Count(c => c == 'A');\n  \
    \          int sm = extension.Count(c => c == 'a');\n            int strength\
    \ = cap - sm;\n            if (strength > 0) {\n                strongest_extension\
    \ = class_name + extension;\n                break;\n            }\n        }\n\
    \        return strongest_extension;", "        // Your code here\n        string\
    \ strongest_extension = class_name;\n        foreach (string extension in extensions)\
    \ {\n            int cap = extension.Count(c => char.IsUpper(c));\n          \
    \  int sm = extension.Count(c => char.IsLower(c));\n            int strength =\
    \ cap - sm;\n            if (strength > 0) {\n                strongest_extension\
    \ = class_name + extension;\n                break;\n            }\n        }\n\
    \        return strongest_extension;", "        // Your code here\n        string\
    \ strongest_extension = extensions[0];\n        foreach (string extension in extensions)\
    \ {\n            int cap = extension.Count(x => char.IsUpper(x));\n          \
    \  int sm = extension.Count(x => char.IsLower(x));\n            int strength =\
    \ cap - sm;\n            if (strength > 0) {\n                strongest_extension\
    \ = extension;\n            }\n        }\n        return class_name + \".\" +\
    \ strongest_extension;", "        // Your code here\n        string strongest_extension\
    \ = \"\";\n        foreach (string extension in extensions)\n        {\n     \
    \       int cap = extension.Count(x => x == char.ToUpper(x));\n            int\
    \ sm = extension.Count(x => x == char.ToLower(x));\n            int strength =\
    \ cap - sm;\n            if (strength > 0)\n            {\n                strongest_extension\
    \ = class_name + extension;\n                break;\n            }\n        }\n\
    \        return strongest_extension;", "        string strongest = null;\n   \
    \     foreach (string extension in extensions) {\n            int cap = extension.Count(x\
    \ => char.IsUpper(x));\n            int sm = extension.Count(x => char.IsLower(x));\n\
    \            int strength = cap - sm;\n            if (strongest == null || strength\
    \ > strongest.Length) {\n                strongest = class_name + extension;\n\
    \            }\n        }\n        return strongest;", "        // Your code goes\
    \ here\n        string strongest_extension = \"\";\n        string extension_strength\
    \ = \"\";\n        foreach (string extension in extensions)\n        {\n     \
    \       int extension_strength_int = 0;\n            int extension_cap_int = 0;\n\
    \            int extension_sm_int = 0;\n            int extension_length = extension.Length;\n\
    \            int extension_length_int = 0;\n            int extension_length_int2\
    \ = 0;\n            int extension_length_int3 = 0;\n            int extension_length_int4\
    \ = 0;\n            int extension_length_int5 = 0;\n            int extension_length_int6\
    \ = 0;\n            int extension_length_int7 = 0;\n            int extension_length_int8\
    \ = 0;\n            int extension_length_int9 = 0;\n            int extension_length_int10\
    \ = 0;\n            int extension_length_int11 = 0;\n            int extension_length_int12\
    \ = 0;\n            int extension_length_int13 = 0;\n            int extension_length_int14\
    \ = 0;\n            int extension_length_int15 = 0;\n            int extension_length_int16\
    \ = 0;\n            int extension_length_int17 = 0;\n            int extension_length_int18\
    \ = 0;\n            int extension_length_int19 = 0;\n            int extension_length_int20\
    \ = 0;\n            int extension_length_int21 = 0;\n            int extension_length_int22\
    \ = 0;\n            int extension_length_int23 = 0;\n            int extension_length_int24\
    \ = 0;\n            int extension_length_int25 = 0;\n            int extension_length_int26\
    \ = 0;\n            int extension_length_int27 = 0;\n            int extension_length_int28\
    \ = 0;\n            int extension_length_int29 = 0;\n            int extension_length_int30\
    \ = 0;\n            int extension_length_int31 = 0;\n            int extension_length_int32\
    \ = 0;\n            int extension_length_int33 = 0;\n            int extension_length_int34\
    \ = 0;\n            int extension_length_int35 = 0;\n            int extension_length_int36\
    \ = 0;\n            int extension_length_int37 = 0;\n            int extension_length_int38\
    \ = 0;\n            int extension_length_int39 = 0;\n            int extension_length_int40\
    \ = 0;\n            int extension_length_int41 = 0;\n            int extension_length_int42\
    \ = 0;\n            int extension_length_int43 = 0;\n            int extension_length_int44\
    \ = 0;\n            int extension_length_int45 = 0;\n            int extension_length_int46\
    \ = 0;\n            int extension_length_int47 = 0;\n            int extension_length_int48\
    \ = 0;\n            int extension_length_int49 = 0;\n            int extension_length_int50\
    \ = 0;\n            ", "        string extension = extensions[0];\n        string\
    \ strongest = extension;\n        int sm = 0;\n        int cap = 0;\n        for\
    \ (int i = 0; i < extensions.Count; i++) {\n            string ext = extensions[i];\n\
    \            cap = ext.ToUpper().Count();\n            sm = ext.ToLower().Count();\n\
    \            if (cap - sm > strongest.ToUpper().Count() - strongest.ToLower().Count())\
    \ {\n                strongest = ext;\n            }\n        }\n        return\
    \ class_name + \".\" + strongest;", "        // Your code here\n        string\
    \ strongest_extension = \"\";\n        foreach (string extension in extensions)\
    \ {\n            int cap = extension.Count(c => char.IsUpper(c));\n          \
    \  int sm = extension.Count(c => char.IsLower(c));\n            int strength =\
    \ cap - sm;\n            if (strength > 0) {\n                strongest_extension\
    \ = class_name + \".\" + extension;\n                break;\n            }\n \
    \       }\n        return strongest_extension;", "        // Your code goes here\n\
    \        string strongest = string.Empty;\n        foreach (string extension in\
    \ extensions)\n        {\n            int cap = extension.Count(x => char.IsUpper(x));\n\
    \            int sm = extension.Count(x => char.IsLower(x));\n            int\
    \ strength = cap - sm;\n            if (strength > 0)\n            {\n       \
    \         strongest = class_name + \".\" + extension;\n                break;\n\
    \            }\n        }\n        return strongest;", "        // Your code here\n\
    \        string strongest_extension = \"\";\n        foreach (string extension\
    \ in extensions) {\n            int cap = extension.Count(c => c == 'A');\n  \
    \          int sm = extension.Count(c => c == 'a');\n            int strength\
    \ = cap - sm;\n            if (strength > 0) {\n                strongest_extension\
    \ = class_name + \".\" + extension;\n                break;\n            }\n \
    \       }\n        return strongest_extension;", "        string strongest_extension\
    \ = extensions[0];\n        foreach (string extension in extensions) {\n     \
    \       int cap = extension.Count(c => char.IsUpper(c));\n            int sm =\
    \ extension.Count(c => char.IsLower(c));\n            int strength = cap - sm;\n\
    \            if (strength > 0) {\n                strongest_extension = extension;\n\
    \            }\n        }\n        return class_name + \".\" + strongest_extension;",
  "        // Your code here\n        string strongest = extensions[0];\n        foreach\
    \ (string extension in extensions) {\n            int cap = extension.ToUpper().Count();\n\
    \            int sm = extension.ToLower().Count();\n            int strength =\
    \ cap - sm;\n            if (strength > strongest.ToUpper().Count() - strongest.ToLower().Count())\
    \ {\n                strongest = extension;\n            }\n        }\n      \
    \  return class_name + \".\" + strongest;", "        // Your code here\n     \
    \   string strongest_extension = \"\";\n        foreach (string extension in extensions)\
    \ {\n            int cap = extension.Count(c => c == 'A');\n            int sm\
    \ = extension.Count(c => c == 'a');\n            int strength = cap - sm;\n  \
    \          if (strength > 0) {\n                strongest_extension = class_name\
    \ + \".\" + extension;\n                break;\n            }\n        }\n   \
    \     return strongest_extension;", "        string strongest_extension = extensions[0];\n\
    \        foreach (string extension in extensions) {\n            int cap = extension.ToUpper().Count();\n\
    \            int sm = extension.ToLower().Count();\n            int strength =\
    \ cap - sm;\n            if (strength > 0) {\n                strongest_extension\
    \ = extension;\n            }\n        }\n        return class_name + \".\" +\
    \ strongest_extension;", "        // Your code here\n        var extensions_count\
    \ = extensions.Count();\n        var extensions_count_upper = extensions.Count(x\
    \ => x.Count(y => y.ToUpper() == y));\n        var extensions_count_lower = extensions.Count(x\
    \ => x.Count(y => y.ToLower() == y));\n        var extensions_count_diff = extensions_count_upper\
    \ - extensions_count_lower;\n        var extensions_count_diff_frac = extensions_count_diff\
    \ / extensions_count;\n        var extensions_count_diff_frac_max = extensions_count_diff_frac.Max();\n\
    \        var extensions_count_diff_frac_min = extensions_count_diff_frac.Min();\n\
    \        var extensions_count_diff_frac_sum = extensions_count_diff_frac.Sum();\n\
    \        var extensions_count_diff_frac_avg = extensions_count_diff_frac.Average();\n\
    \        var extensions_count_diff_frac_max = extensions_count_diff_frac.Max();\n\
    \        var extensions_count_diff_frac_min = extensions_count_diff_frac.Min();\n\
    \        var extensions_count_diff_frac_sum = extensions_count_diff_frac.Sum();\n\
    \        var extensions_count_diff_frac_avg = extensions_count_diff_frac.Average();\n\
    \        var extensions_count_diff_frac_max = extensions_count_diff_frac.Max();\n\
    \        var extensions_count_diff_frac_min = extensions_count_diff_frac.Min();\n\
    \        var extensions_count_diff_frac_sum = extensions_count_diff_frac.Sum();\n\
    \        var extensions_count_diff_frac_avg = extensions_count_diff_frac.Average();\n\
    \        var extensions_count_diff_frac_max = extensions_count_diff_frac.Max();\n\
    \        var extensions_count_diff_frac_min = extensions_count_diff_frac.Min();\n\
    \        var extensions_count_diff_frac_sum = extensions_count_diff_frac.Sum();\n\
    \        var extensions_count_diff_frac_avg = extensions_count_diff_frac.Average();\n\
    \        var extensions_count_diff_frac_max = extensions_count_diff_frac.Max();\n\
    \        var extensions_count_diff_frac_min = extensions_count_diff_frac.Min();\n\
    \        var extensions_count_diff_frac_sum = extensions_count_diff_frac.Sum();\n\
    \        var extensions_count_diff_frac_avg = extensions_count_diff_frac.Average();\n\
    \        var extensions_count_diff_frac_max = extensions_count_diff_frac.Max();\n\
    \        var extensions_count_diff_frac_min = extensions_count_diff_frac.Min();\n\
    \        var extensions_count_diff_frac_sum = extensions_count_diff_frac.Sum();\n\
    \        var extensions_count_diff_frac_avg = extensions_count_diff_frac.Average();\n\
    \        var extensions_count_diff_frac_max = extensions_", "        // Your code\
    \ here\n        string strongest_extension = class_name;\n        int strongest_extension_strength\
    \ = -1;\n        foreach (string extension in extensions) {\n            int extension_strength\
    \ = extension.ToUpper().Count() - extension.ToLower().Count();\n            if\
    \ (extension_strength > strongest_extension_strength) {\n                strongest_extension_strength\
    \ = extension_strength;\n                strongest_extension = extension;\n  \
    \          }\n        }\n        return strongest_extension;", "        // Your\
    \ code here\n        string strongest = extensions[0];\n        int cap = 0;\n\
    \        int sm = 0;\n        foreach (string ext in extensions) {\n         \
    \   cap += ext.Count(x => char.IsUpper(x));\n            sm += ext.Count(x =>\
    \ char.IsLower(x));\n        }\n        double strength = cap - sm;\n        if\
    \ (extensions.Count(x => x == strongest) > 1)\n            strongest = extensions.OrderBy(x\
    \ => x).First();\n        return class_name + \".\" + strongest;", "        //\
    \ Your code here\n        string strongest_extension = class_name;\n        foreach\
    \ (string extension in extensions) {\n            int cap = extension.Count(x\
    \ => char.IsUpper(x));\n            int sm = extension.Count(x => char.IsLower(x));\n\
    \            int strength = cap - sm;\n            if (strength > 0) {\n     \
    \           strongest_extension = class_name + extension;\n                break;\n\
    \            }\n        }\n        return strongest_extension;", "        string\
    \ strongest_extension = null;\n        double strongest_extension_strength = 0;\n\
    \        foreach (string extension in extensions) {\n            int extension_strength\
    \ = ExtensionStrength(class_name, extension);\n            if (extension_strength\
    \ > strongest_extension_strength) {\n                strongest_extension = extension;\n\
    \                strongest_extension_strength = extension_strength;\n        \
    \    }\n        }\n        return strongest_extension;", "        // Your code\
    \ here\n        string strongest_extension = \"\";\n        foreach (string extension\
    \ in extensions)\n        {\n            int cap = extension.Count(c => char.IsUpper(c));\n\
    \            int sm = extension.Count(c => char.IsLower(c));\n            int\
    \ strength = cap - sm;\n            if (strength > 0)\n            {\n       \
    \         strongest_extension = class_name + extension;\n                break;\n\
    \            }\n        }\n        return strongest_extension;", "        string\
    \ strongest_extension = null;\n        foreach (string extension in extensions)\
    \ {\n            int cap = extension.Count(c => c == 'A');\n            int sm\
    \ = extension.Count(c => c == 'a');\n            int strength = cap - sm;\n  \
    \          if (strength > 0) {\n                if (strongest_extension == null)\
    \ {\n                    strongest_extension = class_name + extension;\n     \
    \           } else {\n                    if (strength < strongest_extension.Length)\
    \ {\n                        strongest_extension = class_name + extension;\n \
    \                   }\n                }\n            }\n        }\n        return\
    \ strongest_extension;", "        string strongest_extension = extensions[0];\n\
    \        foreach (string extension in extensions) {\n            int cap = extension.Length;\n\
    \            int sm = class_name.Length;\n            int strength = cap - sm;\n\
    \            if (strength > 0) {\n                strongest_extension = extension;\n\
    \            }\n        }\n        return class_name + \".\" + strongest_extension;",
  "        string strongest_extension = null;\n        foreach (string extension in\
    \ extensions) {\n            int cap = extension.Count(c => char.IsUpper(c));\n\
    \            int sm = extension.Count(c => char.IsLower(c));\n            int\
    \ strength = cap - sm;\n            if (strength > 0) {\n                if (strongest_extension\
    \ == null) {\n                    strongest_extension = class_name + extension;\n\
    \                } else {\n                    if (strength < strongest_extension.Length)\
    \ {\n                        strongest_extension = class_name + extension;\n \
    \                   }\n                }\n            }\n        }\n        return\
    \ strongest_extension;", "        string strongest_extension = null;\n       \
    \ foreach (string extension in extensions) {\n            int extension_strength\
    \ = GetExtensionStrength(extension);\n            if (extension_strength > 0)\
    \ {\n                if (strongest_extension == null) {\n                    strongest_extension\
    \ = extension;\n                } else if (extension_strength < GetExtensionStrength(strongest_extension))\
    \ {\n                    strongest_extension = extension;\n                }\n\
    \            }\n        }\n        return class_name + \".\" + strongest_extension;",
  "        // Your code here\n        string strongest_extension = class_name;\n \
    \       foreach (string extension in extensions) {\n            int cap = extension.Count(c\
    \ => c == 'A');\n            int sm = extension.Count(c => c == 'a');\n      \
    \      int strength = cap - sm;\n            if (strength > 0) {\n           \
    \     strongest_extension = class_name + \".\" + extension;\n                break;\n\
    \            }\n        }\n        return strongest_extension;", "        // Your\
    \ code here\n        string strongest = \"\";\n        foreach (string extension\
    \ in extensions)\n        {\n            int cap = extension.Count(x => x == char.ToUpper(x));\n\
    \            int sm = extension.Count(x => x == char.ToLower());\n           \
    \ int strength = cap - sm;\n            if (strength > 0)\n            {\n   \
    \             strongest = class_name + \".\" + extension;\n                break;\n\
    \            }\n        }\n        return strongest;", "        // Your code here\n\
    \        string strongest_extension = class_name;\n        foreach (string extension\
    \ in extensions) {\n            int cap = extension.Count(c => char.IsUpper(c));\n\
    \            int sm = extension.Count(c => char.IsLower(c));\n            int\
    \ strength = cap - sm;\n            if (strength > 0) {\n                strongest_extension\
    \ = class_name + extension;\n                break;\n            }\n        }\n\
    \        return strongest_extension;", "        // Your code here\n        var\
    \ extensions_count = extensions.Count();\n        var extensions_count_cap = extensions.Count(x\
    \ => x.ToUpper().Count() == x.ToUpper().Count());\n        var extensions_count_sm\
    \ = extensions.Count(x => x.ToLower().Count() == x.ToLower().Count());\n     \
    \   var extensions_count_cap_sm = extensions_count_cap - extensions_count_sm;\n\
    \        var extensions_count_cap_sm_max = extensions_count_cap_sm == 0 ? extensions_count\
    \ : extensions_count_cap_sm;\n        var extensions_count_cap_sm_max_index =\
    \ extensions_count_cap_sm_max == extensions_count ? 0 : extensions_count_cap_sm_max;\n\
    \        var extensions_count_cap_sm_max_index_cap = extensions_count_cap_sm_max\
    \ == extensions_count ? 0 : extensions_count_cap_sm_max;\n        var extensions_count_cap_sm_max_index_sm\
    \ = extensions_count_cap_sm_max == extensions_count ? 0 : extensions_count_cap_sm_max;\n\
    \        var extensions_count_cap_sm_max_index_cap_sm = extensions_count_cap_sm_max\
    \ == extensions_count ? 0 : extensions_count_cap_sm_max;\n        var extensions_count_cap_sm_max_index_cap_sm_max\
    \ = extensions_count_cap_sm_max == extensions_count ? 0 : extensions_count_cap_sm_max;\n\
    \        var extensions_count_cap_sm_max_index_cap_sm_max_index = extensions_count_cap_sm_max\
    \ == extensions_count ? 0 : extensions_count_cap_sm_max;\n        var extensions_count_cap_sm_max_index_cap_sm_max_index_cap\
    \ = extensions_count_cap_sm_max == extensions_count ? 0 : extensions_count_cap_sm_max;\n\
    \        var extensions_count_cap_sm_max_index_cap_sm_max_index_sm = extensions_count_cap_sm_max\
    \ == extensions_count ? 0 : extensions_count_cap_sm_max;\n        var extensions_count_cap_sm_max_index_cap_sm_max_index_cap_sm\
    \ = extensions_count_cap_sm_max == extensions_count ? 0 : extensions_count_cap_sm_max;\n\
    \        var extensions_count_cap_sm_max_index_cap_sm_max_index_cap_sm_max = extensions_count_cap_sm_max\
    \ == extensions_count ? 0 : extensions_count_cap_sm_max;\n        var extensions_count_cap_sm_max_index_cap_sm_max_index_cap_sm_max_index\
    \ = extensions_count_cap_sm_max == extensions_count ? 0 : extensions_count_cap_sm_max;\n\
    \        var extensions_count_cap_sm_max_index_cap_sm_max_index_cap_sm_max_index_cap\
    \ = ", "        // Your code goes here\n        string strongest_extension = \"\
    \";\n        string strongest_extension_strength = \"\";\n        foreach (string\
    \ extension in extensions) {\n            int cap = extension.Count(x => char.IsUpper(x));\n\
    \            int sm = extension.Count(x => char.IsLower(x));\n            int\
    \ strength = cap - sm;\n            if (strength > strongest_extension_strength)\
    \ {\n                strongest_extension_strength = strength;\n              \
    \  strongest_extension = extension;\n            }\n        }\n        return\
    \ class_name + \".\" + strongest_extension;", "        string strongest_extension\
    \ = extensions[0];\n        foreach (string extension in extensions) {\n     \
    \       int extension_strength = extension.ToUpper().Count() - extension.ToLower().Count();\n\
    \            if (extension_strength > strongest_extension.ToUpper().Count() -\
    \ strongest_extension.ToLower().Count()) {\n                strongest_extension\
    \ = extension;\n            }\n        }\n        return class_name + \".\" +\
    \ strongest_extension;", "        // Your code here\n        string strongest_extension\
    \ = \"\";\n        foreach (string extension in extensions) {\n            int\
    \ cap = extension.ToUpper().Count();\n            int sm = extension.ToLower().Count();\n\
    \            int strength = cap - sm;\n            if (strength > 0) {\n     \
    \           strongest_extension = class_name + \".\" + extension;\n          \
    \      break;\n            }\n        }\n        return strongest_extension;",
  "        // Your code here\n        string strongest_extension = class_name;\n \
    \       foreach (string extension in extensions) {\n            int cap = extension.Count(x\
    \ => char.IsUpper(x));\n            int sm = extension.Count(x => char.IsLower(x));\n\
    \            int strength = cap - sm;\n            if (strength > 0) {\n     \
    \           strongest_extension = class_name + extension;\n                break;\n\
    \            }\n        }\n        return strongest_extension;", "        // Your\
    \ code here\n        var extension_strength = extensions.Select(x => x.ToUpper().Count()\
    \ - x.ToLower().Count()).ToList();\n        var strongest_extension = extension_strength.OrderByDescending(x\
    \ => x).First();\n        return class_name + \".\" + strongest_extension;", " \
    \       // Your code here\n        string strongest_extension = class_name;\n\
    \        foreach (string extension in extensions) {\n            int cap = extension.Count(x\
    \ => char.IsUpper(x));\n            int sm = extension.Count(x => char.IsLower(x));\n\
    \            int strength = cap - sm;\n            if (strength > 0) {\n     \
    \           strongest_extension = class_name + extension;\n                break;\n\
    \            }\n        }\n        return strongest_extension;", "        string\
    \ extension = extensions[0];\n        int strength = -1;\n        for (int i =\
    \ 0; i < extensions.Count; i++) {\n            string extension_class = extensions[i];\n\
    \            int extension_strength = GetStrength(extension_class);\n        \
    \    if (extension_strength > strength) {\n                extension = extension_class;\n\
    \                strength = extension_strength;\n            }\n        }\n  \
    \      return class_name + \".\" + extension;", "        string strongest_extension\
    \ = class_name;\n        foreach (string extension in extensions) {\n        \
    \    int cap = extension.Count(c => char.IsUpper(c));\n            int sm = extension.Count(c\
    \ => char.IsLower(c));\n            int strength = cap - sm;\n            if (strength\
    \ > 0) {\n                strongest_extension += \".\" + extension;\n        \
    \    }\n        }\n        return strongest_extension;", "        // Your code\
    \ here\n        var extensions_count = extensions.Count();\n        var extensions_count_cap\
    \ = extensions.Count(x => x.ToUpper().Count() == x.ToUpper().Count());\n     \
    \   var extensions_count_sm = extensions.Count(x => x.ToLower().Count() == x.ToLower().Count());\n\
    \        var extensions_count_cap_sm = extensions.Count(x => x.ToUpper().Count()\
    \ - x.ToLower().Count() == 0);\n        var extensions_count_cap_sm_sum = extensions_count_cap_sm\
    \ + extensions_count_sm;\n        var extensions_count_cap_sm_sum_divide = extensions_count_cap_sm_sum\
    \ / extensions_count;\n        var extensions_count_cap_sm_sum_divide_2 = extensions_count_cap_sm_sum_divide\
    \ * extensions_count_cap_sm_sum_divide;\n        var extensions_count_cap_sm_sum_divide_3\
    \ = extensions_count_cap_sm_sum_divide_2 * extensions_count_cap_sm_sum_divide;\n\
    \        var extensions_count_cap_sm_sum_divide_4 = extensions_count_cap_sm_sum_divide_3\
    \ * extensions_count_cap_sm_sum_divide;\n        var extensions_count_cap_sm_sum_divide_5\
    \ = extensions_count_cap_sm_sum_divide_4 * extensions_count_cap_sm_sum_divide;\n\
    \        var extensions_count_cap_sm_sum_divide_6 = extensions_count_cap_sm_sum_divide_5\
    \ * extensions_count_cap_sm_sum_divide;\n        var extensions_count_cap_sm_sum_divide_7\
    \ = extensions_count_cap_sm_sum_divide_6 * extensions_count_cap_sm_sum_divide;\n\
    \        var extensions_count_cap_sm_sum_divide_8 = extensions_count_cap_sm_sum_divide_7\
    \ * extensions_count_cap_sm_sum_divide;\n        var extensions_count_cap_sm_sum_divide_9\
    \ = extensions_count_cap_sm_sum_divide_8 * extensions_count_cap_sm_sum_divide;\n\
    \        var extensions_count_cap_sm_sum_divide_10 = extensions_count_cap_sm_sum_divide_9\
    \ * extensions_count_cap_sm_sum_divide;\n        var extensions_count_cap_sm_sum_divide_11\
    \ = extensions_count_cap_sm_sum_divide_10 * extensions_count_cap_sm_sum_divide;\n\
    \        var extensions_count_cap_sm_sum_divide_12 = extensions_count_cap_sm_sum_divide_11\
    \ * extensions_count_cap_sm_sum_divide;\n        var extensions_count_cap_sm_sum_divide_13\
    \ = extensions_count_cap_sm_sum_divide_12 * extensions_count_cap_sm_sum_divide;\n\
    \        var extensions_count_cap_sm_sum_divide", "        string strongest_extension\
    \ = \"\";\n        foreach (string extension in extensions) {\n            int\
    \ cap = extension.ToUpper().Count();\n            int sm = extension.ToLower().Count();\n\
    \            double strength = cap - sm;\n            if (strength > 0) {\n  \
    \              strongest_extension = class_name + \".\" + extension;\n       \
    \         break;\n            }\n        }\n        return strongest_extension;",
  "        // Your code goes here\n        string strongest_extension = \"\";\n  \
    \      double strength = 0;\n        foreach (string extension in extensions)\
    \ {\n            int cap = extension.Count(x => char.IsUpper(x));\n          \
    \  int sm = extension.Count(x => char.IsLower(x));\n            strength = cap\
    \ - sm;\n            if (strength > 0) {\n                strongest_extension\
    \ = class_name + extension;\n                break;\n            }\n        }\n\
    \        return strongest_extension;", "        // Your code here\n        string\
    \ strongest_extension = class_name;\n        foreach (string extension in extensions)\
    \ {\n            int cap = extension.Count(c => c == 'A');\n            int sm\
    \ = extension.Count(c => c == 'a');\n            int strength = cap - sm;\n  \
    \          if (strength > 0) {\n                strongest_extension += \".\" +\
    \ extension;\n            }\n        }\n        return strongest_extension;",
  "        string strongest_extension = \"\";\n        string extension_strength =\
    \ \"\";\n        foreach (string extension in extensions) {\n            int extension_strength_int\
    \ = 0;\n            int extension_cap_int = 0;\n            int extension_sm_int\
    \ = 0;\n            int extension_class_name_int = 0;\n            int extension_extension_int\
    \ = 0;\n            int extension_extension_int2 = 0;\n            int extension_extension_int3\
    \ = 0;\n            int extension_extension_int4 = 0;\n            int extension_extension_int5\
    \ = 0;\n            int extension_extension_int6 = 0;\n            int extension_extension_int7\
    \ = 0;\n            int extension_extension_int8 = 0;\n            int extension_extension_int9\
    \ = 0;\n            int extension_extension_int10 = 0;\n            int extension_extension_int11\
    \ = 0;\n            int extension_extension_int12 = 0;\n            int extension_extension_int13\
    \ = 0;\n            int extension_extension_int14 = 0;\n            int extension_extension_int15\
    \ = 0;\n            int extension_extension_int16 = 0;\n            int extension_extension_int17\
    \ = 0;\n            int extension_extension_int18 = 0;\n            int extension_extension_int19\
    \ = 0;\n            int extension_extension_int20 = 0;\n            int extension_extension_int21\
    \ = 0;\n            int extension_extension_int22 = 0;\n            int extension_extension_int23\
    \ = 0;\n            int extension_extension_int24 = 0;\n            int extension_extension_int25\
    \ = 0;\n            int extension_extension_int26 = 0;\n            int extension_extension_int27\
    \ = 0;\n            int extension_extension_int28 = 0;\n            int extension_extension_int29\
    \ = 0;\n            int extension_extension_int30 = 0;\n            int extension_extension_int31\
    \ = 0;\n            int extension_extension_int32 = 0;\n            int extension_extension_int33\
    \ = 0;\n            int extension_extension_int34 = 0;\n            int extension_extension_int35\
    \ = 0;\n            int extension_extension_int36 = 0;\n            int extension_extension_int37\
    \ = 0;\n            int extension_extension_int38 = 0;\n            int extension_extension_int39\
    \ = 0;\n            int extension_extension_int40 = 0;\n            int extension_extension_int41\
    \ = 0;\n            int extension_extension_int42 = 0;\n            int extension_extension_int43\
    \ = 0;\n            int extension_extension_int44 = 0;\n            int extension_extension_int45\
    \ = 0;\n            int extension_extension_int46 = 0;\n", "        // Your code\
    \ here\n        string strongest = string.Empty;\n        foreach (string extension\
    \ in extensions)\n        {\n            int cap = extension.Count(x => char.IsUpper(x));\n\
    \            int sm = extension.Count(x => char.IsLower(x));\n            int\
    \ strength = cap - sm;\n            if (strength > 0)\n            {\n       \
    \         strongest = class_name + extension;\n                break;\n      \
    \      }\n        }\n        return strongest;", "        // Your code here\n\
    \        string strongest_extension = class_name;\n        foreach (string extension\
    \ in extensions) {\n            int cap = extension.Count(c => char.IsUpper(c));\n\
    \            int sm = extension.Count(c => char.IsLower(c));\n            int\
    \ strength = cap - sm;\n            if (strength > 0) {\n                strongest_extension\
    \ = class_name + \".\" + extension;\n                break;\n            }\n \
    \       }\n        return strongest_extension;", "        string strongest = null;\n\
    \        string extension = null;\n        foreach (string extension in extensions)\
    \ {\n            int cap = extension.Count(c => char.IsUpper(c));\n          \
    \  int sm = extension.Count(c => char.IsLower(c));\n            int strength =\
    \ cap - sm;\n            if (strength > 0) {\n                if (strongest ==\
    \ null) {\n                    strongest = class_name + extension;\n         \
    \       }\n                else if (strength > strongest.Length) {\n         \
    \           strongest = class_name + extension;\n                }\n         \
    \   }\n        }\n        return strongest;", "        // Your code here\n   \
    \     string strongest_extension = string.Empty;\n        foreach (string extension\
    \ in extensions)\n        {\n            int cap = extension.Count(x => char.IsUpper(x));\n\
    \            int sm = extension.Count(x => char.IsLower(x));\n            int\
    \ strength = cap - sm;\n            if (strength > 0)\n            {\n       \
    \         strongest_extension = class_name + \".\" + extension;\n            \
    \    break;\n            }\n        }\n        return strongest_extension;", " \
    \       // Your code here\n        string strongest = extensions[0];\n       \
    \ int cap = class_name.ToUpper().Count();\n        int sm = class_name.ToLower().Count();\n\
    \        double strength = cap - sm;\n        foreach (string extension in extensions)\
    \ {\n            int cap2 = extension.ToUpper().Count();\n            int sm2\
    \ = extension.ToLower().Count();\n            double strength2 = cap2 - sm2;\n\
    \            if (strength > strength2) {\n                strongest = extension;\n\
    \            }\n        }\n        return class_name + \".\" + strongest;", " \
    \       string extension = extensions[0];\n        string strongest = extension;\n\
    \        foreach (string extension in extensions) {\n            int cap = extension.ToUpper().Count();\n\
    \            int sm = extension.ToLower().Count();\n            int strength =\
    \ cap - sm;\n            if (strength > strongest.ToUpper().Count()) {\n     \
    \           strongest = extension;\n            }\n        }\n        return class_name\
    \ + \".\" + strongest;", "        // Your code here\n        string strongest_extension\
    \ = class_name;\n        foreach (string extension in extensions) {\n        \
    \    int cap = extension.Count(c => char.IsUpper(c));\n            int sm = extension.Count(c\
    \ => char.IsLower(c));\n            int strength = cap - sm;\n            if (strength\
    \ > 0) {\n                strongest_extension += \".\" + extension;\n        \
    \    }\n        }\n        return strongest_extension;", "        // Your code\
    \ here\n        string strongest_extension = class_name;\n        foreach (string\
    \ extension in extensions) {\n            int cap = extension.ToUpper().Count(x\
    \ => x == char.ToUpper(x));\n            int sm = extension.ToLower().Count(x\
    \ => x == char.ToLower(x));\n            int strength = cap - sm;\n          \
    \  if (strength > 0) {\n                strongest_extension += extension.Substring(0,\
    \ extension.Length - 1);\n                break;\n            }\n        }\n \
    \       return strongest_extension;", "        string strongest_extension = null;\n\
    \        foreach (string extension in extensions) {\n            int cap = extension.Count(c\
    \ => char.IsUpper(c));\n            int sm = extension.Count(c => char.IsLower(c));\n\
    \            int strength = cap - sm;\n            if (strength > 0) {\n     \
    \           if (strongest_extension == null || strength < strongest_extension.Length)\
    \ {\n                    strongest_extension = class_name + extension;\n     \
    \           }\n            }\n        }\n        return strongest_extension;",
  "        string strongest_extension = null;\n        string extension_strength =\
    \ null;\n        foreach (string extension in extensions) {\n            int extension_strength_numerator\
    \ = 0;\n            int extension_strength_denominator = 0;\n            int extension_cap\
    \ = 0;\n            int extension_sm = 0;\n            int extension_length =\
    \ extension.Length;\n            for (int i = 0; i < extension_length; i++) {\n\
    \                if (extension[i].ToUpper() == extension[i]) {\n             \
    \       extension_strength_numerator++;\n                }\n                if\
    \ (extension[i].ToLower() == extension[i]) {\n                    extension_strength_denominator++;\n\
    \                }\n                if (extension[i].ToUpper() == extension[i].ToLower())\
    \ {\n                    extension_cap++;\n                }\n               \
    \ if (extension[i].ToLower() == extension[i].ToLower()) {\n                  \
    \  extension_sm++;\n                }\n            }\n            double extension_strength_fraction\
    \ = extension_strength_numerator / extension_strength_denominator;\n         \
    \   if (extension_strength_fraction > extension_strength) {\n                strongest_extension\
    \ = extension;\n                extension_strength = extension_strength_fraction;\n\
    \            }\n        }\n        if (strongest_extension != null) {\n      \
    \      string class_name_with_extension = class_name + \".\" + strongest_extension;\n\
    \            return class_name_with_extension;\n        }\n        else {\n  \
    \          return null;\n        }", "        // Your code here\n        string\
    \ strongest = string.Empty;\n        string extension = string.Empty;\n      \
    \  string extension_class = string.Empty;\n        string extension_class_name\
    \ = string.Empty;\n        string extension_class_name_with_extension = string.Empty;\n\
    \        foreach (string extension_name in extensions) {\n            extension_class\
    \ = extension_name.Substring(0, extension_name.IndexOf(\".\"));\n            extension_class_name\
    \ = extension_name.Substring(extension_name.IndexOf(\".\") + 1);\n           \
    \ extension_class_name_with_extension = extension_class + \".\" + extension_class_name;\n\
    \            if (extension_class_name_with_extension.Equals(class_name, StringComparison.OrdinalIgnoreCase))\
    \ {\n                extension = extension_name;\n                strongest =\
    \ extension_class_name_with_extension;\n            }\n        }\n        return\
    \ strongest;", '        // Your code here', "        // Your code here\n     \
    \   string strongest_extension = class_name;\n        foreach (string extension\
    \ in extensions) {\n            int cap = extension.Count(c => char.IsUpper(c));\n\
    \            int sm = extension.Count(c => char.IsLower(c));\n            int\
    \ strength = cap - sm;\n            if (strength > 0) {\n                strongest_extension\
    \ = class_name + extension;\n                break;\n            }\n        }\n\
    \        return strongest_extension;", "        string extension_strength = extensions[0];\n\
    \        foreach (string extension in extensions) {\n            int extension_cap\
    \ = extension.Count(c => char.IsUpper(c));\n            int extension_sm = extension.Count(c\
    \ => char.IsLower(c));\n            int extension_strength_fraction = extension_cap\
    \ - extension_sm;\n            if (extension_strength_fraction > extension_strength.Count(c\
    \ => c == extension_strength_fraction)) {\n                extension_strength\
    \ = extension;\n            }\n        }\n        return class_name + extension_strength;",
  "        // Your code here\n        string strongest = class_name;\n        foreach\
    \ (string extension in extensions) {\n            int cap = extension.Count(c\
    \ => char.IsUpper(c));\n            int sm = extension.Count(c => char.IsLower(c));\n\
    \            int strength = cap - sm;\n            if (strength > 0) {\n     \
    \           strongest = class_name + extension.Substring(0, extension.Length -\
    \ 1);\n                break;\n            }\n        }\n        return strongest;",
  "        // Your code here\n        string strongest = string.Empty;\n        foreach\
    \ (string extension in extensions) {\n            int cap = extension.Count(x\
    \ => char.IsUpper(x));\n            int sm = extension.Count(x => char.IsLower(x));\n\
    \            int strength = cap - sm;\n            if (strength > 0) {\n     \
    \           strongest = class_name + \".\" + extension;\n                break;\n\
    \            }\n        }\n        return strongest;", "        // Your code here\n\
    \        string strongest_extension = string.Empty;\n        foreach (string extension\
    \ in extensions) {\n            int cap = extension.Count(x => char.IsUpper(x));\n\
    \            int sm = extension.Count(x => char.IsLower(x));\n            int\
    \ strength = cap - sm;\n            if (strength > 0) {\n                strongest_extension\
    \ = class_name + \".\" + extension;\n                break;\n            }\n \
    \       }\n        return strongest_extension;", "        // Your code here\n\
    \        string strongest_extension = class_name;\n        foreach (string extension\
    \ in extensions) {\n            int cap = extension.Count(c => char.IsUpper(c));\n\
    \            int sm = extension.Count(c => char.IsLower(c));\n            int\
    \ strength = cap - sm;\n            if (strength > 0) {\n                strongest_extension\
    \ = class_name + extension;\n                break;\n            }\n        }\n\
    \        return strongest_extension;", '        // Your code here', "        //\
    \ Your code here\n        string strongest = class_name;\n        foreach (string\
    \ extension in extensions) {\n            int cap = extension.Count(x => char.IsUpper(x));\n\
    \            int sm = extension.Count(x => char.IsLower(x));\n            int\
    \ strength = cap - sm;\n            if (strength > 0) {\n                strongest\
    \ = class_name + extension.Substring(0, extension.IndexOf(char.ToUpper(extension[0])));\n\
    \            }\n        }\n        return strongest;", "        // Your code here\n\
    \        string strongest_extension = \"\";\n        foreach (string extension\
    \ in extensions) {\n            int cap = extension.Count(x => char.IsUpper(x));\n\
    \            int sm = extension.Count(x => char.IsLower(x));\n            int\
    \ strength = cap - sm;\n            if (strength > 0) {\n                strongest_extension\
    \ = class_name + extension;\n                break;\n            }\n        }\n\
    \        return strongest_extension;", "        string strongest_extension = null;\n\
    \        foreach (string extension in extensions) {\n            int extension_strength\
    \ = GetExtensionStrength(extension);\n            if (extension_strength > 0)\
    \ {\n                if (strongest_extension == null) {\n                    strongest_extension\
    \ = extension;\n                } else if (extension_strength < GetExtensionStrength(strongest_extension))\
    \ {\n                    strongest_extension = extension;\n                }\n\
    \            }\n        }\n        return strongest_extension;", "        // Your\
    \ code here\n        string strongest_extension = \"\";\n        foreach (string\
    \ extension in extensions)\n        {\n            int cap = extension.Count(x\
    \ => x == char.ToUpper(x));\n            int sm = extension.Count(x => x == char.ToLower(x));\n\
    \            int strength = cap - sm;\n            if (strength > 0)\n       \
    \     {\n                strongest_extension = class_name + \".\" + extension;\n\
    \                break;\n            }\n        }\n        return strongest_extension;",
  "        // Your code here\n        string strongest_extension = \"\";\n       \
    \ foreach (string extension in extensions)\n        {\n            int cap = extension.Count(x\
    \ => x == char.ToUpper(x));\n            int sm = extension.Count(x => x == char.ToLower(x));\n\
    \            int strength = cap - sm;\n            if (strength > 0)\n       \
    \     {\n                strongest_extension = class_name + extension;\n     \
    \           break;\n            }\n        }\n        return strongest_extension;",
  "        // Your code here\n        string strongest = string.Empty;\n        foreach\
    \ (string extension in extensions)\n        {\n            int cap = extension.Count(c\
    \ => char.IsUpper(c));\n            int sm = extension.Count(c => char.IsLower(c));\n\
    \            int strength = cap - sm;\n            if (strength > 0)\n       \
    \     {\n                strongest = class_name + \".\" + extension;\n       \
    \         break;\n            }\n        }\n        return strongest;", "    \
    \    string extension_strength = extensions[0];\n        foreach (string extension\
    \ in extensions) {\n            int extension_capital = extension.Count(c => char.IsUpper(c));\n\
    \            int extension_smaller = extension.Count(c => char.IsLower(c));\n\
    \            int extension_strength = extension_capital - extension_smaller;\n\
    \            if (extension_strength > extension_strength) {\n                extension_strength\
    \ = extension_strength;\n                extension = extension_strength;\n   \
    \         }\n        }\n        return class_name + \".\" + extension_strength;",
  "        // Your code here\n        string strongest_extension = class_name;\n \
    \       foreach (string extension in extensions) {\n            int cap = extension.Count(x\
    \ => char.IsUpper(x));\n            int sm = extension.Count(x => char.IsLower(x));\n\
    \            int strength = cap - sm;\n            if (strength > 0) {\n     \
    \           strongest_extension = class_name + extension;\n                break;\n\
    \            }\n        }\n        return strongest_extension;", "        // Your\
    \ code here\n        string strongest = extensions[0];\n        foreach (string\
    \ extension in extensions) {\n            int cap = extension.Count(c => c ==\
    \ 'A');\n            int sm = extension.Count(c => c == 'a');\n            int\
    \ strength = cap - sm;\n            if (strength > strongest.Length) {\n     \
    \           strongest = extension;\n            }\n        }\n        return class_name\
    \ + \".\" + strongest;", "        string strongest = null;\n        string extension\
    \ = null;\n        foreach (string extension_name in extensions) {\n         \
    \   int extension_strength = GetExtensionStrength(extension_name);\n         \
    \   if (extension_strength > 0) {\n                if (strongest == null) {\n\
    \                    strongest = extension_name;\n                    extension\
    \ = extension_name;\n                } else {\n                    int strength\
    \ = GetExtensionStrength(strongest);\n                    if (strength > extension_strength)\
    \ {\n                        strongest = extension_name;\n                   \
    \     extension = extension_name;\n                    }\n                }\n\
    \            }\n        }\n        return class_name + \".\" + strongest;", " \
    \       // Your code here\n        string strongest = extensions[0];\n       \
    \ int cap = 0;\n        int sm = 0;\n        foreach (string ext in extensions)\
    \ {\n            cap += ext.Count(x => char.IsUpper(x));\n            sm += ext.Count(x\
    \ => char.IsLower(x));\n        }\n        double strength = (double)cap - sm;\n\
    \        if (strength > 0) {\n            strongest = class_name + extensions[0];\n\
    \        }\n        return strongest;", "        // Your code here\n        string\
    \ strongest_extension = \"\";\n        foreach (string extension in extensions)\
    \ {\n            int cap = extension.ToUpper().Count();\n            int sm =\
    \ extension.ToLower().Count();\n            int strength = cap - sm;\n       \
    \     if (strength > 0) {\n                strongest_extension = class_name +\
    \ \".\" + extension;\n                break;\n            }\n        }\n     \
    \   return strongest_extension;", "        // Your code here\n        string strongest_extension\
    \ = extensions[0];\n        foreach (string extension in extensions) {\n     \
    \       int cap = extension.Count(c => char.IsUpper(c));\n            int sm =\
    \ extension.Count(c => char.IsLower(c));\n            int strength = cap - sm;\n\
    \            if (strength > 0) {\n                strongest_extension = extension;\n\
    \            }\n        }\n        return class_name + \".\" + strongest_extension;",
  "        // Your code here\n        string strongest_extension = extensions[0];\n\
    \        foreach (string extension in extensions) {\n            int cap = extension.Count(x\
    \ => x == char.ToUpper(x));\n            int sm = extension.Count(x => x == char.ToLower(x));\n\
    \            int strength = cap - sm;\n            if (strength > strongest_extension.Length)\
    \ {\n                strongest_extension = extension;\n            }\n       \
    \ }\n        return class_name + \".\" + strongest_extension;", "        // Your\
    \ code goes here\n        string strongest = string.Empty;\n        foreach (string\
    \ extension in extensions)\n        {\n            int cap = extension.Count(x\
    \ => x == char.ToUpper(x));\n            int sm = extension.Count(x => x == char.ToLower(x));\n\
    \            int strength = cap - sm;\n            if (strength > 0)\n       \
    \     {\n                strongest = class_name + \".\" + extension;\n       \
    \         break;\n            }\n        }\n        return strongest;", "    \
    \    // Your code here\n        string strongest = class_name;\n        foreach\
    \ (string extension in extensions) {\n            int cap = extension.Count(x\
    \ => char.IsUpper(x));\n            int sm = extension.Count(x => char.IsLower(x));\n\
    \            int strength = cap - sm;\n            if (strength > 0) {\n     \
    \           strongest = class_name + extension;\n            }\n        }\n  \
    \      return strongest;", "        // Your code here\n        string strongest_extension\
    \ = string.Empty;\n        string extension_strength = string.Empty;\n       \
    \ foreach (string extension in extensions) {\n            int extension_strength_counter\
    \ = 0;\n            int extension_cap_counter = 0;\n            int extension_sm_counter\
    \ = 0;\n            foreach (char c in extension) {\n                if (char.IsUpper(c))\
    \ {\n                    extension_cap_counter++;\n                }\n       \
    \         if (char.IsLower(c)) {\n                    extension_sm_counter++;\n\
    \                }\n            }\n            double extension_strength_fraction\
    \ = extension_cap_counter - extension_sm_counter;\n            if (extension_strength_fraction\
    \ == 0) {\n                extension_strength_counter = 0;\n            }\n  \
    \          else if (extension_strength_fraction > 0) {\n                extension_strength_counter\
    \ = extension_strength_fraction;\n            }\n            else if (extension_strength_fraction\
    \ < 0) {\n                extension_strength_counter = extension_strength_fraction\
    \ * -1;\n            }\n            extension_strength += extension_strength_counter.ToString();\n\
    \        }\n        if (extension_strength.Length > 0) {\n            strongest_extension\
    \ = class_name + \".\" + extension_strength;\n        }\n        return strongest_extension;",
  "        // Your code here\n        string strongest = string.Empty;\n        foreach\
    \ (string extension in extensions)\n        {\n            int cap = extension.Count(c\
    \ => char.IsUpper(c));\n            int sm = extension.Count(c => char.IsLower(c));\n\
    \            int strength = cap - sm;\n            if (strength > 0)\n       \
    \     {\n                strongest = class_name + \".\" + extension;\n       \
    \         break;\n            }\n        }\n        return strongest;", "    \
    \    string extension_strength = extensions[0].Length;\n        foreach (string\
    \ extension in extensions) {\n            int extension_length = extension.Length;\n\
    \            int extension_strength_difference = extension_length - extension_strength;\n\
    \            if (extension_strength_difference > 0)\n                extension_strength\
    \ = extension_strength_difference;\n        }\n        return class_name + \"\
    .\" + extensions[0];", "        string extension = extensions[0];\n        string\
    \ extension_class = class_name + extension;\n        string extension_class_with_strength\
    \ = extension_class + \".\" + extension;\n        string extension_class_with_strength_without_extension\
    \ = extension_class_with_strength.Remove(extension_class_with_strength.Length\
    \ - extension.Length);\n        string extension_class_with_strength_without_extension_without_extension\
    \ = extension_class_with_strength_without_extension.Remove(extension_class_with_strength_without_extension.Length\
    \ - extension.Length);\n        string extension_class_with_strength_without_extension_without_extension_without_extension\
    \ = extension_class_with_strength_without_extension_without_extension.Remove(extension_class_with_strength_without_extension_without_extension.Length\
    \ - extension.Length);\n        string extension_class_with_strength_without_extension_without_extension_without_extension_without_extension\
    \ = extension_class_with_strength_without_extension_without_extension_without_extension.Remove(extension_class_with_strength_without_extension_without_extension_without_extension.Length\
    \ - extension.Length);\n        string extension_class_with_strength_without_extension_without_extension_without_extension_without_extension_without_extension\
    \ = extension_class_with_strength_without_extension_without_extension_without_extension_without_extension.Remove(extension_class_with_strength_without_extension_without_extension_without_extension_without_extension.Length\
    \ - extension.Length);\n        string extension_class_with_strength_without_extension_without_extension_without_extension_without_extension_without_extension\
    \ = extension_class_with_strength_without_extension_without_extension_without_extension_without_extension_without_extension.Remove(extension_class_with_strength_without_extension_without_extension_without_extension_without_extension_without_extension.Length\
    \ - extension.Length);\n        string extension_class_with_strength_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension\
    \ = extension_class_with_strength_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension.Remove(extension_class_with_strength_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension.Length\
    \ - extension.Length);\n        string extension_class_with_strength_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension\
    \ = extension_class_with_strength_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension.Remove(extension_class_with_strength_without_extension_without_extension",
  "        // Your code here\n        var extensions_count = extensions.Count();\n\
    \        var extensions_count_cap = extensions.Count(x => x.ToUpper().Count()\
    \ > 0);\n        var extensions_count_sm = extensions.Count(x => x.ToLower().Count()\
    \ > 0);\n        var extensions_count_cap_sm = extensions.Count(x => x.ToUpper().Count()\
    \ > 0 && x.ToLower().Count() > 0);\n        var extensions_count_cap_sm_ratio\
    \ = extensions_count_cap_sm / extensions_count_cap;\n        var extensions_count_cap_sm_ratio_rounded\
    \ = Math.Round(extensions_count_cap_sm_ratio, 2);\n        var extensions_count_cap_sm_ratio_rounded_rounded\
    \ = Math.Round(extensions_count_cap_sm_ratio_rounded, 2);\n        var extensions_count_cap_sm_ratio_rounded_rounded_rounded\
    \ = Math.Round(extensions_count_cap_sm_ratio_rounded_rounded, 2);\n        var\
    \ extensions_count_cap_sm_ratio_rounded_rounded_rounded_rounded = Math.Round(extensions_count_cap_sm_ratio_rounded_rounded_rounded,\
    \ 2);\n        var extensions_count_cap_sm_ratio_rounded_rounded_rounded_rounded_rounded\
    \ = Math.Round(extensions_count_cap_sm_ratio_rounded_rounded_rounded_rounded,\
    \ 2);\n        var extensions_count_cap_sm_ratio_rounded_rounded_rounded_rounded_rounded_rounded\
    \ = Math.Round(extensions_count_cap_sm_ratio_rounded_rounded_rounded_rounded_rounded_rounded,\
    \ 2);\n        var extensions_count_cap_sm_ratio_rounded_rounded_rounded_rounded_rounded_rounded_rounded\
    \ = Math.Round(extensions_count_cap_sm_ratio_rounded_rounded_rounded_rounded_rounded_rounded_rounded,\
    \ 2);\n        var extensions_count_cap_sm_ratio_rounded_rounded_rounded_rounded_rounded_rounded_rounded_rounded\
    \ = Math.Round(extensions_count_cap_sm_ratio_rounded_rounded_rounded_rounded_rounded_rounded_rounded_rounded,\
    \ 2);\n        var extensions_count_cap_sm_ratio_rounded_rounded_rounded_rounded_rounded_rounded_rounded_rounded_rounded_rounded\
    \ = Math.Round(extensions_count_cap_sm_ratio_rounded_rounded_rounded_rounded_rounded_rounded_rounded_rounded_rounded_rounded,\
    \ 2);\n        var extensions_count_cap_sm_ratio_rounded_rounded_rounded_rounded_rounded_rounded_rounded_rounded_rounded_rounded_rounded_rounded_rounded\
    \ = Math.Round(extensions_count_cap_sm_ratio_rounded_rounded_rounded_rounded_rounded_rounded_rounded_rounded_",
  "        // Your code here\n        string strongest_extension = extensions[0];\n\
    \        foreach (string extension in extensions) {\n            int cap = extension.Count(c\
    \ => char.IsUpper(c));\n            int sm = extension.Count(c => char.IsLower(c));\n\
    \            int strength = cap - sm;\n            if (strength > 0) {\n     \
    \           strongest_extension = extension;\n            }\n        }\n     \
    \   return class_name + \".\" + strongest_extension;", "        // Your code here\n\
    \        string strongest = \"\";\n        foreach (string extension in extensions)\n\
    \        {\n            int cap = extension.Count(x => x == char.ToUpper(x));\n\
    \            int sm = extension.Count(x => x == char.ToLower(x));\n          \
    \  int strength = cap - sm;\n            if (strength > 0)\n            {\n  \
    \              strongest = class_name + \".\" + extension;\n                break;\n\
    \            }\n        }\n        return strongest;", "        // Your code here\n\
    \        string strongest_extension = class_name;\n        foreach (string extension\
    \ in extensions) {\n            int cap = extension.Count(c => char.IsUpper(c));\n\
    \            int sm = extension.Count(c => char.IsLower(c));\n            double\
    \ strength = cap - sm;\n            if (strength > 0) {\n                strongest_extension\
    \ = class_name + extension;\n            }\n        }\n        return strongest_extension;",
  "        // Your code here\n        string strongest_extension = string.Empty;\n\
    \        foreach (string extension in extensions) {\n            int cap = extension.Count(x\
    \ => x == char.ToUpper(x));\n            int sm = extension.Count(x => x == char.ToLower(x));\n\
    \            int strength = cap - sm;\n            if (strength > 0) {\n     \
    \           strongest_extension = class_name + extension;\n                break;\n\
    \            }\n        }\n        return strongest_extension;", "        // Your\
    \ code here\n        string strongest = class_name;\n        foreach (string extension\
    \ in extensions) {\n            int cap = extension.Count(c => char.IsUpper(c));\n\
    \            int sm = extension.Count(c => char.IsLower(c));\n            int\
    \ strength = cap - sm;\n            if (strength > 0) {\n                strongest\
    \ = class_name + \".\" + extension;\n                break;\n            }\n \
    \       }\n        return strongest;", "        // Your code here\n        string\
    \ strongest_extension = \"\";\n        foreach (string extension in extensions)\
    \ {\n            int cap = extension.Count(x => x == char.ToUpper(x));\n     \
    \       int sm = extension.Count(x => x == char.ToLower());\n            int strength\
    \ = cap - sm;\n            if (strength > 0) {\n                strongest_extension\
    \ = class_name + \".\" + extension;\n                break;\n            }\n \
    \       }\n        return strongest_extension;", "        // Your code here\n\
    \        string strongest_extension = \"\";\n        foreach (string extension\
    \ in extensions)\n        {\n            int CAP = extension.Length;\n       \
    \     int SM = class_name.Length;\n            int strength = CAP - SM;\n    \
    \        if (strength > 0)\n            {\n                strongest_extension\
    \ = extension;\n                break;\n            }\n        }\n        return\
    \ strongest_extension;", "        // Your code here\n        string strongest_extension\
    \ = class_name;\n        foreach (string extension in extensions) {\n        \
    \    int cap = extension.Count(c => char.IsUpper(c));\n            int sm = extension.Count(c\
    \ => char.IsLower(c));\n            int strength = cap - sm;\n            if (strength\
    \ > 0) {\n                strongest_extension = class_name + extension;\n    \
    \            break;\n            }\n        }\n        return strongest_extension;",
  "        // Your code here\n        string strongest_extension = \"\";\n       \
    \ foreach (string extension in extensions)\n        {\n            int cap = extension.Count(x\
    \ => char.IsUpper(x));\n            int sm = extension.Count(x => char.IsLower(x));\n\
    \            int strength = cap - sm;\n            if (strength > 0)\n       \
    \     {\n                strongest_extension = class_name + \".\" + extension;\n\
    \                break;\n            }\n        }\n        return strongest_extension;",
  "        // Your code goes here\n        string strongest_extension = extensions[0];\n\
    \        foreach (string extension in extensions) {\n            int cap = extension.ToUpper().Count();\n\
    \            int sm = extension.ToLower().Count();\n            double strength\
    \ = (double)cap - sm;\n            if (strength > strongest_extension.ToUpper().Count()\
    \ - strongest_extension.ToLower().Count()) {\n                strongest_extension\
    \ = extension;\n            }\n        }\n        return class_name + \".\" +\
    \ strongest_extension;", "        // Your code here\n        string strongest\
    \ = extensions[0];\n        foreach (string extension in extensions) {\n     \
    \       int cap = extension.Count(c => char.IsUpper(c));\n            int sm =\
    \ extension.Count(c => char.IsLower(c));\n            int strength = cap - sm;\n\
    \            if (strength > strongest.Length) {\n                strongest = extension;\n\
    \            }\n        }\n        return class_name + \".\" + strongest;", " \
    \       // Your code here\n        string extension = extensions[0];\n       \
    \ string extension_class = class_name + extension;\n        string extension_class_name\
    \ = extension_class.Substring(0, extension_class.Length - extension.Length);\n\
    \        string extension_class_name_with_extension = extension_class_name + extension;\n\
    \        string extension_class_name_with_extension_2 = extension_class_name +\
    \ extension.Substring(0, extension.Length - extension.Length);\n        string\
    \ extension_class_name_with_extension_3 = extension_class_name + extension.Substring(0,\
    \ extension.Length - extension.Length - 1);\n        string extension_class_name_with_extension_4\
    \ = extension_class_name + extension.Substring(0, extension.Length - extension.Length\
    \ - 2);\n        string extension_class_name_with_extension_5 = extension_class_name\
    \ + extension.Substring(0, extension.Length - extension.Length - 3);\n       \
    \ string extension_class_name_with_extension_6 = extension_class_name + extension.Substring(0,\
    \ extension.Length - extension.Length - 4);\n        string extension_class_name_with_extension_7\
    \ = extension_class_name + extension.Substring(0, extension.Length - extension.Length\
    \ - 5);\n        string extension_class_name_with_extension_8 = extension_class_name\
    \ + extension.Substring(0, extension.Length - extension.Length - 6);\n       \
    \ string extension_class_name_with_extension_9 = extension_class_name + extension.Substring(0,\
    \ extension.Length - extension.Length - 7);\n        string extension_class_name_with_extension_10\
    \ = extension_class_name + extension.Substring(0, extension.Length - extension.Length\
    \ - 8);\n        string extension_class_name_with_extension_11 = extension_class_name\
    \ + extension.Substring(0, extension.Length - extension.Length - 9);\n       \
    \ string extension_class_name_with_extension_12 = extension_class_name + extension.Substring(0,\
    \ extension.Length - extension.Length - 10);\n        string extension_class_name_with_extension_13\
    \ = extension_class_name + extension.Substring(0, extension.Length - extension.Length\
    \ - 11);\n        string extension_class_name_with_extension_14 = extension_class_name\
    \ + extension.Substring(0, extension.Length - extension.Length - 12);\n      \
    \  string extension_class_name_with_extension_15 = extension_class_name + extension.Substring(0,\
    \ extension.Length - extension.Length - 13);\n        string extension_class_name_with_extension_16\
    \ = extension_class_name + extension.Substring(0, extension.Length - extension.Length\
    \ - 14);\n        string extension_class_name_with_extension_17 = extension_class_",
  "        // Your code here\n        var extensions_count = extensions.Count();\n\
    \        var extensions_count_upper = extensions.Count(x => x.ToUpper().Count()\
    \ == x.ToUpper().Count());\n        var extensions_count_lower = extensions.Count(x\
    \ => x.ToLower().Count() == x.ToLower().Count());\n        var extensions_count_diff\
    \ = extensions_count_upper - extensions_count_lower;\n        var extensions_count_total\
    \ = extensions_count + extensions_count_diff;\n        var extensions_count_average\
    \ = extensions_count_total / extensions_count;\n        var extensions_count_average2\
    \ = extensions_count_average * extensions_count_average;\n        var extensions_count_average3\
    \ = extensions_count_average2 * extensions_count_average;\n        var extensions_count_average4\
    \ = extensions_count_average3 * extensions_count_average;\n        var extensions_count_average5\
    \ = extensions_count_average4 * extensions_count_average;\n        var extensions_count_average6\
    \ = extensions_count_average5 * extensions_count_average;\n        var extensions_count_average7\
    \ = extensions_count_average6 * extensions_count_average;\n        var extensions_count_average8\
    \ = extensions_count_average7 * extensions_count_average;\n        var extensions_count_average9\
    \ = extensions_count_average8 * extensions_count_average;\n        var extensions_count_average10\
    \ = extensions_count_average9 * extensions_count_average;\n        var extensions_count_average11\
    \ = extensions_count_average10 * extensions_count_average;\n        var extensions_count_average12\
    \ = extensions_count_average11 * extensions_count_average;\n        var extensions_count_average13\
    \ = extensions_count_average12 * extensions_count_average;\n        var extensions_count_average14\
    \ = extensions_count_average13 * extensions_count_average;\n        var extensions_count_average15\
    \ = extensions_count_average14 * extensions_count_average;\n        var extensions_count_average16\
    \ = extensions_count_average15 * extensions_count_average;\n        var extensions_count_average17\
    \ = extensions_count_average16 * extensions_count_average;\n        var extensions_count_average18\
    \ = extensions_count_average17 * extensions_count_average;\n        var extensions_count_average19\
    \ = extensions_count_average18 * extensions_count_average;\n        var extensions_count_average20\
    \ = extensions_count_average19 * extensions_count_average;\n        var extensions_count_average21\
    \ = extensions_count_average20 * extensions_count_average;\n        var extensions_count_average22\
    \ = extensions_count_average21 * extensions_count_average;\n        var extensions_count_average23\
    \ = extensions_count_average22 * extensions_count_average;\n        var extensions_count_average24\
    \ = ", "        string strongest_extension = \"\";\n        foreach (string extension\
    \ in extensions) {\n            int cap = extension.Count(x => char.IsUpper(x));\n\
    \            int sm = extension.Count(x => char.IsLower(x));\n            double\
    \ strength = cap - sm;\n            if (strength > 0) {\n                strongest_extension\
    \ = class_name + \".\" + extension;\n                break;\n            }\n \
    \       }\n        return strongest_extension;", "        string strongest_extension\
    \ = null;\n        foreach (string extension in extensions) {\n            int\
    \ cap = extension.Length;\n            int sm = class_name.Length;\n         \
    \   int strength = cap - sm;\n            if (strength > 0) {\n              \
    \  if (strongest_extension == null) {\n                    strongest_extension\
    \ = extension;\n                } else if (strength < strongest_extension.Length)\
    \ {\n                    strongest_extension = extension;\n                }\n\
    \            }\n        }\n        return strongest_extension;", "        string\
    \ strongest_extension = null;\n        double strength = -1;\n        foreach\
    \ (string extension in extensions) {\n            double extension_strength =\
    \ GetExtensionStrength(extension);\n            if (extension_strength > strength)\
    \ {\n                strongest_extension = extension;\n                strength\
    \ = extension_strength;\n            }\n        }\n        return class_name +\
    \ \".\" + strongest_extension;", "        // Your code here\n        string strongest_extension\
    \ = class_name;\n        foreach (string extension in extensions) {\n        \
    \    int cap = extension.Count(c => char.IsUpper(c));\n            int sm = extension.Count(c\
    \ => char.IsLower(c));\n            int strength = cap - sm;\n            if (strength\
    \ > 0) {\n                strongest_extension += \".\" + extension;\n        \
    \    }\n        }\n        return strongest_extension;", "        // Your code\
    \ here\n        string strongest = extensions[0];\n        foreach (string extension\
    \ in extensions)\n        {\n            int cap = extension.Count(x => char.IsUpper(x));\n\
    \            int sm = extension.Count(x => char.IsLower(x));\n            int\
    \ strength = cap - sm;\n            if (strength > 0)\n            {\n       \
    \         strongest = extension;\n            }\n        }\n        return class_name\
    \ + \".\" + strongest;", "        // Your code here\n        var extension_strength\
    \ = extensions.Select(x => x.ToUpperInvariant().Count() - x.ToLowerInvariant().Count()).ToArray();\n\
    \        var extension_strength_max = extension_strength.Max();\n        var extension_strength_max_index\
    \ = extension_strength.IndexOf(extension_strength_max);\n        var extension_strength_max_name\
    \ = extensions[extension_strength_max_index];\n        return class_name + \"\
    .\" + extension_strength_max_name;", "        // Your code here\n        string\
    \ strongest_extension = extensions[0];\n        foreach (string extension in extensions)\n\
    \        {\n            int cap = extension.Count(c => char.IsUpper(c));\n   \
    \         int sm = extension.Count(c => char.IsLower(c));\n            int strength\
    \ = cap - sm;\n            if (strength > 0)\n            {\n                strongest_extension\
    \ = extension;\n            }\n        }\n        return class_name + \".\" +\
    \ strongest_extension;", "        // Your code goes here\n        string strongest\
    \ = \"\";\n        foreach (string extension in extensions)\n        {\n     \
    \       int cap = extension.Length;\n            int sm = class_name.Length;\n\
    \            int strength = cap - sm;\n            if (strength > 0)\n       \
    \     {\n                strongest = class_name + \".\" + extension;\n       \
    \         break;\n            }\n        }\n        return strongest;", "    \
    \    // Your code goes here\n        string strongest_extension = string.Empty;\n\
    \        foreach (string extension in extensions) {\n            int cap = extension.Count(x\
    \ => char.IsUpper(x));\n            int sm = extension.Count(x => char.IsLower(x));\n\
    \            int strength = cap - sm;\n            if (strength > 0) {\n     \
    \           strongest_extension = class_name + \".\" + extension;\n          \
    \  }\n        }\n        return strongest_extension;", "        string extension\
    \ = extensions[0];\n        foreach (string extension2 in extensions) {\n    \
    \        int SM = extension2.Count(c => c == 'S');\n            int CAP = extension2.Count(c\
    \ => c == 'C');\n            int strength = CAP - SM;\n            if (strength\
    \ > 0) {\n                extension = extension2;\n            }\n        }\n\
    \        return class_name + \".\" + extension;", "        string extension =\
    \ extensions[0];\n        int cap = extension.Count(c => char.IsUpper(c));\n \
    \       int sm = extension.Count(c => char.IsLower(c));\n        int strength\
    \ = cap - sm;\n        if (extensions.Count() > 1) {\n            extension =\
    \ extensions.OrderBy(x => x).First();\n            cap = extension.Count(c =>\
    \ char.IsUpper(c));\n            sm = extension.Count(c => char.IsLower(c));\n\
    \            strength = cap - sm;\n        }\n        return class_name + \".\"\
    \ + extension + extensions[extensions.IndexOf(extension)].Substring(0, extension.Length\
    \ - extensions[extensions.IndexOf(extension)].Length);", '        // Your code
    here', "        // Your code goes here\n        string strongest_extension = string.Empty;\n\
    \        string extension_strength = string.Empty;\n        foreach (string extension\
    \ in extensions)\n        {\n            int cap = extension.Count(c => char.IsUpper(c));\n\
    \            int sm = extension.Count(c => char.IsLower(c));\n            extension_strength\
    \ = cap - sm;\n            if (extension_strength > strongest_extension)\n   \
    \         {\n                strongest_extension = extension;\n            }\n\
    \        }\n        return class_name + \".\" + strongest_extension;", "     \
    \   string extension = extensions[0];\n        foreach (string extension2 in extensions)\
    \ {\n            int cap = extension2.Count(c => Char.IsUpper(c));\n         \
    \   int sm = extension2.Count(c => Char.IsLower(c));\n            int strength\
    \ = cap - sm;\n            if (strength > extension.Length) {\n              \
    \  extension = extension2;\n            }\n        }\n        return class_name\
    \ + \".\" + extension;", "        // Your code here\n        string strongest\
    \ = string.Empty;\n        foreach (string extension in extensions) {\n      \
    \      int cap = extension.ToUpper().Count();\n            int sm = extension.ToLower().Count();\n\
    \            int strength = cap - sm;\n            if (strength > 0) {\n     \
    \           strongest = class_name + \".\" + extension;\n                break;\n\
    \            }\n        }\n        return strongest;", "        string extension\
    \ = extensions[0];\n        int strength = -1;\n        foreach (string extension_name\
    \ in extensions) {\n            int extension_strength = GetExtensionStrength(extension_name);\n\
    \            if (extension_strength > strength) {\n                extension =\
    \ extension_name;\n                strength = extension_strength;\n          \
    \  }\n        }\n        return class_name + \".\" + extension;", "        string\
    \ extension = extensions[0];\n        int strength = -1;\n        foreach (string\
    \ ext in extensions) {\n            int cap = ext.ToUpper().Count();\n       \
    \     int sm = ext.ToLower().Count();\n            int diff = cap - sm;\n    \
    \        if (diff > strength) {\n                extension = ext;\n          \
    \      strength = diff;\n            }\n        }\n        return class_name +\
    \ \".\" + extension;", "        // Your code here\n        string strongest =\
    \ class_name;\n        int cap = 0;\n        int sm = 0;\n        foreach (string\
    \ ext in extensions) {\n            cap = cap + ext.ToUpper().Count() - ext.ToUpper().Replace(\"\
    S\", \"\").Count();\n            sm = sm + ext.ToLower().Count() - ext.ToLower().Replace(\"\
    S\", \"\").Count();\n        }\n        double strength = cap - sm;\n        extensions.Sort();\n\
    \        if (extensions.Count > 1) {\n            int i = 0;\n            foreach\
    \ (string ext in extensions) {\n                if (i == 0) {\n              \
    \      strongest = class_name + ext;\n                }\n                else\
    \ {\n                    if (strength > 0) {\n                        if (strength\
    \ == extensions[i].ToUpper().Count() - ext.ToUpper().Replace(\"S\", \"\").Count())\
    \ {\n                            strongest = class_name + ext;\n             \
    \           }\n                    }\n                }\n                i++;\n\
    \            }\n        }\n        return strongest;", "        // Your code here\n\
    \        string strongest = string.Empty;\n        foreach (string extension in\
    \ extensions) {\n            int cap = extension.Count(x => x == char.ToUpper(x));\n\
    \            int sm = extension.Count(x => x == char.ToLower());\n           \
    \ int strength = cap - sm;\n            if (strength > 0) {\n                strongest\
    \ = class_name + \".\" + extension;\n                break;\n            }\n \
    \       }\n        return strongest;", "        // Your code goes here\n     \
    \   string strongest = extensions[0];\n        foreach (string extension in extensions)\
    \ {\n            int cap = extension.Count(x => char.IsUpper(x));\n          \
    \  int sm = extension.Count(x => char.IsLower(x));\n            int strength =\
    \ cap - sm;\n            if (strength > 0) {\n                strongest = extension;\n\
    \            }\n        }\n        return class_name + \".\" + strongest;", " \
    \       // Your code here\n        string strongest = string.Empty;\n        foreach\
    \ (string extension in extensions)\n        {\n            int cap = extension.Count(c\
    \ => char.IsUpper(c));\n            int sm = extension.Count(c => char.IsLower(c));\n\
    \            int strength = cap - sm;\n            if (strength > 0)\n       \
    \     {\n                strongest = class_name + \".\" + extension;\n       \
    \         break;\n            }\n        }\n        return strongest;", "    \
    \    // Your code here\n        string strongest_extension = extensions[0];\n\
    \        foreach (string extension in extensions) {\n            int cap = extension.Count(c\
    \ => char.IsUpper(c));\n            int sm = extension.Count(c => char.IsLower(c));\n\
    \            int strength = cap - sm;\n            if (strength > 0) {\n     \
    \           strongest_extension = extension;\n            }\n        }\n     \
    \   return class_name + \".\" + strongest_extension;", "        // Your code here\n\
    \        string strongest = string.Empty;\n        foreach (string extension in\
    \ extensions) {\n            int cap = extension.Count(c => char.IsUpper(c));\n\
    \            int sm = extension.Count(c => char.IsLower(c));\n            int\
    \ strength = cap - sm;\n            if (strength > 0) {\n                strongest\
    \ = class_name + \".\" + extension;\n            }\n        }\n        return\
    \ strongest;", "        // Your code goes here\n        string strongest = string.Empty;\n\
    \        foreach (string extension in extensions) {\n            int cap = extension.Count(c\
    \ => char.IsUpper(c));\n            int sm = extension.Count(c => char.IsLower(c));\n\
    \            int strength = cap - sm;\n            if (strength > 0) {\n     \
    \           strongest = class_name + \".\" + extension;\n                break;\n\
    \            }\n        }\n        return strongest;", "        // Your code here\n\
    \        string strongest_extension = class_name;\n        foreach (string extension\
    \ in extensions) {\n            int cap = extension.Count(x => x == char.ToUpper(x));\n\
    \            int sm = extension.Count(x => x == char.ToLower(x));\n          \
    \  int strength = cap - sm;\n            if (strength > 0) {\n               \
    \ strongest_extension += extension.Substring(0, extension.IndexOf('.', cap));\n\
    \                break;\n            }\n        }\n        return strongest_extension;",
  "        // Your code here\n        string strongest_extension = \"\";\n       \
    \ double strength = 0;\n        foreach (string extension in extensions) {\n \
    \           int cap = extension.Count(x => char.IsUpper(x));\n            int\
    \ sm = extension.Count(x => char.IsLower(x));\n            double fraction = cap\
    \ - sm;\n            if (fraction > strength) {\n                strongest_extension\
    \ = extension;\n                strength = fraction;\n            }\n        }\n\
    \        return class_name + \".\" + strongest_extension;", "        // Your code\
    \ here\n        string strongest = \"\";\n        foreach (string extension in\
    \ extensions) {\n            int cap = extension.Count(c => char.IsUpper(c));\n\
    \            int sm = extension.Count(c => char.IsLower(c));\n            int\
    \ strength = cap - sm;\n            if (strength > 0) {\n                strongest\
    \ = class_name + \".\" + extension;\n                break;\n            }\n \
    \       }\n        return strongest;", "        // Your code here\n        var\
    \ extensions_count = extensions.Count();\n        var extensions_count_upper =\
    \ extensions.Count(x => x.ToUpper().Equals(x));\n        var extensions_count_lower\
    \ = extensions.Count(x => x.ToLower().Equals(x));\n        var extensions_count_diff\
    \ = extensions_count_upper - extensions_count_lower;\n        var extensions_count_diff_frac\
    \ = extensions_count_diff / extensions_count;\n        var extensions_count_diff_frac_max\
    \ = Math.Max(extensions_count_diff_frac, 1);\n        var extensions_count_diff_frac_min\
    \ = Math.Min(extensions_count_diff_frac, 1);\n        var extensions_count_diff_frac_sum\
    \ = extensions_count_diff_frac_max + extensions_count_diff_frac_min;\n       \
    \ var extensions_count_diff_frac_avg = extensions_count_diff_frac_sum / extensions_count;\n\
    \        var extensions_count_diff_frac_max_index = extensions.IndexOf(extensions_count_diff_frac_max);\n\
    \        var extensions_count_diff_frac_min_index = extensions.IndexOf(extensions_count_diff_frac_min);\n\
    \        var extensions_count_diff_frac_sum_index = extensions.IndexOf(extensions_count_diff_frac_sum);\n\
    \        var extensions_count_diff_frac_avg_index = extensions.IndexOf(extensions_count_diff_frac_avg);\n\
    \        var extensions_count_diff_frac_max_index = extensions.IndexOf(extensions_count_diff_frac_max);\n\
    \        var extensions_count_diff_frac_min_index = extensions.IndexOf(extensions_count_diff_frac_min);\n\
    \        var extensions_count_diff_frac_sum_index = extensions.IndexOf(extensions_count_diff_frac_sum);\n\
    \        var extensions_count_diff_frac_avg_index = extensions.IndexOf(extensions_count_diff_frac_avg);\n\
    \        var extensions_count_diff_frac_max_index = extensions.IndexOf(extensions_count_diff_frac_max);\n\
    \        var extensions_count_diff_frac_min_index = extensions.IndexOf(extensions_count_diff_frac_min);\n\
    \        var extensions_count_diff_frac_sum_index = extensions.IndexOf(extensions_count_diff_frac_sum);\n\
    \        var extensions_count_diff_frac_avg_index = extensions.IndexOf(extensions_count_diff_frac_avg);\n\
    \        var extensions_count_diff_frac_max_index = extensions.IndexOf(extensions_count_diff_frac_max);\n\
    \        var extensions_count_diff_frac_min_index = extensions.IndexOf(extensions_count_diff_frac_min);\n\
    \        var extensions_count_diff_frac_sum_index = extensions.IndexOf(extensions_count_diff_frac_sum);\n\
    \        var extensions_count_diff_frac_avg_index = extensions.IndexOf(extensions_count_diff_frac_avg);\n\
    \        var extensions_count_diff_frac_max_index = extensions.Index", "     \
    \   // Your code here\n        string strongest = extensions[0];\n        int\
    \ cap = class_name.Length;\n        int sm = class_name.ToLower().Length;\n  \
    \      double strength = cap - sm;\n        foreach (string extension in extensions)\
    \ {\n            int cap2 = extension.Length;\n            int sm2 = extension.ToLower().Length;\n\
    \            double strength2 = cap2 - sm2;\n            if (strength > strength2)\
    \ {\n                strongest = extension;\n                strength = strength2;\n\
    \            }\n        }\n        return class_name + \".\" + strongest;", " \
    \       string strongest_extension = null;\n        foreach (string extension\
    \ in extensions) {\n            int extension_strength = ExtensionStrength(extension);\n\
    \            if (extension_strength > 0) {\n                if (strongest_extension\
    \ == null) {\n                    strongest_extension = extension;\n         \
    \       } else if (extension_strength < ExtensionStrength(strongest_extension))\
    \ {\n                    strongest_extension = extension;\n                }\n\
    \            }\n        }\n        return class_name + \".\" + strongest_extension;",
  "        // Your code here\n        string strongest = string.Empty;\n        foreach\
    \ (string extension in extensions)\n        {\n            int cap = extension.Count(x\
    \ => x == char.ToUpper(x.ToString()));\n            int sm = extension.Count(x\
    \ => x == char.ToLower(x.ToString()));\n            int strength = cap - sm;\n\
    \            if (strength > 0)\n            {\n                strongest = class_name\
    \ + \".\" + extension;\n                break;\n            }\n        }\n   \
    \     return strongest;", "        // Your code here\n        string strongest_extension\
    \ = string.Empty;\n        foreach (string extension in extensions) {\n      \
    \      int cap = extension.Count(c => char.IsUpper(c));\n            int sm =\
    \ extension.Count(c => char.IsLower(c));\n            double strength = cap -\
    \ sm;\n            if (strength > 0) {\n                strongest_extension =\
    \ class_name + extension;\n                break;\n            }\n        }\n\
    \        return strongest_extension;", "        string strongest_extension = null;\n\
    \        double strongest_strength = double.MaxValue;\n        foreach (string\
    \ extension in extensions) {\n            double extension_strength = GetExtensionStrength(extension);\n\
    \            if (extension_strength > strongest_strength) {\n                strongest_extension\
    \ = extension;\n                strongest_strength = extension_strength;\n   \
    \         }\n        }\n        return class_name + \".\" + strongest_extension;",
  "        string strongest_extension = null;\n        string extension_strength =\
    \ null;\n        foreach (string extension in extensions) {\n            int extension_strength_numerator\
    \ = extension.Count(c => char.IsUpper(c));\n            int extension_strength_denominator\
    \ = extension.Count(c => char.IsLower(c));\n            int extension_strength\
    \ = extension_strength_numerator - extension_strength_denominator;\n         \
    \   if (extension_strength > 0) {\n                if (extension_strength_numerator\
    \ == extension_strength_denominator) {\n                    extension_strength\
    \ = -1;\n                }\n                else {\n                    extension_strength\
    \ = extension_strength / extension_strength_numerator;\n                }\n  \
    \          }\n            if (extension_strength > 0) {\n                strongest_extension\
    \ = extension;\n                extension_strength = extension_strength;\n   \
    \         }\n        }\n        if (strongest_extension != null) {\n         \
    \   string class_name_with_extension = class_name + \".\" + strongest_extension;\n\
    \            return class_name_with_extension;\n        }\n        else {\n  \
    \          return class_name;\n        }", "        // Your code here\n      \
    \  var extension_strengths = extensions.Select(x => x.ToUpper().Count() - x.ToLower().Count()).ToList();\n\
    \        var max_strength = extension_strengths.Max();\n        var max_index\
    \ = extension_strengths.FindIndex(x => x == max_strength);\n        return class_name\
    \ + extensions[max_index];", '        // Your code here', "        // Your code\
    \ here\n        string strongest = string.Empty;\n        foreach (string extension\
    \ in extensions)\n        {\n            int cap = extension.Count(x => char.IsUpper(x));\n\
    \            int sm = extension.Count(x => char.IsLower(x));\n            int\
    \ strength = cap - sm;\n            if (strength > 0)\n            {\n       \
    \         strongest = class_name + \".\" + extension;\n                break;\n\
    \            }\n        }\n        return strongest;", "        string strongest\
    \ = null;\n        foreach (string extension in extensions) {\n            int\
    \ cap = extension.ToUpper().Count();\n            int sm = extension.ToLower().Count();\n\
    \            int strength = cap - sm;\n            if (strongest == null || strength\
    \ > strongest.Length) {\n                strongest = extension;\n            }\n\
    \        }\n        return class_name + \".\" + strongest;", "        string strongest_extension\
    \ = \"\";\n        string extension_strength = \"\";\n        foreach (string\
    \ extension in extensions) {\n            int extension_strength_numerator = 0;\n\
    \            int extension_strength_denominator = 0;\n            int extension_cap\
    \ = 0;\n            int extension_sm = 0;\n            int extension_class_cap\
    \ = 0;\n            int extension_class_sm = 0;\n            int extension_class_cap_sm\
    \ = 0;\n            int extension_class_cap_sm_numerator = 0;\n            int\
    \ extension_class_cap_sm_denominator = 0;\n            int extension_class_cap_sm_denominator_numerator\
    \ = 0;\n            int extension_class_cap_sm_denominator_numerator_numerator\
    \ = 0;\n            int extension_class_cap_sm_denominator_numerator_numerator_numerator\
    \ = 0;\n            int extension_class_cap_sm_denominator_numerator_numerator_numerator_numerator\
    \ = 0;\n            int extension_class_cap_sm_denominator_numerator_numerator_numerator_numerator_numerator\
    \ = 0;\n            int extension_class_cap_sm_denominator_numerator_numerator_numerator_numerator_numerator_numerator\
    \ = 0;\n            int extension_class_cap_sm_denominator_numerator_numerator_numerator_numerator_numerator_numerator_numerator\
    \ = 0;\n            int extension_class_cap_sm_denominator_numerator_numerator_numerator_numerator_numerator_numerator_numerator_numerator\
    \ = 0;\n            int extension_class_cap_sm_denominator_numerator_numerator_numerator_numerator_numerator_numerator_numerator_numerator_numerator\
    \ = 0;\n            int extension_class_cap_sm_denominator_numerator_numerator_numerator_numerator_numerator_numerator_numerator_numerator_numerator_numerator\
    \ = 0;\n            int extension_class_cap_sm_denominator_numerator_numerator_numerator_numerator_numerator_numerator_numerator_numerator_numerator_numerator_numerator\
    \ = 0;\n            int extension_class_cap_sm_denominator_numerator_numerator_numerator_numerator_numerator_numerator_numerator_numerator_numerator_numerator_numerator_numerator\
    \ = 0;\n            int extension_class_cap_sm_denominator_numerator_numerator_numerator_numerator_numerator_numerator_numerator_numerator_numerator_numerator_numerator_numerator_numerator\
    \ = 0;\n            int extension_class_cap_sm_denominator_numerator_numerator_numerator_numerator_numerator_numerator_numerator_numerator_numerator_numerator_numerator_numerator_numerator_numerator\
    \ = 0;\n            int extension_class_cap_sm_denominator_numerator_numerator_numerator_numerator_numerator_numerator_numerator_numerator_numerator_numerator_numerator_",
  "        // Your code goes here\n        string strongest_extension = string.Empty;\n\
    \        double strongest_strength = double.MaxValue;\n        foreach (string\
    \ extension in extensions) {\n            double extension_strength = GetExtensionStrength(class_name,\
    \ extension);\n            if (extension_strength > strongest_strength) {\n  \
    \              strongest_strength = extension_strength;\n                strongest_extension\
    \ = extension;\n            }\n        }\n        return class_name + \".\" +\
    \ strongest_extension;", "        // Your code here\n        string strongest\
    \ = class_name;\n        foreach (string extension in extensions) {\n        \
    \    int cap = extension.Count(c => char.IsUpper(c));\n            int sm = extension.Count(c\
    \ => char.IsLower(c));\n            int strength = cap - sm;\n            if (strength\
    \ > 0) {\n                strongest = class_name + \".\" + extension;\n      \
    \      }\n        }\n        return strongest;", "        // Your code here\n\
    \        string strongest_extension = class_name;\n        foreach (string extension\
    \ in extensions) {\n            int cap = extension.Count(c => char.IsUpper(c));\n\
    \            int sm = extension.Count(c => char.IsLower(c));\n            int\
    \ strength = cap - sm;\n            if (strength > 0) {\n                strongest_extension\
    \ += \".\" + extension;\n            }\n        }\n        return strongest_extension;",
  "        // Your code here\n        string strongest = string.Empty;\n        foreach\
    \ (string extension in extensions) {\n            int cap = extension.Count(x\
    \ => char.IsUpper(x));\n            int sm = extension.Count(x => char.IsLower(x));\n\
    \            int strength = cap - sm;\n            if (strength > 0) {\n     \
    \           strongest = class_name + extension;\n                break;\n    \
    \        }\n        }\n        return strongest;", "        // Your code here\n\
    \        string strongest_extension = string.Empty;\n        foreach (string extension\
    \ in extensions) {\n            int extension_strength = GetExtensionStrength(extension);\n\
    \            if (extension_strength > strongest_extension.Length) {\n        \
    \        strongest_extension = extension;\n            }\n        }\n        return\
    \ class_name + \".\" + strongest_extension;", "        string strongest = null;\n\
    \        double max_strength = double.MaxValue;\n        double min_strength =\
    \ double.MinValue;\n        foreach (string extension in extensions) {\n     \
    \       double extension_strength = GetExtensionStrength(class_name, extension);\n\
    \            if (extension_strength > max_strength) {\n                max_strength\
    \ = extension_strength;\n                strongest = extension;\n            }\
    \ else if (extension_strength < min_strength) {\n                min_strength\
    \ = extension_strength;\n                strongest = extension;\n            }\n\
    \        }\n        if (max_strength == double.MaxValue) {\n            return\
    \ class_name;\n        }\n        return class_name + \".\" + strongest;"]
stop_tokens:
- "\n    }\n"
