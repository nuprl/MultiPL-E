name: HumanEval_68_pluck
language: cs
prompt: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\n\
  using System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass\
  \ Problem {\n    // \"Given an array representing a branch of a tree that has non-negative\
  \ integer nodes\n    // your task is to pluck one of the nodes and return it.\n\
  \    // The plucked node should be the node with the smallest even value.\n    //\
  \ If multiple nodes with the same smallest even value are found return the node\
  \ that has smallest index.\n    // The plucked node should be returned in a list,\
  \ [ smalest_value, its index ],\n    // If there are no even values or the given\
  \ array is empty, return [].\n    // Example 1:\n    // Explanation: 2 has the smallest\
  \ even value, and 2 has the smallest index.\n    // Example 2:\n    // Explanation:\
  \ 2 has the smallest even value, and 2 has the smallest index.\n    // Example 3:\n\
  \    // Example 4:\n    // Explanation: 0 is the smallest value, but  there are\
  \ two zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
  \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
  \    public static List<long> Pluck(List<long> arr) {\n"
tests: "    }\n    public static void Main(string[] args) {\n    Debug.Assert(Pluck((new\
  \ List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new\
  \ long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
  \ (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n\
  \    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new\
  \ List<long>(new long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new\
  \ List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
  \ long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new\
  \ List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new\
  \ long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new\
  \ long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L,\
  \ (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n\
  \    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)9L, (long)7L,\
  \ (long)1L}))).Equals((new List<long>())));\n    }\n\n}\n"
completions: ["        long smalest_value = arr.Min();\n        long smalest_index\
    \ = 0;\n        List<long> result = new List<long>();\n        foreach (long i\
    \ in arr) {\n            if (i % 2 == 0) {\n                if (smalest_value\
    \ < i) {\n                    smalest_value = i;\n                    smalest_index\
    \ = i;\n                }\n            }\n        }\n        if (smalest_index\
    \ != 0) {\n            result.Add(smalest_value);\n            result.Add(smalest_index);\n\
    \        }\n        return result;", "        List<long> result = new List<long>();\n\
    \        long smalest_value = arr.Min();\n        long smalest_index = 0;\n  \
    \      long smalest_even_value = 0;\n        long smalest_even_index = 0;\n  \
    \      long smalest_even_index_count = 0;\n        long smalest_even_index_count_max\
    \ = 0;\n        long smalest_even_index_count_min = 0;\n        long smalest_even_index_count_sum\
    \ = 0;\n        long smalest_even_index_count_sum_max = 0;\n        long smalest_even_index_count_sum_min\
    \ = 0;\n        long smalest_even_index_count_sum_avg = 0;\n        long smalest_even_index_count_sum_avg_max\
    \ = 0;\n        long smalest_even_index_count_sum_avg_min = 0;\n        long smalest_even_index_count_sum_avg_avg\
    \ = 0;\n        long smalest_even_index_count_sum_avg_avg_max = 0;\n        long\
    \ smalest_even_index_count_sum_avg_avg_min = 0;\n        long smalest_even_index_count_sum_avg_avg_avg\
    \ = 0;\n        long smalest_even_index_count_sum_avg_avg_max = 0;\n        long\
    \ smalest_even_index_count_sum_avg_avg_min = 0;\n        long smalest_even_index_count_sum_avg_avg_avg\
    \ = 0;\n        long smalest_even_index_count_sum_avg_avg_max = 0;\n        long\
    \ smalest_even_index_count_sum_avg_avg_min = 0;\n        long smalest_even_index_count_sum_avg_avg_avg\
    \ = 0;\n        long smalest_even_index_count_sum_avg_avg_max = 0;\n        long\
    \ smalest_even_index_count_sum_avg_avg_min = 0;\n        long smalest_even_index_count_sum_avg_avg_avg\
    \ = 0;\n        long smalest_even_index_count_sum_avg_avg_max = 0;\n        long\
    \ smalest_even_index_count_sum_avg_avg_min = 0;\n        long smalest_even_index_count_sum_avg_avg_avg\
    \ = 0;\n        long smalest_even_index_count_sum_avg_avg_max = 0;\n        long\
    \ smalest_even_index_count_sum_avg_avg_min = 0;\n        long smalest_even_index_count_sum_avg_avg_avg\
    \ = 0;\n        long smalest_even_index_count_sum_avg_avg_max = 0;\n        long\
    \ smalest_even_index_count_sum_avg_avg_min = 0;\n        long smalest_even_index_count_sum_avg_avg_avg\
    \ = 0;\n        long smalest_even_index_count_sum_avg_avg_max = 0;\n        long\
    \ smalest_even_index_count_sum_avg_avg_min = 0;\n        long smalest_even_index_count_sum_avg_avg_avg\
    \ = 0;\n        long smalest_even_index_count_sum_avg_avg_max = 0;", "       \
    \ List<long> result = new List<long>();\n        long smallest_value = arr.Min();\n\
    \        long smallest_index = 0;\n        long smallest_even_value = 0;\n   \
    \     bool found = false;\n        for (int i = 0; i < arr.Count; i++) {\n   \
    \         if (arr[i] % 2 == 0) {\n                if (smallest_value == 0) {\n\
    \                    smallest_even_value = arr[i];\n                    smallest_index\
    \ = i;\n                    found = true;\n                } else if (smallest_even_value\
    \ < arr[i]) {\n                    smallest_even_value = arr[i];\n           \
    \         smallest_index = i;\n                    found = true;\n           \
    \     }\n            }\n        }\n        if (found) {\n            result.Add(smallest_even_value);\n\
    \            result.Add(smallest_index);\n        }\n        return result;",
  "        List<long> result = new List<long>();\n        long smallestEven = arr.Min();\n\
    \        int smallestIndex = arr.IndexOf(smallestEven);\n        if (smallestIndex\
    \ == -1) {\n            return result;\n        }\n        long smallestEvenValue\
    \ = arr[smallestIndex];\n        long smallestEvenIndex = 0;\n        for (int\
    \ i = 0; i < arr.Count; i++) {\n            if (arr[i] % 2 == 0) {\n         \
    \       if (arr[i] < smallestEvenValue) {\n                    smallestEvenValue\
    \ = arr[i];\n                    smallestEvenIndex = i;\n                }\n \
    \           }\n        }\n        result.Add(smallestEvenValue);\n        result.Add(smallestEvenIndex);\n\
    \        return result;", "        List<long> result = new List<long>();\n   \
    \     long smallest_value = arr.Min();\n        long smallest_index = 0;\n   \
    \     long smallest_even_value = 0;\n        for (int i = 0; i < arr.Count; i++)\
    \ {\n            if (arr[i] % 2 == 0) {\n                if (smallest_even_value\
    \ < arr[i]) {\n                    smallest_even_value = arr[i];\n           \
    \         smallest_index = i;\n                }\n            }\n        }\n \
    \       result.Add(smallest_even_value);\n        result.Add(smallest_index);\n\
    \        return result;", "        List<long> result = new List<long>();\n   \
    \     long smallest_value = arr.Min();\n        long smallest_index = 0;\n   \
    \     bool found = false;\n        for (int i = 0; i < arr.Count; i++) {\n   \
    \         if (arr[i] % 2 == 0) {\n                found = true;\n            \
    \    if (arr[i] < smallest_value) {\n                    smallest_value = arr[i];\n\
    \                    smallest_index = i;\n                }\n            }\n \
    \       }\n        if (found) {\n            result.Add(smallest_value);\n   \
    \         result.Add(smallest_index);\n        }\n        return result;", " \
    \       List<long> result = new List<long>();\n        long smallest_value = 0;\n\
    \        long smallest_index = 0;\n        long smallest_even_value = 0;\n   \
    \     bool found = false;\n        foreach (var item in arr) {\n            if\
    \ (item % 2 == 0) {\n                smallest_even_value = item;\n           \
    \     found = true;\n            }\n            if (item < smallest_value) {\n\
    \                smallest_value = item;\n                smallest_index = arr.IndexOf(item);\n\
    \            }\n        }\n        if (found) {\n            result.Add(smallest_even_value);\n\
    \            result.Add(smallest_index);\n        }\n        return result;",
  "        List<long> result = new List<long>();\n        long smallest_value = 0;\n\
    \        int smallest_index = 0;\n        foreach (long n in arr) {\n        \
    \    if (n % 2 == 0) {\n                if (smallest_value < n) {\n          \
    \          smallest_value = n;\n                    smallest_index = arr.IndexOf(n);\n\
    \                }\n            }\n        }\n        if (smallest_index != 0)\
    \ {\n            result.Add(smallest_value);\n            result.Add(smallest_index);\n\
    \        }\n        return result;", "        List<long> result = new List<long>();\n\
    \        long smallestEvenValue = arr.Min();\n        long smallestIndex = arr.IndexOf(smallestEvenValue);\n\
    \        if (smallestIndex == -1) {\n            return result;\n        }\n \
    \       bool isEven = true;\n        long smallestEvenValueIndex = -1;\n     \
    \   for (int i = 0; i < arr.Count; i++) {\n            if (arr[i] != smallestEvenValue)\
    \ {\n                isEven = false;\n                break;\n            }\n\
    \            if (i == smallestIndex) {\n                smallestEvenValueIndex\
    \ = i;\n            }\n        }\n        if (isEven) {\n            result.Add(smallestEvenValue);\n\
    \            result.Add(smallestEvenValueIndex);\n        } else {\n         \
    \   int smallestIndex = arr.IndexOf(smallestEvenValue);\n            if (smallestIndex\
    \ != -1) {\n                result.Add(smallestEvenValue);\n                result.Add(smallestIndex);\n\
    \            }\n        }\n        return result;", "        long smalest_value\
    \ = arr.Min();\n        long smalest_index = 0;\n        List<long> result = new\
    \ List<long>();\n        foreach (long n in arr) {\n            if (n % 2 == 0)\
    \ {\n                if (smalest_value == n) {\n                    smalest_index\
    \ = arr.IndexOf(n);\n                }\n                else if (smalest_value\
    \ < n) {\n                    smalest_value = n;\n                    smalest_index\
    \ = arr.IndexOf(n);\n                }\n            }\n        }\n        if (smalest_index\
    \ != arr.IndexOf(smalest_value)) {\n            smalest_value = arr.Min();\n \
    \           smalest_index = 0;\n        }\n        result.Add(smalest_value);\n\
    \        result.Add(smalest_index);\n        return result;", "        List<long>\
    \ result = new List<long>();\n        long smalest_value = 0;\n        long smalest_index\
    \ = 0;\n        long smalest_even_value = 0;\n        long smalest_even_index\
    \ = 0;\n        long smalest_even_index_count = 0;\n        long smalest_even_index_count_max\
    \ = 0;\n        long smalest_even_index_count_min = 0;\n        long smalest_even_index_count_sum\
    \ = 0;\n        long smalest_even_index_count_sum2 = 0;\n        long smalest_even_index_count_sum3\
    \ = 0;\n        long smalest_even_index_count_sum4 = 0;\n        long smalest_even_index_count_sum5\
    \ = 0;\n        long smalest_even_index_count_sum6 = 0;\n        long smalest_even_index_count_sum7\
    \ = 0;\n        long smalest_even_index_count_sum8 = 0;\n        long smalest_even_index_count_sum9\
    \ = 0;\n        long smalest_even_index_count_sum10 = 0;\n        long smalest_even_index_count_sum11\
    \ = 0;\n        long smalest_even_index_count_sum12 = 0;\n        long smalest_even_index_count_sum13\
    \ = 0;\n        long smalest_even_index_count_sum14 = 0;\n        long smalest_even_index_count_sum15\
    \ = 0;\n        long smalest_even_index_count_sum16 = 0;\n        long smalest_even_index_count_sum17\
    \ = 0;\n        long smalest_even_index_count_sum18 = 0;\n        long smalest_even_index_count_sum19\
    \ = 0;\n        long smalest_even_index_count_sum20 = 0;\n        long smalest_even_index_count_sum21\
    \ = 0;\n        long smalest_even_index_count_sum22 = 0;\n        long smalest_even_index_count_sum23\
    \ = 0;\n        long smalest_even_index_count_sum24 = 0;\n        long smalest_even_index_count_sum25\
    \ = 0;\n        long smalest_even_index_count_sum26 = 0;\n        long smalest_even_index_count_sum27\
    \ = 0;\n        long smalest_even_index_count_sum28 = 0;\n        long smalest_even_index_count_sum29\
    \ = 0;\n        long smalest_even_index_count_sum30 = 0;\n        long smalest_even_index_count_sum31\
    \ = 0;\n        long smalest_even_index_count_sum32 = 0;\n        long smalest_even_index_count_sum33\
    \ = 0;\n        long smalest_even_index_count_sum34 = 0;\n        long smalest_even_index_count_sum35\
    \ = 0;\n        long smalest_even_index_count_sum36 = 0;\n        long smalest_even_index_count_sum37",
  "        long smalest_value = arr.Min();\n        List<long> result = new List<long>();\n\
    \        long smallest_index = 0;\n        long smallest_even_value = 0;\n   \
    \     for (int i = 0; i < arr.Count; i++) {\n            if (arr[i] % 2 == 0)\
    \ {\n                if (arr[i] < smallest_even_value) {\n                   \
    \ smallest_even_value = arr[i];\n                    smallest_index = i;\n   \
    \             }\n            }\n        }\n        if (smallest_even_value !=\
    \ 0) {\n            result.Add(smallest_even_value);\n            result.Add(smallest_index);\n\
    \        }\n        return result;", "        long smalest_value = arr.Min();\n\
    \        List<long> result = new List<long>();\n        long smallest_index =\
    \ 0;\n        bool found = false;\n        foreach (long i in arr) {\n       \
    \     if (i % 2 == 0) {\n                if (i == smalest_value) {\n         \
    \           found = true;\n                }\n                if (found == true)\
    \ {\n                    result.Add(i);\n                    smallest_index =\
    \ i;\n                }\n            }\n        }\n        if (result.Count ==\
    \ 0) {\n            return new List<long>();\n        }\n        if (result.Count\
    \ == 1) {\n            return new List<long> { result[0] };\n        }\n     \
    \   List<long> smallest_values = new List<long>();\n        foreach (long i in\
    \ result) {\n            if (smallest_values.Count < i) {\n                smallest_values.Add(i);\n\
    \            }\n        }\n        if (smallest_values.Count == 1) {\n       \
    \     return new List<long> { smallest_values[0] };\n        }\n        List<long>\
    \ smallest_value_indexes = new List<long>();\n        foreach (long i in smallest_values)\
    \ {\n            smallest_value_indexes.Add(smallest_values.IndexOf(i));\n   \
    \     }\n        smallest_value_indexes.Sort();\n        smallest_value_indexes.Reverse();\n\
    \        smallest_value_indexes.RemoveAt(0);\n        smallest_value_indexes.Sort();\n\
    \        smallest_value_indexes.Reverse();\n        smallest_value_indexes.RemoveAt(0);\n\
    \        smallest_value_indexes.Sort();\n        smallest_value_indexes.Reverse();\n\
    \        smallest_value_indexes.RemoveAt(0);\n        smallest_value_indexes.Sort();\n\
    \        smallest_value_indexes.Reverse();\n        smallest_value_indexes.RemoveAt(0);\n\
    \        smallest_value_indexes.Sort();\n        smallest_value_indexes.Reverse();\n\
    \        smallest_value_indexes.RemoveAt(0);\n        smallest_value_indexes.Sort();\n\
    \        smallest_value_indexes.Reverse();\n        smallest_value_indexes.RemoveAt(0);\n\
    \        smallest_value_indexes.Sort();\n        smallest_value_indexes.Reverse();\n\
    \        smallest_value_indexes.RemoveAt(0);\n        smallest_value_indexes.Sort();\n\
    \        smallest_value_indexes.Reverse();\n        smallest_value_indexes.RemoveAt(0);\n\
    \        smallest_value_indexes.Sort();\n        smallest_value_indexes.Reverse();\n\
    \        smallest_value_indexes.RemoveAt(0);\n        smallest_value_indexes.Sort();\n\
    \        smallest_value_indexes.Reverse();\n        smallest_value_indexes.RemoveAt(0);\n\
    \        smallest_value_indexes.Sort();\n        smallest_value_indexes.Reverse();\n\
    \        smallest_value", "        long smallest_value = 0;\n        long smallest_index\
    \ = 0;\n        long smallest_even_value = 0;\n        List<long> result = new\
    \ List<long>();\n        foreach (long n in arr) {\n            if (n % 2 == 0)\
    \ {\n                if (smallest_value == 0) {\n                    smallest_value\
    \ = n;\n                    smallest_index = arr.IndexOf(n);\n               \
    \     smallest_even_value = n % 2;\n                } else if (smallest_value\
    \ == n) {\n                    smallest_even_value = n % 2;\n                }\
    \ else if (smallest_even_value < n % 2) {\n                    smallest_value\
    \ = n;\n                    smallest_index = arr.IndexOf(n);\n               \
    \     smallest_even_value = n % 2;\n                }\n            }\n       \
    \ }\n        if (smallest_value == 0) {\n            return new List<long>();\n\
    \        }\n        result.Add(smallest_value);\n        result.Add(smallest_index);\n\
    \        return result;", "        List<long> result = new List<long>();\n   \
    \     long smallest_value = arr.Min();\n        long smallest_index = -1;\n  \
    \      long smallest_even_value = smallest_value;\n        bool found = false;\n\
    \        for (int i = 0; i < arr.Count; i++) {\n            if (arr[i] % 2 ==\
    \ 0) {\n                if (smallest_value == smallest_even_value) {\n       \
    \             smallest_index = i;\n                    found = true;\n       \
    \             break;\n                }\n                smallest_even_value =\
    \ arr[i];\n                smallest_index = i;\n            }\n        }\n   \
    \     if (found) {\n            result.Add(smallest_even_value);\n           \
    \ result.Add(smallest_index);\n        }\n        return result;", "        long\
    \ smalest_value = arr.Min();\n        long smalest_index = 0;\n        List<long>\
    \ result = new List<long>();\n        foreach (long n in arr) {\n            if\
    \ (n % 2 == 0) {\n                if (smalest_value < n) {\n                 \
    \   smalest_value = n;\n                    smalest_index = arr.IndexOf(n);\n\
    \                }\n            }\n        }\n        if (smalest_index != 0)\
    \ {\n            result.Add(smalest_value);\n            result.Add(smalest_index);\n\
    \        }\n        return result;", "        List<long> result = new List<long>();\n\
    \        long smallest_value = 0;\n        long smallest_index = 0;\n        long\
    \ smallest_even_value = 0;\n        long smallest_even_count = 0;\n        bool\
    \ found = false;\n        foreach (long n in arr) {\n            if (n % 2 ==\
    \ 0) {\n                smallest_even_value = n;\n                smallest_even_count\
    \ = 1;\n                found = true;\n            }\n            else {\n   \
    \             if (smallest_even_count > 1) {\n                    smallest_value\
    \ = smallest_even_value;\n                    smallest_index = smallest_even_count;\n\
    \                    found = true;\n                }\n                else {\n\
    \                    smallest_even_count++;\n                }\n            }\n\
    \        }\n        if (found) {\n            result.Add(smallest_value);\n  \
    \          result.Add(smallest_index);\n        }\n        return result;", " \
    \       long smalest_value = 0;\n        long smalest_index = 0;\n        List<long>\
    \ result = new List<long>();\n        foreach (long n in arr) {\n            if\
    \ (n % 2 == 0) {\n                if (smalest_value == 0) {\n                \
    \    smalest_value = n;\n                    smalest_index = arr.IndexOf(n);\n\
    \                } else {\n                    if (n < smalest_value) {\n    \
    \                    smalest_value = n;\n                        smalest_index\
    \ = arr.IndexOf(n);\n                    }\n                }\n            }\n\
    \        }\n        if (smalest_value != 0) {\n            result.Add(smalest_value);\n\
    \            result.Add(smalest_index);\n        }\n        return result;", " \
    \       List<long> result = new List<long>();\n        long smallestEvenValue\
    \ = 0;\n        long smallestIndex = 0;\n        bool hasSmallestEvenValue = false;\n\
    \        bool hasSmallestIndex = false;\n        foreach (long node in arr) {\n\
    \            if (node % 2 == 0) {\n                hasSmallestEvenValue = true;\n\
    \                smallestEvenValue = node;\n            }\n            if (node\
    \ < smallestEvenValue) {\n                hasSmallestEvenValue = false;\n    \
    \            smallestEvenValue = node;\n            }\n            if (node ==\
    \ smallestEvenValue) {\n                hasSmallestIndex = true;\n           \
    \     smallestIndex = node;\n            }\n            if (node < smallestIndex)\
    \ {\n                hasSmallestIndex = false;\n                smallestIndex\
    \ = node;\n            }\n        }\n        if (hasSmallestEvenValue) {\n   \
    \         result.Add(smallestEvenValue);\n            result.Add(smallestIndex);\n\
    \        }\n        if (hasSmallestIndex) {\n            result.Add(smallestIndex);\n\
    \        }\n        if (result.Count == 0) {\n            return new List<long>();\n\
    \        }\n        return result;", "        List<long> result = new List<long>();\n\
    \        long smallest_value = 0;\n        long smallest_index = 0;\n        bool\
    \ found = false;\n        foreach (var node in arr) {\n            if (found ==\
    \ true) {\n                if (node % 2 == 0) {\n                    result.Add(smallest_value);\n\
    \                    result.Add(smallest_index);\n                    found =\
    \ false;\n                }\n                else {\n                    smallest_value\
    \ = node;\n                    smallest_index++;\n                }\n        \
    \    }\n            else {\n                if (node % 2 == 0) {\n           \
    \         smallest_value = node;\n                    smallest_index++;\n    \
    \                found = true;\n                }\n            }\n        }\n\
    \        if (found == true) {\n            result.Add(smallest_value);\n     \
    \       result.Add(smallest_index);\n        }\n        return result;", "   \
    \     long smalest_value = arr.Min();\n        long smalest_index = 0;\n     \
    \   List<long> result = new List<long>();\n        foreach (long i in arr) {\n\
    \            if (i % 2 == 0) {\n                if (smalest_value == i) {\n  \
    \                  smalest_index = i;\n                }\n                else\
    \ if (smalest_value < i) {\n                    smalest_value = i;\n         \
    \           smalest_index = i;\n                }\n            }\n        }\n\
    \        if (smalest_index != 0) {\n            result.Add(smalest_value);\n \
    \           result.Add(smalest_index);\n        }\n        return result;", " \
    \       List<long> result = new List<long>();\n        long smalest_value = 0;\n\
    \        int smalest_index = 0;\n        long smalest_value_found = 0;\n     \
    \   int smalest_index_found = 0;\n        long smalest_value_found_index = 0;\n\
    \        foreach (long n in arr) {\n            if (n % 2 == 0) {\n          \
    \      if (smalest_value == 0) {\n                    smalest_value = n;\n   \
    \                 smalest_index = arr.IndexOf(n);\n                    smalest_value_found\
    \ = n;\n                    smalest_index_found = arr.IndexOf(n);\n          \
    \      }\n                else if (smalest_value == n) {\n                   \
    \ smalest_value_found = n;\n                    smalest_index_found = arr.IndexOf(n);\n\
    \                }\n                else {\n                    if (smalest_value_found\
    \ < n) {\n                        smalest_value_found = n;\n                 \
    \       smalest_index_found = arr.IndexOf(n);\n                    }\n       \
    \         }\n            }\n            else {\n                if (smalest_value_found\
    \ == 0) {\n                    smalest_value_found = n;\n                    smalest_index_found\
    \ = arr.IndexOf(n);\n                }\n                else if (smalest_value_found\
    \ < n) {\n                    smalest_value_found = n;\n                    smalest_index_found\
    \ = arr.IndexOf(n);\n                }\n            }\n        }\n        if (smalest_value_found\
    \ == 0) {\n            result.Add(0);\n        }\n        else if (smalest_value_found\
    \ == smalest_value) {\n            result.Add(smalest_value_found);\n        \
    \    result.Add(smalest_index_found);\n        }\n        else {\n           \
    \ result.Add(smalest_value_found);\n            result.Add(smalest_index_found);\n\
    \        }\n        return result;", "        long smallest_value = arr.Min();\n\
    \        long smallest_index = -1;\n        List<long> result = new List<long>();\n\
    \        foreach (long n in arr) {\n            if (n % 2 == 0) {\n          \
    \      if (smallest_value == 0 || n < smallest_value) {\n                    smallest_value\
    \ = n;\n                    smallest_index = arr.IndexOf(n);\n               \
    \ }\n            }\n        }\n        if (smallest_index != -1) {\n         \
    \   result.Add(smallest_value);\n            result.Add(smallest_index);\n   \
    \     }\n        return result;", "        List<long> result = new List<long>();\n\
    \        long smallest_value = arr.Min();\n        long smallest_index = 0;\n\
    \        bool found = false;\n        for (int i = 0; i < arr.Count; i++) {\n\
    \            if (arr[i] == smallest_value) {\n                found = true;\n\
    \                break;\n            }\n        }\n        if (found) {\n    \
    \        result.Add(smallest_value);\n            result.Add(smallest_index);\n\
    \            return result;\n        }\n        long smallest_even_value = arr.Min(x\
    \ => x % 2 == 0);\n        long smallest_even_index = 0;\n        found = false;\n\
    \        for (int i = 0; i < arr.Count; i++) {\n            if (arr[i] == smallest_even_value)\
    \ {\n                found = true;\n                break;\n            }\n  \
    \      }\n        if (found) {\n            result.Add(smallest_even_value);\n\
    \            result.Add(smallest_even_index);\n            return result;\n  \
    \      }\n        long smallest_odd_value = arr.Min(x => x % 2 != 0);\n      \
    \  long smallest_odd_index = 0;\n        found = false;\n        for (int i =\
    \ 0; i < arr.Count; i++) {\n            if (arr[i] == smallest_odd_value) {\n\
    \                found = true;\n                break;\n            }\n      \
    \  }\n        if (found) {\n            result.Add(smallest_odd_value);\n    \
    \        result.Add(smallest_odd_index);\n            return result;\n       \
    \ }\n        return result;", "        long smalest_value = arr.Min();\n     \
    \   long smalest_index = 0;\n        List<long> result = new List<long>();\n \
    \       foreach (long n in arr) {\n            if (n % 2 == 0) {\n           \
    \     if (smalest_value < n) {\n                    smalest_value = n;\n     \
    \               smalest_index = arr.IndexOf(n);\n                }\n         \
    \   }\n        }\n        if (smalest_index > 0) {\n            result.Add(smalest_value);\n\
    \            result.Add(smalest_index);\n        }\n        return result;", " \
    \       List<long> result = new List<long>();\n        long smallest_even_value\
    \ = arr.Min();\n        long smallest_index = arr.IndexOf(smallest_even_value);\n\
    \        long smallest_value = smallest_even_value;\n        long smallest_index_value\
    \ = smallest_index;\n        foreach (long i in arr) {\n            if (i % 2\
    \ == 0) {\n                if (smallest_value == smallest_even_value) {\n    \
    \                smallest_value = i;\n                    smallest_index_value\
    \ = arr.IndexOf(i);\n                }\n            }\n        }\n        result.Add(smallest_value);\n\
    \        result.Add(smallest_index_value);\n        return result;", "       \
    \ List<long> result = new List<long>();\n        long smallestEvenValue = arr.Min();\n\
    \        long smallestIndex = 0;\n        bool isSmallestEvenValue = true;\n \
    \       foreach (long n in arr) {\n            if (n % 2 == 0) {\n           \
    \     if (smallestEvenValue < n) {\n                    smallestEvenValue = n;\n\
    \                    smallestIndex = arr.IndexOf(n);\n                    isSmallestEvenValue\
    \ = true;\n                }\n                else {\n                    isSmallestEvenValue\
    \ = false;\n                }\n            }\n            else {\n           \
    \     if (smallestEvenValue == n) {\n                    smallestIndex = arr.IndexOf(n);\n\
    \                }\n            }\n        }\n        if (isSmallestEvenValue)\
    \ {\n            result.Add(smallestEvenValue);\n            result.Add(smallestIndex);\n\
    \        }\n        return result;", "        List<long> result = new List<long>();\n\
    \        long smallest_value = arr.Min();\n        long smallest_index = 0;\n\
    \        long smallest_even_value = 0;\n        foreach (long i in arr) {\n  \
    \          if (i % 2 == 0) {\n                if (smallest_even_value < i) {\n\
    \                    smallest_even_value = i;\n                    smallest_index\
    \ = i;\n                }\n            }\n            if (i == smallest_value)\
    \ {\n                result.Add(smallest_value);\n                result.Add(smallest_index);\n\
    \            }\n        }\n        if (result.Count == 0) {\n            return\
    \ new List<long>();\n        }\n        if (result.Count > 1) {\n            int\
    \ smallest_index = result.Min();\n            int smallest_value = result[smallest_index];\n\
    \            int smallest_even_value = result[smallest_index / 2];\n         \
    \   int smallest_odd_value = result[smallest_index / 2 + 1];\n            int\
    \ smallest_odd_index = smallest_index / 2 + 1;\n            while (smallest_odd_value\
    \ < smallest_value) {\n                smallest_odd_value = result[smallest_odd_index];\n\
    \                smallest_odd_index = smallest_odd_index + 1;\n            }\n\
    \            while (smallest_odd_value < smallest_even_value) {\n            \
    \    smallest_odd_value = result[smallest_odd_index];\n                smallest_odd_index\
    \ = smallest_odd_index + 1;\n            }\n            while (smallest_odd_value\
    \ < smallest_odd_value) {\n                smallest_odd_value = result[smallest_odd_index];\n\
    \                smallest_odd_index = smallest_odd_index + 1;\n            }\n\
    \            while (smallest_odd_value < smallest_odd_value) {\n             \
    \   smallest_odd_value = result[smallest_odd_index];\n                smallest_odd_index\
    \ = smallest_odd_index + 1;\n            }\n            while (smallest_odd_value\
    \ < smallest_odd_value) {\n                smallest_odd_value = result[smallest_odd_index];\n\
    \                smallest_odd_index = smallest_odd_index + 1;\n            }\n\
    \            while (smallest_odd_value < smallest_odd_value) {\n             \
    \   smallest_odd_value = result[smallest_odd_index];\n                smallest_odd_index\
    \ = smallest_odd_index + 1;\n            }\n            while (smallest_odd_value\
    \ < smallest_odd_value) {\n                smallest_odd_value = result[smallest_odd_index];\n\
    \                smallest_odd_index = smallest_odd_index + 1;\n            }\n\
    \            while (smallest_odd_value < smallest_odd_value) {\n             \
    \   smallest_odd_value = result[smallest_odd_index];\n                smallest_odd_index\
    \ = smallest_odd_index + 1;\n            }\n            ", "        long smalest_value\
    \ = 0;\n        int smalest_index = 0;\n        List<long> result = new List<long>();\n\
    \        foreach (long n in arr) {\n            if (n % 2 == 0) {\n          \
    \      if (smalest_value == 0) {\n                    smalest_value = n;\n   \
    \                 smalest_index = arr.IndexOf(n);\n                } else {\n\
    \                    if (n < smalest_value) {\n                        smalest_value\
    \ = n;\n                        smalest_index = arr.IndexOf(n);\n            \
    \        }\n                }\n            }\n        }\n        if (smalest_value\
    \ == 0) {\n            return new List<long>();\n        }\n        result.Add(smalest_value);\n\
    \        result.Add(smalest_index);\n        return result;", "        List<long>\
    \ result = new List<long>();\n        long smalest_value = 0;\n        long smalest_index\
    \ = 0;\n        bool has_even_value = false;\n        long smallest_even_value\
    \ = 0;\n        long smallest_even_index = 0;\n        foreach (long n in arr)\
    \ {\n            if (n % 2 == 0) {\n                has_even_value = true;\n \
    \               smallest_even_value = n;\n                smallest_even_index\
    \ = n;\n            }\n            else {\n                if (has_even_value)\
    \ {\n                    if (smallest_even_value < n) {\n                    \
    \    smallest_even_value = n;\n                        smallest_even_index = n;\n\
    \                    }\n                }\n                else {\n          \
    \          smalest_value = n;\n                    smalest_index = n;\n      \
    \          }\n            }\n        }\n        if (has_even_value) {\n      \
    \      result.Add(smallest_even_value);\n            result.Add(smallest_even_index);\n\
    \        }\n        else {\n            result.Add(smalest_value);\n         \
    \   result.Add(smalest_index);\n        }\n        return result;", "        long\
    \ smalest_value = arr.Min();\n        long smalest_index = 0;\n        List<long>\
    \ result = new List<long>();\n        foreach (long n in arr) {\n            if\
    \ (n % 2 == 0) {\n                if (smalest_value == n) {\n                \
    \    smalest_index = arr.IndexOf(n);\n                }\n                else\
    \ {\n                    if (smalest_value < n) {\n                        smalest_value\
    \ = n;\n                        smalest_index = arr.IndexOf(n);\n            \
    \        }\n                }\n            }\n        }\n        if (smalest_index\
    \ > 0) {\n            result.Add(smalest_value);\n            result.Add(smalest_index);\n\
    \        }\n        return result;", "        long smalest_value = arr.Min();\n\
    \        long smalest_index = 0;\n        List<long> result = new List<long>();\n\
    \        foreach (long n in arr) {\n            if (n % 2 == 0) {\n          \
    \      if (smalest_value < n) {\n                    smalest_value = n;\n    \
    \                smalest_index = arr.IndexOf(n);\n                }\n        \
    \    }\n        }\n        if (smalest_value == 0) {\n            return new List<long>();\n\
    \        }\n        result.Add(smalest_value);\n        result.Add(smalest_index);\n\
    \        return result;", "        List<long> result = new List<long>();\n   \
    \     long smallest_value = arr.Min();\n        long smallest_index = 0;\n   \
    \     long smallest_even_value = 0;\n        bool found = false;\n        for\
    \ (int i = 0; i < arr.Count; i++) {\n            if (arr[i] % 2 == 0) {\n    \
    \            found = true;\n                if (arr[i] < smallest_value) {\n \
    \                   smallest_value = arr[i];\n                    smallest_index\
    \ = i;\n                    smallest_even_value = arr[i] / 2;\n              \
    \  }\n            }\n        }\n        if (found) {\n            result.Add(smallest_value);\n\
    \            result.Add(smallest_index);\n        } else {\n            result.Add(smallest_even_value);\n\
    \        }\n        return result;", "        long smallest_value = arr.Min();\n\
    \        long smallest_index = -1;\n        List<long> result = new List<long>();\n\
    \        foreach (long node in arr) {\n            if (node % 2 == 0) {\n    \
    \            if (smallest_value == 0 || node < smallest_value) {\n           \
    \         smallest_value = node;\n                    smallest_index = arr.IndexOf(node);\n\
    \                }\n            }\n        }\n        if (smallest_index != -1)\
    \ {\n            result.Add(smallest_value);\n            result.Add(smallest_index);\n\
    \        }\n        return result;", "        List<long> result = new List<long>();\n\
    \        long smallestEvenValue = arr.Min();\n        long smallestIndex = 0;\n\
    \        bool foundSmallestEvenValue = false;\n        for (int i = 0; i < arr.Count;\
    \ i++) {\n            if (arr[i] % 2 == 0) {\n                if (smallestEvenValue\
    \ < arr[i]) {\n                    smallestEvenValue = arr[i];\n             \
    \       smallestIndex = i;\n                    foundSmallestEvenValue = true;\n\
    \                }\n            }\n        }\n        if (foundSmallestEvenValue)\
    \ {\n            result.Add(smallestEvenValue);\n            result.Add(smallestIndex);\n\
    \        }\n        return result;", "        List<long> result = new List<long>();\n\
    \        long smalest_value = 0;\n        int smalest_index = 0;\n        bool\
    \ has_even_value = false;\n        foreach (long n in arr) {\n            if (n\
    \ % 2 == 0) {\n                has_even_value = true;\n            }\n       \
    \     if (has_even_value) {\n                smalest_value = n;\n            \
    \    smalest_index = arr.IndexOf(n);\n            }\n        }\n        if (smalest_index\
    \ == -1) {\n            return new List<long>();\n        }\n        if (has_even_value)\
    \ {\n            result.Add(smalest_value);\n            result.Add(smalest_index);\n\
    \        } else {\n            result.Add(smalest_index);\n        }\n       \
    \ return result;", "        long smalest_value = arr.Min();\n        long smalest_index\
    \ = 0;\n        List<long> result = new List<long>();\n        foreach (long n\
    \ in arr) {\n            if (n % 2 == 0) {\n                if (smalest_value\
    \ < n) {\n                    smalest_value = n;\n                    smalest_index\
    \ = arr.IndexOf(n);\n                }\n            }\n        }\n        if (smalest_index\
    \ > 0) {\n            result.Add(smalest_value);\n            result.Add(smalest_index);\n\
    \        }\n        return result;", "        long smalest_value = arr.Min();\n\
    \        long smalest_index = 0;\n        List<long> result = new List<long>();\n\
    \        foreach (long n in arr) {\n            if (n % 2 == 0) {\n          \
    \      if (smalest_value < n) {\n                    smalest_value = n;\n    \
    \                smalest_index = arr.IndexOf(n);\n                }\n        \
    \    }\n        }\n        if (smalest_index != arr.IndexOf(smalest_value)) {\n\
    \            result.Add(smalest_value);\n            result.Add(smalest_index);\n\
    \        }\n        return result;", "        List<long> result = new List<long>();\n\
    \        long smalest_value = arr.Min();\n        int smalest_index = 0;\n   \
    \     foreach (long n in arr) {\n            if (n % 2 == 0) {\n             \
    \   if (smalest_value < n) {\n                    smalest_value = n;\n       \
    \             smalest_index = arr.IndexOf(n);\n                }\n           \
    \ }\n        }\n        if (smalest_index > 0) {\n            result.Add(smalest_value);\n\
    \            result.Add(smalest_index);\n        }\n        return result;", " \
    \       List<long> result = new List<long>();\n        long smallestEvenValue\
    \ = arr.Min();\n        long smallestIndex = 0;\n        bool isSmallestEvenValueFound\
    \ = false;\n        bool isSmallestIndexFound = false;\n        long smallestEvenValueIndex\
    \ = 0;\n        long smallestIndexIndex = 0;\n        foreach (long n in arr)\
    \ {\n            if (n % 2 == 0) {\n                if (smallestEvenValue < n)\
    \ {\n                    smallestEvenValue = n;\n                    smallestEvenValueIndex\
    \ = n;\n                    isSmallestEvenValueFound = true;\n               \
    \ }\n                if (smallestIndex < n) {\n                    smallestIndex\
    \ = n;\n                    smallestIndexIndex = n;\n                    isSmallestIndexFound\
    \ = true;\n                }\n            } else {\n                if (smallestEvenValue\
    \ < n) {\n                    smallestEvenValue = n;\n                    smallestEvenValueIndex\
    \ = n;\n                    isSmallestEvenValueFound = true;\n               \
    \ }\n                if (smallestIndex < n) {\n                    smallestIndex\
    \ = n;\n                    smallestIndexIndex = n;\n                    isSmallestIndexFound\
    \ = true;\n                }\n            }\n        }\n        if (isSmallestEvenValueFound)\
    \ {\n            result.Add(smallestEvenValue);\n            result.Add(smallestEvenValueIndex);\n\
    \        }\n        if (isSmallestIndexFound) {\n            result.Add(smallestIndex);\n\
    \            result.Add(smallestIndexIndex);\n        }\n        return result;",
  "        List<long> result = new List<long>();\n        long smallest_value = arr.Min();\n\
    \        long smallest_index = 0;\n        long smallest_even_value = 0;\n   \
    \     bool found = false;\n        for (int i = 0; i < arr.Count; i++) {\n   \
    \         if (arr[i] % 2 == 0) {\n                if (smallest_value == 0) {\n\
    \                    smallest_value = arr[i];\n                    smallest_index\
    \ = i;\n                    smallest_even_value = arr[i] / 2;\n              \
    \      found = true;\n                } else if (smallest_value == arr[i]) {\n\
    \                    smallest_index = i;\n                    smallest_even_value\
    \ = arr[i] / 2;\n                    found = true;\n                } else if\
    \ (smallest_value == arr[i] && smallest_index != i) {\n                    smallest_index\
    \ = i;\n                    smallest_even_value = arr[i] / 2;\n              \
    \      found = true;\n                }\n            }\n        }\n        if\
    \ (smallest_value == 0) {\n            return new List<long>();\n        }\n \
    \       if (found) {\n            result.Add(smallest_value);\n            result.Add(smallest_index);\n\
    \            result.Add(smallest_even_value);\n        }\n        return result;",
  "        List<long> result = new List<long>();\n        long smallestEvenValue =\
    \ 0;\n        long smallestIndex = 0;\n        long currentIndex = 0;\n      \
    \  foreach (long i in arr) {\n            if (i % 2 == 0) {\n                if\
    \ (smallestEvenValue < i) {\n                    smallestEvenValue = i;\n    \
    \                smallestIndex = currentIndex;\n                }\n          \
    \      currentIndex++;\n            }\n        }\n        if (smallestEvenValue\
    \ == 0) {\n            return result;\n        }\n        result.Add(smallestEvenValue);\n\
    \        result.Add(smallestIndex);\n        return result;", "        List<long>\
    \ result = new List<long>();\n        long smallestEvenValue = arr.Min();\n  \
    \      long smallestIndex = arr.IndexOf(smallestEvenValue);\n        bool hasEvenValues\
    \ = arr.Any(x => x % 2 == 0);\n        if (smallestEvenValue == 0) {\n       \
    \     if (hasEvenValues) {\n                result.Add(smallestEvenValue);\n \
    \               result.Add(smallestIndex);\n            }\n            return\
    \ result;\n        }\n        List<long> evenValues = new List<long>();\n    \
    \    List<long> evenIndexes = new List<long>();\n        foreach (long value in\
    \ arr) {\n            if (value % 2 == 0) {\n                evenValues.Add(value);\n\
    \                evenIndexes.Add(arr.IndexOf(value));\n            }\n       \
    \ }\n        if (evenValues.Count > 0) {\n            smallestEvenValue = evenValues.Min();\n\
    \            smallestIndex = evenIndexes.Min();\n        }\n        if (smallestEvenValue\
    \ == 0) {\n            if (hasEvenValues) {\n                result.Add(smallestEvenValue);\n\
    \                result.Add(smallestIndex);\n            }\n            return\
    \ result;\n        }\n        List<long> evenValues2 = new List<long>();\n   \
    \     List<long> evenIndexes2 = new List<long>();\n        foreach (long value\
    \ in arr) {\n            if (value % 2 == 0) {\n                evenValues2.Add(value);\n\
    \                evenIndexes2.Add(arr.IndexOf(value));\n            }\n      \
    \  }\n        if (evenValues2.Count > 0) {\n            smallestEvenValue = evenValues2.Min();\n\
    \            smallestIndex = evenIndexes2.Min();\n        }\n        if (smallestEvenValue\
    \ == 0) {\n            if (hasEvenValues) {\n                result.Add(smallestEvenValue);\n\
    \                result.Add(smallestIndex);\n            }\n            return\
    \ result;\n        }\n        List<long> evenValues3 = new List<long>();\n   \
    \     List<long> evenIndexes3 = new List<long>();\n        foreach (long value\
    \ in arr) {\n            if (value % 2 == 0) {\n                evenValues3.Add(value);\n\
    \                evenIndexes3.Add(arr.IndexOf(value));\n            }\n      \
    \  }\n        if (evenValues3.Count > 0) {\n            smallestEvenValue = evenValues3.Min();\n\
    \            smallestIndex = evenIndexes3.Min();\n        }\n        if (smallestEvenValue\
    \ == 0) {\n            if (hasEvenValues) {\n                result.Add(smallestEvenValue);\n\
    \                result.Add(smallestIndex);\n            }\n            return\
    \ result;\n        }\n        List<long> evenValues4 = new List<long>();\n   \
    \     List<long> evenIndexes4 = new List<long>();\n        foreach (long value\
    \ in arr) {\n            if (value % 2 == 0) {\n                evenValues4.Add(value);\n\
    \                even", "        long smalest_value = arr.Min();\n        long\
    \ smalest_index = 0;\n        List<long> result = new List<long>();\n        foreach\
    \ (long n in arr) {\n            if (n % 2 == 0) {\n                if (smalest_value\
    \ == n) {\n                    smalest_index = arr.IndexOf(n);\n             \
    \   }\n                else {\n                    smalest_value = n;\n      \
    \              smalest_index = arr.IndexOf(n);\n                }\n          \
    \  }\n        }\n        if (smalest_index != arr.IndexOf(smalest_value)) {\n\
    \            result.Add(smalest_value);\n            result.Add(smalest_index);\n\
    \        }\n        return result;", "        long smalest_value = 0;\n      \
    \  long smalest_index = 0;\n        List<long> result = new List<long>();\n  \
    \      foreach (long n in arr) {\n            if (n % 2 == 0) {\n            \
    \    if (smalest_value < n) {\n                    smalest_value = n;\n      \
    \              smalest_index = arr.IndexOf(n);\n                }\n          \
    \  }\n        }\n        if (smalest_value == 0) {\n            return new List<long>();\n\
    \        }\n        result.Add(smalest_value);\n        result.Add(smalest_index);\n\
    \        return result;", "        List<long> result = new List<long>();\n   \
    \     long smallestEvenValue = arr.Min();\n        long smallestIndex = arr.IndexOf(smallestEvenValue);\n\
    \        if (smallestEvenValue % 2 == 0) {\n            result.Add(smallestEvenValue);\n\
    \            result.Add(smallestIndex);\n            return result;\n        }\n\
    \        long smallestEvenValue2 = arr.Min(x => x % 2 == 0);\n        long smallestIndex2\
    \ = arr.IndexOf(smallestEvenValue2);\n        if (smallestEvenValue2 % 2 == 0)\
    \ {\n            result.Add(smallestEvenValue2);\n            result.Add(smallestIndex2);\n\
    \            return result;\n        }\n        long smallestEvenValue3 = arr.Min(x\
    \ => x % 2 == 0);\n        long smallestIndex3 = arr.IndexOf(smallestEvenValue3);\n\
    \        if (smallestEvenValue3 % 2 == 0) {\n            result.Add(smallestEvenValue3);\n\
    \            result.Add(smallestIndex3);\n            return result;\n       \
    \ }\n        long smallestEvenValue4 = arr.Min(x => x % 2 == 0);\n        long\
    \ smallestIndex4 = arr.IndexOf(smallestEvenValue4);\n        if (smallestEvenValue4\
    \ % 2 == 0) {\n            result.Add(smallestEvenValue4);\n            result.Add(smallestIndex4);\n\
    \            return result;\n        }\n        long smallestEvenValue5 = arr.Min(x\
    \ => x % 2 == 0);\n        long smallestIndex5 = arr.IndexOf(smallestEvenValue5);\n\
    \        if (smallestEvenValue5 % 2 == 0) {\n            result.Add(smallestEvenValue5);\n\
    \            result.Add(smallestIndex5);\n            return result;\n       \
    \ }\n        long smallestEvenValue6 = arr.Min(x => x % 2 == 0);\n        long\
    \ smallestIndex6 = arr.IndexOf(smallestEvenValue6);\n        if (smallestEvenValue6\
    \ % 2 == 0) {\n            result.Add(smallestEvenValue6);\n            result.Add(smallestIndex6);\n\
    \            return result;\n        }\n        long smallestEvenValue7 = arr.Min(x\
    \ => x % 2 == 0);\n        long smallestIndex7 = arr.IndexOf(smallestEvenValue7);\n\
    \        if (smallestEvenValue7 % 2 == 0) {\n            result.Add(smallestEvenValue7);\n\
    \            result.Add(smallestIndex7);\n            return result;\n       \
    \ }\n        long smallestEvenValue8 = arr.Min(x => x % 2 == 0);\n        long\
    \ smallestIndex8 = arr.IndexOf(smallestEvenValue8);\n        if (smallestEvenValue8\
    \ % 2 == 0) {\n            result.Add(smallestEvenValue8);\n            result.Add(smallestIndex8);\n\
    \            return result;\n        }\n        long smallestEvenValue9 = arr.Min(x\
    \ => x % 2 == 0);\n        ", "        long smalest_value = arr.Min();\n     \
    \   long smalest_index = 0;\n        List<long> result = new List<long>();\n \
    \       foreach (long n in arr) {\n            if (n % 2 == 0) {\n           \
    \     if (smalest_value < n) {\n                    smalest_value = n;\n     \
    \               smalest_index = arr.IndexOf(n);\n                }\n         \
    \   }\n        }\n        if (smalest_index != arr.IndexOf(smalest_value)) {\n\
    \            smalest_index = arr.IndexOf(smalest_value);\n        }\n        result.Add(smalest_value);\n\
    \        result.Add(smalest_index);\n        return result;", "        long smalest_value\
    \ = 0;\n        long smalest_index = 0;\n        List<long> result = new List<long>();\n\
    \        foreach (long n in arr) {\n            if (n % 2 == 0) {\n          \
    \      if (smalest_value == 0) {\n                    smalest_value = n;\n   \
    \                 smalest_index = arr.IndexOf(n);\n                } else {\n\
    \                    if (n < smalest_value) {\n                        smalest_value\
    \ = n;\n                        smalest_index = arr.IndexOf(n);\n            \
    \        }\n                }\n            }\n        }\n        if (smalest_value\
    \ == 0) {\n            return new List<long>();\n        }\n        result.Add(smalest_value);\n\
    \        result.Add(smalest_index);\n        return result;", "        List<long>\
    \ result = new List<long>();\n        long smallest_value = arr.Min();\n     \
    \   long smallest_index = -1;\n        bool found = false;\n        foreach (long\
    \ n in arr) {\n            if (n % 2 == 0) {\n                if (smallest_value\
    \ < n) {\n                    smallest_value = n;\n                    smallest_index\
    \ = arr.IndexOf(n);\n                    found = true;\n                }\n  \
    \          }\n        }\n        if (found) {\n            result.Add(smallest_value);\n\
    \            result.Add(smallest_index);\n        }\n        return result;",
  "        List<long> result = new List<long>();\n        long smallestEven = arr.Min();\n\
    \        long smallestIndex = arr.IndexOf(smallestEven);\n        if (smallestIndex\
    \ == -1) {\n            return result;\n        }\n        long smallestValue\
    \ = arr[smallestIndex];\n        long smallestEvenValue = arr[smallestIndex];\n\
    \        foreach (long i in arr) {\n            if (i % 2 == 0) {\n          \
    \      if (smallestEvenValue > i) {\n                    smallestEvenValue = i;\n\
    \                    smallestIndex = arr.IndexOf(i);\n                }\n    \
    \        }\n        }\n        result.Add(smallestEvenValue);\n        result.Add(smallestIndex);\n\
    \        return result;", "        long smalest_value = arr.Min();\n        long\
    \ smalest_index = 0;\n        List<long> result = new List<long>();\n        foreach\
    \ (var item in arr) {\n            if (item % 2 == 0) {\n                if (item\
    \ < smalest_value) {\n                    smalest_value = item;\n            \
    \        smalest_index = arr.IndexOf(item);\n                }\n            }\n\
    \        }\n        if (smalest_index > 0) {\n            result.Add(smalest_value);\n\
    \            result.Add(smalest_index);\n        }\n        return result;", " \
    \       long smalest_value = 0;\n        long smalest_index = 0;\n        List<long>\
    \ result = new List<long>();\n        foreach (var node in arr) {\n          \
    \  if (node % 2 == 0) {\n                if (smalest_value == 0) {\n         \
    \           smalest_value = node;\n                    smalest_index = arr.IndexOf(node);\n\
    \                } else {\n                    long temp_val = node;\n       \
    \             if (temp_val < smalest_value) {\n                        smalest_value\
    \ = temp_val;\n                        smalest_index = arr.IndexOf(temp_val);\n\
    \                    }\n                }\n            }\n        }\n        if\
    \ (smalest_value == 0) {\n            return new List<long>();\n        }\n  \
    \      result.Add(smalest_value);\n        result.Add(smalest_index);\n      \
    \  return result;", "        List<long> result = new List<long>();\n        if\
    \ (arr.Count == 0) {\n            return result;\n        }\n        long smallestEvenValue\
    \ = arr.Min();\n        long smallestIndex = 0;\n        bool isSmallestEvenValue\
    \ = true;\n        for (int i = 0; i < arr.Count; i++) {\n            if (arr[i]\
    \ < smallestEvenValue) {\n                isSmallestEvenValue = false;\n     \
    \           smallestEvenValue = arr[i];\n                smallestIndex = i;\n\
    \            }\n        }\n        if (isSmallestEvenValue) {\n            result.Add(smallestEvenValue);\n\
    \            result.Add(smallestIndex);\n        }\n        return result;", " \
    \       List<long> result = new List<long>();\n        long smallestEvenValue\
    \ = arr.Min();\n        long smallestIndex = arr.IndexOf(smallestEvenValue);\n\
    \        long smallestValue = smallestEvenValue;\n        long smallestIndexValue\
    \ = smallestIndex;\n        bool isSmallestEvenValueFound = false;\n        bool\
    \ isSmallestIndexFound = false;\n        bool isSmallestValueFound = false;\n\
    \        bool isSmallestIndexValueFound = false;\n        bool isSmallestEvenValueValueFound\
    \ = false;\n        bool isSmallestIndexValueValueFound = false;\n        bool\
    \ isSmallestEvenValueIndexFound = false;\n        bool isSmallestIndexValueIndexFound\
    \ = false;\n        bool isSmallestEvenValueValueIndexFound = false;\n       \
    \ bool isSmallestIndexValueValueIndexFound = false;\n        bool isSmallestEvenValueIndexFound\
    \ = false;\n        bool isSmallestIndexValueIndexFound = false;\n        bool\
    \ isSmallestEvenValueValueIndexFound = false;\n        bool isSmallestIndexValueValueIndexFound\
    \ = false;\n        bool isSmallestEvenValueIndexFound = false;\n        bool\
    \ isSmallestIndexValueIndexFound = false;\n        bool isSmallestEvenValueValueIndexFound\
    \ = false;\n        bool isSmallestIndexValueValueIndexFound = false;\n      \
    \  bool isSmallestEvenValueIndexFound = false;\n        bool isSmallestIndexValueIndexFound\
    \ = false;\n        bool isSmallestEvenValueValueIndexFound = false;\n       \
    \ bool isSmallestIndexValueValueIndexFound = false;\n        bool isSmallestEvenValueIndexFound\
    \ = false;\n        bool isSmallestIndexValueIndexFound = false;\n        bool\
    \ isSmallestEvenValueValueIndexFound = false;\n        bool isSmallestIndexValueValueIndexFound\
    \ = false;\n        bool isSmallestEvenValueIndexFound = false;\n        bool\
    \ isSmallestIndexValueIndexFound = false;\n        bool isSmallestEvenValueValueIndexFound\
    \ = false;\n        bool isSmallestIndexValueValueIndexFound = false;\n      \
    \  bool isSmallestEvenValueIndexFound = false;\n        bool isSmallestIndexValueIndexFound\
    \ = false;\n        bool isSmallestEvenValueValueIndexFound = false;\n       \
    \ bool isSmallestIndexValueValueIndexFound = false;\n        bool isSmallestEvenValueIndexFound\
    \ = false;\n        bool isSmallestIndexValueIndexFound = false;\n        bool\
    \ isSmallestEvenValueValueIndexFound = false;\n        bool isSmallest", "   \
    \     long smalest_value = arr.Min();\n        List<long> result = new List<long>();\n\
    \        long smallest_index = arr.FindIndex(x => x == smalest_value);\n     \
    \   if (smallest_index == -1)\n            return result;\n        long smallest_value\
    \ = arr[smallest_index];\n        long smallest_even_value = smallest_value %\
    \ 2 == 0 ? smallest_value : smallest_value - 1;\n        bool found = false;\n\
    \        for (int i = 0; i < arr.Count; i++) {\n            if (arr[i] == smallest_even_value)\
    \ {\n                found = true;\n                result.Add(smallest_value);\n\
    \                result.Add(smallest_index);\n                break;\n       \
    \     }\n        }\n        if (!found)\n            return result;\n        return\
    \ result;", "        List<long> result = new List<long>();\n        long smallest_value\
    \ = 0;\n        long smallest_index = 0;\n        bool found = false;\n      \
    \  foreach (long n in arr) {\n            if (n % 2 == 0) {\n                found\
    \ = true;\n                if (smallest_value == 0) {\n                    smallest_value\
    \ = n;\n                    smallest_index = arr.IndexOf(n);\n               \
    \ }\n                else if (smallest_value < n) {\n                    smallest_value\
    \ = n;\n                    smallest_index = arr.IndexOf(n);\n               \
    \ }\n            }\n        }\n        if (found) {\n            result.Add(smallest_value);\n\
    \            result.Add(smallest_index);\n        }\n        return result;",
  "        List<long> result = new List<long>();\n        long smallest_value = arr.Min();\n\
    \        long smallest_index = 0;\n        bool found = false;\n        for (int\
    \ i = 0; i < arr.Count; i++) {\n            if (arr[i] < smallest_value) {\n \
    \               smallest_value = arr[i];\n                smallest_index = i;\n\
    \                found = true;\n            }\n        }\n        if (found) {\n\
    \            result.Add(smallest_value);\n            result.Add(smallest_index);\n\
    \        }\n        return result;", "        List<long> result = new List<long>();\n\
    \        long smallest_value = arr.Min();\n        long smallest_index = 0;\n\
    \        bool found = false;\n        for (int i = 0; i < arr.Count; i++) {\n\
    \            if (arr[i] % 2 == 0) {\n                found = true;\n         \
    \       if (arr[i] < smallest_value) {\n                    smallest_value = arr[i];\n\
    \                    smallest_index = i;\n                }\n            }\n \
    \       }\n        if (found) {\n            result.Add(smallest_value);\n   \
    \         result.Add(smallest_index);\n        }\n        return result;", " \
    \       List<long> result = new List<long>();\n        long smallestEvenValue\
    \ = arr.Min();\n        long smallestIndex = 0;\n        for (int i = 0; i < arr.Count;\
    \ i++) {\n            if (arr[i] % 2 == 0) {\n                if (smallestEvenValue\
    \ % 2 == 0) {\n                    smallestEvenValue = arr[i];\n             \
    \       smallestIndex = i;\n                }\n            }\n        }\n    \
    \    result.Add(smallestEvenValue);\n        result.Add(smallestIndex);\n    \
    \    return result;", "        long smalest_value = arr.Min();\n        List<long>\
    \ result = new List<long>();\n        long smallest_index = -1;\n        foreach\
    \ (var node in arr) {\n            if (node % 2 == 0) {\n                if (smallest_index\
    \ == -1 || node < smalest_value) {\n                    smalest_value = node;\n\
    \                    smallest_index = arr.IndexOf(node);\n                }\n\
    \            }\n        }\n        if (smallest_index != -1) {\n            result.Add(smalest_value);\n\
    \            result.Add(smallest_index);\n        }\n        return result;",
  "        long smalest_value = arr.Min();\n        long smalest_index = 0;\n    \
    \    List<long> result = new List<long>();\n        foreach (long i in arr) {\n\
    \            if (i % 2 == 0) {\n                if (smalest_value == i) {\n  \
    \                  smalest_index = i;\n                }\n                else\
    \ {\n                    if (smalest_index > 0) {\n                        result.Add(smalest_value);\n\
    \                        result.Add(smalest_index);\n                    }\n \
    \                   smalest_value = i;\n                    smalest_index = i;\n\
    \                }\n            }\n        }\n        if (smalest_index > 0) {\n\
    \            result.Add(smalest_value);\n            result.Add(smalest_index);\n\
    \        }\n        return result;", "        long smalest_value = arr.Min();\n\
    \        List<long> result = new List<long>();\n        long smallest_index =\
    \ -1;\n        bool found = false;\n        foreach (long node in arr) {\n   \
    \         if (node % 2 == 0) {\n                if (smallest_index == -1 || smallest_index\
    \ > node) {\n                    smallest_index = node;\n                    smalest_value\
    \ = node;\n                    found = true;\n                }\n            }\n\
    \            else if (found) {\n                result.Add(smallest_value);\n\
    \                result.Add(smallest_index);\n                found = false;\n\
    \            }\n        }\n        if (result.Count == 0) {\n            return\
    \ new List<long>();\n        }\n        return result;", "        List<long> result\
    \ = new List<long>();\n        long smallest_value = arr.Min();\n        long\
    \ smallest_index = -1;\n        long smallest_even_value = -1;\n        long smallest_even_node_index\
    \ = -1;\n        foreach (long n in arr) {\n            if (n % 2 == 0) {\n  \
    \              if (smallest_even_value == -1) {\n                    smallest_even_value\
    \ = n;\n                    smallest_even_node_index = -1;\n                }\
    \ else if (smallest_even_value == n) {\n                    smallest_even_node_index++;\n\
    \                }\n            } else if (smallest_even_value != -1) {\n    \
    \            if (smallest_even_value == n) {\n                    result.Add(smallest_even_value);\n\
    \                    result.Add(smallest_even_node_index);\n                 \
    \   smallest_even_node_index = -1;\n                    smallest_even_value =\
    \ -1;\n                }\n            }\n            if (smallest_value == n)\
    \ {\n                smallest_index = arr.IndexOf(n);\n            }\n       \
    \ }\n        if (smallest_even_value != -1) {\n            result.Add(smallest_even_value);\n\
    \            result.Add(smallest_even_node_index);\n        }\n        return\
    \ result;", "        List<long> result = new List<long>();\n        long smalest_value\
    \ = arr.Min();\n        int smalest_index = 0;\n        for (int i = 0; i < arr.Count;\
    \ i++) {\n            if (arr[i] % 2 == 0) {\n                if (arr[i] < smalest_value)\
    \ {\n                    smalest_value = arr[i];\n                    smalest_index\
    \ = i;\n                }\n            }\n        }\n        result.Add(smalest_value);\n\
    \        result.Add(smalest_index);\n        return result;", "        List<long>\
    \ result = new List<long>();\n        long smallestEvenValue = 0;\n        long\
    \ smallestIndex = 0;\n        long largestEvenValue = 0;\n        long largestIndex\
    \ = 0;\n        foreach (var item in arr) {\n            if (item % 2 == 0) {\n\
    \                if (smallestEvenValue < item) {\n                    smallestEvenValue\
    \ = item;\n                    smallestIndex = arr.IndexOf(item);\n          \
    \      }\n                if (item > largestEvenValue) {\n                   \
    \ largestEvenValue = item;\n                    largestIndex = arr.IndexOf(item);\n\
    \                }\n            }\n        }\n        if (smallestEvenValue ==\
    \ 0) {\n            return new List<long>();\n        }\n        result.Add(smallestEvenValue);\n\
    \        result.Add(smallestIndex);\n        if (largestEvenValue == 0) {\n  \
    \          return new List<long>();\n        }\n        result.Add(largestEvenValue);\n\
    \        result.Add(largestIndex);\n        return result;", "        List<long>\
    \ result = new List<long>();\n        long smallest_even_value = arr.Min();\n\
    \        long smallest_even_index = arr.IndexOf(smallest_even_value);\n      \
    \  if (smallest_even_index == -1) {\n            return result;\n        }\n \
    \       long smallest_value = arr[smallest_even_index];\n        long smallest_index\
    \ = smallest_even_index;\n        bool found = false;\n        for (int i = 0;\
    \ i < arr.Count; i++) {\n            if (arr[i] < smallest_value) {\n        \
    \        smallest_value = arr[i];\n                smallest_index = i;\n     \
    \           found = true;\n            }\n        }\n        if (found) {\n  \
    \          result.Add(smallest_value);\n            result.Add(smallest_index);\n\
    \        }\n        return result;", "        List<long> result = new List<long>();\n\
    \        long smalest_value = 0;\n        long smalest_index = 0;\n        long\
    \ smalest_index_value = 0;\n        long smalest_index_value_2 = 0;\n        long\
    \ smalest_index_value_3 = 0;\n        long smalest_index_value_4 = 0;\n      \
    \  long smalest_index_value_5 = 0;\n        long smalest_index_value_6 = 0;\n\
    \        long smalest_index_value_7 = 0;\n        long smalest_index_value_8 =\
    \ 0;\n        long smalest_index_value_9 = 0;\n        long smalest_index_value_10\
    \ = 0;\n        long smalest_index_value_11 = 0;\n        long smalest_index_value_12\
    \ = 0;\n        long smalest_index_value_13 = 0;\n        long smalest_index_value_14\
    \ = 0;\n        long smalest_index_value_15 = 0;\n        long smalest_index_value_16\
    \ = 0;\n        long smalest_index_value_17 = 0;\n        long smalest_index_value_18\
    \ = 0;\n        long smalest_index_value_19 = 0;\n        long smalest_index_value_20\
    \ = 0;\n        long smalest_index_value_21 = 0;\n        long smalest_index_value_22\
    \ = 0;\n        long smalest_index_value_23 = 0;\n        long smalest_index_value_24\
    \ = 0;\n        long smalest_index_value_25 = 0;\n        long smalest_index_value_26\
    \ = 0;\n        long smalest_index_value_27 = 0;\n        long smalest_index_value_28\
    \ = 0;\n        long smalest_index_value_29 = 0;\n        long smalest_index_value_30\
    \ = 0;\n        long smalest_index_value_31 = 0;\n        long smalest_index_value_32\
    \ = 0;\n        long smalest_index_value_33 = 0;\n        long smalest_index_value_34\
    \ = 0;\n        long smalest_index_value_35 = 0;\n        long smalest_index_value_36\
    \ = 0;\n        long smalest_index_value_37 = 0;\n        long smalest_index_value_38\
    \ = 0;\n        long smalest_index_value_39 = 0;\n        long smalest_index_value_40\
    \ = 0;\n        long smalest_index_value_41 = 0;\n        long smalest_index_value_42\
    \ = 0;\n        long smalest_index_value_43 = 0;\n        long smalest_index_value_44\
    \ = 0;\n        long smalest_index_value_45 = 0;\n        long smalest_index_value_46\
    \ = 0;\n        long smalest_index_value_47 = 0;\n        long smalest_index_value_48\
    \ = 0;\n        long smalest_index_value_49 = 0;\n        ", "        long smalest_value\
    \ = arr.Min();\n        long smalest_index = 0;\n        List<long> result = new\
    \ List<long>();\n        foreach (var item in arr) {\n            if (item % 2\
    \ == 0) {\n                if (item < smalest_value) {\n                    smalest_value\
    \ = item;\n                    smalest_index = arr.IndexOf(item);\n          \
    \      }\n            }\n        }\n        if (smalest_index != 0) {\n      \
    \      result.Add(smalest_value);\n            result.Add(smalest_index);\n  \
    \      }\n        return result;", "        List<long> result = new List<long>();\n\
    \        long smallestEvenValue = arr.Min();\n        long smallestIndex = arr.IndexOf(smallestEvenValue);\n\
    \        if (smallestIndex == -1) {\n            return result;\n        }\n \
    \       bool isEven = true;\n        for (int i = 0; i < arr.Count; i++) {\n \
    \           if (arr[i] != smallestEvenValue) {\n                isEven = false;\n\
    \                break;\n            }\n        }\n        if (isEven) {\n   \
    \         result.Add(smallestEvenValue);\n            result.Add(smallestIndex);\n\
    \        } else {\n            int smallestIndex2 = smallestIndex;\n         \
    \   while (smallestIndex2 < arr.Count && arr[smallestIndex2] != smallestEvenValue)\
    \ {\n                smallestIndex2++;\n            }\n            result.Add(smallestEvenValue);\n\
    \            result.Add(smallestIndex2);\n        }\n        return result;",
  "        long smalest_value = arr.Min();\n        long smalest_index = 0;\n    \
    \    List<long> result = new List<long>();\n        foreach (long n in arr) {\n\
    \            if (n % 2 == 0) {\n                if (smalest_value < n) {\n   \
    \                 smalest_value = n;\n                    smalest_index = arr.IndexOf(n);\n\
    \                }\n            }\n        }\n        if (smalest_index != 0)\
    \ {\n            result.Add(smalest_value);\n            result.Add(smalest_index);\n\
    \        }\n        return result;", "        long smalest_value = 0;\n      \
    \  long smalest_index = 0;\n        List<long> result = new List<long>();\n  \
    \      foreach (long n in arr) {\n            if (n % 2 == 0) {\n            \
    \    if (smalest_value == 0) {\n                    smalest_value = n;\n     \
    \               smalest_index = arr.IndexOf(n);\n                }\n         \
    \       else if (smalest_value < n) {\n                    smalest_value = n;\n\
    \                    smalest_index = arr.IndexOf(n);\n                }\n    \
    \        }\n        }\n        if (smalest_value != 0) {\n            result.Add(smalest_value);\n\
    \            result.Add(smalest_index);\n        }\n        return result;", " \
    \       long smalest_value = arr.Min();\n        List<long> result = new List<long>();\n\
    \        long smalest_index = 0;\n        long smalest_index_value = 0;\n    \
    \    foreach (var item in arr) {\n            if (item % 2 == 0) {\n         \
    \       if (item < smalest_value) {\n                    smalest_value = item;\n\
    \                    smalest_index = arr.IndexOf(item);\n                    smalest_index_value\
    \ = item;\n                }\n            }\n        }\n        if (smalest_value\
    \ == 0) {\n            return new List<long>();\n        }\n        result.Add(smalest_value);\n\
    \        result.Add(smalest_index);\n        return result;", "        List<long>\
    \ result = new List<long>();\n        long smallest_value = arr.Min();\n     \
    \   int smallest_index = -1;\n        bool found = false;\n        for (int i\
    \ = 0; i < arr.Count; i++) {\n            if (arr[i] < smallest_value) {\n   \
    \             smallest_value = arr[i];\n                smallest_index = i;\n\
    \                found = true;\n            }\n        }\n        if (found) {\n\
    \            result.Add(smallest_value);\n            result.Add(smallest_index);\n\
    \        }\n        return result;", "        List<long> result = new List<long>();\n\
    \        long smallestEvenValue = 0;\n        long smallestIndex = 0;\n      \
    \  long currentEvenValue = 0;\n        long currentIndex = 0;\n        bool found\
    \ = false;\n        foreach (long i in arr) {\n            if (i % 2 == 0) {\n\
    \                currentEvenValue = i;\n                currentIndex = i;\n  \
    \              found = true;\n            }\n            if (found) {\n      \
    \          if (currentEvenValue < smallestEvenValue) {\n                    smallestEvenValue\
    \ = currentEvenValue;\n                    smallestIndex = currentIndex;\n   \
    \             }\n                found = false;\n            }\n        }\n  \
    \      if (smallestEvenValue == 0)\n            return new List<long>();\n   \
    \     result.Add(smallestEvenValue);\n        result.Add(smallestIndex);\n   \
    \     return result;", "        List<long> result = new List<long>();\n      \
    \  long smallestEven = arr.Min();\n        int smallestIndex = -1;\n        for\
    \ (int i = 0; i < arr.Count; i++) {\n            if (arr[i] % 2 == 0) {\n    \
    \            if (smallestEven == arr[i]) {\n                    smallestIndex\
    \ = i;\n                }\n                else if (smallestEven == arr[i] &&\
    \ smallestIndex == -1) {\n                    smallestIndex = i;\n           \
    \     }\n            }\n        }\n        if (smallestIndex != -1) {\n      \
    \      result.Add(smallestEven);\n            result.Add(smallestIndex);\n   \
    \     }\n        return result;", "        List<long> result = new List<long>();\n\
    \        long smallestEvenValue = arr.Min();\n        long smallestIndex = 0;\n\
    \        bool hasSmallestEvenValue = false;\n        for (int i = 0; i < arr.Count;\
    \ i++) {\n            if (arr[i] % 2 == 0) {\n                if (smallestEvenValue\
    \ < arr[i]) {\n                    smallestEvenValue = arr[i];\n             \
    \       smallestIndex = i;\n                    hasSmallestEvenValue = true;\n\
    \                }\n            }\n        }\n        if (hasSmallestEvenValue)\
    \ {\n            result.Add(smallestEvenValue);\n            result.Add(smallestIndex);\n\
    \        }\n        return result;", "        List<long> result = new List<long>();\n\
    \        long smallest_even_value = arr.Min();\n        long smallest_even_index\
    \ = arr.IndexOf(smallest_even_value);\n        long smallest_even_value_plus_one\
    \ = smallest_even_value + 1;\n        long smallest_even_index_plus_one = smallest_even_index\
    \ + 1;\n        bool found = false;\n        foreach (long i in arr) {\n     \
    \       if (i % 2 == 0) {\n                if (i == smallest_even_value) {\n \
    \                   found = true;\n                    break;\n              \
    \  }\n                if (i == smallest_even_value_plus_one) {\n             \
    \       found = true;\n                    break;\n                }\n       \
    \         if (i == smallest_even_index_plus_one) {\n                    found\
    \ = true;\n                    break;\n                }\n            }\n    \
    \    }\n        if (found) {\n            result.Add(smallest_even_value);\n \
    \           result.Add(smallest_even_index);\n        } else {\n            result.Add(smallest_even_value_plus_one);\n\
    \            result.Add(smallest_even_index_plus_one);\n        }\n        return\
    \ result;", "        long smalest_value = arr.Min();\n        long smalest_index\
    \ = 0;\n        List<long> result = new List<long>();\n        foreach (long n\
    \ in arr) {\n            if (n % 2 == 0) {\n                if (smalest_value\
    \ == n) {\n                    smalest_index = n;\n                }\n       \
    \         if (smalest_value < n) {\n                    smalest_value = n;\n \
    \                   smalest_index = n;\n                }\n            }\n   \
    \     }\n        if (smalest_index != 0) {\n            result.Add(smalest_value);\n\
    \            result.Add(smalest_index);\n        }\n        return result;", " \
    \       List<long> result = new List<long>();\n        long smalest_value = arr.Min();\n\
    \        long smalest_index = 0;\n        long smalest_even_value = 0;\n     \
    \   long smalest_even_index = 0;\n        long smalest_even_index_count = 0;\n\
    \        long smalest_even_index_count_max = 0;\n        long smalest_even_index_count_min\
    \ = 0;\n        long smalest_even_index_count_sum = 0;\n        long smalest_even_index_count_sum_max\
    \ = 0;\n        long smalest_even_index_count_sum_min = 0;\n        long smalest_even_index_count_sum_sum\
    \ = 0;\n        long smalest_even_index_count_sum_sum_max = 0;\n        long smalest_even_index_count_sum_sum_min\
    \ = 0;\n        long smalest_even_index_count_sum_sum_sum = 0;\n        long smalest_even_index_count_sum_sum_sum_max\
    \ = 0;\n        long smalest_even_index_count_sum_sum_sum_min = 0;\n        long\
    \ smalest_even_index_count_sum_sum_sum_sum = 0;\n        long smalest_even_index_count_sum_sum_sum_sum_max\
    \ = 0;\n        long smalest_even_index_count_sum_sum_sum_min = 0;\n        long\
    \ smalest_even_index_count_sum_sum_sum_sum = 0;\n        long smalest_even_index_count_sum_sum_sum_sum_max\
    \ = 0;\n        long smalest_even_index_count_sum_sum_sum_min = 0;\n        long\
    \ smalest_even_index_count_sum_sum_sum_sum = 0;\n        long smalest_even_index_count_sum_sum_sum_sum_max\
    \ = 0;\n        long smalest_even_index_count_sum_sum_sum_min = 0;\n        long\
    \ smalest_even_index_count_sum_sum_sum_sum = 0;\n        long smalest_even_index_count_sum_sum_sum_sum_max\
    \ = 0;\n        long smalest_even_index_count_sum_sum_sum_min = 0;\n        long\
    \ smalest_even_index_count_sum_sum_sum_sum = 0;\n        long smalest_even_index_count_sum_sum_sum_sum_max\
    \ = 0;\n        long smalest_even_index_count_sum_sum_sum_min = 0;\n        long\
    \ smalest_even_index_count_sum_sum_sum_sum = 0;\n        long smalest_even_index_count_sum_sum_sum_sum_max\
    \ = 0;\n        long smalest_even_index_count_sum_sum_sum_min = 0;\n        long\
    \ smalest_even_index_count_sum_sum_sum_sum = 0;\n        long smalest_even_index_count_sum_sum_sum_sum_max\
    \ = 0;\n        long smalest_even_index_count_sum_sum_sum_min = 0;\n        long\
    \ smalest_even_index_count_sum_sum_sum_sum = 0;\n        long smalest_even", " \
    \       List<long> result = new List<long>();\n        long smalest_value = 0;\n\
    \        long smalest_index = 0;\n        long smalest_even_value = 0;\n     \
    \   long smalest_even_index = 0;\n        long smalest_even_index_in_array = 0;\n\
    \        long smalest_even_index_in_array_in_array = 0;\n        long smalest_even_index_in_array_in_array2\
    \ = 0;\n        long smalest_even_index_in_array_in_array3 = 0;\n        long\
    \ smalest_even_index_in_array_in_array4 = 0;\n        long smalest_even_index_in_array_in_array5\
    \ = 0;\n        long smalest_even_index_in_array_in_array6 = 0;\n        long\
    \ smalest_even_index_in_array_in_array7 = 0;\n        long smalest_even_index_in_array_in_array8\
    \ = 0;\n        long smalest_even_index_in_array_in_array9 = 0;\n        long\
    \ smalest_even_index_in_array_in_array10 = 0;\n        long smalest_even_index_in_array_in_array11\
    \ = 0;\n        long smalest_even_index_in_array_in_array12 = 0;\n        long\
    \ smalest_even_index_in_array_in_array13 = 0;\n        long smalest_even_index_in_array_in_array14\
    \ = 0;\n        long smalest_even_index_in_array_in_array15 = 0;\n        long\
    \ smalest_even_index_in_array_in_array16 = 0;\n        long smalest_even_index_in_array_in_array17\
    \ = 0;\n        long smalest_even_index_in_array_in_array18 = 0;\n        long\
    \ smalest_even_index_in_array_in_array19 = 0;\n        long smalest_even_index_in_array_in_array20\
    \ = 0;\n        long smalest_even_index_in_array_in_array21 = 0;\n        long\
    \ smalest_even_index_in_array_in_array22 = 0;\n        long smalest_even_index_in_array_in_array23\
    \ = 0;\n        long smalest_even_index_in_array_in_array24 = 0;\n        long\
    \ smalest_even_index_in_array_in_array25 = 0;\n        long smalest_even_index_in_array_in_array26\
    \ = 0;\n        long smalest_even_index_in_array_in_array27 = 0;\n        long\
    \ smalest_even_index_in_array_in_array28 = 0;\n        long smalest_even_index_in_array_in_array29\
    \ = 0;\n        long smalest_even_index_in_array_in_array30 = 0;\n        long\
    \ smalest_even_index_in_array_in_array31 = 0;\n        long smalest_even_index_in_array_in_array32\
    \ = 0;\n        long smalest_even_index_in_array_in_array33 = 0;\n", "       \
    \ List<long> result = new List<long>();\n        long smallestEvenValue = arr.Min();\n\
    \        long smallestIndex = arr.IndexOf(smallestEvenValue);\n        if (smallestEvenValue\
    \ % 2 == 0) {\n            result.Add(smallestEvenValue);\n            result.Add(smallestIndex);\n\
    \        }\n        else {\n            int evenCount = 0;\n            int index\
    \ = 0;\n            foreach (var item in arr) {\n                if (item % 2\
    \ == 0) {\n                    evenCount++;\n                    if (evenCount\
    \ == 1) {\n                        result.Add(item);\n                       \
    \ result.Add(index);\n                    }\n                }\n             \
    \   else {\n                    evenCount = 0;\n                    index++;\n\
    \                }\n            }\n        }\n        return result;", "     \
    \   List<long> result = new List<long>();\n        long smallestEvenValue = arr.Min();\n\
    \        long smallestIndex = 0;\n        bool hasSmallestEvenValue = false;\n\
    \        bool hasSmallestIndex = false;\n        foreach (long n in arr) {\n \
    \           if (n % 2 == 0) {\n                if (smallestEvenValue % 2 == 0)\
    \ {\n                    hasSmallestEvenValue = true;\n                    smallestEvenValue\
    \ = n;\n                    smallestIndex = arr.IndexOf(n);\n                }\n\
    \                else {\n                    hasSmallestEvenValue = false;\n \
    \               }\n            }\n            else {\n                if (smallestEvenValue\
    \ % 2 != 0) {\n                    hasSmallestEvenValue = true;\n            \
    \        smallestEvenValue = n;\n                    smallestIndex = arr.IndexOf(n);\n\
    \                }\n                else {\n                    hasSmallestEvenValue\
    \ = false;\n                }\n            }\n        }\n        if (hasSmallestEvenValue)\
    \ {\n            result.Add(smallestEvenValue);\n            result.Add(smallestIndex);\n\
    \        }\n        return result;", "        long smalest_value = arr.Min();\n\
    \        long smalest_index = 0;\n        List<long> result = new List<long>();\n\
    \        foreach (long n in arr) {\n            if (n % 2 == 0) {\n          \
    \      if (smalest_value == n) {\n                    smalest_index = n;\n   \
    \             }\n                else {\n                    if (smalest_value\
    \ < n) {\n                        smalest_value = n;\n                       \
    \ smalest_index = n;\n                    }\n                }\n            }\n\
    \        }\n        if (smalest_index != 0) {\n            result.Add(smalest_value);\n\
    \            result.Add(smalest_index);\n        }\n        return result;", " \
    \       long smalest_value = arr.Min();\n        long smalest_index = 0;\n   \
    \     List<long> result = new List<long>();\n        foreach (var item in arr)\
    \ {\n            if (item % 2 == 0) {\n                if (item < smalest_value)\
    \ {\n                    smalest_value = item;\n                    smalest_index\
    \ = arr.IndexOf(item);\n                }\n            }\n        }\n        if\
    \ (smalest_index != 0) {\n            result.Add(smalest_value);\n           \
    \ result.Add(smalest_index);\n        }\n        return result;", "        List<long>\
    \ result = new List<long>();\n        long smallest_value = 0;\n        long smallest_index\
    \ = 0;\n        foreach (long n in arr) {\n            if (n % 2 == 0) {\n   \
    \             if (smallest_value == 0) {\n                    smallest_value =\
    \ n;\n                    smallest_index = arr.IndexOf(n);\n                }\
    \ else if (smallest_value < n) {\n                    smallest_value = n;\n  \
    \                  smallest_index = arr.IndexOf(n);\n                }\n     \
    \       }\n        }\n        if (smallest_value != 0) {\n            result.Add(smallest_value);\n\
    \            result.Add(smallest_index);\n        }\n        return result;",
  "        List<long> result = new List<long>();\n        long smallest_value = arr.Min();\n\
    \        long smallest_index = 0;\n        bool found = false;\n        for (int\
    \ i = 0; i < arr.Count; i++) {\n            if (arr[i] % 2 == 0) {\n         \
    \       if (smallest_value == arr[i]) {\n                    found = true;\n \
    \                   smallest_index = i;\n                }\n            }\n  \
    \      }\n        if (found) {\n            result.Add(smallest_value);\n    \
    \        result.Add(smallest_index);\n        }\n        return result;", "  \
    \      long smalest_value = arr.Min();\n        List<long> result = new List<long>();\n\
    \        long smallest_index = -1;\n        long smallest_even_value = -1;\n \
    \       foreach (long n in arr) {\n            if (n % 2 == 0) {\n           \
    \     if (smallest_even_value == -1) {\n                    smallest_even_value\
    \ = n;\n                    smallest_index = n;\n                } else {\n  \
    \                  if (n < smallest_even_value) {\n                        smallest_even_value\
    \ = n;\n                        smallest_index = n;\n                    }\n \
    \               }\n            }\n        }\n        if (smallest_even_value !=\
    \ -1) {\n            result.Add(smallest_even_value);\n            result.Add(smallest_index);\n\
    \        }\n        return result;", "        List<long> result = new List<long>();\n\
    \        long smalest_value = arr.Min();\n        long smalest_index = 0;\n  \
    \      long smalest_even_value = 0;\n        for (int i = 0; i < arr.Count; i++)\
    \ {\n            if (arr[i] % 2 == 0) {\n                if (smalest_value ==\
    \ 0) {\n                    smalest_value = arr[i];\n                    smalest_index\
    \ = i;\n                    smalest_even_value = arr[i] / 2;\n               \
    \ } else if (smalest_value == arr[i]) {\n                    smalest_index = i;\n\
    \                    smalest_even_value = arr[i] / 2;\n                } else\
    \ if (smalest_value < arr[i]) {\n                    smalest_value = arr[i];\n\
    \                    smalest_index = i;\n                    smalest_even_value\
    \ = arr[i] / 2;\n                }\n            }\n        }\n        if (smalest_value\
    \ == 0) {\n            return new List<long>();\n        }\n        result.Add(smalest_value);\n\
    \        result.Add(smalest_index);\n        result.Add(smalest_even_value);\n\
    \        return result;", "        long smalest_value = arr.Min();\n        long\
    \ smalest_index = 0;\n        List<long> result = new List<long>();\n        foreach\
    \ (var item in arr) {\n            if (item % 2 == 0) {\n                if (item\
    \ < smalest_value) {\n                    smalest_value = item;\n            \
    \        smalest_index = arr.IndexOf(item);\n                }\n            }\n\
    \        }\n        if (smalest_index > 0) {\n            result.Add(smalest_value);\n\
    \            result.Add(smalest_index);\n        }\n        return result;", " \
    \       List<long> result = new List<long>();\n        long smallest_value = 0;\n\
    \        long smallest_index = 0;\n        long smallest_even_value = 0;\n   \
    \     long smallest_even_count = 0;\n        foreach (long n in arr) {\n     \
    \       if (n % 2 == 0) {\n                if (smallest_even_count < n) {\n  \
    \                  smallest_even_value = n;\n                    smallest_even_count\
    \ = n;\n                }\n                if (smallest_even_count == n) {\n \
    \                   smallest_value = smallest_even_value / 2;\n              \
    \      smallest_index = smallest_even_count - 1;\n                }\n        \
    \    }\n        }\n        if (smallest_even_count > 0) {\n            result.Add(smallest_even_value);\n\
    \            result.Add(smallest_index);\n        }\n        return result;",
  "        List<long> result = new List<long>();\n        long smallestEvenValue =\
    \ arr.Min();\n        long smallestIndex = 0;\n        long smallestIndexValue\
    \ = 0;\n        bool isSmallestEvenValue = true;\n        bool isSmallestEvenValueIndex\
    \ = true;\n        bool isSmallestEvenValueIndexValue = true;\n        bool isSmallestEvenValueIndexValueValue\
    \ = true;\n        bool isSmallestEvenValueIndexValueValueValue = true;\n    \
    \    bool isSmallestEvenValueIndexValueValueValueValue = true;\n        bool isSmallestEvenValueIndexValueValueValueValueValue\
    \ = true;\n        bool isSmallestEvenValueIndexValueValueValueValueValueValue\
    \ = true;\n        bool isSmallestEvenValueIndexValueValueValueValueValueValueValue\
    \ = true;\n        bool isSmallestEvenValueIndexValueValueValueValueValueValueValue\
    \ = true;\n        bool isSmallestEvenValueIndexValueValueValueValueValueValueValueValue\
    \ = true;\n        bool isSmallestEvenValueIndexValueValueValueValueValueValueValueValueValue\
    \ = true;\n        bool isSmallestEvenValueIndexValueValueValueValueValueValueValueValueValueValue\
    \ = true;\n        bool isSmallestEvenValueIndexValueValueValueValueValueValueValueValueValueValueValue\
    \ = true;\n        bool isSmallestEvenValueIndexValueValueValueValueValueValueValueValueValueValueValueValue\
    \ = true;\n        bool isSmallestEvenValueIndexValueValueValueValueValueValueValueValueValueValueValueValue\
    \ = true;\n        bool isSmallestEvenValueIndexValueValueValueValueValueValueValueValueValueValueValueValue\
    \ = true;\n        bool isSmallestEvenValueIndexValueValueValueValueValueValueValueValueValueValueValueValue\
    \ = true;\n        bool isSmallestEvenValueIndexValueValueValueValueValueValueValueValueValueValueValueValueValue\
    \ = true;\n        bool isSmallestEvenValueIndexValueValueValueValueValueValueValueValueValueValueValueValueValueValue\
    \ = true;\n        bool isSmallestEvenValueIndexValueValueValueValueValueValueValueValueValueValueValueValueValueValue\
    \ = true;\n        bool isSmallestEvenValueIndexValueValueValueValueValueValueValueValueValueValueValueValueValueValue\
    \ = true;\n        bool isSmallestEvenValueIndexValueValueValueValueValueValueValueValueValueValueValueValueValueValue\
    \ = true;\n        bool isSmallestEvenValueIndexValueValueValueValueValueValueValueValueValueValueValueValueValueValueValue\
    \ = true;\n        bool isSmallestEvenValueIndex", "        List<long> result\
    \ = new List<long>();\n        long smallestEvenValue = 0;\n        int smallestIndex\
    \ = 0;\n        for (int i = 0; i < arr.Count; i++) {\n            if (arr[i]\
    \ % 2 == 0) {\n                smallestEvenValue = arr[i];\n                smallestIndex\
    \ = i;\n            }\n        }\n        if (smallestEvenValue == 0) {\n    \
    \        return result;\n        }\n        List<long> evenValues = new List<long>();\n\
    \        for (int i = 0; i < arr.Count; i++) {\n            if (arr[i] % 2 ==\
    \ 0) {\n                evenValues.Add(arr[i]);\n            }\n        }\n  \
    \      smallestEvenValue = evenValues.Min();\n        smallestIndex = evenValues.IndexOf(smallestEvenValue);\n\
    \        result.Add(smallestEvenValue);\n        result.Add(smallestIndex);\n\
    \        return result;", "        List<long> result = new List<long>();\n   \
    \     long smallest_value = arr.Min();\n        long smallest_index = 0;\n   \
    \     long smallest_even_value = 0;\n        foreach (var item in arr) {\n   \
    \         if (item % 2 == 0) {\n                if (smallest_even_value < item)\
    \ {\n                    smallest_even_value = item;\n                    smallest_index\
    \ = item;\n                }\n            }\n            if (item < smallest_value)\
    \ {\n                smallest_value = item;\n                smallest_index =\
    \ item;\n            }\n        }\n        result.Add(smallest_value);\n     \
    \   result.Add(smallest_index);\n        return result;", "        List<long>\
    \ result = new List<long>();\n        long smallestEvenValue = arr.Min();\n  \
    \      long smallestIndex = 0;\n        foreach (long value in arr) {\n      \
    \      if (value % 2 == 0) {\n                if (smallestEvenValue < value) {\n\
    \                    smallestEvenValue = value;\n                    smallestIndex\
    \ = arr.IndexOf(value);\n                }\n            }\n        }\n       \
    \ if (smallestEvenValue == 0) {\n            return new List<long>();\n      \
    \  }\n        result.Add(smallestEvenValue);\n        result.Add(smallestIndex);\n\
    \        return result;", "        long smalest_value = arr.Min();\n        long\
    \ smalest_index = 0;\n        List<long> result = new List<long>();\n        foreach\
    \ (long n in arr) {\n            if (n % 2 == 0) {\n                if (smalest_value\
    \ == n) {\n                    smalest_index = arr.IndexOf(n);\n             \
    \   }\n                else {\n                    if (smalest_value < n) {\n\
    \                        smalest_value = n;\n                        smalest_index\
    \ = arr.IndexOf(n);\n                    }\n                }\n            }\n\
    \        }\n        if (smalest_index > 0) {\n            result.Add(smalest_value);\n\
    \            result.Add(smalest_index);\n        }\n        return result;", " \
    \       List<long> result = new List<long>();\n        long smallestEven = arr.Min();\n\
    \        int smallestIndex = arr.FindIndex(x => x == smallestEven);\n        if\
    \ (smallestIndex == -1) {\n            return result;\n        }\n        long\
    \ smallestValue = arr[smallestIndex];\n        long smallestEvenValue = arr[smallestIndex];\n\
    \        for (int i = smallestIndex + 1; i < arr.Count; i++) {\n            if\
    \ (arr[i] % 2 == 0) {\n                smallestEvenValue = arr[i];\n         \
    \       smallestEven = arr[i];\n                smallestIndex = i;\n         \
    \   }\n        }\n        result.Add(smallestEvenValue);\n        result.Add(smallestIndex);\n\
    \        return result;", "        long smalest_value = arr.Min();\n        List<long>\
    \ result = new List<long>();\n        long smallest_index = 0;\n        long smallest_even_value\
    \ = 0;\n        bool found = false;\n        for (int i = 0; i < arr.Count; i++)\
    \ {\n            if (arr[i] % 2 == 0) {\n                if (arr[i] < smallest_even_value)\
    \ {\n                    smallest_even_value = arr[i];\n                    smallest_index\
    \ = i;\n                }\n                found = true;\n            }\n    \
    \    }\n        if (found) {\n            result.Add(smallest_even_value);\n \
    \           result.Add(smallest_index);\n        }\n        return result;", " \
    \       List<long> result = new List<long>();\n        long smalest_value = arr.Min();\n\
    \        long smalest_index = 0;\n        bool found = false;\n        for (int\
    \ i = 0; i < arr.Count; i++) {\n            if (arr[i] % 2 == 0) {\n         \
    \       if (smalest_value == arr[i]) {\n                    found = true;\n  \
    \                  smalest_index = i;\n                }\n                else\
    \ if (found == true) {\n                    if (smalest_index == i) {\n      \
    \                  result.Add(smalest_value);\n                        result.Add(smalest_index);\n\
    \                        found = false;\n                    }\n             \
    \       else {\n                        result.Add(smalest_value);\n         \
    \               result.Add(smalest_index);\n                        found = true;\n\
    \                    }\n                }\n            }\n        }\n        if\
    \ (found == false) {\n            result.Add(smalest_value);\n            result.Add(smalest_index);\n\
    \        }\n        return result;", "        List<long> result = new List<long>();\n\
    \        long smallestEvenValue = arr.Min();\n        long smallestIndex = 0;\n\
    \        foreach (long value in arr) {\n            if (value % 2 == 0) {\n  \
    \              if (value < smallestEvenValue) {\n                    smallestEvenValue\
    \ = value;\n                    smallestIndex = arr.IndexOf(value);\n        \
    \        }\n            }\n        }\n        result.Add(smallestEvenValue);\n\
    \        result.Add(smallestIndex);\n        return result;", "        List<long>\
    \ result = new List<long>();\n        long smalest_value = arr.Min();\n      \
    \  long smalest_index = 0;\n        long smalest_even_value = 0;\n        long\
    \ smalest_even_index = 0;\n        foreach (long i in arr) {\n            if (i\
    \ % 2 == 0) {\n                if (smalest_even_value == 0) {\n              \
    \      smalest_even_value = i;\n                    smalest_even_index = i;\n\
    \                } else if (smalest_even_value < i) {\n                    smalest_even_value\
    \ = i;\n                    smalest_even_index = i;\n                }\n     \
    \       } else {\n                if (smalest_value == 0) {\n                \
    \    smalest_value = i;\n                    smalest_index = i;\n            \
    \    } else if (smalest_value < i) {\n                    smalest_value = i;\n\
    \                    smalest_index = i;\n                }\n            }\n  \
    \      }\n        if (smalest_even_value == 0) {\n            result.Add(smalest_value);\n\
    \            result.Add(smalest_index);\n        } else {\n            result.Add(smalest_even_value);\n\
    \            result.Add(smalest_even_index);\n        }\n        return result;",
  "        long smalest_value = arr.Min();\n        List<long> result = new List<long>();\n\
    \        long smallest_index = arr.FindIndex(x => x == smalest_value);\n     \
    \   if (smallest_index == -1) {\n            return result;\n        }\n     \
    \   long smallest_even_value = arr[smallest_index];\n        bool found = false;\n\
    \        for (int i = 0; i < arr.Count; i++) {\n            if (arr[i] == smallest_even_value)\
    \ {\n                found = true;\n                break;\n            }\n  \
    \      }\n        if (found) {\n            result.Add(smallest_even_value);\n\
    \            result.Add(smallest_index);\n        }\n        return result;",
  "        long smalest_value = 0;\n        long smalest_index = 0;\n        List<long>\
    \ result = new List<long>();\n        foreach (long n in arr) {\n            if\
    \ (n % 2 == 0) {\n                if (smalest_value < n) {\n                 \
    \   smalest_value = n;\n                    smalest_index = arr.IndexOf(n);\n\
    \                }\n            }\n        }\n        if (smalest_index != arr.IndexOf(smalest_value))\
    \ {\n            smalest_value = arr[smalest_index];\n            smalest_index\
    \ = arr.IndexOf(smalest_value);\n        }\n        result.Add(smalest_value);\n\
    \        result.Add(smalest_index);\n        return result;", "        long smalest_value\
    \ = arr.Min();\n        long smalest_index = 0;\n        List<long> result = new\
    \ List<long>();\n        foreach (long n in arr) {\n            if (n % 2 == 0)\
    \ {\n                if (smalest_value == 0 || n < smalest_value) {\n        \
    \            smalest_value = n;\n                    smalest_index = arr.IndexOf(n);\n\
    \                }\n            }\n        }\n        if (smalest_index != 0)\
    \ {\n            result.Add(smalest_value);\n            result.Add(smalest_index);\n\
    \        }\n        return result;", "        List<long> result = new List<long>();\n\
    \        long smallestEvenValue = 0;\n        long smallestIndex = 0;\n      \
    \  long currentIndex = 0;\n        bool isSmallestEvenValue = true;\n        bool\
    \ isSmallestIndex = true;\n        bool isSmallestValue = true;\n        bool\
    \ isSmallestIndexValue = true;\n        bool isSmallestIndexIndex = true;\n  \
    \      bool isSmallestIndexEvenValue = true;\n        bool isSmallestIndexEvenIndex\
    \ = true;\n        bool isSmallestIndexEvenValueIndex = true;\n        bool isSmallestIndexEvenIndexIndex\
    \ = true;\n        bool isSmallestIndexEvenIndexValueIndex = true;\n        bool\
    \ isSmallestIndexEvenIndexIndexValueIndex = true;\n        bool isSmallestIndexEvenIndexIndexIndexValueIndex\
    \ = true;\n        bool isSmallestIndexEvenIndexIndexIndexIndexValueIndex = true;\n\
    \        bool isSmallestIndexEvenIndexIndexIndexIndexIndexValueIndex = true;\n\
    \        bool isSmallestIndexEvenIndexIndexIndexIndexIndexValueIndex = true;\n\
    \        bool isSmallestIndexEvenIndexIndexIndexIndexIndexValueIndex = true;\n\
    \        bool isSmallestIndexEvenIndexIndexIndexIndexIndexValueIndex = true;\n\
    \        bool isSmallestIndexEvenIndexIndexIndexIndexIndexValueIndex = true;\n\
    \        bool isSmallestIndexEvenIndexIndexIndexIndexIndexValueIndex = true;\n\
    \        bool isSmallestIndexEvenIndexIndexIndexIndexIndexValueIndex = true;\n\
    \        bool isSmallestIndexEvenIndexIndexIndexIndexIndexValueIndex = true;\n\
    \        bool isSmallestIndexEvenIndexIndexIndexIndexIndexValueIndex = true;\n\
    \        bool isSmallestIndexEvenIndexIndexIndexIndexIndexValueIndex = true;\n\
    \        bool isSmallestIndexEvenIndexIndexIndexIndexIndexValueIndex = true;\n\
    \        bool isSmallestIndexEvenIndexIndexIndexIndexIndexValueIndex = true;\n\
    \        bool isSmallestIndexEvenIndexIndexIndexIndexIndexValueIndex = true;\n\
    \        bool isSmallestIndexEvenIndexIndexIndexIndexIndexValueIndex = true;\n\
    \        bool isSmallestIndexEvenIndexIndexIndexIndexIndexValueIndex = true;\n\
    \        bool isSmallestIndexEvenIndexIndexIndexIndexIndexValueIndex = true;\n\
    \        bool isSmallestIndexEvenIndexIndexIndexIndexIndexValueIndex = true;\n\
    \        bool isSmallestIndexEvenIndexIndexIndexIndexIndexValueIndex = true;\n\
    \        bool isSmallestIndexEvenIndexIndexIndexIndexIndexValueIndex = true;\n\
    \        bool isSmallest", "        long smalest_value = arr.Min();\n        long\
    \ smalest_index = 0;\n        List<long> result = new List<long>();\n        foreach\
    \ (long n in arr) {\n            if (n % 2 == 0) {\n                if (smalest_value\
    \ < n) {\n                    smalest_value = n;\n                    smalest_index\
    \ = arr.IndexOf(n);\n                }\n            }\n        }\n        if (smalest_value\
    \ == 0) {\n            return new List<long>();\n        }\n        result.Add(smalest_value);\n\
    \        result.Add(smalest_index);\n        return result;", "        long smalest_value\
    \ = arr.Min();\n        long smalest_index = 0;\n        List<long> result = new\
    \ List<long>();\n        foreach (long n in arr) {\n            if (n % 2 == 0)\
    \ {\n                if (smalest_value < n) {\n                    smalest_value\
    \ = n;\n                    smalest_index = arr.IndexOf(n);\n                }\n\
    \            }\n        }\n        if (smalest_value == 0) {\n            return\
    \ new List<long>();\n        }\n        result.Add(smalest_value);\n        result.Add(smalest_index);\n\
    \        return result;", "        List<long> result = new List<long>();\n   \
    \     long smallest_value = arr.Min();\n        long smallest_index = 0;\n   \
    \     long smallest_even_value = 0;\n        long smallest_even_count = 0;\n \
    \       bool found = false;\n        for (int i = 0; i < arr.Count; i++) {\n \
    \           if (arr[i] % 2 == 0) {\n                smallest_even_count++;\n \
    \               if (smallest_even_count == 1) {\n                    smallest_even_value\
    \ = arr[i];\n                    found = true;\n                }\n          \
    \  }\n            if (found == true) {\n                if (arr[i] < smallest_value)\
    \ {\n                    smallest_value = arr[i];\n                    smallest_index\
    \ = i;\n                }\n            }\n        }\n        if (smallest_even_count\
    \ == 0) {\n            return result;\n        }\n        List<long> evens = new\
    \ List<long>();\n        for (int i = 0; i < arr.Count; i++) {\n            if\
    \ (arr[i] % 2 == 0) {\n                evens.Add(arr[i]);\n            }\n   \
    \     }\n        evens.Sort();\n        smallest_value = evens.First();\n    \
    \    smallest_index = evens.IndexOf(smallest_value);\n        result.Add(smallest_value);\n\
    \        result.Add(smallest_index);\n        return result;", "        List<long>\
    \ result = new List<long>();\n        long smallestEven = arr.Min();\n       \
    \ long smallestIndex = arr.IndexOf(smallestEven);\n        long smallestValue\
    \ = smallestEven;\n        long smallestIndexValue = smallestIndex;\n        bool\
    \ foundSmallestEven = false;\n        bool foundSmallestIndex = false;\n     \
    \   foreach (long n in arr) {\n            if (n % 2 == 0) {\n               \
    \ if (foundSmallestEven) {\n                    result.Add(smallestEven);\n  \
    \                  result.Add(smallestIndexValue);\n                    break;\n\
    \                }\n                foundSmallestEven = true;\n              \
    \  smallestEven = n;\n                smallestIndexValue = smallestIndex;\n  \
    \              smallestIndex = arr.IndexOf(n);\n                smallestValue\
    \ = smallestEven;\n                foundSmallestIndex = true;\n            }\n\
    \        }\n        if (foundSmallestEven) {\n            result.Add(smallestEven);\n\
    \            result.Add(smallestIndexValue);\n        }\n        if (foundSmallestIndex)\
    \ {\n            result.Add(smallestIndex);\n        }\n        return result;",
  "        List<long> result = new List<long>();\n        long smallest_even_value\
    \ = arr.Min();\n        long smallest_even_index = arr.IndexOf(smallest_even_value);\n\
    \        long smallest_value = smallest_even_value;\n        long smallest_index\
    \ = smallest_even_index;\n        foreach (long n in arr) {\n            if (n\
    \ % 2 == 0) {\n                if (smallest_value == smallest_even_value) {\n\
    \                    smallest_value = n;\n                    smallest_index =\
    \ arr.IndexOf(n);\n                }\n                else if (smallest_value\
    \ < n) {\n                    smallest_value = n;\n                    smallest_index\
    \ = arr.IndexOf(n);\n                }\n            }\n        }\n        result.Add(smallest_value);\n\
    \        result.Add(smallest_index);\n        return result;", "        List<long>\
    \ result = new List<long>();\n        long smallest_value = arr.Min();\n     \
    \   long smallest_index = -1;\n        long smallest_even_value = smallest_value;\n\
    \        bool found = false;\n        for (int i = 0; i < arr.Count; i++) {\n\
    \            if (arr[i] % 2 == 0) {\n                if (smallest_even_value <\
    \ arr[i]) {\n                    smallest_even_value = arr[i];\n             \
    \       smallest_index = i;\n                    found = true;\n             \
    \   }\n            }\n        }\n        if (found) {\n            result.Add(smallest_even_value);\n\
    \            result.Add(smallest_index);\n        }\n        return result;",
  "        List<long> result = new List<long>();\n        long smallest_value = arr.Min();\n\
    \        int smallest_index = -1;\n        for (int i = 0; i < arr.Count; i++)\
    \ {\n            if (arr[i] < smallest_value) {\n                smallest_value\
    \ = arr[i];\n                smallest_index = i;\n            }\n        }\n \
    \       if (smallest_index != -1) {\n            result.Add(smallest_value);\n\
    \            result.Add(smallest_index);\n        }\n        return result;",
  "        List<long> result = new List<long>();\n        long smallest_even_value\
    \ = arr.Min();\n        int smallest_even_index = arr.IndexOf(smallest_even_value);\n\
    \        long smallest_value = smallest_even_value;\n        int smallest_index\
    \ = smallest_even_index;\n        for (int i = 0; i < arr.Count; i++) {\n    \
    \        if (arr[i] % 2 == 0) {\n                if (smallest_value % 2 == 0)\
    \ {\n                    smallest_value = arr[i];\n                    smallest_index\
    \ = i;\n                }\n            }\n        }\n        result.Add(smallest_value);\n\
    \        result.Add(smallest_index);\n        return result;", "        List<long>\
    \ result = new List<long>();\n        if (arr.Count == 0) {\n            return\
    \ result;\n        }\n        long smallest_value = arr.Min();\n        long smallest_index\
    \ = 0;\n        bool is_even = true;\n        for (int i = 0; i < arr.Count; i++)\
    \ {\n            if (arr[i] < smallest_value) {\n                is_even = false;\n\
    \                smallest_value = arr[i];\n                smallest_index = i;\n\
    \            }\n        }\n        if (is_even) {\n            result.Add(smallest_value);\n\
    \            result.Add(smallest_index);\n        } else {\n            int smallest_index_with_smallest_value\
    \ = smallest_index;\n            for (int i = 0; i < arr.Count; i++) {\n     \
    \           if (arr[i] == smallest_value) {\n                    smallest_index_with_smallest_value\
    \ = i;\n                    break;\n                }\n            }\n       \
    \     result.Add(smallest_value);\n            result.Add(smallest_index_with_smallest_value);\n\
    \        }\n        return result;", "        List<long> result = new List<long>();\n\
    \        long smallestEvenValue = arr.Min();\n        long smallestIndex = 0;\n\
    \        for (int i = 0; i < arr.Count; i++) {\n            if (arr[i] % 2 ==\
    \ 0) {\n                if (smallestEvenValue < arr[i]) {\n                  \
    \  smallestEvenValue = arr[i];\n                    smallestIndex = i;\n     \
    \           }\n            }\n        }\n        result.Add(smallestEvenValue);\n\
    \        result.Add(smallestIndex);\n        return result;", "        long smalest_value\
    \ = arr.Min();\n        long smalest_index = 0;\n        List<long> result = new\
    \ List<long>();\n        foreach (long n in arr) {\n            if (n % 2 == 0)\
    \ {\n                if (smalest_value < n) {\n                    smalest_value\
    \ = n;\n                    smalest_index = arr.IndexOf(n);\n                }\n\
    \            }\n        }\n        if (smalest_index != 0) {\n            result.Add(smalest_value);\n\
    \            result.Add(smalest_index);\n        }\n        return result;", " \
    \       long smalest_value = arr.Min();\n        long smalest_index = 0;\n   \
    \     List<long> result = new List<long>();\n        for (int i = 0; i < arr.Count;\
    \ i++) {\n            if (arr[i] % 2 == 0) {\n                if (arr[i] < smalest_value)\
    \ {\n                    smalest_value = arr[i];\n                    smalest_index\
    \ = i;\n                }\n            }\n        }\n        if (smalest_index\
    \ != 0) {\n            result.Add(smalest_value);\n            result.Add(smalest_index);\n\
    \        }\n        return result;", "        long smallest_even_value = 0;\n\
    \        long smallest_index = 0;\n        List<long> result = new List<long>();\n\
    \        foreach (long n in arr) {\n            if (n % 2 == 0) {\n          \
    \      if (smallest_even_value < n) {\n                    smallest_even_value\
    \ = n;\n                    smallest_index = n;\n                }\n         \
    \   }\n        }\n        if (smallest_even_value == 0) {\n            return\
    \ result;\n        }\n        long smallest_value = smallest_even_value;\n   \
    \     long smallest_index = smallest_index;\n        List<long> result_2 = new\
    \ List<long>();\n        foreach (long n in arr) {\n            if (n % 2 == 0)\
    \ {\n                if (smallest_even_value < n) {\n                    smallest_even_value\
    \ = n;\n                    smallest_index = n;\n                }\n         \
    \   }\n        }\n        if (smallest_even_value == 0) {\n            return\
    \ result;\n        }\n        long smallest_value = smallest_even_value;\n   \
    \     long smallest_index = smallest_index;\n        List<long> result_3 = new\
    \ List<long>();\n        foreach (long n in arr) {\n            if (n % 2 == 0)\
    \ {\n                if (smallest_even_value < n) {\n                    smallest_even_value\
    \ = n;\n                    smallest_index = n;\n                }\n         \
    \   }\n        }\n        if (smallest_even_value == 0) {\n            return\
    \ result;\n        }\n        long smallest_value = smallest_even_value;\n   \
    \     long smallest_index = smallest_index;\n        List<long> result_4 = new\
    \ List<long>();\n        foreach (long n in arr) {\n            if (n % 2 == 0)\
    \ {\n                if (smallest_even_value < n) {\n                    smallest_even_value\
    \ = n;\n                    smallest_index = n;\n                }\n         \
    \   }\n        }\n        if (smallest_even_value == 0) {\n            return\
    \ result;\n        }\n        long smallest_value = smallest_even_value;\n   \
    \     long smallest_index = smallest_index;\n        List<long> result_5 = new\
    \ List<long>();\n        foreach (long n in arr) {\n            if (n % 2 == 0)\
    \ {\n                if (smallest_even_value < n) {\n                    smallest_even_value\
    \ = n;\n                    smallest_index = n;\n                }\n         \
    \   }\n        }\n        if (smallest_even_value == 0) {\n            return\
    \ result;\n        }\n        long smallest_value = smallest_even_value;\n   \
    \     long smallest_index = smallest_index;\n        List<long> result_6 = new\
    \ List<long>();\n        foreach (long n in arr) {\n            if (n % 2 == 0)\
    \ {\n                if (smallest_even_value < n) {\n                    smallest_even_value\
    \ = n;\n                    smallest_index = n;\n                }\n         \
    \   }\n        }\n        if (smallest_even_value == 0) {\n            return\
    \ result;\n        }\n        long smallest_value = smallest_even_value;\n   \
    \     long smallest_index = smallest_index;\n", "        List<long> result = new\
    \ List<long>();\n        long smallest_value = arr.Min();\n        long smallest_index\
    \ = -1;\n        bool found = false;\n        for (int i = 0; i < arr.Count; i++)\
    \ {\n            if (arr[i] % 2 == 0) {\n                if (smallest_value ==\
    \ arr[i]) {\n                    found = true;\n                    smallest_index\
    \ = i;\n                }\n                else if (found == true) {\n       \
    \             result.Add(smallest_value);\n                    result.Add(smallest_index);\n\
    \                    found = false;\n                }\n            }\n      \
    \  }\n        if (found == true) {\n            result.Add(smallest_value);\n\
    \            result.Add(smallest_index);\n        }\n        return result;",
  "        long smalest_value = arr.Min();\n        long smalest_index = 0;\n    \
    \    List<long> result = new List<long>();\n        foreach (long i in arr) {\n\
    \            if (i % 2 == 0) {\n                if (smalest_value < i) {\n   \
    \                 smalest_value = i;\n                    smalest_index = i;\n\
    \                }\n            }\n        }\n        if (smalest_index != 0)\
    \ {\n            result.Add(smalest_value);\n            result.Add(smalest_index);\n\
    \        }\n        return result;", "        List<long> result = new List<long>();\n\
    \        long smallest_value = arr.Min();\n        long smallest_index = 0;\n\
    \        bool found = false;\n        for (int i = 0; i < arr.Count; i++) {\n\
    \            if (arr[i] % 2 == 0) {\n                if (arr[i] < smallest_value)\
    \ {\n                    smallest_value = arr[i];\n                    smallest_index\
    \ = i;\n                    found = true;\n                }\n            }\n\
    \        }\n        if (found) {\n            result.Add(smallest_value);\n  \
    \          result.Add(smallest_index);\n        }\n        return result;", " \
    \       List<long> result = new List<long>();\n        long smallestEvenValue\
    \ = arr.Min();\n        long smallestIndex = arr.IndexOf(smallestEvenValue);\n\
    \        if (smallestIndex != -1) {\n            result.Add(smallestEvenValue);\n\
    \            result.Add(smallestIndex);\n        }\n        if (arr.Count == 0)\
    \ {\n            return result;\n        }\n        long evenValue = arr.Min();\n\
    \        long index = arr.IndexOf(evenValue);\n        while (index != -1) {\n\
    \            if (evenValue == smallestEvenValue) {\n                result.Add(evenValue);\n\
    \                result.Add(index);\n                break;\n            }\n \
    \           evenValue = arr[index];\n            index = arr.IndexOf(evenValue);\n\
    \        }\n        return result;", "        List<long> result = new List<long>();\n\
    \        long smallest_value = 0;\n        long smallest_index = 0;\n        long\
    \ smallest_even_value = 0;\n        long smallest_even_index = 0;\n        foreach\
    \ (var item in arr) {\n            if (item % 2 == 0) {\n                smallest_even_value\
    \ = item;\n                smallest_even_index = arr.IndexOf(item);\n        \
    \    }\n            if (item < smallest_value) {\n                smallest_value\
    \ = item;\n                smallest_index = arr.IndexOf(item);\n            }\n\
    \        }\n        if (smallest_even_index == arr.Count - 1) {\n            result.Add(smallest_value);\n\
    \            result.Add(smallest_index);\n            return result;\n       \
    \ }\n        long smallest_even_value = arr[smallest_even_index];\n        long\
    \ smallest_even_index = smallest_even_index + 1;\n        List<long> evens = new\
    \ List<long>();\n        foreach (var item in arr) {\n            if (item % 2\
    \ == 0) {\n                evens.Add(item);\n            }\n        }\n      \
    \  List<long> evens_pluck_pluck_pluck_pluck_pluck_pluck_pluck_pluck_pluck_pluck_pluck_pluck_pluck_pluck_pluck_pluck_pluck_pluck_pluck_pluck_pluck_pluck_pluck_pluck_pluck_pluck_pluck_pluck_pluck_pluck_pluck_pluck_pluck_pluck_pluck_pluck_pluck_pluck_pluck_pluck_pluck_pluck_pluck_pluck_pluck_pluck_pluck_pluck_pluck_pluck_pluck_pluck_pluck_pluck_pluck_pluck_pluck_pluck_pluck_pluck_pluck_pluck_pluck_pluck_pluck_pluck_pluck_pluck_pluck_pluck_pluck_pluck_pluck_pluck_pluck_pluck_pluck_pluck_pluck_pluck_pluck_pluck_pluck_pluck_pluck_pluck_pluck_pluck_pluck_pluck_pluck_pluck_pluck_pluck_pluck_pluck_pluck_pluck_pluck_pluck_pluck_pluck_pluck_pluck_pluck_pluck_pluck_pluck_pluck_pluck_pluck_pluck_pluck_pluck_pluck_pluck_pluck_pluck_pluck_pluck_pluck_pluck_pluck_pluck_pluck_pluck_pluck_pluck_pluck_pluck_pluck_pluck_pluck_pluck_pluck_pluck_pluck_pluck_pluck_pluck_pluck_pluck_pluck_pluck_pluck_pluck_pluck_pluck_pluck_pluck_pluck_pluck_pluck_pluck_pluck_pluck_pluck_pluck_plu",
  "        long smalest_value = arr.Min();\n        long smalest_index = 0;\n    \
    \    List<long> result = new List<long>();\n        foreach (long n in arr) {\n\
    \            if (n % 2 == 0) {\n                if (smalest_value < n) {\n   \
    \                 smalest_value = n;\n                    smalest_index = arr.IndexOf(n);\n\
    \                }\n            }\n        }\n        if (smalest_value == 0)\
    \ {\n            return new List<long>();\n        }\n        result.Add(smalest_value);\n\
    \        result.Add(smalest_index);\n        return result;", "        long smalest_value\
    \ = 0;\n        long smalest_index = 0;\n        List<long> result = new List<long>();\n\
    \        foreach (var item in arr) {\n            if (item % 2 == 0) {\n     \
    \           if (item < smalest_value) {\n                    smalest_value = item;\n\
    \                    smalest_index = arr.IndexOf(item);\n                }\n \
    \           }\n        }\n        if (smalest_index != 0) {\n            result.Add(smalest_value);\n\
    \            result.Add(smalest_index);\n        }\n        return result;", " \
    \       List<long> result = new List<long>();\n        long smallest_even_value\
    \ = 0;\n        long smallest_index = 0;\n        long smallest_value = 0;\n \
    \       foreach (long n in arr) {\n            if (n % 2 == 0) {\n           \
    \     if (smallest_even_value < n) {\n                    smallest_even_value\
    \ = n;\n                    smallest_index = n;\n                }\n         \
    \       if (smallest_even_value == n) {\n                    smallest_value =\
    \ n;\n                }\n            }\n        }\n        if (smallest_even_value\
    \ == 0) {\n            return new List<long>();\n        }\n        result.Add(smallest_value);\n\
    \        result.Add(smallest_index);\n        return result;", "        long smalest_value\
    \ = arr.Min();\n        List<long> result = new List<long>();\n        long smallest_index\
    \ = -1;\n        bool found = false;\n        for (int i = 0; i < arr.Count; i++)\
    \ {\n            if (arr[i] % 2 == 0) {\n                if (arr[i] < smalest_value)\
    \ {\n                    smalest_value = arr[i];\n                    smallest_index\
    \ = i;\n                    found = true;\n                }\n            }\n\
    \        }\n        if (found) {\n            result.Add(smalest_value);\n   \
    \         result.Add(smallest_index);\n        }\n        return result;", " \
    \       List<long> result = new List<long>();\n        long smallest_value = arr.Min();\n\
    \        long smallest_index = 0;\n        bool found = false;\n        for (int\
    \ i = 0; i < arr.Count; i++) {\n            if (arr[i] < smallest_value) {\n \
    \               smallest_value = arr[i];\n                smallest_index = i;\n\
    \            }\n            if (arr[i] == smallest_value && found == false) {\n\
    \                found = true;\n            }\n        }\n        if (found ==\
    \ true) {\n            result.Add(smallest_value);\n            result.Add(smallest_index);\n\
    \        }\n        if (result.Count == 0) {\n            return new List<long>();\n\
    \        }\n        if (result.Count == 1) {\n            return new List<long>()\
    \ { result[0] };\n        }\n        List<long> result = new List<long>();\n \
    \       long smallest_value = result.Min();\n        long smallest_index = 0;\n\
    \        bool found = false;\n        for (int i = 0; i < result.Count; i++) {\n\
    \            if (result[i] < smallest_value) {\n                smallest_value\
    \ = result[i];\n                smallest_index = i;\n            }\n         \
    \   if (result[i] == smallest_value && found == false) {\n                found\
    \ = true;\n            }\n        }\n        if (found == true) {\n          \
    \  result.Add(smallest_value);\n            result.Add(smallest_index);\n    \
    \    }\n        return result;", "        List<long> result = new List<long>();\n\
    \        long smallestEvenValue = arr.Min();\n        long smallestIndex = arr.IndexOf(smallestEvenValue);\n\
    \        if (smallestEvenValue % 2 == 0) {\n            result.Add(smallestEvenValue);\n\
    \            result.Add(smallestIndex);\n        }\n        else {\n         \
    \   int evenCount = 0;\n            int index = 0;\n            foreach (long\
    \ value in arr) {\n                if (value % 2 == 0) {\n                   \
    \ evenCount++;\n                    if (evenCount == 1) {\n                  \
    \      result.Add(value);\n                        result.Add(index);\n      \
    \              }\n                }\n                else {\n                \
    \    evenCount = 0;\n                    index++;\n                }\n       \
    \     }\n        }\n        return result;", "        long smalest_value = 0;\n\
    \        long smalest_index = 0;\n        List<long> result = new List<long>();\n\
    \        foreach (long n in arr) {\n            if (n % 2 == 0) {\n          \
    \      if (smalest_value == 0) {\n                    smalest_value = n;\n   \
    \                 smalest_index = arr.IndexOf(n);\n                }\n       \
    \         else if (smalest_value < n) {\n                    smalest_value = n;\n\
    \                    smalest_index = arr.IndexOf(n);\n                }\n    \
    \        }\n        }\n        if (smalest_value == 0) {\n            return new\
    \ List<long>();\n        }\n        else {\n            result.Add(smalest_value);\n\
    \            result.Add(smalest_index);\n            return result;\n        }",
  "        List<long> result = new List<long>();\n        long smallest_value = arr.Min();\n\
    \        long smallest_index = 0;\n        bool found = false;\n        foreach\
    \ (long value in arr) {\n            if (value % 2 == 0) {\n                found\
    \ = true;\n                if (value < smallest_value) {\n                   \
    \ smallest_value = value;\n                    smallest_index = arr.IndexOf(value);\n\
    \                }\n            }\n        }\n        if (found) {\n         \
    \   result.Add(smallest_value);\n            result.Add(smallest_index);\n   \
    \     }\n        return result;", "        List<long> result = new List<long>();\n\
    \        long smallestEvenValue = arr.Min();\n        long smallestIndex = 0;\n\
    \        for (int i = 0; i < arr.Count; i++) {\n            if (arr[i] % 2 ==\
    \ 0) {\n                if (arr[i] < smallestEvenValue) {\n                  \
    \  smallestEvenValue = arr[i];\n                    smallestIndex = i;\n     \
    \           }\n            }\n        }\n        result.Add(smallestEvenValue);\n\
    \        result.Add(smallestIndex);\n        return result;", "        long smalest_value\
    \ = 0;\n        long smalest_index = 0;\n        List<long> result = new List<long>();\n\
    \        foreach (var node in arr) {\n            if (node % 2 == 0) {\n     \
    \           if (node < smalest_value) {\n                    smalest_value = node;\n\
    \                    smalest_index = arr.IndexOf(node);\n                }\n \
    \           }\n        }\n        if (smalest_index != arr.IndexOf(smalest_value))\
    \ {\n            smalest_index = arr.IndexOf(smalest_value);\n        }\n    \
    \    result.Add(smalest_value);\n        result.Add(smalest_index);\n        return\
    \ result;", "        List<long> result = new List<long>();\n        long smalest_value\
    \ = arr.Min();\n        long smalest_index = 0;\n        long smalest_even_value\
    \ = 0;\n        long smalest_even_count = 0;\n        long smalest_even_index\
    \ = 0;\n        foreach (long n in arr) {\n            if (n % 2 == 0) {\n   \
    \             smalest_even_value = n;\n                smalest_even_count++;\n\
    \            }\n            if (smalest_even_count == smalest_even_value && smalest_even_count\
    \ > smalest_even_value && smalest_even_value < n) {\n                smalest_even_index\
    \ = n;\n            }\n            if (smalest_even_count == smalest_even_value\
    \ && smalest_even_count > smalest_even_value && smalest_even_value == n) {\n \
    \               smalest_even_count++;\n            }\n            if (smalest_even_count\
    \ == smalest_even_value && smalest_even_count > smalest_even_value && smalest_even_value\
    \ == n) {\n                smalest_even_count++;\n            }\n            if\
    \ (smalest_even_count == smalest_even_value && smalest_even_count > smalest_even_value\
    \ && smalest_even_value == n) {\n                smalest_even_count++;\n     \
    \       }\n            if (smalest_even_count == smalest_even_value && smalest_even_count\
    \ > smalest_even_value && smalest_even_value == n) {\n                smalest_even_count++;\n\
    \            }\n            if (smalest_even_count == smalest_even_value && smalest_even_count\
    \ > smalest_even_value && smalest_even_value == n) {\n                smalest_even_count++;\n\
    \            }\n            if (smalest_even_count == smalest_even_value && smalest_even_count\
    \ > smalest_even_value && smalest_even_value == n) {\n                smalest_even_count++;\n\
    \            }\n            if (smalest_even_count == smalest_even_value && smalest_even_count\
    \ > smalest_even_value && smalest_even_value == n) {\n                smalest_even_count++;\n\
    \            }\n            if (smalest_even_count == smalest_even_value && smalest_even_count\
    \ > smalest_even_value && smalest_even_value == n) {\n                smalest_even_count++;\n\
    \            }\n            if (smalest_", "        List<long> result = new List<long>();\n\
    \        long smallest_value = arr.Min();\n        long smallest_index = 0;\n\
    \        long smallest_even_value = 0;\n        bool found = false;\n        for\
    \ (int i = 0; i < arr.Count; i++) {\n            if (arr[i] % 2 == 0) {\n    \
    \            if (smallest_value == 0) {\n                    smallest_value =\
    \ arr[i];\n                    smallest_index = i;\n                    smallest_even_value\
    \ = arr[i] / 2;\n                    found = true;\n                } else if\
    \ (smallest_value == arr[i]) {\n                    smallest_index = i;\n    \
    \                smallest_even_value = arr[i] / 2;\n                    found\
    \ = true;\n                } else if (smallest_value == arr[i] && smallest_even_value\n\
    \                    == arr[i] / 2) {\n                    smallest_index = i;\n\
    \                    smallest_even_value = arr[i] / 2;\n                    found\
    \ = true;\n                }\n            }\n        }\n        if (found) {\n\
    \            result.Add(smallest_value);\n            result.Add(smallest_index);\n\
    \        }\n        return result;", "        List<long> result = new List<long>();\n\
    \        long smallest_value = 0;\n        long smallest_index = 0;\n        long\
    \ smallest_even_value = 0;\n        long smallest_even_count = 0;\n        foreach\
    \ (var node in arr) {\n            if (node % 2 == 0) {\n                smallest_even_value\
    \ = node;\n                smallest_even_count = 1;\n            }\n         \
    \   else {\n                if (smallest_even_count > 1) {\n                 \
    \   smallest_value = smallest_even_value;\n                    smallest_index\
    \ = smallest_even_count;\n                }\n                else {\n        \
    \            smallest_value = node;\n                    smallest_index = 1;\n\
    \                }\n                smallest_even_count++;\n            }\n  \
    \      }\n        if (smallest_even_count == 0) {\n            result.Add(smallest_value);\n\
    \            result.Add(smallest_index);\n        }\n        else if (smallest_even_count\
    \ == 1) {\n            result.Add(smallest_value);\n            result.Add(smallest_index);\n\
    \        }\n        else {\n            result.Add(smallest_value);\n        \
    \    result.Add(smallest_index);\n        }\n        return result;", "      \
    \  long smalest_value = 0;\n        long smalest_index = 0;\n        List<long>\
    \ result = new List<long>();\n        foreach (var node in arr) {\n          \
    \  if (node % 2 == 0) {\n                if (smalest_value == 0) {\n         \
    \           smalest_value = node;\n                    smalest_index = arr.IndexOf(node);\n\
    \                } else if (smalest_value < node) {\n                    smalest_value\
    \ = node;\n                    smalest_index = arr.IndexOf(node);\n          \
    \      }\n            }\n        }\n        if (smalest_value == 0) {\n      \
    \      return new List<long>();\n        }\n        result.Add(smalest_value);\n\
    \        result.Add(smalest_index);\n        return result;", "        List<long>\
    \ result = new List<long>();\n        long smallest_value = 0;\n        long smallest_index\
    \ = 0;\n        bool found = false;\n        foreach (long n in arr) {\n     \
    \       if (n % 2 == 0) {\n                if (smallest_value == 0) {\n      \
    \              smallest_value = n;\n                    smallest_index = arr.IndexOf(n);\n\
    \                    found = true;\n                } else if (smallest_value\
    \ < n) {\n                    smallest_value = n;\n                    smallest_index\
    \ = arr.IndexOf(n);\n                    found = true;\n                }\n  \
    \          }\n        }\n        if (found) {\n            result.Add(smallest_value);\n\
    \            result.Add(smallest_index);\n        }\n        return result;",
  "        List<long> result = new List<long>();\n        long smallest_value = arr.Min();\n\
    \        long smallest_index = 0;\n        long smallest_even_value = 0;\n   \
    \     bool found = false;\n        foreach (long value in arr) {\n           \
    \ if (value % 2 == 0) {\n                if (smallest_even_value < value) {\n\
    \                    smallest_even_value = value;\n                    smallest_index\
    \ = arr.IndexOf(value);\n                    found = true;\n                }\n\
    \            }\n        }\n        if (found) {\n            result.Add(smallest_even_value);\n\
    \            result.Add(smallest_index);\n        }\n        return result;",
  "        List<long> result = new List<long>();\n        long smallest_value = arr.Min();\n\
    \        long smallest_index = arr.IndexOf(smallest_value);\n        long smallest_even_value\
    \ = smallest_value % 2 == 0 ? smallest_value : smallest_value - 1;\n        bool\
    \ found = false;\n        for (int i = 0; i < arr.Count; i++) {\n            if\
    \ (arr[i] == smallest_even_value) {\n                found = true;\n         \
    \       result.Add(smallest_value);\n                result.Add(smallest_index);\n\
    \                break;\n            }\n        }\n        if (!found) {\n   \
    \         result.Add(smallest_value);\n            result.Add(smallest_index);\n\
    \        }\n        return result;", "        long smalest_value = arr.Min();\n\
    \        List<long> result = new List<long>();\n        long smallest_index =\
    \ -1;\n        bool found = false;\n        for (int i = 0; i < arr.Count; i++)\
    \ {\n            if (arr[i] % 2 == 0) {\n                if (found == false) {\n\
    \                    smallest_index = i;\n                    found = true;\n\
    \                }\n                if (arr[i] < smalest_value) {\n          \
    \          smalest_value = arr[i];\n                }\n            }\n       \
    \ }\n        if (found == true) {\n            result.Add(smalest_value);\n  \
    \          result.Add(smallest_index);\n        }\n        if (result.Count ==\
    \ 0) {\n            return new List<long>();\n        }\n        return result;",
  "        long smalest_value = arr.Min();\n        long smalest_index = 0;\n    \
    \    List<long> result = new List<long>();\n        foreach (long n in arr) {\n\
    \            if (n % 2 == 0) {\n                if (smalest_value == n) {\n  \
    \                  smalest_index = arr.IndexOf(n);\n                }\n      \
    \          else {\n                    smalest_value = n;\n                  \
    \  smalest_index = arr.IndexOf(n);\n                }\n            }\n       \
    \ }\n        if (smalest_index > 0) {\n            result.Add(smalest_value);\n\
    \            result.Add(smalest_index);\n        }\n        return result;", " \
    \       long smalest_value = arr.Min();\n        long smalest_index = 0;\n   \
    \     List<long> result = new List<long>();\n        foreach (long n in arr) {\n\
    \            if (n % 2 == 0) {\n                if (smalest_value < n) {\n   \
    \                 smalest_value = n;\n                    smalest_index = arr.IndexOf(n);\n\
    \                }\n            }\n        }\n        if (smalest_index != arr.IndexOf(smalest_value))\
    \ {\n            smalest_value = arr.Min();\n            smalest_index = 0;\n\
    \        }\n        result.Add(smalest_value);\n        result.Add(smalest_index);\n\
    \        return result;", "        List<long> result = new List<long>();\n   \
    \     long smallestEven = arr.Min();\n        long smallestIndex = arr.IndexOf(smallestEven);\n\
    \        long smallestValue = smallestEven;\n        long smallestIndexValue =\
    \ smallestIndex;\n        bool foundSmallestEven = false;\n        bool foundSmallestIndex\
    \ = false;\n        foreach (long n in arr) {\n            if (n % 2 == 0) {\n\
    \                if (foundSmallestEven) {\n                    result.Add(smallestEven);\n\
    \                    result.Add(smallestIndex);\n                    break;\n\
    \                }\n                foundSmallestEven = true;\n              \
    \  smallestEven = n;\n                smallestIndexValue = smallestIndex;\n  \
    \              smallestIndex = arr.IndexOf(n);\n                smallestValue\
    \ = smallestEven;\n                foundSmallestIndex = true;\n            }\n\
    \        }\n        if (!foundSmallestEven) {\n            result.Add(smallestEven);\n\
    \            result.Add(smallestIndex);\n        }\n        if (!foundSmallestIndex)\
    \ {\n            result.Add(smallestEven);\n            result.Add(smallestIndex);\n\
    \        }\n        return result;", "        long smalest_value = arr.Min();\n\
    \        long smalest_index = 0;\n        List<long> result = new List<long>();\n\
    \        foreach (long n in arr) {\n            if (n % 2 == 0) {\n          \
    \      if (smalest_value < n) {\n                    smalest_value = n;\n    \
    \                smalest_index = arr.IndexOf(n);\n                }\n        \
    \    }\n        }\n        if (smalest_index != arr.IndexOf(smalest_value)) {\n\
    \            smalest_value = arr.Min();\n            smalest_index = 0;\n    \
    \    }\n        result.Add(smalest_value);\n        result.Add(smalest_index);\n\
    \        return result;", "        long smalest_value = arr.Min();\n        long\
    \ smalest_index = 0;\n        List<long> result = new List<long>();\n        foreach\
    \ (long n in arr) {\n            if (n % 2 == 0) {\n                if (smalest_value\
    \ == n) {\n                    smalest_index = arr.IndexOf(n);\n             \
    \   }\n                else {\n                    smalest_value = n;\n      \
    \              smalest_index = arr.IndexOf(n);\n                }\n          \
    \  }\n        }\n        if (smalest_index != arr.IndexOf(smalest_value)) {\n\
    \            smalest_index = arr.IndexOf(smalest_value);\n        }\n        result.Add(smalest_value);\n\
    \        result.Add(smalest_index);\n        return result;", "        List<long>\
    \ result = new List<long>();\n        long smallestEvenValue = arr.Min();\n  \
    \      long smallestIndex = 0;\n        bool isSmallestEvenValue = true;\n   \
    \     bool isSmallestIndex = true;\n        foreach (long i in arr) {\n      \
    \      if (i % 2 == 0) {\n                isSmallestEvenValue = false;\n     \
    \       }\n            if (i == smallestEvenValue) {\n                isSmallestEvenValue\
    \ = true;\n            }\n            if (i == smallestIndex) {\n            \
    \    isSmallestIndex = false;\n            }\n            if (isSmallestEvenValue\
    \ && isSmallestIndex) {\n                result.Add(i);\n            }\n     \
    \   }\n        return result;", "        long smalest_value = arr.Min();\n   \
    \     List<long> result = new List<long>();\n        long smallest_index = -1;\n\
    \        long smallest_even_value = -1;\n        foreach (long i in arr) {\n \
    \           if (i % 2 == 0) {\n                if (smallest_even_value == -1)\
    \ {\n                    smallest_even_value = i;\n                    smallest_index\
    \ = i;\n                } else if (smallest_even_value < i) {\n              \
    \      smallest_even_value = i;\n                    smallest_index = i;\n   \
    \             }\n            }\n        }\n        if (smallest_even_value ==\
    \ -1) {\n            return result;\n        }\n        result.Add(smallest_even_value);\n\
    \        result.Add(smallest_index);\n        return result;", "        List<long>\
    \ result = new List<long>();\n        long smallestEvenValue = arr.Min();\n  \
    \      long smallestIndex = 0;\n        long currentEvenValue = smallestEvenValue;\n\
    \        long currentIndex = -1;\n        bool found = false;\n        foreach\
    \ (long n in arr) {\n            if (n % 2 == 0) {\n                if (currentEvenValue\
    \ < n) {\n                    currentEvenValue = n;\n                    currentIndex\
    \ = currentEvenValue - smallestEvenValue;\n                    found = true;\n\
    \                }\n            }\n            else {\n                if (currentEvenValue\
    \ == n) {\n                    currentIndex++;\n                    found = true;\n\
    \                }\n            }\n        }\n        if (found) {\n         \
    \   result.Add(smallestEvenValue);\n            result.Add(currentIndex);\n  \
    \      }\n        return result;", "        List<long> result = new List<long>();\n\
    \        long smallestEvenValue = arr.Min();\n        long smallestIndex = 0;\n\
    \        bool isSmallestEvenValue = true;\n        bool isSmallestIndex = true;\n\
    \        foreach (long n in arr) {\n            if (n % 2 == 0) {\n          \
    \      if (smallestEvenValue < n) {\n                    smallestEvenValue = n;\n\
    \                    isSmallestEvenValue = true;\n                }\n        \
    \        else {\n                    isSmallestEvenValue = false;\n          \
    \      }\n            }\n            else {\n                if (smallestEvenValue\
    \ == n) {\n                    isSmallestEvenValue = true;\n                }\n\
    \                else {\n                    isSmallestEvenValue = false;\n  \
    \              }\n                if (smallestIndex < n) {\n                 \
    \   smallestIndex = n;\n                    isSmallestIndex = true;\n        \
    \        }\n                else {\n                    isSmallestIndex = false;\n\
    \                }\n            }\n        }\n        if (isSmallestEvenValue)\
    \ {\n            result.Add(smallestEvenValue);\n            result.Add(smallestIndex);\n\
    \        }\n        else if (isSmallestIndex) {\n            result.Add(smallestIndex);\n\
    \        }\n        else {\n            result.Add(0);\n        }\n        return\
    \ result;", "        long smalest_value = arr.Min();\n        List<long> result\
    \ = new List<long>();\n        long smallest_index = -1;\n        foreach (long\
    \ node in arr) {\n            if (node % 2 == 0) {\n                if (smallest_index\
    \ == -1 || node < smalest_value) {\n                    smalest_value = node;\n\
    \                    smallest_index = arr.IndexOf(node);\n                }\n\
    \            }\n        }\n        if (smallest_index != -1) {\n            result.Add(smalest_value);\n\
    \            result.Add(smallest_index);\n        }\n        return result;",
  "        List<long> result = new List<long>();\n        long smalest_value = 0;\n\
    \        int smalest_index = 0;\n        foreach (var item in arr) {\n       \
    \     if (item % 2 == 0) {\n                smalest_value = item;\n          \
    \      smalest_index = arr.IndexOf(item);\n            }\n        }\n        if\
    \ (smalest_index != -1) {\n            result.Add(smalest_value);\n          \
    \  result.Add(smalest_index);\n        }\n        return result;", "        long\
    \ smalest_value = arr.Min();\n        long smalest_index = 0;\n        List<long>\
    \ result = new List<long>();\n        foreach (long n in arr) {\n            if\
    \ (n % 2 == 0) {\n                if (smalest_value == 0 || n < smalest_value)\
    \ {\n                    smalest_value = n;\n                    smalest_index\
    \ = arr.IndexOf(n);\n                }\n            }\n        }\n        if (smalest_index\
    \ != arr.IndexOf(smalest_value)) {\n            result.Add(smalest_value);\n \
    \           result.Add(smalest_index);\n        } else {\n            result.Add(smalest_value);\n\
    \            result.Add(0);\n        }\n        return result;", "        List<long>\
    \ result = new List<long>();\n        long smalest_value = arr.Min();\n      \
    \  int smalest_index = 0;\n        foreach (long n in arr) {\n            if (n\
    \ % 2 == 0) {\n                if (smalest_value < n) {\n                    smalest_value\
    \ = n;\n                    smalest_index = arr.IndexOf(n);\n                }\n\
    \            }\n        }\n        if (smalest_index > 0) {\n            result.Add(smalest_value);\n\
    \            result.Add(smalest_index);\n        }\n        return result;", " \
    \       List<long> result = new List<long>();\n        long smallest_value = arr.Min();\n\
    \        long smallest_index = -1;\n        long smallest_even_value = -1;\n \
    \       foreach (long i in arr) {\n            if (i % 2 == 0) {\n           \
    \     if (smallest_even_value == -1) {\n                    smallest_even_value\
    \ = i;\n                    smallest_index = i;\n                } else {\n  \
    \                  if (smallest_even_value < i) {\n                        smallest_even_value\
    \ = i;\n                        smallest_index = i;\n                    }\n \
    \               }\n            }\n        }\n        if (smallest_even_value ==\
    \ -1) {\n            return result;\n        }\n        result.Add(smallest_even_value);\n\
    \        result.Add(smallest_index);\n        return result;", "        long smalest_value\
    \ = arr.Min();\n        List<long> result = new List<long>();\n        long smallest_index\
    \ = -1;\n        bool found = false;\n        for (int i = 0; i < arr.Count; i++)\
    \ {\n            if (arr[i] % 2 == 0) {\n                if (found == false) {\n\
    \                    smallest_index = i;\n                    found = true;\n\
    \                }\n                if (arr[i] < smalest_value) {\n          \
    \          smalest_value = arr[i];\n                }\n            }\n       \
    \ }\n        if (found == true) {\n            result.Add(smalest_value);\n  \
    \          result.Add(smallest_index);\n        }\n        return result;", " \
    \       long smallestEvenValue = arr.Min();\n        long smallestIndex = arr.IndexOf(smallestEvenValue);\n\
    \        List<long> result = new List<long>();\n        if (smallestEvenValue\
    \ % 2 == 0) {\n            result.Add(smallestEvenValue);\n            result.Add(smallestIndex);\n\
    \        }\n        else {\n            int count = 0;\n            foreach (long\
    \ n in arr) {\n                if (n % 2 == 0) {\n                    result.Add(n);\n\
    \                    result.Add(count);\n                    count++;\n      \
    \          }\n            }\n        }\n        if (result.Count == 0) {\n   \
    \         return new List<long>();\n        }\n        else {\n            return\
    \ result;\n        }", "        long smallest_value = arr.Min();\n        long\
    \ smallest_index = -1;\n        List<long> result = new List<long>();\n      \
    \  foreach (long n in arr) {\n            if (n % 2 == 0) {\n                if\
    \ (smallest_value == 0 || n < smallest_value) {\n                    smallest_value\
    \ = n;\n                    smallest_index = arr.IndexOf(n);\n               \
    \ }\n            }\n        }\n        if (smallest_index != -1) {\n         \
    \   result.Add(smallest_value);\n            result.Add(smallest_index);\n   \
    \     }\n        return result;", "        long smalest_value = arr.Min();\n \
    \       long smalest_index = 0;\n        List<long> result = new List<long>();\n\
    \        foreach (long n in arr) {\n            if (n % 2 == 0) {\n          \
    \      if (smalest_value == n) {\n                    smalest_index = arr.IndexOf(n);\n\
    \                }\n                else {\n                    smalest_value\
    \ = n;\n                    smalest_index = arr.IndexOf(n);\n                }\n\
    \            }\n        }\n        if (smalest_index != arr.IndexOf(smalest_value))\
    \ {\n            smalest_index = arr.IndexOf(smalest_value);\n        }\n    \
    \    result.Add(smalest_value);\n        result.Add(smalest_index);\n        return\
    \ result;", "        long smalest_value = 0;\n        long smalest_index = 0;\n\
    \        long smalest_even_value = 0;\n        long smalest_even_index = 0;\n\
    \        List<long> result = new List<long>();\n        foreach (long node in\
    \ arr) {\n            if (node % 2 == 0) {\n                if (smalest_value\
    \ == 0) {\n                    smalest_value = node;\n                    smalest_index\
    \ = arr.IndexOf(node);\n                    smalest_even_value = node % 2;\n \
    \                   smalest_even_index = arr.IndexOf(node % 2);\n            \
    \    } else if (smalest_value == node % 2) {\n                    smalest_even_value\
    \ = node % 2;\n                    smalest_even_index = arr.IndexOf(node % 2);\n\
    \                } else {\n                    smalest_value = node;\n       \
    \             smalest_index = arr.IndexOf(node);\n                    smalest_even_value\
    \ = node % 2;\n                    smalest_even_index = arr.IndexOf(node % 2);\n\
    \                }\n            }\n        }\n        if (smalest_value == 0)\
    \ {\n            return new List<long>();\n        }\n        if (smalest_value\
    \ == smalest_even_value) {\n            result.Add(smalest_value);\n         \
    \   result.Add(smalest_index);\n            return result;\n        }\n      \
    \  if (smalest_value == smalest_even_value) {\n            result.Add(smalest_value);\n\
    \            result.Add(smalest_index);\n            result.Add(smalest_even_value);\n\
    \            result.Add(smalest_even_index);\n            return result;\n   \
    \     }\n        if (smalest_value == smalest_even_value) {\n            result.Add(smalest_value);\n\
    \            result.Add(smalest_index);\n            result.Add(smalest_even_value);\n\
    \            result.Add(smalest_even_index);\n            result.Add(smalest_value);\n\
    \            result.Add(smalest_even_index);\n            return result;\n   \
    \     }\n        if (smalest_value == smalest_even_value) {\n            result.Add(smalest_value);\n\
    \            result.Add(smalest_index);\n            result.Add(smalest_even_value);\n\
    \            result.Add(smalest_even_index);\n            result.Add(smalest_value);\n\
    \            result.Add(smalest_even_index);\n            result.Add(smalest_value);\n\
    \            result.Add(smalest_even_index);\n            return result;\n   \
    \     }\n        if (smalest_value == smalest_even_value) {\n            result.Add(smalest_value);\n\
    \            result.Add(smalest_index);\n            result.Add(smalest_even_value);\n\
    \            result.Add(smalest_even_index);\n            result.Add(smalest_value);\n\
    \            result.Add(smalest_even_index);\n            result.Add(smalest_value);\n\
    \            result.Add(smalest_even_index);\n            result.Add(smalest_value);\n\
    \            result.", "        long smallestEvenValue = arr.Min();\n        List<long>\
    \ result = new List<long>();\n        long smallestIndex = 0;\n        bool foundSmallestEvenValue\
    \ = false;\n        for (int i = 0; i < arr.Count; i++) {\n            if (arr[i]\
    \ % 2 == 0) {\n                if (smallestEvenValue < arr[i]) {\n           \
    \         smallestEvenValue = arr[i];\n                    foundSmallestEvenValue\
    \ = true;\n                }\n                if (smallestEvenValue == arr[i])\
    \ {\n                    smallestIndex = i;\n                }\n            }\n\
    \        }\n        if (foundSmallestEvenValue) {\n            result.Add(smallestEvenValue);\n\
    \            result.Add(smallestIndex);\n        }\n        return result;", " \
    \       List<long> result = new List<long>();\n        long smallest_value = 0;\n\
    \        long smallest_index = 0;\n        long smallest_even_value = 0;\n   \
    \     bool found = false;\n        for (int i = 0; i < arr.Count; i++) {\n   \
    \         if (arr[i] % 2 == 0) {\n                smallest_even_value = arr[i];\n\
    \                found = true;\n            }\n            if (found == true)\
    \ {\n                if (smallest_value == 0) {\n                    smallest_value\
    \ = arr[i];\n                    smallest_index = i;\n                }\n    \
    \            else if (smallest_value < arr[i]) {\n                    smallest_value\
    \ = arr[i];\n                    smallest_index = i;\n                }\n    \
    \        }\n        }\n        if (smallest_value == 0) {\n            return\
    \ new List<long>();\n        }\n        else if (smallest_value == smallest_even_value)\
    \ {\n            result.Add(smallest_value);\n            result.Add(smallest_index);\n\
    \        }\n        else {\n            List<long> temp = new List<long>();\n\
    \            temp.Add(smallest_value);\n            temp.Add(smallest_index);\n\
    \            temp.Add(smallest_even_value);\n            result = temp;\n    \
    \    }\n        return result;", "        List<long> result = new List<long>();\n\
    \        long smallestEvenValue = arr.Min();\n        long smallestIndex = 0;\n\
    \        bool isSmallestEvenValue = true;\n        bool isSmallestIndex = true;\n\
    \        long smallestValue = 0;\n        long smallestIndexValue = 0;\n     \
    \   long currentValue = 0;\n        long currentIndex = 0;\n        foreach (long\
    \ value in arr) {\n            if (isSmallestEvenValue) {\n                if\
    \ (value == smallestEvenValue) {\n                    isSmallestEvenValue = false;\n\
    \                    isSmallestIndex = true;\n                    smallestValue\
    \ = value;\n                    smallestIndexValue = currentValue;\n         \
    \           smallestIndex = currentIndex;\n                }\n               \
    \ else {\n                    isSmallestEvenValue = true;\n                  \
    \  isSmallestIndex = false;\n                }\n            }\n            if\
    \ (isSmallestIndex) {\n                if (value == smallestIndex) {\n       \
    \             isSmallestIndex = false;\n                    isSmallestEvenValue\
    \ = true;\n                    smallestValue = value;\n                    smallestIndexValue\
    \ = currentValue;\n                    smallestIndex = currentIndex;\n       \
    \         }\n                else {\n                    isSmallestIndex = true;\n\
    \                    isSmallestEvenValue = false;\n                }\n       \
    \     }\n            if (isSmallestEvenValue && isSmallestIndex) {\n         \
    \       if (value == smallestIndexValue) {\n                    result.Add(smallestIndex);\n\
    \                    isSmallestIndex = false;\n                    isSmallestEvenValue\
    \ = false;\n                    smallestValue = value;\n                    smallestIndexValue\
    \ = currentValue;\n                    smallestIndex = currentIndex;\n       \
    \         }\n                else {\n                    result.Add(smallestIndex);\n\
    \                    isSmallestIndex = true;\n                    isSmallestEvenValue\
    \ = false;\n                }\n            }\n            currentValue = value;\n\
    \            currentIndex = arr.IndexOf(value);\n        }\n        if (result.Count\
    \ == 0) {\n            return new List<long>();\n        }\n        return result;",
  "        long smalest_value = arr.Min();\n        long smalest_index = 0;\n    \
    \    List<long> result = new List<long>();\n        foreach (long n in arr) {\n\
    \            if (n % 2 == 0) {\n                if (smalest_value < n) {\n   \
    \                 smalest_value = n;\n                    smalest_index = arr.IndexOf(n);\n\
    \                }\n            }\n        }\n        if (smalest_index > 0) {\n\
    \            result.Add(smalest_value);\n            result.Add(smalest_index);\n\
    \        }\n        return result;", "        List<long> result = new List<long>();\n\
    \        long smalest_value = arr.Min();\n        long smalest_index = 0;\n  \
    \      long smalest_even_value = 0;\n        long smalest_even_index = 0;\n  \
    \      foreach (long n in arr) {\n            if (n % 2 == 0) {\n            \
    \    if (smalest_value == 0) {\n                    smalest_value = n;\n     \
    \               smalest_index = arr.IndexOf(n);\n                    smalest_even_value\
    \ = n % 2;\n                    smalest_even_index = n;\n                } else\
    \ if (smalest_value == n) {\n                    smalest_even_value = n % 2;\n\
    \                    smalest_even_index = n;\n                } else if (smalest_value\
    \ < n) {\n                    smalest_value = n;\n                    smalest_index\
    \ = arr.IndexOf(n);\n                    smalest_even_value = n % 2;\n       \
    \             smalest_even_index = n;\n                }\n            }\n    \
    \    }\n        if (smalest_value == 0) {\n            return new List<long>();\n\
    \        }\n        long smalest_even_value_2 = smalest_value % 2;\n        if\
    \ (smalest_even_value_2 == 0) {\n            result.Add(smalest_even_value);\n\
    \            result.Add(smalest_even_index);\n            return result;\n   \
    \     } else {\n            List<long> even_values = new List<long>();\n     \
    \       List<long> even_indexes = new List<long>();\n            foreach (long\
    \ n in arr) {\n                if (n % 2 == 0) {\n                    if (smalest_value\
    \ == 0) {\n                        smalest_value = n;\n                      \
    \  smalest_index = arr.IndexOf(n);\n                        smalest_even_value\
    \ = n % 2;\n                        smalest_even_index = n;\n                \
    \    } else if (smalest_value == n) {\n                        smalest_even_value\
    \ = n % 2;\n                        smalest_even_index = n;\n                \
    \    } else if (smalest_value < n) {\n                        smalest_value =\
    \ n;\n                        smalest_index = arr.IndexOf(n);\n              \
    \          smalest_even_value = n % 2;\n                        smalest_even_index\
    \ = n;\n                    }\n                }\n            }\n            even_values.Add(smalest_even_value);\n\
    \            even_indexes.Add(smalest_even_index);\n            even_values.AddRange(even_values.Where(x\
    \ => x % 2 == 1).Select(x => x % 2));\n            even_indexes.AddRange(even_indexes.Where(x\
    \ => x % 2 == 1).Select(x => x % 2));\n            even_values.Sort();\n     \
    \       even_indexes.Sort();\n            even_values.Reverse();\n           \
    \ even_indexes.Reverse();\n            even_values.Remove(smalest_even_value);\n\
    \            even_indexes.Remove(smalest_even", "        List<long> result = new\
    \ List<long>();\n        long smalest_value = arr.Min();\n        long smalest_index\
    \ = 0;\n        long smalest_even_value = 0;\n        bool found = false;\n  \
    \      for (int i = 0; i < arr.Count; i++) {\n            if (arr[i] % 2 == 0)\
    \ {\n                smalest_even_value = arr[i];\n                smalest_index\
    \ = i;\n                found = true;\n                break;\n            }\n\
    \        }\n        if (found) {\n            result.Add(smalest_even_value);\n\
    \            result.Add(smalest_index);\n        }\n        else {\n         \
    \   if (arr.Count == 0) {\n                result.Add(0);\n                result.Add(0);\n\
    \            }\n            else {\n                result.Add(smalest_value);\n\
    \                result.Add(0);\n            }\n        }\n        return result;",
  "        long smallest_value = arr.Min();\n        long smallest_index = 0;\n  \
    \      List<long> result = new List<long>();\n        foreach (long n in arr)\
    \ {\n            if (n % 2 == 0) {\n                if (smallest_value == n) {\n\
    \                    smallest_index = arr.IndexOf(n);\n                }\n   \
    \             else {\n                    if (smallest_value < n) {\n        \
    \                smallest_value = n;\n                        smallest_index =\
    \ arr.IndexOf(n);\n                    }\n                }\n            }\n \
    \       }\n        if (smallest_index != 0) {\n            result.Add(smallest_value);\n\
    \            result.Add(smallest_index);\n        }\n        return result;",
  "        List<long> result = new List<long>();\n        long smallestEvenValue =\
    \ arr.Min();\n        long smallestIndex = arr.IndexOf(smallestEvenValue);\n \
    \       if (smallestEvenValue % 2 == 0) {\n            result.Add(smallestEvenValue);\n\
    \            result.Add(smallestIndex);\n        }\n        else {\n         \
    \   int evenCount = 0;\n            int index = 0;\n            foreach (long\
    \ n in arr) {\n                if (n % 2 == 0) {\n                    evenCount++;\n\
    \                    if (evenCount > 1) {\n                        result.Add(n);\n\
    \                        result.Add(index);\n                        break;\n\
    \                    }\n                }\n                index++;\n        \
    \    }\n        }\n        return result;", "        List<long> result = new List<long>();\n\
    \        long smallest_value = 0;\n        long smallest_index = 0;\n        long\
    \ current_value = 0;\n        long current_index = 0;\n        foreach (long n\
    \ in arr) {\n            if (n % 2 == 0) {\n                current_value = n;\n\
    \                current_index = current_index + 1;\n            } else {\n  \
    \              if (current_value < smallest_value) {\n                    smallest_value\
    \ = current_value;\n                    smallest_index = current_index;\n    \
    \            }\n                current_value = n;\n                current_index\
    \ = current_index + 1;\n            }\n        }\n        if (smallest_value ==\
    \ 0) {\n            return new List<long>();\n        }\n        result.Add(smallest_value);\n\
    \        result.Add(smallest_index);\n        return result;", "        long smalest_value\
    \ = arr.Min();\n        long smalest_index = 0;\n        List<long> result = new\
    \ List<long>();\n        foreach (long n in arr) {\n            if (n % 2 == 0)\
    \ {\n                if (smalest_value < n) {\n                    smalest_value\
    \ = n;\n                    smalest_index = arr.IndexOf(n);\n                }\n\
    \            }\n        }\n        if (smalest_index != 0) {\n            result.Add(smalest_value);\n\
    \            result.Add(smalest_index);\n        }\n        return result;", " \
    \       List<long> result = new List<long>();\n        long smallestEvenValue\
    \ = arr.Min();\n        long smallestIndex = 0;\n        long smallestEvenValueIndex\
    \ = 0;\n        bool isSmallestEvenValue = true;\n        bool isSmallestEvenValueIndex\
    \ = true;\n        foreach (long n in arr) {\n            if (n % 2 == 0) {\n\
    \                if (isSmallestEvenValue) {\n                    smallestEvenValue\
    \ = n;\n                    smallestEvenValueIndex = arr.IndexOf(n);\n       \
    \         }\n                else {\n                    smallestEvenValue = n;\n\
    \                    smallestEvenValueIndex = arr.IndexOf(n);\n              \
    \      isSmallestEvenValue = true;\n                    isSmallestEvenValueIndex\
    \ = true;\n                }\n            }\n            else {\n            \
    \    if (isSmallestEvenValueIndex) {\n                    smallestEvenValue =\
    \ n;\n                    smallestEvenValueIndex = arr.IndexOf(n);\n         \
    \           isSmallestEvenValue = true;\n                    isSmallestEvenValueIndex\
    \ = false;\n                }\n                else {\n                    smallestEvenValue\
    \ = n;\n                    smallestEvenValueIndex = arr.IndexOf(n);\n       \
    \             isSmallestEvenValue = true;\n                    isSmallestEvenValueIndex\
    \ = true;\n                }\n            }\n        }\n        result.Add(smallestEvenValue);\n\
    \        result.Add(smallestEvenValueIndex);\n        return result;", "     \
    \   List<long> result = new List<long>();\n        long smallest_value = 0;\n\
    \        long smallest_index = 0;\n        bool found = false;\n        foreach\
    \ (var node in arr) {\n            if (node % 2 == 0) {\n                found\
    \ = true;\n                if (smallest_value == 0) {\n                    smallest_value\
    \ = node;\n                    smallest_index = arr.IndexOf(node);\n         \
    \       } else {\n                    if (smallest_value < node) {\n         \
    \               smallest_value = node;\n                        smallest_index\
    \ = arr.IndexOf(node);\n                    }\n                }\n           \
    \ }\n        }\n        if (found == true) {\n            result.Add(smallest_value);\n\
    \            result.Add(smallest_index);\n        }\n        return result;",
  "        long smalest_value = 0;\n        long smalest_index = 0;\n        List<long>\
    \ result = new List<long>();\n        foreach (var node in arr) {\n          \
    \  if (node % 2 == 0) {\n                if (smalest_value < node) {\n       \
    \             smalest_value = node;\n                    smalest_index = arr.IndexOf(node);\n\
    \                }\n            }\n        }\n        if (smalest_value == 0)\
    \ {\n            return new List<long>();\n        }\n        result.Add(smalest_value);\n\
    \        result.Add(smalest_index);\n        return result;", "        long smalest_value\
    \ = arr.Min();\n        long smalest_index = 0;\n        List<long> result = new\
    \ List<long>();\n        foreach (var item in arr) {\n            if (item % 2\
    \ == 0) {\n                if (item < smalest_value) {\n                    smalest_value\
    \ = item;\n                    smalest_index = arr.IndexOf(item);\n          \
    \      }\n            }\n        }\n        if (smalest_index > 0) {\n       \
    \     result.Add(smalest_value);\n            result.Add(smalest_index);\n   \
    \     }\n        return result;", "        List<long> result = new List<long>();\n\
    \        if (arr.Count == 0) {\n            return result;\n        }\n      \
    \  long minValue = arr.Min();\n        long minIndex = 0;\n        long minEvenValue\
    \ = 0;\n        bool isEven = false;\n        for (int i = 0; i < arr.Count; i++)\
    \ {\n            if (arr[i] % 2 == 0) {\n                isEven = true;\n    \
    \        }\n            if (isEven) {\n                if (arr[i] < minEvenValue)\
    \ {\n                    minEvenValue = arr[i];\n                    minIndex\
    \ = i;\n                }\n            }\n            else {\n               \
    \ if (arr[i] < minValue) {\n                    minValue = arr[i];\n         \
    \           minIndex = i;\n                }\n            }\n        }\n     \
    \   result.Add(minValue);\n        result.Add(minIndex);\n        return result;",
  "        List<long> result = new List<long>();\n        if (arr.Count == 0) {\n\
    \            return result;\n        }\n        long smallest_value = arr.Min();\n\
    \        long smallest_index = 0;\n        bool found = false;\n        for (int\
    \ i = 0; i < arr.Count; i++) {\n            if (arr[i] < smallest_value) {\n \
    \               smallest_value = arr[i];\n                smallest_index = i;\n\
    \                found = true;\n            }\n        }\n        if (found) {\n\
    \            result.Add(smallest_value);\n            result.Add(smallest_index);\n\
    \        }\n        return result;", "        List<long> result = new List<long>();\n\
    \        long smallestEven = arr.Min();\n        long smallestIndex = arr.IndexOf(smallestEven);\n\
    \        if (smallestIndex == -1) {\n            return result;\n        }\n \
    \       long smallestValue = arr[smallestIndex];\n        foreach (long n in arr)\
    \ {\n            if (n % 2 == 0) {\n                if (smallestEven < n) {\n\
    \                    smallestEven = n;\n                    smallestIndex = arr.IndexOf(n);\n\
    \                }\n            }\n        }\n        result.Add(smallestEven);\n\
    \        result.Add(smallestIndex);\n        return result;", "        List<long>\
    \ result = new List<long>();\n        long smallest_value = 0;\n        long smallest_index\
    \ = 0;\n        bool found = false;\n        foreach (long n in arr) {\n     \
    \       if (n % 2 == 0) {\n                if (smallest_value == 0) {\n      \
    \              smallest_value = n;\n                    smallest_index = arr.IndexOf(n);\n\
    \                    found = true;\n                } else if (smallest_value\
    \ < n) {\n                    smallest_value = n;\n                    smallest_index\
    \ = arr.IndexOf(n);\n                    found = true;\n                }\n  \
    \          }\n        }\n        if (found) {\n            result.Add(smallest_value);\n\
    \            result.Add(smallest_index);\n        }\n        return result;",
  "        List<long> result = new List<long>();\n        long smallest_value = 0;\n\
    \        long smallest_index = 0;\n        long smallest_even_value = 0;\n   \
    \     long smallest_even_index = 0;\n        foreach (long n in arr) {\n     \
    \       if (n % 2 == 0) {\n                if (smallest_value == 0) {\n      \
    \              smallest_value = n;\n                    smallest_index = arr.IndexOf(n);\n\
    \                    smallest_even_value = n % 2;\n                    smallest_even_index\
    \ = n;\n                } else if (smallest_value == n) {\n                  \
    \  smallest_even_value = n % 2;\n                    smallest_even_index = n;\n\
    \                } else if (smallest_value == n % 2) {\n                    smallest_even_value\
    \ = n % 2;\n                    smallest_even_index = n;\n                }\n\
    \            }\n        }\n        if (smallest_value == 0) {\n            result.Add(smallest_even_value);\n\
    \            result.Add(smallest_even_index);\n        } else if (smallest_value\
    \ == smallest_even_value) {\n            result.Add(smallest_even_index);\n  \
    \      } else {\n            result.Add(smallest_value);\n            result.Add(smallest_index);\n\
    \        }\n        return result;", "        long smallest_even_value = arr.Min();\n\
    \        long smallest_index = arr.IndexOf(smallest_even_value);\n        List<long>\
    \ result = new List<long>();\n        if (smallest_index != -1) {\n          \
    \  result.Add(smallest_even_value);\n            result.Add(smallest_index);\n\
    \        }\n        if (arr.Count > 0) {\n            foreach (var item in arr.Skip(smallest_index))\
    \ {\n                if (item % 2 == 0) {\n                    smallest_even_value\
    \ = item;\n                    smallest_index = arr.IndexOf(smallest_even_value);\n\
    \                    result.Add(smallest_even_value);\n                    result.Add(smallest_index);\n\
    \                }\n            }\n        }\n        return result;", "     \
    \   List<long> result = new List<long>();\n        long smallestEvenValue = arr.Min();\n\
    \        long smallestIndex = 0;\n        bool isEven = true;\n        for (int\
    \ i = 0; i < arr.Count; i++) {\n            if (arr[i] < smallestEvenValue) {\n\
    \                smallestEvenValue = arr[i];\n                smallestIndex =\
    \ i;\n                isEven = true;\n            } else if (arr[i] == smallestEvenValue)\
    \ {\n                isEven = false;\n            }\n        }\n        if (isEven)\
    \ {\n            result.Add(smallestEvenValue);\n            result.Add(smallestIndex);\n\
    \        } else {\n            int smallestIndex2 = arr.FindIndex(x => x == smallestEvenValue);\n\
    \            if (smallestIndex2 != -1) {\n                result.Add(smallestEvenValue);\n\
    \                result.Add(smallestIndex2);\n            }\n        }\n     \
    \   return result;", "        List<long> result = new List<long>();\n        long\
    \ smallestEvenValue = arr.Min();\n        long smallestIndex = 0;\n        long\
    \ smallestIndexValue = 0;\n        bool isSmallestEvenValue = true;\n        for\
    \ (int i = 0; i < arr.Count; i++) {\n            if (arr[i] < smallestEvenValue)\
    \ {\n                smallestEvenValue = arr[i];\n                smallestIndex\
    \ = i;\n                smallestIndexValue = arr[i];\n                isSmallestEvenValue\
    \ = true;\n            } else if (arr[i] == smallestEvenValue && i != smallestIndex)\
    \ {\n                isSmallestEvenValue = false;\n            }\n        }\n\
    \        if (isSmallestEvenValue) {\n            result.Add(smallestEvenValue);\n\
    \            result.Add(smallestIndex);\n        } else {\n            result.Add(smallestIndexValue);\n\
    \        }\n        return result;", "        long smalest_value = 0;\n      \
    \  long smalest_index = 0;\n        List<long> result = new List<long>();\n  \
    \      foreach (var node in arr) {\n            if (node % 2 == 0) {\n       \
    \         smalest_value = node;\n                smalest_index = arr.IndexOf(node);\n\
    \            }\n        }\n        if (smalest_value == 0) {\n            return\
    \ new List<long>();\n        }\n        List<long> evens = new List<long>();\n\
    \        foreach (var node in arr) {\n            if (node % 2 == 0) {\n     \
    \           evens.Add(node);\n            }\n        }\n        evens.Sort();\n\
    \        smalest_value = evens[0];\n        smalest_index = evens.IndexOf(smalest_value);\n\
    \        result.Add(smalest_value);\n        result.Add(smalest_index);\n    \
    \    return result;", "        List<long> result = new List<long>();\n       \
    \ long smallestEvenValue = arr.Min();\n        int smallestIndex = 0;\n      \
    \  bool isSmallestEvenValue = true;\n        for (int i = 0; i < arr.Count; i++)\
    \ {\n            if (arr[i] < smallestEvenValue) {\n                smallestEvenValue\
    \ = arr[i];\n                smallestIndex = i;\n                isSmallestEvenValue\
    \ = true;\n            }\n            else if (arr[i] == smallestEvenValue &&\
    \ i != smallestIndex) {\n                isSmallestEvenValue = false;\n      \
    \      }\n        }\n        if (isSmallestEvenValue) {\n            result.Add(smallestEvenValue);\n\
    \            result.Add(smallestIndex);\n        }\n        return result;", " \
    \       List<long> result = new List<long>();\n        long smallestEvenValue\
    \ = arr.Min();\n        long smallestIndex = 0;\n        bool isSmallestEvenValue\
    \ = true;\n        foreach (long n in arr) {\n            if (n % 2 == 0) {\n\
    \                if (smallestEvenValue > n) {\n                    smallestEvenValue\
    \ = n;\n                    smallestIndex = arr.IndexOf(n);\n                }\n\
    \                isSmallestEvenValue = true;\n            }\n            else\
    \ {\n                if (smallestEvenValue < n) {\n                    smallestEvenValue\
    \ = n;\n                    smallestIndex = arr.IndexOf(n);\n                }\n\
    \                isSmallestEvenValue = false;\n            }\n        }\n    \
    \    if (isSmallestEvenValue) {\n            result.Add(smallestEvenValue);\n\
    \            result.Add(smallestIndex);\n        }\n        else {\n         \
    \   result.Add(smallestIndex);\n        }\n        return result;", "        List<long>\
    \ result = new List<long>();\n        long smallestEvenValue = arr.Min();\n  \
    \      int smallestIndex = 0;\n        for (int i = 0; i < arr.Count; i++) {\n\
    \            if (arr[i] % 2 == 0) {\n                if (arr[i] < smallestEvenValue)\
    \ {\n                    smallestEvenValue = arr[i];\n                    smallestIndex\
    \ = i;\n                }\n            }\n        }\n        result.Add(smallestEvenValue);\n\
    \        result.Add(smallestIndex);\n        return result;", "        long smalest_value\
    \ = arr.Min();\n        List<long> result = new List<long>();\n        long smallest_index\
    \ = -1;\n        foreach (var item in arr) {\n            if (item % 2 == 0) {\n\
    \                if (smallest_index == -1) {\n                    smallest_index\
    \ = item;\n                    smalest_value = item;\n                } else {\n\
    \                    if (item < smalest_value) {\n                        smalest_value\
    \ = item;\n                        smallest_index = item;\n                  \
    \  }\n                }\n            }\n        }\n        if (smallest_index\
    \ != -1) {\n            result.Add(smallest_index);\n            result.Add(smalest_value);\n\
    \        }\n        return result;", "        List<long> result = new List<long>();\n\
    \        long smallest_value = 0;\n        long smallest_index = 0;\n        long\
    \ smallest_even_value = 0;\n        long smallest_even_count = 0;\n        foreach\
    \ (long i in arr) {\n            if (i % 2 == 0) {\n                smallest_even_value\
    \ = i;\n                smallest_even_count = 1;\n            }\n            else\
    \ {\n                if (smallest_even_count > 1) {\n                    smallest_value\
    \ = smallest_even_value;\n                    smallest_index = smallest_even_count;\n\
    \                }\n                else {\n                    smallest_value\
    \ = i;\n                    smallest_index = 1;\n                }\n         \
    \       smallest_even_count++;\n            }\n        }\n        if (smallest_even_count\
    \ == 0) {\n            return new List<long>();\n        }\n        if (smallest_even_count\
    \ == 1) {\n            result.Add(smallest_value);\n            result.Add(smallest_index);\n\
    \            return result;\n        }\n        List<long> evens = new List<long>();\n\
    \        foreach (long i in arr) {\n            if (i % 2 == 0) {\n          \
    \      evens.Add(i);\n            }\n        }\n        smallest_value = evens.Min();\n\
    \        smallest_index = evens.IndexOf(smallest_value);\n        result.Add(smallest_value);\n\
    \        result.Add(smallest_index);\n        return result;", "        List<long>\
    \ result = new List<long>();\n        long smalest_value = arr.Min();\n      \
    \  int smalest_index = 0;\n        for (int i = 0; i < arr.Count; i++) {\n   \
    \         if (arr[i] % 2 == 0) {\n                if (smalest_value < arr[i])\
    \ {\n                    smalest_value = arr[i];\n                    smalest_index\
    \ = i;\n                }\n            }\n        }\n        result.Add(smalest_value);\n\
    \        result.Add(smalest_index);\n        return result;", "        long smalest_value\
    \ = arr.Min();\n        long smalest_index = 0;\n        List<long> result = new\
    \ List<long>();\n        foreach (long n in arr) {\n            if (n % 2 == 0)\
    \ {\n                if (smalest_value < n) {\n                    smalest_value\
    \ = n;\n                    smalest_index = arr.IndexOf(n);\n                }\n\
    \            }\n        }\n        if (smalest_index != arr.IndexOf(smalest_value))\
    \ {\n            smalest_value = arr[smalest_index];\n        }\n        result.Add(smalest_value);\n\
    \        result.Add(smalest_index);\n        return result;", "        List<long>\
    \ result = new List<long>();\n        long smallestEvenValue = arr.Min();\n  \
    \      long smallestIndex = 0;\n        bool foundSmallestEvenValue = false;\n\
    \        bool foundSmallestIndex = false;\n        foreach (long n in arr) {\n\
    \            if (n % 2 == 0) {\n                if (smallestEvenValue == n) {\n\
    \                    foundSmallestEvenValue = true;\n                    smallestIndex\
    \ = n;\n                }\n                else if (smallestEvenValue < n) {\n\
    \                    foundSmallestEvenValue = true;\n                    smallestEvenValue\
    \ = n;\n                    smallestIndex = n;\n                }\n          \
    \  }\n            else {\n                if (smallestEvenValue == n) {\n    \
    \                foundSmallestEvenValue = true;\n                    smallestIndex\
    \ = n;\n                }\n                else if (smallestEvenValue < n) {\n\
    \                    foundSmallestEvenValue = true;\n                    smallestEvenValue\
    \ = n;\n                    smallestIndex = n;\n                }\n          \
    \  }\n        }\n        if (foundSmallestEvenValue) {\n            result.Add(smallestEvenValue);\n\
    \            result.Add(smallestIndex);\n        }\n        return result;", " \
    \       List<long> result = new List<long>();\n        long smallestEvenValue\
    \ = arr.Min();\n        long smallestIndex = 0;\n        long smallestValue =\
    \ 0;\n        foreach (long n in arr) {\n            if (n % 2 == 0) {\n     \
    \           if (smallestEvenValue < n) {\n                    smallestEvenValue\
    \ = n;\n                    smallestIndex = arr.IndexOf(n);\n                \
    \    smallestValue = n;\n                }\n            }\n        }\n       \
    \ if (smallestEvenValue == 0) {\n            return result;\n        }\n     \
    \   List<long> evenValues = new List<long>();\n        List<long> evenIndexes\
    \ = new List<long>();\n        foreach (long n in arr) {\n            if (n %\
    \ 2 == 0) {\n                evenValues.Add(n);\n                evenIndexes.Add(arr.IndexOf(n));\n\
    \            }\n        }\n        smallestValue = evenValues.Min();\n       \
    \ smallestIndex = evenIndexes.Min();\n        result.Add(smallestValue);\n   \
    \     result.Add(smallestIndex);\n        return result;", "        List<long>\
    \ result = new List<long>();\n        long smallestEven = arr.Min();\n       \
    \ int smallestIndex = arr.FindIndex(x => x == smallestEven);\n        if (smallestIndex\
    \ == -1) {\n            return result;\n        }\n        long smallestValue\
    \ = arr[smallestIndex];\n        long largestEven = arr.Max();\n        int largestIndex\
    \ = arr.FindIndex(x => x == largestEven);\n        if (largestIndex == -1) {\n\
    \            return result;\n        }\n        long largestValue = arr[largestIndex];\n\
    \        if (smallestValue == largestEven) {\n            result.Add(smallestEven);\n\
    \            result.Add(smallestIndex);\n            return result;\n        }\n\
    \        if (smallestIndex == largestIndex) {\n            result.Add(smallestEven);\n\
    \            result.Add(smallestIndex);\n            return result;\n        }\n\
    \        if (smallestIndex > largestIndex) {\n            int temp = smallestIndex;\n\
    \            smallestIndex = largestIndex;\n            largestIndex = temp;\n\
    \        }\n        long mid = smallestValue + largestValue;\n        if (mid\
    \ % 2 == 0) {\n            while (smallestIndex < largestIndex) {\n          \
    \      long mid = smallestValue + largestValue;\n                if (mid % 2 ==\
    \ 0) {\n                    result.Add(mid);\n                    smallestIndex++;\n\
    \                    largestIndex--;\n                } else {\n             \
    \       smallestIndex++;\n                }\n            }\n        } else {\n\
    \            while (smallestIndex < largestIndex) {\n                long mid\
    \ = smallestValue + largestValue;\n                if (mid % 2 == 0) {\n     \
    \               result.Add(mid);\n                    largestIndex--;\n      \
    \          } else {\n                    largestIndex--;\n                }\n\
    \            }\n        }\n        return result;", "        long smalest_value\
    \ = 0;\n        long smalest_index = 0;\n        List<long> result = new List<long>();\n\
    \        foreach (var node in arr) {\n            if (node % 2 == 0) {\n     \
    \           if (smalest_value == 0) {\n                    smalest_value = node;\n\
    \                    smalest_index = arr.IndexOf(node);\n                }\n \
    \               else if (node < smalest_value) {\n                    smalest_value\
    \ = node;\n                    smalest_index = arr.IndexOf(node);\n          \
    \      }\n            }\n        }\n        if (smalest_value == 0) {\n      \
    \      return new List<long>();\n        }\n        else {\n            result.Add(smalest_value);\n\
    \            result.Add(smalest_index);\n            return result;\n        }",
  "        List<long> result = new List<long>();\n        long smallest_value = arr.Min();\n\
    \        long smallest_index = 0;\n        long smallest_even_value = 0;\n   \
    \     bool found = false;\n        for (int i = 0; i < arr.Count; i++) {\n   \
    \         if (arr[i] % 2 == 0) {\n                found = true;\n            \
    \    smallest_even_value = arr[i];\n                smallest_index = i;\n    \
    \        }\n            if (found && arr[i] < smallest_value) {\n            \
    \    smallest_value = arr[i];\n                smallest_index = i;\n         \
    \       smallest_even_value = arr[i];\n            }\n        }\n        if (smallest_value\
    \ == 0) {\n            return result;\n        }\n        if (smallest_value ==\
    \ smallest_even_value) {\n            result.Add(smallest_value);\n          \
    \  result.Add(smallest_index);\n            return result;\n        }\n      \
    \  List<long> even_values = new List<long>();\n        for (int i = 0; i < arr.Count;\
    \ i++) {\n            if (arr[i] % 2 == 0) {\n                even_values.Add(arr[i]);\n\
    \            }\n        }\n        smallest_value = even_values.Min();\n     \
    \   smallest_index = even_values.IndexOf(smallest_value);\n        result.Add(smallest_value);\n\
    \        result.Add(smallest_index);\n        return result;", "        List<long>\
    \ result = new List<long>();\n        long smallestEvenValue = arr.Min();\n  \
    \      long smallestIndex = 0;\n        bool foundSmallestEvenValue = false;\n\
    \        for (int i = 0; i < arr.Count; i++) {\n            if (arr[i] % 2 ==\
    \ 0) {\n                foundSmallestEvenValue = true;\n                if (smallestEvenValue\
    \ > arr[i]) {\n                    smallestEvenValue = arr[i];\n             \
    \       smallestIndex = i;\n                }\n            }\n        }\n    \
    \    if (foundSmallestEvenValue) {\n            result.Add(smallestEvenValue);\n\
    \            result.Add(smallestIndex);\n        }\n        return result;", " \
    \       List<long> result = new List<long>();\n        if (arr.Count > 0) {\n\
    \            long smallest_value = arr.Min();\n            long smallest_index\
    \ = 0;\n            for (int i = 0; i < arr.Count; i++) {\n                if\
    \ (arr[i] < smallest_value) {\n                    smallest_value = arr[i];\n\
    \                    smallest_index = i;\n                }\n            }\n \
    \           result.Add(smallest_value);\n            result.Add(smallest_index);\n\
    \        }\n        return result;", "        long smalest_value = arr.Min();\n\
    \        long smalest_index = 0;\n        List<long> result = new List<long>();\n\
    \        foreach (long n in arr) {\n            if (n % 2 == 0) {\n          \
    \      if (smalest_value < n) {\n                    smalest_value = n;\n    \
    \                smalest_index = arr.IndexOf(n);\n                }\n        \
    \    }\n        }\n        if (smalest_index != arr.IndexOf(smalest_value)) {\n\
    \            smalest_value = arr[smalest_index];\n        }\n        result.Add(smalest_value);\n\
    \        result.Add(smalest_index);\n        return result;", "        List<long>\
    \ result = new List<long>();\n        long smallestEvenValue = arr.Min();\n  \
    \      long smallestIndex = 0;\n        for (int i = 0; i < arr.Count; i++) {\n\
    \            if (arr[i] % 2 == 0) {\n                if (arr[i] < smallestEvenValue)\
    \ {\n                    smallestEvenValue = arr[i];\n                    smallestIndex\
    \ = i;\n                }\n            }\n        }\n        result.Add(smallestEvenValue);\n\
    \        result.Add(smallestIndex);\n        return result;", "        long smalest_value\
    \ = 0;\n        int smalest_index = 0;\n        List<long> result = new List<long>();\n\
    \        foreach (long node in arr) {\n            if (node % 2 == 0) {\n    \
    \            if (smalest_value == 0) {\n                    smalest_value = node;\n\
    \                    smalest_index = arr.IndexOf(node);\n                }\n \
    \               else if (smalest_value < node) {\n                    smalest_value\
    \ = node;\n                    smalest_index = arr.IndexOf(node);\n          \
    \      }\n            }\n        }\n        if (smalest_value == 0) {\n      \
    \      return new List<long>();\n        }\n        else if (smalest_value < arr.First())\
    \ {\n            result.Add(smalest_value);\n            result.Add(smalest_index);\n\
    \        }\n        else {\n            result.Add(smalest_value);\n         \
    \   result.Add(smalest_index);\n        }\n        return result;", "        long\
    \ smallest_value = arr.Min();\n        long smallest_index = arr.IndexOf(smallest_value);\n\
    \        List<long> result = new List<long>();\n        long smallest_even_value\
    \ = smallest_value % 2 == 0 ? smallest_value : smallest_value - 1;\n        bool\
    \ found = false;\n        foreach (long n in arr) {\n            if (n % 2 ==\
    \ 0) {\n                if (smallest_even_value == n) {\n                    found\
    \ = true;\n                    break;\n                }\n                if (smallest_even_value\
    \ < n) {\n                    smallest_even_value = n;\n                    smallest_index\
    \ = arr.IndexOf(smallest_even_value);\n                }\n            }\n    \
    \    }\n        if (found) {\n            result.Add(smallest_even_value);\n \
    \           result.Add(smallest_index);\n        }\n        return result;"]
stop_tokens:
- "\n    }\n"
