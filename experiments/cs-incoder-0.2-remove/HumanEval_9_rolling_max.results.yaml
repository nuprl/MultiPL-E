language: cs
name: HumanEval_9_rolling_max
results:
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    public\
    \ static List<long> RollingMax(List<long> numbers) {\n        List<long> maxes\
    \ = new List<long>();\n        long max = 0;\n        long currentMax = 0;\n \
    \       foreach (long number in numbers) {\n            if (number > max) {\n\
    \                max = number;\n                currentMax = max;\n          \
    \  }\n            if (number == max) {\n                currentMax++;\n      \
    \      }\n            maxes.Add(currentMax);\n        }\n        return maxes;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(RollingMax((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(RollingMax((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new\
    \ List<long>(new long[]{(long)4L, (long)3L, (long)2L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <877dee5e66df4ed39087c97f240bca6d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <877dee5e66df4ed39087c97f240bca6d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660008889
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    public\
    \ static List<long> RollingMax(List<long> numbers) {\n        List<long> result\
    \ = new List<long>();\n        long maxValue = numbers.Max();\n        long currentMax\
    \ = maxValue;\n        long currentSum = 0;\n        long currentSumOfSquares\
    \ = 0;\n        long currentSumOfSquareOfDifferences = 0;\n        long currentSumOfDifferences\
    \ = 0;\n        long currentSumOfDifferenceSquares = 0;\n        long currentSumOfDifferenceSquareOfDifferences\
    \ = 0;\n        long currentSumOfDifferenceSquareOfDifferenceSquares = 0;\n  \
    \      long currentSumOfDifferenceSquareOfDifferenceSquareOfDifferences = 0;\n\
    \        long currentSumOfDifferenceSquareOfDifferenceSquareOfDifferenceSquares\
    \ = 0;\n        long currentSumOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferences\
    \ = 0;\n        long currentSumOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferenceSquares\
    \ = 0;\n        long currentSumOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferences\
    \ = 0;\n        long currentSumOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferences\
    \ = 0;\n        long currentSumOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferences\
    \ = 0;\n        long currentSumOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferenceSquares\
    \ = 0;\n        long currentSumOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferences\
    \ = 0;\n        long currentSumOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferences\
    \ = 0;\n        long currentSumOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferences\
    \ = 0;\n        long currentSumOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferences\
    \ = 0;\n        long currentSumOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferenceSquares\
    \ = 0;\n        long currentSumOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferences\
    \ = 0;\n        long currentSumOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferences\
    \ = 0;\n        long currentSumOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferences\
    \ = 0;\n        long currentSumOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferences\
    \ = 0;\n        long currentSumOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferenceSquares\
    \ = 0;\n        long currentSumOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferenceSquares\
    \ = 0;\n        long current\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L,\
    \ (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new\
    \ long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpjvi1z4zr.cs(41,21): error CS1002: ; expected

    '
  timestamp: 1660008889
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    public\
    \ static List<long> RollingMax(List<long> numbers) {\n        List<long> result\
    \ = new List<long>();\n        long maxValue = numbers.Max();\n        long currentMax\
    \ = maxValue;\n        long currentMaxIndex = 0;\n        long currentMaxIndexValue\
    \ = 0;\n        long currentMaxIndexValue2 = 0;\n        long currentMaxIndexValue3\
    \ = 0;\n        long currentMaxIndexValue4 = 0;\n        long currentMaxIndexValue5\
    \ = 0;\n        long currentMaxIndexValue6 = 0;\n        long currentMaxIndexValue7\
    \ = 0;\n        long currentMaxIndexValue8 = 0;\n        long currentMaxIndexValue9\
    \ = 0;\n        long currentMaxIndexValue10 = 0;\n        long currentMaxIndexValue11\
    \ = 0;\n        long currentMaxIndexValue12 = 0;\n        long currentMaxIndexValue13\
    \ = 0;\n        long currentMaxIndexValue14 = 0;\n        long currentMaxIndexValue15\
    \ = 0;\n        long currentMaxIndexValue16 = 0;\n        long currentMaxIndexValue17\
    \ = 0;\n        long currentMaxIndexValue18 = 0;\n        long currentMaxIndexValue19\
    \ = 0;\n        long currentMaxIndexValue20 = 0;\n        long currentMaxIndexValue21\
    \ = 0;\n        long currentMaxIndexValue22 = 0;\n        long currentMaxIndexValue23\
    \ = 0;\n        long currentMaxIndexValue24 = 0;\n        long currentMaxIndexValue25\
    \ = 0;\n        long currentMaxIndexValue26 = 0;\n        long currentMaxIndexValue27\
    \ = 0;\n        long currentMaxIndexValue28 = 0;\n        long currentMaxIndexValue29\
    \ = 0;\n        long currentMaxIndexValue30 = 0;\n        long currentMaxIndexValue31\
    \ = 0;\n        long currentMaxIndexValue32 = 0;\n        long currentMaxIndexValue33\
    \ = 0;\n        long currentMaxIndexValue34 = 0;\n        long currentMaxIndexValue35\
    \ = 0;\n        long currentMaxIndexValue36 = 0;\n        long currentMaxIndexValue37\
    \ = 0;\n        long currentMaxIndexValue38 = 0;\n        long currentMaxIndexValue39\
    \ = 0;\n        long currentMaxIndexValue40 = 0;\n        long currentMaxIndexValue41\
    \ = 0;\n        long currentMaxIndexValue42 = 0;\n        long currentMaxIndexValue43\
    \ = 0;\n        long currentMaxIndexValue44 = 0;\n        long currentMaxIndexValue45\
    \ = 0;\n        long currentMaxIndexValue46 = 0;\n        long currentMaxIndexValue47\
    \ = 0;\n        long currentMaxIndexValue48 = 0;\n        long currentMaxIndexValue49\
    \ = 0;\n        long currentMaxIndexValue50 = 0;\n        long currentMaxIndexValue51\
    \ = 0;\n        long currentMaxIndexValue52 = 0;\n        long currentMaxIndexValue53\
    \ = 0;\n        long currentMaxIndexValue54\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L,\
    \ (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new\
    \ long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp0ues37ym.cs(69,36): error CS1002: ; expected

    '
  timestamp: 1660008889
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    public\
    \ static List<long> RollingMax(List<long> numbers) {\n        List<long> result\
    \ = new List<long>();\n        long max = 0;\n        long currentMax = 0;\n \
    \       long currentMaxIndex = 0;\n        foreach (long number in numbers) {\n\
    \            if (number > max) {\n                max = number;\n            \
    \    currentMax = max;\n                currentMaxIndex = result.Count;\n    \
    \        }\n            else if (number == max) {\n                currentMax\
    \ = number;\n                currentMaxIndex = result.Count;\n            }\n\
    \            else {\n                result.Add(max);\n                max = number;\n\
    \                currentMax = max;\n                currentMaxIndex = result.Count;\n\
    \            }\n        }\n        result.Add(max);\n        result.Add(currentMax);\n\
    \        result.Add(currentMaxIndex);\n        return result;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new\
    \ long[]{(long)4L, (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <00ff1926a6cf4e3fb70b13a581134520>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <00ff1926a6cf4e3fb70b13a581134520>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660008889
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    public\
    \ static List<long> RollingMax(List<long> numbers) {\n        List<long> result\
    \ = new List<long>();\n        long max = 0;\n        long currentMax = 0;\n \
    \       long currentMaxIndex = 0;\n        long currentMaxValue = numbers[0];\n\
    \        foreach (long number in numbers) {\n            if (number > currentMaxValue)\
    \ {\n                currentMaxValue = number;\n                currentMaxIndex\
    \ = currentMaxValue - currentMax;\n            }\n            if (number > max)\
    \ {\n                max = number;\n            }\n            if (number == currentMaxValue)\
    \ {\n                result.Add(currentMaxIndex);\n            }\n        }\n\
    \        return result;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(RollingMax((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L,\
    \ (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new\
    \ long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n    }\n\n\
    }\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out\
    \ of range. Must be non-negative and less than the size of the collection.\nParameter\
    \ name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax\
    \ (System.Collections.Generic.List`1[T] numbers) [0x00010] in <a60bea446f3049af85bd58478c580b6b>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <a60bea446f3049af85bd58478c580b6b>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index\
    \ was out of range. Must be non-negative and less than the size of the collection.\n\
    Parameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax\
    \ (System.Collections.Generic.List`1[T] numbers) [0x00010] in <a60bea446f3049af85bd58478c580b6b>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <a60bea446f3049af85bd58478c580b6b>:0\
    \ \n"
  stdout: ''
  timestamp: 1660008889
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    public\
    \ static List<long> RollingMax(List<long> numbers) {\n        List<long> result\
    \ = new List<long>();\n        long maxValue = numbers.Max();\n        long currentMax\
    \ = maxValue;\n        long currentMaxIndex = 0;\n        long currentMaxIndexValue\
    \ = 0;\n        long currentMaxIndexValue2 = 0;\n        long currentMaxIndexValue3\
    \ = 0;\n        long currentMaxIndexValue4 = 0;\n        long currentMaxIndexValue5\
    \ = 0;\n        long currentMaxIndexValue6 = 0;\n        long currentMaxIndexValue7\
    \ = 0;\n        long currentMaxIndexValue8 = 0;\n        long currentMaxIndexValue9\
    \ = 0;\n        long currentMaxIndexValue10 = 0;\n        long currentMaxIndexValue11\
    \ = 0;\n        long currentMaxIndexValue12 = 0;\n        long currentMaxIndexValue13\
    \ = 0;\n        long currentMaxIndexValue14 = 0;\n        long currentMaxIndexValue15\
    \ = 0;\n        long currentMaxIndexValue16 = 0;\n        long currentMaxIndexValue17\
    \ = 0;\n        long currentMaxIndexValue18 = 0;\n        long currentMaxIndexValue19\
    \ = 0;\n        long currentMaxIndexValue20 = 0;\n        long currentMaxIndexValue21\
    \ = 0;\n        long currentMaxIndexValue22 = 0;\n        long currentMaxIndexValue23\
    \ = 0;\n        long currentMaxIndexValue24 = 0;\n        long currentMaxIndexValue25\
    \ = 0;\n        long currentMaxIndexValue26 = 0;\n        long currentMaxIndexValue27\
    \ = 0;\n        long currentMaxIndexValue28 = 0;\n        long currentMaxIndexValue29\
    \ = 0;\n        long currentMaxIndexValue30 = 0;\n        long currentMaxIndexValue31\
    \ = 0;\n        long currentMaxIndexValue32 = 0;\n        long currentMaxIndexValue33\
    \ = 0;\n        long currentMaxIndexValue34 = 0;\n        long currentMaxIndexValue35\
    \ = 0;\n        long currentMaxIndexValue36 = 0;\n        long currentMaxIndexValue37\
    \ = 0;\n        long currentMaxIndexValue38 = 0;\n        long currentMaxIndexValue39\
    \ = 0;\n        long currentMaxIndexValue40 = 0;\n        long currentMaxIndexValue41\
    \ = 0;\n        long currentMaxIndexValue42 = 0;\n        long currentMaxIndexValue43\
    \ = 0;\n        long currentMaxIndexValue44 = 0;\n        long currentMaxIndexValue45\
    \ = 0;\n        long currentMaxIndexValue46 = 0;\n        long currentMaxIndexValue47\
    \ = 0;\n        long currentMaxIndexValue48 = 0;\n        long currentMaxIndexValue49\
    \ = 0;\n        long currentMaxIndexValue50 = 0;\n        long currentMaxIndexValue51\
    \ = 0;\n        long currentMaxIndexValue52 = 0;\n        long currentMaxIndexValue53\
    \ = 0;\n        long currentMaxIndexValue54\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L,\
    \ (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new\
    \ long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp0ues37ym.cs(69,36): error CS1002: ; expected

    '
  timestamp: 1660008889
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    public\
    \ static List<long> RollingMax(List<long> numbers) {\n        List<long> result\
    \ = new List<long>();\n        long max = 0;\n        long currentMax = 0;\n \
    \       long currentSum = 0;\n        long currentSumOfSquares = 0;\n        long\
    \ currentSumOfSquareRoot = 0;\n        long currentSumOfSquareRootOfSquares =\
    \ 0;\n        long currentSumOfSquareRootOfSquareRoot = 0;\n        long currentSumOfSquareRootOfSquareRootOfSquares\
    \ = 0;\n        long currentSumOfSquareRootOfSquareRootOfSquareRoot = 0;\n   \
    \     long currentSumOfSquareRootOfSquareRootOfSquareRootOfSquares = 0;\n    \
    \    long currentSumOfSquareRootOfSquareRootOfSquareRootOfSquareRootOfSquares\
    \ = 0;\n        long currentSumOfSquareRootOfSquareRootOfSquareRootOfSquareRootOfSquareRootOfSquares\
    \ = 0;\n        long currentSumOfSquareRootOfSquareRootOfSquareRootOfSquareRootOfSquareRootOfSquareRootOfSquares\
    \ = 0;\n        long currentSumOfSquareRootOfSquareRootOfSquareRootOfSquareRootOfSquareRootOfSquareRootOfSquares\
    \ = 0;\n        long currentSumOfSquareRootOfSquareRootOfSquareRootOfSquareRootOfSquareRootOfSquareRootOfSquareRootOfSquares\
    \ = 0;\n        long currentSumOfSquareRootOfSquareRootOfSquareRootOfSquareRootOfSquareRootOfSquareRootOfSquareRootOfSquares\
    \ = 0;\n        long currentSumOfSquareRootOfSquareRootOfSquareRootOfSquareRootOfSquareRootOfSquareRootOfSquareRootOfSquares\
    \ = 0;\n        long currentSumOfSquareRootOfSquareRootOfSquareRootOfSquareRootOfSquareRootOfSquareRootOfSquareRootOfSquares\
    \ = 0;\n        long currentSumOfSquareRootOfSquareRootOfSquareRootOfSquareRootOfSquareRootOfSquareRootOfSquareRootOfSquares\
    \ = 0;\n        long currentSumOfSquareRootOfSquareRootOfSquareRootOfSquareRootOfSquareRootOfSquareRootOfSquareRootOfSquares\
    \ = 0;\n        long currentSumOfSquareRootOfSquareRootOfSquareRootOfSquareRootOfSquareRootOfSquareRootOfSquares\
    \ = 0;\n        long currentSumOfSquareRootOfSquareRootOfSquareRootOfSquareRootOfSquareRootOfSquareRootOfSquares\
    \ = 0;\n        long currentSumOfSquareRootOfSquareRootOfSquareRootOfSquareRootOfSquareRootOfSquareRootOfSquares\
    \ = 0;\n        long currentSumOfSquareRootOfSquareRootOfSquareRootOfSquareRootOfSquareRootOfSquareRootOfSquares\
    \ = 0;\n        long currentSumOfSquareRootOfSquareRootOfSquareRootOfSquareRootOfSquareRootOfSquareRootOfSquares\
    \ = 0;\n\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(RollingMax((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(RollingMax((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new\
    \ List<long>(new long[]{(long)4L, (long)3L, (long)2L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpepzditz1.cs(26,14): error CS0128: A local variable or function named ''currentSumOfSquareRootOfSquareRootOfSquareRootOfSquareRootOfSquareRootOfSquareRootOfSquares''
    is already defined in this scope

    /tmp/tmpepzditz1.cs(28,14): error CS0128: A local variable or function named ''currentSumOfSquareRootOfSquareRootOfSquareRootOfSquareRootOfSquareRootOfSquareRootOfSquareRootOfSquares''
    is already defined in this scope

    /tmp/tmpepzditz1.cs(29,14): error CS0128: A local variable or function named ''currentSumOfSquareRootOfSquareRootOfSquareRootOfSquareRootOfSquareRootOfSquareRootOfSquareRootOfSquares''
    is already defined in this scope

    /tmp/tmpepzditz1.cs(30,14): error CS0128: A local variable or function named ''currentSumOfSquareRootOfSquareRootOfSquareRootOfSquareRootOfSquareRootOfSquareRootOfSquareRootOfSquares''
    is already defined in this scope

    /tmp/tmpepzditz1.cs(31,14): error CS0128: A local variable or function named ''currentSumOfSquareRootOfSquareRootOfSquareRootOfSquareRootOfSquareRootOfSquareRootOfSquareRootOfSquares''
    is already defined in this scope

    /tmp/tmpepzditz1.cs(32,14): error CS0128: A local variable or function named ''currentSumOfSquareRootOfSquareRootOfSquareRootOfSquareRootOfSquareRootOfSquareRootOfSquareRootOfSquares''
    is already defined in this scope

    /tmp/tmpepzditz1.cs(33,14): error CS0128: A local variable or function named ''currentSumOfSquareRootOfSquareRootOfSquareRootOfSquareRootOfSquareRootOfSquareRootOfSquares''
    is already defined in this scope

    /tmp/tmpepzditz1.cs(34,14): error CS0128: A local variable or function named ''currentSumOfSquareRootOfSquareRootOfSquareRootOfSquareRootOfSquareRootOfSquareRootOfSquares''
    is already defined in this scope

    /tmp/tmpepzditz1.cs(35,14): error CS0128: A local variable or function named ''currentSumOfSquareRootOfSquareRootOfSquareRootOfSquareRootOfSquareRootOfSquareRootOfSquares''
    is already defined in this scope

    /tmp/tmpepzditz1.cs(36,14'
  timestamp: 1660008889
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    public\
    \ static List<long> RollingMax(List<long> numbers) {\n        List<long> result\
    \ = new List<long>();\n        long maxValue = numbers.Max();\n        long currentMax\
    \ = maxValue;\n        long currentMaxIndex = 0;\n        long currentMaxIndex2\
    \ = numbers.Count;\n        long currentMaxIndex3 = numbers.Count - 1;\n     \
    \   long currentMaxIndex4 = numbers.Count - 2;\n        long currentMaxIndex5\
    \ = numbers.Count - 3;\n        long currentMaxIndex6 = numbers.Count - 4;\n \
    \       long currentMaxIndex7 = numbers.Count - 5;\n        long currentMaxIndex8\
    \ = numbers.Count - 6;\n        long currentMaxIndex9 = numbers.Count - 7;\n \
    \       long currentMaxIndex10 = numbers.Count - 8;\n        long currentMaxIndex11\
    \ = numbers.Count - 9;\n        long currentMaxIndex12 = numbers.Count - 10;\n\
    \        long currentMaxIndex13 = numbers.Count - 11;\n        long currentMaxIndex14\
    \ = numbers.Count - 12;\n        long currentMaxIndex15 = numbers.Count - 13;\n\
    \        long currentMaxIndex16 = numbers.Count - 14;\n        long currentMaxIndex17\
    \ = numbers.Count - 15;\n        long currentMaxIndex18 = numbers.Count - 16;\n\
    \        long currentMaxIndex19 = numbers.Count - 17;\n        long currentMaxIndex20\
    \ = numbers.Count - 18;\n        long currentMaxIndex21 = numbers.Count - 19;\n\
    \        long currentMaxIndex22 = numbers.Count - 20;\n        long currentMaxIndex23\
    \ = numbers.Count - 21;\n        long currentMaxIndex24 = numbers.Count - 22;\n\
    \        long currentMaxIndex25 = numbers.Count - 23;\n        long currentMaxIndex26\
    \ = numbers.Count - 24;\n        long currentMaxIndex27 = numbers.Count - 25;\n\
    \        long currentMaxIndex28 = numbers.Count - 26;\n        long currentMaxIndex29\
    \ = numbers.Count - 27;\n        long currentMaxIndex30 = numbers.Count - 28;\n\
    \        long currentMaxIndex31 = numbers.Count - 29;\n        long currentMaxIndex32\
    \ = numbers.Count - 30;\n        long currentMaxIndex33 = numbers.Count - 31;\n\
    \        long currentMaxIndex34 = numbers.Count - 32;\n        long currentMaxIndex35\
    \ = numbers.Count - 33;\n        long currentMaxIndex36 = numbers.Count - 34;\n\
    \        long currentMaxIndex37 = numbers.Count - 35;\n        long currentMaxIndex38\
    \ = numbers.Count - 36;\n        long currentMaxIndex39 = numbers.Count - 37;\n\
    \        long currentMaxIndex40 = numbers.Count - 38;\n        long current\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(RollingMax((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(RollingMax((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new\
    \ List<long>(new long[]{(long)4L, (long)3L, (long)2L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpra9q84su.cs(55,21): error CS1002: ; expected

    '
  timestamp: 1660008889
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    public\
    \ static List<long> RollingMax(List<long> numbers) {\n        List<long> result\
    \ = new List<long>();\n        long max = 0;\n        long cur = 0;\n        foreach\
    \ (long n in numbers) {\n            if (n > max) {\n                max = n;\n\
    \                cur = n;\n            }\n            else if (n == max) {\n \
    \               cur += n;\n            }\n            else {\n               \
    \ result.Add(cur);\n                max = n;\n                cur = n;\n     \
    \       }\n        }\n        result.Add(cur);\n        return result;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(RollingMax((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(RollingMax((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new\
    \ List<long>(new long[]{(long)4L, (long)3L, (long)2L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d5dd0faab5d44efdb549a468a4fe585a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d5dd0faab5d44efdb549a468a4fe585a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660008889
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    public\
    \ static List<long> RollingMax(List<long> numbers) {\n        List<long> result\
    \ = new List<long>();\n        long maxValue = numbers.Max();\n        long currentMaxValue\
    \ = maxValue;\n        long currentMaxIndex = 0;\n        long currentMaxIndexValue\
    \ = 0;\n        long currentMaxIndexValue2 = 0;\n        long currentMaxIndexValue3\
    \ = 0;\n        long currentMaxIndexValue4 = 0;\n        long currentMaxIndexValue5\
    \ = 0;\n        long currentMaxIndexValue6 = 0;\n        long currentMaxIndexValue7\
    \ = 0;\n        long currentMaxIndexValue8 = 0;\n        long currentMaxIndexValue9\
    \ = 0;\n        long currentMaxIndexValue10 = 0;\n        long currentMaxIndexValue11\
    \ = 0;\n        long currentMaxIndexValue12 = 0;\n        long currentMaxIndexValue13\
    \ = 0;\n        long currentMaxIndexValue14 = 0;\n        long currentMaxIndexValue15\
    \ = 0;\n        long currentMaxIndexValue16 = 0;\n        long currentMaxIndexValue17\
    \ = 0;\n        long currentMaxIndexValue18 = 0;\n        long currentMaxIndexValue19\
    \ = 0;\n        long currentMaxIndexValue20 = 0;\n        long currentMaxIndexValue21\
    \ = 0;\n        long currentMaxIndexValue22 = 0;\n        long currentMaxIndexValue23\
    \ = 0;\n        long currentMaxIndexValue24 = 0;\n        long currentMaxIndexValue25\
    \ = 0;\n        long currentMaxIndexValue26 = 0;\n        long currentMaxIndexValue27\
    \ = 0;\n        long currentMaxIndexValue28 = 0;\n        long currentMaxIndexValue29\
    \ = 0;\n        long currentMaxIndexValue30 = 0;\n        long currentMaxIndexValue31\
    \ = 0;\n        long currentMaxIndexValue32 = 0;\n        long currentMaxIndexValue33\
    \ = 0;\n        long currentMaxIndexValue34 = 0;\n        long currentMaxIndexValue35\
    \ = 0;\n        long currentMaxIndexValue36 = 0;\n        long currentMaxIndexValue37\
    \ = 0;\n        long currentMaxIndexValue38 = 0;\n        long currentMaxIndexValue39\
    \ = 0;\n        long currentMaxIndexValue40 = 0;\n        long currentMaxIndexValue41\
    \ = 0;\n        long currentMaxIndexValue42 = 0;\n        long currentMaxIndexValue43\
    \ = 0;\n        long currentMaxIndexValue44 = 0;\n        long currentMaxIndexValue45\
    \ = 0;\n        long currentMaxIndexValue46 = 0;\n        long currentMaxIndexValue47\
    \ = 0;\n        long currentMaxIndexValue48 = 0;\n        long currentMaxIndexValue49\
    \ = 0;\n        long currentMaxIndexValue50 = 0;\n        long currentMaxIndexValue51\
    \ = 0;\n        long currentMaxIndexValue52 = 0;\n        long currentMaxIndexValue53\
    \ = 0;\n        long currentMaxIndexValue54\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L,\
    \ (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new\
    \ long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpr8mz57to.cs(69,36): error CS1002: ; expected

    '
  timestamp: 1660008889
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    public\
    \ static List<long> RollingMax(List<long> numbers) {\n        List<long> result\
    \ = new List<long>();\n        long max = 0;\n        long currentMax = 0;\n \
    \       long currentMaxIndex = 0;\n        long currentMaxValue = numbers[0];\n\
    \        long currentMaxValueIndex = numbers.IndexOf(currentMaxValue);\n     \
    \   long currentMaxValueDifference = currentMaxValue - currentMaxValueIndex;\n\
    \        long currentMaxValueDifferenceIndex = 0;\n        long currentMaxValueDifferenceValue\
    \ = currentMaxValueDifference;\n        long currentMaxValueDifferenceValueIndex\
    \ = numbers.IndexOf(currentMaxValueDifferenceValue);\n        long currentMaxValueDifferenceValueDifference\
    \ = currentMaxValueDifferenceValue - currentMaxValueDifferenceValueIndex;\n  \
    \      long currentMaxValueDifferenceValueDifferenceIndex = 0;\n        long currentMaxValueDifferenceValueDifferenceValue\
    \ = currentMaxValueDifferenceValueDifference;\n        long currentMaxValueDifferenceValueDifferenceValueIndex\
    \ = numbers.IndexOf(currentMaxValueDifferenceValueDifferenceValue);\n        long\
    \ currentMaxValueDifferenceValueDifferenceValueDifference = currentMaxValueDifferenceValueDifferenceValue\
    \ - currentMaxValueDifferenceValueDifferenceValueIndex;\n        long currentMaxValueDifferenceValueDifferenceValueDifferenceIndex\
    \ = 0;\n        long currentMaxValueDifferenceValueDifferenceValueDifferenceValue\
    \ = currentMaxValueDifferenceValueDifferenceValueDifference - currentMaxValueDifferenceValueDifferenceValueDifferenceIndex;\n\
    \        long currentMaxValueDifferenceValueDifferenceValueDifferenceValueIndex\
    \ = 0;\n        long currentMaxValueDifferenceValueDifferenceValueDifferenceValueDifference\
    \ = currentMaxValueDifferenceValueDifferenceValueDifferenceValue - currentMaxValueDifferenceValueDifferenceValueDifferenceValueIndex;\n\
    \        long currentMaxValueDifferenceValueDifferenceValueDifferenceValueDifferenceIndex\
    \ = 0;\n        long currentMaxValueDifferenceValueDifferenceValueDifferenceValueDifferenceValue\
    \ = currentMaxValueDifferenceValueDifferenceValueDifferenceValueDifference - currentMaxValueDifferenceValueDifferenceValueDifferenceValueIndex;\n\
    \        long currentMaxValueDifferenceValueDifferenceValueDifferenceValueDifferenceValueIndex\
    \ = 0;\n        long currentMaxValueDifferenceValueDifferenceValueDifferenceValueDifferenceValueDifference\
    \ = currentMaxValueDifferenceValueDifferenceValueDifferenceValueDifferenceValue\
    \ - currentMaxValueDifferenceValueDifferenceValueDifferenceValueDifferenceIndex;\n\
    \        long currentMaxValueDifferenceValueDifferenceValueDifferenceValueDifferenceValueDifferenceIndex\
    \ = 0;\n        long currentMaxValueDifferenceValueDifferenceValueDifferenceValueDifferenceValueDifference\
    \ = currentMaxValueDifferenceValueDifferenceValueDifferenceValueDifferenceValue\
    \ - currentMaxValueDifferenceValueDifferenceValueDifferenceValueDifferenceIndex;\n\
    \        long currentMaxValueDifferenceValueDifferenceValueDifferenceValueDifferenceValueDifferenceIndex\
    \ = 0;\n        long currentMaxValueDifferenceValueDifferenceValueDifferenceValueDifferenceValueDifferenceValueDifference\
    \ = currentMaxValueDifferenceValueDifferenceValueDifferenceValueDifferenceValueDifference\
    \ - currentMaxValueDifferenceValueDifferenceValue\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new\
    \ long[]{(long)4L, (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpsco2ebkr.cs(38,250): error CS1002: ; expected

    '
  timestamp: 1660008889
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    public\
    \ static List<long> RollingMax(List<long> numbers) {\n        List<long> max =\
    \ new List<long>();\n        long maxValue = numbers.Max();\n        long currentMaxValue\
    \ = maxValue;\n        long currentMaxIndex = -1;\n        long currentMaxIndexValue\
    \ = numbers.Last();\n        long currentMaxIndexValue2 = numbers.Last();\n  \
    \      long currentMaxIndexValue3 = numbers.Last();\n        long currentMaxIndexValue4\
    \ = numbers.Last();\n        long currentMaxIndexValue5 = numbers.Last();\n  \
    \      long currentMaxIndexValue6 = numbers.Last();\n        long currentMaxIndexValue7\
    \ = numbers.Last();\n        long currentMaxIndexValue8 = numbers.Last();\n  \
    \      long currentMaxIndexValue9 = numbers.Last();\n        long currentMaxIndexValue10\
    \ = numbers.Last();\n        long currentMaxIndexValue11 = numbers.Last();\n \
    \       long currentMaxIndexValue12 = numbers.Last();\n        long currentMaxIndexValue13\
    \ = numbers.Last();\n        long currentMaxIndexValue14 = numbers.Last();\n \
    \       long currentMaxIndexValue15 = numbers.Last();\n        long currentMaxIndexValue16\
    \ = numbers.Last();\n        long currentMaxIndexValue17 = numbers.Last();\n \
    \       long currentMaxIndexValue18 = numbers.Last();\n        long currentMaxIndexValue19\
    \ = numbers.Last();\n        long currentMaxIndexValue20 = numbers.Last();\n \
    \       long currentMaxIndexValue21 = numbers.Last();\n        long currentMaxIndexValue22\
    \ = numbers.Last();\n        long currentMaxIndexValue23 = numbers.Last();\n \
    \       long currentMaxIndexValue24 = numbers.Last();\n        long currentMaxIndexValue25\
    \ = numbers.Last();\n        long currentMaxIndexValue26 = numbers.Last();\n \
    \       long currentMaxIndexValue27 = numbers.Last();\n        long currentMaxIndexValue28\
    \ = numbers.Last();\n        long currentMaxIndexValue29 = numbers.Last();\n \
    \       long currentMaxIndexValue30 = numbers.Last();\n        long currentMaxIndexValue31\
    \ = numbers.Last();\n        long currentMaxIndexValue32 = numbers.Last();\n \
    \       long currentMaxIndexValue33 = numbers.Last();\n        long currentMaxIndexValue34\
    \ = numbers.Last();\n        long currentMaxIndexValue35 = numbers.Last();\n \
    \       long currentMaxIndexValue36 = numbers.Last();\n        long currentMaxIndexValue37\
    \ = numbers.Last();\n        long currentMaxIndexValue38 = numbers.Last();\n \
    \       long currentMaxIndexValue39 = numbers.Last();\n        long currentMaxIndexValue40\
    \ = numbers.Last();\n        long currentMaxIndexValue41 = numbers.Last();\n\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(RollingMax((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(RollingMax((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new\
    \ List<long>(new long[]{(long)4L, (long)3L, (long)2L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpnd2noyo4.cs(15,14): warning CS0219: The variable ''currentMaxIndex'' is
    assigned but its value is never used

    /tmp/tmpnd2noyo4.cs(11,30): error CS0161: ''Problem.RollingMax(List<long>)'':
    not all code paths return a value

    '
  timestamp: 1660008889
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    public\
    \ static List<long> RollingMax(List<long> numbers) {\n        List<long> result\
    \ = new List<long>();\n        long maxValue = numbers.Max();\n        long currentMax\
    \ = maxValue;\n        long currentSum = 0;\n        long currentSumOfSquares\
    \ = 0;\n        long currentSumOfCubes = 0;\n        long currentSumOfPowers =\
    \ 0;\n        long currentSumOfPowersOfSquares = 0;\n        long currentSumOfPowersOfCubes\
    \ = 0;\n        long currentSumOfPowersOfPowers = 0;\n        long currentSumOfPowersOfPowersOfSquares\
    \ = 0;\n        long currentSumOfPowersOfPowersOfCubes = 0;\n        long currentSumOfPowersOfPowersOfPowers\
    \ = 0;\n        long currentSumOfPowersOfPowersOfPowersOfSquares = 0;\n      \
    \  long currentSumOfPowersOfPowersOfPowersOfCubes = 0;\n        long currentSumOfPowersOfPowersOfPowersOfPowers\
    \ = 0;\n        long currentSumOfPowersOfPowersOfPowersOfSquares = 0;\n      \
    \  long currentSumOfPowersOfPowersOfPowersOfCubes = 0;\n        long currentSumOfPowersOfPowersOfPowersOfPowers\
    \ = 0;\n        long currentSumOfPowersOfPowersOfPowersOfSquares = 0;\n      \
    \  long currentSumOfPowersOfPowersOfPowersOfCubes = 0;\n        long currentSumOfPowersOfPowersOfPowersOfPowers\
    \ = 0;\n        long currentSumOfPowersOfPowersOfPowersOfSquares = 0;\n      \
    \  long currentSumOfPowersOfPowersOfPowersOfCubes = 0;\n        long currentSumOfPowersOfPowersOfPowersOfPowers\
    \ = 0;\n        long currentSumOfPowersOfPowersOfPowersOfSquares = 0;\n      \
    \  long currentSumOfPowersOfPowersOfPowersOfCubes = 0;\n        long currentSumOfPowersOfPowersOfPowersOfPowers\
    \ = 0;\n        long currentSumOfPowersOfPowersOfPowersOfSquares = 0;\n      \
    \  long currentSumOfPowersOfPowersOfPowersOfCubes = 0;\n        long currentSumOfPowersOfPowersOfPowersOfPowers\
    \ = 0;\n        long currentSumOfPowersOfPowersOfPowersOfSquares = 0;\n      \
    \  long currentSumOfPowersOfPowersOfPowersOfCubes = 0;\n        long currentSumOfPowersOfPowersOfPowersOfPowers\
    \ = 0;\n        long currentSumOfPowersOfPowersOfPowersOfSquares = 0;\n      \
    \  long currentSumOfPowers\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L,\
    \ (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new\
    \ long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpa7d0mosa.cs(47,32): error CS1002: ; expected

    '
  timestamp: 1660008889
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    public\
    \ static List<long> RollingMax(List<long> numbers) {\n        List<long> max =\
    \ new List<long>();\n        long maxValue = numbers.First();\n        long currentMaxValue\
    \ = maxValue;\n        long currentMaxIndex = 0;\n        foreach (long number\
    \ in numbers) {\n            if (number > currentMaxValue) {\n               \
    \ currentMaxValue = number;\n                currentMaxIndex = max.Count;\n  \
    \          }\n            max.Add(currentMaxValue);\n        }\n        max.Add(currentMaxValue);\n\
    \        return max;\n    }\n    public static void Main(string[] args) {\n  \
    \  Debug.Assert(RollingMax((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L,\
    \ (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new\
    \ long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n    }\n\n\
    }\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.InvalidOperationException: Sequence contains\
    \ no elements\n  at System.Linq.Enumerable.First[TSource] (System.Collections.Generic.IEnumerable`1[T]\
    \ source) [0x00010] in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem.RollingMax\
    \ (System.Collections.Generic.List`1[T] numbers) [0x00007] in <15af133cf8234a91bc24bb4688869873>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <15af133cf8234a91bc24bb4688869873>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.InvalidOperationException: Sequence\
    \ contains no elements\n  at System.Linq.Enumerable.First[TSource] (System.Collections.Generic.IEnumerable`1[T]\
    \ source) [0x00010] in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem.RollingMax\
    \ (System.Collections.Generic.List`1[T] numbers) [0x00007] in <15af133cf8234a91bc24bb4688869873>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <15af133cf8234a91bc24bb4688869873>:0\
    \ \n"
  stdout: ''
  timestamp: 1660008889
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    public\
    \ static List<long> RollingMax(List<long> numbers) {\n        List<long> result\
    \ = new List<long>();\n        long max = 0;\n        long currentMax = 0;\n \
    \       long currentSum = 0;\n        long sum = 0;\n        long lastSum = 0;\n\
    \        long lastMax = 0;\n        long lastSum2 = 0;\n        long lastMax2\
    \ = 0;\n        long lastSum3 = 0;\n        long lastMax3 = 0;\n        long lastSum4\
    \ = 0;\n        long lastMax4 = 0;\n        long lastSum5 = 0;\n        long lastMax5\
    \ = 0;\n        long lastSum6 = 0;\n        long lastMax6 = 0;\n        long lastSum7\
    \ = 0;\n        long lastMax7 = 0;\n        long lastSum8 = 0;\n        long lastMax8\
    \ = 0;\n        long lastSum9 = 0;\n        long lastMax9 = 0;\n        long lastSum10\
    \ = 0;\n        long lastMax10 = 0;\n        long lastSum11 = 0;\n        long\
    \ lastMax11 = 0;\n        long lastSum12 = 0;\n        long lastMax12 = 0;\n \
    \       long lastSum13 = 0;\n        long lastMax13 = 0;\n        long lastSum14\
    \ = 0;\n        long lastMax14 = 0;\n        long lastSum15 = 0;\n        long\
    \ lastMax15 = 0;\n        long lastSum16 = 0;\n        long lastMax16 = 0;\n \
    \       long lastSum17 = 0;\n        long lastMax17 = 0;\n        long lastSum18\
    \ = 0;\n        long lastMax18 = 0;\n        long lastSum19 = 0;\n        long\
    \ lastMax19 = 0;\n        long lastSum20 = 0;\n        long lastMax20 = 0;\n \
    \       long lastSum21 = 0;\n        long lastMax21 = 0;\n        long lastSum22\
    \ = 0;\n        long lastMax22 = 0;\n        long lastSum23 = 0;\n        long\
    \ lastMax23 = 0;\n        long lastSum24 = 0;\n        long lastMax24 = 0;\n \
    \       long lastSum25 = 0;\n        long lastMax25 = 0;\n        long lastSum26\
    \ = 0;\n        long lastMax26 = 0;\n        long lastSum27 = 0;\n        long\
    \ lastMax27 = 0;\n        long lastSum28 = 0;\n        long lastMax28 = 0;\n \
    \       long lastSum29 = 0;\n        long lastMax29 = 0;\n        long lastSum30\
    \ = 0;\n        long lastMax30 = 0;\n        long lastSum31 = 0;\n        long\
    \ lastMax31 = 0;\n        long lastSum32 = 0;\n        long lastMax32 = 0;\n \
    \       long lastSum33 = 0;\n        long lastMax33 = 0;\n        long lastSum34\
    \ = 0;\n        long lastMax34 = 0;\n        long lastSum35 = 0;\n        long\
    \ lastMax35 = 0;\n\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(RollingMax((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(RollingMax((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new\
    \ List<long>(new long[]{(long)4L, (long)3L, (long)2L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmps7kn2wjt.cs(13,14): warning CS0219: The variable ''max'' is assigned but
    its value is never used

    /tmp/tmps7kn2wjt.cs(14,14): warning CS0219: The variable ''currentMax'' is assigned
    but its value is never used

    /tmp/tmps7kn2wjt.cs(15,14): warning CS0219: The variable ''currentSum'' is assigned
    but its value is never used

    /tmp/tmps7kn2wjt.cs(16,14): warning CS0219: The variable ''sum'' is assigned but
    its value is never used

    /tmp/tmps7kn2wjt.cs(17,14): warning CS0219: The variable ''lastSum'' is assigned
    but its value is never used

    /tmp/tmps7kn2wjt.cs(18,14): warning CS0219: The variable ''lastMax'' is assigned
    but its value is never used

    /tmp/tmps7kn2wjt.cs(19,14): warning CS0219: The variable ''lastSum2'' is assigned
    but its value is never used

    /tmp/tmps7kn2wjt.cs(20,14): warning CS0219: The variable ''lastMax2'' is assigned
    but its value is never used

    /tmp/tmps7kn2wjt.cs(21,14): warning CS0219: The variable ''lastSum3'' is assigned
    but its value is never used

    /tmp/tmps7kn2wjt.cs(22,14): warning CS0219: The variable ''lastMax3'' is assigned
    but its value is never used

    /tmp/tmps7kn2wjt.cs(23,14): warning CS0219: The variable ''lastSum4'' is assigned
    but its value is never used

    /tmp/tmps7kn2wjt.cs(24,14): warning CS0219: The variable ''lastMax4'' is assigned
    but its value is never used

    /tmp/tmps7kn2wjt.cs(25,14): warning CS0219: The variable ''lastSum5'' is assigned
    but its value is never used

    /tmp/tmps7kn2wjt.cs(26,14): warning CS0219: The variable ''lastMax5'' is assigned
    but its value is never used

    /tmp/tmps7kn2wjt.cs(27,14): warning CS0219: The variable ''lastSum6'' is assigned
    but its value is never used

    /tmp/tmps7kn2wjt.cs(28,14): warning CS0219: The variable ''lastMax6'' is assigned
    but its value is never used

    /tmp/tmps7kn2wjt.cs(29,14): warning CS0219: The variable ''lastSum7'' is assigned
    but its value is never used

    /tmp/tmps7kn2wjt.cs(30,14): warning CS0219: The variable ''lastMax7'' is assigned
    but its value'
  timestamp: 1660008889
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    public\
    \ static List<long> RollingMax(List<long> numbers) {\n        List<long> result\
    \ = new List<long>();\n        long maxValue = numbers.Max();\n        long currentMax\
    \ = maxValue;\n        long currentMaxIndex = 0;\n        long currentMaxIndexCount\
    \ = 0;\n        long currentMaxIndexCount2 = 0;\n        long currentMaxIndexCount3\
    \ = 0;\n        long currentMaxIndexCount4 = 0;\n        long currentMaxIndexCount5\
    \ = 0;\n        long currentMaxIndexCount6 = 0;\n        long currentMaxIndexCount7\
    \ = 0;\n        long currentMaxIndexCount8 = 0;\n        long currentMaxIndexCount9\
    \ = 0;\n        long currentMaxIndexCount10 = 0;\n        long currentMaxIndexCount11\
    \ = 0;\n        long currentMaxIndexCount12 = 0;\n        long currentMaxIndexCount13\
    \ = 0;\n        long currentMaxIndexCount14 = 0;\n        long currentMaxIndexCount15\
    \ = 0;\n        long currentMaxIndexCount16 = 0;\n        long currentMaxIndexCount17\
    \ = 0;\n        long currentMaxIndexCount18 = 0;\n        long currentMaxIndexCount19\
    \ = 0;\n        long currentMaxIndexCount20 = 0;\n        long currentMaxIndexCount21\
    \ = 0;\n        long currentMaxIndexCount22 = 0;\n        long currentMaxIndexCount23\
    \ = 0;\n        long currentMaxIndexCount24 = 0;\n        long currentMaxIndexCount25\
    \ = 0;\n        long currentMaxIndexCount26 = 0;\n        long currentMaxIndexCount27\
    \ = 0;\n        long currentMaxIndexCount28 = 0;\n        long currentMaxIndexCount29\
    \ = 0;\n        long currentMaxIndexCount30 = 0;\n        long currentMaxIndexCount31\
    \ = 0;\n        long currentMaxIndexCount32 = 0;\n        long currentMaxIndexCount33\
    \ = 0;\n        long currentMaxIndexCount34 = 0;\n        long currentMaxIndexCount35\
    \ = 0;\n        long currentMaxIndexCount36 = 0;\n        long currentMaxIndexCount37\
    \ = 0;\n        long currentMaxIndexCount38 = 0;\n        long currentMaxIndexCount39\
    \ = 0;\n        long currentMaxIndexCount40 = 0;\n        long currentMaxIndexCount41\
    \ = 0;\n        long currentMaxIndexCount42 = 0;\n        long currentMaxIndexCount43\
    \ = 0;\n        long currentMaxIndexCount44 = 0;\n        long currentMaxIndexCount45\
    \ = 0;\n        long currentMaxIndexCount46 = 0;\n        long currentMaxIndexCount47\
    \ = 0;\n        long currentMaxIndexCount48 = 0;\n        long currentMaxIndexCount49\
    \ = 0;\n        long currentMaxIndexCount50 = 0;\n        long currentMaxIndexCount51\
    \ = 0;\n        long currentMaxIndexCount52 = 0;\n        long currentMaxIndexCount53\
    \ = 0;\n        long currentMaxIndexCount54\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L,\
    \ (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new\
    \ long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpzkdsd8js.cs(69,36): error CS1002: ; expected

    '
  timestamp: 1660008889
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    public\
    \ static List<long> RollingMax(List<long> numbers) {\n        List<long> max =\
    \ new List<long>();\n        long maxElement = numbers.Max();\n        long currentMaxElement\
    \ = maxElement;\n        long currentMaxElementIndex = -1;\n        long currentMaxElementIndexInMax\
    \ = -1;\n        long currentMaxElementIndexInMaxInMax = -1;\n        long currentMaxElementIndexInMaxInMaxInMax\
    \ = -1;\n        long currentMaxElementIndexInMaxInMaxInMaxInMax = -1;\n     \
    \   long currentMaxElementIndexInMaxInMaxInMaxInMaxInMax = -1;\n        long currentMaxElementIndexInMaxInMaxInMaxInMaxInMaxInMax\
    \ = -1;\n        long currentMaxElementIndexInMaxInMaxInMaxInMaxInMaxInMaxInMax\
    \ = -1;\n        long currentMaxElementIndexInMaxInMaxInMaxInMaxInMaxInMaxInMaxInMax\
    \ = -1;\n        long currentMaxElementIndexInMaxInMaxInMaxInMaxInMaxInMaxInMaxInMax\
    \ = -1;\n        long currentMaxElementIndexInMaxInMaxInMaxInMaxInMaxInMaxInMaxInMaxInMax\
    \ = -1;\n        long currentMaxElementIndexInMaxInMaxInMaxInMaxInMaxInMaxInMaxInMaxInMaxInMax\
    \ = -1;\n        long currentMaxElementIndexInMaxInMaxInMaxInMaxInMaxInMaxInMaxInMaxInMaxInMax\
    \ = -1;\n        long currentMaxElementIndexInMaxInMaxInMaxInMaxInMaxInMaxInMaxInMaxInMaxInMax\
    \ = -1;\n        long currentMaxElementIndexInMaxInMaxInMaxInMaxInMaxInMaxInMaxInMaxInMaxInMaxInMax\
    \ = -1;\n        long currentMaxElementIndexInMaxInMaxInMaxInMaxInMaxInMaxInMaxInMaxInMaxInMaxInMax\
    \ = -1;\n        long currentMaxElementIndexInMaxInMaxInMaxInMaxInMaxInMaxInMaxInMaxInMaxInMaxInMax\
    \ = -1;\n        long currentMaxElementIndexInMaxInMaxInMaxInMaxInMaxInMaxInMaxInMaxInMaxInMaxInMax\
    \ = -1;\n        long currentMaxElementIndexInMaxInMaxInMaxInMaxInMaxInMaxInMaxInMaxInMaxInMaxInMaxInMax\
    \ = -1;\n        long currentMaxElementIndexInMaxInMaxInMaxInMaxInMaxInMaxInMaxInMaxInMaxInMaxInMaxInMax\
    \ = -1;\n        long current\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L,\
    \ (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new\
    \ long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp55uyfvse.cs(35,21): error CS1002: ; expected

    '
  timestamp: 1660008889
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    public\
    \ static List<long> RollingMax(List<long> numbers) {\n        List<long> result\
    \ = new List<long>();\n        long maxValue = numbers.Max();\n        long currentMax\
    \ = maxValue;\n        long currentMaxIndex = 0;\n        long currentMaxIndex2\
    \ = 0;\n        long currentMaxIndex3 = 0;\n        long currentMaxIndex4 = 0;\n\
    \        long currentMaxIndex5 = 0;\n        long currentMaxIndex6 = 0;\n    \
    \    long currentMaxIndex7 = 0;\n        long currentMaxIndex8 = 0;\n        long\
    \ currentMaxIndex9 = 0;\n        long currentMaxIndex10 = 0;\n        long currentMaxIndex11\
    \ = 0;\n        long currentMaxIndex12 = 0;\n        long currentMaxIndex13 =\
    \ 0;\n        long currentMaxIndex14 = 0;\n        long currentMaxIndex15 = 0;\n\
    \        long currentMaxIndex16 = 0;\n        long currentMaxIndex17 = 0;\n  \
    \      long currentMaxIndex18 = 0;\n        long currentMaxIndex19 = 0;\n    \
    \    long currentMaxIndex20 = 0;\n        long currentMaxIndex21 = 0;\n      \
    \  long currentMaxIndex22 = 0;\n        long currentMaxIndex23 = 0;\n        long\
    \ currentMaxIndex24 = 0;\n        long currentMaxIndex25 = 0;\n        long currentMaxIndex26\
    \ = 0;\n        long currentMaxIndex27 = 0;\n        long currentMaxIndex28 =\
    \ 0;\n        long currentMaxIndex29 = 0;\n        long currentMaxIndex30 = 0;\n\
    \        long currentMaxIndex31 = 0;\n        long currentMaxIndex32 = 0;\n  \
    \      long currentMaxIndex33 = 0;\n        long currentMaxIndex34 = 0;\n    \
    \    long currentMaxIndex35 = 0;\n        long currentMaxIndex36 = 0;\n      \
    \  long currentMaxIndex37 = 0;\n        long currentMaxIndex38 = 0;\n        long\
    \ currentMaxIndex39 = 0;\n        long currentMaxIndex40 = 0;\n        long currentMaxIndex41\
    \ = 0;\n        long currentMaxIndex42 = 0;\n        long currentMaxIndex43 =\
    \ 0;\n        long currentMaxIndex44 = 0;\n        long currentMaxIndex45 = 0;\n\
    \        long currentMaxIndex46 = 0;\n        long currentMaxIndex47 = 0;\n  \
    \      long currentMaxIndex48 = 0;\n        long currentMaxIndex49 = 0;\n    \
    \    long currentMaxIndex50 = 0;\n        long currentMaxIndex51 = 0;\n      \
    \  long currentMaxIndex52 = 0;\n        long currentMaxIndex53 = 0;\n        long\
    \ currentMaxIndex54 = 0;\n        long currentMaxIndex55 = 0;\n        long currentMaxIndex56\
    \ = 0;\n        long currentMaxIndex57 = 0;\n        long currentMaxIndex58 =\
    \ 0;\n        long currentMaxIndex59 = 0;\n        long currentMaxIndex60 = 0;\n\
    \        long currentMaxIndex61 = 0;\n        long current\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new\
    \ long[]{(long)4L, (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmphd0j6__f.cs(76,21): error CS1002: ; expected

    '
  timestamp: 1660008889
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    public\
    \ static List<long> RollingMax(List<long> numbers) {\n        List<long> result\
    \ = new List<long>();\n        long max = numbers.Max();\n        long currentMax\
    \ = max;\n        long currentMaxIndex = 0;\n        long currentMaxValue = numbers[0];\n\
    \        long currentMaxValueIndex = numbers.IndexOf(currentMaxValue);\n     \
    \   long currentMaxValueValue = currentMaxValue;\n        long currentMaxValueValueIndex\
    \ = numbers.IndexOf(currentMaxValueValue);\n        long currentMaxValueValueValue\
    \ = currentMaxValueValue;\n        long currentMaxValueValueValueIndex = numbers.IndexOf(currentMaxValueValueValue);\n\
    \        long currentMaxValueValueValueValue = currentMaxValueValueValue;\n  \
    \      long currentMaxValueValueValueIndex =\n            numbers.IndexOf(currentMaxValueValueValueValue);\n\
    \        long currentMaxValueValueValueValueIndex =\n            numbers.IndexOf(currentMaxValueValueValueValue);\n\
    \        long currentMaxValueValueValueValueIndex =\n            numbers.IndexOf(currentMaxValueValueValueValue);\n\
    \        long currentMaxValueValueValueValueValueIndex =\n            numbers.IndexOf(currentMaxValueValueValueValue);\n\
    \        long currentMaxValueValueValueValueValueIndex =\n            numbers.IndexOf(currentMaxValueValueValueValue);\n\
    \        long currentMaxValueValueValueValueValueValueIndex =\n            numbers.IndexOf(currentMaxValueValueValueValue);\n\
    \        long currentMaxValueValueValueValueValueValueIndex =\n            numbers.IndexOf(currentMaxValueValueValueValue);\n\
    \        long currentMaxValueValueValueValueValueValueValueIndex =\n         \
    \   numbers.IndexOf(currentMaxValueValueValueValue);\n        long currentMaxValueValueValueValueValueValueValueValueIndex\
    \ =\n            numbers.IndexOf(currentMaxValueValueValueValue);\n        long\
    \ currentMaxValueValueValueValueValueValueValueValueIndex =\n            numbers.IndexOf(currentMaxValueValueValueValue);\n\
    \        long currentMaxValueValueValueValueValueValueValueValueIndex =\n    \
    \        numbers.IndexOf(currentMaxValueValueValueValue);\n        long currentMaxValueValueValueValueValueValueValueValueValueIndex\
    \ =\n            numbers.IndexOf(currentMaxValueValueValueValue);\n        long\
    \ currentMaxValueValueValueValueValueValueValueValueValueIndex =\n           \
    \ numbers.IndexOf(currentMaxValueValueValueValue);\n        long currentMaxValueValueValueValueValueValueValueValueValueIndex\
    \ =\n            numbers.IndexOf(currentMaxValueValueValueValue);\n        long\
    \ currentMaxValueValueValueValueValueValueValueValueValueIndex =\n           \
    \ numbers.IndexOf(currentMaxValueValueValueValue);\n        long currentMaxValueValueValueValueValueValueValueValueValueIndex\
    \ =\n            numbers.IndexOf(current\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L,\
    \ (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new\
    \ long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpg285zol1.cs(54,36): error CS1026: ) expected

    /tmp/tmpg285zol1.cs(54,36): error CS1002: ; expected

    '
  timestamp: 1660008889
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    public\
    \ static List<long> RollingMax(List<long> numbers) {\n        List<long> result\
    \ = new List<long>();\n        long max = 0;\n        long currentMax = 0;\n \
    \       long currentSum = 0;\n        long sum = 0;\n        foreach (long n in\
    \ numbers) {\n            currentSum += n;\n            if (currentSum > max)\
    \ {\n                max = currentSum;\n                currentMax = n;\n    \
    \        }\n            currentSum = 0;\n        }\n        result.Add(currentMax);\n\
    \        return result;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(RollingMax((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L,\
    \ (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new\
    \ long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <76a7604ae54048a7bb10546e37abecb5>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <76a7604ae54048a7bb10546e37abecb5>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660008889
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    public\
    \ static List<long> RollingMax(List<long> numbers) {\n        List<long> max =\
    \ new List<long>();\n        long maxElement = numbers.First();\n        long\
    \ currentMaxElement = maxElement;\n        foreach (long number in numbers) {\n\
    \            if (number > maxElement) {\n                max.Add(currentMaxElement);\n\
    \                currentMaxElement = number;\n            }\n            else\
    \ {\n                currentMaxElement = number;\n            }\n        }\n \
    \       max.Add(currentMaxElement);\n        return max;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new\
    \ long[]{(long)4L, (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.InvalidOperationException: Sequence contains\
    \ no elements\n  at System.Linq.Enumerable.First[TSource] (System.Collections.Generic.IEnumerable`1[T]\
    \ source) [0x00010] in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem.RollingMax\
    \ (System.Collections.Generic.List`1[T] numbers) [0x00007] in <c60751ced48c41c8a94641c08094ef1a>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <c60751ced48c41c8a94641c08094ef1a>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.InvalidOperationException: Sequence\
    \ contains no elements\n  at System.Linq.Enumerable.First[TSource] (System.Collections.Generic.IEnumerable`1[T]\
    \ source) [0x00010] in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem.RollingMax\
    \ (System.Collections.Generic.List`1[T] numbers) [0x00007] in <c60751ced48c41c8a94641c08094ef1a>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <c60751ced48c41c8a94641c08094ef1a>:0\
    \ \n"
  stdout: ''
  timestamp: 1660008889
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    public\
    \ static List<long> RollingMax(List<long> numbers) {\n        List<long> result\
    \ = new List<long>();\n        long maxValue = numbers.Max();\n        long currentMax\
    \ = maxValue;\n        long currentMaxIndex = -1;\n        long currentMaxIndex\
    \ = -1;\n        long currentMaxIndex = -1;\n        long currentMaxIndex = -1;\n\
    \        long currentMaxIndex = -1;\n        long currentMaxIndex = -1;\n    \
    \    long currentMaxIndex = -1;\n        long currentMaxIndex = -1;\n        long\
    \ currentMaxIndex = -1;\n        long currentMaxIndex = -1;\n        long currentMaxIndex\
    \ = -1;\n        long currentMaxIndex = -1;\n        long currentMaxIndex = -1;\n\
    \        long currentMaxIndex = -1;\n        long currentMaxIndex = -1;\n    \
    \    long currentMaxIndex = -1;\n        long currentMaxIndex = -1;\n        long\
    \ currentMaxIndex = -1;\n        long currentMaxIndex = -1;\n        long currentMaxIndex\
    \ = -1;\n        long currentMaxIndex = -1;\n        long currentMaxIndex = -1;\n\
    \        long currentMaxIndex = -1;\n        long currentMaxIndex = -1;\n    \
    \    long currentMaxIndex = -1;\n        long currentMaxIndex = -1;\n        long\
    \ currentMaxIndex = -1;\n        long currentMaxIndex = -1;\n        long currentMaxIndex\
    \ = -1;\n        long currentMaxIndex = -1;\n        long currentMaxIndex = -1;\n\
    \        long currentMaxIndex = -1;\n        long currentMaxIndex = -1;\n    \
    \    long currentMaxIndex = -1;\n        long currentMaxIndex = -1;\n        long\
    \ currentMaxIndex = -1;\n        long currentMaxIndex = -1;\n        long currentMaxIndex\
    \ = -1;\n        long currentMaxIndex = -1;\n        long currentMaxIndex = -1;\n\
    \        long currentMaxIndex = -1;\n        long currentMaxIndex = -1;\n    \
    \    long currentMaxIndex = -1;\n        long currentMaxIndex = -1;\n        long\
    \ currentMaxIndex = -1;\n        long currentMaxIndex = -1;\n        long currentMaxIndex\
    \ = -1;\n        long currentMaxIndex = -1;\n        long currentMaxIndex = -1;\n\
    \        long currentMaxIndex = -1;\n        long currentMaxIndex = -1;\n    \
    \    long currentMaxIndex = -1;\n        long currentMaxIndex = -1;\n        long\
    \ currentMaxIndex = -1;\n        long currentMaxIndex = -1;\n        long currentMaxIndex\
    \ = -1;\n        long currentMaxIndex = -1;\n        long currentMaxIndex = -1;\n\
    \        long currentMaxIndex = -1;\n        long currentMaxIndex = -1;\n    \
    \    long currentMaxIndex = -1;\n        long currentMaxIndex = -1;\n        long\
    \ currentMaxIndex = -1;\n        long currentMaxIndex = -1;\n        long currentMaxIndex\
    \ = -1;\n        long currentMaxIndex = -1;\n        long currentMaxIndex = -1;\n\
    \        long currentMaxIndex = -1;\n        long currentMaxIndex = -1;\n    \
    \    long current\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(RollingMax((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(RollingMax((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new\
    \ List<long>(new long[]{(long)4L, (long)3L, (long)2L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp7lpxpou0.cs(84,21): error CS1002: ; expected

    '
  timestamp: 1660008889
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    public\
    \ static List<long> RollingMax(List<long> numbers) {\n        List<long> result\
    \ = new List<long>();\n        long max = 0;\n        long currentMax = 0;\n \
    \       long currentMaxIndex = 0;\n        foreach (long number in numbers) {\n\
    \            currentMax = number;\n            currentMaxIndex = 0;\n        \
    \    while (currentMaxIndex < numbers.Count - 1) {\n                currentMax\
    \ += numbers[currentMaxIndex + 1];\n                currentMaxIndex++;\n     \
    \       }\n            result.Add(currentMax);\n        }\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(RollingMax((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(RollingMax((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new\
    \ List<long>(new long[]{(long)4L, (long)3L, (long)2L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp0_12ie8v.cs(20,39): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmp0_12ie8v.cs(13,14): warning CS0219: The variable ''max'' is assigned but
    its value is never used

    '
  timestamp: 1660008889
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    public\
    \ static List<long> RollingMax(List<long> numbers) {\n        List<long> result\
    \ = new List<long>();\n        long maxValue = numbers.Max();\n        long currentMax\
    \ = maxValue;\n        long currentSum = 0;\n        long currentSumOfSquares\
    \ = 0;\n        long currentSumOfSquareOfDifferences = 0;\n        long currentSumOfSquareOfDifferenceOfDifferences\
    \ = 0;\n        long currentSumOfSquareOfDifferenceOfDifferenceOfDifferences =\
    \ 0;\n        long currentSumOfSquareOfDifferenceOfDifferenceOfDifferenceOfDifferences\
    \ = 0;\n        long currentSumOfSquareOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferences\
    \ = 0;\n        long currentSumOfSquareOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferences\
    \ = 0;\n        long currentSumOfSquareOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferences\
    \ = 0;\n        long currentSumOfSquareOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferences\
    \ = 0;\n        long currentSumOfSquareOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferences\
    \ = 0;\n        long currentSumOfSquareOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferences\
    \ = 0;\n        long currentSumOfSquareOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferences\
    \ = 0;\n        long currentSumOfSquareOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferences\
    \ = 0;\n        long currentSumOfSquareOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferences\
    \ = 0;\n        long currentSumOfSquareOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferences\
    \ = 0;\n        long currentSumOfSquareOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferences\
    \ = 0;\n        long currentSumOfSquareOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferences\
    \ = 0;\n        long currentSumOfSquareOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferences\
    \ = 0;\n        long currentSumOfSquareOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferences\
    \ = 0;\n        long currentSumOfSquareOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferences\
    \ = 0;\n        long currentSumOfSquareOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifference\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(RollingMax((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(RollingMax((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new\
    \ List<long>(new long[]{(long)4L, (long)3L, (long)2L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpdf3xhaiq.cs(36,152): error CS1002: ; expected

    '
  timestamp: 1660008889
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    public\
    \ static List<long> RollingMax(List<long> numbers) {\n        List<long> result\
    \ = new List<long>();\n        long max = 0;\n        long currentMax = numbers.First();\n\
    \        long currentMaxIndex = 0;\n        foreach (long number in numbers) {\n\
    \            if (number > currentMax) {\n                currentMax = number;\n\
    \                currentMaxIndex = result.Count;\n            }\n            if\
    \ (number == currentMax) {\n                result.Add(number);\n            }\n\
    \        }\n        if (result.Count > 0) {\n            max = result.Last();\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L,\
    \ (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new\
    \ long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n    }\n\n\
    }\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.InvalidOperationException: Sequence contains\
    \ no elements\n  at System.Linq.Enumerable.First[TSource] (System.Collections.Generic.IEnumerable`1[T]\
    \ source) [0x00010] in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem.RollingMax\
    \ (System.Collections.Generic.List`1[T] numbers) [0x0000a] in <29210e148d5f4fa49122344cf4346653>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <29210e148d5f4fa49122344cf4346653>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.InvalidOperationException: Sequence\
    \ contains no elements\n  at System.Linq.Enumerable.First[TSource] (System.Collections.Generic.IEnumerable`1[T]\
    \ source) [0x00010] in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem.RollingMax\
    \ (System.Collections.Generic.List`1[T] numbers) [0x0000a] in <29210e148d5f4fa49122344cf4346653>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <29210e148d5f4fa49122344cf4346653>:0\
    \ \n"
  stdout: ''
  timestamp: 1660008889
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    public\
    \ static List<long> RollingMax(List<long> numbers) {\n        List<long> result\
    \ = new List<long>();\n        long maxValue = numbers.Max();\n        long currentMax\
    \ = maxValue;\n        long currentMaxIndex = -1;\n        long currentMaxIndexValue\
    \ = numbers.First();\n        long currentMaxIndexValue2 = numbers.First();\n\
    \        long currentMaxIndexValue3 = numbers.First();\n        long currentMaxIndexValue4\
    \ = numbers.First();\n        long currentMaxIndexValue5 = numbers.First();\n\
    \        long currentMaxIndexValue6 = numbers.First();\n        long currentMaxIndexValue7\
    \ = numbers.First();\n        long currentMaxIndexValue8 = numbers.First();\n\
    \        long currentMaxIndexValue9 = numbers.First();\n        long currentMaxIndexValue10\
    \ = numbers.First();\n        long currentMaxIndexValue11 = numbers.First();\n\
    \        long currentMaxIndexValue12 = numbers.First();\n        long currentMaxIndexValue13\
    \ = numbers.First();\n        long currentMaxIndexValue14 = numbers.First();\n\
    \        long currentMaxIndexValue15 = numbers.First();\n        long currentMaxIndexValue16\
    \ = numbers.First();\n        long currentMaxIndexValue17 = numbers.First();\n\
    \        long currentMaxIndexValue18 = numbers.First();\n        long currentMaxIndexValue19\
    \ = numbers.First();\n        long currentMaxIndexValue20 = numbers.First();\n\
    \        long currentMaxIndexValue21 = numbers.First();\n        long currentMaxIndexValue22\
    \ = numbers.First();\n        long currentMaxIndexValue23 = numbers.First();\n\
    \        long currentMaxIndexValue24 = numbers.First();\n        long currentMaxIndexValue25\
    \ = numbers.First();\n        long currentMaxIndexValue26 = numbers.First();\n\
    \        long currentMaxIndexValue27 = numbers.First();\n        long currentMaxIndexValue28\
    \ = numbers.First();\n        long currentMaxIndexValue29 = numbers.First();\n\
    \        long currentMaxIndexValue30 = numbers.First();\n        long currentMaxIndexValue31\
    \ = numbers.First();\n        long currentMaxIndexValue32 = numbers.First();\n\
    \        long currentMaxIndexValue33 = numbers.First();\n        long currentMaxIndexValue34\
    \ = numbers.First();\n        long currentMaxIndexValue35 = numbers.First();\n\
    \        long currentMaxIndexValue36 = numbers.First();\n        long currentMaxIndexValue37\
    \ = numbers.First();\n        long currentMaxIndexValue38 = numbers.First();\n\
    \        long currentMaxIndexValue39 = numbers.First();\n        long currentMaxIndexValue40\
    \ = numbers.First();\n        long currentMaxIndexValue41 = numbers.First();\n\
    \n    }\n    public static void Main(string[] args) {\n    Debug.Assert(RollingMax((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(RollingMax((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new\
    \ List<long>(new long[]{(long)4L, (long)3L, (long)2L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmph306f9yw.cs(15,14): warning CS0219: The variable ''currentMaxIndex'' is
    assigned but its value is never used

    /tmp/tmph306f9yw.cs(11,30): error CS0161: ''Problem.RollingMax(List<long>)'':
    not all code paths return a value

    '
  timestamp: 1660008889
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    public\
    \ static List<long> RollingMax(List<long> numbers) {\n        List<long> result\
    \ = new List<long>();\n        long max = 0;\n        long currentMax = 0;\n \
    \       long currentMaxIndex = 0;\n        long currentMaxValue = numbers[0];\n\
    \        long currentMaxValueIndex = numbers.IndexOf(currentMaxValue);\n     \
    \   long currentMaxValueSum = 0;\n        long currentMaxValueSumIndex = 0;\n\
    \        long currentMaxValueSumValue = 0;\n        long currentMaxValueSumValueIndex\
    \ = 0;\n        long currentMaxValueSumValueSum = 0;\n        long currentMaxValueSumValueSumIndex\
    \ = 0;\n        long currentMaxValueSumValueSumValue = 0;\n        long currentMaxValueSumValueSumValueIndex\
    \ = 0;\n        long currentMaxValueSumValueSumValueSum = 0;\n        long currentMaxValueSumValueSumValueSumIndex\
    \ = 0;\n        long currentMaxValueSumValueSumValueSumValue = 0;\n        long\
    \ currentMaxValueSumValueSumValueSumIndex = 0;\n        long currentMaxValueSumValueSumValueSumValue\
    \ = 0;\n        long currentMaxValueSumValueSumValueSumIndex = 0;\n        long\
    \ currentMaxValueSumValueSumValueSumValue = 0;\n        long currentMaxValueSumValueSumValueSumIndex\
    \ = 0;\n        long currentMaxValueSumValueSumValueSumValueSum = 0;\n       \
    \ long currentMaxValueSumValueSumValueSumValueSum = 0;\n        long currentMaxValueSumValueSumValueSumValueSum\
    \ = 0;\n        long currentMaxValueSumValueSumValueSumValueSum = 0;\n       \
    \ long currentMaxValueSumValueSumValueSumValueSum = 0;\n        long currentMaxValueSumValueSumValueSumValueSum\
    \ = 0;\n        long currentMaxValueSumValueSumValueSumValueSum = 0;\n       \
    \ long currentMaxValueSumValueSumValueSumValueSum = 0;\n        long currentMaxValueSumValueSumValueSumValueSum\
    \ = 0;\n        long currentMaxValueSumValueSumValueSumValueSum = 0;\n       \
    \ long currentMaxValueSumValueSumValueSumValueSum = 0;\n        long currentMaxValueSumValueSumValueSumValueSum\
    \ = 0;\n        long currentMaxValueSumValueSumValueSumValueSum = 0;\n       \
    \ long currentMaxValueSumValueSumValueSumValueSum = 0;\n        long currentMaxValueSumValueSumValueSumValueSum\
    \ = 0;\n        long currentMaxValueSumValueSumValueSumValueSum = 0;\n       \
    \ long currentMaxValueSumValueSumValueSumValueSum = 0;\n        long currentMaxValueSumValueSumValueSumValueSum\
    \ = 0;\n        long currentMaxValueSumValueSumValueSumValueSum = 0;\n       \
    \ long currentMaxValueSumValueSumValueSumValueSum = 0;\n\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new\
    \ long[]{(long)4L, (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpurq58r94.cs(29,14): error CS0128: A local variable or function named ''currentMaxValueSumValueSumValueSumIndex''
    is already defined in this scope

    /tmp/tmpurq58r94.cs(30,14): error CS0128: A local variable or function named ''currentMaxValueSumValueSumValueSumValue''
    is already defined in this scope

    /tmp/tmpurq58r94.cs(31,14): error CS0128: A local variable or function named ''currentMaxValueSumValueSumValueSumIndex''
    is already defined in this scope

    /tmp/tmpurq58r94.cs(32,14): error CS0128: A local variable or function named ''currentMaxValueSumValueSumValueSumValue''
    is already defined in this scope

    /tmp/tmpurq58r94.cs(33,14): error CS0128: A local variable or function named ''currentMaxValueSumValueSumValueSumIndex''
    is already defined in this scope

    /tmp/tmpurq58r94.cs(35,14): error CS0128: A local variable or function named ''currentMaxValueSumValueSumValueSumValueSum''
    is already defined in this scope

    /tmp/tmpurq58r94.cs(36,14): error CS0128: A local variable or function named ''currentMaxValueSumValueSumValueSumValueSum''
    is already defined in this scope

    /tmp/tmpurq58r94.cs(37,14): error CS0128: A local variable or function named ''currentMaxValueSumValueSumValueSumValueSum''
    is already defined in this scope

    /tmp/tmpurq58r94.cs(38,14): error CS0128: A local variable or function named ''currentMaxValueSumValueSumValueSumValueSum''
    is already defined in this scope

    /tmp/tmpurq58r94.cs(39,14): error CS0128: A local variable or function named ''currentMaxValueSumValueSumValueSumValueSum''
    is already defined in this scope

    /tmp/tmpurq58r94.cs(40,14): error CS0128: A local variable or function named ''currentMaxValueSumValueSumValueSumValueSum''
    is already defined in this scope

    /tmp/tmpurq58r94.cs(41,14): error CS0128: A local variable or function named ''currentMaxValueSumValueSumValueSumValueSum''
    is already defined in this scope

    /tmp/tmpurq58r94.cs(42,14): error CS0128: A local variable or function named'
  timestamp: 1660008889
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    public\
    \ static List<long> RollingMax(List<long> numbers) {\n        List<long> result\
    \ = new List<long>();\n        long maxValue = numbers.Max();\n        long currentMax\
    \ = maxValue;\n        long currentMaxIndex = 0;\n        long currentMaxIndexValue\
    \ = 0;\n        long currentMaxIndexValue2 = 0;\n        long currentMaxIndexValue3\
    \ = 0;\n        long currentMaxIndexValue4 = 0;\n        long currentMaxIndexValue5\
    \ = 0;\n        long currentMaxIndexValue6 = 0;\n        long currentMaxIndexValue7\
    \ = 0;\n        long currentMaxIndexValue8 = 0;\n        long currentMaxIndexValue9\
    \ = 0;\n        long currentMaxIndexValue10 = 0;\n        long currentMaxIndexValue11\
    \ = 0;\n        long currentMaxIndexValue12 = 0;\n        long currentMaxIndexValue13\
    \ = 0;\n        long currentMaxIndexValue14 = 0;\n        long currentMaxIndexValue15\
    \ = 0;\n        long currentMaxIndexValue16 = 0;\n        long currentMaxIndexValue17\
    \ = 0;\n        long currentMaxIndexValue18 = 0;\n        long currentMaxIndexValue19\
    \ = 0;\n        long currentMaxIndexValue20 = 0;\n        long currentMaxIndexValue21\
    \ = 0;\n        long currentMaxIndexValue22 = 0;\n        long currentMaxIndexValue23\
    \ = 0;\n        long currentMaxIndexValue24 = 0;\n        long currentMaxIndexValue25\
    \ = 0;\n        long currentMaxIndexValue26 = 0;\n        long currentMaxIndexValue27\
    \ = 0;\n        long currentMaxIndexValue28 = 0;\n        long currentMaxIndexValue29\
    \ = 0;\n        long currentMaxIndexValue30 = 0;\n        long currentMaxIndexValue31\
    \ = 0;\n        long currentMaxIndexValue32 = 0;\n        long currentMaxIndexValue33\
    \ = 0;\n        long currentMaxIndexValue34 = 0;\n        long currentMaxIndexValue35\
    \ = 0;\n        long currentMaxIndexValue36 = 0;\n        long currentMaxIndexValue37\
    \ = 0;\n        long currentMaxIndexValue38 = 0;\n        long currentMaxIndexValue39\
    \ = 0;\n        long currentMaxIndexValue40 = 0;\n        long currentMaxIndexValue41\
    \ = 0;\n        long currentMaxIndexValue42 = 0;\n        long currentMaxIndexValue43\
    \ = 0;\n        long currentMaxIndexValue44 = 0;\n        long currentMaxIndexValue45\
    \ = 0;\n        long currentMaxIndexValue46 = 0;\n        long currentMaxIndexValue47\
    \ = 0;\n        long currentMaxIndexValue48 = 0;\n        long currentMaxIndexValue49\
    \ = 0;\n        long currentMaxIndexValue50 = 0;\n        long currentMaxIndexValue51\
    \ = 0;\n        long currentMaxIndexValue52 = 0;\n        long currentMaxIndexValue53\
    \ = 0;\n        long currentMaxIndexValue54\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L,\
    \ (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new\
    \ long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp0ues37ym.cs(69,36): error CS1002: ; expected

    '
  timestamp: 1660008889
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    public\
    \ static List<long> RollingMax(List<long> numbers) {\n        List<long> result\
    \ = new List<long>();\n        long max = 0;\n        long currentMax = 0;\n \
    \       long currentMaxIndex = 0;\n        long currentMaxValue = 0;\n       \
    \ long currentMaxValueIndex = 0;\n        long currentMaxValueValue = 0;\n   \
    \     long currentMaxValueValueIndex = 0;\n        long currentMaxValueValueValue\
    \ = 0;\n        long currentMaxValueValueValueIndex = 0;\n        long currentMaxValueValueValueValue\
    \ = 0;\n        long currentMaxValueValueValueIndexValue = 0;\n        long currentMaxValueValueValueValue\
    \ = 0;\n        long currentMaxValueValueValueIndexValue = 0;\n        long currentMaxValueValueValueValue\
    \ = 0;\n        long currentMaxValueValueValueIndexValue = 0;\n        long currentMaxValueValueValueValue\
    \ = 0;\n        long currentMaxValueValueValueIndexValue = 0;\n        long currentMaxValueValueValueValue\
    \ = 0;\n        long currentMaxValueValueValueIndexValue = 0;\n        long currentMaxValueValueValueValue\
    \ = 0;\n        long currentMaxValueValueValueIndexValue = 0;\n        long currentMaxValueValueValueValue\
    \ = 0;\n        long currentMaxValueValueValueIndexValue = 0;\n        long currentMaxValueValueValueValue\
    \ = 0;\n        long currentMaxValueValueValueIndexValue = 0;\n        long currentMaxValueValueValueValue\
    \ = 0;\n        long currentMaxValueValueValueIndexValue = 0;\n        long currentMaxValueValueValueValue\
    \ = 0;\n        long currentMaxValueValueValueIndexValue = 0;\n        long currentMaxValueValueValueValue\
    \ = 0;\n        long currentMaxValueValueValueIndexValue = 0;\n        long currentMaxValueValueValueValue\
    \ = 0;\n        long currentMaxValueValueValueIndexValue = 0;\n        long currentMaxValueValueValueValue\
    \ = 0;\n        long currentMaxValueValueValueIndexValue = 0;\n        long currentMaxValueValueValueValue\
    \ = 0;\n        long currentMaxValueValueValueIndexValue = 0;\n        long currentMaxValueValueValueValue\
    \ = 0;\n        long currentMaxValueValueValueIndexValue = 0;\n        long currentMaxValueValueValueValue\
    \ = 0;\n        long currentMaxValueValueValueIndexValue = 0;\n        long currentMaxValueValueValueValue\
    \ = 0;\n        long currentMaxValueValueValueIndexValue = 0;\n        long currentMaxValueValueValueValue\
    \ = 0;\n        long currentMaxValueValueValueIndexValue = 0;\n        long currentMaxValueValueValueValue\
    \ = 0;\n        long currentMaxValueValueValueIndexValue = 0;\n        long currentMaxValueValueValueValue\
    \ = 0;\n        long currentMaxValueValueValueIndexValue = 0;\n        long currentMaxValueValueValueValue\
    \ = 0;\n        long current\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L,\
    \ (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new\
    \ long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpvxn7bfe1.cs(63,21): error CS1002: ; expected

    '
  timestamp: 1660008889
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    public\
    \ static List<long> RollingMax(List<long> numbers) {\n        List<long> result\
    \ = new List<long>();\n        long maxValue = numbers.Max();\n        long currentMax\
    \ = maxValue;\n        long currentMaxIndex = 0;\n        long currentMaxIndexValue\
    \ = 0;\n        long currentMaxIndexValue2 = 0;\n        long currentMaxIndexValue3\
    \ = 0;\n        long currentMaxIndexValue4 = 0;\n        long currentMaxIndexValue5\
    \ = 0;\n        long currentMaxIndexValue6 = 0;\n        long currentMaxIndexValue7\
    \ = 0;\n        long currentMaxIndexValue8 = 0;\n        long currentMaxIndexValue9\
    \ = 0;\n        long currentMaxIndexValue10 = 0;\n        long currentMaxIndexValue11\
    \ = 0;\n        long currentMaxIndexValue12 = 0;\n        long currentMaxIndexValue13\
    \ = 0;\n        long currentMaxIndexValue14 = 0;\n        long currentMaxIndexValue15\
    \ = 0;\n        long currentMaxIndexValue16 = 0;\n        long currentMaxIndexValue17\
    \ = 0;\n        long currentMaxIndexValue18 = 0;\n        long currentMaxIndexValue19\
    \ = 0;\n        long currentMaxIndexValue20 = 0;\n        long currentMaxIndexValue21\
    \ = 0;\n        long currentMaxIndexValue22 = 0;\n        long currentMaxIndexValue23\
    \ = 0;\n        long currentMaxIndexValue24 = 0;\n        long currentMaxIndexValue25\
    \ = 0;\n        long currentMaxIndexValue26 = 0;\n        long currentMaxIndexValue27\
    \ = 0;\n        long currentMaxIndexValue28 = 0;\n        long currentMaxIndexValue29\
    \ = 0;\n        long currentMaxIndexValue30 = 0;\n        long currentMaxIndexValue31\
    \ = 0;\n        long currentMaxIndexValue32 = 0;\n        long currentMaxIndexValue33\
    \ = 0;\n        long currentMaxIndexValue34 = 0;\n        long currentMaxIndexValue35\
    \ = 0;\n        long currentMaxIndexValue36 = 0;\n        long currentMaxIndexValue37\
    \ = 0;\n        long currentMaxIndexValue38 = 0;\n        long currentMaxIndexValue39\
    \ = 0;\n        long currentMaxIndexValue40 = 0;\n        long currentMaxIndexValue41\
    \ = 0;\n        long currentMaxIndexValue42 = 0;\n        long currentMaxIndexValue43\
    \ = 0;\n        long currentMaxIndexValue44 = 0;\n        long currentMaxIndexValue45\
    \ = 0;\n        long currentMaxIndexValue46 = 0;\n        long currentMaxIndexValue47\
    \ = 0;\n        long currentMaxIndexValue48 = 0;\n        long currentMaxIndexValue49\
    \ = 0;\n        long currentMaxIndexValue50 = 0;\n        long currentMaxIndexValue51\
    \ = 0;\n        long currentMaxIndexValue52 = 0;\n        long currentMaxIndexValue53\
    \ = 0;\n        long currentMaxIndexValue54\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L,\
    \ (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new\
    \ long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp0ues37ym.cs(69,36): error CS1002: ; expected

    '
  timestamp: 1660008889
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    public\
    \ static List<long> RollingMax(List<long> numbers) {\n        List<long> result\
    \ = new List<long>();\n        long max = 0;\n        long currentMax = numbers.First();\n\
    \        long currentMaxIndex = 0;\n        foreach (long number in numbers) {\n\
    \            if (number > currentMax) {\n                currentMax = number;\n\
    \                currentMaxIndex = result.Count;\n            }\n            if\
    \ (number == currentMax) {\n                result.Add(number);\n            }\n\
    \        }\n        result.Add(currentMax);\n        result.Add(currentMax);\n\
    \        return result;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(RollingMax((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L,\
    \ (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new\
    \ long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n    }\n\n\
    }\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.InvalidOperationException: Sequence contains\
    \ no elements\n  at System.Linq.Enumerable.First[TSource] (System.Collections.Generic.IEnumerable`1[T]\
    \ source) [0x00010] in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem.RollingMax\
    \ (System.Collections.Generic.List`1[T] numbers) [0x0000a] in <c0eaa5a5436d4b2081c637570870f0f9>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <c0eaa5a5436d4b2081c637570870f0f9>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.InvalidOperationException: Sequence\
    \ contains no elements\n  at System.Linq.Enumerable.First[TSource] (System.Collections.Generic.IEnumerable`1[T]\
    \ source) [0x00010] in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem.RollingMax\
    \ (System.Collections.Generic.List`1[T] numbers) [0x0000a] in <c0eaa5a5436d4b2081c637570870f0f9>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <c0eaa5a5436d4b2081c637570870f0f9>:0\
    \ \n"
  stdout: ''
  timestamp: 1660008889
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    public\
    \ static List<long> RollingMax(List<long> numbers) {\n        List<long> max =\
    \ new List<long>();\n        long maxElement = numbers.First();\n        long\
    \ currentMaxElement = maxElement;\n        long currentMax = maxElement;\n   \
    \     foreach (long number in numbers) {\n            if (number > currentMaxElement)\
    \ {\n                currentMaxElement = number;\n                currentMax =\
    \ number;\n            }\n            else if (number == currentMaxElement) {\n\
    \                currentMax = currentMax + number;\n            }\n          \
    \  max.Add(currentMax);\n        }\n        return max;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new\
    \ long[]{(long)4L, (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.InvalidOperationException: Sequence contains\
    \ no elements\n  at System.Linq.Enumerable.First[TSource] (System.Collections.Generic.IEnumerable`1[T]\
    \ source) [0x00010] in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem.RollingMax\
    \ (System.Collections.Generic.List`1[T] numbers) [0x00007] in <580361af932e400dae8ea95df1afa2d5>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <580361af932e400dae8ea95df1afa2d5>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.InvalidOperationException: Sequence\
    \ contains no elements\n  at System.Linq.Enumerable.First[TSource] (System.Collections.Generic.IEnumerable`1[T]\
    \ source) [0x00010] in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem.RollingMax\
    \ (System.Collections.Generic.List`1[T] numbers) [0x00007] in <580361af932e400dae8ea95df1afa2d5>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <580361af932e400dae8ea95df1afa2d5>:0\
    \ \n"
  stdout: ''
  timestamp: 1660008889
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    public\
    \ static List<long> RollingMax(List<long> numbers) {\n        List<long> result\
    \ = new List<long>();\n        long max = 0;\n        long currentMax = 0;\n \
    \       long currentSum = 0;\n        long sum = 0;\n        long sumOfSquares\
    \ = 0;\n        long currentSumOfSquares = 0;\n        long currentSumOfSquares\
    \ = 0;\n        long currentSumOfSquares = 0;\n        long currentSumOfSquares\
    \ = 0;\n        long currentSumOfSquares = 0;\n        long currentSumOfSquares\
    \ = 0;\n        long currentSumOfSquares = 0;\n        long currentSumOfSquares\
    \ = 0;\n        long currentSumOfSquares = 0;\n        long currentSumOfSquares\
    \ = 0;\n        long currentSumOfSquares = 0;\n        long currentSumOfSquares\
    \ = 0;\n        long currentSumOfSquares = 0;\n        long currentSumOfSquares\
    \ = 0;\n        long currentSumOfSquares = 0;\n        long currentSumOfSquares\
    \ = 0;\n        long currentSumOfSquares = 0;\n        long currentSumOfSquares\
    \ = 0;\n        long currentSumOfSquares = 0;\n        long currentSumOfSquares\
    \ = 0;\n        long currentSumOfSquares = 0;\n        long currentSumOfSquares\
    \ = 0;\n        long currentSumOfSquares = 0;\n        long currentSumOfSquares\
    \ = 0;\n        long currentSumOfSquares = 0;\n        long currentSumOfSquares\
    \ = 0;\n        long currentSumOfSquares = 0;\n        long currentSumOfSquares\
    \ = 0;\n        long currentSumOfSquares = 0;\n        long currentSumOfSquares\
    \ = 0;\n        long currentSumOfSquares = 0;\n        long currentSumOfSquares\
    \ = 0;\n        long currentSumOfSquares = 0;\n        long currentSumOfSquares\
    \ = 0;\n        long currentSumOfSquares = 0;\n        long currentSumOfSquares\
    \ = 0;\n        long currentSumOfSquares = 0;\n        long currentSumOfSquares\
    \ = 0;\n        long currentSumOfSquares = 0;\n        long currentSumOfSquares\
    \ = 0;\n        long currentSumOfSquares = 0;\n        long currentSumOfSquares\
    \ = 0;\n        long currentSumOfSquares = 0;\n        long currentSumOfSquares\
    \ = 0;\n        long currentSumOfSquares = 0;\n        long currentSumOfSquares\
    \ = 0;\n        long currentSumOfSquares = 0;\n        long currentSumOfSquares\
    \ = 0;\n        long currentSumOfSquares = 0;\n        long currentSumOfSquares\
    \ = 0;\n        long currentSumOfSquares = 0;\n        long currentSumOfSquares\
    \ = 0;\n        long currentSumOfSquares = 0;\n        long currentSumOfSquares\
    \ = 0;\n        long currentSumOfSquares = 0;\n        long currentSumOfSquares\
    \ = 0;\n        long currentSumOfSquares = 0;\n        long currentSumOfSquares\
    \ = 0;\n        long currentSumOfSquares = 0;\n        \n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new\
    \ long[]{(long)4L, (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpktf2pv0f.cs(19,14): error CS0128: A local variable or function named ''currentSumOfSquares''
    is already defined in this scope

    /tmp/tmpktf2pv0f.cs(20,14): error CS0128: A local variable or function named ''currentSumOfSquares''
    is already defined in this scope

    /tmp/tmpktf2pv0f.cs(21,14): error CS0128: A local variable or function named ''currentSumOfSquares''
    is already defined in this scope

    /tmp/tmpktf2pv0f.cs(22,14): error CS0128: A local variable or function named ''currentSumOfSquares''
    is already defined in this scope

    /tmp/tmpktf2pv0f.cs(23,14): error CS0128: A local variable or function named ''currentSumOfSquares''
    is already defined in this scope

    /tmp/tmpktf2pv0f.cs(24,14): error CS0128: A local variable or function named ''currentSumOfSquares''
    is already defined in this scope

    /tmp/tmpktf2pv0f.cs(25,14): error CS0128: A local variable or function named ''currentSumOfSquares''
    is already defined in this scope

    /tmp/tmpktf2pv0f.cs(26,14): error CS0128: A local variable or function named ''currentSumOfSquares''
    is already defined in this scope

    /tmp/tmpktf2pv0f.cs(27,14): error CS0128: A local variable or function named ''currentSumOfSquares''
    is already defined in this scope

    /tmp/tmpktf2pv0f.cs(28,14): error CS0128: A local variable or function named ''currentSumOfSquares''
    is already defined in this scope

    /tmp/tmpktf2pv0f.cs(29,14): error CS0128: A local variable or function named ''currentSumOfSquares''
    is already defined in this scope

    /tmp/tmpktf2pv0f.cs(30,14): error CS0128: A local variable or function named ''currentSumOfSquares''
    is already defined in this scope

    /tmp/tmpktf2pv0f.cs(31,14): error CS0128: A local variable or function named ''currentSumOfSquares''
    is already defined in this scope

    /tmp/tmpktf2pv0f.cs(32,14): error CS0128: A local variable or function named ''currentSumOfSquares''
    is already defined in this scope

    /tmp/tmpktf2pv0f.cs(33,14): error CS0128: A local variable or function na'
  timestamp: 1660008889
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    public\
    \ static List<long> RollingMax(List<long> numbers) {\n        List<long> result\
    \ = new List<long>();\n        long maxValue = numbers.Max();\n        long currentMax\
    \ = maxValue;\n        long currentMaxIndex = 0;\n        long currentMaxIndexValue\
    \ = 0;\n        long currentMaxIndexValue2 = 0;\n        long currentMaxIndexValue3\
    \ = 0;\n        long currentMaxIndexValue4 = 0;\n        long currentMaxIndexValue5\
    \ = 0;\n        long currentMaxIndexValue6 = 0;\n        long currentMaxIndexValue7\
    \ = 0;\n        long currentMaxIndexValue8 = 0;\n        long currentMaxIndexValue9\
    \ = 0;\n        long currentMaxIndexValue10 = 0;\n        long currentMaxIndexValue11\
    \ = 0;\n        long currentMaxIndexValue12 = 0;\n        long currentMaxIndexValue13\
    \ = 0;\n        long currentMaxIndexValue14 = 0;\n        long currentMaxIndexValue15\
    \ = 0;\n        long currentMaxIndexValue16 = 0;\n        long currentMaxIndexValue17\
    \ = 0;\n        long currentMaxIndexValue18 = 0;\n        long currentMaxIndexValue19\
    \ = 0;\n        long currentMaxIndexValue20 = 0;\n        long currentMaxIndexValue21\
    \ = 0;\n        long currentMaxIndexValue22 = 0;\n        long currentMaxIndexValue23\
    \ = 0;\n        long currentMaxIndexValue24 = 0;\n        long currentMaxIndexValue25\
    \ = 0;\n        long currentMaxIndexValue26 = 0;\n        long currentMaxIndexValue27\
    \ = 0;\n        long currentMaxIndexValue28 = 0;\n        long currentMaxIndexValue29\
    \ = 0;\n        long currentMaxIndexValue30 = 0;\n        long currentMaxIndexValue31\
    \ = 0;\n        long currentMaxIndexValue32 = 0;\n        long currentMaxIndexValue33\
    \ = 0;\n        long currentMaxIndexValue34 = 0;\n        long currentMaxIndexValue35\
    \ = 0;\n        long currentMaxIndexValue36 = 0;\n        long currentMaxIndexValue37\
    \ = 0;\n        long currentMaxIndexValue38 = 0;\n        long currentMaxIndexValue39\
    \ = 0;\n        long currentMaxIndexValue40 = 0;\n        long currentMaxIndexValue41\
    \ = 0;\n        long currentMaxIndexValue42 = 0;\n        long currentMaxIndexValue43\
    \ = 0;\n        long currentMaxIndexValue44 = 0;\n        long currentMaxIndexValue45\
    \ = 0;\n        long currentMaxIndexValue46 = 0;\n        long currentMaxIndexValue47\
    \ = 0;\n        long currentMaxIndexValue48 = 0;\n        long currentMaxIndexValue49\
    \ = 0;\n        long currentMaxIndexValue50 = 0;\n        long currentMaxIndexValue51\
    \ = 0;\n        long currentMaxIndexValue52 = 0;\n        long currentMaxIndexValue53\
    \ = 0;\n        long currentMaxIndexValue54\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L,\
    \ (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new\
    \ long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp0ues37ym.cs(69,36): error CS1002: ; expected

    '
  timestamp: 1660008889
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    public\
    \ static List<long> RollingMax(List<long> numbers) {\n        List<long> result\
    \ = new List<long>();\n        long maxValue = numbers.Max();\n        long currentMax\
    \ = maxValue;\n        long currentMaxIndex = 0;\n        long currentMaxIndexValue\
    \ = 0;\n        long currentMaxIndexValue2 = 0;\n        long currentMaxIndexValue3\
    \ = 0;\n        long currentMaxIndexValue4 = 0;\n        long currentMaxIndexValue5\
    \ = 0;\n        long currentMaxIndexValue6 = 0;\n        long currentMaxIndexValue7\
    \ = 0;\n        long currentMaxIndexValue8 = 0;\n        long currentMaxIndexValue9\
    \ = 0;\n        long currentMaxIndexValue10 = 0;\n        long currentMaxIndexValue11\
    \ = 0;\n        long currentMaxIndexValue12 = 0;\n        long currentMaxIndexValue13\
    \ = 0;\n        long currentMaxIndexValue14 = 0;\n        long currentMaxIndexValue15\
    \ = 0;\n        long currentMaxIndexValue16 = 0;\n        long currentMaxIndexValue17\
    \ = 0;\n        long currentMaxIndexValue18 = 0;\n        long currentMaxIndexValue19\
    \ = 0;\n        long currentMaxIndexValue20 = 0;\n        long currentMaxIndexValue21\
    \ = 0;\n        long currentMaxIndexValue22 = 0;\n        long currentMaxIndexValue23\
    \ = 0;\n        long currentMaxIndexValue24 = 0;\n        long currentMaxIndexValue25\
    \ = 0;\n        long currentMaxIndexValue26 = 0;\n        long currentMaxIndexValue27\
    \ = 0;\n        long currentMaxIndexValue28 = 0;\n        long currentMaxIndexValue29\
    \ = 0;\n        long currentMaxIndexValue30 = 0;\n        long currentMaxIndexValue31\
    \ = 0;\n        long currentMaxIndexValue32 = 0;\n        long currentMaxIndexValue33\
    \ = 0;\n        long currentMaxIndexValue34 = 0;\n        long currentMaxIndexValue35\
    \ = 0;\n        long currentMaxIndexValue36 = 0;\n        long currentMaxIndexValue37\
    \ = 0;\n        long currentMaxIndexValue38 = 0;\n        long currentMaxIndexValue39\
    \ = 0;\n        long currentMaxIndexValue40 = 0;\n        long currentMaxIndexValue41\
    \ = 0;\n        long currentMaxIndexValue42 = 0;\n        long currentMaxIndexValue43\
    \ = 0;\n        long currentMaxIndexValue44 = 0;\n        long currentMaxIndexValue45\
    \ = 0;\n        long currentMaxIndexValue46 = 0;\n        long currentMaxIndexValue47\
    \ = 0;\n        long currentMaxIndexValue48 = 0;\n        long currentMaxIndexValue49\
    \ = 0;\n        long currentMaxIndexValue50 = 0;\n        long currentMaxIndexValue51\
    \ = 0;\n        long currentMaxIndexValue52 = 0;\n        long currentMaxIndexValue53\
    \ = 0;\n        long currentMaxIndexValue54\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L,\
    \ (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new\
    \ long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp0ues37ym.cs(69,36): error CS1002: ; expected

    '
  timestamp: 1660008889
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    public\
    \ static List<long> RollingMax(List<long> numbers) {\n        List<long> max =\
    \ new List<long>();\n        long maxElement = numbers.Max();\n        long currentMax\
    \ = maxElement;\n        long currentMaxIndex = -1;\n        foreach (long number\
    \ in numbers) {\n            if (number > currentMax) {\n                currentMax\
    \ = number;\n                currentMaxIndex = max.Count;\n            }\n   \
    \         max.Add(number);\n        }\n        max.Add(currentMax);\n        max.Add(currentMaxIndex);\n\
    \        return max;\n    }\n    public static void Main(string[] args) {\n  \
    \  Debug.Assert(RollingMax((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L,\
    \ (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new\
    \ long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n    }\n\n\
    }\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.InvalidOperationException: Sequence contains\
    \ no elements\n  at System.Linq.Enumerable.Max (System.Collections.Generic.IEnumerable`1[T]\
    \ source) [0x00022] in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem.RollingMax\
    \ (System.Collections.Generic.List`1[T] numbers) [0x00007] in <881b6b0f1ba24231bf5ef7359c649e88>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <881b6b0f1ba24231bf5ef7359c649e88>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.InvalidOperationException: Sequence\
    \ contains no elements\n  at System.Linq.Enumerable.Max (System.Collections.Generic.IEnumerable`1[T]\
    \ source) [0x00022] in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem.RollingMax\
    \ (System.Collections.Generic.List`1[T] numbers) [0x00007] in <881b6b0f1ba24231bf5ef7359c649e88>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <881b6b0f1ba24231bf5ef7359c649e88>:0\
    \ \n"
  stdout: ''
  timestamp: 1660008889
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    public\
    \ static List<long> RollingMax(List<long> numbers) {\n        List<long> result\
    \ = new List<long>();\n        long maxValue = numbers.Max();\n        long currentMax\
    \ = maxValue;\n        long currentMaxIndex = 0;\n        long currentMaxIndexCount\
    \ = 0;\n        long currentMaxIndexCount2 = 0;\n        long currentMaxIndexCount3\
    \ = 0;\n        long currentMaxIndexCount4 = 0;\n        long currentMaxIndexCount5\
    \ = 0;\n        long currentMaxIndexCount6 = 0;\n        long currentMaxIndexCount7\
    \ = 0;\n        long currentMaxIndexCount8 = 0;\n        long currentMaxIndexCount9\
    \ = 0;\n        long currentMaxIndexCount10 = 0;\n        long currentMaxIndexCount11\
    \ = 0;\n        long currentMaxIndexCount12 = 0;\n        long currentMaxIndexCount13\
    \ = 0;\n        long currentMaxIndexCount14 = 0;\n        long currentMaxIndexCount15\
    \ = 0;\n        long currentMaxIndexCount16 = 0;\n        long currentMaxIndexCount17\
    \ = 0;\n        long currentMaxIndexCount18 = 0;\n        long currentMaxIndexCount19\
    \ = 0;\n        long currentMaxIndexCount20 = 0;\n        long currentMaxIndexCount21\
    \ = 0;\n        long currentMaxIndexCount22 = 0;\n        long currentMaxIndexCount23\
    \ = 0;\n        long currentMaxIndexCount24 = 0;\n        long currentMaxIndexCount25\
    \ = 0;\n        long currentMaxIndexCount26 = 0;\n        long currentMaxIndexCount27\
    \ = 0;\n        long currentMaxIndexCount28 = 0;\n        long currentMaxIndexCount29\
    \ = 0;\n        long currentMaxIndexCount30 = 0;\n        long currentMaxIndexCount31\
    \ = 0;\n        long currentMaxIndexCount32 = 0;\n        long currentMaxIndexCount33\
    \ = 0;\n        long currentMaxIndexCount34 = 0;\n        long currentMaxIndexCount35\
    \ = 0;\n        long currentMaxIndexCount36 = 0;\n        long currentMaxIndexCount37\
    \ = 0;\n        long currentMaxIndexCount38 = 0;\n        long currentMaxIndexCount39\
    \ = 0;\n        long currentMaxIndexCount40 = 0;\n        long currentMaxIndexCount41\
    \ = 0;\n        long currentMaxIndexCount42 = 0;\n        long currentMaxIndexCount43\
    \ = 0;\n        long currentMaxIndexCount44 = 0;\n        long currentMaxIndexCount45\
    \ = 0;\n        long currentMaxIndexCount46 = 0;\n        long currentMaxIndexCount47\
    \ = 0;\n        long currentMaxIndexCount48 = 0;\n        long currentMaxIndexCount49\
    \ = 0;\n        long currentMaxIndexCount50 = 0;\n        long currentMaxIndexCount51\
    \ = 0;\n        long currentMaxIndexCount52 = 0;\n        long currentMaxIndexCount53\
    \ = 0;\n        long currentMaxIndexCount54\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L,\
    \ (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new\
    \ long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpzkdsd8js.cs(69,36): error CS1002: ; expected

    '
  timestamp: 1660008889
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    public\
    \ static List<long> RollingMax(List<long> numbers) {\n        List<long> max =\
    \ new List<long>();\n        long maxNumber = 0;\n        long currentMax = 0;\n\
    \        long currentNumber = 0;\n        long maxCount = 0;\n        long rollingMaxCount\
    \ = 0;\n        long rollingMax = 0;\n        long rollingMaxCount2 = 0;\n   \
    \     long rollingMax2 = 0;\n        long rollingMaxCount3 = 0;\n        long\
    \ rollingMax3 = 0;\n        long rollingMaxCount4 = 0;\n        long rollingMax4\
    \ = 0;\n        long rollingMaxCount5 = 0;\n        long rollingMax5 = 0;\n  \
    \      long rollingMaxCount6 = 0;\n        long rollingMax6 = 0;\n        long\
    \ rollingMaxCount7 = 0;\n        long rollingMax7 = 0;\n        long rollingMaxCount8\
    \ = 0;\n        long rollingMax8 = 0;\n        long rollingMaxCount9 = 0;\n  \
    \      long rollingMax9 = 0;\n        long rollingMaxCount10 = 0;\n        long\
    \ rollingMax10 = 0;\n        long rollingMaxCount11 = 0;\n        long rollingMax11\
    \ = 0;\n        long rollingMaxCount12 = 0;\n        long rollingMax12 = 0;\n\
    \        long rollingMaxCount13 = 0;\n        long rollingMax13 = 0;\n       \
    \ long rollingMaxCount14 = 0;\n        long rollingMax14 = 0;\n        long rollingMaxCount15\
    \ = 0;\n        long rollingMax15 = 0;\n        long rollingMaxCount16 = 0;\n\
    \        long rollingMax16 = 0;\n        long rollingMaxCount17 = 0;\n       \
    \ long rollingMax17 = 0;\n        long rollingMaxCount18 = 0;\n        long rollingMax18\
    \ = 0;\n        long rollingMaxCount19 = 0;\n        long rollingMax19 = 0;\n\
    \        long rollingMaxCount20 = 0;\n        long rollingMax20 = 0;\n       \
    \ long rollingMaxCount21 = 0;\n        long rollingMax21 = 0;\n        long rollingMaxCount22\
    \ = 0;\n        long rollingMax22 = 0;\n        long rollingMaxCount23 = 0;\n\
    \        long rollingMax23 = 0;\n        long rollingMaxCount24 = 0;\n       \
    \ long rollingMax24 = 0;\n        long rollingMaxCount25 = 0;\n        long rollingMax25\
    \ = 0;\n        long rollingMaxCount26 = 0;\n        long rollingMax26 = 0;\n\
    \        long rollingMaxCount27 = 0;\n        long rollingMax27 = 0;\n       \
    \ long rollingMaxCount28 = 0;\n        long rollingMax28 = 0;\n        long rollingMaxCount29\
    \ = 0;\n        long roll\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(RollingMax((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L,\
    \ (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new\
    \ long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpage1wv4h.cs(74,18): error CS1002: ; expected

    '
  timestamp: 1660008889
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    public\
    \ static List<long> RollingMax(List<long> numbers) {\n        List<long> max =\
    \ new List<long>();\n        long maxElement = numbers.Max();\n        long currentElement\
    \ = numbers.First();\n        long currentMax = currentElement;\n        long\
    \ currentMaxIndex = -1;\n        long currentMaxIndex2 = -1;\n        long currentMaxIndex3\
    \ = -1;\n        long currentMaxIndex4 = -1;\n        long currentMaxIndex5 =\
    \ -1;\n        long currentMaxIndex6 = -1;\n        long currentMaxIndex7 = -1;\n\
    \        long currentMaxIndex8 = -1;\n        long currentMaxIndex9 = -1;\n  \
    \      long currentMaxIndex10 = -1;\n        long currentMaxIndex11 = -1;\n  \
    \      long currentMaxIndex12 = -1;\n        long currentMaxIndex13 = -1;\n  \
    \      long currentMaxIndex14 = -1;\n        long currentMaxIndex15 = -1;\n  \
    \      long currentMaxIndex16 = -1;\n        long currentMaxIndex17 = -1;\n  \
    \      long currentMaxIndex18 = -1;\n        long currentMaxIndex19 = -1;\n  \
    \      long currentMaxIndex20 = -1;\n        long currentMaxIndex21 = -1;\n  \
    \      long currentMaxIndex22 = -1;\n        long currentMaxIndex23 = -1;\n  \
    \      long currentMaxIndex24 = -1;\n        long currentMaxIndex25 = -1;\n  \
    \      long currentMaxIndex26 = -1;\n        long currentMaxIndex27 = -1;\n  \
    \      long currentMaxIndex28 = -1;\n        long currentMaxIndex29 = -1;\n  \
    \      long currentMaxIndex30 = -1;\n        long currentMaxIndex31 = -1;\n  \
    \      long currentMaxIndex32 = -1;\n        long currentMaxIndex33 = -1;\n  \
    \      long currentMaxIndex34 = -1;\n        long currentMaxIndex35 = -1;\n  \
    \      long currentMaxIndex36 = -1;\n        long currentMaxIndex37 = -1;\n  \
    \      long currentMaxIndex38 = -1;\n        long currentMaxIndex39 = -1;\n  \
    \      long currentMaxIndex40 = -1;\n        long currentMaxIndex41 = -1;\n  \
    \      long currentMaxIndex42 = -1;\n        long currentMaxIndex43 = -1;\n  \
    \      long currentMaxIndex44 = -1;\n        long currentMaxIndex45 = -1;\n  \
    \      long currentMaxIndex46 = -1;\n        long currentMaxIndex47 = -1;\n  \
    \      long currentMaxIndex48 = -1;\n        long currentMaxIndex49 = -1;\n  \
    \      long currentMaxIndex50 = -1;\n        long currentMaxIndex51 = -1;\n  \
    \      long currentMaxIndex52 = -1;\n        long currentMaxIndex53 = -1;\n  \
    \      long currentMaxIndex54 = -1;\n        long current\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new\
    \ long[]{(long)4L, (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp84z46rsa.cs(70,21): error CS1002: ; expected

    '
  timestamp: 1660008889
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    public\
    \ static List<long> RollingMax(List<long> numbers) {\n        List<long> max =\
    \ new List<long>();\n        long maxValue = numbers.Max();\n        long currentMax\
    \ = maxValue;\n        long currentMaxIndex = 0;\n        long currentMaxIndexValue\
    \ = 0;\n        foreach (long number in numbers) {\n            if (number > currentMax)\
    \ {\n                currentMax = number;\n                currentMaxIndex = currentMaxIndexValue;\n\
    \            }\n            if (number == currentMax) {\n                currentMaxIndex++;\n\
    \                currentMaxIndexValue = currentMaxIndex;\n            }\n    \
    \    }\n        max.Add(currentMax);\n        max.Add(currentMaxIndex);\n    \
    \    return max;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(RollingMax((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(RollingMax((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new\
    \ List<long>(new long[]{(long)4L, (long)3L, (long)2L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.InvalidOperationException: Sequence contains\
    \ no elements\n  at System.Linq.Enumerable.Max (System.Collections.Generic.IEnumerable`1[T]\
    \ source) [0x00022] in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem.RollingMax\
    \ (System.Collections.Generic.List`1[T] numbers) [0x00007] in <18b01ee7aaf74e3dab1792fc0abc499c>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <18b01ee7aaf74e3dab1792fc0abc499c>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.InvalidOperationException: Sequence\
    \ contains no elements\n  at System.Linq.Enumerable.Max (System.Collections.Generic.IEnumerable`1[T]\
    \ source) [0x00022] in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem.RollingMax\
    \ (System.Collections.Generic.List`1[T] numbers) [0x00007] in <18b01ee7aaf74e3dab1792fc0abc499c>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <18b01ee7aaf74e3dab1792fc0abc499c>:0\
    \ \n"
  stdout: ''
  timestamp: 1660008889
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    public\
    \ static List<long> RollingMax(List<long> numbers) {\n        List<long> max =\
    \ new List<long>();\n        long maxElement = numbers.First();\n        long\
    \ currentMax = maxElement;\n        long currentMaxIndex = 0;\n        foreach\
    \ (long number in numbers) {\n            if (number > maxElement) {\n       \
    \         currentMax = maxElement;\n                currentMaxIndex = maxIndex++;\n\
    \            }\n            if (number == maxElement) {\n                max.Add(currentMax);\n\
    \            }\n            currentMax = number;\n            currentMaxIndex++;\n\
    \        }\n        return max;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L,\
    \ (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new\
    \ long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmprk0_585g.cs(19,35): error CS0103: The name ''maxIndex'' does not exist
    in the current context

    '
  timestamp: 1660008889
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    public\
    \ static List<long> RollingMax(List<long> numbers) {\n        List<long> result\
    \ = new List<long>();\n        long maxValue = numbers.Max();\n        long currentMax\
    \ = maxValue;\n        long currentMaxIndex = -1;\n        long currentMaxIndex\
    \ = -1;\n        long currentMaxIndex = -1;\n        long currentMaxIndex = -1;\n\
    \        long currentMaxIndex = -1;\n        long currentMaxIndex = -1;\n    \
    \    long currentMaxIndex = -1;\n        long currentMaxIndex = -1;\n        long\
    \ currentMaxIndex = -1;\n        long currentMaxIndex = -1;\n        long currentMaxIndex\
    \ = -1;\n        long currentMaxIndex = -1;\n        long currentMaxIndex = -1;\n\
    \        long currentMaxIndex = -1;\n        long currentMaxIndex = -1;\n    \
    \    long currentMaxIndex = -1;\n        long currentMaxIndex = -1;\n        long\
    \ currentMaxIndex = -1;\n        long currentMaxIndex = -1;\n        long currentMaxIndex\
    \ = -1;\n        long currentMaxIndex = -1;\n        long currentMaxIndex = -1;\n\
    \        long currentMaxIndex = -1;\n        long currentMaxIndex = -1;\n    \
    \    long currentMaxIndex = -1;\n        long currentMaxIndex = -1;\n        long\
    \ currentMaxIndex = -1;\n        long currentMaxIndex = -1;\n        long currentMaxIndex\
    \ = -1;\n        long currentMaxIndex = -1;\n        long currentMaxIndex = -1;\n\
    \        long currentMaxIndex = -1;\n        long currentMaxIndex = -1;\n    \
    \    long currentMaxIndex = -1;\n        long currentMaxIndex = -1;\n        long\
    \ currentMaxIndex = -1;\n        long currentMaxIndex = -1;\n        long currentMaxIndex\
    \ = -1;\n        long currentMaxIndex = -1;\n        long currentMaxIndex = -1;\n\
    \        long currentMaxIndex = -1;\n        long currentMaxIndex = -1;\n    \
    \    long currentMaxIndex = -1;\n        long currentMaxIndex = -1;\n        long\
    \ currentMaxIndex = -1;\n        long currentMaxIndex = -1;\n        long currentMaxIndex\
    \ = -1;\n        long currentMaxIndex = -1;\n        long currentMaxIndex = -1;\n\
    \        long currentMaxIndex = -1;\n        long currentMaxIndex = -1;\n    \
    \    long currentMaxIndex = -1;\n        long currentMaxIndex = -1;\n        long\
    \ currentMaxIndex = -1;\n        long currentMaxIndex = -1;\n        long currentMaxIndex\
    \ = -1;\n        long currentMaxIndex = -1;\n        long currentMaxIndex = -1;\n\
    \        long currentMaxIndex = -1;\n        long currentMaxIndex = -1;\n    \
    \    long currentMaxIndex = -1;\n        long currentMaxIndex = -1;\n        long\
    \ currentMaxIndex = -1;\n        long currentMaxIndex = -1;\n        long currentMaxIndex\
    \ = -1;\n        long currentMaxIndex = -1;\n        long currentMaxIndex = -1;\n\
    \        long currentMaxIndex = -1;\n        long currentMaxIndex = -1;\n    \
    \    long current\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(RollingMax((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(RollingMax((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new\
    \ List<long>(new long[]{(long)4L, (long)3L, (long)2L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp7lpxpou0.cs(84,21): error CS1002: ; expected

    '
  timestamp: 1660008889
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    public\
    \ static List<long> RollingMax(List<long> numbers) {\n        List<long> result\
    \ = new List<long>();\n        long max = 0;\n        long currentMax = 0;\n \
    \       long currentSum = 0;\n        foreach (long number in numbers) {\n   \
    \         currentSum += number;\n            if (currentSum > max) {\n       \
    \         max = currentSum;\n                currentMax = number;\n          \
    \  }\n        }\n        result.Add(currentMax);\n        return result;\n   \
    \ }\n    public static void Main(string[] args) {\n    Debug.Assert(RollingMax((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(RollingMax((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new\
    \ List<long>(new long[]{(long)4L, (long)3L, (long)2L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <b10fbf4ecd9e4dcd8051a3d79e10dc4d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <b10fbf4ecd9e4dcd8051a3d79e10dc4d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660008890
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    public\
    \ static List<long> RollingMax(List<long> numbers) {\n        List<long> max =\
    \ new List<long>();\n        long maxValue = numbers.Max();\n        long currentMax\
    \ = maxValue;\n        long currentMaxIndex = 0;\n        long currentMaxIndexValue\
    \ = 0;\n        long currentMaxIndexValue2 = 0;\n        long currentMaxIndexValue3\
    \ = 0;\n        long currentMaxIndexValue4 = 0;\n        long currentMaxIndexValue5\
    \ = 0;\n        long currentMaxIndexValue6 = 0;\n        long currentMaxIndexValue7\
    \ = 0;\n        long currentMaxIndexValue8 = 0;\n        long currentMaxIndexValue9\
    \ = 0;\n        long currentMaxIndexValue10 = 0;\n        long currentMaxIndexValue11\
    \ = 0;\n        long currentMaxIndexValue12 = 0;\n        long currentMaxIndexValue13\
    \ = 0;\n        long currentMaxIndexValue14 = 0;\n        long currentMaxIndexValue15\
    \ = 0;\n        long currentMaxIndexValue16 = 0;\n        long currentMaxIndexValue17\
    \ = 0;\n        long currentMaxIndexValue18 = 0;\n        long currentMaxIndexValue19\
    \ = 0;\n        long currentMaxIndexValue20 = 0;\n        long currentMaxIndexValue21\
    \ = 0;\n        long currentMaxIndexValue22 = 0;\n        long currentMaxIndexValue23\
    \ = 0;\n        long currentMaxIndexValue24 = 0;\n        long currentMaxIndexValue25\
    \ = 0;\n        long currentMaxIndexValue26 = 0;\n        long currentMaxIndexValue27\
    \ = 0;\n        long currentMaxIndexValue28 = 0;\n        long currentMaxIndexValue29\
    \ = 0;\n        long currentMaxIndexValue30 = 0;\n        long currentMaxIndexValue31\
    \ = 0;\n        long currentMaxIndexValue32 = 0;\n        long currentMaxIndexValue33\
    \ = 0;\n        long currentMaxIndexValue34 = 0;\n        long currentMaxIndexValue35\
    \ = 0;\n        long currentMaxIndexValue36 = 0;\n        long currentMaxIndexValue37\
    \ = 0;\n        long currentMaxIndexValue38 = 0;\n        long currentMaxIndexValue39\
    \ = 0;\n        long currentMaxIndexValue40 = 0;\n        long currentMaxIndexValue41\
    \ = 0;\n        long currentMaxIndexValue42 = 0;\n        long currentMaxIndexValue43\
    \ = 0;\n        long currentMaxIndexValue44 = 0;\n        long currentMaxIndexValue45\
    \ = 0;\n        long currentMaxIndexValue46 = 0;\n        long currentMaxIndexValue47\
    \ = 0;\n        long currentMaxIndexValue48 = 0;\n        long currentMaxIndexValue49\
    \ = 0;\n        long currentMaxIndexValue50 = 0;\n        long currentMaxIndexValue51\
    \ = 0;\n        long currentMaxIndexValue52 = 0;\n        long currentMaxIndexValue53\
    \ = 0;\n        long currentMaxIndexValue54\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L,\
    \ (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new\
    \ long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpcj81lryj.cs(69,36): error CS1002: ; expected

    '
  timestamp: 1660008889
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    public\
    \ static List<long> RollingMax(List<long> numbers) {\n        List<long> result\
    \ = new List<long>();\n        long max = 0;\n        long currentMax = 0;\n \
    \       long currentNumber = 0;\n        foreach (long number in numbers) {\n\
    \            currentNumber = number;\n            currentMax = number;\n     \
    \       while (currentNumber > currentMax) {\n                currentMax = currentNumber;\n\
    \                result.Add(currentMax);\n                currentNumber -= currentMax;\n\
    \            }\n        }\n        return result;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new\
    \ long[]{(long)4L, (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <45ce33c5e4fd4536ad5db7e4ffccc5f0>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <45ce33c5e4fd4536ad5db7e4ffccc5f0>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660008890
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    public\
    \ static List<long> RollingMax(List<long> numbers) {\n        List<long> result\
    \ = new List<long>();\n        long maxValue = numbers.Max();\n        long currentMax\
    \ = maxValue;\n        long currentMaxIndex = 0;\n        long currentMaxIndex2\
    \ = 0;\n        long currentMaxIndex3 = 0;\n        long currentMaxIndex4 = 0;\n\
    \        long currentMaxIndex5 = 0;\n        long currentMaxIndex6 = 0;\n    \
    \    long currentMaxIndex7 = 0;\n        long currentMaxIndex8 = 0;\n        long\
    \ currentMaxIndex9 = 0;\n        long currentMaxIndex10 = 0;\n        long currentMaxIndex11\
    \ = 0;\n        long currentMaxIndex12 = 0;\n        long currentMaxIndex13 =\
    \ 0;\n        long currentMaxIndex14 = 0;\n        long currentMaxIndex15 = 0;\n\
    \        long currentMaxIndex16 = 0;\n        long currentMaxIndex17 = 0;\n  \
    \      long currentMaxIndex18 = 0;\n        long currentMaxIndex19 = 0;\n    \
    \    long currentMaxIndex20 = 0;\n        long currentMaxIndex21 = 0;\n      \
    \  long currentMaxIndex22 = 0;\n        long currentMaxIndex23 = 0;\n        long\
    \ currentMaxIndex24 = 0;\n        long currentMaxIndex25 = 0;\n        long currentMaxIndex26\
    \ = 0;\n        long currentMaxIndex27 = 0;\n        long currentMaxIndex28 =\
    \ 0;\n        long currentMaxIndex29 = 0;\n        long currentMaxIndex30 = 0;\n\
    \        long currentMaxIndex31 = 0;\n        long currentMaxIndex32 = 0;\n  \
    \      long currentMaxIndex33 = 0;\n        long currentMaxIndex34 = 0;\n    \
    \    long currentMaxIndex35 = 0;\n        long currentMaxIndex36 = 0;\n      \
    \  long currentMaxIndex37 = 0;\n        long currentMaxIndex38 = 0;\n        long\
    \ currentMaxIndex39 = 0;\n        long currentMaxIndex40 = 0;\n        long currentMaxIndex41\
    \ = 0;\n        long currentMaxIndex42 = 0;\n        long currentMaxIndex43 =\
    \ 0;\n        long currentMaxIndex44 = 0;\n        long currentMaxIndex45 = 0;\n\
    \        long currentMaxIndex46 = 0;\n        long currentMaxIndex47 = 0;\n  \
    \      long currentMaxIndex48 = 0;\n        long currentMaxIndex49 = 0;\n    \
    \    long currentMaxIndex50 = 0;\n        long currentMaxIndex51 = 0;\n      \
    \  long currentMaxIndex52 = 0;\n        long currentMaxIndex53 = 0;\n        long\
    \ currentMaxIndex54 = 0;\n        long currentMaxIndex55 = 0;\n        long currentMaxIndex56\
    \ = 0;\n        long currentMaxIndex57 = 0;\n        long currentMaxIndex58 =\
    \ 0;\n        long currentMaxIndex59 = 0;\n        long currentMaxIndex60 = 0;\n\
    \        long currentMaxIndex61 = 0;\n        long current\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new\
    \ long[]{(long)4L, (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmphd0j6__f.cs(76,21): error CS1002: ; expected

    '
  timestamp: 1660008889
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    public\
    \ static List<long> RollingMax(List<long> numbers) {\n        List<long> max =\
    \ new List<long>();\n        long maxElement = numbers.Max();\n        long currentMax\
    \ = maxElement;\n        long currentMaxIndex = 0;\n        long currentMaxIndex2\
    \ = numbers.Count - 1;\n        long currentMaxIndex3 = numbers.Count - 2;\n \
    \       long currentMaxIndex4 = numbers.Count - 3;\n        long currentMaxIndex5\
    \ = numbers.Count - 4;\n        long currentMaxIndex6 = numbers.Count - 5;\n \
    \       long currentMaxIndex7 = numbers.Count - 6;\n        long currentMaxIndex8\
    \ = numbers.Count - 7;\n        long currentMaxIndex9 = numbers.Count - 8;\n \
    \       long currentMaxIndex10 = numbers.Count - 9;\n        long currentMaxIndex11\
    \ = numbers.Count - 10;\n        long currentMaxIndex12 = numbers.Count - 11;\n\
    \        long currentMaxIndex13 = numbers.Count - 12;\n        long currentMaxIndex14\
    \ = numbers.Count - 13;\n        long currentMaxIndex15 = numbers.Count - 14;\n\
    \        long currentMaxIndex16 = numbers.Count - 15;\n        long currentMaxIndex17\
    \ = numbers.Count - 16;\n        long currentMaxIndex18 = numbers.Count - 17;\n\
    \        long currentMaxIndex19 = numbers.Count - 18;\n        long currentMaxIndex20\
    \ = numbers.Count - 19;\n        long currentMaxIndex21 = numbers.Count - 20;\n\
    \        long currentMaxIndex22 = numbers.Count - 21;\n        long currentMaxIndex23\
    \ = numbers.Count - 22;\n        long currentMaxIndex24 = numbers.Count - 23;\n\
    \        long currentMaxIndex25 = numbers.Count - 24;\n        long currentMaxIndex26\
    \ = numbers.Count - 25;\n        long currentMaxIndex27 = numbers.Count - 26;\n\
    \        long currentMaxIndex28 = numbers.Count - 27;\n        long currentMaxIndex29\
    \ = numbers.Count - 28;\n        long currentMaxIndex30 = numbers.Count - 29;\n\
    \        long currentMaxIndex31 = numbers.Count - 30;\n        long currentMaxIndex32\
    \ = numbers.Count - 31;\n        long currentMaxIndex33 = numbers.Count - 32;\n\
    \        long currentMaxIndex34 = numbers.Count - 33;\n        long currentMaxIndex35\
    \ = numbers.Count - 34;\n        long currentMaxIndex36 = numbers.Count - 35;\n\
    \        long currentMaxIndex37 = numbers.Count - 36;\n        long currentMaxIndex38\
    \ = numbers.Count - 37;\n        long currentMaxIndex39 = numbers.Count - 38;\n\
    \        long currentMaxIndex40 = numbers.Count - 39;\n        \n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new\
    \ long[]{(long)4L, (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpz_dx70vs.cs(15,14): warning CS0219: The variable ''currentMaxIndex'' is
    assigned but its value is never used

    /tmp/tmpz_dx70vs.cs(11,30): error CS0161: ''Problem.RollingMax(List<long>)'':
    not all code paths return a value

    '
  timestamp: 1660008889
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    public\
    \ static List<long> RollingMax(List<long> numbers) {\n        List<long> result\
    \ = new List<long>();\n        long maxValue = numbers.Max();\n        long currentMax\
    \ = maxValue;\n        long currentMaxIndex = 0;\n        long currentMaxIndexValue\
    \ = 0;\n        long currentMaxIndexValue2 = 0;\n        long currentMaxIndexValue3\
    \ = 0;\n        long currentMaxIndexValue4 = 0;\n        long currentMaxIndexValue5\
    \ = 0;\n        long currentMaxIndexValue6 = 0;\n        long currentMaxIndexValue7\
    \ = 0;\n        long currentMaxIndexValue8 = 0;\n        long currentMaxIndexValue9\
    \ = 0;\n        long currentMaxIndexValue10 = 0;\n        long currentMaxIndexValue11\
    \ = 0;\n        long currentMaxIndexValue12 = 0;\n        long currentMaxIndexValue13\
    \ = 0;\n        long currentMaxIndexValue14 = 0;\n        long currentMaxIndexValue15\
    \ = 0;\n        long currentMaxIndexValue16 = 0;\n        long currentMaxIndexValue17\
    \ = 0;\n        long currentMaxIndexValue18 = 0;\n        long currentMaxIndexValue19\
    \ = 0;\n        long currentMaxIndexValue20 = 0;\n        long currentMaxIndexValue21\
    \ = 0;\n        long currentMaxIndexValue22 = 0;\n        long currentMaxIndexValue23\
    \ = 0;\n        long currentMaxIndexValue24 = 0;\n        long currentMaxIndexValue25\
    \ = 0;\n        long currentMaxIndexValue26 = 0;\n        long currentMaxIndexValue27\
    \ = 0;\n        long currentMaxIndexValue28 = 0;\n        long currentMaxIndexValue29\
    \ = 0;\n        long currentMaxIndexValue30 = 0;\n        long currentMaxIndexValue31\
    \ = 0;\n        long currentMaxIndexValue32 = 0;\n        long currentMaxIndexValue33\
    \ = 0;\n        long currentMaxIndexValue34 = 0;\n        long currentMaxIndexValue35\
    \ = 0;\n        long currentMaxIndexValue36 = 0;\n        long currentMaxIndexValue37\
    \ = 0;\n        long currentMaxIndexValue38 = 0;\n        long currentMaxIndexValue39\
    \ = 0;\n        long currentMaxIndexValue40 = 0;\n        long currentMaxIndexValue41\
    \ = 0;\n        long currentMaxIndexValue42 = 0;\n        long currentMaxIndexValue43\
    \ = 0;\n        long currentMaxIndexValue44 = 0;\n        long currentMaxIndexValue45\
    \ = 0;\n        long currentMaxIndexValue46 = 0;\n        long currentMaxIndexValue47\
    \ = 0;\n        long currentMaxIndexValue48 = 0;\n        long currentMaxIndexValue49\
    \ = 0;\n        long currentMaxIndexValue50 = 0;\n        long currentMaxIndexValue51\
    \ = 0;\n        long currentMaxIndexValue52 = 0;\n        long currentMaxIndexValue53\
    \ = 0;\n        long currentMaxIndexValue54\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L,\
    \ (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new\
    \ long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp0ues37ym.cs(69,36): error CS1002: ; expected

    '
  timestamp: 1660008889
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    public\
    \ static List<long> RollingMax(List<long> numbers) {\n        List<long> result\
    \ = new List<long>();\n        long maxValue = numbers.Max();\n        long currentMax\
    \ = maxValue;\n        long currentMaxIndex = 0;\n        long currentMaxIndex2\
    \ = 0;\n        long currentMaxIndex3 = 0;\n        long currentMaxIndex4 = 0;\n\
    \        long currentMaxIndex5 = 0;\n        long currentMaxIndex6 = 0;\n    \
    \    long currentMaxIndex7 = 0;\n        long currentMaxIndex8 = 0;\n        long\
    \ currentMaxIndex9 = 0;\n        long currentMaxIndex10 = 0;\n        long currentMaxIndex11\
    \ = 0;\n        long currentMaxIndex12 = 0;\n        long currentMaxIndex13 =\
    \ 0;\n        long currentMaxIndex14 = 0;\n        long currentMaxIndex15 = 0;\n\
    \        long currentMaxIndex16 = 0;\n        long currentMaxIndex17 = 0;\n  \
    \      long currentMaxIndex18 = 0;\n        long currentMaxIndex19 = 0;\n    \
    \    long currentMaxIndex20 = 0;\n        long currentMaxIndex21 = 0;\n      \
    \  long currentMaxIndex22 = 0;\n        long currentMaxIndex23 = 0;\n        long\
    \ currentMaxIndex24 = 0;\n        long currentMaxIndex25 = 0;\n        long currentMaxIndex26\
    \ = 0;\n        long currentMaxIndex27 = 0;\n        long currentMaxIndex28 =\
    \ 0;\n        long currentMaxIndex29 = 0;\n        long currentMaxIndex30 = 0;\n\
    \        long currentMaxIndex31 = 0;\n        long currentMaxIndex32 = 0;\n  \
    \      long currentMaxIndex33 = 0;\n        long currentMaxIndex34 = 0;\n    \
    \    long currentMaxIndex35 = 0;\n        long currentMaxIndex36 = 0;\n      \
    \  long currentMaxIndex37 = 0;\n        long currentMaxIndex38 = 0;\n        long\
    \ currentMaxIndex39 = 0;\n        long currentMaxIndex40 = 0;\n        long currentMaxIndex41\
    \ = 0;\n        long currentMaxIndex42 = 0;\n        long currentMaxIndex43 =\
    \ 0;\n        long currentMaxIndex44 = 0;\n        long currentMaxIndex45 = 0;\n\
    \        long currentMaxIndex46 = 0;\n        long currentMaxIndex47 = 0;\n  \
    \      long currentMaxIndex48 = 0;\n        long currentMaxIndex49 = 0;\n    \
    \    long currentMaxIndex50 = 0;\n        long currentMaxIndex51 = 0;\n      \
    \  long currentMaxIndex52 = 0;\n        long currentMaxIndex53 = 0;\n        long\
    \ currentMaxIndex54 = 0;\n        long currentMaxIndex55 = 0;\n        long currentMaxIndex56\
    \ = 0;\n        long currentMaxIndex57 = 0;\n        long currentMaxIndex58 =\
    \ 0;\n        long currentMaxIndex59 = 0;\n        long currentMaxIndex60 = 0;\n\
    \        long currentMaxIndex61 = 0;\n        long current\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new\
    \ long[]{(long)4L, (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmphd0j6__f.cs(76,21): error CS1002: ; expected

    '
  timestamp: 1660008889
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    public\
    \ static List<long> RollingMax(List<long> numbers) {\n        List<long> result\
    \ = new List<long>();\n        long maxValue = numbers.Max();\n        long currentMax\
    \ = maxValue;\n        long currentMaxIndex = 0;\n        long currentMaxIndexValue\
    \ = 0;\n        long currentMaxIndexValue2 = 0;\n        long currentMaxIndexValue3\
    \ = 0;\n        long currentMaxIndexValue4 = 0;\n        long currentMaxIndexValue5\
    \ = 0;\n        long currentMaxIndexValue6 = 0;\n        long currentMaxIndexValue7\
    \ = 0;\n        long currentMaxIndexValue8 = 0;\n        long currentMaxIndexValue9\
    \ = 0;\n        long currentMaxIndexValue10 = 0;\n        long currentMaxIndexValue11\
    \ = 0;\n        long currentMaxIndexValue12 = 0;\n        long currentMaxIndexValue13\
    \ = 0;\n        long currentMaxIndexValue14 = 0;\n        long currentMaxIndexValue15\
    \ = 0;\n        long currentMaxIndexValue16 = 0;\n        long currentMaxIndexValue17\
    \ = 0;\n        long currentMaxIndexValue18 = 0;\n        long currentMaxIndexValue19\
    \ = 0;\n        long currentMaxIndexValue20 = 0;\n        long currentMaxIndexValue21\
    \ = 0;\n        long currentMaxIndexValue22 = 0;\n        long currentMaxIndexValue23\
    \ = 0;\n        long currentMaxIndexValue24 = 0;\n        long currentMaxIndexValue25\
    \ = 0;\n        long currentMaxIndexValue26 = 0;\n        long currentMaxIndexValue27\
    \ = 0;\n        long currentMaxIndexValue28 = 0;\n        long currentMaxIndexValue29\
    \ = 0;\n        long currentMaxIndexValue30 = 0;\n        long currentMaxIndexValue31\
    \ = 0;\n        long currentMaxIndexValue32 = 0;\n        long currentMaxIndexValue33\
    \ = 0;\n        long currentMaxIndexValue34 = 0;\n        long currentMaxIndexValue35\
    \ = 0;\n        long currentMaxIndexValue36 = 0;\n        long currentMaxIndexValue37\
    \ = 0;\n        long currentMaxIndexValue38 = 0;\n        long currentMaxIndexValue39\
    \ = 0;\n        long currentMaxIndexValue40 = 0;\n        long currentMaxIndexValue41\
    \ = 0;\n        long currentMaxIndexValue42 = 0;\n        long currentMaxIndexValue43\
    \ = 0;\n        long currentMaxIndexValue44 = 0;\n        long currentMaxIndexValue45\
    \ = 0;\n        long currentMaxIndexValue46 = 0;\n        long currentMaxIndexValue47\
    \ = 0;\n        long currentMaxIndexValue48 = 0;\n        long currentMaxIndexValue49\
    \ = 0;\n        long currentMaxIndexValue50 = 0;\n        long currentMaxIndexValue51\
    \ = 0;\n        long currentMaxIndexValue52 = 0;\n        long currentMaxIndexValue53\
    \ = 0;\n        long currentMaxIndexValue54\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L,\
    \ (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new\
    \ long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp0ues37ym.cs(69,36): error CS1002: ; expected

    '
  timestamp: 1660008889
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    public\
    \ static List<long> RollingMax(List<long> numbers) {\n        List<long> result\
    \ = new List<long>();\n        long max = 0;\n        long currentMax = 0;\n \
    \       long currentSum = 0;\n        long sum = 0;\n        long currentSumOfDifferences\
    \ = 0;\n        long currentSumOfSquaresOfDifferences = 0;\n        long currentSumOfDifferenceSquaresOfDifferences\
    \ = 0;\n        long currentSumOfSquaresOfDifferences = 0;\n        long currentSumOfDifferenceSquaresOfDifferences\
    \ = 0;\n        long currentSumOfSquaresOfDifferences = 0;\n        long currentSumOfDifferenceSquaresOfDifferences\
    \ = 0;\n        long currentSumOfSquaresOfDifferences = 0;\n        long currentSumOfDifferenceSquaresOfDifferences\
    \ = 0;\n        long currentSumOfSquaresOfDifferences = 0;\n        long currentSumOfDifferenceSquaresOfDifferences\
    \ = 0;\n        long currentSumOfSquaresOfDifferences = 0;\n        long currentSumOfDifferenceSquaresOfDifferences\
    \ = 0;\n        long currentSumOfSquaresOfDifferences = 0;\n        long currentSumOfDifferenceSquaresOfDifferences\
    \ = 0;\n        long currentSumOfSquaresOfDifferences = 0;\n        long currentSumOfDifferenceSquaresOfDifferences\
    \ = 0;\n        long currentSumOfSquaresOfDifferences = 0;\n        long currentSumOfDifferenceSquaresOfDifferences\
    \ = 0;\n        long currentSumOfSquaresOfDifferences = 0;\n        long currentSumOfDifferenceSquaresOfDifferences\
    \ = 0;\n        long currentSumOfSquaresOfDifferences = 0;\n        long currentSumOfDifferenceSquaresOfDifferences\
    \ = 0;\n        long currentSumOfSquaresOfDifferences = 0;\n        long currentSumOfDifferenceSquaresOfDifferences\
    \ = 0;\n        long currentSumOfSquaresOfDifferences = 0;\n        long currentSumOfDifferenceSquaresOfDifferences\
    \ = 0;\n        long currentSumOfSquaresOfDifferences = 0;\n        long currentSumOfDifferenceSquaresOfDifferences\
    \ = 0;\n        long currentSumOfSquaresOfDifferences = 0;\n        long currentSumOfDifferenceSquaresOfDifferences\
    \ = 0;\n        long currentSumOfSquaresOfDifferences = 0;\n        long currentSumOfDifferenceSquaresOfDifferences\
    \ = 0;\n        long currentSumOfSquaresOfDifferences = 0;\n        long currentSumOfDifferenceSquaresOfDifferences\
    \ = 0;\n        long currentSumOfSquaresOfDifferences = 0;\n        long currentSumOfDifferenceSquaresOfDifferences\
    \ = 0;\n        long currentSumOfSquaresOfDifferences = 0;\n        long currentSumOfDifferenceSquaresOfDifferences\
    \ = 0;\n        long currentSumOfSquaresOfDifferences = 0;\n        long currentSumOfDifferenceSquaresOfDifferences\
    \ = 0;\n        long currentSumOfSquaresOfDifferences = 0;\n        \n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(RollingMax((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(RollingMax((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new\
    \ List<long>(new long[]{(long)4L, (long)3L, (long)2L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpjd96h2pw.cs(20,14): error CS0128: A local variable or function named ''currentSumOfSquaresOfDifferences''
    is already defined in this scope

    /tmp/tmpjd96h2pw.cs(21,14): error CS0128: A local variable or function named ''currentSumOfDifferenceSquaresOfDifferences''
    is already defined in this scope

    /tmp/tmpjd96h2pw.cs(22,14): error CS0128: A local variable or function named ''currentSumOfSquaresOfDifferences''
    is already defined in this scope

    /tmp/tmpjd96h2pw.cs(23,14): error CS0128: A local variable or function named ''currentSumOfDifferenceSquaresOfDifferences''
    is already defined in this scope

    /tmp/tmpjd96h2pw.cs(24,14): error CS0128: A local variable or function named ''currentSumOfSquaresOfDifferences''
    is already defined in this scope

    /tmp/tmpjd96h2pw.cs(25,14): error CS0128: A local variable or function named ''currentSumOfDifferenceSquaresOfDifferences''
    is already defined in this scope

    /tmp/tmpjd96h2pw.cs(26,14): error CS0128: A local variable or function named ''currentSumOfSquaresOfDifferences''
    is already defined in this scope

    /tmp/tmpjd96h2pw.cs(27,14): error CS0128: A local variable or function named ''currentSumOfDifferenceSquaresOfDifferences''
    is already defined in this scope

    /tmp/tmpjd96h2pw.cs(28,14): error CS0128: A local variable or function named ''currentSumOfSquaresOfDifferences''
    is already defined in this scope

    /tmp/tmpjd96h2pw.cs(29,14): error CS0128: A local variable or function named ''currentSumOfDifferenceSquaresOfDifferences''
    is already defined in this scope

    /tmp/tmpjd96h2pw.cs(30,14): error CS0128: A local variable or function named ''currentSumOfSquaresOfDifferences''
    is already defined in this scope

    /tmp/tmpjd96h2pw.cs(31,14): error CS0128: A local variable or function named ''currentSumOfDifferenceSquaresOfDifferences''
    is already defined in this scope

    /tmp/tmpjd96h2pw.cs(32,14): error CS0128: A local variable or function named ''currentSumOfSquaresOfDifferences''
    is alread'
  timestamp: 1660008889
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    public\
    \ static List<long> RollingMax(List<long> numbers) {\n        List<long> result\
    \ = new List<long>();\n        long maxValue = numbers.Max();\n        long currentMax\
    \ = maxValue;\n        long currentMaxIndex = 0;\n        long currentMaxIndex\
    \ = numbers.IndexOf(currentMax);\n        long currentMaxValue = currentMax;\n\
    \        while (currentMaxIndex != numbers.Count - 1) {\n            currentMax\
    \ = numbers.ElementAtOrDefault(currentMaxIndex + 1);\n            currentMaxIndex\
    \ = numbers.IndexOf(currentMax);\n            currentMaxValue = currentMax;\n\
    \            result.Add(currentMaxValue);\n        }\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(RollingMax((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(RollingMax((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new\
    \ List<long>(new long[]{(long)4L, (long)3L, (long)2L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp46m2h0cm.cs(16,14): error CS0128: A local variable or function named ''currentMaxIndex''
    is already defined in this scope

    /tmp/tmp46m2h0cm.cs(19,53): error CS1503: Argument 2: cannot convert from ''long''
    to ''int''

    '
  timestamp: 1660008890
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    public\
    \ static List<long> RollingMax(List<long> numbers) {\n        List<long> result\
    \ = new List<long>();\n        long max = 0;\n        long currentMax = 0;\n \
    \       long currentSum = 0;\n        long currentSumOfSquares = 0;\n        long\
    \ currentSumOfCubes = 0;\n        long currentSumOfPowers = 0;\n        long currentSumOfPowersOfSquares\
    \ = 0;\n        long currentSumOfPowersOfCubes = 0;\n        long currentSumOfPowersOfPowers\
    \ = 0;\n        long currentSumOfPowersOfPowersOfSquares = 0;\n        long currentSumOfPowersOfPowersOfCubes\
    \ = 0;\n        long currentSumOfPowersOfPowersOfPowers = 0;\n        long currentSumOfPowersOfPowersOfPowersOfSquares\
    \ = 0;\n        long currentSumOfPowersOfPowersOfPowersOfCubes = 0;\n        long\
    \ currentSumOfPowersOfPowersOfPowersOfPowers = 0;\n        long currentSumOfPowersOfPowersOfPowersOfPowersOfSquares\
    \ = 0;\n        long currentSumOfPowersOfPowersOfPowersOfPowersOfCubes = 0;\n\
    \        long currentSumOfPowersOfPowersOfPowersOfPowersOfPowers = 0;\n      \
    \  long currentSumOfPowersOfPowersOfPowersOfPowersOfPowersOfSquares = 0;\n   \
    \     long currentSumOfPowersOfPowersOfPowersOfPowersOfPowersOfCubes = 0;\n  \
    \      long currentSumOfPowersOfPowersOfPowersOfPowersOfPowersOfPowers = 0;\n\
    \        long currentSumOfPowersOfPowersOfPowersOfPowersOfPowersOfPowersOfSquares\
    \ = 0;\n        long currentSumOfPowersOfPowersOfPowersOfPowersOfPowersOfPowersOfCubes\
    \ = 0;\n        long currentSumOfPowersOfPowersOfPowersOfPowersOfPowersOfPowersOfPowers\
    \ = 0;\n        long currentSumOfPowersOfPowersOfPowersOfPowersOfPowersOfPowersOfSquares\
    \ = 0;\n        long currentSumOfPowersOfPowersOfPowersOfPowersOfPowersOfPowersOfCubes\
    \ = 0;\n        long currentSumOfPowersOfPowersOfPowersOfPowersOfPowersOfPowersOfPowers\
    \ = 0;\n        long currentSumOfPowersOfPowersOfPowersOfPowersOfPowersOfPowersOfPowersOfSquares\
    \ = 0;\n        long currentSumOfPowersOfPowersOfPowersOfPowersOfPowersOfPower\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(RollingMax((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(RollingMax((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new\
    \ List<long>(new long[]{(long)4L, (long)3L, (long)2L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp81yd12nz.cs(41,71): error CS1002: ; expected

    '
  timestamp: 1660008889
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    public\
    \ static List<long> RollingMax(List<long> numbers) {\n        List<long> result\
    \ = new List<long>();\n        long max = 0;\n        long currentMax = 0;\n \
    \       long currentMaxIndex = 0;\n        long currentMaxValue = numbers[0];\n\
    \        long currentMaxValueIndex = numbers.IndexOf(currentMaxValue);\n     \
    \   long currentMaxValueIndex = numbers.IndexOf(currentMaxValue);\n        long\
    \ currentMaxValueIndex = numbers.IndexOf(currentMaxValue);\n        long currentMaxValueIndex\
    \ = numbers.IndexOf(currentMaxValue);\n        long currentMaxValueIndex = numbers.IndexOf(currentMaxValue);\n\
    \        long currentMaxValueIndex = numbers.IndexOf(currentMaxValue);\n     \
    \   long currentMaxValueIndex = numbers.IndexOf(currentMaxValue);\n        long\
    \ currentMaxValueIndex = numbers.IndexOf(currentMaxValue);\n        long currentMaxValueIndex\
    \ = numbers.IndexOf(currentMaxValue);\n        long currentMaxValueIndex = numbers.IndexOf(currentMaxValue);\n\
    \        long currentMaxValueIndex = numbers.IndexOf(currentMaxValue);\n     \
    \   long currentMaxValueIndex = numbers.IndexOf(currentMaxValue);\n        long\
    \ currentMaxValueIndex = numbers.IndexOf(currentMaxValue);\n        long currentMaxValueIndex\
    \ = numbers.IndexOf(currentMaxValue);\n        long currentMaxValueIndex = numbers.IndexOf(currentMaxValue);\n\
    \        long currentMaxValueIndex = numbers.IndexOf(currentMaxValue);\n     \
    \   long currentMaxValueIndex = numbers.IndexOf(currentMaxValue);\n        long\
    \ currentMaxValueIndex = numbers.IndexOf(currentMaxValue);\n        long currentMaxValueIndex\
    \ = numbers.IndexOf(currentMaxValue);\n        long currentMaxValueIndex = numbers.IndexOf(currentMaxValue);\n\
    \        long currentMaxValueIndex = numbers.IndexOf(currentMaxValue);\n     \
    \   long currentMaxValueIndex = numbers.IndexOf(currentMaxValue);\n        long\
    \ currentMaxValueIndex = numbers.IndexOf(currentMaxValue);\n        long currentMaxValueIndex\
    \ = numbers.IndexOf(currentMaxValue);\n        long currentMaxValueIndex = numbers.IndexOf(currentMaxValue);\n\
    \        long currentMaxValueIndex = numbers.IndexOf(currentMaxValue);\n     \
    \   long currentMaxValueIndex = numbers.IndexOf(currentMaxValue);\n        long\
    \ currentMaxValueIndex = numbers.IndexOf(currentMaxValue);\n        long currentMaxValueIndex\
    \ = numbers.IndexOf(currentMaxValue);\n        long currentMaxValueIndex = numbers.IndexOf(currentMaxValue);\n\
    \        long currentMaxValueIndex = numbers.IndexOf(currentMaxValue);\n     \
    \   long currentMaxValueIndex = numbers.IndexOf(currentMaxValue);\n        long\
    \ currentMaxValueIndex = numbers.IndexOf(currentMaxValue);\n        long currentMaxValueIndex\
    \ = numbers.IndexOf(currentMaxValue);\n        long currentMaxValueIndex = numbers.IndexOf(currentMaxValue);\n\
    \        long currentMaxValueIndex = numbers.IndexOf(currentMaxValue);\n     \
    \   long currentMaxValueIndex = numbers.Index\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L,\
    \ (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new\
    \ long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpsk8zww3z.cs(53,50): error CS1002: ; expected

    '
  timestamp: 1660008889
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    public\
    \ static List<long> RollingMax(List<long> numbers) {\n        List<long> result\
    \ = new List<long>();\n        long maxValue = numbers.Max();\n        long currentMax\
    \ = maxValue;\n        long currentMaxIndex = 0;\n        long currentMaxIndexValue\
    \ = 0;\n        long currentMaxIndexValue2 = 0;\n        long currentMaxIndexValue3\
    \ = 0;\n        long currentMaxIndexValue4 = 0;\n        long currentMaxIndexValue5\
    \ = 0;\n        long currentMaxIndexValue6 = 0;\n        long currentMaxIndexValue7\
    \ = 0;\n        long currentMaxIndexValue8 = 0;\n        long currentMaxIndexValue9\
    \ = 0;\n        long currentMaxIndexValue10 = 0;\n        long currentMaxIndexValue11\
    \ = 0;\n        long currentMaxIndexValue12 = 0;\n        long currentMaxIndexValue13\
    \ = 0;\n        long currentMaxIndexValue14 = 0;\n        long currentMaxIndexValue15\
    \ = 0;\n        long currentMaxIndexValue16 = 0;\n        long currentMaxIndexValue17\
    \ = 0;\n        long currentMaxIndexValue18 = 0;\n        long currentMaxIndexValue19\
    \ = 0;\n        long currentMaxIndexValue20 = 0;\n        long currentMaxIndexValue21\
    \ = 0;\n        long currentMaxIndexValue22 = 0;\n        long currentMaxIndexValue23\
    \ = 0;\n        long currentMaxIndexValue24 = 0;\n        long currentMaxIndexValue25\
    \ = 0;\n        long currentMaxIndexValue26 = 0;\n        long currentMaxIndexValue27\
    \ = 0;\n        long currentMaxIndexValue28 = 0;\n        long currentMaxIndexValue29\
    \ = 0;\n        long currentMaxIndexValue30 = 0;\n        long currentMaxIndexValue31\
    \ = 0;\n        long currentMaxIndexValue32 = 0;\n        long currentMaxIndexValue33\
    \ = 0;\n        long currentMaxIndexValue34 = 0;\n        long currentMaxIndexValue35\
    \ = 0;\n        long currentMaxIndexValue36 = 0;\n        long currentMaxIndexValue37\
    \ = 0;\n        long currentMaxIndexValue38 = 0;\n        long currentMaxIndexValue39\
    \ = 0;\n        long currentMaxIndexValue40 = 0;\n        long currentMaxIndexValue41\
    \ = 0;\n        long currentMaxIndexValue42 = 0;\n        long currentMaxIndexValue43\
    \ = 0;\n        long currentMaxIndexValue44 = 0;\n        long currentMaxIndexValue45\
    \ = 0;\n        long currentMaxIndexValue46 = 0;\n        long currentMaxIndexValue47\
    \ = 0;\n        long currentMaxIndexValue48 = 0;\n        long currentMaxIndexValue49\
    \ = 0;\n        long currentMaxIndexValue50 = 0;\n        long currentMaxIndexValue51\
    \ = 0;\n        long currentMaxIndexValue52 = 0;\n        long currentMaxIndexValue53\
    \ = 0;\n        long currentMaxIndexValue54\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L,\
    \ (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new\
    \ long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp0ues37ym.cs(69,36): error CS1002: ; expected

    '
  timestamp: 1660008889
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    public\
    \ static List<long> RollingMax(List<long> numbers) {\n        List<long> max =\
    \ new List<long>();\n        long maxValue = numbers.First();\n        long currentMax\
    \ = maxValue;\n        long currentMaxIndex = 0;\n        foreach (long number\
    \ in numbers) {\n            if (number > currentMax) {\n                currentMax\
    \ = number;\n                currentMaxIndex = max.Count;\n            }\n   \
    \         max.Add(number);\n        }\n        max.Add(currentMax);\n        max.Add(currentMax);\n\
    \        max.Add(currentMax);\n        max.Add(currentMax);\n        max.Add(currentMax);\n\
    \        max.Add(currentMax);\n        max.Add(currentMax);\n        max.Add(currentMax);\n\
    \        max.Add(currentMax);\n        max.Add(currentMax);\n        max.Add(currentMax);\n\
    \        max.Add(currentMax);\n        max.Add(currentMax);\n        max.Add(currentMax);\n\
    \        max.Add(currentMax);\n        max.Add(currentMax);\n        max.Add(currentMax);\n\
    \        max.Add(currentMax);\n        max.Add(currentMax);\n        max.Add(currentMax);\n\
    \        max.Add(currentMax);\n        max.Add(currentMax);\n        max.Add(currentMax);\n\
    \        max.Add(currentMax);\n        max.Add(currentMax);\n        max.Add(currentMax);\n\
    \        max.Add(currentMax);\n        max.Add(currentMax);\n        max.Add(currentMax);\n\
    \        max.Add(currentMax);\n        max.Add(currentMax);\n        max.Add(currentMax);\n\
    \        max.Add(currentMax);\n        max.Add(currentMax);\n        max.Add(currentMax);\n\
    \        max.Add(currentMax);\n        max.Add(currentMax);\n        max.Add(currentMax);\n\
    \        max.Add(currentMax);\n        max.Add(currentMax);\n        max.Add(currentMax);\n\
    \        max.Add(currentMax);\n        max.Add(currentMax);\n        max.Add(currentMax);\n\
    \        max.Add(currentMax);\n        max.Add(currentMax);\n        max.Add(currentMax);\n\
    \        max.Add(currentMax);\n        max.Add(currentMax);\n        max.Add(currentMax);\n\
    \        max.Add(currentMax);\n        max.Add(currentMax);\n        max.Add(currentMax);\n\
    \        max.Add(currentMax);\n        max.Add(currentMax);\n        max.Add(currentMax);\n\
    \        max.Add(currentMax);\n        max.Add(currentMax);\n        max.Add(currentMax);\n\
    \        max.Add(currentMax);\n        max.Add(currentMax);\n        max.Add(currentMax);\n\
    \        max.Add(currentMax);\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L,\
    \ (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new\
    \ long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmps_x4dz1u.cs(11,30): error CS0161: ''Problem.RollingMax(List<long>)'':
    not all code paths return a value

    '
  timestamp: 1660008890
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    public\
    \ static List<long> RollingMax(List<long> numbers) {\n        List<long> result\
    \ = new List<long>();\n        long maxValue = numbers.Max();\n        long currentMax\
    \ = maxValue;\n        long currentSum = 0;\n        long currentSumOfSquares\
    \ = 0;\n        long currentSumOfSquareOfDifferences = 0;\n        long currentSumOfDifferences\
    \ = 0;\n        long currentSumOfDifferenceSquares = 0;\n        long currentSumOfDifferenceSquareOfDifferences\
    \ = 0;\n        long currentSumOfDifferenceSquareOfDifferenceSquares = 0;\n  \
    \      long currentSumOfDifferenceSquareOfDifferenceSquareOfDifferences = 0;\n\
    \        long currentSumOfDifferenceSquareOfDifferenceSquareOfDifferenceSquares\
    \ = 0;\n        long currentSumOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferences\
    \ = 0;\n        long currentSumOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferenceSquares\
    \ = 0;\n        long currentSumOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferences\
    \ = 0;\n        long currentSumOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferences\
    \ = 0;\n        long currentSumOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferences\
    \ = 0;\n        long currentSumOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferenceSquares\
    \ = 0;\n        long currentSumOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferences\
    \ = 0;\n        long currentSumOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferences\
    \ = 0;\n        long currentSumOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferences\
    \ = 0;\n        long currentSumOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferences\
    \ = 0;\n        long currentSumOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferenceSquares\
    \ = 0;\n        long currentSumOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferences\
    \ = 0;\n        long currentSumOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferences\
    \ = 0;\n        long currentSumOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferences\
    \ = 0;\n        long currentSumOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferences\
    \ = 0;\n        long currentSumOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferenceSquares\
    \ = 0;\n        long currentSumOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferenceSquares\
    \ = 0;\n        long current\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L,\
    \ (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new\
    \ long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpjvi1z4zr.cs(41,21): error CS1002: ; expected

    '
  timestamp: 1660008889
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    public\
    \ static List<long> RollingMax(List<long> numbers) {\n        List<long> result\
    \ = new List<long>();\n        long max = 0;\n        long curMax = 0;\n     \
    \   long curMaxIndex = 0;\n        long curMaxValue = numbers.First();\n     \
    \   long curMaxIndexValue = numbers.First();\n        bool first = true;\n   \
    \     foreach (long n in numbers) {\n            if (first) {\n              \
    \  max = n;\n                curMax = n;\n                curMaxIndex = n;\n \
    \               curMaxValue = n;\n                first = false;\n           \
    \ }\n            if (n > curMax) {\n                max = n;\n               \
    \ curMax = n;\n                curMaxIndex = n;\n                curMaxValue =\
    \ n;\n            }\n            if (n == curMaxValue) {\n                curMaxIndex++;\n\
    \                curMaxIndexValue = curMaxIndex;\n            }\n            if\
    \ (n == curMaxIndexValue) {\n                result.Add(curMax);\n           \
    \     curMaxIndex++;\n                curMaxIndexValue = curMaxIndex;\n      \
    \      }\n        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L,\
    \ (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new\
    \ long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n    }\n\n\
    }\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.InvalidOperationException: Sequence contains\
    \ no elements\n  at System.Linq.Enumerable.First[TSource] (System.Collections.Generic.IEnumerable`1[T]\
    \ source) [0x00010] in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem.RollingMax\
    \ (System.Collections.Generic.List`1[T] numbers) [0x00010] in <9cca2fd7e27142c7a117673c2dc34c1c>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <9cca2fd7e27142c7a117673c2dc34c1c>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.InvalidOperationException: Sequence\
    \ contains no elements\n  at System.Linq.Enumerable.First[TSource] (System.Collections.Generic.IEnumerable`1[T]\
    \ source) [0x00010] in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem.RollingMax\
    \ (System.Collections.Generic.List`1[T] numbers) [0x00010] in <9cca2fd7e27142c7a117673c2dc34c1c>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <9cca2fd7e27142c7a117673c2dc34c1c>:0\
    \ \n"
  stdout: ''
  timestamp: 1660008890
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    public\
    \ static List<long> RollingMax(List<long> numbers) {\n        List<long> result\
    \ = new List<long>();\n        long max = 0;\n        long currentMax = numbers.First();\n\
    \        foreach (long number in numbers) {\n            if (number > currentMax)\
    \ {\n                max = currentMax;\n                currentMax = number;\n\
    \            }\n            else {\n                max = Math.Max(number, max);\n\
    \            }\n            result.Add(max);\n        }\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(RollingMax((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(RollingMax((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new\
    \ List<long>(new long[]{(long)4L, (long)3L, (long)2L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.InvalidOperationException: Sequence contains\
    \ no elements\n  at System.Linq.Enumerable.First[TSource] (System.Collections.Generic.IEnumerable`1[T]\
    \ source) [0x00010] in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem.RollingMax\
    \ (System.Collections.Generic.List`1[T] numbers) [0x0000a] in <9e2ca022c808472ba550e5bce4a7e5f6>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <9e2ca022c808472ba550e5bce4a7e5f6>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.InvalidOperationException: Sequence\
    \ contains no elements\n  at System.Linq.Enumerable.First[TSource] (System.Collections.Generic.IEnumerable`1[T]\
    \ source) [0x00010] in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem.RollingMax\
    \ (System.Collections.Generic.List`1[T] numbers) [0x0000a] in <9e2ca022c808472ba550e5bce4a7e5f6>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <9e2ca022c808472ba550e5bce4a7e5f6>:0\
    \ \n"
  stdout: ''
  timestamp: 1660008890
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    public\
    \ static List<long> RollingMax(List<long> numbers) {\n        List<long> result\
    \ = new List<long>();\n        long maxValue = numbers.Max();\n        long currentMax\
    \ = maxValue;\n        long currentMaxIndex = 0;\n        long currentMaxIndexValue\
    \ = 0;\n        long currentMaxIndexValue2 = 0;\n        long currentMaxIndexValue3\
    \ = 0;\n        long currentMaxIndexValue4 = 0;\n        long currentMaxIndexValue5\
    \ = 0;\n        long currentMaxIndexValue6 = 0;\n        long currentMaxIndexValue7\
    \ = 0;\n        long currentMaxIndexValue8 = 0;\n        long currentMaxIndexValue9\
    \ = 0;\n        long currentMaxIndexValue10 = 0;\n        long currentMaxIndexValue11\
    \ = 0;\n        long currentMaxIndexValue12 = 0;\n        long currentMaxIndexValue13\
    \ = 0;\n        long currentMaxIndexValue14 = 0;\n        long currentMaxIndexValue15\
    \ = 0;\n        long currentMaxIndexValue16 = 0;\n        long currentMaxIndexValue17\
    \ = 0;\n        long currentMaxIndexValue18 = 0;\n        long currentMaxIndexValue19\
    \ = 0;\n        long currentMaxIndexValue20 = 0;\n        long currentMaxIndexValue21\
    \ = 0;\n        long currentMaxIndexValue22 = 0;\n        long currentMaxIndexValue23\
    \ = 0;\n        long currentMaxIndexValue24 = 0;\n        long currentMaxIndexValue25\
    \ = 0;\n        long currentMaxIndexValue26 = 0;\n        long currentMaxIndexValue27\
    \ = 0;\n        long currentMaxIndexValue28 = 0;\n        long currentMaxIndexValue29\
    \ = 0;\n        long currentMaxIndexValue30 = 0;\n        long currentMaxIndexValue31\
    \ = 0;\n        long currentMaxIndexValue32 = 0;\n        long currentMaxIndexValue33\
    \ = 0;\n        long currentMaxIndexValue34 = 0;\n        long currentMaxIndexValue35\
    \ = 0;\n        long currentMaxIndexValue36 = 0;\n        long currentMaxIndexValue37\
    \ = 0;\n        long currentMaxIndexValue38 = 0;\n        long currentMaxIndexValue39\
    \ = 0;\n        long currentMaxIndexValue40 = 0;\n        long currentMaxIndexValue41\
    \ = 0;\n        long currentMaxIndexValue42 = 0;\n        long currentMaxIndexValue43\
    \ = 0;\n        long currentMaxIndexValue44 = 0;\n        long currentMaxIndexValue45\
    \ = 0;\n        long currentMaxIndexValue46 = 0;\n        long currentMaxIndexValue47\
    \ = 0;\n        long currentMaxIndexValue48 = 0;\n        long currentMaxIndexValue49\
    \ = 0;\n        long currentMaxIndexValue50 = 0;\n        long currentMaxIndexValue51\
    \ = 0;\n        long currentMaxIndexValue52 = 0;\n        long currentMaxIndexValue53\
    \ = 0;\n        long currentMaxIndexValue54\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L,\
    \ (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new\
    \ long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp0ues37ym.cs(69,36): error CS1002: ; expected

    '
  timestamp: 1660008889
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    public\
    \ static List<long> RollingMax(List<long> numbers) {\n        List<long> result\
    \ = new List<long>();\n        long maxValue = numbers.Max();\n        long currentMax\
    \ = maxValue;\n        long currentMaxIndex = 0;\n        long currentMaxIndexValue\
    \ = 0;\n        long currentMaxIndexValue2 = 0;\n        long currentMaxIndexValue3\
    \ = 0;\n        long currentMaxIndexValue4 = 0;\n        long currentMaxIndexValue5\
    \ = 0;\n        long currentMaxIndexValue6 = 0;\n        long currentMaxIndexValue7\
    \ = 0;\n        long currentMaxIndexValue8 = 0;\n        long currentMaxIndexValue9\
    \ = 0;\n        long currentMaxIndexValue10 = 0;\n        long currentMaxIndexValue11\
    \ = 0;\n        long currentMaxIndexValue12 = 0;\n        long currentMaxIndexValue13\
    \ = 0;\n        long currentMaxIndexValue14 = 0;\n        long currentMaxIndexValue15\
    \ = 0;\n        long currentMaxIndexValue16 = 0;\n        long currentMaxIndexValue17\
    \ = 0;\n        long currentMaxIndexValue18 = 0;\n        long currentMaxIndexValue19\
    \ = 0;\n        long currentMaxIndexValue20 = 0;\n        long currentMaxIndexValue21\
    \ = 0;\n        long currentMaxIndexValue22 = 0;\n        long currentMaxIndexValue23\
    \ = 0;\n        long currentMaxIndexValue24 = 0;\n        long currentMaxIndexValue25\
    \ = 0;\n        long currentMaxIndexValue26 = 0;\n        long currentMaxIndexValue27\
    \ = 0;\n        long currentMaxIndexValue28 = 0;\n        long currentMaxIndexValue29\
    \ = 0;\n        long currentMaxIndexValue30 = 0;\n        long currentMaxIndexValue31\
    \ = 0;\n        long currentMaxIndexValue32 = 0;\n        long currentMaxIndexValue33\
    \ = 0;\n        long currentMaxIndexValue34 = 0;\n        long currentMaxIndexValue35\
    \ = 0;\n        long currentMaxIndexValue36 = 0;\n        long currentMaxIndexValue37\
    \ = 0;\n        long currentMaxIndexValue38 = 0;\n        long currentMaxIndexValue39\
    \ = 0;\n        long currentMaxIndexValue40 = 0;\n        long currentMaxIndexValue41\
    \ = 0;\n        long currentMaxIndexValue42 = 0;\n        long currentMaxIndexValue43\
    \ = 0;\n        long currentMaxIndexValue44 = 0;\n        long currentMaxIndexValue45\
    \ = 0;\n        long currentMaxIndexValue46 = 0;\n        long currentMaxIndexValue47\
    \ = 0;\n        long currentMaxIndexValue48 = 0;\n        long currentMaxIndexValue49\
    \ = 0;\n        long currentMaxIndexValue50 = 0;\n        long currentMaxIndexValue51\
    \ = 0;\n        long currentMaxIndexValue52 = 0;\n        long currentMaxIndexValue53\
    \ = 0;\n        long currentMaxIndexValue54\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L,\
    \ (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new\
    \ long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp0ues37ym.cs(69,36): error CS1002: ; expected

    '
  timestamp: 1660008889
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    public\
    \ static List<long> RollingMax(List<long> numbers) {\n        List<long> result\
    \ = new List<long>();\n        long max = numbers.Max();\n        long currentMax\
    \ = max;\n        long currentSum = 0;\n        long currentSumOfSquares = 0;\n\
    \        long currentSumOfProducts = 0;\n        long currentProduct = 1;\n  \
    \      long currentProductOfSquares = 0;\n        long currentProductOfProducts\
    \ = 0;\n        long currentProductOfProductsSquares = 0;\n        long currentProductOfProductsSquareSum\
    \ = 0;\n        long currentProductOfProductsSquareSumOfSquares = 0;\n       \
    \ long currentProductOfProductsSquareSumOfProducts = 0;\n        long currentProductOfProductsSquareSumOfProductsSquares\
    \ = 0;\n        long currentProductOfProductsSquareSumOfProductsSquaresOfSquares\
    \ = 0;\n        long currentProductOfProductsSquareSumOfProductsSquaresOfProducts\
    \ = 0;\n        long currentProductOfProductsSquareSumOfProductsSquaresOfProductsOfSquares\
    \ = 0;\n        long currentProductOfProductsSquareSumOfProductsSquaresOfProductsOfProducts\
    \ = 0;\n        long currentProductOfProductsSquareSumOfProductsSquaresOfProductsOfProductsOfSquares\
    \ = 0;\n        long currentProductOfProductsSquareSumOfProductsSquaresOfProductsOfProductsOfProductsOfSquares\
    \ = 0;\n        long currentProductOfProductsSquareSumOfProductsSquaresOfProductsOfProductsOfProductsOfProductsOfSquares\
    \ = 0;\n        long currentProductOfProductsSquareSumOfProductsSquaresOfProductsOfProductsOfProductsOfProductsOfProductsOfSquares\
    \ = 0;\n        long currentProductOfProductsSquareSumOfProductsSquaresOfProductsOfProductsOfProductsOfProductsOfProductsOfProductsOfSquares\
    \ = 0;\n        long currentProductOfProductsSquareSumOfProductsSquaresOfProductsOfProductsOfProductsOfProductsOfProductsOfProductsOfProductsOfSquares\
    \ = 0;\n        long currentProductOfProductsSquareSumOfProductsSquaresOfProductsOfProductsOfProductsOfProductsOfProductsOfProductsOfProductsOfProductsOfSquares\
    \ = 0;\n        long currentProductOfProductsSquareSumOfProductsSquaresOfProductsOfProductsOfProductsOfProductsOfProductsOfProductsOfProductsOfProductsOfProductsOfSquares\
    \ = 0;\n        long currentProductOfProductsSquareSumOfProductsSquaresOfProductsOfProductsOfProductsOfProductsOf\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(RollingMax((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(RollingMax((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new\
    \ List<long>(new long[]{(long)4L, (long)3L, (long)2L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpj23z9y2p.cs(38,106): error CS1002: ; expected

    '
  timestamp: 1660008889
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    public\
    \ static List<long> RollingMax(List<long> numbers) {\n        List<long> max =\
    \ new List<long>();\n        long maxElement = numbers.Max();\n        long currentMax\
    \ = maxElement;\n        long currentMaxIndex = 0;\n        long currentMaxIndexCount\
    \ = 0;\n        long currentMaxIndexCountMax = numbers.Count;\n        long currentMaxIndexCountMaxIndex\
    \ = 0;\n        long currentMaxIndexCountMaxIndexIndex = 0;\n        long currentMaxIndexCountMaxIndexIndexMax\
    \ = numbers.Count;\n        long currentMaxIndexCountMaxIndexMaxIndex = 0;\n \
    \       long currentMaxIndexCountMaxIndexMaxIndexMax = numbers.Count;\n      \
    \  long currentMaxIndexCountMaxIndexMaxIndexMax = numbers.Count;\n        long\
    \ currentMaxIndexCountMaxIndexMaxIndexMax = numbers.Count;\n        long currentMaxIndexCountMaxIndexMaxIndexMax\
    \ = numbers.Count;\n        long currentMaxIndexCountMaxIndexMaxIndexMax = numbers.Count;\n\
    \        long currentMaxIndexCountMaxIndexMaxIndexMax = numbers.Count;\n     \
    \   long currentMaxIndexCountMaxIndexMaxIndexMax = numbers.Count;\n        long\
    \ currentMaxIndexCountMaxIndexMaxIndexMax = numbers.Count;\n        long currentMaxIndexCountMaxIndexMaxIndexMax\
    \ = numbers.Count;\n        long currentMaxIndexCountMaxIndexMaxIndexMax = numbers.Count;\n\
    \        long currentMaxIndexCountMaxIndexMaxIndexMax = numbers.Count;\n     \
    \   long currentMaxIndexCountMaxIndexMaxIndexMax = numbers.Count;\n        long\
    \ currentMaxIndexCountMaxIndexMaxIndexMax = numbers.Count;\n        long currentMaxIndexCountMaxIndexMaxIndexMax\
    \ = numbers.Count;\n        long currentMaxIndexCountMaxIndexMaxIndexMax = numbers.Count;\n\
    \        long currentMaxIndexCountMaxIndexMaxIndexMax = numbers.Count;\n     \
    \   long currentMaxIndexCountMaxIndexMaxIndexMax = numbers.Count;\n        long\
    \ currentMaxIndexCountMaxIndexMaxIndexMax = numbers.Count;\n        long currentMaxIndexCountMaxIndexMaxIndexMax\
    \ = numbers.Count;\n        long currentMaxIndexCountMaxIndexMaxIndexMax = numbers.Count;\n\
    \        long currentMaxIndexCountMaxIndexMaxIndexMax = numbers.Count;\n     \
    \   long currentMaxIndexCountMaxIndexMaxIndexMax = numbers.Count;\n        long\
    \ currentMaxIndexCountMaxIndexMaxIndexMax = numbers.Count;\n        long currentMaxIndexCountMaxIndexMaxIndexMax\
    \ = numbers.Count;\n        long currentMaxIndexCountMaxIndexMaxIndexMax = numbers.Count;\n\
    \        long currentMaxIndexCountMaxIndexMaxIndex\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new\
    \ long[]{(long)4L, (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp0kd0y_9z.cs(47,50): error CS1002: ; expected

    '
  timestamp: 1660008889
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    public\
    \ static List<long> RollingMax(List<long> numbers) {\n        List<long> result\
    \ = new List<long>();\n        long maxValue = numbers.Max();\n        long currentMax\
    \ = maxValue;\n        long currentMaxIndex = 0;\n        long currentMaxIndexValue\
    \ = 0;\n        long currentMaxIndexValue2 = 0;\n        long currentMaxIndexValue3\
    \ = 0;\n        long currentMaxIndexValue4 = 0;\n        long currentMaxIndexValue5\
    \ = 0;\n        long currentMaxIndexValue6 = 0;\n        long currentMaxIndexValue7\
    \ = 0;\n        long currentMaxIndexValue8 = 0;\n        long currentMaxIndexValue9\
    \ = 0;\n        long currentMaxIndexValue10 = 0;\n        long currentMaxIndexValue11\
    \ = 0;\n        long currentMaxIndexValue12 = 0;\n        long currentMaxIndexValue13\
    \ = 0;\n        long currentMaxIndexValue14 = 0;\n        long currentMaxIndexValue15\
    \ = 0;\n        long currentMaxIndexValue16 = 0;\n        long currentMaxIndexValue17\
    \ = 0;\n        long currentMaxIndexValue18 = 0;\n        long currentMaxIndexValue19\
    \ = 0;\n        long currentMaxIndexValue20 = 0;\n        long currentMaxIndexValue21\
    \ = 0;\n        long currentMaxIndexValue22 = 0;\n        long currentMaxIndexValue23\
    \ = 0;\n        long currentMaxIndexValue24 = 0;\n        long currentMaxIndexValue25\
    \ = 0;\n        long currentMaxIndexValue26 = 0;\n        long currentMaxIndexValue27\
    \ = 0;\n        long currentMaxIndexValue28 = 0;\n        long currentMaxIndexValue29\
    \ = 0;\n        long currentMaxIndexValue30 = 0;\n        long currentMaxIndexValue31\
    \ = 0;\n        long currentMaxIndexValue32 = 0;\n        long currentMaxIndexValue33\
    \ = 0;\n        long currentMaxIndexValue34 = 0;\n        long currentMaxIndexValue35\
    \ = 0;\n        long currentMaxIndexValue36 = 0;\n        long currentMaxIndexValue37\
    \ = 0;\n        long currentMaxIndexValue38 = 0;\n        long currentMaxIndexValue39\
    \ = 0;\n        long currentMaxIndexValue40 = 0;\n        long currentMaxIndexValue41\
    \ = 0;\n        long currentMaxIndexValue42 = 0;\n        long currentMaxIndexValue43\
    \ = 0;\n        long currentMaxIndexValue44 = 0;\n        long currentMaxIndexValue45\
    \ = 0;\n        long currentMaxIndexValue46 = 0;\n        long currentMaxIndexValue47\
    \ = 0;\n        long currentMaxIndexValue48 = 0;\n        long currentMaxIndexValue49\
    \ = 0;\n        long currentMaxIndexValue50 = 0;\n        long currentMaxIndexValue51\
    \ = 0;\n        long currentMaxIndexValue52 = 0;\n        long currentMaxIndexValue53\
    \ = 0;\n        long currentMaxIndexValue54\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L,\
    \ (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new\
    \ long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp0ues37ym.cs(69,36): error CS1002: ; expected

    '
  timestamp: 1660008889
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    public\
    \ static List<long> RollingMax(List<long> numbers) {\n        List<long> result\
    \ = new List<long>();\n        long max = 0;\n        long currentMax = 0;\n \
    \       long currentSum = 0;\n        long currentSumOfSquares = 0;\n        long\
    \ currentSumOfSquareOfMax = 0;\n        long currentSumOfSquareOfMaxOfMax = 0;\n\
    \        long currentSumOfSquareOfMaxOfMaxOfMax = 0;\n        long currentSumOfSquareOfMaxOfMaxOfMaxOfMax\
    \ = 0;\n        long currentSumOfSquareOfMaxOfMaxOfMaxOfMaxOfMax = 0;\n      \
    \  long currentSumOfSquareOfMaxOfMaxOfMaxOfMaxOfMaxOfMax = 0;\n        long currentSumOfSquareOfMaxOfMaxOfMaxOfMaxOfMaxOfMaxOfMax\
    \ = 0;\n        long currentSumOfSquareOfMaxOfMaxOfMaxOfMaxOfMaxOfMaxOfMaxOfMax\
    \ = 0;\n        long currentSumOfSquareOfMaxOfMaxOfMaxOfMaxOfMaxOfMaxOfMaxOfMax\
    \ = 0;\n        long currentSumOfSquareOfMaxOfMaxOfMaxOfMaxOfMaxOfMaxOfMaxOfMaxOfMax\
    \ = 0;\n        long currentSumOfSquareOfMaxOfMaxOfMaxOfMaxOfMaxOfMaxOfMaxOfMaxOfMaxOfMax\
    \ = 0;\n        long currentSumOfSquareOfMaxOfMaxOfMaxOfMaxOfMaxOfMaxOfMaxOfMaxOfMaxOfMaxOfMax\
    \ = 0;\n        long currentSumOfSquareOfMaxOfMaxOfMaxOfMaxOfMaxOfMaxOfMaxOfMaxOfMaxOfMaxOfMax\
    \ = 0;\n        long currentSumOfSquareOfMaxOfMaxOfMaxOfMaxOfMaxOfMaxOfMaxOfMaxOfMaxOfMaxOfMaxOfMax\
    \ = 0;\n        long currentSumOfSquareOfMaxOfMaxOfMaxOfMaxOfMaxOfMaxOfMaxOfMaxOfMaxOfMaxOfMaxOfMax\
    \ = 0;\n        long currentSumOfSquareOfMaxOfMaxOfMaxOfMaxOfMaxOfMaxOfMaxOfMaxOfMaxOfMaxOfMaxOfMax\
    \ = 0;\n        long currentSumOfSquareOfMaxOfMaxOfMaxOfMaxOfMaxOfMaxOfMaxOfMaxOfMaxOfMaxOfMaxOfMax\
    \ = 0;\n        long currentSumOfSquareOfMaxOfMaxOfMaxOfMaxOfMaxOfMaxOfMaxOfMaxOfMaxOfMaxOfMaxOfMaxOfMax\
    \ = 0;\n        long currentSumOfSquareOfMaxOfMaxOfMaxOfMaxOfMaxOfMaxOfMaxOfMaxOfMaxOfMaxOfMaxOfMaxOfMax\
    \ = 0;\n        long currentSumOfSquareOf\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L,\
    \ (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new\
    \ long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp6m7k4beu.cs(36,34): error CS1002: ; expected

    '
  timestamp: 1660008889
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    public\
    \ static List<long> RollingMax(List<long> numbers) {\n        List<long> result\
    \ = new List<long>();\n        long maxValue = numbers.Max();\n        long currentMaxValue\
    \ = maxValue;\n        long currentMaxIndex = 0;\n        long currentMaxIndexValue\
    \ = 0;\n        long currentMaxIndexValue2 = 0;\n        long currentMaxIndexValue3\
    \ = 0;\n        long currentMaxIndexValue4 = 0;\n        long currentMaxIndexValue5\
    \ = 0;\n        long currentMaxIndexValue6 = 0;\n        long currentMaxIndexValue7\
    \ = 0;\n        long currentMaxIndexValue8 = 0;\n        long currentMaxIndexValue9\
    \ = 0;\n        long currentMaxIndexValue10 = 0;\n        long currentMaxIndexValue11\
    \ = 0;\n        long currentMaxIndexValue12 = 0;\n        long currentMaxIndexValue13\
    \ = 0;\n        long currentMaxIndexValue14 = 0;\n        long currentMaxIndexValue15\
    \ = 0;\n        long currentMaxIndexValue16 = 0;\n        long currentMaxIndexValue17\
    \ = 0;\n        long currentMaxIndexValue18 = 0;\n        long currentMaxIndexValue19\
    \ = 0;\n        long currentMaxIndexValue20 = 0;\n        long currentMaxIndexValue21\
    \ = 0;\n        long currentMaxIndexValue22 = 0;\n        long currentMaxIndexValue23\
    \ = 0;\n        long currentMaxIndexValue24 = 0;\n        long currentMaxIndexValue25\
    \ = 0;\n        long currentMaxIndexValue26 = 0;\n        long currentMaxIndexValue27\
    \ = 0;\n        long currentMaxIndexValue28 = 0;\n        long currentMaxIndexValue29\
    \ = 0;\n        long currentMaxIndexValue30 = 0;\n        long currentMaxIndexValue31\
    \ = 0;\n        long currentMaxIndexValue32 = 0;\n        long currentMaxIndexValue33\
    \ = 0;\n        long currentMaxIndexValue34 = 0;\n        long currentMaxIndexValue35\
    \ = 0;\n        long currentMaxIndexValue36 = 0;\n        long currentMaxIndexValue37\
    \ = 0;\n        long currentMaxIndexValue38 = 0;\n        long currentMaxIndexValue39\
    \ = 0;\n        long currentMaxIndexValue40 = 0;\n        long currentMaxIndexValue41\
    \ = 0;\n        long currentMaxIndexValue42 = 0;\n        long currentMaxIndexValue43\
    \ = 0;\n        long currentMaxIndexValue44 = 0;\n        long currentMaxIndexValue45\
    \ = 0;\n        long currentMaxIndexValue46 = 0;\n        long currentMaxIndexValue47\
    \ = 0;\n        long currentMaxIndexValue48 = 0;\n        long currentMaxIndexValue49\
    \ = 0;\n        long currentMaxIndexValue50 = 0;\n        long currentMaxIndexValue51\
    \ = 0;\n        long currentMaxIndexValue52 = 0;\n        long currentMaxIndexValue53\
    \ = 0;\n        long currentMaxIndexValue54\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L,\
    \ (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new\
    \ long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpr8mz57to.cs(69,36): error CS1002: ; expected

    '
  timestamp: 1660008889
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    public\
    \ static List<long> RollingMax(List<long> numbers) {\n        List<long> result\
    \ = new List<long>();\n        long maxValue = numbers.Max();\n        long currentMax\
    \ = maxValue;\n        long currentMaxIndex = 0;\n        long currentMaxIndexValue\
    \ = 0;\n        long currentMaxIndexValue2 = 0;\n        long currentMaxIndexValue3\
    \ = 0;\n        long currentMaxIndexValue4 = 0;\n        long currentMaxIndexValue5\
    \ = 0;\n        long currentMaxIndexValue6 = 0;\n        long currentMaxIndexValue7\
    \ = 0;\n        long currentMaxIndexValue8 = 0;\n        long currentMaxIndexValue9\
    \ = 0;\n        long currentMaxIndexValue10 = 0;\n        long currentMaxIndexValue11\
    \ = 0;\n        long currentMaxIndexValue12 = 0;\n        long currentMaxIndexValue13\
    \ = 0;\n        long currentMaxIndexValue14 = 0;\n        long currentMaxIndexValue15\
    \ = 0;\n        long currentMaxIndexValue16 = 0;\n        long currentMaxIndexValue17\
    \ = 0;\n        long currentMaxIndexValue18 = 0;\n        long currentMaxIndexValue19\
    \ = 0;\n        long currentMaxIndexValue20 = 0;\n        long currentMaxIndexValue21\
    \ = 0;\n        long currentMaxIndexValue22 = 0;\n        long currentMaxIndexValue23\
    \ = 0;\n        long currentMaxIndexValue24 = 0;\n        long currentMaxIndexValue25\
    \ = 0;\n        long currentMaxIndexValue26 = 0;\n        long currentMaxIndexValue27\
    \ = 0;\n        long currentMaxIndexValue28 = 0;\n        long currentMaxIndexValue29\
    \ = 0;\n        long currentMaxIndexValue30 = 0;\n        long currentMaxIndexValue31\
    \ = 0;\n        long currentMaxIndexValue32 = 0;\n        long currentMaxIndexValue33\
    \ = 0;\n        long currentMaxIndexValue34 = 0;\n        long currentMaxIndexValue35\
    \ = 0;\n        long currentMaxIndexValue36 = 0;\n        long currentMaxIndexValue37\
    \ = 0;\n        long currentMaxIndexValue38 = 0;\n        long currentMaxIndexValue39\
    \ = 0;\n        long currentMaxIndexValue40 = 0;\n        long currentMaxIndexValue41\
    \ = 0;\n        long currentMaxIndexValue42 = 0;\n        long currentMaxIndexValue43\
    \ = 0;\n        long currentMaxIndexValue44 = 0;\n        long currentMaxIndexValue45\
    \ = 0;\n        long currentMaxIndexValue46 = 0;\n        long currentMaxIndexValue47\
    \ = 0;\n        long currentMaxIndexValue48 = 0;\n        long currentMaxIndexValue49\
    \ = 0;\n        long currentMaxIndexValue50 = 0;\n        long currentMaxIndexValue51\
    \ = 0;\n        long currentMaxIndexValue52 = 0;\n        long currentMaxIndexValue53\
    \ = 0;\n        long currentMaxIndexValue54\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L,\
    \ (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new\
    \ long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp0ues37ym.cs(69,36): error CS1002: ; expected

    '
  timestamp: 1660008889
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    public\
    \ static List<long> RollingMax(List<long> numbers) {\n        List<long> result\
    \ = new List<long>();\n        long max = 0;\n        long currentMax = 0;\n \
    \       long currentSum = 0;\n        long currentSumOfSquares = 0;\n        long\
    \ currentSumOfCubes = 0;\n        foreach (long number in numbers) {\n       \
    \     currentSum += number;\n            currentSumOfSquares += number * number;\n\
    \            currentSumOfCubes += number * number * number;\n            if (currentSum\
    \ > max) {\n                max = currentSum;\n            }\n            if (currentSumOfSquares\
    \ > currentMax) {\n                currentMax = currentSumOfSquares;\n       \
    \     }\n            if (currentSumOfCubes > currentMax) {\n                currentMax\
    \ = currentSumOfCubes;\n            }\n            result.Add(currentMax);\n \
    \       }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L,\
    \ (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new\
    \ long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8543fa2e73e94af0a95cc66e26ca6961>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8543fa2e73e94af0a95cc66e26ca6961>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660008890
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    public\
    \ static List<long> RollingMax(List<long> numbers) {\n        List<long> result\
    \ = new List<long>();\n        long max = 0;\n        long currentMax = numbers.First();\n\
    \        long currentMaxIndex = 0;\n        for (int i = 0; i < numbers.Count;\
    \ i++) {\n            if (numbers[i] > currentMax) {\n                currentMax\
    \ = numbers[i];\n                currentMaxIndex = i;\n            }\n       \
    \     if (numbers[i] == currentMax) {\n                result.Add(currentMax);\n\
    \                currentMax = numbers.ElementAt(i + 1);\n                currentMaxIndex\
    \ = i;\n            }\n        }\n        result.Add(currentMax);\n        return\
    \ result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(RollingMax((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(RollingMax((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new\
    \ List<long>(new long[]{(long)4L, (long)3L, (long)2L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.InvalidOperationException: Sequence contains\
    \ no elements\n  at System.Linq.Enumerable.First[TSource] (System.Collections.Generic.IEnumerable`1[T]\
    \ source) [0x00010] in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem.RollingMax\
    \ (System.Collections.Generic.List`1[T] numbers) [0x0000a] in <bd2b3a12a839455e8fb8dd1809a6d8d1>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <bd2b3a12a839455e8fb8dd1809a6d8d1>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.InvalidOperationException: Sequence\
    \ contains no elements\n  at System.Linq.Enumerable.First[TSource] (System.Collections.Generic.IEnumerable`1[T]\
    \ source) [0x00010] in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem.RollingMax\
    \ (System.Collections.Generic.List`1[T] numbers) [0x0000a] in <bd2b3a12a839455e8fb8dd1809a6d8d1>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <bd2b3a12a839455e8fb8dd1809a6d8d1>:0\
    \ \n"
  stdout: ''
  timestamp: 1660008890
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    public\
    \ static List<long> RollingMax(List<long> numbers) {\n        List<long> result\
    \ = new List<long>();\n        long maxValue = numbers.Max();\n        long currentMax\
    \ = maxValue;\n        long currentMaxIndex = 0;\n        long currentMaxIndexValue\
    \ = 0;\n        long currentMaxIndexValue2 = 0;\n        long currentMaxIndexValue3\
    \ = 0;\n        long currentMaxIndexValue4 = 0;\n        long currentMaxIndexValue5\
    \ = 0;\n        long currentMaxIndexValue6 = 0;\n        long currentMaxIndexValue7\
    \ = 0;\n        long currentMaxIndexValue8 = 0;\n        long currentMaxIndexValue9\
    \ = 0;\n        long currentMaxIndexValue10 = 0;\n        long currentMaxIndexValue11\
    \ = 0;\n        long currentMaxIndexValue12 = 0;\n        long currentMaxIndexValue13\
    \ = 0;\n        long currentMaxIndexValue14 = 0;\n        long currentMaxIndexValue15\
    \ = 0;\n        long currentMaxIndexValue16 = 0;\n        long currentMaxIndexValue17\
    \ = 0;\n        long currentMaxIndexValue18 = 0;\n        long currentMaxIndexValue19\
    \ = 0;\n        long currentMaxIndexValue20 = 0;\n        long currentMaxIndexValue21\
    \ = 0;\n        long currentMaxIndexValue22 = 0;\n        long currentMaxIndexValue23\
    \ = 0;\n        long currentMaxIndexValue24 = 0;\n        long currentMaxIndexValue25\
    \ = 0;\n        long currentMaxIndexValue26 = 0;\n        long currentMaxIndexValue27\
    \ = 0;\n        long currentMaxIndexValue28 = 0;\n        long currentMaxIndexValue29\
    \ = 0;\n        long currentMaxIndexValue30 = 0;\n        long currentMaxIndexValue31\
    \ = 0;\n        long currentMaxIndexValue32 = 0;\n        long currentMaxIndexValue33\
    \ = 0;\n        long currentMaxIndexValue34 = 0;\n        long currentMaxIndexValue35\
    \ = 0;\n        long currentMaxIndexValue36 = 0;\n        long currentMaxIndexValue37\
    \ = 0;\n        long currentMaxIndexValue38 = 0;\n        long currentMaxIndexValue39\
    \ = 0;\n        long currentMaxIndexValue40 = 0;\n        long currentMaxIndexValue41\
    \ = 0;\n        long currentMaxIndexValue42 = 0;\n        long currentMaxIndexValue43\
    \ = 0;\n        long currentMaxIndexValue44 = 0;\n        long currentMaxIndexValue45\
    \ = 0;\n        long currentMaxIndexValue46 = 0;\n        long currentMaxIndexValue47\
    \ = 0;\n        long currentMaxIndexValue48 = 0;\n        long currentMaxIndexValue49\
    \ = 0;\n        long currentMaxIndexValue50 = 0;\n        long currentMaxIndexValue51\
    \ = 0;\n        long currentMaxIndexValue52 = 0;\n        long currentMaxIndexValue53\
    \ = 0;\n        long currentMaxIndexValue54\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L,\
    \ (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new\
    \ long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp0ues37ym.cs(69,36): error CS1002: ; expected

    '
  timestamp: 1660008889
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    public\
    \ static List<long> RollingMax(List<long> numbers) {\n        List<long> result\
    \ = new List<long>();\n        long max = 0;\n        long currentMax = 0;\n \
    \       long currentNumber = 0;\n        long currentSum = 0;\n        long currentSumOfSquares\
    \ = 0;\n        long currentSumOfPowers = 0;\n        long currentSumOfPowersOfSquares\
    \ = 0;\n        long currentSumOfPowersOfSquaresOfPowers = 0;\n        long currentSumOfPowersOfSquaresOfPowersOfSquares\
    \ = 0;\n        long currentSumOfPowersOfSquaresOfPowersOfSquaresOfPowers = 0;\n\
    \        long currentSumOfPowersOfSquaresOfPowersOfSquaresOfPowersOfPowers = 0;\n\
    \        long currentSumOfPowersOfSquaresOfPowersOfSquaresOfPowersOfPowersOfPowers\
    \ = 0;\n        long currentSumOfPowersOfSquaresOfPowersOfSquaresOfPowersOfPowersOfPowersOfPowers\
    \ = 0;\n        long currentSumOfPowersOfSquaresOfPowersOfSquaresOfPowersOfPowersOfPowersOfPowersOfPowers\
    \ = 0;\n        long currentSumOfPowersOfSquaresOfPowersOfSquaresOfPowersOfPowersOfPowersOfPowersOfPowersOfPowers\
    \ = 0;\n        long currentSumOfPowersOfSquaresOfPowersOfSquaresOfPowersOfPowersOfPowersOfPowersOfPowersOfPowersOfPowers\
    \ = 0;\n        long currentSumOfPowersOfSquaresOfPowersOfSquaresOfPowersOfPowersOfPowersOfPowersOfPowersOfPowersOfPowersOfPowers\
    \ = 0;\n        long currentSumOfPowersOfSquaresOfPowersOfSquaresOfPowersOfPowersOfPowersOfPowersOfPowersOfPowersOfPowersOfPowersOfPowers\
    \ = 0;\n        long currentSumOfPowersOfSquaresOfPowersOfSquaresOfPowersOfPowersOfPowersOfPowersOfPowersOfPowersOfPowersOfPowersOfPowers\
    \ = 0;\n        long currentSumOfPowersOfSquaresOfPowersOfSquaresOfPowersOfPowersOfPowersOfPowersOfPowersOfPowersOfPowersOfPowersOfPowersOfPowers\
    \ = 0;\n        long currentSumOfPowersOfSquaresOfPowersOfSquaresOfPowersOfPowersOfPowersOfPowersOfPowersOfPowersOfPowersOfPowersOfPower\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(RollingMax((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(RollingMax((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new\
    \ List<long>(new long[]{(long)4L, (long)3L, (long)2L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpu55rmb_e.cs(33,129): error CS1002: ; expected

    '
  timestamp: 1660008889
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    public\
    \ static List<long> RollingMax(List<long> numbers) {\n        List<long> result\
    \ = new List<long>();\n        long maxValue = numbers.Max();\n        long currentMax\
    \ = maxValue;\n        long currentSum = 0;\n        long currentSumOfSquares\
    \ = 0;\n        long currentSumOfSquareOfDifferences = 0;\n        long currentSumOfSquareOfDifferenceOfDifferences\
    \ = 0;\n        long currentSumOfSquareOfDifferenceOfDifferenceOfDifferences =\
    \ 0;\n        long currentSumOfSquareOfDifferenceOfDifferenceOfDifferenceOfDifferences\
    \ = 0;\n        long currentSumOfSquareOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferences\
    \ = 0;\n        long currentSumOfSquareOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferences\
    \ = 0;\n        long currentSumOfSquareOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferences\
    \ = 0;\n        long currentSumOfSquareOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferences\
    \ = 0;\n        long currentSumOfSquareOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferences\
    \ = 0;\n        long currentSumOfSquareOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferences\
    \ = 0;\n        long currentSumOfSquareOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferences\
    \ = 0;\n        long currentSumOfSquareOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferences\
    \ = 0;\n        long currentSumOfSquareOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferences\
    \ = 0;\n        long currentSumOfSquareOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferences\
    \ = 0;\n        long currentSumOfSquareOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferences\
    \ = 0;\n        long currentSumOfSquareOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferences\
    \ = 0;\n        long currentSumOfSquareOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferences\
    \ = 0;\n        long currentSumOfSquareOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferences\
    \ = 0;\n        long currentSumOfSquareOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferences\
    \ = 0;\n        long currentSumOfSquareOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifference\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(RollingMax((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(RollingMax((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new\
    \ List<long>(new long[]{(long)4L, (long)3L, (long)2L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpdf3xhaiq.cs(36,152): error CS1002: ; expected

    '
  timestamp: 1660008889
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    public\
    \ static List<long> RollingMax(List<long> numbers) {\n        List<long> result\
    \ = new List<long>();\n        long max = 0;\n        long currentMax = numbers.First();\n\
    \        long currentMaxIndex = 0;\n        foreach (long number in numbers) {\n\
    \            if (number > currentMax) {\n                currentMax = number;\n\
    \                currentMaxIndex = result.Count;\n            }\n            if\
    \ (number == currentMax) {\n                result.Add(number);\n            }\n\
    \        }\n        if (result.Count > currentMaxIndex) {\n            max = result[currentMaxIndex];\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L,\
    \ (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new\
    \ long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp6vx4noqz.cs(26,26): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    '
  timestamp: 1660008890
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    public\
    \ static List<long> RollingMax(List<long> numbers) {\n        List<long> result\
    \ = new List<long>();\n        long max = 0;\n        long maxIndex = 0;\n   \
    \     long currentMax = numbers.First();\n        long currentMaxIndex = numbers.First();\n\
    \        foreach (long number in numbers) {\n            if (number > currentMax)\
    \ {\n                currentMax = number;\n                currentMaxIndex = currentMaxIndex;\n\
    \            }\n            if (number == currentMax) {\n                result.Add(currentMax);\n\
    \                currentMax = number;\n                currentMaxIndex = currentMaxIndex;\n\
    \            }\n            if (number > max) {\n                max = number;\n\
    \                maxIndex = currentMaxIndex;\n            }\n        }\n     \
    \   result.Add(max);\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L,\
    \ (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new\
    \ long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n    }\n\n\
    }\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.InvalidOperationException: Sequence contains\
    \ no elements\n  at System.Linq.Enumerable.First[TSource] (System.Collections.Generic.IEnumerable`1[T]\
    \ source) [0x00010] in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem.RollingMax\
    \ (System.Collections.Generic.List`1[T] numbers) [0x0000d] in <22c5b597e64b47038c3f631c5e617003>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <22c5b597e64b47038c3f631c5e617003>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.InvalidOperationException: Sequence\
    \ contains no elements\n  at System.Linq.Enumerable.First[TSource] (System.Collections.Generic.IEnumerable`1[T]\
    \ source) [0x00010] in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem.RollingMax\
    \ (System.Collections.Generic.List`1[T] numbers) [0x0000d] in <22c5b597e64b47038c3f631c5e617003>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <22c5b597e64b47038c3f631c5e617003>:0\
    \ \n"
  stdout: ''
  timestamp: 1660008890
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    public\
    \ static List<long> RollingMax(List<long> numbers) {\n        List<long> result\
    \ = new List<long>();\n        long maxValue = numbers.Max();\n        long currentMax\
    \ = maxValue;\n        long currentMaxIndex = 0;\n        long currentMaxIndexValue\
    \ = 0;\n        long currentMaxIndexValue2 = 0;\n        long currentMaxIndexValue3\
    \ = 0;\n        long currentMaxIndexValue4 = 0;\n        long currentMaxIndexValue5\
    \ = 0;\n        long currentMaxIndexValue6 = 0;\n        long currentMaxIndexValue7\
    \ = 0;\n        long currentMaxIndexValue8 = 0;\n        long currentMaxIndexValue9\
    \ = 0;\n        long currentMaxIndexValue10 = 0;\n        long currentMaxIndexValue11\
    \ = 0;\n        long currentMaxIndexValue12 = 0;\n        long currentMaxIndexValue13\
    \ = 0;\n        long currentMaxIndexValue14 = 0;\n        long currentMaxIndexValue15\
    \ = 0;\n        long currentMaxIndexValue16 = 0;\n        long currentMaxIndexValue17\
    \ = 0;\n        long currentMaxIndexValue18 = 0;\n        long currentMaxIndexValue19\
    \ = 0;\n        long currentMaxIndexValue20 = 0;\n        long currentMaxIndexValue21\
    \ = 0;\n        long currentMaxIndexValue22 = 0;\n        long currentMaxIndexValue23\
    \ = 0;\n        long currentMaxIndexValue24 = 0;\n        long currentMaxIndexValue25\
    \ = 0;\n        long currentMaxIndexValue26 = 0;\n        long currentMaxIndexValue27\
    \ = 0;\n        long currentMaxIndexValue28 = 0;\n        long currentMaxIndexValue29\
    \ = 0;\n        long currentMaxIndexValue30 = 0;\n        long currentMaxIndexValue31\
    \ = 0;\n        long currentMaxIndexValue32 = 0;\n        long currentMaxIndexValue33\
    \ = 0;\n        long currentMaxIndexValue34 = 0;\n        long currentMaxIndexValue35\
    \ = 0;\n        long currentMaxIndexValue36 = 0;\n        long currentMaxIndexValue37\
    \ = 0;\n        long currentMaxIndexValue38 = 0;\n        long currentMaxIndexValue39\
    \ = 0;\n        long currentMaxIndexValue40 = 0;\n        long currentMaxIndexValue41\
    \ = 0;\n        long currentMaxIndexValue42 = 0;\n        long currentMaxIndexValue43\
    \ = 0;\n        long currentMaxIndexValue44 = 0;\n        long currentMaxIndexValue45\
    \ = 0;\n        long currentMaxIndexValue46 = 0;\n        long currentMaxIndexValue47\
    \ = 0;\n        long currentMaxIndexValue48 = 0;\n        long currentMaxIndexValue49\
    \ = 0;\n        long currentMaxIndexValue50 = 0;\n        long currentMaxIndexValue51\
    \ = 0;\n        long currentMaxIndexValue52 = 0;\n        long currentMaxIndexValue53\
    \ = 0;\n        long currentMaxIndexValue54\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L,\
    \ (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new\
    \ long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp0ues37ym.cs(69,36): error CS1002: ; expected

    '
  timestamp: 1660008889
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    public\
    \ static List<long> RollingMax(List<long> numbers) {\n        List<long> result\
    \ = new List<long>();\n        long max = 0;\n        long currentMax = 0;\n \
    \       long currentMaxIndex = 0;\n        long currentMaxValue = numbers[0];\n\
    \        long currentMaxValueIndex = 0;\n        long currentMaxValueValue = numbers[0];\n\
    \        long currentMaxValueValueIndex = 0;\n        long currentMaxValueValueValueIndex\
    \ = 0;\n        long currentMaxValueValueValueValueIndex = 0;\n        long currentMaxValueValueValueValueIndex\
    \ = 0;\n        long currentMaxValueValueValueValueIndex = 0;\n        long currentMaxValueValueValueValueIndex\
    \ = 0;\n        long currentMaxValueValueValueValueIndex = 0;\n        long currentMaxValueValueValueValueIndex\
    \ = 0;\n        long currentMaxValueValueValueValueIndex = 0;\n        long currentMaxValueValueValueValueIndex\
    \ = 0;\n        long currentMaxValueValueValueValueIndex = 0;\n        long currentMaxValueValueValueValueIndex\
    \ = 0;\n        long currentMaxValueValueValueValueIndex = 0;\n        long currentMaxValueValueValueValueIndex\
    \ = 0;\n        long currentMaxValueValueValueValueIndex = 0;\n        long currentMaxValueValueValueValueIndex\
    \ = 0;\n        long currentMaxValueValueValueValueIndex = 0;\n        long currentMaxValueValueValueValueIndex\
    \ = 0;\n        long currentMaxValueValueValueValueIndex = 0;\n        long currentMaxValueValueValueValueIndex\
    \ = 0;\n        long currentMaxValueValueValueValueIndex = 0;\n        long currentMaxValueValueValueValueIndex\
    \ = 0;\n        long currentMaxValueValueValueValueIndex = 0;\n        long currentMaxValueValueValueValueIndex\
    \ = 0;\n        long currentMaxValueValueValueValueIndex = 0;\n        long currentMaxValueValueValueValueIndex\
    \ = 0;\n        long currentMaxValueValueValueValueIndex = 0;\n        long currentMaxValueValueValueValueIndex\
    \ = 0;\n        long currentMaxValueValueValueValueIndex = 0;\n        long currentMaxValueValueValueValueIndex\
    \ = 0;\n        long currentMaxValueValueValueValueIndex = 0;\n        long currentMaxValueValueValueValueIndex\
    \ = 0;\n        long currentMaxValueValueValueValueIndex = 0;\n        long currentMaxValueValueValueValueIndex\
    \ = 0;\n        long currentMaxValueValueValueValueIndex = 0;\n        long currentMaxValueValueValueValueIndex\
    \ = 0;\n        long currentMaxValueValueValueValueIndex = 0;\n        long currentMaxValueValueValueValueIndex\
    \ = 0;\n        long currentMaxValueValueValueValueIndex = 0;\n        long currentMaxValueValueValueValueIndex\
    \ = 0;\n        long currentMaxValueValueValueValueIndex = 0;\n        long currentMaxValueValueValueValueIndex\
    \ = 0;\n\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(RollingMax((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(RollingMax((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new\
    \ List<long>(new long[]{(long)4L, (long)3L, (long)2L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpbt3ncbmf.cs(22,14): error CS0128: A local variable or function named ''currentMaxValueValueValueValueIndex''
    is already defined in this scope

    /tmp/tmpbt3ncbmf.cs(23,14): error CS0128: A local variable or function named ''currentMaxValueValueValueValueIndex''
    is already defined in this scope

    /tmp/tmpbt3ncbmf.cs(24,14): error CS0128: A local variable or function named ''currentMaxValueValueValueValueIndex''
    is already defined in this scope

    /tmp/tmpbt3ncbmf.cs(25,14): error CS0128: A local variable or function named ''currentMaxValueValueValueValueIndex''
    is already defined in this scope

    /tmp/tmpbt3ncbmf.cs(26,14): error CS0128: A local variable or function named ''currentMaxValueValueValueValueIndex''
    is already defined in this scope

    /tmp/tmpbt3ncbmf.cs(27,14): error CS0128: A local variable or function named ''currentMaxValueValueValueValueIndex''
    is already defined in this scope

    /tmp/tmpbt3ncbmf.cs(28,14): error CS0128: A local variable or function named ''currentMaxValueValueValueValueIndex''
    is already defined in this scope

    /tmp/tmpbt3ncbmf.cs(29,14): error CS0128: A local variable or function named ''currentMaxValueValueValueValueIndex''
    is already defined in this scope

    /tmp/tmpbt3ncbmf.cs(30,14): error CS0128: A local variable or function named ''currentMaxValueValueValueValueIndex''
    is already defined in this scope

    /tmp/tmpbt3ncbmf.cs(31,14): error CS0128: A local variable or function named ''currentMaxValueValueValueValueIndex''
    is already defined in this scope

    /tmp/tmpbt3ncbmf.cs(32,14): error CS0128: A local variable or function named ''currentMaxValueValueValueValueIndex''
    is already defined in this scope

    /tmp/tmpbt3ncbmf.cs(33,14): error CS0128: A local variable or function named ''currentMaxValueValueValueValueIndex''
    is already defined in this scope

    /tmp/tmpbt3ncbmf.cs(34,14): error CS0128: A local variable or function named ''currentMaxValueValueValueValueIndex''
    is already defined in this sco'
  timestamp: 1660008890
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    public\
    \ static List<long> RollingMax(List<long> numbers) {\n        List<long> result\
    \ = new List<long>();\n        long maxValue = numbers.Max();\n        long currentMax\
    \ = maxValue;\n        long currentMaxIndex = 0;\n        long currentMaxIndex2\
    \ = 0;\n        long currentMaxIndex3 = 0;\n        long currentMaxIndex4 = 0;\n\
    \        long currentMaxIndex5 = 0;\n        long currentMaxIndex6 = 0;\n    \
    \    long currentMaxIndex7 = 0;\n        long currentMaxIndex8 = 0;\n        long\
    \ currentMaxIndex9 = 0;\n        long currentMaxIndex10 = 0;\n        long currentMaxIndex11\
    \ = 0;\n        long currentMaxIndex12 = 0;\n        long currentMaxIndex13 =\
    \ 0;\n        long currentMaxIndex14 = 0;\n        long currentMaxIndex15 = 0;\n\
    \        long currentMaxIndex16 = 0;\n        long currentMaxIndex17 = 0;\n  \
    \      long currentMaxIndex18 = 0;\n        long currentMaxIndex19 = 0;\n    \
    \    long currentMaxIndex20 = 0;\n        long currentMaxIndex21 = 0;\n      \
    \  long currentMaxIndex22 = 0;\n        long currentMaxIndex23 = 0;\n        long\
    \ currentMaxIndex24 = 0;\n        long currentMaxIndex25 = 0;\n        long currentMaxIndex26\
    \ = 0;\n        long currentMaxIndex27 = 0;\n        long currentMaxIndex28 =\
    \ 0;\n        long currentMaxIndex29 = 0;\n        long currentMaxIndex30 = 0;\n\
    \        long currentMaxIndex31 = 0;\n        long currentMaxIndex32 = 0;\n  \
    \      long currentMaxIndex33 = 0;\n        long currentMaxIndex34 = 0;\n    \
    \    long currentMaxIndex35 = 0;\n        long currentMaxIndex36 = 0;\n      \
    \  long currentMaxIndex37 = 0;\n        long currentMaxIndex38 = 0;\n        long\
    \ currentMaxIndex39 = 0;\n        long currentMaxIndex40 = 0;\n        long currentMaxIndex41\
    \ = 0;\n        long currentMaxIndex42 = 0;\n        long currentMaxIndex43 =\
    \ 0;\n        long currentMaxIndex44 = 0;\n        long currentMaxIndex45 = 0;\n\
    \        long currentMaxIndex46 = 0;\n        long currentMaxIndex47 = 0;\n  \
    \      long currentMaxIndex48 = 0;\n        long currentMaxIndex49 = 0;\n    \
    \    long currentMaxIndex50 = 0;\n        long currentMaxIndex51 = 0;\n      \
    \  long currentMaxIndex52 = 0;\n        long currentMaxIndex53 = 0;\n        long\
    \ currentMaxIndex54 = 0;\n        long currentMaxIndex55 = 0;\n        long currentMaxIndex56\
    \ = 0;\n        long currentMaxIndex57 = 0;\n        long currentMaxIndex58 =\
    \ 0;\n        long currentMaxIndex59 = 0;\n        long currentMaxIndex60 = 0;\n\
    \        long currentMaxIndex61 = 0;\n        long current\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new\
    \ long[]{(long)4L, (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmphd0j6__f.cs(76,21): error CS1002: ; expected

    '
  timestamp: 1660008889
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    public\
    \ static List<long> RollingMax(List<long> numbers) {\n        List<long> max =\
    \ new List<long>();\n        long maxValue = numbers.Max();\n        long currentMaxValue\
    \ = numbers.First();\n        long currentMaxIndex = numbers.IndexOf(currentMaxValue);\n\
    \        long currentMaxIndexValue = numbers.ElementAt(currentMaxIndex);\n   \
    \     long currentMaxIndexValue2 = numbers.ElementAt(currentMaxIndex + 1);\n \
    \       long currentMaxIndexValue3 = numbers.ElementAt(currentMaxIndex + 2);\n\
    \        long currentMaxIndexValue4 = numbers.ElementAt(currentMaxIndex + 3);\n\
    \        long currentMaxIndexValue5 = numbers.ElementAt(currentMaxIndex + 4);\n\
    \        long currentMaxIndexValue6 = numbers.ElementAt(currentMaxIndex + 5);\n\
    \        long currentMaxIndexValue7 = numbers.ElementAt(currentMaxIndex + 6);\n\
    \        long currentMaxIndexValue8 = numbers.ElementAt(currentMaxIndex + 7);\n\
    \        long currentMaxIndexValue9 = numbers.ElementAt(currentMaxIndex + 8);\n\
    \        long currentMaxIndexValue10 = numbers.ElementAt(currentMaxIndex + 9);\n\
    \        long currentMaxIndexValue11 = numbers.ElementAt(currentMaxIndex + 10);\n\
    \        long currentMaxIndexValue12 = numbers.ElementAt(currentMaxIndex + 11);\n\
    \        long currentMaxIndexValue13 = numbers.ElementAt(currentMaxIndex + 12);\n\
    \        long currentMaxIndexValue14 = numbers.ElementAt(currentMaxIndex + 13);\n\
    \        long currentMaxIndexValue15 = numbers.ElementAt(currentMaxIndex + 14);\n\
    \        long currentMaxIndexValue16 = numbers.ElementAt(currentMaxIndex + 15);\n\
    \        long currentMaxIndexValue17 = numbers.ElementAt(currentMaxIndex + 16);\n\
    \        long currentMaxIndexValue18 = numbers.ElementAt(currentMaxIndex + 17);\n\
    \        long currentMaxIndexValue19 = numbers.ElementAt(currentMaxIndex + 18);\n\
    \        long currentMaxIndexValue20 = numbers.ElementAt(currentMaxIndex + 19);\n\
    \        long currentMaxIndexValue21 = numbers.ElementAt(currentMaxIndex + 20);\n\
    \        long currentMaxIndexValue22 = numbers.ElementAt(currentMaxIndex + 21);\n\
    \        long currentMaxIndexValue23 = numbers.ElementAt(currentMaxIndex + 22);\n\
    \        long currentMaxIndexValue24 = numbers.ElementAt(currentMaxIndex + 23);\n\
    \        long currentMaxIndexValue25 = numbers.ElementAt(currentMaxIndex + 24);\n\
    \        long currentMaxIndexValue26 = numbers.ElementAt(currentMaxIndex + 25);\n\
    \        long currentMaxIndexValue27 = numbers.ElementAt(currentMaxIndex + 26);\n\
    \        long currentMaxIndexValue28 = numbers.ElementAt(currentMaxIndex + 27);\n\
    \        long currentMax\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(RollingMax((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L,\
    \ (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new\
    \ long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpctqg83_z.cs(44,24): error CS1002: ; expected

    '
  timestamp: 1660008890
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    public\
    \ static List<long> RollingMax(List<long> numbers) {\n        List<long> result\
    \ = new List<long>();\n        long max = 0;\n        long currentMax = 0;\n \
    \       long currentSum = 0;\n        long sum = 0;\n        long currentSum2\
    \ = 0;\n        long currentSum3 = 0;\n        long currentSum4 = 0;\n       \
    \ long currentSum5 = 0;\n        long currentSum6 = 0;\n        long currentSum7\
    \ = 0;\n        long currentSum8 = 0;\n        long currentSum9 = 0;\n       \
    \ long currentSum10 = 0;\n        long currentSum11 = 0;\n        long currentSum12\
    \ = 0;\n        long currentSum13 = 0;\n        long currentSum14 = 0;\n     \
    \   long currentSum15 = 0;\n        long currentSum16 = 0;\n        long currentSum17\
    \ = 0;\n        long currentSum18 = 0;\n        long currentSum19 = 0;\n     \
    \   long currentSum20 = 0;\n        long currentSum21 = 0;\n        long currentSum22\
    \ = 0;\n        long currentSum23 = 0;\n        long currentSum24 = 0;\n     \
    \   long currentSum25 = 0;\n        long currentSum26 = 0;\n        long currentSum27\
    \ = 0;\n        long currentSum28 = 0;\n        long currentSum29 = 0;\n     \
    \   long currentSum30 = 0;\n        long currentSum31 = 0;\n        long currentSum32\
    \ = 0;\n        long currentSum33 = 0;\n        long currentSum34 = 0;\n     \
    \   long currentSum35 = 0;\n        long currentSum36 = 0;\n        long currentSum37\
    \ = 0;\n        long currentSum38 = 0;\n        long currentSum39 = 0;\n     \
    \   long currentSum40 = 0;\n        long currentSum41 = 0;\n        long currentSum42\
    \ = 0;\n        long currentSum43 = 0;\n        long currentSum44 = 0;\n     \
    \   long currentSum45 = 0;\n        long currentSum46 = 0;\n        long currentSum47\
    \ = 0;\n        long currentSum48 = 0;\n        long currentSum49 = 0;\n     \
    \   long currentSum50 = 0;\n        long currentSum51 = 0;\n        long currentSum52\
    \ = 0;\n        long currentSum53 = 0;\n        long currentSum54 = 0;\n     \
    \   long currentSum55 = 0;\n        long currentSum56 = 0;\n        long currentSum57\
    \ = 0;\n        long currentSum58 = 0;\n        long currentSum59 = 0;\n     \
    \   long currentSum60 = 0;\n        long currentSum61 = 0;\n        long currentSum62\
    \ = 0;\n        long currentSum63 = 0;\n        long currentSum64 = 0;\n     \
    \   long currentSum65 = 0;\n        long currentSum66 = 0;\n        long currentSum67\
    \ = 0;\n        long currentSum68 = 0;\n        long currentSum69 = 0;\n     \
    \   long currentSum70 = 0;\n        \n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L,\
    \ (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new\
    \ long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpf1ir2nv_.cs(13,14): warning CS0219: The variable ''max'' is assigned but
    its value is never used

    /tmp/tmpf1ir2nv_.cs(14,14): warning CS0219: The variable ''currentMax'' is assigned
    but its value is never used

    /tmp/tmpf1ir2nv_.cs(15,14): warning CS0219: The variable ''currentSum'' is assigned
    but its value is never used

    /tmp/tmpf1ir2nv_.cs(16,14): warning CS0219: The variable ''sum'' is assigned but
    its value is never used

    /tmp/tmpf1ir2nv_.cs(17,14): warning CS0219: The variable ''currentSum2'' is assigned
    but its value is never used

    /tmp/tmpf1ir2nv_.cs(18,14): warning CS0219: The variable ''currentSum3'' is assigned
    but its value is never used

    /tmp/tmpf1ir2nv_.cs(19,14): warning CS0219: The variable ''currentSum4'' is assigned
    but its value is never used

    /tmp/tmpf1ir2nv_.cs(20,14): warning CS0219: The variable ''currentSum5'' is assigned
    but its value is never used

    /tmp/tmpf1ir2nv_.cs(21,14): warning CS0219: The variable ''currentSum6'' is assigned
    but its value is never used

    /tmp/tmpf1ir2nv_.cs(22,14): warning CS0219: The variable ''currentSum7'' is assigned
    but its value is never used

    /tmp/tmpf1ir2nv_.cs(23,14): warning CS0219: The variable ''currentSum8'' is assigned
    but its value is never used

    /tmp/tmpf1ir2nv_.cs(24,14): warning CS0219: The variable ''currentSum9'' is assigned
    but its value is never used

    /tmp/tmpf1ir2nv_.cs(25,14): warning CS0219: The variable ''currentSum10'' is assigned
    but its value is never used

    /tmp/tmpf1ir2nv_.cs(26,14): warning CS0219: The variable ''currentSum11'' is assigned
    but its value is never used

    /tmp/tmpf1ir2nv_.cs(27,14): warning CS0219: The variable ''currentSum12'' is assigned
    but its value is never used

    /tmp/tmpf1ir2nv_.cs(28,14): warning CS0219: The variable ''currentSum13'' is assigned
    but its value is never used

    /tmp/tmpf1ir2nv_.cs(29,14): warning CS0219: The variable ''currentSum14'' is assigned
    but its value is never used

    /tmp/tmpf1ir2nv_.cs(30,14): warning CS0219: The'
  timestamp: 1660008890
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    public\
    \ static List<long> RollingMax(List<long> numbers) {\n        List<long> result\
    \ = new List<long>();\n        long max = 0;\n        long currentMax = numbers.First();\n\
    \        foreach (long number in numbers) {\n            if (number > currentMax)\
    \ {\n                max = currentMax;\n                currentMax = number;\n\
    \            }\n            else if (number == currentMax) {\n               \
    \ currentMax = number;\n            }\n            else {\n                max\
    \ = Math.Max(number, max);\n                currentMax = number;\n           \
    \ }\n            result.Add(max);\n        }\n        return result;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(RollingMax((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(RollingMax((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new\
    \ List<long>(new long[]{(long)4L, (long)3L, (long)2L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.InvalidOperationException: Sequence contains\
    \ no elements\n  at System.Linq.Enumerable.First[TSource] (System.Collections.Generic.IEnumerable`1[T]\
    \ source) [0x00010] in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem.RollingMax\
    \ (System.Collections.Generic.List`1[T] numbers) [0x0000a] in <d383a3f3ece74da1944997b29acf05a3>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <d383a3f3ece74da1944997b29acf05a3>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.InvalidOperationException: Sequence\
    \ contains no elements\n  at System.Linq.Enumerable.First[TSource] (System.Collections.Generic.IEnumerable`1[T]\
    \ source) [0x00010] in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem.RollingMax\
    \ (System.Collections.Generic.List`1[T] numbers) [0x0000a] in <d383a3f3ece74da1944997b29acf05a3>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <d383a3f3ece74da1944997b29acf05a3>:0\
    \ \n"
  stdout: ''
  timestamp: 1660008890
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    public\
    \ static List<long> RollingMax(List<long> numbers) {\n        List<long> max =\
    \ new List<long>();\n        long maxValue = numbers.Max();\n        long currentMax\
    \ = maxValue;\n        long currentMaxIndex = 0;\n        long currentMaxIndexValue\
    \ = 0;\n        long currentMaxIndexValue2 = 0;\n        long currentMaxIndexValue3\
    \ = 0;\n        long currentMaxIndexValue4 = 0;\n        long currentMaxIndexValue5\
    \ = 0;\n        long currentMaxIndexValue6 = 0;\n        long currentMaxIndexValue7\
    \ = 0;\n        long currentMaxIndexValue8 = 0;\n        long currentMaxIndexValue9\
    \ = 0;\n        long currentMaxIndexValue10 = 0;\n        long currentMaxIndexValue11\
    \ = 0;\n        long currentMaxIndexValue12 = 0;\n        long currentMaxIndexValue13\
    \ = 0;\n        long currentMaxIndexValue14 = 0;\n        long currentMaxIndexValue15\
    \ = 0;\n        long currentMaxIndexValue16 = 0;\n        long currentMaxIndexValue17\
    \ = 0;\n        long currentMaxIndexValue18 = 0;\n        long currentMaxIndexValue19\
    \ = 0;\n        long currentMaxIndexValue20 = 0;\n        long currentMaxIndexValue21\
    \ = 0;\n        long currentMaxIndexValue22 = 0;\n        long currentMaxIndexValue23\
    \ = 0;\n        long currentMaxIndexValue24 = 0;\n        long currentMaxIndexValue25\
    \ = 0;\n        long currentMaxIndexValue26 = 0;\n        long currentMaxIndexValue27\
    \ = 0;\n        long currentMaxIndexValue28 = 0;\n        long currentMaxIndexValue29\
    \ = 0;\n        long currentMaxIndexValue30 = 0;\n        long currentMaxIndexValue31\
    \ = 0;\n        long currentMaxIndexValue32 = 0;\n        long currentMaxIndexValue33\
    \ = 0;\n        long currentMaxIndexValue34 = 0;\n        long currentMaxIndexValue35\
    \ = 0;\n        long currentMaxIndexValue36 = 0;\n        long currentMaxIndexValue37\
    \ = 0;\n        long currentMaxIndexValue38 = 0;\n        long currentMaxIndexValue39\
    \ = 0;\n        long currentMaxIndexValue40 = 0;\n        long currentMaxIndexValue41\
    \ = 0;\n        long currentMaxIndexValue42 = 0;\n        long currentMaxIndexValue43\
    \ = 0;\n        long currentMaxIndexValue44 = 0;\n        long currentMaxIndexValue45\
    \ = 0;\n        long currentMaxIndexValue46 = 0;\n        long currentMaxIndexValue47\
    \ = 0;\n        long currentMaxIndexValue48 = 0;\n        long currentMaxIndexValue49\
    \ = 0;\n        long currentMaxIndexValue50 = 0;\n        long currentMaxIndexValue51\
    \ = 0;\n        long currentMaxIndexValue52 = 0;\n        long currentMaxIndexValue53\
    \ = 0;\n        long currentMaxIndexValue54\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L,\
    \ (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new\
    \ long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpcj81lryj.cs(69,36): error CS1002: ; expected

    '
  timestamp: 1660008889
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    public\
    \ static List<long> RollingMax(List<long> numbers) {\n        List<long> result\
    \ = new List<long>();\n        long max = 0;\n        long cur = 0;\n        foreach\
    \ (long n in numbers) {\n            max = Math.Max(max, n);\n            cur\
    \ = n;\n            result.Add(max);\n        }\n        return result;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(RollingMax((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(RollingMax((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new\
    \ List<long>(new long[]{(long)4L, (long)3L, (long)2L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9d544835b2e4434c90b8435dc748a8ac>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9d544835b2e4434c90b8435dc748a8ac>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660008890
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    public\
    \ static List<long> RollingMax(List<long> numbers) {\n        List<long> result\
    \ = new List<long>();\n        long maxValue = numbers.Max();\n        long currentMax\
    \ = maxValue;\n        long currentMaxIndex = 0;\n        long currentMaxIndexValue\
    \ = 0;\n        long currentMaxIndexValue2 = 0;\n        long currentMaxIndexValue3\
    \ = 0;\n        long currentMaxIndexValue4 = 0;\n        long currentMaxIndexValue5\
    \ = 0;\n        long currentMaxIndexValue6 = 0;\n        long currentMaxIndexValue7\
    \ = 0;\n        long currentMaxIndexValue8 = 0;\n        long currentMaxIndexValue9\
    \ = 0;\n        long currentMaxIndexValue10 = 0;\n        long currentMaxIndexValue11\
    \ = 0;\n        long currentMaxIndexValue12 = 0;\n        long currentMaxIndexValue13\
    \ = 0;\n        long currentMaxIndexValue14 = 0;\n        long currentMaxIndexValue15\
    \ = 0;\n        long currentMaxIndexValue16 = 0;\n        long currentMaxIndexValue17\
    \ = 0;\n        long currentMaxIndexValue18 = 0;\n        long currentMaxIndexValue19\
    \ = 0;\n        long currentMaxIndexValue20 = 0;\n        long currentMaxIndexValue21\
    \ = 0;\n        long currentMaxIndexValue22 = 0;\n        long currentMaxIndexValue23\
    \ = 0;\n        long currentMaxIndexValue24 = 0;\n        long currentMaxIndexValue25\
    \ = 0;\n        long currentMaxIndexValue26 = 0;\n        long currentMaxIndexValue27\
    \ = 0;\n        long currentMaxIndexValue28 = 0;\n        long currentMaxIndexValue29\
    \ = 0;\n        long currentMaxIndexValue30 = 0;\n        long currentMaxIndexValue31\
    \ = 0;\n        long currentMaxIndexValue32 = 0;\n        long currentMaxIndexValue33\
    \ = 0;\n        long currentMaxIndexValue34 = 0;\n        long currentMaxIndexValue35\
    \ = 0;\n        long currentMaxIndexValue36 = 0;\n        long currentMaxIndexValue37\
    \ = 0;\n        long currentMaxIndexValue38 = 0;\n        long currentMaxIndexValue39\
    \ = 0;\n        long currentMaxIndexValue40 = 0;\n        long currentMaxIndexValue41\
    \ = 0;\n        long currentMaxIndexValue42 = 0;\n        long currentMaxIndexValue43\
    \ = 0;\n        long currentMaxIndexValue44 = 0;\n        long currentMaxIndexValue45\
    \ = 0;\n        long currentMaxIndexValue46 = 0;\n        long currentMaxIndexValue47\
    \ = 0;\n        long currentMaxIndexValue48 = 0;\n        long currentMaxIndexValue49\
    \ = 0;\n        long currentMaxIndexValue50 = 0;\n        long currentMaxIndexValue51\
    \ = 0;\n        long currentMaxIndexValue52 = 0;\n        long currentMaxIndexValue53\
    \ = 0;\n        long currentMaxIndexValue54\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L,\
    \ (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new\
    \ long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp0ues37ym.cs(69,36): error CS1002: ; expected

    '
  timestamp: 1660008889
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    public\
    \ static List<long> RollingMax(List<long> numbers) {\n        List<long> result\
    \ = new List<long>();\n        long maxValue = numbers.Max();\n        long currentMaxValue\
    \ = maxValue;\n        long currentMaxIndex = 0;\n        long currentMaxIndexValue\
    \ = 0;\n        long currentMaxIndexValue2 = 0;\n        long currentMaxIndexValue3\
    \ = 0;\n        long currentMaxIndexValue4 = 0;\n        long currentMaxIndexValue5\
    \ = 0;\n        long currentMaxIndexValue6 = 0;\n        long currentMaxIndexValue7\
    \ = 0;\n        long currentMaxIndexValue8 = 0;\n        long currentMaxIndexValue9\
    \ = 0;\n        long currentMaxIndexValue10 = 0;\n        long currentMaxIndexValue11\
    \ = 0;\n        long currentMaxIndexValue12 = 0;\n        long currentMaxIndexValue13\
    \ = 0;\n        long currentMaxIndexValue14 = 0;\n        long currentMaxIndexValue15\
    \ = 0;\n        long currentMaxIndexValue16 = 0;\n        long currentMaxIndexValue17\
    \ = 0;\n        long currentMaxIndexValue18 = 0;\n        long currentMaxIndexValue19\
    \ = 0;\n        long currentMaxIndexValue20 = 0;\n        long currentMaxIndexValue21\
    \ = 0;\n        long currentMaxIndexValue22 = 0;\n        long currentMaxIndexValue23\
    \ = 0;\n        long currentMaxIndexValue24 = 0;\n        long currentMaxIndexValue25\
    \ = 0;\n        long currentMaxIndexValue26 = 0;\n        long currentMaxIndexValue27\
    \ = 0;\n        long currentMaxIndexValue28 = 0;\n        long currentMaxIndexValue29\
    \ = 0;\n        long currentMaxIndexValue30 = 0;\n        long currentMaxIndexValue31\
    \ = 0;\n        long currentMaxIndexValue32 = 0;\n        long currentMaxIndexValue33\
    \ = 0;\n        long currentMaxIndexValue34 = 0;\n        long currentMaxIndexValue35\
    \ = 0;\n        long currentMaxIndexValue36 = 0;\n        long currentMaxIndexValue37\
    \ = 0;\n        long currentMaxIndexValue38 = 0;\n        long currentMaxIndexValue39\
    \ = 0;\n        long currentMaxIndexValue40 = 0;\n        long currentMaxIndexValue41\
    \ = 0;\n        long currentMaxIndexValue42 = 0;\n        long currentMaxIndexValue43\
    \ = 0;\n        long currentMaxIndexValue44 = 0;\n        long currentMaxIndexValue45\
    \ = 0;\n        long currentMaxIndexValue46 = 0;\n        long currentMaxIndexValue47\
    \ = 0;\n        long currentMaxIndexValue48 = 0;\n        long currentMaxIndexValue49\
    \ = 0;\n        long currentMaxIndexValue50 = 0;\n        long currentMaxIndexValue51\
    \ = 0;\n        long currentMaxIndexValue52 = 0;\n        long currentMaxIndexValue53\
    \ = 0;\n        long currentMaxIndexValue54\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L,\
    \ (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new\
    \ long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpr8mz57to.cs(69,36): error CS1002: ; expected

    '
  timestamp: 1660008889
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    public\
    \ static List<long> RollingMax(List<long> numbers) {\n        List<long> result\
    \ = new List<long>();\n        long max = 0;\n        long currentMax = 0;\n \
    \       long currentMaxIndex = 0;\n        long currentMaxValue = numbers[0];\n\
    \        long currentMaxValueIndex = numbers.IndexOf(currentMaxValue);\n     \
    \   long currentMaxValueIndex = numbers.IndexOf(currentMaxValue);\n        long\
    \ currentMaxValueIndex = numbers.IndexOf(currentMaxValue);\n        long currentMaxValueIndex\
    \ = numbers.IndexOf(currentMaxValue);\n        long currentMaxValueIndex = numbers.IndexOf(currentMaxValue);\n\
    \        long currentMaxValueIndex = numbers.IndexOf(currentMaxValue);\n     \
    \   long currentMaxValueIndex = numbers.IndexOf(currentMaxValue);\n        long\
    \ currentMaxValueIndex = numbers.IndexOf(currentMaxValue);\n        long currentMaxValueIndex\
    \ = numbers.IndexOf(currentMaxValue);\n        long currentMaxValueIndex = numbers.IndexOf(currentMaxValue);\n\
    \        long currentMaxValueIndex = numbers.IndexOf(currentMaxValue);\n     \
    \   long currentMaxValueIndex = numbers.IndexOf(currentMaxValue);\n        long\
    \ currentMaxValueIndex = numbers.IndexOf(currentMaxValue);\n        long currentMaxValueIndex\
    \ = numbers.IndexOf(currentMaxValue);\n        long currentMaxValueIndex = numbers.IndexOf(currentMaxValue);\n\
    \        long currentMaxValueIndex = numbers.IndexOf(currentMaxValue);\n     \
    \   long currentMaxValueIndex = numbers.IndexOf(currentMaxValue);\n        long\
    \ currentMaxValueIndex = numbers.IndexOf(currentMaxValue);\n        long currentMaxValueIndex\
    \ = numbers.IndexOf(currentMaxValue);\n        long currentMaxValueIndex = numbers.IndexOf(currentMaxValue);\n\
    \        long currentMaxValueIndex = numbers.IndexOf(currentMaxValue);\n     \
    \   long currentMaxValueIndex = numbers.IndexOf(currentMaxValue);\n        long\
    \ currentMaxValueIndex = numbers.IndexOf(currentMaxValue);\n        long currentMaxValueIndex\
    \ = numbers.IndexOf(currentMaxValue);\n        long currentMaxValueIndex = numbers.IndexOf(currentMaxValue);\n\
    \        long currentMaxValueIndex = numbers.IndexOf(currentMaxValue);\n     \
    \   long currentMaxValueIndex = numbers.IndexOf(currentMaxValue);\n        long\
    \ currentMaxValueIndex = numbers.IndexOf(currentMaxValue);\n        long currentMaxValueIndex\
    \ = numbers.IndexOf(currentMaxValue);\n        long currentMaxValueIndex = numbers.IndexOf(currentMaxValue);\n\
    \        long currentMaxValueIndex = numbers.IndexOf(currentMaxValue);\n     \
    \   long currentMaxValueIndex = numbers.IndexOf(currentMaxValue);\n        long\
    \ currentMaxValueIndex = numbers.IndexOf(currentMaxValue);\n        long currentMaxValueIndex\
    \ = numbers.IndexOf(currentMaxValue);\n        long currentMaxValueIndex = numbers.IndexOf(currentMaxValue);\n\
    \        long currentMaxValueIndex = numbers.IndexOf(currentMaxValue);\n     \
    \   long currentMaxValueIndex = numbers.Index\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L,\
    \ (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new\
    \ long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpsk8zww3z.cs(53,50): error CS1002: ; expected

    '
  timestamp: 1660008889
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    public\
    \ static List<long> RollingMax(List<long> numbers) {\n        List<long> result\
    \ = new List<long>();\n        long maxValue = numbers.Max();\n        long currentMax\
    \ = maxValue;\n        long currentMaxIndex = 0;\n        long currentMaxIndexValue\
    \ = 0;\n        long currentMaxIndexValue2 = 0;\n        long currentMaxIndexValue3\
    \ = 0;\n        long currentMaxIndexValue4 = 0;\n        long currentMaxIndexValue5\
    \ = 0;\n        long currentMaxIndexValue6 = 0;\n        long currentMaxIndexValue7\
    \ = 0;\n        long currentMaxIndexValue8 = 0;\n        long currentMaxIndexValue9\
    \ = 0;\n        long currentMaxIndexValue10 = 0;\n        long currentMaxIndexValue11\
    \ = 0;\n        long currentMaxIndexValue12 = 0;\n        long currentMaxIndexValue13\
    \ = 0;\n        long currentMaxIndexValue14 = 0;\n        long currentMaxIndexValue15\
    \ = 0;\n        long currentMaxIndexValue16 = 0;\n        long currentMaxIndexValue17\
    \ = 0;\n        long currentMaxIndexValue18 = 0;\n        long currentMaxIndexValue19\
    \ = 0;\n        long currentMaxIndexValue20 = 0;\n        long currentMaxIndexValue21\
    \ = 0;\n        long currentMaxIndexValue22 = 0;\n        long currentMaxIndexValue23\
    \ = 0;\n        long currentMaxIndexValue24 = 0;\n        long currentMaxIndexValue25\
    \ = 0;\n        long currentMaxIndexValue26 = 0;\n        long currentMaxIndexValue27\
    \ = 0;\n        long currentMaxIndexValue28 = 0;\n        long currentMaxIndexValue29\
    \ = 0;\n        long currentMaxIndexValue30 = 0;\n        long currentMaxIndexValue31\
    \ = 0;\n        long currentMaxIndexValue32 = 0;\n        long currentMaxIndexValue33\
    \ = 0;\n        long currentMaxIndexValue34 = 0;\n        long currentMaxIndexValue35\
    \ = 0;\n        long currentMaxIndexValue36 = 0;\n        long currentMaxIndexValue37\
    \ = 0;\n        long currentMaxIndexValue38 = 0;\n        long currentMaxIndexValue39\
    \ = 0;\n        long currentMaxIndexValue40 = 0;\n        long currentMaxIndexValue41\
    \ = 0;\n        long currentMaxIndexValue42 = 0;\n        long currentMaxIndexValue43\
    \ = 0;\n        long currentMaxIndexValue44 = 0;\n        long currentMaxIndexValue45\
    \ = 0;\n        long currentMaxIndexValue46 = 0;\n        long currentMaxIndexValue47\
    \ = 0;\n        long currentMaxIndexValue48 = 0;\n        long currentMaxIndexValue49\
    \ = 0;\n        long currentMaxIndexValue50 = 0;\n        long currentMaxIndexValue51\
    \ = 0;\n        long currentMaxIndexValue52 = 0;\n        long currentMaxIndexValue53\
    \ = 0;\n        long currentMaxIndexValue54\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L,\
    \ (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new\
    \ long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp0ues37ym.cs(69,36): error CS1002: ; expected

    '
  timestamp: 1660008889
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    public\
    \ static List<long> RollingMax(List<long> numbers) {\n        List<long> result\
    \ = new List<long>();\n        long max = 0;\n        long currentMax = 0;\n \
    \       long currentMaxIndex = 0;\n        foreach (long number in numbers) {\n\
    \            if (number > max) {\n                max = number;\n            \
    \    currentMax = number;\n                currentMaxIndex = numbers.IndexOf(number);\n\
    \            }\n            else if (number == max) {\n                currentMax\
    \ = number;\n                currentMaxIndex = numbers.IndexOf(number);\n    \
    \        }\n            else {\n                result.Add(max);\n           \
    \     max = number;\n                currentMax = number;\n                currentMaxIndex\
    \ = numbers.IndexOf(number);\n            }\n        }\n        result.Add(max);\n\
    \        return result;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(RollingMax((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L,\
    \ (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new\
    \ long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <7eb4d57ac1f14f4696ca7f1998141fc2>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <7eb4d57ac1f14f4696ca7f1998141fc2>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660008890
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    public\
    \ static List<long> RollingMax(List<long> numbers) {\n        List<long> result\
    \ = new List<long>();\n        long maxValue = numbers.Max();\n        long currentMax\
    \ = maxValue;\n        long currentSum = 0;\n        long currentSumOfSquares\
    \ = 0;\n        long currentSumOfSquareOfDifferences = 0;\n        long currentSumOfSquareOfDifferenceOfDifferences\
    \ = 0;\n        long currentSumOfSquareOfDifferenceOfDifferenceOfDifferences =\
    \ 0;\n        long currentSumOfSquareOfDifferenceOfDifferenceOfDifferenceOfDifferences\
    \ = 0;\n        long currentSumOfSquareOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferences\
    \ = 0;\n        long currentSumOfSquareOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferences\
    \ = 0;\n        long currentSumOfSquareOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferences\
    \ = 0;\n        long currentSumOfSquareOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferences\
    \ = 0;\n        long currentSumOfSquareOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferences\
    \ = 0;\n        long currentSumOfSquareOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferences\
    \ = 0;\n        long currentSumOfSquareOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferences\
    \ = 0;\n        long currentSumOfSquareOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferences\
    \ = 0;\n        long currentSumOfSquareOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferences\
    \ = 0;\n        long currentSumOfSquareOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferences\
    \ = 0;\n        long currentSumOfSquareOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferences\
    \ = 0;\n        long currentSumOfSquareOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferences\
    \ = 0;\n        long currentSumOfSquareOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferences\
    \ = 0;\n        long currentSumOfSquareOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferences\
    \ = 0;\n        long currentSumOfSquareOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferences\
    \ = 0;\n        long currentSumOfSquareOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifference\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(RollingMax((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(RollingMax((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new\
    \ List<long>(new long[]{(long)4L, (long)3L, (long)2L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpdf3xhaiq.cs(36,152): error CS1002: ; expected

    '
  timestamp: 1660008889
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    public\
    \ static List<long> RollingMax(List<long> numbers) {\n        List<long> result\
    \ = new List<long>();\n        long maxValue = numbers.Max();\n        long currentMax\
    \ = maxValue;\n        long currentSum = 0;\n        long currentSumOfSquares\
    \ = 0;\n        long currentSumOfSquaresOfSquares = 0;\n        long currentSumOfSquaresOfSquaresOfSquares\
    \ = 0;\n        long currentSumOfSquaresOfSquaresOfSquaresOfSquares = 0;\n   \
    \     long currentSumOfSquaresOfSquaresOfSquaresOfSquaresOfSquares = 0;\n    \
    \    long currentSumOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquares = 0;\n\
    \        long currentSumOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquares\
    \ = 0;\n        long currentSumOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquares\
    \ = 0;\n        long currentSumOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquares\
    \ = 0;\n        long currentSumOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquares\
    \ = 0;\n        long currentSumOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquares\
    \ = 0;\n        long currentSumOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquares\
    \ = 0;\n        long currentSumOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquares\
    \ = 0;\n        long currentSumOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquares\
    \ = 0;\n        long currentSumOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquares\
    \ = 0;\n        long currentSumOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquares\
    \ = 0;\n        long currentSumOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquares\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(RollingMax((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(RollingMax((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new\
    \ List<long>(new long[]{(long)4L, (long)3L, (long)2L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpwcmpc6ih.cs(32,87): error CS1002: ; expected

    '
  timestamp: 1660008890
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    public\
    \ static List<long> RollingMax(List<long> numbers) {\n        List<long> result\
    \ = new List<long>();\n        long max = 0;\n        long rollingMax = 0;\n \
    \       long rollingMaxIndex = 0;\n        long rollingMaxIndex2 = 0;\n      \
    \  long rollingMaxIndex3 = 0;\n        long rollingMaxIndex4 = 0;\n        long\
    \ rollingMaxIndex5 = 0;\n        long rollingMaxIndex6 = 0;\n        long rollingMaxIndex7\
    \ = 0;\n        long rollingMaxIndex8 = 0;\n        long rollingMaxIndex9 = 0;\n\
    \        long rollingMaxIndex10 = 0;\n        long rollingMaxIndex11 = 0;\n  \
    \      long rollingMaxIndex12 = 0;\n        long rollingMaxIndex13 = 0;\n    \
    \    long rollingMaxIndex14 = 0;\n        long rollingMaxIndex15 = 0;\n      \
    \  long rollingMaxIndex16 = 0;\n        long rollingMaxIndex17 = 0;\n        long\
    \ rollingMaxIndex18 = 0;\n        long rollingMaxIndex19 = 0;\n        long rollingMaxIndex20\
    \ = 0;\n        long rollingMaxIndex21 = 0;\n        long rollingMaxIndex22 =\
    \ 0;\n        long rollingMaxIndex23 = 0;\n        long rollingMaxIndex24 = 0;\n\
    \        long rollingMaxIndex25 = 0;\n        long rollingMaxIndex26 = 0;\n  \
    \      long rollingMaxIndex27 = 0;\n        long rollingMaxIndex28 = 0;\n    \
    \    long rollingMaxIndex29 = 0;\n        long rollingMaxIndex30 = 0;\n      \
    \  long rollingMaxIndex31 = 0;\n        long rollingMaxIndex32 = 0;\n        long\
    \ rollingMaxIndex33 = 0;\n        long rollingMaxIndex34 = 0;\n        long rollingMaxIndex35\
    \ = 0;\n        long rollingMaxIndex36 = 0;\n        long rollingMaxIndex37 =\
    \ 0;\n        long rollingMaxIndex38 = 0;\n        long rollingMaxIndex39 = 0;\n\
    \        long rollingMaxIndex40 = 0;\n        long rollingMaxIndex41 = 0;\n  \
    \      long rollingMaxIndex42 = 0;\n        long rollingMaxIndex43 = 0;\n    \
    \    long rollingMaxIndex44 = 0;\n        long rollingMaxIndex45 = 0;\n      \
    \  long rollingMaxIndex46 = 0;\n        long rollingMaxIndex47 = 0;\n        long\
    \ rollingMaxIndex48 = 0;\n        long rollingMaxIndex49 = 0;\n        long rollingMaxIndex50\
    \ = 0;\n        long rollingMaxIndex51 = 0;\n        long rollingMaxIndex52 =\
    \ 0;\n        long rollingMaxIndex53 = 0;\n        long rollingMaxIndex54 = 0;\n\
    \        long rollingMaxIndex55 = 0;\n\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L,\
    \ (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new\
    \ long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp5_s5lifz.cs(13,14): warning CS0219: The variable ''max'' is assigned but
    its value is never used

    /tmp/tmp5_s5lifz.cs(14,14): warning CS0219: The variable ''rollingMax'' is assigned
    but its value is never used

    /tmp/tmp5_s5lifz.cs(15,14): warning CS0219: The variable ''rollingMaxIndex'' is
    assigned but its value is never used

    /tmp/tmp5_s5lifz.cs(16,14): warning CS0219: The variable ''rollingMaxIndex2''
    is assigned but its value is never used

    /tmp/tmp5_s5lifz.cs(17,14): warning CS0219: The variable ''rollingMaxIndex3''
    is assigned but its value is never used

    /tmp/tmp5_s5lifz.cs(18,14): warning CS0219: The variable ''rollingMaxIndex4''
    is assigned but its value is never used

    /tmp/tmp5_s5lifz.cs(19,14): warning CS0219: The variable ''rollingMaxIndex5''
    is assigned but its value is never used

    /tmp/tmp5_s5lifz.cs(20,14): warning CS0219: The variable ''rollingMaxIndex6''
    is assigned but its value is never used

    /tmp/tmp5_s5lifz.cs(21,14): warning CS0219: The variable ''rollingMaxIndex7''
    is assigned but its value is never used

    /tmp/tmp5_s5lifz.cs(22,14): warning CS0219: The variable ''rollingMaxIndex8''
    is assigned but its value is never used

    /tmp/tmp5_s5lifz.cs(23,14): warning CS0219: The variable ''rollingMaxIndex9''
    is assigned but its value is never used

    /tmp/tmp5_s5lifz.cs(24,14): warning CS0219: The variable ''rollingMaxIndex10''
    is assigned but its value is never used

    /tmp/tmp5_s5lifz.cs(25,14): warning CS0219: The variable ''rollingMaxIndex11''
    is assigned but its value is never used

    /tmp/tmp5_s5lifz.cs(26,14): warning CS0219: The variable ''rollingMaxIndex12''
    is assigned but its value is never used

    /tmp/tmp5_s5lifz.cs(27,14): warning CS0219: The variable ''rollingMaxIndex13''
    is assigned but its value is never used

    /tmp/tmp5_s5lifz.cs(28,14): warning CS0219: The variable ''rollingMaxIndex14''
    is assigned but its value is never used

    /tmp/tmp5_s5lifz.cs(29,14): warning CS0219: The variable ''rollingMaxIndex15''
    is '
  timestamp: 1660008890
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    public\
    \ static List<long> RollingMax(List<long> numbers) {\n        List<long> result\
    \ = new List<long>();\n        long max = 0;\n        long currentMax = 0;\n \
    \       long currentMaxIndex = 0;\n        long currentMaxValue = numbers[0];\n\
    \        long currentMaxValueIndex = numbers.IndexOf(currentMaxValue);\n     \
    \   long currentMaxValueValue = numbers[currentMaxValueIndex];\n        long currentMaxValueValueIndex\
    \ = numbers.IndexOf(currentMaxValueValue);\n        long currentMaxValueValueValue\
    \ = numbers[currentMaxValueValueIndex];\n        long currentMaxValueValueValueIndex\
    \ = numbers.IndexOf(currentMaxValueValueValue);\n        long currentMaxValueValueValueValue\
    \ = numbers[currentMaxValueValueValueIndex];\n        long currentMaxValueValueValueValueIndex\
    \ = numbers.IndexOf(currentMaxValueValueValueValue);\n        long currentMaxValueValueValueValueValue\
    \ = numbers[currentMaxValueValueValueValueIndex];\n        long currentMaxValueValueValueValueIndex\
    \ = numbers.IndexOf(currentMaxValueValueValueValueValue);\n        long currentMaxValueValueValueValueValueIndex\
    \ = numbers.IndexOf(currentMaxValueValueValueValueValue);\n        long currentMaxValueValueValueValueValueIndex\
    \ = numbers.IndexOf(currentMaxValueValueValueValueValue);\n        long currentMaxValueValueValueValueValueIndex\
    \ = numbers.IndexOf(currentMaxValueValueValueValueValue);\n        long currentMaxValueValueValueValueValueIndex\
    \ = numbers.IndexOf(currentMaxValueValueValueValueValue);\n        long currentMaxValueValueValueValueValueValueIndex\
    \ = numbers.IndexOf(currentMaxValueValueValueValueValue);\n        long currentMaxValueValueValueValueValueValueIndex\
    \ = numbers.IndexOf(currentMaxValueValueValueValueValue);\n        long currentMaxValueValueValueValueValueValueIndex\
    \ = numbers.IndexOf(currentMaxValueValueValueValueValue);\n        long currentMaxValueValueValueValueValueValueIndex\
    \ = numbers.IndexOf(currentMaxValueValueValueValueValue);\n        long currentMaxValueValueValueValueValueValueIndex\
    \ = numbers.IndexOf(currentMaxValueValueValueValueValue);\n        long currentMaxValueValueValueValueValueValueIndex\
    \ = numbers.IndexOf(currentMaxValueValueValueValueValue);\n        long currentMaxValueValueValueValueValueValueIndex\
    \ = numbers.IndexOf(currentMaxValueValueValueValueValue);\n        long currentMaxValueValueValueValueValueValueIndex\
    \ = numbers.IndexOf(currentMaxValueValueValueValueValue);\n        long currentMaxValueValueValueValueValueValueIndex\
    \ = numbers.IndexOf(currentMaxValueValueValueValueValue);\n        long currentMaxValueValueValueValueValueValueIndex\
    \ = numbers.IndexOf(currentMaxValueValueValueValueValue);\n        long currentMaxValueValueValueValueValueValueIndex\
    \ = numbers.IndexOf(currentMaxValueValueValueValue\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new\
    \ long[]{(long)4L, (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpx57c5qqe.cs(40,108): error CS1026: ) expected

    /tmp/tmpx57c5qqe.cs(40,108): error CS1002: ; expected

    '
  timestamp: 1660008890
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    public\
    \ static List<long> RollingMax(List<long> numbers) {\n        List<long> result\
    \ = new List<long>();\n        long maxValue = numbers.Max();\n        long currentMaxValue\
    \ = maxValue;\n        long currentMaxIndex = -1;\n        long currentMaxIndexValue\
    \ = numbers.Max();\n        long currentMaxIndexValue = numbers.Max();\n     \
    \   long currentMaxIndexValue = numbers.Max();\n        long currentMaxIndexValue\
    \ = numbers.Max();\n        long currentMaxIndexValue = numbers.Max();\n     \
    \   long currentMaxIndexValue = numbers.Max();\n        long currentMaxIndexValue\
    \ = numbers.Max();\n        long currentMaxIndexValue = numbers.Max();\n     \
    \   long currentMaxIndexValue = numbers.Max();\n        long currentMaxIndexValue\
    \ = numbers.Max();\n        long currentMaxIndexValue = numbers.Max();\n     \
    \   long currentMaxIndexValue = numbers.Max();\n        long currentMaxIndexValue\
    \ = numbers.Max();\n        long currentMaxIndexValue = numbers.Max();\n     \
    \   long currentMaxIndexValue = numbers.Max();\n        long currentMaxIndexValue\
    \ = numbers.Max();\n        long currentMaxIndexValue = numbers.Max();\n     \
    \   long currentMaxIndexValue = numbers.Max();\n        long currentMaxIndexValue\
    \ = numbers.Max();\n        long currentMaxIndexValue = numbers.Max();\n     \
    \   long currentMaxIndexValue = numbers.Max();\n        long currentMaxIndexValue\
    \ = numbers.Max();\n        long currentMaxIndexValue = numbers.Max();\n     \
    \   long currentMaxIndexValue = numbers.Max();\n        long currentMaxIndexValue\
    \ = numbers.Max();\n        long currentMaxIndexValue = numbers.Max();\n     \
    \   long currentMaxIndexValue = numbers.Max();\n        long currentMaxIndexValue\
    \ = numbers.Max();\n        long currentMaxIndexValue = numbers.Max();\n     \
    \   long currentMaxIndexValue = numbers.Max();\n        long currentMaxIndexValue\
    \ = numbers.Max();\n        long currentMaxIndexValue = numbers.Max();\n     \
    \   long currentMaxIndexValue = numbers.Max();\n        long currentMaxIndexValue\
    \ = numbers.Max();\n        long currentMaxIndexValue = numbers.Max();\n     \
    \   long currentMaxIndexValue = numbers.Max();\n        long currentMaxIndexValue\
    \ = numbers.Max();\n        long currentMaxIndexValue = numbers.Max();\n     \
    \   long currentMaxIndexValue = numbers.Max();\n        long currentMaxIndexValue\
    \ = numbers.Max();\n        long currentMaxIndexValue = numbers.Max();\n     \
    \   long currentMaxIndexValue = numbers.Max();\n        long currentMaxIndexValue\
    \ = numbers.Max();\n        long currentMaxIndexValue = numbers.Max();\n     \
    \   long currentMaxIndexValue = numbers.Max();\n        long currentMaxIndexValue\
    \ = numbers.Max();\n        long currentMaxIndexValue = numbers.Max();\n     \
    \   long currentMaxIndexValue = numbers.Max();\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new\
    \ long[]{(long)4L, (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpj1d9zaof.cs(17,14): error CS0128: A local variable or function named ''currentMaxIndexValue''
    is already defined in this scope

    /tmp/tmpj1d9zaof.cs(18,14): error CS0128: A local variable or function named ''currentMaxIndexValue''
    is already defined in this scope

    /tmp/tmpj1d9zaof.cs(19,14): error CS0128: A local variable or function named ''currentMaxIndexValue''
    is already defined in this scope

    /tmp/tmpj1d9zaof.cs(20,14): error CS0128: A local variable or function named ''currentMaxIndexValue''
    is already defined in this scope

    /tmp/tmpj1d9zaof.cs(21,14): error CS0128: A local variable or function named ''currentMaxIndexValue''
    is already defined in this scope

    /tmp/tmpj1d9zaof.cs(22,14): error CS0128: A local variable or function named ''currentMaxIndexValue''
    is already defined in this scope

    /tmp/tmpj1d9zaof.cs(23,14): error CS0128: A local variable or function named ''currentMaxIndexValue''
    is already defined in this scope

    /tmp/tmpj1d9zaof.cs(24,14): error CS0128: A local variable or function named ''currentMaxIndexValue''
    is already defined in this scope

    /tmp/tmpj1d9zaof.cs(25,14): error CS0128: A local variable or function named ''currentMaxIndexValue''
    is already defined in this scope

    /tmp/tmpj1d9zaof.cs(26,14): error CS0128: A local variable or function named ''currentMaxIndexValue''
    is already defined in this scope

    /tmp/tmpj1d9zaof.cs(27,14): error CS0128: A local variable or function named ''currentMaxIndexValue''
    is already defined in this scope

    /tmp/tmpj1d9zaof.cs(28,14): error CS0128: A local variable or function named ''currentMaxIndexValue''
    is already defined in this scope

    /tmp/tmpj1d9zaof.cs(29,14): error CS0128: A local variable or function named ''currentMaxIndexValue''
    is already defined in this scope

    /tmp/tmpj1d9zaof.cs(30,14): error CS0128: A local variable or function named ''currentMaxIndexValue''
    is already defined in this scope

    /tmp/tmpj1d9zaof.cs(31,14): error CS0128: A local variable '
  timestamp: 1660008890
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    public\
    \ static List<long> RollingMax(List<long> numbers) {\n        List<long> result\
    \ = new List<long>();\n        long max = 0;\n        long maxIndex = 0;\n   \
    \     long currentMax = numbers[0];\n        long currentMaxIndex = numbers[0];\n\
    \        foreach (long number in numbers) {\n            if (number > currentMax)\
    \ {\n                currentMax = number;\n                currentMaxIndex = currentMaxIndex;\n\
    \            }\n            if (number == currentMax) {\n                currentMaxIndex++;\n\
    \            }\n            if (currentMaxIndex > maxIndex) {\n              \
    \  max = currentMax;\n                maxIndex = currentMaxIndex;\n          \
    \  }\n            result.Add(number);\n        }\n        result.Add(max);\n \
    \       return result;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(RollingMax((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L,\
    \ (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new\
    \ long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n    }\n\n\
    }\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out\
    \ of range. Must be non-negative and less than the size of the collection.\nParameter\
    \ name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax\
    \ (System.Collections.Generic.List`1[T] numbers) [0x0000d] in <2905c0f6e8a441cdabb9056aaf92bc7d>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <2905c0f6e8a441cdabb9056aaf92bc7d>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index\
    \ was out of range. Must be non-negative and less than the size of the collection.\n\
    Parameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax\
    \ (System.Collections.Generic.List`1[T] numbers) [0x0000d] in <2905c0f6e8a441cdabb9056aaf92bc7d>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <2905c0f6e8a441cdabb9056aaf92bc7d>:0\
    \ \n"
  stdout: ''
  timestamp: 1660008890
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    public\
    \ static List<long> RollingMax(List<long> numbers) {\n        List<long> result\
    \ = new List<long>();\n        long max = 0;\n        long currentMax = 0;\n \
    \       long currentSum = 0;\n        long currentSumOfSquares = 0;\n        long\
    \ currentSumOfSquareOfMax = 0;\n        long currentSumOfSquareOfMaxOfMax = 0;\n\
    \        long currentSumOfSquareOfMaxOfMaxOfMax = 0;\n        long currentSumOfSquareOfMaxOfMaxOfMaxOfMax\
    \ = 0;\n        long currentSumOfSquareOfMaxOfMaxOfMaxOfMaxOfMax = 0;\n      \
    \  long currentSumOfSquareOfMaxOfMaxOfMaxOfMaxOfMaxOfMax = 0;\n        long currentSumOfSquareOfMaxOfMaxOfMaxOfMaxOfMaxOfMaxOfMax\
    \ = 0;\n        long currentSumOfSquareOfMaxOfMaxOfMaxOfMaxOfMaxOfMaxOfMaxOfMax\
    \ = 0;\n        long currentSumOfSquareOfMaxOfMaxOfMaxOfMaxOfMaxOfMaxOfMaxOfMax\
    \ = 0;\n        long currentSumOfSquareOfMaxOfMaxOfMaxOfMaxOfMaxOfMaxOfMaxOfMaxOfMax\
    \ = 0;\n        long currentSumOfSquareOfMaxOfMaxOfMaxOfMaxOfMaxOfMaxOfMaxOfMaxOfMaxOfMax\
    \ = 0;\n        long currentSumOfSquareOfMaxOfMaxOfMaxOfMaxOfMaxOfMaxOfMaxOfMaxOfMaxOfMaxOfMax\
    \ = 0;\n        long currentSumOfSquareOfMaxOfMaxOfMaxOfMaxOfMaxOfMaxOfMaxOfMaxOfMaxOfMaxOfMax\
    \ = 0;\n        long currentSumOfSquareOfMaxOfMaxOfMaxOfMaxOfMaxOfMaxOfMaxOfMaxOfMaxOfMaxOfMaxOfMax\
    \ = 0;\n        long currentSumOfSquareOfMaxOfMaxOfMaxOfMaxOfMaxOfMaxOfMaxOfMaxOfMaxOfMaxOfMaxOfMax\
    \ = 0;\n        long currentSumOfSquareOfMaxOfMaxOfMaxOfMaxOfMaxOfMaxOfMaxOfMaxOfMaxOfMaxOfMaxOfMax\
    \ = 0;\n        long currentSumOfSquareOfMaxOfMaxOfMaxOfMaxOfMaxOfMaxOfMaxOfMaxOfMaxOfMaxOfMaxOfMax\
    \ = 0;\n        long currentSumOfSquareOfMaxOfMaxOfMaxOfMaxOfMaxOfMaxOfMaxOfMaxOfMaxOfMaxOfMaxOfMaxOfMax\
    \ = 0;\n        long currentSumOfSquareOfMaxOfMaxOfMaxOfMaxOfMaxOfMaxOfMaxOfMaxOfMaxOfMaxOfMaxOfMaxOfMax\
    \ = 0;\n        long currentSumOfSquareOf\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L,\
    \ (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new\
    \ long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp6m7k4beu.cs(36,34): error CS1002: ; expected

    '
  timestamp: 1660008889
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    public\
    \ static List<long> RollingMax(List<long> numbers) {\n        List<long> max =\
    \ new List<long>();\n        long maxNumber = 0;\n        long currentMax = 0;\n\
    \        long currentNumber = 0;\n        long currentSum = 0;\n        long currentSumOfSquares\
    \ = 0;\n        long currentSumOfSquareOfNumbers = 0;\n        long currentSumOfSquareOfNumbersOfNumbers\
    \ = 0;\n        long currentSumOfSquareOfNumbersOfNumbersOfNumbers = 0;\n    \
    \    long currentSumOfSquareOfNumbersOfNumbersOfNumbersOfNumbers = 0;\n      \
    \  long currentSumOfSquareOfNumbersOfNumbersOfNumbersOfNumbersOfNumbers = 0;\n\
    \        long currentSumOfSquareOfNumbersOfNumbersOfNumbersOfNumbersOfNumbersOfNumbers\
    \ = 0;\n        long currentSumOfSquareOfNumbersOfNumbersOfNumbersOfNumbersOfNumbersOfNumbersOfNumbers\
    \ = 0;\n        long currentSumOfSquareOfNumbersOfNumbersOfNumbersOfNumbersOfNumbersOfNumbersOfNumbers\
    \ = 0;\n        long currentSumOfSquareOfNumbersOfNumbersOfNumbersOfNumbersOfNumbersOfNumbersOfNumbersOfNumbers\
    \ = 0;\n        long currentSumOfSquareOfNumbersOfNumbersOfNumbersOfNumbersOfNumbersOfNumbersOfNumbersOfNumbersOfNumbers\
    \ = 0;\n        long currentSumOfSquareOfNumbersOfNumbersOfNumbersOfNumbersOfNumbersOfNumbersOfNumbersOfNumbersOfNumbersOfNumbers\
    \ = 0;\n        long currentSumOfSquareOfNumbersOfNumbersOfNumbersOfNumbersOfNumbersOfNumbersOfNumbersOfNumbersOfNumbersOfNumbersOfNumbers\
    \ = 0;\n        long currentSumOfSquareOfNumbersOfNumbersOfNumbersOfNumbersOfNumbersOfNumbersOfNumbersOfNumbersOfNumbersOfNumbersOfNumbersOfNumbers\
    \ = 0;\n        long currentSumOfSquareOfNumbersOfNumbersOfNumbersOfNumbersOfNumbersOfNumbersOfNumbersOfNumbersOfNumbersOfNumbersOfNumbersOfNumbers\
    \ = 0;\n        long currentSumOfSquareOfNumbersOfNumbersOfNumbersOfNumbersOfNumbersOfNumbersOfNumbersOfNumbersOfNumbersOfNumbersOfNumbersOfNumbersOfNumbers\
    \ = 0;\n        long currentSumOfSquareOfNumbersOfNumbersOfNumbersOfNumbersOfNumbersOfNumbersOfNumbersOfNumbersOfNumbersOfNumber\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(RollingMax((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(RollingMax((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new\
    \ List<long>(new long[]{(long)4L, (long)3L, (long)2L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmphczi5qt9.cs(33,121): error CS1002: ; expected

    '
  timestamp: 1660008890
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    public\
    \ static List<long> RollingMax(List<long> numbers) {\n        List<long> result\
    \ = new List<long>();\n        long maxValue = numbers.Max();\n        long currentMax\
    \ = maxValue;\n        long currentMaxIndex = 0;\n        long currentMaxIndex2\
    \ = 0;\n        long currentMaxIndex3 = 0;\n        long currentMaxIndex4 = 0;\n\
    \        long currentMaxIndex5 = 0;\n        long currentMaxIndex6 = 0;\n    \
    \    long currentMaxIndex7 = 0;\n        long currentMaxIndex8 = 0;\n        long\
    \ currentMaxIndex9 = 0;\n        long currentMaxIndex10 = 0;\n        long currentMaxIndex11\
    \ = 0;\n        long currentMaxIndex12 = 0;\n        long currentMaxIndex13 =\
    \ 0;\n        long currentMaxIndex14 = 0;\n        long currentMaxIndex15 = 0;\n\
    \        long currentMaxIndex16 = 0;\n        long currentMaxIndex17 = 0;\n  \
    \      long currentMaxIndex18 = 0;\n        long currentMaxIndex19 = 0;\n    \
    \    long currentMaxIndex20 = 0;\n        long currentMaxIndex21 = 0;\n      \
    \  long currentMaxIndex22 = 0;\n        long currentMaxIndex23 = 0;\n        long\
    \ currentMaxIndex24 = 0;\n        long currentMaxIndex25 = 0;\n        long currentMaxIndex26\
    \ = 0;\n        long currentMaxIndex27 = 0;\n        long currentMaxIndex28 =\
    \ 0;\n        long currentMaxIndex29 = 0;\n        long currentMaxIndex30 = 0;\n\
    \        long currentMaxIndex31 = 0;\n        long currentMaxIndex32 = 0;\n  \
    \      long currentMaxIndex33 = 0;\n        long currentMaxIndex34 = 0;\n    \
    \    long currentMaxIndex35 = 0;\n        long currentMaxIndex36 = 0;\n      \
    \  long currentMaxIndex37 = 0;\n        long currentMaxIndex38 = 0;\n        long\
    \ currentMaxIndex39 = 0;\n        long currentMaxIndex40 = 0;\n        long currentMaxIndex41\
    \ = 0;\n        long currentMaxIndex42 = 0;\n        long currentMaxIndex43 =\
    \ 0;\n        long currentMaxIndex44 = 0;\n        long currentMaxIndex45 = 0;\n\
    \        long currentMaxIndex46 = 0;\n        long currentMaxIndex47 = 0;\n  \
    \      long currentMaxIndex48 = 0;\n        long currentMaxIndex49 = 0;\n    \
    \    long currentMaxIndex50 = 0;\n        long currentMaxIndex51 = 0;\n      \
    \  long currentMaxIndex52 = 0;\n        long currentMaxIndex53 = 0;\n        long\
    \ currentMaxIndex54 = 0;\n        long currentMaxIndex55 = 0;\n        long currentMaxIndex56\
    \ = 0;\n        long currentMaxIndex57 = 0;\n        long currentMaxIndex58 =\
    \ 0;\n        long currentMaxIndex59 = 0;\n        long currentMaxIndex60 = 0;\n\
    \        long currentMaxIndex61 = 0;\n        long current\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new\
    \ long[]{(long)4L, (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmphd0j6__f.cs(76,21): error CS1002: ; expected

    '
  timestamp: 1660008889
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    public\
    \ static List<long> RollingMax(List<long> numbers) {\n        List<long> result\
    \ = new List<long>();\n        long maxValue = numbers.Max();\n        long currentMax\
    \ = maxValue;\n        long currentMaxIndex = 0;\n        long currentMaxIndexValue\
    \ = 0;\n        long currentMaxIndexValue2 = 0;\n        long currentMaxIndexValue3\
    \ = 0;\n        long currentMaxIndexValue4 = 0;\n        long currentMaxIndexValue5\
    \ = 0;\n        long currentMaxIndexValue6 = 0;\n        long currentMaxIndexValue7\
    \ = 0;\n        long currentMaxIndexValue8 = 0;\n        long currentMaxIndexValue9\
    \ = 0;\n        long currentMaxIndexValue10 = 0;\n        long currentMaxIndexValue11\
    \ = 0;\n        long currentMaxIndexValue12 = 0;\n        long currentMaxIndexValue13\
    \ = 0;\n        long currentMaxIndexValue14 = 0;\n        long currentMaxIndexValue15\
    \ = 0;\n        long currentMaxIndexValue16 = 0;\n        long currentMaxIndexValue17\
    \ = 0;\n        long currentMaxIndexValue18 = 0;\n        long currentMaxIndexValue19\
    \ = 0;\n        long currentMaxIndexValue20 = 0;\n        long currentMaxIndexValue21\
    \ = 0;\n        long currentMaxIndexValue22 = 0;\n        long currentMaxIndexValue23\
    \ = 0;\n        long currentMaxIndexValue24 = 0;\n        long currentMaxIndexValue25\
    \ = 0;\n        long currentMaxIndexValue26 = 0;\n        long currentMaxIndexValue27\
    \ = 0;\n        long currentMaxIndexValue28 = 0;\n        long currentMaxIndexValue29\
    \ = 0;\n        long currentMaxIndexValue30 = 0;\n        long currentMaxIndexValue31\
    \ = 0;\n        long currentMaxIndexValue32 = 0;\n        long currentMaxIndexValue33\
    \ = 0;\n        long currentMaxIndexValue34 = 0;\n        long currentMaxIndexValue35\
    \ = 0;\n        long currentMaxIndexValue36 = 0;\n        long currentMaxIndexValue37\
    \ = 0;\n        long currentMaxIndexValue38 = 0;\n        long currentMaxIndexValue39\
    \ = 0;\n        long currentMaxIndexValue40 = 0;\n        long currentMaxIndexValue41\
    \ = 0;\n        long currentMaxIndexValue42 = 0;\n        long currentMaxIndexValue43\
    \ = 0;\n        long currentMaxIndexValue44 = 0;\n        long currentMaxIndexValue45\
    \ = 0;\n        long currentMaxIndexValue46 = 0;\n        long currentMaxIndexValue47\
    \ = 0;\n        long currentMaxIndexValue48 = 0;\n        long currentMaxIndexValue49\
    \ = 0;\n        long currentMaxIndexValue50 = 0;\n        long currentMaxIndexValue51\
    \ = 0;\n        long currentMaxIndexValue52 = 0;\n        long currentMaxIndexValue53\
    \ = 0;\n        long currentMaxIndexValue54\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L,\
    \ (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new\
    \ long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp0ues37ym.cs(69,36): error CS1002: ; expected

    '
  timestamp: 1660008889
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    public\
    \ static List<long> RollingMax(List<long> numbers) {\n        List<long> result\
    \ = new List<long>();\n        long max = 0;\n        long cur = 0;\n        foreach\
    \ (long n in numbers) {\n            if (n > max) {\n                max = n;\n\
    \                cur = n;\n            }\n            else if (n == max) {\n \
    \               cur += n;\n            }\n            else {\n               \
    \ result.Add(cur);\n                max = n;\n                cur = n;\n     \
    \       }\n        }\n        result.Add(max);\n        return result;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(RollingMax((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(RollingMax((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new\
    \ List<long>(new long[]{(long)4L, (long)3L, (long)2L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <6d1858d59a9744c4a8b87dabf6692b39>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <6d1858d59a9744c4a8b87dabf6692b39>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660008890
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    public\
    \ static List<long> RollingMax(List<long> numbers) {\n        List<long> result\
    \ = new List<long>();\n        long max = 0;\n        long currentMax = 0;\n \
    \       long currentMaxIndex = 0;\n        long currentMaxValue = 0;\n       \
    \ long currentMaxValueIndex = 0;\n        long currentMaxValueValue = 0;\n   \
    \     long currentMaxValueValueIndex = 0;\n        long currentMaxValueValueValue\
    \ = 0;\n        long currentMaxValueValueValueIndex = 0;\n        long currentMaxValueValueValueValue\
    \ = 0;\n        long currentMaxValueValueValueIndexValue = 0;\n        long currentMaxValueValueValueValue\
    \ = 0;\n        long currentMaxValueValueValueIndexValue = 0;\n        long currentMaxValueValueValueValue\
    \ = 0;\n        long currentMaxValueValueValueIndexValue = 0;\n        long currentMaxValueValueValueValue\
    \ = 0;\n        long currentMaxValueValueValueIndexValue = 0;\n        long currentMaxValueValueValueValue\
    \ = 0;\n        long currentMaxValueValueValueIndexValue = 0;\n        long currentMaxValueValueValueValue\
    \ = 0;\n        long currentMaxValueValueValueIndexValue = 0;\n        long currentMaxValueValueValueValue\
    \ = 0;\n        long currentMaxValueValueValueIndexValue = 0;\n        long currentMaxValueValueValueValue\
    \ = 0;\n        long currentMaxValueValueValueIndexValue = 0;\n        long currentMaxValueValueValueValue\
    \ = 0;\n        long currentMaxValueValueValueIndexValue = 0;\n        long currentMaxValueValueValueValue\
    \ = 0;\n        long currentMaxValueValueValueIndexValue = 0;\n        long currentMaxValueValueValueValue\
    \ = 0;\n        long currentMaxValueValueValueIndexValue = 0;\n        long currentMaxValueValueValueValue\
    \ = 0;\n        long currentMaxValueValueValueIndexValue = 0;\n        long currentMaxValueValueValueValue\
    \ = 0;\n        long currentMaxValueValueValueIndexValue = 0;\n        long currentMaxValueValueValueValue\
    \ = 0;\n        long currentMaxValueValueValueIndexValue = 0;\n        long currentMaxValueValueValueValue\
    \ = 0;\n        long currentMaxValueValueValueIndexValue = 0;\n        long currentMaxValueValueValueValue\
    \ = 0;\n        long currentMaxValueValueValueIndexValue = 0;\n        long currentMaxValueValueValueValue\
    \ = 0;\n        long currentMaxValueValueValueIndexValue = 0;\n        long currentMaxValueValueValueValue\
    \ = 0;\n        long currentMaxValueValueValueIndexValue = 0;\n        long currentMaxValueValueValueValue\
    \ = 0;\n        long currentMaxValueValueValueIndexValue = 0;\n        long currentMaxValueValueValueValue\
    \ = 0;\n        long currentMaxValueValueValueIndexValue = 0;\n        long currentMaxValueValueValueValue\
    \ = 0;\n        long current\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L,\
    \ (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new\
    \ long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpvxn7bfe1.cs(63,21): error CS1002: ; expected

    '
  timestamp: 1660008889
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    public\
    \ static List<long> RollingMax(List<long> numbers) {\n        List<long> result\
    \ = new List<long>();\n        long maxValue = numbers.Max();\n        long currentMax\
    \ = maxValue;\n        long currentMaxIndex = 0;\n        long currentMaxIndexValue\
    \ = 0;\n        long currentMaxIndexValue2 = 0;\n        long currentMaxIndexValue3\
    \ = 0;\n        long currentMaxIndexValue4 = 0;\n        long currentMaxIndexValue5\
    \ = 0;\n        long currentMaxIndexValue6 = 0;\n        long currentMaxIndexValue7\
    \ = 0;\n        long currentMaxIndexValue8 = 0;\n        long currentMaxIndexValue9\
    \ = 0;\n        long currentMaxIndexValue10 = 0;\n        long currentMaxIndexValue11\
    \ = 0;\n        long currentMaxIndexValue12 = 0;\n        long currentMaxIndexValue13\
    \ = 0;\n        long currentMaxIndexValue14 = 0;\n        long currentMaxIndexValue15\
    \ = 0;\n        long currentMaxIndexValue16 = 0;\n        long currentMaxIndexValue17\
    \ = 0;\n        long currentMaxIndexValue18 = 0;\n        long currentMaxIndexValue19\
    \ = 0;\n        long currentMaxIndexValue20 = 0;\n        long currentMaxIndexValue21\
    \ = 0;\n        long currentMaxIndexValue22 = 0;\n        long currentMaxIndexValue23\
    \ = 0;\n        long currentMaxIndexValue24 = 0;\n        long currentMaxIndexValue25\
    \ = 0;\n        long currentMaxIndexValue26 = 0;\n        long currentMaxIndexValue27\
    \ = 0;\n        long currentMaxIndexValue28 = 0;\n        long currentMaxIndexValue29\
    \ = 0;\n        long currentMaxIndexValue30 = 0;\n        long currentMaxIndexValue31\
    \ = 0;\n        long currentMaxIndexValue32 = 0;\n        long currentMaxIndexValue33\
    \ = 0;\n        long currentMaxIndexValue34 = 0;\n        long currentMaxIndexValue35\
    \ = 0;\n        long currentMaxIndexValue36 = 0;\n        long currentMaxIndexValue37\
    \ = 0;\n        long currentMaxIndexValue38 = 0;\n        long currentMaxIndexValue39\
    \ = 0;\n        long currentMaxIndexValue40 = 0;\n        long currentMaxIndexValue41\
    \ = 0;\n        long currentMaxIndexValue42 = 0;\n        long currentMaxIndexValue43\
    \ = 0;\n        long currentMaxIndexValue44 = 0;\n        long currentMaxIndexValue45\
    \ = 0;\n        long currentMaxIndexValue46 = 0;\n        long currentMaxIndexValue47\
    \ = 0;\n        long currentMaxIndexValue48 = 0;\n        long currentMaxIndexValue49\
    \ = 0;\n        long currentMaxIndexValue50 = 0;\n        long currentMaxIndexValue51\
    \ = 0;\n        long currentMaxIndexValue52 = 0;\n        long currentMaxIndexValue53\
    \ = 0;\n        long currentMaxIndexValue54\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L,\
    \ (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new\
    \ long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp0ues37ym.cs(69,36): error CS1002: ; expected

    '
  timestamp: 1660008889
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    public\
    \ static List<long> RollingMax(List<long> numbers) {\n        List<long> max =\
    \ new List<long>();\n        long maxValue = numbers.Max();\n        long currentMax\
    \ = maxValue;\n        long currentMaxIndex = 0;\n        long currentMaxIndexValue\
    \ = 0;\n        long currentMaxIndexValue2 = 0;\n        long currentMaxIndexValue3\
    \ = 0;\n        long currentMaxIndexValue4 = 0;\n        long currentMaxIndexValue5\
    \ = 0;\n        long currentMaxIndexValue6 = 0;\n        long currentMaxIndexValue7\
    \ = 0;\n        long currentMaxIndexValue8 = 0;\n        long currentMaxIndexValue9\
    \ = 0;\n        long currentMaxIndexValue10 = 0;\n        long currentMaxIndexValue11\
    \ = 0;\n        long currentMaxIndexValue12 = 0;\n        long currentMaxIndexValue13\
    \ = 0;\n        long currentMaxIndexValue14 = 0;\n        long currentMaxIndexValue15\
    \ = 0;\n        long currentMaxIndexValue16 = 0;\n        long currentMaxIndexValue17\
    \ = 0;\n        long currentMaxIndexValue18 = 0;\n        long currentMaxIndexValue19\
    \ = 0;\n        long currentMaxIndexValue20 = 0;\n        long currentMaxIndexValue21\
    \ = 0;\n        long currentMaxIndexValue22 = 0;\n        long currentMaxIndexValue23\
    \ = 0;\n        long currentMaxIndexValue24 = 0;\n        long currentMaxIndexValue25\
    \ = 0;\n        long currentMaxIndexValue26 = 0;\n        long currentMaxIndexValue27\
    \ = 0;\n        long currentMaxIndexValue28 = 0;\n        long currentMaxIndexValue29\
    \ = 0;\n        long currentMaxIndexValue30 = 0;\n        long currentMaxIndexValue31\
    \ = 0;\n        long currentMaxIndexValue32 = 0;\n        long currentMaxIndexValue33\
    \ = 0;\n        long currentMaxIndexValue34 = 0;\n        long currentMaxIndexValue35\
    \ = 0;\n        long currentMaxIndexValue36 = 0;\n        long currentMaxIndexValue37\
    \ = 0;\n        long currentMaxIndexValue38 = 0;\n        long currentMaxIndexValue39\
    \ = 0;\n        long currentMaxIndexValue40 = 0;\n        long currentMaxIndexValue41\
    \ = 0;\n        long currentMaxIndexValue42 = 0;\n        long currentMaxIndexValue43\
    \ = 0;\n        long currentMaxIndexValue44 = 0;\n        long currentMaxIndexValue45\
    \ = 0;\n        long currentMaxIndexValue46 = 0;\n        long currentMaxIndexValue47\
    \ = 0;\n        long currentMaxIndexValue48 = 0;\n        long currentMaxIndexValue49\
    \ = 0;\n        long currentMaxIndexValue50 = 0;\n        long currentMaxIndexValue51\
    \ = 0;\n        long currentMaxIndexValue52 = 0;\n        long currentMaxIndexValue53\
    \ = 0;\n        long currentMaxIndexValue54\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L,\
    \ (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new\
    \ long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpcj81lryj.cs(69,36): error CS1002: ; expected

    '
  timestamp: 1660008889
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    public\
    \ static List<long> RollingMax(List<long> numbers) {\n        List<long> result\
    \ = new List<long>();\n        long maxValue = numbers.Max();\n        long currentMax\
    \ = maxValue;\n        long currentMaxIndex = 0;\n        long currentMaxIndexValue\
    \ = 0;\n        long currentMaxIndexValue2 = 0;\n        long currentMaxIndexValue3\
    \ = 0;\n        long currentMaxIndexValue4 = 0;\n        long currentMaxIndexValue5\
    \ = 0;\n        long currentMaxIndexValue6 = 0;\n        long currentMaxIndexValue7\
    \ = 0;\n        long currentMaxIndexValue8 = 0;\n        long currentMaxIndexValue9\
    \ = 0;\n        long currentMaxIndexValue10 = 0;\n        long currentMaxIndexValue11\
    \ = 0;\n        long currentMaxIndexValue12 = 0;\n        long currentMaxIndexValue13\
    \ = 0;\n        long currentMaxIndexValue14 = 0;\n        long currentMaxIndexValue15\
    \ = 0;\n        long currentMaxIndexValue16 = 0;\n        long currentMaxIndexValue17\
    \ = 0;\n        long currentMaxIndexValue18 = 0;\n        long currentMaxIndexValue19\
    \ = 0;\n        long currentMaxIndexValue20 = 0;\n        long currentMaxIndexValue21\
    \ = 0;\n        long currentMaxIndexValue22 = 0;\n        long currentMaxIndexValue23\
    \ = 0;\n        long currentMaxIndexValue24 = 0;\n        long currentMaxIndexValue25\
    \ = 0;\n        long currentMaxIndexValue26 = 0;\n        long currentMaxIndexValue27\
    \ = 0;\n        long currentMaxIndexValue28 = 0;\n        long currentMaxIndexValue29\
    \ = 0;\n        long currentMaxIndexValue30 = 0;\n        long currentMaxIndexValue31\
    \ = 0;\n        long currentMaxIndexValue32 = 0;\n        long currentMaxIndexValue33\
    \ = 0;\n        long currentMaxIndexValue34 = 0;\n        long currentMaxIndexValue35\
    \ = 0;\n        long currentMaxIndexValue36 = 0;\n        long currentMaxIndexValue37\
    \ = 0;\n        long currentMaxIndexValue38 = 0;\n        long currentMaxIndexValue39\
    \ = 0;\n        long currentMaxIndexValue40 = 0;\n        long currentMaxIndexValue41\
    \ = 0;\n        long currentMaxIndexValue42 = 0;\n        long currentMaxIndexValue43\
    \ = 0;\n        long currentMaxIndexValue44 = 0;\n        long currentMaxIndexValue45\
    \ = 0;\n        long currentMaxIndexValue46 = 0;\n        long currentMaxIndexValue47\
    \ = 0;\n        long currentMaxIndexValue48 = 0;\n        long currentMaxIndexValue49\
    \ = 0;\n        long currentMaxIndexValue50 = 0;\n        long currentMaxIndexValue51\
    \ = 0;\n        long currentMaxIndexValue52 = 0;\n        long currentMaxIndexValue53\
    \ = 0;\n        long currentMaxIndexValue54\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L,\
    \ (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new\
    \ long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp0ues37ym.cs(69,36): error CS1002: ; expected

    '
  timestamp: 1660008889
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    public\
    \ static List<long> RollingMax(List<long> numbers) {\n        List<long> result\
    \ = new List<long>();\n        long maxValue = numbers.Max();\n        long currentMax\
    \ = maxValue;\n        long currentSum = 0;\n        long currentSumOfSquares\
    \ = 0;\n        long currentSumOfSquaresOfSquares = 0;\n        long currentSumOfSquaresOfSquaresOfSquares\
    \ = 0;\n        long currentSumOfSquaresOfSquaresOfSquaresOfSquares = 0;\n   \
    \     long currentSumOfSquaresOfSquaresOfSquaresOfSquaresOfSquares = 0;\n    \
    \    long currentSumOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquares = 0;\n\
    \        long currentSumOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquares\
    \ = 0;\n        long currentSumOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquares\
    \ = 0;\n        long currentSumOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquares\
    \ = 0;\n        long currentSumOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquares\
    \ = 0;\n        long currentSumOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquares\
    \ = 0;\n        long currentSumOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquares\
    \ = 0;\n        long currentSumOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquares\
    \ = 0;\n        long currentSumOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquares\
    \ = 0;\n        long currentSumOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquares\
    \ = 0;\n        long currentSumOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquares\
    \ = 0;\n        long currentSumOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquares\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(RollingMax((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(RollingMax((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new\
    \ List<long>(new long[]{(long)4L, (long)3L, (long)2L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpwcmpc6ih.cs(32,87): error CS1002: ; expected

    '
  timestamp: 1660008890
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    public\
    \ static List<long> RollingMax(List<long> numbers) {\n        List<long> result\
    \ = new List<long>();\n        long max = 0;\n        long maxIndex = 0;\n   \
    \     long currentMax = numbers.First();\n        long currentMaxIndex = numbers.First();\n\
    \        foreach (long number in numbers) {\n            if (number > currentMax)\
    \ {\n                currentMax = number;\n                currentMaxIndex = currentMaxIndex;\n\
    \            }\n            if (number == currentMax) {\n                result.Add(currentMax);\n\
    \                currentMax = number;\n                currentMaxIndex = currentMaxIndex;\n\
    \            }\n            if (number > max) {\n                max = number;\n\
    \                maxIndex = currentMaxIndex;\n            }\n        }\n     \
    \   result.Add(max);\n        result.Add(maxIndex);\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(RollingMax((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(RollingMax((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new\
    \ List<long>(new long[]{(long)4L, (long)3L, (long)2L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.InvalidOperationException: Sequence contains\
    \ no elements\n  at System.Linq.Enumerable.First[TSource] (System.Collections.Generic.IEnumerable`1[T]\
    \ source) [0x00010] in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem.RollingMax\
    \ (System.Collections.Generic.List`1[T] numbers) [0x0000d] in <49db430b09db48c1bb8bd86f2671830c>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <49db430b09db48c1bb8bd86f2671830c>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.InvalidOperationException: Sequence\
    \ contains no elements\n  at System.Linq.Enumerable.First[TSource] (System.Collections.Generic.IEnumerable`1[T]\
    \ source) [0x00010] in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem.RollingMax\
    \ (System.Collections.Generic.List`1[T] numbers) [0x0000d] in <49db430b09db48c1bb8bd86f2671830c>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <49db430b09db48c1bb8bd86f2671830c>:0\
    \ \n"
  stdout: ''
  timestamp: 1660008890
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    public\
    \ static List<long> RollingMax(List<long> numbers) {\n        List<long> result\
    \ = new List<long>();\n        long max = 0;\n        long currentMax = 0;\n \
    \       long currentNumber = 0;\n        long rollingMax = 0;\n        long rollingMaxCount\
    \ = 0;\n        long rollingMaxCount2 = 0;\n        long rollingMaxCount3 = 0;\n\
    \        long rollingMaxCount4 = 0;\n        long rollingMaxCount5 = 0;\n    \
    \    long rollingMaxCount6 = 0;\n        long rollingMaxCount7 = 0;\n        long\
    \ rollingMaxCount8 = 0;\n        long rollingMaxCount9 = 0;\n        long rollingMaxCount10\
    \ = 0;\n        long rollingMaxCount11 = 0;\n        long rollingMaxCount12 =\
    \ 0;\n        long rollingMaxCount13 = 0;\n        long rollingMaxCount14 = 0;\n\
    \        long rollingMaxCount15 = 0;\n        long rollingMaxCount16 = 0;\n  \
    \      long rollingMaxCount17 = 0;\n        long rollingMaxCount18 = 0;\n    \
    \    long rollingMaxCount19 = 0;\n        long rollingMaxCount20 = 0;\n      \
    \  long rollingMaxCount21 = 0;\n        long rollingMaxCount22 = 0;\n        long\
    \ rollingMaxCount23 = 0;\n        long rollingMaxCount24 = 0;\n        long rollingMaxCount25\
    \ = 0;\n        long rollingMaxCount26 = 0;\n        long rollingMaxCount27 =\
    \ 0;\n        long rollingMaxCount28 = 0;\n        long rollingMaxCount29 = 0;\n\
    \        long rollingMaxCount30 = 0;\n        long rollingMaxCount31 = 0;\n  \
    \      long rollingMaxCount32 = 0;\n        long rollingMaxCount33 = 0;\n    \
    \    long rollingMaxCount34 = 0;\n        long rollingMaxCount35 = 0;\n      \
    \  long rollingMaxCount36 = 0;\n        long rollingMaxCount37 = 0;\n        long\
    \ rollingMaxCount38 = 0;\n        long rollingMaxCount39 = 0;\n        long rollingMaxCount40\
    \ = 0;\n        long rollingMaxCount41 = 0;\n        long rollingMaxCount42 =\
    \ 0;\n        long rollingMaxCount43 = 0;\n        long rollingMaxCount44 = 0;\n\
    \        long rollingMaxCount45 = 0;\n        long rollingMaxCount46 = 0;\n  \
    \      long rollingMaxCount47 = 0;\n        long rollingMaxCount48 = 0;\n    \
    \    long rollingMaxCount49 = 0;\n        long rollingMaxCount50 = 0;\n      \
    \  long rollingMaxCount51 = 0;\n        long rollingMaxCount52 = 0;\n        long\
    \ rollingMaxCount53 = 0;\n        long rollingMaxCount\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new\
    \ long[]{(long)4L, (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpy9oii6wh.cs(70,29): error CS1002: ; expected

    '
  timestamp: 1660008890
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    public\
    \ static List<long> RollingMax(List<long> numbers) {\n        List<long> result\
    \ = new List<long>();\n        long maxValue = numbers.Max();\n        long currentMax\
    \ = maxValue;\n        long currentMaxIndex = 0;\n        long currentMaxIndexValue\
    \ = 0;\n        long currentMaxIndexValue2 = 0;\n        long currentMaxIndexValue3\
    \ = 0;\n        long currentMaxIndexValue4 = 0;\n        long currentMaxIndexValue5\
    \ = 0;\n        long currentMaxIndexValue6 = 0;\n        long currentMaxIndexValue7\
    \ = 0;\n        long currentMaxIndexValue8 = 0;\n        long currentMaxIndexValue9\
    \ = 0;\n        long currentMaxIndexValue10 = 0;\n        long currentMaxIndexValue11\
    \ = 0;\n        long currentMaxIndexValue12 = 0;\n        long currentMaxIndexValue13\
    \ = 0;\n        long currentMaxIndexValue14 = 0;\n        long currentMaxIndexValue15\
    \ = 0;\n        long currentMaxIndexValue16 = 0;\n        long currentMaxIndexValue17\
    \ = 0;\n        long currentMaxIndexValue18 = 0;\n        long currentMaxIndexValue19\
    \ = 0;\n        long currentMaxIndexValue20 = 0;\n        long currentMaxIndexValue21\
    \ = 0;\n        long currentMaxIndexValue22 = 0;\n        long currentMaxIndexValue23\
    \ = 0;\n        long currentMaxIndexValue24 = 0;\n        long currentMaxIndexValue25\
    \ = 0;\n        long currentMaxIndexValue26 = 0;\n        long currentMaxIndexValue27\
    \ = 0;\n        long currentMaxIndexValue28 = 0;\n        long currentMaxIndexValue29\
    \ = 0;\n        long currentMaxIndexValue30 = 0;\n        long currentMaxIndexValue31\
    \ = 0;\n        long currentMaxIndexValue32 = 0;\n        long currentMaxIndexValue33\
    \ = 0;\n        long currentMaxIndexValue34 = 0;\n        long currentMaxIndexValue35\
    \ = 0;\n        long currentMaxIndexValue36 = 0;\n        long currentMaxIndexValue37\
    \ = 0;\n        long currentMaxIndexValue38 = 0;\n        long currentMaxIndexValue39\
    \ = 0;\n        long currentMaxIndexValue40 = 0;\n        long currentMaxIndexValue41\
    \ = 0;\n        long currentMaxIndexValue42 = 0;\n        long currentMaxIndexValue43\
    \ = 0;\n        long currentMaxIndexValue44 = 0;\n        long currentMaxIndexValue45\
    \ = 0;\n        long currentMaxIndexValue46 = 0;\n        long currentMaxIndexValue47\
    \ = 0;\n        long currentMaxIndexValue48 = 0;\n        long currentMaxIndexValue49\
    \ = 0;\n        long currentMaxIndexValue50 = 0;\n        long currentMaxIndexValue51\
    \ = 0;\n        long currentMaxIndexValue52 = 0;\n        long currentMaxIndexValue53\
    \ = 0;\n        long currentMaxIndexValue54\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L,\
    \ (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new\
    \ long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp0ues37ym.cs(69,36): error CS1002: ; expected

    '
  timestamp: 1660008889
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    public\
    \ static List<long> RollingMax(List<long> numbers) {\n        List<long> result\
    \ = new List<long>();\n        long max = 0;\n        long cur = numbers.First();\n\
    \        long curMax = cur;\n        foreach (long n in numbers) {\n         \
    \   if (n > cur) {\n                curMax = cur;\n                cur = n;\n\
    \            }\n            if (n > max) {\n                max = n;\n       \
    \     }\n            if (n == cur) {\n                result.Add(curMax);\n  \
    \          }\n        }\n        return result;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new\
    \ long[]{(long)4L, (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.InvalidOperationException: Sequence contains\
    \ no elements\n  at System.Linq.Enumerable.First[TSource] (System.Collections.Generic.IEnumerable`1[T]\
    \ source) [0x00010] in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem.RollingMax\
    \ (System.Collections.Generic.List`1[T] numbers) [0x0000a] in <0621983a2d714aa0b2aa859409248d27>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <0621983a2d714aa0b2aa859409248d27>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.InvalidOperationException: Sequence\
    \ contains no elements\n  at System.Linq.Enumerable.First[TSource] (System.Collections.Generic.IEnumerable`1[T]\
    \ source) [0x00010] in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem.RollingMax\
    \ (System.Collections.Generic.List`1[T] numbers) [0x0000a] in <0621983a2d714aa0b2aa859409248d27>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <0621983a2d714aa0b2aa859409248d27>:0\
    \ \n"
  stdout: ''
  timestamp: 1660008890
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    public\
    \ static List<long> RollingMax(List<long> numbers) {\n        List<long> max =\
    \ new List<long>();\n        long maxValue = numbers.Max();\n        long currentMax\
    \ = maxValue;\n        long currentMaxIndex = 0;\n        foreach (long number\
    \ in numbers) {\n            currentMax = number;\n            currentMaxIndex\
    \ = 0;\n            while (currentMax < maxValue) {\n                currentMaxIndex++;\n\
    \                currentMax = numbers.ElementAt(currentMaxIndex);\n          \
    \  }\n            max.Add(currentMax);\n        }\n        return max;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(RollingMax((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(RollingMax((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new\
    \ List<long>(new long[]{(long)4L, (long)3L, (long)2L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpwnar6eef.cs(21,48): error CS1503: Argument 2: cannot convert from ''long''
    to ''int''

    '
  timestamp: 1660008890
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    public\
    \ static List<long> RollingMax(List<long> numbers) {\n        List<long> result\
    \ = new List<long>();\n        long max = 0;\n        long currentMax = 0;\n \
    \       long currentNumber = 0;\n        long lastNumber = 0;\n        long lastMax\
    \ = 0;\n        foreach (long number in numbers) {\n            if (number > currentMax)\
    \ {\n                currentMax = number;\n                lastMax = currentMax;\n\
    \            }\n            if (number > currentNumber) {\n                currentNumber\
    \ = number;\n                lastNumber = currentNumber;\n            }\n    \
    \        if (number > max) {\n                max = number;\n            }\n \
    \           result.Add(number);\n        }\n        if (lastNumber > currentNumber)\
    \ {\n            result.Add(lastNumber);\n        }\n        if (lastMax > currentMax)\
    \ {\n            result.Add(lastMax);\n        }\n        if (result.Count > 1)\
    \ {\n            long maxIndex = result.Count - 1;\n            long maxValue\
    \ = result[0];\n            long maxCount = 0;\n            for (int i = 1; i\
    \ < result.Count; i++) {\n                if (result[i] > maxValue) {\n      \
    \              maxValue = result[i];\n                    maxCount = i;\n    \
    \            }\n            }\n            while (maxCount > 0) {\n          \
    \      result.RemoveAt(maxIndex);\n                maxCount--;\n             \
    \   maxIndex--;\n            }\n        }\n        return result;\n    }\n   \
    \ public static void Main(string[] args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new\
    \ long[]{(long)4L, (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpqiakb96e.cs(49,33): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    '
  timestamp: 1660008890
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    public\
    \ static List<long> RollingMax(List<long> numbers) {\n        List<long> result\
    \ = new List<long>();\n        long maxValue = numbers.Max();\n        long currentMax\
    \ = maxValue;\n        long currentSum = 0;\n        long currentSumOfSquares\
    \ = 0;\n        long currentSumOfSquareOfDifferences = 0;\n        long currentSumOfSquareOfDifferenceOfDifferences\
    \ = 0;\n        long currentSumOfSquareOfDifferenceOfDifferenceOfDifferences =\
    \ 0;\n        long currentSumOfSquareOfDifferenceOfDifferenceOfDifferenceOfDifferences\
    \ = 0;\n        long currentSumOfSquareOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferences\
    \ = 0;\n        long currentSumOfSquareOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferences\
    \ = 0;\n        long currentSumOfSquareOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferences\
    \ = 0;\n        long currentSumOfSquareOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferences\
    \ = 0;\n        long currentSumOfSquareOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferences\
    \ = 0;\n        long currentSumOfSquareOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferences\
    \ = 0;\n        long currentSumOfSquareOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferences\
    \ = 0;\n        long currentSumOfSquareOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferences\
    \ = 0;\n        long currentSumOfSquareOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferences\
    \ = 0;\n        long currentSumOfSquareOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferences\
    \ = 0;\n        long currentSumOfSquareOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferences\
    \ = 0;\n        long currentSumOfSquareOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferences\
    \ = 0;\n        long currentSumOfSquareOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferences\
    \ = 0;\n        long currentSumOfSquareOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferences\
    \ = 0;\n        long currentSumOfSquareOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferences\
    \ = 0;\n        long currentSumOfSquareOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferences\
    \ = 0;\n        long currentSumOfSquareOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferences\
    \ = 0;\n        long currentSumOfSquareOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferences\
    \ = 0;\n        long currentSumOfSquareOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferences\
    \ = 0;\n        long currentSumOfSquareOfDifference\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new\
    \ long[]{(long)4L, (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpkqd0lpbb.cs(40,44): error CS1002: ; expected

    '
  timestamp: 1660008890
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    public\
    \ static List<long> RollingMax(List<long> numbers) {\n        List<long> result\
    \ = new List<long>();\n        long max = numbers.Max();\n        long currentMax\
    \ = max;\n        long currentSum = 0;\n        long currentSumOfSquares = 0;\n\
    \        long currentSumOfProducts = 0;\n        long currentProduct = 1;\n  \
    \      long currentProductOfSquares = 0;\n        long currentProductOfProducts\
    \ = 0;\n        long currentProductOfProductsOfSquares = 0;\n        long currentProductOfProductsOfProducts\
    \ = 0;\n        long currentProductOfProductsOfProductsOfSquares = 0;\n      \
    \  long currentProductOfProductsOfProductsOfProducts = 0;\n        long currentProductOfProductsOfProductsOfProductsOfSquares\
    \ = 0;\n        long currentProductOfProductsOfProductsOfProductsOfProducts =\
    \ 0;\n        long currentProductOfProductsOfProductsOfProductsOfProductsOfSquares\
    \ = 0;\n        long currentProductOfProductsOfProductsOfProductsOfProductsOfProducts\
    \ = 0;\n        long currentProductOfProductsOfProductsOfProductsOfProductsOfProductsOfSquares\
    \ = 0;\n        long currentProductOfProductsOfProductsOfProductsOfProductsOfProductsOfProducts\
    \ = 0;\n        long currentProductOfProductsOfProductsOfProductsOfProductsOfProductsOfProductsOfSquares\
    \ = 0;\n        long currentProductOfProductsOfProductsOfProductsOfProductsOfProductsOfProductsOfProducts\
    \ = 0;\n        long currentProductOfProductsOfProductsOfProductsOfProductsOfProductsOfProductsOfProductsOfSquares\
    \ = 0;\n        long currentProductOfProductsOfProductsOfProductsOfProductsOfProductsOfProductsOfProductsOfProducts\
    \ = 0;\n        long currentProductOfProductsOfProductsOfProductsOfProductsOfProductsOfProductsOfProductsOfProductsOfSquares\
    \ = 0;\n        long currentProductOfProductsOfProductsOfProductsOfProductsOfProductsOfProductsOfProductsOfProductsOfProducts\
    \ = 0;\n        long currentProductOfProductsOfProductsOfProductsOfProductsOfProductsOfProductsOfProductsOfProductsOfProductsOfSquares\
    \ = 0;\n        long currentProductOfProductsOfProductsOfProductsOfProductsOfProductsOfProductsOfProductsOfProductsOfProductsOfProductsOfProductsOfProductsOfProductsOfProductsOfProductsOfProductsOfProductsOfProductsOfProductsOfProducts\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(RollingMax((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(RollingMax((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new\
    \ List<long>(new long[]{(long)4L, (long)3L, (long)2L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmps6lc2k1l.cs(38,228): error CS1002: ; expected

    '
  timestamp: 1660008890
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    public\
    \ static List<long> RollingMax(List<long> numbers) {\n        List<long> result\
    \ = new List<long>();\n        long max = 0;\n        long currentMax = 0;\n \
    \       long currentMaxIndex = 0;\n        long currentMaxValue = numbers[0];\n\
    \        long currentMaxValueIndex = numbers.IndexOf(currentMaxValue);\n     \
    \   long currentMaxValueValue = numbers[currentMaxValueIndex];\n        long currentMaxValueValueIndex\
    \ = numbers.IndexOf(currentMaxValueValue);\n        long currentMaxValueValueValue\
    \ = numbers[currentMaxValueValueIndex];\n        long currentMaxValueValueValueIndex\
    \ = numbers.IndexOf(currentMaxValueValueValue);\n        long currentMaxValueValueValueValue\
    \ = numbers[currentMaxValueValueValueIndex];\n        long currentMaxValueValueValueValueIndex\
    \ = numbers.IndexOf(currentMaxValueValueValueValue);\n        long currentMaxValueValueValueValueValue\
    \ = numbers[currentMaxValueValueValueValueIndex];\n        long currentMaxValueValueValueValueIndex\
    \ = numbers.IndexOf(currentMaxValueValueValueValueValue);\n        long currentMaxValueValueValueValueValueIndex\
    \ = numbers.IndexOf(currentMaxValueValueValueValueValue);\n        long currentMaxValueValueValueValueValueIndex\
    \ = numbers.IndexOf(currentMaxValueValueValueValueValue);\n        long currentMaxValueValueValueValueValueIndex\
    \ = numbers.IndexOf(currentMaxValueValueValueValueValue);\n        long currentMaxValueValueValueValueValueIndex\
    \ = numbers.IndexOf(currentMaxValueValueValueValueValue);\n        long currentMaxValueValueValueValueValueValueIndex\
    \ = numbers.IndexOf(currentMaxValueValueValueValueValue);\n        long currentMaxValueValueValueValueValueValueIndex\
    \ = numbers.IndexOf(currentMaxValueValueValueValueValue);\n        long currentMaxValueValueValueValueValueValueIndex\
    \ = numbers.IndexOf(currentMaxValueValueValueValueValue);\n        long currentMaxValueValueValueValueValueValueIndex\
    \ = numbers.IndexOf(currentMaxValueValueValueValueValue);\n        long currentMaxValueValueValueValueValueValueIndex\
    \ = numbers.IndexOf(currentMaxValueValueValueValueValue);\n        long currentMaxValueValueValueValueValueValueValueIndex\
    \ = numbers.IndexOf(currentMaxValueValueValueValueValue);\n        long currentMaxValueValueValueValueValueValueValueIndex\
    \ = numbers.IndexOf(currentMaxValueValueValueValueValue);\n        long currentMaxValueValueValueValueValueValueValueIndex\
    \ = numbers.IndexOf(currentMaxValueValueValueValueValue);\n        long currentMaxValueValueValueValueValueValueValueIndex\
    \ = numbers.IndexOf(currentMaxValueValueValueValueValue);\n        long currentMaxValueValueValueValueValueValueValueIndex\
    \ = numbers.IndexOf(currentMaxValueValueValueValueValue);\n        long currentMaxValueValueValueValueValueValueValueIndex\
    \ = numbers.IndexOf(\n    }\n    public static void Main(string[] args) {\n  \
    \  Debug.Assert(RollingMax((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L,\
    \ (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new\
    \ long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmptk22hlnd.cs(40,83): error CS1026: ) expected

    /tmp/tmptk22hlnd.cs(40,83): error CS1002: ; expected

    '
  timestamp: 1660008890
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    public\
    \ static List<long> RollingMax(List<long> numbers) {\n        List<long> result\
    \ = new List<long>();\n        long max = 0;\n        long currentMax = 0;\n \
    \       long currentMaxIndex = 0;\n        long currentMaxValue = numbers[0];\n\
    \        long currentMaxValueIndex = -1;\n        foreach (long number in numbers)\
    \ {\n            if (number > currentMaxValue) {\n                currentMaxValue\
    \ = number;\n                currentMaxIndex = currentMaxValue - currentMax;\n\
    \            }\n            if (number == currentMaxValue) {\n               \
    \ currentMaxIndex++;\n            }\n            if (currentMaxIndex > 0) {\n\
    \                currentMaxValue = numbers[currentMaxIndex];\n               \
    \ currentMaxIndex = currentMaxValue - currentMax;\n            }\n           \
    \ if (currentMaxIndex > 0) {\n                result.Add(currentMaxValue);\n \
    \               currentMaxValue = numbers[currentMaxIndex];\n                currentMaxIndex\
    \ = currentMaxValue - currentMax;\n            }\n        }\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(RollingMax((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(RollingMax((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new\
    \ List<long>(new long[]{(long)4L, (long)3L, (long)2L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpljzg7qw0.cs(27,43): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmpljzg7qw0.cs(32,43): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmpljzg7qw0.cs(13,14): warning CS0219: The variable ''max'' is assigned but
    its value is never used

    /tmp/tmpljzg7qw0.cs(17,14): warning CS0219: The variable ''currentMaxValueIndex''
    is assigned but its value is never used

    '
  timestamp: 1660008890
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    public\
    \ static List<long> RollingMax(List<long> numbers) {\n        List<long> result\
    \ = new List<long>();\n        long max = 0;\n        long currentMax = 0;\n \
    \       long currentNumber = 0;\n        foreach (long number in numbers) {\n\
    \            currentNumber = number;\n            currentMax = number;\n     \
    \       while (currentNumber > currentMax) {\n                currentMax = currentNumber;\n\
    \                currentNumber = numbers.TakeWhile(n => n > currentMax).Last();\n\
    \            }\n            result.Add(currentMax);\n        }\n        return\
    \ result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(RollingMax((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(RollingMax((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new\
    \ List<long>(new long[]{(long)4L, (long)3L, (long)2L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <32b8babc7e07434c860b1fb0379acfba>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <32b8babc7e07434c860b1fb0379acfba>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660008891
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    public\
    \ static List<long> RollingMax(List<long> numbers) {\n        List<long> result\
    \ = new List<long>();\n        long max = 0;\n        long currentMax = 0;\n \
    \       long currentSum = 0;\n        long sum = 0;\n        foreach (long number\
    \ in numbers) {\n            currentSum += number;\n            if (currentSum\
    \ > max) {\n                max = currentSum;\n                currentMax = max;\n\
    \            }\n            currentSum -= number;\n            sum += number;\n\
    \            result.Add(max);\n        }\n        return result;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new\
    \ long[]{(long)4L, (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <63611dbb2f1f43d8bb9ddb2ff904821c>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <63611dbb2f1f43d8bb9ddb2ff904821c>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660008891
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    public\
    \ static List<long> RollingMax(List<long> numbers) {\n        List<long> result\
    \ = new List<long>();\n        long maxValue = numbers.Max();\n        long currentMax\
    \ = maxValue;\n        long currentMaxIndex = -1;\n        long currentMaxIndexInResult\
    \ = -1;\n        long currentMaxIndexInResultInResult = -1;\n        long currentMaxIndexInResultInResultInResult\
    \ = -1;\n        long currentMaxIndexInResultInResultInResultInResult = -1;\n\
    \        long currentMaxIndexInResultInResultInResultInResultInResult = -1;\n\
    \        long currentMaxIndexInResultInResultInResultInResultInResultInResult\
    \ = -1;\n        long currentMaxIndexInResultInResultInResultInResultInResultInResultInResult\
    \ = -1;\n        long currentMaxIndexInResultInResultInResultInResultInResultInResultInResultInResult\
    \ = -1;\n        long currentMaxIndexInResultInResultInResultInResultInResultInResultInResultInResultInResult\
    \ = -1;\n        long currentMaxIndexInResultInResultInResultInResultInResultInResultInResultInResultInResult\
    \ = -1;\n        long currentMaxIndexInResultInResultInResultInResultInResultInResultInResultInResultInResultInResult\
    \ = -1;\n        long currentMaxIndexInResultInResultInResultInResultInResultInResultInResultInResultInResultInResult\
    \ = -1;\n        long currentMaxIndexInResultInResultInResultInResultInResultInResultInResultInResultInResultInResult\
    \ = -1;\n        long currentMaxIndexInResultInResultInResultInResultInResultInResultInResultInResultInResultInResult\
    \ = -1;\n        long currentMaxIndexInResultInResultInResultInResultInResultInResultInResultInResultInResultInResult\
    \ = -1;\n        long currentMaxIndexInResultInResultInResultInResultInResultInResultInResultInResultInResultInResultInResult\
    \ = -1;\n        long currentMaxIndexInResultInResultInResultInResultInResultInResultInResultInResultInResultInResultInResult\
    \ = -1;\n        long currentMaxIndexInResultInResultInResultInResultInResultInResultInResultInResultInResultInResultInResult\
    \ = -1;\n        long currentMaxIndexInResultInResultInResultInResultInResultInResultInResultInResultInResultInResultInResult\
    \ = -1;\n        long currentMaxIndexInResultInResultInResultInResultInResultInResultInResultInResultInResultInResultInResult\
    \ = -1;\n        \n    }\n    public static void Main(string[] args) {\n    Debug.Assert(RollingMax((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(RollingMax((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new\
    \ List<long>(new long[]{(long)4L, (long)3L, (long)2L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpp6jl0e33.cs(25,14): error CS0128: A local variable or function named ''currentMaxIndexInResultInResultInResultInResultInResultInResultInResultInResultInResult''
    is already defined in this scope

    /tmp/tmpp6jl0e33.cs(27,14): error CS0128: A local variable or function named ''currentMaxIndexInResultInResultInResultInResultInResultInResultInResultInResultInResultInResult''
    is already defined in this scope

    /tmp/tmpp6jl0e33.cs(28,14): error CS0128: A local variable or function named ''currentMaxIndexInResultInResultInResultInResultInResultInResultInResultInResultInResultInResult''
    is already defined in this scope

    /tmp/tmpp6jl0e33.cs(29,14): error CS0128: A local variable or function named ''currentMaxIndexInResultInResultInResultInResultInResultInResultInResultInResultInResultInResult''
    is already defined in this scope

    /tmp/tmpp6jl0e33.cs(30,14): error CS0128: A local variable or function named ''currentMaxIndexInResultInResultInResultInResultInResultInResultInResultInResultInResultInResult''
    is already defined in this scope

    /tmp/tmpp6jl0e33.cs(32,14): error CS0128: A local variable or function named ''currentMaxIndexInResultInResultInResultInResultInResultInResultInResultInResultInResultInResultInResult''
    is already defined in this scope

    /tmp/tmpp6jl0e33.cs(33,14): error CS0128: A local variable or function named ''currentMaxIndexInResultInResultInResultInResultInResultInResultInResultInResultInResultInResultInResult''
    is already defined in this scope

    /tmp/tmpp6jl0e33.cs(34,14): error CS0128: A local variable or function named ''currentMaxIndexInResultInResultInResultInResultInResultInResultInResultInResultInResultInResultInResult''
    is already defined in this scope

    /tmp/tmpp6jl0e33.cs(35,14): error CS0128: A local variable or function named ''currentMaxIndexInResultInResultInResultInResultInResultInResultInResultInResultInResultInResultInResult''
    is already defined in this scope

    /tmp/tmpp6jl0e33.cs(15,14'
  timestamp: 1660008890
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    public\
    \ static List<long> RollingMax(List<long> numbers) {\n        List<long> result\
    \ = new List<long>();\n        long maxValue = numbers.Max();\n        long currentMax\
    \ = maxValue;\n        long currentSum = 0;\n        long currentSumOfDifferences\
    \ = 0;\n        long currentSumOfDifference = 0;\n        long currentSumOfDifference2\
    \ = 0;\n        long currentSumOfDifference3 = 0;\n        long currentSumOfDifference4\
    \ = 0;\n        long currentSumOfDifference5 = 0;\n        long currentSumOfDifference6\
    \ = 0;\n        long currentSumOfDifference7 = 0;\n        long currentSumOfDifference8\
    \ = 0;\n        long currentSumOfDifference9 = 0;\n        long currentSumOfDifference10\
    \ = 0;\n        long currentSumOfDifference11 = 0;\n        long currentSumOfDifference12\
    \ = 0;\n        long currentSumOfDifference13 = 0;\n        long currentSumOfDifference14\
    \ = 0;\n        long currentSumOfDifference15 = 0;\n        long currentSumOfDifference16\
    \ = 0;\n        long currentSumOfDifference17 = 0;\n        long currentSumOfDifference18\
    \ = 0;\n        long currentSumOfDifference19 = 0;\n        long currentSumOfDifference20\
    \ = 0;\n        long currentSumOfDifference21 = 0;\n        long currentSumOfDifference22\
    \ = 0;\n        long currentSumOfDifference23 = 0;\n        long currentSumOfDifference24\
    \ = 0;\n        long currentSumOfDifference25 = 0;\n        long currentSumOfDifference26\
    \ = 0;\n        long currentSumOfDifference27 = 0;\n        long currentSumOfDifference28\
    \ = 0;\n        long currentSumOfDifference29 = 0;\n        long currentSumOfDifference30\
    \ = 0;\n        long currentSumOfDifference31 = 0;\n        long currentSumOfDifference32\
    \ = 0;\n        long currentSumOfDifference33 = 0;\n        long currentSumOfDifference34\
    \ = 0;\n        long currentSumOfDifference35 = 0;\n        long currentSumOfDifference36\
    \ = 0;\n        long currentSumOfDifference37 = 0;\n        long currentSumOfDifference38\
    \ = 0;\n        long currentSumOfDifference39 = 0;\n        long currentSumOfDifference40\
    \ = 0;\n        long currentSumOfDifference41 = 0;\n        long currentSumOfDifference42\
    \ = 0;\n        long currentSumOfDifference43 = 0;\n        long currentSumOfDifference44\
    \ = 0;\n        long currentSumOfDifference45 = 0;\n        long currentSumOfDifference46\
    \ = 0;\n        long currentSumOfDifference47 = 0;\n        long currentSumOfDifference48\
    \ = 0;\n        long currentSumOfDifference49 = 0;\n        long currentSumOfDifference50\
    \ = 0;\n        long currentSumOfDifference51 = 0;\n        long currentSumOfDifference52\
    \ = 0;\n        long currentSumOfDifference53 = 0;\n\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new\
    \ long[]{(long)4L, (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpsn3dozxw.cs(15,14): warning CS0219: The variable ''currentSum'' is assigned
    but its value is never used

    /tmp/tmpsn3dozxw.cs(16,14): warning CS0219: The variable ''currentSumOfDifferences''
    is assigned but its value is never used

    /tmp/tmpsn3dozxw.cs(17,14): warning CS0219: The variable ''currentSumOfDifference''
    is assigned but its value is never used

    /tmp/tmpsn3dozxw.cs(18,14): warning CS0219: The variable ''currentSumOfDifference2''
    is assigned but its value is never used

    /tmp/tmpsn3dozxw.cs(19,14): warning CS0219: The variable ''currentSumOfDifference3''
    is assigned but its value is never used

    /tmp/tmpsn3dozxw.cs(20,14): warning CS0219: The variable ''currentSumOfDifference4''
    is assigned but its value is never used

    /tmp/tmpsn3dozxw.cs(21,14): warning CS0219: The variable ''currentSumOfDifference5''
    is assigned but its value is never used

    /tmp/tmpsn3dozxw.cs(22,14): warning CS0219: The variable ''currentSumOfDifference6''
    is assigned but its value is never used

    /tmp/tmpsn3dozxw.cs(23,14): warning CS0219: The variable ''currentSumOfDifference7''
    is assigned but its value is never used

    /tmp/tmpsn3dozxw.cs(24,14): warning CS0219: The variable ''currentSumOfDifference8''
    is assigned but its value is never used

    /tmp/tmpsn3dozxw.cs(25,14): warning CS0219: The variable ''currentSumOfDifference9''
    is assigned but its value is never used

    /tmp/tmpsn3dozxw.cs(26,14): warning CS0219: The variable ''currentSumOfDifference10''
    is assigned but its value is never used

    /tmp/tmpsn3dozxw.cs(27,14): warning CS0219: The variable ''currentSumOfDifference11''
    is assigned but its value is never used

    /tmp/tmpsn3dozxw.cs(28,14): warning CS0219: The variable ''currentSumOfDifference12''
    is assigned but its value is never used

    /tmp/tmpsn3dozxw.cs(29,14): warning CS0219: The variable ''currentSumOfDifference13''
    is assigned but its value is never used

    /tmp/tmpsn3dozxw.cs(30,14): warning CS0219: The variable ''currentSumOfDifference14''
    is'
  timestamp: 1660008891
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    public\
    \ static List<long> RollingMax(List<long> numbers) {\n        List<long> result\
    \ = new List<long>();\n        long max = 0;\n        long currentMax = 0;\n \
    \       long currentMaxIndex = 0;\n        long currentMaxValue = numbers[0];\n\
    \        long currentMaxValueIndex = numbers.IndexOf(currentMaxValue);\n     \
    \   long currentMaxValueValue = numbers[currentMaxValueIndex];\n        long currentMaxValueValueIndex\
    \ = numbers.IndexOf(currentMaxValueValue);\n        long currentMaxValueValueValue\
    \ = numbers[currentMaxValueValueIndex];\n        long currentMaxValueValueValueIndex\
    \ = numbers.IndexOf(currentMaxValueValueValue);\n        long currentMaxValueValueValueValue\
    \ = numbers[currentMaxValueValueValueIndex];\n        long currentMaxValueValueValueValueIndex\
    \ = numbers.IndexOf(currentMaxValueValueValueValue);\n        long currentMaxValueValueValueValueValue\
    \ = numbers[currentMaxValueValueValueValueIndex];\n        long currentMaxValueValueValueValueIndex\
    \ = numbers.IndexOf(currentMaxValueValueValueValueValue);\n        long currentMaxValueValueValueValueValueIndex\
    \ = numbers.IndexOf(currentMaxValueValueValueValueValue);\n        long currentMaxValueValueValueValueValueIndex\
    \ = numbers.IndexOf(currentMaxValueValueValueValueValue);\n        long currentMaxValueValueValueValueValueIndex\
    \ = numbers.IndexOf(currentMaxValueValueValueValueValue);\n        long currentMaxValueValueValueValueValueIndex\
    \ = numbers.IndexOf(currentMaxValueValueValueValueValue);\n        long currentMaxValueValueValueValueValueValueIndex\
    \ = numbers.IndexOf(currentMaxValueValueValueValueValue);\n        long currentMaxValueValueValueValueValueValueIndex\
    \ = numbers.IndexOf(currentMaxValueValueValueValueValue);\n        long currentMaxValueValueValueValueValueValueIndex\
    \ = numbers.IndexOf(currentMaxValueValueValueValueValue);\n        long currentMaxValueValueValueValueValueValueIndex\
    \ = numbers.IndexOf(currentMaxValueValueValueValueValue);\n        long currentMaxValueValueValueValueValueValueIndex\
    \ = numbers.IndexOf(currentMaxValueValueValueValueValue);\n        long currentMaxValueValueValueValueValueValueIndex\
    \ = numbers.IndexOf(currentMaxValueValueValueValueValue);\n        long currentMaxValueValueValueValueValueValueIndex\
    \ = numbers.IndexOf(currentMaxValueValueValueValueValue);\n        long currentMaxValueValueValueValueValueValueIndex\
    \ = numbers.IndexOf(currentMaxValueValueValueValueValue);\n        long currentMaxValueValueValueValueValueValueValueIndex\
    \ = numbers.IndexOf(currentMaxValueValueValueValueValue);\n        long currentMaxValueValueValueValueValueValueValueIndex\
    \ = numbers.IndexOf(currentMaxValueValueValueValueValue);\n        long currentMaxValueValueValueValueValueValueValueIndex\
    \ = numbers.IndexOf(currentMaxValue\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L,\
    \ (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new\
    \ long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpmjxh1hp3.cs(40,98): error CS1026: ) expected

    /tmp/tmpmjxh1hp3.cs(40,98): error CS1002: ; expected

    '
  timestamp: 1660008890
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    public\
    \ static List<long> RollingMax(List<long> numbers) {\n        List<long> max =\
    \ new List<long>();\n        long maxValue = numbers.First();\n        long currentMax\
    \ = maxValue;\n        foreach (long number in numbers) {\n            if (number\
    \ > currentMax) {\n                currentMax = number;\n            }\n     \
    \   }\n        max.Add(currentMax);\n        long currentMax2 = maxValue;\n  \
    \      foreach (long number in numbers) {\n            if (number > currentMax2)\
    \ {\n                currentMax2 = number;\n            }\n        }\n       \
    \ max.Add(currentMax2);\n        return max;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L,\
    \ (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new\
    \ long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n    }\n\n\
    }\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.InvalidOperationException: Sequence contains\
    \ no elements\n  at System.Linq.Enumerable.First[TSource] (System.Collections.Generic.IEnumerable`1[T]\
    \ source) [0x00010] in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem.RollingMax\
    \ (System.Collections.Generic.List`1[T] numbers) [0x00007] in <86fa8446e34147d8bb3b6b756b231141>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <86fa8446e34147d8bb3b6b756b231141>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.InvalidOperationException: Sequence\
    \ contains no elements\n  at System.Linq.Enumerable.First[TSource] (System.Collections.Generic.IEnumerable`1[T]\
    \ source) [0x00010] in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem.RollingMax\
    \ (System.Collections.Generic.List`1[T] numbers) [0x00007] in <86fa8446e34147d8bb3b6b756b231141>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <86fa8446e34147d8bb3b6b756b231141>:0\
    \ \n"
  stdout: ''
  timestamp: 1660008891
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    public\
    \ static List<long> RollingMax(List<long> numbers) {\n        List<long> result\
    \ = new List<long>();\n        long max = numbers.First();\n        long currentMax\
    \ = max;\n        long currentMaxIndex = 0;\n        long currentMaxValue = numbers.First();\n\
    \        long currentMaxValueIndex = 0;\n        foreach (long number in numbers)\
    \ {\n            if (number > currentMax) {\n                currentMax = number;\n\
    \                currentMaxIndex = currentMaxValueIndex;\n                currentMaxValue\
    \ = currentMax;\n                currentMaxValueIndex = currentMaxIndex;\n   \
    \         }\n            if (number == currentMax) {\n                currentMaxValueIndex++;\n\
    \            }\n        }\n        result.Add(currentMax);\n        result.Add(currentMaxValue);\n\
    \        result.Add(currentMaxIndex);\n        result.Add(currentMaxValueIndex);\n\
    \        return result;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(RollingMax((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L,\
    \ (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new\
    \ long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n    }\n\n\
    }\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.InvalidOperationException: Sequence contains\
    \ no elements\n  at System.Linq.Enumerable.First[TSource] (System.Collections.Generic.IEnumerable`1[T]\
    \ source) [0x00010] in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem.RollingMax\
    \ (System.Collections.Generic.List`1[T] numbers) [0x00007] in <e6281c585efe48619acaecb111b2d955>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <e6281c585efe48619acaecb111b2d955>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.InvalidOperationException: Sequence\
    \ contains no elements\n  at System.Linq.Enumerable.First[TSource] (System.Collections.Generic.IEnumerable`1[T]\
    \ source) [0x00010] in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem.RollingMax\
    \ (System.Collections.Generic.List`1[T] numbers) [0x00007] in <e6281c585efe48619acaecb111b2d955>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <e6281c585efe48619acaecb111b2d955>:0\
    \ \n"
  stdout: ''
  timestamp: 1660008891
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    public\
    \ static List<long> RollingMax(List<long> numbers) {\n        List<long> result\
    \ = new List<long>();\n        long maxValue = numbers.Max();\n        long currentMax\
    \ = maxValue;\n        long currentMaxIndex = 0;\n        long currentMaxIndexInResult\
    \ = 0;\n        long currentMaxIndexInResultInResult = 0;\n        long currentMaxIndexInResultInResultInResult\
    \ = 0;\n        long currentMaxIndexInResultInResultInResultInResult = 0;\n  \
    \      long currentMaxIndexInResultInResultInResultInResultInResult = 0;\n   \
    \     long currentMaxIndexInResultInResultInResultInResultInResultInResult = 0;\n\
    \        long currentMaxIndexInResultInResultInResultInResultInResultInResultInResult\
    \ = 0;\n        long currentMaxIndexInResultInResultInResultInResultInResultInResultInResult\
    \ = 0;\n        long currentMaxIndexInResultInResultInResultInResultInResultInResultInResultInResult\
    \ = 0;\n        long currentMaxIndexInResultInResultInResultInResultInResultInResultInResultInResult\
    \ = 0;\n        long currentMaxIndexInResultInResultInResultInResultInResultInResultInResultInResult\
    \ = 0;\n        long currentMaxIndexInResultInResultInResultInResultInResultInResultInResultInResult\
    \ = 0;\n        long currentMaxIndexInResultInResultInResultInResultInResultInResultInResultInResult\
    \ = 0;\n        long currentMaxIndexInResultInResultInResultInResultInResultInResultInResultInResult\
    \ = 0;\n        long currentMaxIndexInResultInResultInResultInResultInResultInResultInResultInResult\
    \ = 0;\n        long currentMaxIndexInResultInResultInResultInResultInResultInResultInResultInResult\
    \ = 0;\n        long currentMaxIndexInResultInResultInResultInResultInResultInResultInResultInResult\
    \ = 0;\n        long currentMaxIndexInResultInResultInResultInResultInResultInResultInResultInResult\
    \ = 0;\n        long currentMaxIndexInResultInResultInResultInResultInResultInResultInResultInResult\
    \ = 0;\n        long currentMaxIndexInResultInResultInResultInResultInResultInResultInResultInResult\
    \ = 0;\n        long currentMaxIndexInResultInResultInResultInResultInResultInResultInResultInResult\
    \ = 0;\n        long currentMaxIndexInResultInResultInResultInResultInResultInResultInResultInResult\
    \ = 0;\n        long currentMaxIndexInResultInResultInResultInResultInResultInResultInResultInResult\
    \ = 0;\n        long currentMaxIndexInResultIn\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new\
    \ long[]{(long)4L, (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp_bgm8jsi.cs(39,39): error CS1002: ; expected

    '
  timestamp: 1660008890
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    public\
    \ static List<long> RollingMax(List<long> numbers) {\n        List<long> result\
    \ = new List<long>();\n        long maxValue = numbers.Max();\n        long currentMaxValue\
    \ = maxValue;\n        long currentMaxIndex = -1;\n        long currentMaxIndexValue\
    \ = numbers.Max();\n        long currentMaxIndexValue = numbers.Max();\n     \
    \   long currentMaxIndexValue = numbers.Max();\n        long currentMaxIndexValue\
    \ = numbers.Max();\n        long currentMaxIndexValue = numbers.Max();\n     \
    \   long currentMaxIndexValue = numbers.Max();\n        long currentMaxIndexValue\
    \ = numbers.Max();\n        long currentMaxIndexValue = numbers.Max();\n     \
    \   long currentMaxIndexValue = numbers.Max();\n        long currentMaxIndexValue\
    \ = numbers.Max();\n        long currentMaxIndexValue = numbers.Max();\n     \
    \   long currentMaxIndexValue = numbers.Max();\n        long currentMaxIndexValue\
    \ = numbers.Max();\n        long currentMaxIndexValue = numbers.Max();\n     \
    \   long currentMaxIndexValue = numbers.Max();\n        long currentMaxIndexValue\
    \ = numbers.Max();\n        long currentMaxIndexValue = numbers.Max();\n     \
    \   long currentMaxIndexValue = numbers.Max();\n        long currentMaxIndexValue\
    \ = numbers.Max();\n        long currentMaxIndexValue = numbers.Max();\n     \
    \   long currentMaxIndexValue = numbers.Max();\n        long currentMaxIndexValue\
    \ = numbers.Max();\n        long currentMaxIndexValue = numbers.Max();\n     \
    \   long currentMaxIndexValue = numbers.Max();\n        long currentMaxIndexValue\
    \ = numbers.Max();\n        long currentMaxIndexValue = numbers.Max();\n     \
    \   long currentMaxIndexValue = numbers.Max();\n        long currentMaxIndexValue\
    \ = numbers.Max();\n        long currentMaxIndexValue = numbers.Max();\n     \
    \   long currentMaxIndexValue = numbers.Max();\n        long currentMaxIndexValue\
    \ = numbers.Max();\n        long currentMaxIndexValue = numbers.Max();\n     \
    \   long currentMaxIndexValue = numbers.Max();\n        long currentMaxIndexValue\
    \ = numbers.Max();\n        long currentMaxIndexValue = numbers.Max();\n     \
    \   long currentMaxIndexValue = numbers.Max();\n        long currentMaxIndexValue\
    \ = numbers.Max();\n        long currentMaxIndexValue = numbers.Max();\n     \
    \   long currentMaxIndexValue = numbers.Max();\n        long currentMaxIndexValue\
    \ = numbers.Max();\n        long currentMaxIndexValue = numbers.Max();\n     \
    \   long currentMaxIndexValue = numbers.Max();\n        long currentMaxIndexValue\
    \ = numbers.Max();\n        long currentMaxIndexValue = numbers.Max();\n     \
    \   long currentMaxIndexValue = numbers.Max();\n        long currentMaxIndexValue\
    \ = numbers.Max();\n        long currentMaxIndexValue = numbers.Max();\n     \
    \   long currentMaxIndexValue = numbers.Max();\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new\
    \ long[]{(long)4L, (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpj1d9zaof.cs(17,14): error CS0128: A local variable or function named ''currentMaxIndexValue''
    is already defined in this scope

    /tmp/tmpj1d9zaof.cs(18,14): error CS0128: A local variable or function named ''currentMaxIndexValue''
    is already defined in this scope

    /tmp/tmpj1d9zaof.cs(19,14): error CS0128: A local variable or function named ''currentMaxIndexValue''
    is already defined in this scope

    /tmp/tmpj1d9zaof.cs(20,14): error CS0128: A local variable or function named ''currentMaxIndexValue''
    is already defined in this scope

    /tmp/tmpj1d9zaof.cs(21,14): error CS0128: A local variable or function named ''currentMaxIndexValue''
    is already defined in this scope

    /tmp/tmpj1d9zaof.cs(22,14): error CS0128: A local variable or function named ''currentMaxIndexValue''
    is already defined in this scope

    /tmp/tmpj1d9zaof.cs(23,14): error CS0128: A local variable or function named ''currentMaxIndexValue''
    is already defined in this scope

    /tmp/tmpj1d9zaof.cs(24,14): error CS0128: A local variable or function named ''currentMaxIndexValue''
    is already defined in this scope

    /tmp/tmpj1d9zaof.cs(25,14): error CS0128: A local variable or function named ''currentMaxIndexValue''
    is already defined in this scope

    /tmp/tmpj1d9zaof.cs(26,14): error CS0128: A local variable or function named ''currentMaxIndexValue''
    is already defined in this scope

    /tmp/tmpj1d9zaof.cs(27,14): error CS0128: A local variable or function named ''currentMaxIndexValue''
    is already defined in this scope

    /tmp/tmpj1d9zaof.cs(28,14): error CS0128: A local variable or function named ''currentMaxIndexValue''
    is already defined in this scope

    /tmp/tmpj1d9zaof.cs(29,14): error CS0128: A local variable or function named ''currentMaxIndexValue''
    is already defined in this scope

    /tmp/tmpj1d9zaof.cs(30,14): error CS0128: A local variable or function named ''currentMaxIndexValue''
    is already defined in this scope

    /tmp/tmpj1d9zaof.cs(31,14): error CS0128: A local variable '
  timestamp: 1660008890
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    public\
    \ static List<long> RollingMax(List<long> numbers) {\n        List<long> result\
    \ = new List<long>();\n        long maxValue = numbers.Max();\n        long currentMaxValue\
    \ = maxValue;\n        long currentMaxIndex = 0;\n        long currentMaxIndexValue\
    \ = 0;\n        long currentMaxIndexValue2 = 0;\n        long currentMaxIndexValue3\
    \ = 0;\n        long currentMaxIndexValue4 = 0;\n        long currentMaxIndexValue5\
    \ = 0;\n        long currentMaxIndexValue6 = 0;\n        long currentMaxIndexValue7\
    \ = 0;\n        long currentMaxIndexValue8 = 0;\n        long currentMaxIndexValue9\
    \ = 0;\n        long currentMaxIndexValue10 = 0;\n        long currentMaxIndexValue11\
    \ = 0;\n        long currentMaxIndexValue12 = 0;\n        long currentMaxIndexValue13\
    \ = 0;\n        long currentMaxIndexValue14 = 0;\n        long currentMaxIndexValue15\
    \ = 0;\n        long currentMaxIndexValue16 = 0;\n        long currentMaxIndexValue17\
    \ = 0;\n        long currentMaxIndexValue18 = 0;\n        long currentMaxIndexValue19\
    \ = 0;\n        long currentMaxIndexValue20 = 0;\n        long currentMaxIndexValue21\
    \ = 0;\n        long currentMaxIndexValue22 = 0;\n        long currentMaxIndexValue23\
    \ = 0;\n        long currentMaxIndexValue24 = 0;\n        long currentMaxIndexValue25\
    \ = 0;\n        long currentMaxIndexValue26 = 0;\n        long currentMaxIndexValue27\
    \ = 0;\n        long currentMaxIndexValue28 = 0;\n        long currentMaxIndexValue29\
    \ = 0;\n        long currentMaxIndexValue30 = 0;\n        long currentMaxIndexValue31\
    \ = 0;\n        long currentMaxIndexValue32 = 0;\n        long currentMaxIndexValue33\
    \ = 0;\n        long currentMaxIndexValue34 = 0;\n        long currentMaxIndexValue35\
    \ = 0;\n        long currentMaxIndexValue36 = 0;\n        long currentMaxIndexValue37\
    \ = 0;\n        long currentMaxIndexValue38 = 0;\n        long currentMaxIndexValue39\
    \ = 0;\n        long currentMaxIndexValue40 = 0;\n        long currentMaxIndexValue41\
    \ = 0;\n        long currentMaxIndexValue42 = 0;\n        long currentMaxIndexValue43\
    \ = 0;\n        long currentMaxIndexValue44 = 0;\n        long currentMaxIndexValue45\
    \ = 0;\n        long currentMaxIndexValue46 = 0;\n        long currentMaxIndexValue47\
    \ = 0;\n        long currentMaxIndexValue48 = 0;\n        long currentMaxIndexValue49\
    \ = 0;\n        long currentMaxIndexValue50 = 0;\n        long currentMaxIndexValue51\
    \ = 0;\n        long currentMaxIndexValue52 = 0;\n        long currentMaxIndexValue53\
    \ = 0;\n        long currentMaxIndexValue54\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L,\
    \ (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new\
    \ long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpr8mz57to.cs(69,36): error CS1002: ; expected

    '
  timestamp: 1660008889
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    public\
    \ static List<long> RollingMax(List<long> numbers) {\n        List<long> result\
    \ = new List<long>();\n        long maxValue = numbers.Max();\n        long currentMax\
    \ = maxValue;\n        long currentMaxIndex = 0;\n        long currentMaxIndexValue\
    \ = 0;\n        long currentMaxIndexValue2 = 0;\n        long currentMaxIndexValue3\
    \ = 0;\n        long currentMaxIndexValue4 = 0;\n        long currentMaxIndexValue5\
    \ = 0;\n        long currentMaxIndexValue6 = 0;\n        long currentMaxIndexValue7\
    \ = 0;\n        long currentMaxIndexValue8 = 0;\n        long currentMaxIndexValue9\
    \ = 0;\n        long currentMaxIndexValue10 = 0;\n        long currentMaxIndexValue11\
    \ = 0;\n        long currentMaxIndexValue12 = 0;\n        long currentMaxIndexValue13\
    \ = 0;\n        long currentMaxIndexValue14 = 0;\n        long currentMaxIndexValue15\
    \ = 0;\n        long currentMaxIndexValue16 = 0;\n        long currentMaxIndexValue17\
    \ = 0;\n        long currentMaxIndexValue18 = 0;\n        long currentMaxIndexValue19\
    \ = 0;\n        long currentMaxIndexValue20 = 0;\n        long currentMaxIndexValue21\
    \ = 0;\n        long currentMaxIndexValue22 = 0;\n        long currentMaxIndexValue23\
    \ = 0;\n        long currentMaxIndexValue24 = 0;\n        long currentMaxIndexValue25\
    \ = 0;\n        long currentMaxIndexValue26 = 0;\n        long currentMaxIndexValue27\
    \ = 0;\n        long currentMaxIndexValue28 = 0;\n        long currentMaxIndexValue29\
    \ = 0;\n        long currentMaxIndexValue30 = 0;\n        long currentMaxIndexValue31\
    \ = 0;\n        long currentMaxIndexValue32 = 0;\n        long currentMaxIndexValue33\
    \ = 0;\n        long currentMaxIndexValue34 = 0;\n        long currentMaxIndexValue35\
    \ = 0;\n        long currentMaxIndexValue36 = 0;\n        long currentMaxIndexValue37\
    \ = 0;\n        long currentMaxIndexValue38 = 0;\n        long currentMaxIndexValue39\
    \ = 0;\n        long currentMaxIndexValue40 = 0;\n        long currentMaxIndexValue41\
    \ = 0;\n        long currentMaxIndexValue42 = 0;\n        long currentMaxIndexValue43\
    \ = 0;\n        long currentMaxIndexValue44 = 0;\n        long currentMaxIndexValue45\
    \ = 0;\n        long currentMaxIndexValue46 = 0;\n        long currentMaxIndexValue47\
    \ = 0;\n        long currentMaxIndexValue48 = 0;\n        long currentMaxIndexValue49\
    \ = 0;\n        long currentMaxIndexValue50 = 0;\n        long currentMaxIndexValue51\
    \ = 0;\n        long currentMaxIndexValue52 = 0;\n        long currentMaxIndexValue53\
    \ = 0;\n        long currentMaxIndexValue54\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L,\
    \ (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new\
    \ long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp0ues37ym.cs(69,36): error CS1002: ; expected

    '
  timestamp: 1660008889
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    public\
    \ static List<long> RollingMax(List<long> numbers) {\n        List<long> result\
    \ = new List<long>();\n        long max = 0;\n        long currentMax = 0;\n \
    \       long currentSum = 0;\n        foreach (long number in numbers) {\n   \
    \         currentSum += number;\n            if (currentSum > max) {\n       \
    \         max = currentSum;\n                currentMax = number;\n          \
    \  }\n        }\n        result.Add(currentMax);\n        return result;\n   \
    \ }\n    public static void Main(string[] args) {\n    Debug.Assert(RollingMax((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(RollingMax((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new\
    \ List<long>(new long[]{(long)4L, (long)3L, (long)2L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <b10fbf4ecd9e4dcd8051a3d79e10dc4d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <b10fbf4ecd9e4dcd8051a3d79e10dc4d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660008890
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    public\
    \ static List<long> RollingMax(List<long> numbers) {\n        List<long> result\
    \ = new List<long>();\n        long max = 0;\n        long currentMax = 0;\n \
    \       long currentMaxIndex = 0;\n        long currentMaxValue = numbers[0];\n\
    \        long currentMaxValueIndex = numbers.IndexOf(currentMaxValue);\n     \
    \   long currentMaxValueIndex = numbers.IndexOf(currentMaxValue);\n        long\
    \ currentMaxValueIndex = numbers.IndexOf(currentMaxValue);\n        long currentMaxValueIndex\
    \ = numbers.IndexOf(currentMaxValue);\n        long currentMaxValueIndex = numbers.IndexOf(currentMaxValue);\n\
    \        long currentMaxValueIndex = numbers.IndexOf(currentMaxValue);\n     \
    \   long currentMaxValueIndex = numbers.IndexOf(currentMaxValue);\n        long\
    \ currentMaxValueIndex = numbers.IndexOf(currentMaxValue);\n        long currentMaxValueIndex\
    \ = numbers.IndexOf(currentMaxValue);\n        long currentMaxValueIndex = numbers.IndexOf(currentMaxValue);\n\
    \        long currentMaxValueIndex = numbers.IndexOf(currentMaxValue);\n     \
    \   long currentMaxValueIndex = numbers.IndexOf(currentMaxValue);\n        long\
    \ currentMaxValueIndex = numbers.IndexOf(currentMaxValue);\n        long currentMaxValueIndex\
    \ = numbers.IndexOf(currentMaxValue);\n        long currentMaxValueIndex = numbers.IndexOf(currentMaxValue);\n\
    \        long currentMaxValueIndex = numbers.IndexOf(currentMaxValue);\n     \
    \   long currentMaxValueIndex = numbers.IndexOf(currentMaxValue);\n        long\
    \ currentMaxValueIndex = numbers.IndexOf(currentMaxValue);\n        long currentMaxValueIndex\
    \ = numbers.IndexOf(currentMaxValue);\n        long currentMaxValueIndex = numbers.IndexOf(currentMaxValue);\n\
    \        long currentMaxValueIndex = numbers.IndexOf(currentMaxValue);\n     \
    \   long currentMaxValueIndex = numbers.IndexOf(currentMaxValue);\n        long\
    \ currentMaxValueIndex = numbers.IndexOf(currentMaxValue);\n        long currentMaxValueIndex\
    \ = numbers.IndexOf(currentMaxValue);\n        long currentMaxValueIndex = numbers.IndexOf(currentMaxValue);\n\
    \        long currentMaxValueIndex = numbers.IndexOf(currentMaxValue);\n     \
    \   long currentMaxValueIndex = numbers.IndexOf(currentMaxValue);\n        long\
    \ currentMaxValueIndex = numbers.IndexOf(currentMaxValue);\n        long currentMaxValueIndex\
    \ = numbers.IndexOf(currentMaxValue);\n        long currentMaxValueIndex = numbers.IndexOf(currentMaxValue);\n\
    \        long currentMaxValueIndex = numbers.IndexOf(currentMaxValue);\n     \
    \   long currentMaxValueIndex = numbers.IndexOf(currentMaxValue);\n        long\
    \ currentMaxValueIndex = numbers.IndexOf(currentMaxValue);\n        long currentMaxValueIndex\
    \ = numbers.IndexOf(currentMaxValue);\n        long currentMaxValueIndex = numbers.IndexOf(currentMaxValue);\n\
    \        long currentMaxValueIndex = numbers.IndexOf(currentMaxValue);\n     \
    \   long currentMaxValueIndex = numbers.Index\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L,\
    \ (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new\
    \ long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpsk8zww3z.cs(53,50): error CS1002: ; expected

    '
  timestamp: 1660008889
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    public\
    \ static List<long> RollingMax(List<long> numbers) {\n        List<long> result\
    \ = new List<long>();\n        long maxValue = numbers.Max();\n        long currentMax\
    \ = maxValue;\n        long currentSum = 0;\n        long currentSumOfSquares\
    \ = 0;\n        long currentSumOfSquaresOfSquares = 0;\n        long currentSumOfSquaresOfSquaresOfSquares\
    \ = 0;\n        long currentSumOfSquaresOfSquaresOfSquaresOfSquares = 0;\n   \
    \     long currentSumOfSquaresOfSquaresOfSquaresOfSquaresOfSquares = 0;\n    \
    \    long currentSumOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquares = 0;\n\
    \        long currentSumOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquares\
    \ = 0;\n        long currentSumOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquares\
    \ = 0;\n        long currentSumOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquares\
    \ = 0;\n        long currentSumOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquares\
    \ = 0;\n        long currentSumOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquares\
    \ = 0;\n        long currentSumOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquares\
    \ = 0;\n        long currentSumOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquares\
    \ = 0;\n        long currentSumOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquares\
    \ = 0;\n        long currentSumOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquares\
    \ = 0;\n        long currentSumOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquares\
    \ = 0;\n        long currentSumOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquares\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(RollingMax((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(RollingMax((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new\
    \ List<long>(new long[]{(long)4L, (long)3L, (long)2L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpwcmpc6ih.cs(32,87): error CS1002: ; expected

    '
  timestamp: 1660008890
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    public\
    \ static List<long> RollingMax(List<long> numbers) {\n        List<long> result\
    \ = new List<long>();\n        long maxValue = numbers.Max();\n        long currentMax\
    \ = maxValue;\n        long currentMaxIndex = 0;\n        long currentMaxIndexValue\
    \ = 0;\n        long currentMaxIndexValue2 = 0;\n        long currentMaxIndexValue3\
    \ = 0;\n        long currentMaxIndexValue4 = 0;\n        long currentMaxIndexValue5\
    \ = 0;\n        long currentMaxIndexValue6 = 0;\n        long currentMaxIndexValue7\
    \ = 0;\n        long currentMaxIndexValue8 = 0;\n        long currentMaxIndexValue9\
    \ = 0;\n        long currentMaxIndexValue10 = 0;\n        long currentMaxIndexValue11\
    \ = 0;\n        long currentMaxIndexValue12 = 0;\n        long currentMaxIndexValue13\
    \ = 0;\n        long currentMaxIndexValue14 = 0;\n        long currentMaxIndexValue15\
    \ = 0;\n        long currentMaxIndexValue16 = 0;\n        long currentMaxIndexValue17\
    \ = 0;\n        long currentMaxIndexValue18 = 0;\n        long currentMaxIndexValue19\
    \ = 0;\n        long currentMaxIndexValue20 = 0;\n        long currentMaxIndexValue21\
    \ = 0;\n        long currentMaxIndexValue22 = 0;\n        long currentMaxIndexValue23\
    \ = 0;\n        long currentMaxIndexValue24 = 0;\n        long currentMaxIndexValue25\
    \ = 0;\n        long currentMaxIndexValue26 = 0;\n        long currentMaxIndexValue27\
    \ = 0;\n        long currentMaxIndexValue28 = 0;\n        long currentMaxIndexValue29\
    \ = 0;\n        long currentMaxIndexValue30 = 0;\n        long currentMaxIndexValue31\
    \ = 0;\n        long currentMaxIndexValue32 = 0;\n        long currentMaxIndexValue33\
    \ = 0;\n        long currentMaxIndexValue34 = 0;\n        long currentMaxIndexValue35\
    \ = 0;\n        long currentMaxIndexValue36 = 0;\n        long currentMaxIndexValue37\
    \ = 0;\n        long currentMaxIndexValue38 = 0;\n        long currentMaxIndexValue39\
    \ = 0;\n        long currentMaxIndexValue40 = 0;\n        long currentMaxIndexValue41\
    \ = 0;\n        long currentMaxIndexValue42 = 0;\n        long currentMaxIndexValue43\
    \ = 0;\n        long currentMaxIndexValue44 = 0;\n        long currentMaxIndexValue45\
    \ = 0;\n        long currentMaxIndexValue46 = 0;\n        long currentMaxIndexValue47\
    \ = 0;\n        long currentMaxIndexValue48 = 0;\n        long currentMaxIndexValue49\
    \ = 0;\n        long currentMaxIndexValue50 = 0;\n        long currentMaxIndexValue51\
    \ = 0;\n        long currentMaxIndexValue52 = 0;\n        long currentMaxIndexValue53\
    \ = 0;\n        long currentMaxIndexValue54\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L,\
    \ (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new\
    \ long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp0ues37ym.cs(69,36): error CS1002: ; expected

    '
  timestamp: 1660008889
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    public\
    \ static List<long> RollingMax(List<long> numbers) {\n        List<long> result\
    \ = new List<long>();\n        long maxValue = numbers.Max();\n        long currentMax\
    \ = maxValue;\n        long currentMaxIndex = 0;\n        long currentMaxIndexValue\
    \ = 0;\n        long currentMaxIndexValue2 = 0;\n        long currentMaxIndexValue3\
    \ = 0;\n        long currentMaxIndexValue4 = 0;\n        long currentMaxIndexValue5\
    \ = 0;\n        long currentMaxIndexValue6 = 0;\n        long currentMaxIndexValue7\
    \ = 0;\n        long currentMaxIndexValue8 = 0;\n        long currentMaxIndexValue9\
    \ = 0;\n        long currentMaxIndexValue10 = 0;\n        long currentMaxIndexValue11\
    \ = 0;\n        long currentMaxIndexValue12 = 0;\n        long currentMaxIndexValue13\
    \ = 0;\n        long currentMaxIndexValue14 = 0;\n        long currentMaxIndexValue15\
    \ = 0;\n        long currentMaxIndexValue16 = 0;\n        long currentMaxIndexValue17\
    \ = 0;\n        long currentMaxIndexValue18 = 0;\n        long currentMaxIndexValue19\
    \ = 0;\n        long currentMaxIndexValue20 = 0;\n        long currentMaxIndexValue21\
    \ = 0;\n        long currentMaxIndexValue22 = 0;\n        long currentMaxIndexValue23\
    \ = 0;\n        long currentMaxIndexValue24 = 0;\n        long currentMaxIndexValue25\
    \ = 0;\n        long currentMaxIndexValue26 = 0;\n        long currentMaxIndexValue27\
    \ = 0;\n        long currentMaxIndexValue28 = 0;\n        long currentMaxIndexValue29\
    \ = 0;\n        long currentMaxIndexValue30 = 0;\n        long currentMaxIndexValue31\
    \ = 0;\n        long currentMaxIndexValue32 = 0;\n        long currentMaxIndexValue33\
    \ = 0;\n        long currentMaxIndexValue34 = 0;\n        long currentMaxIndexValue35\
    \ = 0;\n        long currentMaxIndexValue36 = 0;\n        long currentMaxIndexValue37\
    \ = 0;\n        long currentMaxIndexValue38 = 0;\n        long currentMaxIndexValue39\
    \ = 0;\n        long currentMaxIndexValue40 = 0;\n        long currentMaxIndexValue41\
    \ = 0;\n        long currentMaxIndexValue42 = 0;\n        long currentMaxIndexValue43\
    \ = 0;\n        long currentMaxIndexValue44 = 0;\n        long currentMaxIndexValue45\
    \ = 0;\n        long currentMaxIndexValue46 = 0;\n        long currentMaxIndexValue47\
    \ = 0;\n        long currentMaxIndexValue48 = 0;\n        long currentMaxIndexValue49\
    \ = 0;\n        long currentMaxIndexValue50 = 0;\n        long currentMaxIndexValue51\
    \ = 0;\n        long currentMaxIndexValue52 = 0;\n        long currentMaxIndexValue53\
    \ = 0;\n        long currentMaxIndexValue54\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L,\
    \ (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new\
    \ long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp0ues37ym.cs(69,36): error CS1002: ; expected

    '
  timestamp: 1660008889
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    public\
    \ static List<long> RollingMax(List<long> numbers) {\n        List<long> result\
    \ = new List<long>();\n        long maxValue = numbers.Max();\n        long currentMax\
    \ = maxValue;\n        long currentSum = 0;\n        long currentSumOfSquares\
    \ = 0;\n        long currentSumOfSquareOfDifferences = 0;\n        long currentSumOfDifferences\
    \ = 0;\n        long currentSumOfDifferenceSquares = 0;\n        long currentSumOfDifferenceSquareOfDifferences\
    \ = 0;\n        long currentSumOfDifferenceSquareOfDifferenceSquares = 0;\n  \
    \      long currentSumOfDifferenceSquareOfDifferenceSquareOfDifferences = 0;\n\
    \        long currentSumOfDifferenceSquareOfDifferenceSquareOfDifferenceSquares\
    \ = 0;\n        long currentSumOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferences\
    \ = 0;\n        long currentSumOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferenceSquares\
    \ = 0;\n        long currentSumOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferences\
    \ = 0;\n        long currentSumOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferences\
    \ = 0;\n        long currentSumOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferences\
    \ = 0;\n        long currentSumOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferenceSquares\
    \ = 0;\n        long currentSumOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferences\
    \ = 0;\n        long currentSumOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferences\
    \ = 0;\n        long currentSumOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferences\
    \ = 0;\n        long currentSumOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferences\
    \ = 0;\n        long currentSumOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferenceSquares\
    \ = 0;\n        long currentSumOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferenceSquares\
    \ = 0;\n        long currentSumOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferenceSquares\
    \ = 0;\n        long currentSumOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferenceSquares\
    \ = 0;\n        long currentSumOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferenceSquares\
    \ = 0;\n        long currentSumOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferences\
    \ = 0;\n        long currentSumOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferences\
    \ = 0;\n        long currentSumOfDifferenceSquareOfDifferenceSquareOfDifferenceSquare\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(RollingMax((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(RollingMax((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new\
    \ List<long>(new long[]{(long)4L, (long)3L, (long)2L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpsgcv1cxw.cs(41,78): error CS1002: ; expected

    '
  timestamp: 1660008890
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    public\
    \ static List<long> RollingMax(List<long> numbers) {\n        List<long> result\
    \ = new List<long>();\n        long maxValue = numbers.Max();\n        long currentMax\
    \ = maxValue;\n        long currentSum = 0;\n        long currentSumOfSquares\
    \ = 0;\n        long currentSumOfCubes = 0;\n        long currentSumOfPowers =\
    \ 0;\n        long currentSumOfPowersOfSquares = 0;\n        long currentSumOfPowersOfCubes\
    \ = 0;\n        long currentSumOfPowersOfPowers = 0;\n        long currentSumOfPowersOfPowersOfSquares\
    \ = 0;\n        long currentSumOfPowersOfPowersOfCubes = 0;\n        long currentSumOfPowersOfPowersOfPowers\
    \ = 0;\n        long currentSumOfPowersOfPowersOfPowersOfSquares = 0;\n      \
    \  long currentSumOfPowersOfPowersOfPowersOfCubes = 0;\n        long currentSumOfPowersOfPowersOfPowersOfPowers\
    \ = 0;\n        long currentSumOfPowersOfPowersOfPowersOfSquares = 0;\n      \
    \  long currentSumOfPowersOfPowersOfPowersOfCubes = 0;\n        long currentSumOfPowersOfPowersOfPowersOfPowers\
    \ = 0;\n        long currentSumOfPowersOfPowersOfPowersOfSquares = 0;\n      \
    \  long currentSumOfPowersOfPowersOfPowersOfCubes = 0;\n        long currentSumOfPowersOfPowersOfPowersOfPowers\
    \ = 0;\n        long currentSumOfPowersOfPowersOfPowersOfSquares = 0;\n      \
    \  long currentSumOfPowersOfPowersOfPowersOfCubes = 0;\n        long currentSumOfPowersOfPowersOfPowersOfPowers\
    \ = 0;\n        long currentSumOfPowersOfPowersOfPowersOfSquares = 0;\n      \
    \  long currentSumOfPowersOfPowersOfPowersOfCubes = 0;\n        long currentSumOfPowersOfPowersOfPowersOfPowers\
    \ = 0;\n        long currentSumOfPowersOfPowersOfPowersOfSquares = 0;\n      \
    \  long currentSumOfPowersOfPowersOfPowersOfCubes = 0;\n        long currentSumOfPowersOfPowersOfPowersOfPowers\
    \ = 0;\n        long currentSumOfPowersOfPowersOfPowersOfSquares = 0;\n      \
    \  long currentSumOfPowersOfPowersOfPowersOfCubes = 0;\n        long currentSumOfPowersOfPowersOfPowersOfPowers\
    \ = 0;\n        long currentSumOfPowersOfPowersOfPowersOfSquares = 0;\n      \
    \  long currentSumOfPowers\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L,\
    \ (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new\
    \ long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpa7d0mosa.cs(47,32): error CS1002: ; expected

    '
  timestamp: 1660008889
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    public\
    \ static List<long> RollingMax(List<long> numbers) {\n        List<long> result\
    \ = new List<long>();\n        long maxValue = numbers.Max();\n        long currentMax\
    \ = maxValue;\n        long currentSum = 0;\n        long currentSumOfSquares\
    \ = 0;\n        long currentSumOfProducts = 0;\n        long currentProduct =\
    \ 1;\n        long currentProductOfSquares = 0;\n        long currentProductOfProducts\
    \ = 0;\n        long currentProductOfSum = 0;\n        long currentProductOfSumOfSquares\
    \ = 0;\n        long currentProductOfSumOfProducts = 0;\n        long currentProductOfProductOfSquares\
    \ = 0;\n        long currentProductOfProductOfProducts = 0;\n        long currentProductOfProductOfSum\
    \ = 0;\n        long currentProductOfProductOfSumOfSquares = 0;\n        long\
    \ currentProductOfProductOfSumOfProducts = 0;\n        long currentProductOfProductOfProductOfSquares\
    \ = 0;\n        long currentProductOfProductOfProductOfProducts = 0;\n       \
    \ long currentProductOfProductOfProductOfSum = 0;\n        long currentProductOfProductOfProductOfSumOfSquares\
    \ = 0;\n        long currentProductOfProductOfProductOfSumOfProducts = 0;\n  \
    \      long currentProductOfProductOfProductOfProductOfSquares = 0;\n        long\
    \ currentProductOfProductOfProductOfProductOfProducts = 0;\n        long currentProductOfProductOfProductOfProductOfSum\
    \ = 0;\n        long currentProductOfProductOfProductOfProductOfSumOfSquares =\
    \ 0;\n        long currentProductOfProductOfProductOfProductOfSumOfProducts =\
    \ 0;\n        long currentProductOfProductOfProductOfProductOfProductOfSquares\
    \ = 0;\n        long currentProductOfProductOfProductOfProductOfProductOfProducts\
    \ = 0;\n        long currentProductOfProductOfProductOfProductOfProductOfSum =\
    \ 0;\n        long currentProductOfProductOfProductOfProductOfProductOfSumOfSquares\
    \ = 0;\n        long currentProductOfProductOfProductOfProductOfProductOfSumOfProducts\
    \ = 0;\n        long currentProductOfProductOfProductOfProductOfProductOfProductOfSquares\
    \ = 0;\n        long currentProductOfProductOfProductOfProductOfProductOfProductOfProducts\
    \ = 0;\n        long currentProductOfProductOfProductOfProductOfProductOfProductOfSum\
    \ = 0;\n        long currentProductOfProductOfProductOfProductOfProductOfProductOfSumOfSquares\
    \ = 0;\n        long currentProductOfProductOfProductOfProductOfProductOfProductOfSumOfProducts\
    \ = 0;\n        long currentProductOfProductOfProductOfProductOfProductOfProductOfProductOfSquares\
    \ = 0;\n        long currentProductOfProductOfProductOfProductOfProductOfProductOfProductOfProducts\
    \ = 0;\n        long currentProduct\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L,\
    \ (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new\
    \ long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpsh07ru37.cs(51,28): error CS1002: ; expected

    '
  timestamp: 1660008890
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    public\
    \ static List<long> RollingMax(List<long> numbers) {\n        List<long> result\
    \ = new List<long>();\n        long maxValue = numbers.Max();\n        long currentMax\
    \ = maxValue;\n        long currentSum = 0;\n        long currentSumOfSquares\
    \ = 0;\n        long currentSumOfSquareOfDifferences = 0;\n        long currentSumOfSquareOfDifferenceOfDifferences\
    \ = 0;\n        long currentSumOfSquareOfDifferenceOfDifferenceOfDifferences =\
    \ 0;\n        long currentSumOfSquareOfDifferenceOfDifferenceOfDifferenceOfDifferences\
    \ = 0;\n        long currentSumOfSquareOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferences\
    \ = 0;\n        long currentSumOfSquareOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferences\
    \ = 0;\n        long currentSumOfSquareOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferences\
    \ = 0;\n        long currentSumOfSquareOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferences\
    \ = 0;\n        long currentSumOfSquareOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferences\
    \ = 0;\n        long currentSumOfSquareOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferences\
    \ = 0;\n        long currentSumOfSquareOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferences\
    \ = 0;\n        long currentSumOfSquareOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferences\
    \ = 0;\n        long currentSumOfSquareOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferences\
    \ = 0;\n        long currentSumOfSquareOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferences\
    \ = 0;\n        long currentSumOfSquareOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferences\
    \ = 0;\n        long currentSumOfSquareOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferences\
    \ = 0;\n        long currentSumOfSquareOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferences\
    \ = 0;\n        long currentSumOfSquareOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferences\
    \ = 0;\n        long currentSumOfSquareOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferences\
    \ = 0;\n        long currentSumOfSquareOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifference\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(RollingMax((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(RollingMax((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new\
    \ List<long>(new long[]{(long)4L, (long)3L, (long)2L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpdf3xhaiq.cs(36,152): error CS1002: ; expected

    '
  timestamp: 1660008889
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    public\
    \ static List<long> RollingMax(List<long> numbers) {\n        List<long> result\
    \ = new List<long>();\n        long maxValue = numbers.Max();\n        long currentMax\
    \ = maxValue;\n        long currentMaxIndex = 0;\n        long currentMaxIndexValue\
    \ = 0;\n        long currentMaxIndexValue2 = 0;\n        long currentMaxIndexValue3\
    \ = 0;\n        long currentMaxIndexValue4 = 0;\n        long currentMaxIndexValue5\
    \ = 0;\n        long currentMaxIndexValue6 = 0;\n        long currentMaxIndexValue7\
    \ = 0;\n        long currentMaxIndexValue8 = 0;\n        long currentMaxIndexValue9\
    \ = 0;\n        long currentMaxIndexValue10 = 0;\n        long currentMaxIndexValue11\
    \ = 0;\n        long currentMaxIndexValue12 = 0;\n        long currentMaxIndexValue13\
    \ = 0;\n        long currentMaxIndexValue14 = 0;\n        long currentMaxIndexValue15\
    \ = 0;\n        long currentMaxIndexValue16 = 0;\n        long currentMaxIndexValue17\
    \ = 0;\n        long currentMaxIndexValue18 = 0;\n        long currentMaxIndexValue19\
    \ = 0;\n        long currentMaxIndexValue20 = 0;\n        long currentMaxIndexValue21\
    \ = 0;\n        long currentMaxIndexValue22 = 0;\n        long currentMaxIndexValue23\
    \ = 0;\n        long currentMaxIndexValue24 = 0;\n        long currentMaxIndexValue25\
    \ = 0;\n        long currentMaxIndexValue26 = 0;\n        long currentMaxIndexValue27\
    \ = 0;\n        long currentMaxIndexValue28 = 0;\n        long currentMaxIndexValue29\
    \ = 0;\n        long currentMaxIndexValue30 = 0;\n        long currentMaxIndexValue31\
    \ = 0;\n        long currentMaxIndexValue32 = 0;\n        long currentMaxIndexValue33\
    \ = 0;\n        long currentMaxIndexValue34 = 0;\n        long currentMaxIndexValue35\
    \ = 0;\n        long currentMaxIndexValue36 = 0;\n        long currentMaxIndexValue37\
    \ = 0;\n        long currentMaxIndexValue38 = 0;\n        long currentMaxIndexValue39\
    \ = 0;\n        long currentMaxIndexValue40 = 0;\n        long currentMaxIndexValue41\
    \ = 0;\n        long currentMaxIndexValue42 = 0;\n        long currentMaxIndexValue43\
    \ = 0;\n        long currentMaxIndexValue44 = 0;\n        long currentMaxIndexValue45\
    \ = 0;\n        long currentMaxIndexValue46 = 0;\n        long currentMaxIndexValue47\
    \ = 0;\n        long currentMaxIndexValue48 = 0;\n        long currentMaxIndexValue49\
    \ = 0;\n        long currentMaxIndexValue50 = 0;\n        long currentMaxIndexValue51\
    \ = 0;\n        long currentMaxIndexValue52 = 0;\n        long currentMaxIndexValue53\
    \ = 0;\n        long currentMaxIndexValue54\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L,\
    \ (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new\
    \ long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp0ues37ym.cs(69,36): error CS1002: ; expected

    '
  timestamp: 1660008889
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    public\
    \ static List<long> RollingMax(List<long> numbers) {\n        List<long> result\
    \ = new List<long>();\n        long maxValue = numbers.Max();\n        long currentMax\
    \ = maxValue;\n        long currentMaxIndex = 0;\n        long currentMaxIndexInResult\
    \ = 0;\n        long currentMaxIndexInResultInResult = 0;\n        long currentMaxIndexInResultInResultInResult\
    \ = 0;\n        long currentMaxIndexInResultInResultInResultInResult = 0;\n  \
    \      long currentMaxIndexInResultInResultInResultInResultInResult = 0;\n   \
    \     long currentMaxIndexInResultInResultInResultInResultInResultInResult = 0;\n\
    \        long currentMaxIndexInResultInResultInResultInResultInResultInResultInResult\
    \ = 0;\n        long currentMaxIndexInResultInResultInResultInResultInResultInResultInResult\
    \ = 0;\n        long currentMaxIndexInResultInResultInResultInResultInResultInResultInResultInResult\
    \ = 0;\n        long currentMaxIndexInResultInResultInResultInResultInResultInResultInResultInResult\
    \ = 0;\n        long currentMaxIndexInResultInResultInResultInResultInResultInResultInResultInResult\
    \ = 0;\n        long currentMaxIndexInResultInResultInResultInResultInResultInResultInResultInResult\
    \ = 0;\n        long currentMaxIndexInResultInResultInResultInResultInResultInResultInResultInResult\
    \ = 0;\n        long currentMaxIndexInResultInResultInResultInResultInResultInResultInResultInResult\
    \ = 0;\n        long currentMaxIndexInResultInResultInResultInResultInResultInResultInResultInResult\
    \ = 0;\n        long currentMaxIndexInResultInResultInResultInResultInResultInResultInResultInResult\
    \ = 0;\n        long currentMaxIndexInResultInResultInResultInResultInResultInResultInResultInResult\
    \ = 0;\n        long currentMaxIndexInResultInResultInResultInResultInResultInResultInResultInResult\
    \ = 0;\n        long currentMaxIndexInResultInResultInResultInResultInResultInResultInResultInResult\
    \ = 0;\n        long currentMaxIndexInResultInResultInResultInResultInResultInResultInResultInResult\
    \ = 0;\n        long currentMaxIndexInResultInResultInResultInResultInResultInResultInResultInResult\
    \ = 0;\n        long currentMaxIndexInResultInResultInResultInResultInResultInResultInResultInResult\
    \ = 0;\n        long currentMaxIndexInResultInResultInResultInResultInResultInResultInResultInResult\
    \ = 0;\n        long currentMaxIndexInResultIn\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new\
    \ long[]{(long)4L, (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp_bgm8jsi.cs(39,39): error CS1002: ; expected

    '
  timestamp: 1660008890
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    public\
    \ static List<long> RollingMax(List<long> numbers) {\n        List<long> result\
    \ = new List<long>();\n        long max = 0;\n        long currentMax = 0;\n \
    \       long currentSum = 0;\n        long currentSum2 = 0;\n        long currentSum3\
    \ = 0;\n        long currentSum4 = 0;\n        long currentSum5 = 0;\n       \
    \ long currentSum6 = 0;\n        long currentSum7 = 0;\n        long currentSum8\
    \ = 0;\n        long currentSum9 = 0;\n        long currentSum10 = 0;\n      \
    \  long currentSum11 = 0;\n        long currentSum12 = 0;\n        long currentSum13\
    \ = 0;\n        long currentSum14 = 0;\n        long currentSum15 = 0;\n     \
    \   long currentSum16 = 0;\n        long currentSum17 = 0;\n        long currentSum18\
    \ = 0;\n        long currentSum19 = 0;\n        long currentSum20 = 0;\n     \
    \   long currentSum21 = 0;\n        long currentSum22 = 0;\n        long currentSum23\
    \ = 0;\n        long currentSum24 = 0;\n        long currentSum25 = 0;\n     \
    \   long currentSum26 = 0;\n        long currentSum27 = 0;\n        long currentSum28\
    \ = 0;\n        long currentSum29 = 0;\n        long currentSum30 = 0;\n     \
    \   long currentSum31 = 0;\n        long currentSum32 = 0;\n        long currentSum33\
    \ = 0;\n        long currentSum34 = 0;\n        long currentSum35 = 0;\n     \
    \   long currentSum36 = 0;\n        long currentSum37 = 0;\n        long currentSum38\
    \ = 0;\n        long currentSum39 = 0;\n        long currentSum40 = 0;\n     \
    \   long currentSum41 = 0;\n        long currentSum42 = 0;\n        long currentSum43\
    \ = 0;\n        long currentSum44 = 0;\n        long currentSum45 = 0;\n     \
    \   long currentSum46 = 0;\n        long currentSum47 = 0;\n        long currentSum48\
    \ = 0;\n        long currentSum49 = 0;\n        long currentSum50 = 0;\n     \
    \   long currentSum51 = 0;\n        long currentSum52 = 0;\n        long currentSum53\
    \ = 0;\n        long currentSum54 = 0;\n        long currentSum55 = 0;\n     \
    \   long currentSum56 = 0;\n        long currentSum57 = 0;\n        long currentSum58\
    \ = 0;\n        long currentSum59 = 0;\n        long currentSum60 = 0;\n     \
    \   long currentSum61 = 0;\n        long currentSum62 = 0;\n        long currentSum63\
    \ = 0;\n        long currentSum64 = 0;\n        long currentSum65 = 0;\n     \
    \   long currentSum66 = 0;\n        long currentSum67 = 0;\n        long currentSum68\
    \ = 0;\n        long currentSum69 = 0;\n        long currentSum70 = 0;\n     \
    \   long currentSum71 = 0;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L,\
    \ (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new\
    \ long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpim5ndhov.cs(13,14): warning CS0219: The variable ''max'' is assigned but
    its value is never used

    /tmp/tmpim5ndhov.cs(14,14): warning CS0219: The variable ''currentMax'' is assigned
    but its value is never used

    /tmp/tmpim5ndhov.cs(15,14): warning CS0219: The variable ''currentSum'' is assigned
    but its value is never used

    /tmp/tmpim5ndhov.cs(16,14): warning CS0219: The variable ''currentSum2'' is assigned
    but its value is never used

    /tmp/tmpim5ndhov.cs(17,14): warning CS0219: The variable ''currentSum3'' is assigned
    but its value is never used

    /tmp/tmpim5ndhov.cs(18,14): warning CS0219: The variable ''currentSum4'' is assigned
    but its value is never used

    /tmp/tmpim5ndhov.cs(19,14): warning CS0219: The variable ''currentSum5'' is assigned
    but its value is never used

    /tmp/tmpim5ndhov.cs(20,14): warning CS0219: The variable ''currentSum6'' is assigned
    but its value is never used

    /tmp/tmpim5ndhov.cs(21,14): warning CS0219: The variable ''currentSum7'' is assigned
    but its value is never used

    /tmp/tmpim5ndhov.cs(22,14): warning CS0219: The variable ''currentSum8'' is assigned
    but its value is never used

    /tmp/tmpim5ndhov.cs(23,14): warning CS0219: The variable ''currentSum9'' is assigned
    but its value is never used

    /tmp/tmpim5ndhov.cs(24,14): warning CS0219: The variable ''currentSum10'' is assigned
    but its value is never used

    /tmp/tmpim5ndhov.cs(25,14): warning CS0219: The variable ''currentSum11'' is assigned
    but its value is never used

    /tmp/tmpim5ndhov.cs(26,14): warning CS0219: The variable ''currentSum12'' is assigned
    but its value is never used

    /tmp/tmpim5ndhov.cs(27,14): warning CS0219: The variable ''currentSum13'' is assigned
    but its value is never used

    /tmp/tmpim5ndhov.cs(28,14): warning CS0219: The variable ''currentSum14'' is assigned
    but its value is never used

    /tmp/tmpim5ndhov.cs(29,14): warning CS0219: The variable ''currentSum15'' is assigned
    but its value is never used

    /tmp/tmpim5ndhov.cs(30,14): warning CS'
  timestamp: 1660008891
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    public\
    \ static List<long> RollingMax(List<long> numbers) {\n        List<long> result\
    \ = new List<long>();\n        long max = 0;\n        long rollingMax = 0;\n \
    \       long currentMax = 0;\n        long currentRollingMax = 0;\n        long\
    \ currentRollingMaxIndex = 0;\n        long currentRollingMaxIndex2 = 0;\n   \
    \     long currentRollingMaxIndex3 = 0;\n        long currentRollingMaxIndex4\
    \ = 0;\n        long currentRollingMaxIndex5 = 0;\n        long currentRollingMaxIndex6\
    \ = 0;\n        long currentRollingMaxIndex7 = 0;\n        long currentRollingMaxIndex8\
    \ = 0;\n        long currentRollingMaxIndex9 = 0;\n        long currentRollingMaxIndex10\
    \ = 0;\n        long currentRollingMaxIndex11 = 0;\n        long currentRollingMaxIndex12\
    \ = 0;\n        long currentRollingMaxIndex13 = 0;\n        long currentRollingMaxIndex14\
    \ = 0;\n        long currentRollingMaxIndex15 = 0;\n        long currentRollingMaxIndex16\
    \ = 0;\n        long currentRollingMaxIndex17 = 0;\n        long currentRollingMaxIndex18\
    \ = 0;\n        long currentRollingMaxIndex19 = 0;\n        long currentRollingMaxIndex20\
    \ = 0;\n        long currentRollingMaxIndex21 = 0;\n        long currentRollingMaxIndex22\
    \ = 0;\n        long currentRollingMaxIndex23 = 0;\n        long currentRollingMaxIndex24\
    \ = 0;\n        long currentRollingMaxIndex25 = 0;\n        long currentRollingMaxIndex26\
    \ = 0;\n        long currentRollingMaxIndex27 = 0;\n        long currentRollingMaxIndex28\
    \ = 0;\n        long currentRollingMaxIndex29 = 0;\n        long currentRollingMaxIndex30\
    \ = 0;\n        long currentRollingMaxIndex31 = 0;\n        long currentRollingMaxIndex32\
    \ = 0;\n        long currentRollingMaxIndex33 = 0;\n        long currentRollingMaxIndex34\
    \ = 0;\n        long currentRollingMaxIndex35 = 0;\n        long currentRollingMaxIndex36\
    \ = 0;\n        long currentRollingMaxIndex37 = 0;\n        long currentRollingMaxIndex38\
    \ = 0;\n        long currentRollingMaxIndex39 = 0;\n        long currentRollingMaxIndex40\
    \ = 0;\n        long currentRollingMaxIndex41 = 0;\n        long currentRollingMaxIndex42\
    \ = 0;\n        long currentRollingMaxIndex43 = 0;\n        long currentRollingMaxIndex44\
    \ = 0;\n        long currentRollingMaxIndex45 = 0;\n        long currentRollingMaxIndex46\
    \ = 0;\n        long currentRollingMaxIndex47 = 0;\n        long currentRollingMaxIndex48\
    \ = 0;\n        \n    }\n    public static void Main(string[] args) {\n    Debug.Assert(RollingMax((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(RollingMax((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new\
    \ List<long>(new long[]{(long)4L, (long)3L, (long)2L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpjoyoziko.cs(13,14): warning CS0219: The variable ''max'' is assigned but
    its value is never used

    /tmp/tmpjoyoziko.cs(14,14): warning CS0219: The variable ''rollingMax'' is assigned
    but its value is never used

    /tmp/tmpjoyoziko.cs(15,14): warning CS0219: The variable ''currentMax'' is assigned
    but its value is never used

    /tmp/tmpjoyoziko.cs(16,14): warning CS0219: The variable ''currentRollingMax''
    is assigned but its value is never used

    /tmp/tmpjoyoziko.cs(17,14): warning CS0219: The variable ''currentRollingMaxIndex''
    is assigned but its value is never used

    /tmp/tmpjoyoziko.cs(18,14): warning CS0219: The variable ''currentRollingMaxIndex2''
    is assigned but its value is never used

    /tmp/tmpjoyoziko.cs(19,14): warning CS0219: The variable ''currentRollingMaxIndex3''
    is assigned but its value is never used

    /tmp/tmpjoyoziko.cs(20,14): warning CS0219: The variable ''currentRollingMaxIndex4''
    is assigned but its value is never used

    /tmp/tmpjoyoziko.cs(21,14): warning CS0219: The variable ''currentRollingMaxIndex5''
    is assigned but its value is never used

    /tmp/tmpjoyoziko.cs(22,14): warning CS0219: The variable ''currentRollingMaxIndex6''
    is assigned but its value is never used

    /tmp/tmpjoyoziko.cs(23,14): warning CS0219: The variable ''currentRollingMaxIndex7''
    is assigned but its value is never used

    /tmp/tmpjoyoziko.cs(24,14): warning CS0219: The variable ''currentRollingMaxIndex8''
    is assigned but its value is never used

    /tmp/tmpjoyoziko.cs(25,14): warning CS0219: The variable ''currentRollingMaxIndex9''
    is assigned but its value is never used

    /tmp/tmpjoyoziko.cs(26,14): warning CS0219: The variable ''currentRollingMaxIndex10''
    is assigned but its value is never used

    /tmp/tmpjoyoziko.cs(27,14): warning CS0219: The variable ''currentRollingMaxIndex11''
    is assigned but its value is never used

    /tmp/tmpjoyoziko.cs(28,14): warning CS0219: The variable ''currentRollingMaxIndex12''
    is assigned but its value is never used

    /tm'
  timestamp: 1660008891
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    public\
    \ static List<long> RollingMax(List<long> numbers) {\n        List<long> result\
    \ = new List<long>();\n        long maxValue = numbers.Max();\n        long currentMax\
    \ = maxValue;\n        long currentMaxIndex = 0;\n        long currentMaxIndexValue\
    \ = 0;\n        long currentMaxIndexValue2 = 0;\n        long currentMaxIndexValue3\
    \ = 0;\n        long currentMaxIndexValue4 = 0;\n        long currentMaxIndexValue5\
    \ = 0;\n        long currentMaxIndexValue6 = 0;\n        long currentMaxIndexValue7\
    \ = 0;\n        long currentMaxIndexValue8 = 0;\n        long currentMaxIndexValue9\
    \ = 0;\n        long currentMaxIndexValue10 = 0;\n        long currentMaxIndexValue11\
    \ = 0;\n        long currentMaxIndexValue12 = 0;\n        long currentMaxIndexValue13\
    \ = 0;\n        long currentMaxIndexValue14 = 0;\n        long currentMaxIndexValue15\
    \ = 0;\n        long currentMaxIndexValue16 = 0;\n        long currentMaxIndexValue17\
    \ = 0;\n        long currentMaxIndexValue18 = 0;\n        long currentMaxIndexValue19\
    \ = 0;\n        long currentMaxIndexValue20 = 0;\n        long currentMaxIndexValue21\
    \ = 0;\n        long currentMaxIndexValue22 = 0;\n        long currentMaxIndexValue23\
    \ = 0;\n        long currentMaxIndexValue24 = 0;\n        long currentMaxIndexValue25\
    \ = 0;\n        long currentMaxIndexValue26 = 0;\n        long currentMaxIndexValue27\
    \ = 0;\n        long currentMaxIndexValue28 = 0;\n        long currentMaxIndexValue29\
    \ = 0;\n        long currentMaxIndexValue30 = 0;\n        long currentMaxIndexValue31\
    \ = 0;\n        long currentMaxIndexValue32 = 0;\n        long currentMaxIndexValue33\
    \ = 0;\n        long currentMaxIndexValue34 = 0;\n        long currentMaxIndexValue35\
    \ = 0;\n        long currentMaxIndexValue36 = 0;\n        long currentMaxIndexValue37\
    \ = 0;\n        long currentMaxIndexValue38 = 0;\n        long currentMaxIndexValue39\
    \ = 0;\n        long currentMaxIndexValue40 = 0;\n        long currentMaxIndexValue41\
    \ = 0;\n        long currentMaxIndexValue42 = 0;\n        long currentMaxIndexValue43\
    \ = 0;\n        long currentMaxIndexValue44 = 0;\n        long currentMaxIndexValue45\
    \ = 0;\n        long currentMaxIndexValue46 = 0;\n        long currentMaxIndexValue47\
    \ = 0;\n        long currentMaxIndexValue48 = 0;\n        long currentMaxIndexValue49\
    \ = 0;\n        long currentMaxIndexValue50 = 0;\n        long currentMaxIndexValue51\
    \ = 0;\n        long currentMaxIndexValue52 = 0;\n        long currentMaxIndexValue53\
    \ = 0;\n        long currentMaxIndexValue54\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L,\
    \ (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new\
    \ long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp0ues37ym.cs(69,36): error CS1002: ; expected

    '
  timestamp: 1660008889
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    public\
    \ static List<long> RollingMax(List<long> numbers) {\n        List<long> result\
    \ = new List<long>();\n        long max = numbers.First();\n        long maxIndex\
    \ = 0;\n        for (int i = 1; i < numbers.Count; i++) {\n            if (numbers[i]\
    \ > max) {\n                max = numbers[i];\n                maxIndex = i;\n\
    \            }\n        }\n        result.Add(max);\n        for (int i = maxIndex\
    \ + 1; i < numbers.Count; i++) {\n            max = Math.Max(max, numbers[i]);\n\
    \            result.Add(max);\n        }\n        return result;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new\
    \ long[]{(long)4L, (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpbfkrphv2.cs(22,22): error CS0266: Cannot implicitly convert type ''long''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1660008891
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    public\
    \ static List<long> RollingMax(List<long> numbers) {\n        List<long> result\
    \ = new List<long>();\n        long max = numbers.Max();\n        long currentMax\
    \ = max;\n        long currentMaxIndex = 0;\n        long currentMaxValue = numbers.First();\n\
    \        long currentMaxValueIndex = numbers.First();\n        long currentMaxValueValue\
    \ = numbers.First();\n        long currentMaxValueValueIndex = numbers.First();\n\
    \        long currentMaxValueValueValue = numbers.First();\n        long currentMaxValueValueValueIndex\
    \ = numbers.First();\n        long currentMaxValueValueValueValue = numbers.First();\n\
    \        long currentMaxValueValueValueIndex = numbers.First();\n        long\
    \ currentMaxValueValueValueValue = numbers.First();\n        long currentMaxValueValueValueIndex\
    \ = numbers.First();\n        long currentMaxValueValueValueValue = numbers.First();\n\
    \        long currentMaxValueValueValueIndex = numbers.First();\n        long\
    \ currentMaxValueValueValueValue = numbers.First();\n        long currentMaxValueValueValueIndex\
    \ = numbers.First();\n        long currentMaxValueValueValueValue = numbers.First();\n\
    \        long currentMaxValueValueValueIndex = numbers.First();\n        long\
    \ currentMaxValueValueValueValue = numbers.First();\n        long currentMaxValueValueValueIndex\
    \ = numbers.First();\n        long currentMaxValueValueValueValue = numbers.First();\n\
    \        long currentMaxValueValueValueIndex = numbers.First();\n        long\
    \ currentMaxValueValueValueValue = numbers.First();\n        long currentMaxValueValueValueIndex\
    \ = numbers.First();\n        long currentMaxValueValueValueValue = numbers.First();\n\
    \        long currentMaxValueValueValueIndex = numbers.First();\n        long\
    \ currentMaxValueValueValueValue = numbers.First();\n        long currentMaxValueValueValueIndex\
    \ = numbers.First();\n        long currentMaxValueValueValueValue = numbers.First();\n\
    \        long currentMaxValueValueValueIndex = numbers.First();\n        long\
    \ currentMaxValueValueValueValue = numbers.First();\n        long currentMaxValueValueValueIndex\
    \ = numbers.First();\n        long currentMaxValueValueValueValue = numbers.First();\n\
    \        long currentMaxValueValueValueIndex = numbers.First();\n        long\
    \ currentMaxValueValueValueValue = numbers.First();\n        long currentMaxValueValueValueIndex\
    \ = numbers.First();\n        long currentMaxValueValueValueValue = numbers.First();\n\
    \        long currentMaxValueValueValueIndex = numbers.First();\n        long\
    \ currentMaxValueValueValueValue = numbers.First();\n        long currentMaxValueValueValueIndex\
    \ = numbers.First();\n        long currentMaxValueValueValueValue = numbers.First();\n\
    \        long currentMaxValueValueValueIndex = numbers.First();\n        long\
    \ currentMaxValueValueValueValue = numbers.\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L,\
    \ (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new\
    \ long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpde6antt0.cs(56,55): error CS1001: Identifier expected

    /tmp/tmpde6antt0.cs(56,55): error CS1002: ; expected

    '
  timestamp: 1660008890
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    public\
    \ static List<long> RollingMax(List<long> numbers) {\n        List<long> result\
    \ = new List<long>();\n        long max = 0;\n        long currentMax = 0;\n \
    \       long currentNumber = 0;\n        long currentSum = 0;\n        long currentSumOfSquares\
    \ = 0;\n        long currentSumOfCubes = 0;\n        long currentSumOfPowers =\
    \ 0;\n        long currentSumOfPowersOfSquares = 0;\n        long currentSumOfPowersOfCubes\
    \ = 0;\n        long currentSumOfPowersOfPowers = 0;\n        long currentSumOfPowersOfPowersOfSquares\
    \ = 0;\n        long currentSumOfPowersOfPowersOfCubes = 0;\n        long currentSumOfPowersOfPowersOfPowers\
    \ = 0;\n        long currentSumOfPowersOfPowersOfPowersOfSquares = 0;\n      \
    \  long currentSumOfPowersOfPowersOfPowersOfCubes = 0;\n        long currentSumOfPowersOfPowersOfPowersOfPowers\
    \ = 0;\n        long currentSumOfPowersOfPowersOfPowersOfPowersOfSquares = 0;\n\
    \        long currentSumOfPowersOfPowersOfPowersOfPowersOfCubes = 0;\n       \
    \ long currentSumOfPowersOfPowersOfPowersOfPowersOfPowers = 0;\n        long currentSumOfPowersOfPowersOfPowersOfPowersOfPowersOfSquares\
    \ = 0;\n        long currentSumOfPowersOfPowersOfPowersOfPowersOfPowersOfCubes\
    \ = 0;\n        long currentSumOfPowersOfPowersOfPowersOfPowersOfPowersOfPowers\
    \ = 0;\n        long currentSumOfPowersOfPowersOfPowersOfPowersOfPowersOfPowersOfSquares\
    \ = 0;\n        long currentSumOfPowersOfPowersOfPowersOfPowersOfPowersOfPowersOfCubes\
    \ = 0;\n        long currentSumOfPowersOfPowersOfPowersOfPowersOfPowersOfPowersOfPowers\
    \ = 0;\n        long currentSumOfPowersOfPowersOfPowersOfPowersOfPowersOfPowersOfSquares\
    \ = 0;\n        long currentSumOfPowersOfPowersOfPowersOfPowersOfPowersOfPowersOfCubes\
    \ = 0;\n        long currentSumOfPowersOfPowersOfPowersOfPowersOfPowersOfPowersOfPowers\
    \ = 0;\n        long currentSumOfPowersOfPowersOfPowersOfPowersOfPowersOfPowersOfPowersOfSquares\
    \ = 0;\n        long currentSumOfPowersOfPowersOfPowersOfPower\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new\
    \ long[]{(long)4L, (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmptgl2r4zc.cs(42,55): error CS1002: ; expected

    '
  timestamp: 1660008890
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    public\
    \ static List<long> RollingMax(List<long> numbers) {\n        List<long> result\
    \ = new List<long>();\n        long max = 0;\n        long currentMax = 0;\n \
    \       long currentNumber = 0;\n        long currentSum = 0;\n        foreach\
    \ (long number in numbers) {\n            currentNumber = number;\n          \
    \  currentSum = number;\n            while (currentSum > 0) {\n              \
    \  currentSum -= currentNumber;\n                currentMax = currentNumber;\n\
    \                result.Add(currentMax);\n            }\n        }\n        return\
    \ result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(RollingMax((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(RollingMax((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new\
    \ List<long>(new long[]{(long)4L, (long)3L, (long)2L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <3588fe75d13b44e49076e7b62bb45d5a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <3588fe75d13b44e49076e7b62bb45d5a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660008891
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    public\
    \ static List<long> RollingMax(List<long> numbers) {\n        List<long> result\
    \ = new List<long>();\n        long max = 0;\n        long maxIndex = 0;\n   \
    \     long currentMax = numbers.First();\n        long currentMaxIndex = 0;\n\
    \        foreach (long number in numbers) {\n            if (number > currentMax)\
    \ {\n                currentMax = number;\n                currentMaxIndex = maxIndex;\n\
    \            }\n            if (number == currentMax) {\n                maxIndex++;\n\
    \            }\n            if (maxIndex == currentMaxIndex) {\n             \
    \   result.Add(currentMax);\n            }\n        }\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(RollingMax((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(RollingMax((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new\
    \ List<long>(new long[]{(long)4L, (long)3L, (long)2L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.InvalidOperationException: Sequence contains\
    \ no elements\n  at System.Linq.Enumerable.First[TSource] (System.Collections.Generic.IEnumerable`1[T]\
    \ source) [0x00010] in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem.RollingMax\
    \ (System.Collections.Generic.List`1[T] numbers) [0x0000d] in <cf8a906d86d14bc1b3e65312aa768271>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <cf8a906d86d14bc1b3e65312aa768271>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.InvalidOperationException: Sequence\
    \ contains no elements\n  at System.Linq.Enumerable.First[TSource] (System.Collections.Generic.IEnumerable`1[T]\
    \ source) [0x00010] in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem.RollingMax\
    \ (System.Collections.Generic.List`1[T] numbers) [0x0000d] in <cf8a906d86d14bc1b3e65312aa768271>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <cf8a906d86d14bc1b3e65312aa768271>:0\
    \ \n"
  stdout: ''
  timestamp: 1660008891
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    public\
    \ static List<long> RollingMax(List<long> numbers) {\n        List<long> result\
    \ = new List<long>();\n        long maxValue = numbers.Max();\n        long currentMaxValue\
    \ = maxValue;\n        long currentMaxIndex = 0;\n        long currentMaxIndexValue\
    \ = 0;\n        long currentMaxIndexValue2 = 0;\n        long currentMaxIndexValue3\
    \ = 0;\n        long currentMaxIndexValue4 = 0;\n        long currentMaxIndexValue5\
    \ = 0;\n        long currentMaxIndexValue6 = 0;\n        long currentMaxIndexValue7\
    \ = 0;\n        long currentMaxIndexValue8 = 0;\n        long currentMaxIndexValue9\
    \ = 0;\n        long currentMaxIndexValue10 = 0;\n        long currentMaxIndexValue11\
    \ = 0;\n        long currentMaxIndexValue12 = 0;\n        long currentMaxIndexValue13\
    \ = 0;\n        long currentMaxIndexValue14 = 0;\n        long currentMaxIndexValue15\
    \ = 0;\n        long currentMaxIndexValue16 = 0;\n        long currentMaxIndexValue17\
    \ = 0;\n        long currentMaxIndexValue18 = 0;\n        long currentMaxIndexValue19\
    \ = 0;\n        long currentMaxIndexValue20 = 0;\n        long currentMaxIndexValue21\
    \ = 0;\n        long currentMaxIndexValue22 = 0;\n        long currentMaxIndexValue23\
    \ = 0;\n        long currentMaxIndexValue24 = 0;\n        long currentMaxIndexValue25\
    \ = 0;\n        long currentMaxIndexValue26 = 0;\n        long currentMaxIndexValue27\
    \ = 0;\n        long currentMaxIndexValue28 = 0;\n        long currentMaxIndexValue29\
    \ = 0;\n        long currentMaxIndexValue30 = 0;\n        long currentMaxIndexValue31\
    \ = 0;\n        long currentMaxIndexValue32 = 0;\n        long currentMaxIndexValue33\
    \ = 0;\n        long currentMaxIndexValue34 = 0;\n        long currentMaxIndexValue35\
    \ = 0;\n        long currentMaxIndexValue36 = 0;\n        long currentMaxIndexValue37\
    \ = 0;\n        long currentMaxIndexValue38 = 0;\n        long currentMaxIndexValue39\
    \ = 0;\n        long currentMaxIndexValue40 = 0;\n        long currentMaxIndexValue41\
    \ = 0;\n        long currentMaxIndexValue42 = 0;\n        long currentMaxIndexValue43\
    \ = 0;\n        long currentMaxIndexValue44 = 0;\n        long currentMaxIndexValue45\
    \ = 0;\n        long currentMaxIndexValue46 = 0;\n        long currentMaxIndexValue47\
    \ = 0;\n        long currentMaxIndexValue48 = 0;\n        long currentMaxIndexValue49\
    \ = 0;\n        long currentMaxIndexValue50 = 0;\n        long currentMaxIndexValue51\
    \ = 0;\n        long currentMaxIndexValue52 = 0;\n        long currentMaxIndexValue53\
    \ = 0;\n        long currentMaxIndexValue54\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L,\
    \ (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new\
    \ long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpr8mz57to.cs(69,36): error CS1002: ; expected

    '
  timestamp: 1660008889
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    public\
    \ static List<long> RollingMax(List<long> numbers) {\n        List<long> result\
    \ = new List<long>();\n        long maxValue = numbers.Max();\n        long currentMax\
    \ = maxValue;\n        long currentSum = 0;\n        long currentCount = 0;\n\
    \        foreach (long number in numbers) {\n            currentSum += number;\n\
    \            if (currentSum > currentMax) {\n                currentMax = currentSum;\n\
    \                currentCount = 1;\n            }\n            else if (currentSum\
    \ == currentMax) {\n                currentCount++;\n            }\n         \
    \   else {\n                currentCount = 1;\n                currentMax = currentSum;\n\
    \            }\n            result.Add(currentMax);\n        }\n        return\
    \ result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(RollingMax((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(RollingMax((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new\
    \ List<long>(new long[]{(long)4L, (long)3L, (long)2L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.InvalidOperationException: Sequence contains\
    \ no elements\n  at System.Linq.Enumerable.Max (System.Collections.Generic.IEnumerable`1[T]\
    \ source) [0x00022] in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem.RollingMax\
    \ (System.Collections.Generic.List`1[T] numbers) [0x00007] in <23032399da6d48fea469248d92df5a7e>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <23032399da6d48fea469248d92df5a7e>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.InvalidOperationException: Sequence\
    \ contains no elements\n  at System.Linq.Enumerable.Max (System.Collections.Generic.IEnumerable`1[T]\
    \ source) [0x00022] in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem.RollingMax\
    \ (System.Collections.Generic.List`1[T] numbers) [0x00007] in <23032399da6d48fea469248d92df5a7e>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <23032399da6d48fea469248d92df5a7e>:0\
    \ \n"
  stdout: ''
  timestamp: 1660008891
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    public\
    \ static List<long> RollingMax(List<long> numbers) {\n        List<long> result\
    \ = new List<long>();\n        long maxValue = numbers.Max();\n        long currentMax\
    \ = maxValue;\n        long currentMaxIndex = 0;\n        long currentMaxIndexValue\
    \ = 0;\n        long currentMaxIndexValue2 = 0;\n        long currentMaxIndexValue3\
    \ = 0;\n        long currentMaxIndexValue4 = 0;\n        long currentMaxIndexValue5\
    \ = 0;\n        long currentMaxIndexValue6 = 0;\n        long currentMaxIndexValue7\
    \ = 0;\n        long currentMaxIndexValue8 = 0;\n        long currentMaxIndexValue9\
    \ = 0;\n        long currentMaxIndexValue10 = 0;\n        long currentMaxIndexValue11\
    \ = 0;\n        long currentMaxIndexValue12 = 0;\n        long currentMaxIndexValue13\
    \ = 0;\n        long currentMaxIndexValue14 = 0;\n        long currentMaxIndexValue15\
    \ = 0;\n        long currentMaxIndexValue16 = 0;\n        long currentMaxIndexValue17\
    \ = 0;\n        long currentMaxIndexValue18 = 0;\n        long currentMaxIndexValue19\
    \ = 0;\n        long currentMaxIndexValue20 = 0;\n        long currentMaxIndexValue21\
    \ = 0;\n        long currentMaxIndexValue22 = 0;\n        long currentMaxIndexValue23\
    \ = 0;\n        long currentMaxIndexValue24 = 0;\n        long currentMaxIndexValue25\
    \ = 0;\n        long currentMaxIndexValue26 = 0;\n        long currentMaxIndexValue27\
    \ = 0;\n        long currentMaxIndexValue28 = 0;\n        long currentMaxIndexValue29\
    \ = 0;\n        long currentMaxIndexValue30 = 0;\n        long currentMaxIndexValue31\
    \ = 0;\n        long currentMaxIndexValue32 = 0;\n        long currentMaxIndexValue33\
    \ = 0;\n        long currentMaxIndexValue34 = 0;\n        long currentMaxIndexValue35\
    \ = 0;\n        long currentMaxIndexValue36 = 0;\n        long currentMaxIndexValue37\
    \ = 0;\n        long currentMaxIndexValue38 = 0;\n        long currentMaxIndexValue39\
    \ = 0;\n        long currentMaxIndexValue40 = 0;\n        long currentMaxIndexValue41\
    \ = 0;\n        long currentMaxIndexValue42 = 0;\n        long currentMaxIndexValue43\
    \ = 0;\n        long currentMaxIndexValue44 = 0;\n        long currentMaxIndexValue45\
    \ = 0;\n        long currentMaxIndexValue46 = 0;\n        long currentMaxIndexValue47\
    \ = 0;\n        long currentMaxIndexValue48 = 0;\n        long currentMaxIndexValue49\
    \ = 0;\n        long currentMaxIndexValue50 = 0;\n        long currentMaxIndexValue51\
    \ = 0;\n        long currentMaxIndexValue52 = 0;\n        long currentMaxIndexValue53\
    \ = 0;\n        long currentMaxIndexValue54\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L,\
    \ (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new\
    \ long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp0ues37ym.cs(69,36): error CS1002: ; expected

    '
  timestamp: 1660008889
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    public\
    \ static List<long> RollingMax(List<long> numbers) {\n        List<long> result\
    \ = new List<long>();\n        long maxValue = numbers.Max();\n        long currentMax\
    \ = maxValue;\n        long currentSum = 0;\n        long currentSumOfSquares\
    \ = 0;\n        long currentSumOfSquareOfDifferences = 0;\n        long currentSumOfSquareOfDifferenceOfDifferences\
    \ = 0;\n        long currentSumOfSquareOfDifferenceOfDifferenceOfDifferences =\
    \ 0;\n        long currentSumOfSquareOfDifferenceOfDifferenceOfDifferenceOfDifferences\
    \ = 0;\n        long currentSumOfSquareOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferences\
    \ = 0;\n        long currentSumOfSquareOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferences\
    \ = 0;\n        long currentSumOfSquareOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferences\
    \ = 0;\n        long currentSumOfSquareOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferences\
    \ = 0;\n        long currentSumOfSquareOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferences\
    \ = 0;\n        long currentSumOfSquareOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferences\
    \ = 0;\n        long currentSumOfSquareOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferences\
    \ = 0;\n        long currentSumOfSquareOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferences\
    \ = 0;\n        long currentSumOfSquareOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferences\
    \ = 0;\n        long currentSumOfSquareOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferences\
    \ = 0;\n        long currentSumOfSquareOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferences\
    \ = 0;\n        long currentSumOfSquareOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferences\
    \ = 0;\n        long currentSumOfSquareOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferences\
    \ = 0;\n        long currentSumOfSquareOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferences\
    \ = 0;\n        long currentSumOfSquareOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferences\
    \ = 0;\n        long currentSumOfSquareOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferences\
    \ = 0;\n        long currentSumOfSquareOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferences\
    \ = 0;\n        long currentSumOfSquareOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferences\
    \ = 0;\n        long currentSumOfSquareOfDifferenceOfDifferenceOfDifference\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(RollingMax((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(RollingMax((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new\
    \ List<long>(new long[]{(long)4L, (long)3L, (long)2L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpah9mv3ij.cs(39,68): error CS1002: ; expected

    '
  timestamp: 1660008891
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    public\
    \ static List<long> RollingMax(List<long> numbers) {\n        List<long> max =\
    \ new List<long>();\n        long maxValue = numbers.Max();\n        long currentMax\
    \ = maxValue;\n        long currentMaxIndex = 0;\n        foreach (long number\
    \ in numbers) {\n            if (number > currentMax) {\n                currentMax\
    \ = number;\n                currentMaxIndex = max.Count;\n            }\n   \
    \         max.Add(number);\n        }\n        max.Add(currentMax);\n        max.Add(currentMaxIndex);\n\
    \        return max;\n    }\n    public static void Main(string[] args) {\n  \
    \  Debug.Assert(RollingMax((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L,\
    \ (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new\
    \ long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n    }\n\n\
    }\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.InvalidOperationException: Sequence contains\
    \ no elements\n  at System.Linq.Enumerable.Max (System.Collections.Generic.IEnumerable`1[T]\
    \ source) [0x00022] in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem.RollingMax\
    \ (System.Collections.Generic.List`1[T] numbers) [0x00007] in <6bd5d0d1ef0d4c7d8c7cf6c95e62e4fe>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <6bd5d0d1ef0d4c7d8c7cf6c95e62e4fe>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.InvalidOperationException: Sequence\
    \ contains no elements\n  at System.Linq.Enumerable.Max (System.Collections.Generic.IEnumerable`1[T]\
    \ source) [0x00022] in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem.RollingMax\
    \ (System.Collections.Generic.List`1[T] numbers) [0x00007] in <6bd5d0d1ef0d4c7d8c7cf6c95e62e4fe>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <6bd5d0d1ef0d4c7d8c7cf6c95e62e4fe>:0\
    \ \n"
  stdout: ''
  timestamp: 1660008891
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    public\
    \ static List<long> RollingMax(List<long> numbers) {\n        List<long> result\
    \ = new List<long>();\n        long maxValue = numbers.Max();\n        long currentMax\
    \ = maxValue;\n        long currentMaxIndex = 0;\n        long currentMaxIndex2\
    \ = 0;\n        long currentMaxIndex3 = 0;\n        long currentMaxIndex4 = 0;\n\
    \        long currentMaxIndex5 = 0;\n        long currentMaxIndex6 = 0;\n    \
    \    long currentMaxIndex7 = 0;\n        long currentMaxIndex8 = 0;\n        long\
    \ currentMaxIndex9 = 0;\n        long currentMaxIndex10 = 0;\n        long currentMaxIndex11\
    \ = 0;\n        long currentMaxIndex12 = 0;\n        long currentMaxIndex13 =\
    \ 0;\n        long currentMaxIndex14 = 0;\n        long currentMaxIndex15 = 0;\n\
    \        long currentMaxIndex16 = 0;\n        long currentMaxIndex17 = 0;\n  \
    \      long currentMaxIndex18 = 0;\n        long currentMaxIndex19 = 0;\n    \
    \    long currentMaxIndex20 = 0;\n        long currentMaxIndex21 = 0;\n      \
    \  long currentMaxIndex22 = 0;\n        long currentMaxIndex23 = 0;\n        long\
    \ currentMaxIndex24 = 0;\n        long currentMaxIndex25 = 0;\n        long currentMaxIndex26\
    \ = 0;\n        long currentMaxIndex27 = 0;\n        long currentMaxIndex28 =\
    \ 0;\n        long currentMaxIndex29 = 0;\n        long currentMaxIndex30 = 0;\n\
    \        long currentMaxIndex31 = 0;\n        long currentMaxIndex32 = 0;\n  \
    \      long currentMaxIndex33 = 0;\n        long currentMaxIndex34 = 0;\n    \
    \    long currentMaxIndex35 = 0;\n        long currentMaxIndex36 = 0;\n      \
    \  long currentMaxIndex37 = 0;\n        long currentMaxIndex38 = 0;\n        long\
    \ currentMaxIndex39 = 0;\n        long currentMaxIndex40 = 0;\n        long currentMaxIndex41\
    \ = 0;\n        long currentMaxIndex42 = 0;\n        long currentMaxIndex43 =\
    \ 0;\n        long currentMaxIndex44 = 0;\n        long currentMaxIndex45 = 0;\n\
    \        long currentMaxIndex46 = 0;\n        long currentMaxIndex47 = 0;\n  \
    \      long currentMaxIndex48 = 0;\n        long currentMaxIndex49 = 0;\n    \
    \    long currentMaxIndex50 = 0;\n        long currentMaxIndex51 = 0;\n      \
    \  long currentMaxIndex52 = 0;\n        long currentMaxIndex53 = 0;\n        long\
    \ currentMaxIndex54 = 0;\n        long currentMaxIndex55 = 0;\n        long currentMaxIndex56\
    \ = 0;\n        long currentMaxIndex57 = 0;\n        long currentMaxIndex58 =\
    \ 0;\n        long currentMaxIndex59 = 0;\n        long currentMaxIndex60 = 0;\n\
    \        long currentMaxIndex61 = 0;\n        long current\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new\
    \ long[]{(long)4L, (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmphd0j6__f.cs(76,21): error CS1002: ; expected

    '
  timestamp: 1660008889
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    public\
    \ static List<long> RollingMax(List<long> numbers) {\n        List<long> result\
    \ = new List<long>();\n        long maxValue = numbers.Max();\n        long currentMax\
    \ = maxValue;\n        long currentMaxIndex = 0;\n        long currentMaxIndexValue\
    \ = 0;\n        long currentMaxIndexValue2 = 0;\n        long currentMaxIndexValue3\
    \ = 0;\n        long currentMaxIndexValue4 = 0;\n        long currentMaxIndexValue5\
    \ = 0;\n        long currentMaxIndexValue6 = 0;\n        long currentMaxIndexValue7\
    \ = 0;\n        long currentMaxIndexValue8 = 0;\n        long currentMaxIndexValue9\
    \ = 0;\n        long currentMaxIndexValue10 = 0;\n        long currentMaxIndexValue11\
    \ = 0;\n        long currentMaxIndexValue12 = 0;\n        long currentMaxIndexValue13\
    \ = 0;\n        long currentMaxIndexValue14 = 0;\n        long currentMaxIndexValue15\
    \ = 0;\n        long currentMaxIndexValue16 = 0;\n        long currentMaxIndexValue17\
    \ = 0;\n        long currentMaxIndexValue18 = 0;\n        long currentMaxIndexValue19\
    \ = 0;\n        long currentMaxIndexValue20 = 0;\n        long currentMaxIndexValue21\
    \ = 0;\n        long currentMaxIndexValue22 = 0;\n        long currentMaxIndexValue23\
    \ = 0;\n        long currentMaxIndexValue24 = 0;\n        long currentMaxIndexValue25\
    \ = 0;\n        long currentMaxIndexValue26 = 0;\n        long currentMaxIndexValue27\
    \ = 0;\n        long currentMaxIndexValue28 = 0;\n        long currentMaxIndexValue29\
    \ = 0;\n        long currentMaxIndexValue30 = 0;\n        long currentMaxIndexValue31\
    \ = 0;\n        long currentMaxIndexValue32 = 0;\n        long currentMaxIndexValue33\
    \ = 0;\n        long currentMaxIndexValue34 = 0;\n        long currentMaxIndexValue35\
    \ = 0;\n        long currentMaxIndexValue36 = 0;\n        long currentMaxIndexValue37\
    \ = 0;\n        long currentMaxIndexValue38 = 0;\n        long currentMaxIndexValue39\
    \ = 0;\n        long currentMaxIndexValue40 = 0;\n        long currentMaxIndexValue41\
    \ = 0;\n        long currentMaxIndexValue42 = 0;\n        long currentMaxIndexValue43\
    \ = 0;\n        long currentMaxIndexValue44 = 0;\n        long currentMaxIndexValue45\
    \ = 0;\n        long currentMaxIndexValue46 = 0;\n        long currentMaxIndexValue47\
    \ = 0;\n        long currentMaxIndexValue48 = 0;\n        long currentMaxIndexValue49\
    \ = 0;\n        long currentMaxIndexValue50 = 0;\n        long currentMaxIndexValue51\
    \ = 0;\n        long currentMaxIndexValue52 = 0;\n        long currentMaxIndexValue53\
    \ = 0;\n        long currentMaxIndexValue54\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L,\
    \ (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new\
    \ long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp0ues37ym.cs(69,36): error CS1002: ; expected

    '
  timestamp: 1660008889
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    public\
    \ static List<long> RollingMax(List<long> numbers) {\n        List<long> result\
    \ = new List<long>();\n        long maxValue = numbers.Max();\n        long currentMax\
    \ = maxValue;\n        long currentSum = 0;\n        long currentSumOfSquares\
    \ = 0;\n        long currentSumOfProducts = 0;\n        long currentSumOfProductsOfSquares\
    \ = 0;\n        long currentSumOfProductsOfProducts = 0;\n        long currentSumOfProductsOfProductsOfSquares\
    \ = 0;\n        long currentSumOfProductsOfProductsOfProducts = 0;\n        long\
    \ currentSumOfProductsOfProductsOfProductsOfSquares = 0;\n        long currentSumOfProductsOfProductsOfProductsOfProducts\
    \ = 0;\n        long currentSumOfProductsOfProductsOfProductsOfProductsOfSquares\
    \ = 0;\n        long currentSumOfProductsOfProductsOfProductsOfProductsOfProducts\
    \ = 0;\n        long currentSumOfProductsOfProductsOfProductsOfProductsOfProductsOfSquares\
    \ = 0;\n        long currentSumOfProductsOfProductsOfProductsOfProductsOfProductsOfProducts\
    \ = 0;\n        long currentSumOfProductsOfProductsOfProductsOfProductsOfProductsOfProductsOfSquares\
    \ = 0;\n        long currentSumOfProductsOfProductsOfProductsOfProductsOfProductsOfProductsOfProducts\
    \ = 0;\n        long currentSumOfProductsOfProductsOfProductsOfProductsOfProductsOfProductsOfProductsOfSquares\
    \ = 0;\n        long currentSumOfProductsOfProductsOfProductsOfProductsOfProductsOfProductsOfProductsOfProducts\
    \ = 0;\n        long currentSumOfProductsOfProductsOfProductsOfProductsOfProductsOfProductsOfProductsOfProductsOfSquares\
    \ = 0;\n        long currentSumOfProductsOfProductsOfProductsOfProductsOfProductsOfProductsOfProductsOfProductsOfProductsOfProducts\
    \ = 0;\n        long currentSumOfProductsOfProductsOfProductsOfProductsOfProductsOfProductsOfProductsOfProductsOfProductsOfSquares\
    \ = 0;\n        long currentSumOfProductsOfProductsOfProductsOfProductsOfProductsOfProductsOfProductsOfProductsOfProductsOfProductsOfProductsOfSquares\
    \ = 0;\n        long currentSumOfProductsOfProductsOfProductsOfProductsOfProductsOfProductsOfProductsOfProductsOfProductsOfProductsOfProductsOfProductsOf\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(RollingMax((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(RollingMax((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new\
    \ List<long>(new long[]{(long)4L, (long)3L, (long)2L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp2meb1stc.cs(36,146): error CS1002: ; expected

    '
  timestamp: 1660008891
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    public\
    \ static List<long> RollingMax(List<long> numbers) {\n        List<long> result\
    \ = new List<long>();\n        long max = 0;\n        long currentMax = 0;\n \
    \       long currentMaxIndex = 0;\n        long currentMaxValue = numbers[0];\n\
    \        long currentMaxValueIndex = numbers.IndexOf(currentMaxValue);\n     \
    \   long currentMaxValueValue = currentMaxValue;\n        long currentMaxValueValueIndex\
    \ = numbers.IndexOf(currentMaxValueValue);\n        long currentMaxValueValueValue\
    \ = currentMaxValueValue;\n        long currentMaxValueValueValueIndex = numbers.IndexOf(currentMaxValueValueValue);\n\
    \        long currentMaxValueValueValueValue = currentMaxValueValueValue;\n  \
    \      long currentMaxValueValueValueIndex = numbers.IndexOf(currentMaxValueValueValueValue);\n\
    \        long currentMaxValueValueValueValue = currentMaxValueValueValueIndex;\n\
    \        long currentMaxValueValueValueIndex = numbers.IndexOf(currentMaxValueValueValueValue);\n\
    \        long currentMaxValueValueValueValue = currentMaxValueValueValueIndex;\n\
    \        long currentMaxValueValueValueIndex = numbers.IndexOf(currentMaxValueValueValueValue);\n\
    \        long currentMaxValueValueValueValue = currentMaxValueValueValueIndex;\n\
    \        long currentMaxValueValueValueIndex = numbers.IndexOf(currentMaxValueValueValueValue);\n\
    \        long currentMaxValueValueValueValue = currentMaxValueValueValueIndex;\n\
    \        long currentMaxValueValueValueIndex = numbers.IndexOf(currentMaxValueValueValueValue);\n\
    \        long currentMaxValueValueValueValue = currentMaxValueValueValueIndex;\n\
    \        long currentMaxValueValueValueIndex = numbers.IndexOf(currentMaxValueValueValueValue);\n\
    \        long currentMaxValueValueValueValue = currentMaxValueValueValueIndex;\n\
    \        long currentMaxValueValueValueIndex = numbers.IndexOf(currentMaxValueValueValueValue);\n\
    \        long currentMaxValueValueValueValue = currentMaxValueValueValueIndex;\n\
    \        long currentMaxValueValueValueIndex = numbers.IndexOf(currentMaxValueValueValueValue);\n\
    \        long currentMaxValueValueValueValue = currentMaxValueValueValueIndex;\n\
    \        long currentMaxValueValueValueIndex = numbers.IndexOf(currentMaxValueValueValueValue);\n\
    \        long currentMaxValueValueValueValue = currentMaxValueValueValueIndex;\n\
    \        long currentMaxValueValueValueIndex = numbers.IndexOf(currentMaxValueValueValueValue);\n\
    \        long currentMaxValueValueValueValue = currentMaxValueValueValueIndex;\n\
    \        long currentMaxValueValueValueIndex = numbers.IndexOf(currentMaxValueValueValueValue);\n\
    \        long currentMaxValueValueValueValue = currentMaxValueValueValueIndex;\n\
    \        long currentMaxValueValueValueIndex = numbers.IndexOf(currentMaxValueValueValueValue);\n\
    \        long currentMaxValueValueValueValue = currentMaxValueValueValueIndex;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(RollingMax((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(RollingMax((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new\
    \ List<long>(new long[]{(long)4L, (long)3L, (long)2L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpy670slrc.cs(23,14): error CS0128: A local variable or function named ''currentMaxValueValueValueIndex''
    is already defined in this scope

    /tmp/tmpy670slrc.cs(24,14): error CS0128: A local variable or function named ''currentMaxValueValueValueValue''
    is already defined in this scope

    /tmp/tmpy670slrc.cs(25,14): error CS0128: A local variable or function named ''currentMaxValueValueValueIndex''
    is already defined in this scope

    /tmp/tmpy670slrc.cs(26,14): error CS0128: A local variable or function named ''currentMaxValueValueValueValue''
    is already defined in this scope

    /tmp/tmpy670slrc.cs(27,14): error CS0128: A local variable or function named ''currentMaxValueValueValueIndex''
    is already defined in this scope

    /tmp/tmpy670slrc.cs(28,14): error CS0128: A local variable or function named ''currentMaxValueValueValueValue''
    is already defined in this scope

    /tmp/tmpy670slrc.cs(29,14): error CS0128: A local variable or function named ''currentMaxValueValueValueIndex''
    is already defined in this scope

    /tmp/tmpy670slrc.cs(30,14): error CS0128: A local variable or function named ''currentMaxValueValueValueValue''
    is already defined in this scope

    /tmp/tmpy670slrc.cs(31,14): error CS0128: A local variable or function named ''currentMaxValueValueValueIndex''
    is already defined in this scope

    /tmp/tmpy670slrc.cs(32,14): error CS0128: A local variable or function named ''currentMaxValueValueValueValue''
    is already defined in this scope

    /tmp/tmpy670slrc.cs(33,14): error CS0128: A local variable or function named ''currentMaxValueValueValueIndex''
    is already defined in this scope

    /tmp/tmpy670slrc.cs(34,14): error CS0128: A local variable or function named ''currentMaxValueValueValueValue''
    is already defined in this scope

    /tmp/tmpy670slrc.cs(35,14): error CS0128: A local variable or function named ''currentMaxValueValueValueIndex''
    is already defined in this scope

    /tmp/tmpy670slrc.cs(36,14): error CS0128: A local variable or '
  timestamp: 1660008891
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    public\
    \ static List<long> RollingMax(List<long> numbers) {\n        List<long> max =\
    \ new List<long>();\n        long maxElement = numbers.Max();\n        long currentMax\
    \ = maxElement;\n        long currentMaxIndex = -1;\n        long currentMaxIndex2\
    \ = -1;\n        long currentMaxIndex3 = -1;\n        long currentMaxIndex4 =\
    \ -1;\n        long currentMaxIndex5 = -1;\n        long currentMaxIndex6 = -1;\n\
    \        long currentMaxIndex7 = -1;\n        long currentMaxIndex8 = -1;\n  \
    \      long currentMaxIndex9 = -1;\n        long currentMaxIndex10 = -1;\n   \
    \     long currentMaxIndex11 = -1;\n        long currentMaxIndex12 = -1;\n   \
    \     long currentMaxIndex13 = -1;\n        long currentMaxIndex14 = -1;\n   \
    \     long currentMaxIndex15 = -1;\n        long currentMaxIndex16 = -1;\n   \
    \     long currentMaxIndex17 = -1;\n        long currentMaxIndex18 = -1;\n   \
    \     long currentMaxIndex19 = -1;\n        long currentMaxIndex20 = -1;\n   \
    \     long currentMaxIndex21 = -1;\n        long currentMaxIndex22 = -1;\n   \
    \     long currentMaxIndex23 = -1;\n        long currentMaxIndex24 = -1;\n   \
    \     long currentMaxIndex25 = -1;\n        long currentMaxIndex26 = -1;\n   \
    \     long currentMaxIndex27 = -1;\n        long currentMaxIndex28 = -1;\n   \
    \     long currentMaxIndex29 = -1;\n        long currentMaxIndex30 = -1;\n   \
    \     long currentMaxIndex31 = -1;\n        long currentMaxIndex32 = -1;\n   \
    \     long currentMaxIndex33 = -1;\n        long currentMaxIndex34 = -1;\n   \
    \     long currentMaxIndex35 = -1;\n        long currentMaxIndex36 = -1;\n   \
    \     long currentMaxIndex37 = -1;\n        long currentMaxIndex38 = -1;\n   \
    \     long currentMaxIndex39 = -1;\n        long currentMaxIndex40 = -1;\n   \
    \     long currentMaxIndex41 = -1;\n        long currentMaxIndex42 = -1;\n   \
    \     long currentMaxIndex43 = -1;\n        long currentMaxIndex44 = -1;\n   \
    \     long currentMaxIndex45 = -1;\n        long currentMaxIndex46 = -1;\n   \
    \     long currentMaxIndex47 = -1;\n        long currentMaxIndex48 = -1;\n   \
    \     long currentMaxIndex49 = -1;\n        long currentMaxIndex50 = -1;\n   \
    \     long currentMaxIndex51 = -1;\n        long currentMaxIndex52 = -1;\n   \
    \     long currentMaxIndex53 = -1;\n        long currentMaxIndex54 = -1;\n   \
    \     long currentMaxIndex55 = -1;\n        long current\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new\
    \ long[]{(long)4L, (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpd8msbb37.cs(70,21): error CS1002: ; expected

    '
  timestamp: 1660008891
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    public\
    \ static List<long> RollingMax(List<long> numbers) {\n        List<long> max =\
    \ new List<long>();\n        long maxValue = numbers.Max();\n        long currentMaxValue\
    \ = maxValue;\n        long currentMaxIndex = 0;\n        long currentMaxIndexValue\
    \ = 0;\n        long currentMaxIndexValue2 = 0;\n        long currentMaxIndexValue3\
    \ = 0;\n        long currentMaxIndexValue4 = 0;\n        long currentMaxIndexValue5\
    \ = 0;\n        long currentMaxIndexValue6 = 0;\n        long currentMaxIndexValue7\
    \ = 0;\n        long currentMaxIndexValue8 = 0;\n        long currentMaxIndexValue9\
    \ = 0;\n        long currentMaxIndexValue10 = 0;\n        long currentMaxIndexValue11\
    \ = 0;\n        long currentMaxIndexValue12 = 0;\n        long currentMaxIndexValue13\
    \ = 0;\n        long currentMaxIndexValue14 = 0;\n        long currentMaxIndexValue15\
    \ = 0;\n        long currentMaxIndexValue16 = 0;\n        long currentMaxIndexValue17\
    \ = 0;\n        long currentMaxIndexValue18 = 0;\n        long currentMaxIndexValue19\
    \ = 0;\n        long currentMaxIndexValue20 = 0;\n        long currentMaxIndexValue21\
    \ = 0;\n        long currentMaxIndexValue22 = 0;\n        long currentMaxIndexValue23\
    \ = 0;\n        long currentMaxIndexValue24 = 0;\n        long currentMaxIndexValue25\
    \ = 0;\n        long currentMaxIndexValue26 = 0;\n        long currentMaxIndexValue27\
    \ = 0;\n        long currentMaxIndexValue28 = 0;\n        long currentMaxIndexValue29\
    \ = 0;\n        long currentMaxIndexValue30 = 0;\n        long currentMaxIndexValue31\
    \ = 0;\n        long currentMaxIndexValue32 = 0;\n        long currentMaxIndexValue33\
    \ = 0;\n        long currentMaxIndexValue34 = 0;\n        long currentMaxIndexValue35\
    \ = 0;\n        long currentMaxIndexValue36 = 0;\n        long currentMaxIndexValue37\
    \ = 0;\n        long currentMaxIndexValue38 = 0;\n        long currentMaxIndexValue39\
    \ = 0;\n        long currentMaxIndexValue40 = 0;\n        long currentMaxIndexValue41\
    \ = 0;\n        long currentMaxIndexValue42 = 0;\n        long currentMaxIndexValue43\
    \ = 0;\n        long currentMaxIndexValue44 = 0;\n        long currentMaxIndexValue45\
    \ = 0;\n        long currentMaxIndexValue46 = 0;\n        long currentMaxIndexValue47\
    \ = 0;\n        long currentMaxIndexValue48 = 0;\n        long currentMaxIndexValue49\
    \ = 0;\n        long currentMaxIndexValue50 = 0;\n        long currentMaxIndexValue51\
    \ = 0;\n        long currentMaxIndexValue52 = 0;\n        long currentMaxIndexValue53\
    \ = 0;\n        long currentMaxIndexValue54\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L,\
    \ (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new\
    \ long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp84hq7130.cs(69,36): error CS1002: ; expected

    '
  timestamp: 1660008891
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    public\
    \ static List<long> RollingMax(List<long> numbers) {\n        List<long> result\
    \ = new List<long>();\n        long maxValue = numbers.Max();\n        long currentMaxValue\
    \ = maxValue;\n        long currentMaxIndex = 0;\n        long currentMaxIndexValue\
    \ = 0;\n        long currentMaxIndexValue2 = 0;\n        long currentMaxIndexValue3\
    \ = 0;\n        long currentMaxIndexValue4 = 0;\n        long currentMaxIndexValue5\
    \ = 0;\n        long currentMaxIndexValue6 = 0;\n        long currentMaxIndexValue7\
    \ = 0;\n        long currentMaxIndexValue8 = 0;\n        long currentMaxIndexValue9\
    \ = 0;\n        long currentMaxIndexValue10 = 0;\n        long currentMaxIndexValue11\
    \ = 0;\n        long currentMaxIndexValue12 = 0;\n        long currentMaxIndexValue13\
    \ = 0;\n        long currentMaxIndexValue14 = 0;\n        long currentMaxIndexValue15\
    \ = 0;\n        long currentMaxIndexValue16 = 0;\n        long currentMaxIndexValue17\
    \ = 0;\n        long currentMaxIndexValue18 = 0;\n        long currentMaxIndexValue19\
    \ = 0;\n        long currentMaxIndexValue20 = 0;\n        long currentMaxIndexValue21\
    \ = 0;\n        long currentMaxIndexValue22 = 0;\n        long currentMaxIndexValue23\
    \ = 0;\n        long currentMaxIndexValue24 = 0;\n        long currentMaxIndexValue25\
    \ = 0;\n        long currentMaxIndexValue26 = 0;\n        long currentMaxIndexValue27\
    \ = 0;\n        long currentMaxIndexValue28 = 0;\n        long currentMaxIndexValue29\
    \ = 0;\n        long currentMaxIndexValue30 = 0;\n        long currentMaxIndexValue31\
    \ = 0;\n        long currentMaxIndexValue32 = 0;\n        long currentMaxIndexValue33\
    \ = 0;\n        long currentMaxIndexValue34 = 0;\n        long currentMaxIndexValue35\
    \ = 0;\n        long currentMaxIndexValue36 = 0;\n        long currentMaxIndexValue37\
    \ = 0;\n        long currentMaxIndexValue38 = 0;\n        long currentMaxIndexValue39\
    \ = 0;\n        long currentMaxIndexValue40 = 0;\n        long currentMaxIndexValue41\
    \ = 0;\n        long currentMaxIndexValue42 = 0;\n        long currentMaxIndexValue43\
    \ = 0;\n        long currentMaxIndexValue44 = 0;\n        long currentMaxIndexValue45\
    \ = 0;\n        long currentMaxIndexValue46 = 0;\n        long currentMaxIndexValue47\
    \ = 0;\n        long currentMaxIndexValue48 = 0;\n        long currentMaxIndexValue49\
    \ = 0;\n        long currentMaxIndexValue50 = 0;\n        long currentMaxIndexValue51\
    \ = 0;\n        long currentMaxIndexValue52 = 0;\n        long currentMaxIndexValue53\
    \ = 0;\n        long currentMaxIndexValue54\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L,\
    \ (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new\
    \ long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpr8mz57to.cs(69,36): error CS1002: ; expected

    '
  timestamp: 1660008889
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    public\
    \ static List<long> RollingMax(List<long> numbers) {\n        List<long> max =\
    \ new List<long>();\n        long maxNumber = 0;\n        long currentMax = 0;\n\
    \        long currentNumber = 0;\n        long currentSum = 0;\n        long sum\
    \ = 0;\n        long sumOfSquares = 0;\n        long square = 0;\n        long\
    \ sumOfSquareOfDifferences = 0;\n        long difference = 0;\n        long differenceOfSquares\
    \ = 0;\n        long differenceSquare = 0;\n        long differenceSquareOfDifferences\
    \ = 0;\n        long differenceSquareSquare = 0;\n        long differenceSquareSquareOfDifferences\
    \ = 0;\n        long differenceSquareSquareSquare = 0;\n        long differenceSquareSquareSquareOfDifferences\
    \ = 0;\n        long differenceSquareSquareSquareSquare = 0;\n        long differenceSquareSquareSquareOfDifferences\
    \ = 0;\n        long differenceSquareSquareSquareSquare = 0;\n        long differenceSquareSquareSquareOfDifferences\
    \ = 0;\n        long differenceSquareSquareSquareSquare = 0;\n        long differenceSquareSquareSquareOfDifferences\
    \ = 0;\n        long differenceSquareSquareSquareSquare = 0;\n        long differenceSquareSquareSquareOfDifferences\
    \ = 0;\n        long differenceSquareSquareSquareSquare = 0;\n        long differenceSquareSquareSquareOfDifferences\
    \ = 0;\n        long differenceSquareSquareSquareSquare = 0;\n        long differenceSquareSquareSquareOfDifferences\
    \ = 0;\n        long differenceSquareSquareSquareSquare = 0;\n        long differenceSquareSquareSquareOfDifferences\
    \ = 0;\n        long differenceSquareSquareSquareSquare = 0;\n        long differenceSquareSquareSquareOfDifferences\
    \ = 0;\n        long differenceSquareSquareSquareSquare = 0;\n        long differenceSquareSquareSquareOfDifferences\
    \ = 0;\n        long differenceSquareSquareSquareSquare = 0;\n        long differenceSquareSquareSquareOfDifferences\
    \ = 0;\n        long differenceSquareSquareSquareSquare = 0;\n        long differenceSquareSquareSquareOfDifferences\
    \ = 0;\n        long differenceSquareSquareSquareSquare = 0;\n        long differenceSquareSquareSquareOfDifferences\
    \ = 0;\n        long differenceSquareSquareSquareSquare = 0;\n        long differenceSquareSquareSquareOfDifferences\
    \ = 0;\n        long differenceSquareSquareSquareSquare = 0;\n        long differenceSquareSquareSquareOfDifferences\
    \ = 0;\n        long differenceSquareSquareSquareSquare = 0;\n        long differenceSquareSquareSquareOfDifferences\
    \ = 0;\n        long differenceSquareSquareSquareSquare = 0;\n        long differenceSquareSquareSquareOfDifferences\
    \ = 0;\n        long differenceSquareSquareSquareSquare = 0;\n        long differenceSquareSquareSquareOfDifferences\
    \ = 0;\n        long differenceSquareSquareSquareSquare = 0;\n        long differenceSquareSquareSquareOfDifferences\
    \ = 0;\n        long differenceSquareSquareSquareSquare = 0;\n        long differenceSquareSquareSquareOfDifferences\
    \ = 0;\n        long differenceSquareSquareSquareSquare = 0;\n        long differenceSquareSquareSquareOfDifferences\
    \ = 0;\n        long differenceSquareSquareSquareSquare = 0;\n        long difference\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(RollingMax((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(RollingMax((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new\
    \ List<long>(new long[]{(long)4L, (long)3L, (long)2L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp2te_4xm6.cs(70,24): error CS1002: ; expected

    '
  timestamp: 1660008891
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    public\
    \ static List<long> RollingMax(List<long> numbers) {\n        List<long> result\
    \ = new List<long>();\n        long maxValue = numbers.Max();\n        long currentMaxValue\
    \ = maxValue;\n        long currentMaxIndex = 0;\n        long currentMaxIndexValue\
    \ = 0;\n        long currentMaxIndexValue2 = 0;\n        long currentMaxIndexValue3\
    \ = 0;\n        long currentMaxIndexValue4 = 0;\n        long currentMaxIndexValue5\
    \ = 0;\n        long currentMaxIndexValue6 = 0;\n        long currentMaxIndexValue7\
    \ = 0;\n        long currentMaxIndexValue8 = 0;\n        long currentMaxIndexValue9\
    \ = 0;\n        long currentMaxIndexValue10 = 0;\n        long currentMaxIndexValue11\
    \ = 0;\n        long currentMaxIndexValue12 = 0;\n        long currentMaxIndexValue13\
    \ = 0;\n        long currentMaxIndexValue14 = 0;\n        long currentMaxIndexValue15\
    \ = 0;\n        long currentMaxIndexValue16 = 0;\n        long currentMaxIndexValue17\
    \ = 0;\n        long currentMaxIndexValue18 = 0;\n        long currentMaxIndexValue19\
    \ = 0;\n        long currentMaxIndexValue20 = 0;\n        long currentMaxIndexValue21\
    \ = 0;\n        long currentMaxIndexValue22 = 0;\n        long currentMaxIndexValue23\
    \ = 0;\n        long currentMaxIndexValue24 = 0;\n        long currentMaxIndexValue25\
    \ = 0;\n        long currentMaxIndexValue26 = 0;\n        long currentMaxIndexValue27\
    \ = 0;\n        long currentMaxIndexValue28 = 0;\n        long currentMaxIndexValue29\
    \ = 0;\n        long currentMaxIndexValue30 = 0;\n        long currentMaxIndexValue31\
    \ = 0;\n        long currentMaxIndexValue32 = 0;\n        long currentMaxIndexValue33\
    \ = 0;\n        long currentMaxIndexValue34 = 0;\n        long currentMaxIndexValue35\
    \ = 0;\n        long currentMaxIndexValue36 = 0;\n        long currentMaxIndexValue37\
    \ = 0;\n        long currentMaxIndexValue38 = 0;\n        long currentMaxIndexValue39\
    \ = 0;\n        long currentMaxIndexValue40 = 0;\n        long currentMaxIndexValue41\
    \ = 0;\n        long currentMaxIndexValue42 = 0;\n        long currentMaxIndexValue43\
    \ = 0;\n        long currentMaxIndexValue44 = 0;\n        long currentMaxIndexValue45\
    \ = 0;\n        long currentMaxIndexValue46 = 0;\n        long currentMaxIndexValue47\
    \ = 0;\n        long currentMaxIndexValue48 = 0;\n        long currentMaxIndexValue49\
    \ = 0;\n        long currentMaxIndexValue50 = 0;\n        long currentMaxIndexValue51\
    \ = 0;\n        long currentMaxIndexValue52 = 0;\n        long currentMaxIndexValue53\
    \ = 0;\n        long currentMaxIndexValue54\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L,\
    \ (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new\
    \ long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpr8mz57to.cs(69,36): error CS1002: ; expected

    '
  timestamp: 1660008889
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    public\
    \ static List<long> RollingMax(List<long> numbers) {\n        List<long> result\
    \ = new List<long>();\n        long max = 0;\n        long currentMax = numbers.First();\n\
    \        foreach (long number in numbers) {\n            if (number > currentMax)\
    \ {\n                result.Add(currentMax);\n                max = currentMax;\n\
    \                currentMax = number;\n            }\n            else if (number\
    \ == currentMax) {\n                currentMax = number;\n            }\n    \
    \        else {\n                max = Math.Max(number, max);\n              \
    \  currentMax = number;\n            }\n        }\n        result.Add(max);\n\
    \        return result;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(RollingMax((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L,\
    \ (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new\
    \ long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n    }\n\n\
    }\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.InvalidOperationException: Sequence contains\
    \ no elements\n  at System.Linq.Enumerable.First[TSource] (System.Collections.Generic.IEnumerable`1[T]\
    \ source) [0x00010] in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem.RollingMax\
    \ (System.Collections.Generic.List`1[T] numbers) [0x0000a] in <b4537ab36a3444ee9a2d6bc93cc6b6c4>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <b4537ab36a3444ee9a2d6bc93cc6b6c4>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.InvalidOperationException: Sequence\
    \ contains no elements\n  at System.Linq.Enumerable.First[TSource] (System.Collections.Generic.IEnumerable`1[T]\
    \ source) [0x00010] in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem.RollingMax\
    \ (System.Collections.Generic.List`1[T] numbers) [0x0000a] in <b4537ab36a3444ee9a2d6bc93cc6b6c4>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <b4537ab36a3444ee9a2d6bc93cc6b6c4>:0\
    \ \n"
  stdout: ''
  timestamp: 1660008891
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    public\
    \ static List<long> RollingMax(List<long> numbers) {\n        List<long> result\
    \ = new List<long>();\n        long max = 0;\n        long currentMax = 0;\n \
    \       long currentMaxIndex = 0;\n        foreach (long number in numbers) {\n\
    \            if (number > max) {\n                max = number;\n            \
    \    currentMax = max;\n                currentMaxIndex = result.Count;\n    \
    \        }\n            else if (number == max) {\n                currentMax\
    \ = number;\n                currentMaxIndex = result.Count;\n            }\n\
    \            else {\n                result.Add(max);\n                max = number;\n\
    \                currentMax = max;\n                currentMaxIndex = result.Count;\n\
    \            }\n        }\n        result.Add(max);\n        result.Add(currentMax);\n\
    \        result.Add(currentMaxIndex);\n        return result;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new\
    \ long[]{(long)4L, (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <00ff1926a6cf4e3fb70b13a581134520>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <00ff1926a6cf4e3fb70b13a581134520>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660008889
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    public\
    \ static List<long> RollingMax(List<long> numbers) {\n        List<long> result\
    \ = new List<long>();\n        long maxValue = numbers.Max();\n        long currentMax\
    \ = maxValue;\n        long currentSum = 0;\n        long currentSumOfSquares\
    \ = 0;\n        long currentSumOfSquareOfDifferences = 0;\n        long currentSumOfDifferences\
    \ = 0;\n        long currentSumOfDifferenceSquared = 0;\n        long currentSumOfDifferenceSquareOfDifferences\
    \ = 0;\n        long currentSumOfDifferenceSquaredOfDifferences = 0;\n       \
    \ long currentSumOfDifferenceSquaredOfDifferenceSquared = 0;\n        long currentSumOfDifferenceSquaredOfDifferenceSquareOfDifferences\
    \ = 0;\n        long currentSumOfDifferenceSquaredOfDifferenceSquareOfDifferenceSquared\
    \ = 0;\n        long currentSumOfDifferenceSquaredOfDifferenceSquareOfDifferenceSquared\
    \ = 0;\n        long currentSumOfDifferenceSquaredOfDifferenceSquareOfDifferenceSquared\
    \ = 0;\n        long currentSumOfDifferenceSquaredOfDifferenceSquareOfDifferenceSquared\
    \ = 0;\n        long currentSumOfDifferenceSquaredOfDifferenceSquareOfDifferenceSquared\
    \ = 0;\n        long currentSumOfDifferenceSquaredOfDifferenceSquareOfDifferenceSquared\
    \ = 0;\n        long currentSumOfDifferenceSquaredOfDifferenceSquareOfDifferenceSquared\
    \ = 0;\n        long currentSumOfDifferenceSquaredOfDifferenceSquareOfDifferenceSquared\
    \ = 0;\n        long currentSumOfDifferenceSquaredOfDifferenceSquareOfDifferenceSquared\
    \ = 0;\n        long currentSumOfDifferenceSquaredOfDifferenceSquareOfDifferenceSquared\
    \ = 0;\n        long currentSumOfDifferenceSquaredOfDifferenceSquareOfDifferenceSquared\
    \ = 0;\n        long currentSumOfDifferenceSquaredOfDifferenceSquareOfDifferenceSquared\
    \ = 0;\n        long currentSumOfDifferenceSquaredOfDifferenceSquareOfDifferenceSquared\
    \ = 0;\n        long currentSumOfDifferenceSquaredOfDifferenceSquareOfDifferenceSquared\
    \ = 0;\n        long currentSumOfDifferenceSquaredOfDifferenceSquareOfDifferenceSquared\
    \ = 0;\n        long currentSumOfDifferenceSquaredOfDifferenceSquareOfDifferenceSquared\
    \ = 0;\n        long currentSumOfDifferenceSquaredOfDifferenceSquareOfDifferenceSquared\
    \ = 0;\n        long currentSumOfDifferenceSquaredOfDifferenceSquareOfDifferenceSquared\
    \ = 0;\n        long currentSumOfDifferenceSquaredOfDifferenceSquareOfDifferenceSquared\
    \ = 0;\n        long currentSumOfDifferenceSquaredOfDifferenceSquareOfDifferenceSquared\
    \ = 0;\n        long currentSumOfDifferenceSquaredOfDifferenceSquareOfDifferenceSquared\
    \ = 0;\n        long currentSumOfDifferenceSquaredOfDifferenceSquareOfDifferenceSquared\
    \ = 0;\n        long currentSumOfDifferenceSquaredOfDifferenceSquareOfDifferenceSquared\
    \ = 0;\n        \n    }\n    public static void Main(string[] args) {\n    Debug.Assert(RollingMax((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(RollingMax((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new\
    \ List<long>(new long[]{(long)4L, (long)3L, (long)2L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpgz7cfzl5.cs(25,14): error CS0128: A local variable or function named ''currentSumOfDifferenceSquaredOfDifferenceSquareOfDifferenceSquared''
    is already defined in this scope

    /tmp/tmpgz7cfzl5.cs(26,14): error CS0128: A local variable or function named ''currentSumOfDifferenceSquaredOfDifferenceSquareOfDifferenceSquared''
    is already defined in this scope

    /tmp/tmpgz7cfzl5.cs(27,14): error CS0128: A local variable or function named ''currentSumOfDifferenceSquaredOfDifferenceSquareOfDifferenceSquared''
    is already defined in this scope

    /tmp/tmpgz7cfzl5.cs(28,14): error CS0128: A local variable or function named ''currentSumOfDifferenceSquaredOfDifferenceSquareOfDifferenceSquared''
    is already defined in this scope

    /tmp/tmpgz7cfzl5.cs(29,14): error CS0128: A local variable or function named ''currentSumOfDifferenceSquaredOfDifferenceSquareOfDifferenceSquared''
    is already defined in this scope

    /tmp/tmpgz7cfzl5.cs(30,14): error CS0128: A local variable or function named ''currentSumOfDifferenceSquaredOfDifferenceSquareOfDifferenceSquared''
    is already defined in this scope

    /tmp/tmpgz7cfzl5.cs(31,14): error CS0128: A local variable or function named ''currentSumOfDifferenceSquaredOfDifferenceSquareOfDifferenceSquared''
    is already defined in this scope

    /tmp/tmpgz7cfzl5.cs(32,14): error CS0128: A local variable or function named ''currentSumOfDifferenceSquaredOfDifferenceSquareOfDifferenceSquared''
    is already defined in this scope

    /tmp/tmpgz7cfzl5.cs(33,14): error CS0128: A local variable or function named ''currentSumOfDifferenceSquaredOfDifferenceSquareOfDifferenceSquared''
    is already defined in this scope

    /tmp/tmpgz7cfzl5.cs(34,14): error CS0128: A local variable or function named ''currentSumOfDifferenceSquaredOfDifferenceSquareOfDifferenceSquared''
    is already defined in this scope

    /tmp/tmpgz7cfzl5.cs(35,14): error CS0128: A local variable or function named ''currentSumOfDifferenceSquaredOfDifferenceSquareOfDiff'
  timestamp: 1660008891
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    public\
    \ static List<long> RollingMax(List<long> numbers) {\n        List<long> result\
    \ = new List<long>();\n        long max = 0;\n        long currentMax = 0;\n \
    \       long currentNumber = 0;\n        foreach (long number in numbers) {\n\
    \            if (number > currentMax) {\n                currentMax = number;\n\
    \                currentNumber = number;\n            }\n            else if (number\
    \ == currentMax) {\n                currentNumber++;\n            }\n        \
    \    else {\n                result.Add(currentMax);\n                currentMax\
    \ = number;\n                currentNumber = number;\n            }\n        }\n\
    \        result.Add(currentMax);\n        return result;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new\
    \ long[]{(long)4L, (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <77fbf186198547608050cae5b6ea3397>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <77fbf186198547608050cae5b6ea3397>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660008891
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    public\
    \ static List<long> RollingMax(List<long> numbers) {\n        List<long> result\
    \ = new List<long>();\n        long maxValue = numbers.Max();\n        long currentMax\
    \ = maxValue;\n        long currentSum = 0;\n        long currentSumOfSquares\
    \ = 0;\n        long currentSumOfSquaresOfSquares = 0;\n        long currentSumOfSquaresOfSquaresOfSquares\
    \ = 0;\n        long currentSumOfSquaresOfSquaresOfSquaresOfSquares = 0;\n   \
    \     long currentSumOfSquaresOfSquaresOfSquaresOfSquaresOfSquares = 0;\n    \
    \    long currentSumOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquares = 0;\n\
    \        long currentSumOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquares\
    \ = 0;\n        long currentSumOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquares\
    \ = 0;\n        long currentSumOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquares\
    \ = 0;\n        long currentSumOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquares\
    \ = 0;\n        long currentSumOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquares\
    \ = 0;\n        long currentSumOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquares\
    \ = 0;\n        long currentSumOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquares\
    \ = 0;\n        long currentSumOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquares\
    \ = 0;\n        long currentSumOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquares\
    \ = 0;\n        long currentSumOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquares\
    \ = 0;\n        long currentSumOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquares\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(RollingMax((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(RollingMax((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new\
    \ List<long>(new long[]{(long)4L, (long)3L, (long)2L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpwcmpc6ih.cs(32,87): error CS1002: ; expected

    '
  timestamp: 1660008890
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    public\
    \ static List<long> RollingMax(List<long> numbers) {\n        List<long> result\
    \ = new List<long>();\n        long maxValue = numbers.Max();\n        long currentMaxValue\
    \ = maxValue;\n        long currentMaxIndex = 0;\n        long currentMaxIndexValue\
    \ = 0;\n        long currentMaxIndexValue2 = 0;\n        long currentMaxIndexValue3\
    \ = 0;\n        long currentMaxIndexValue4 = 0;\n        long currentMaxIndexValue5\
    \ = 0;\n        long currentMaxIndexValue6 = 0;\n        long currentMaxIndexValue7\
    \ = 0;\n        long currentMaxIndexValue8 = 0;\n        long currentMaxIndexValue9\
    \ = 0;\n        long currentMaxIndexValue10 = 0;\n        long currentMaxIndexValue11\
    \ = 0;\n        long currentMaxIndexValue12 = 0;\n        long currentMaxIndexValue13\
    \ = 0;\n        long currentMaxIndexValue14 = 0;\n        long currentMaxIndexValue15\
    \ = 0;\n        long currentMaxIndexValue16 = 0;\n        long currentMaxIndexValue17\
    \ = 0;\n        long currentMaxIndexValue18 = 0;\n        long currentMaxIndexValue19\
    \ = 0;\n        long currentMaxIndexValue20 = 0;\n        long currentMaxIndexValue21\
    \ = 0;\n        long currentMaxIndexValue22 = 0;\n        long currentMaxIndexValue23\
    \ = 0;\n        long currentMaxIndexValue24 = 0;\n        long currentMaxIndexValue25\
    \ = 0;\n        long currentMaxIndexValue26 = 0;\n        long currentMaxIndexValue27\
    \ = 0;\n        long currentMaxIndexValue28 = 0;\n        long currentMaxIndexValue29\
    \ = 0;\n        long currentMaxIndexValue30 = 0;\n        long currentMaxIndexValue31\
    \ = 0;\n        long currentMaxIndexValue32 = 0;\n        long currentMaxIndexValue33\
    \ = 0;\n        long currentMaxIndexValue34 = 0;\n        long currentMaxIndexValue35\
    \ = 0;\n        long currentMaxIndexValue36 = 0;\n        long currentMaxIndexValue37\
    \ = 0;\n        long currentMaxIndexValue38 = 0;\n        long currentMaxIndexValue39\
    \ = 0;\n        long currentMaxIndexValue40 = 0;\n        long currentMaxIndexValue41\
    \ = 0;\n        long currentMaxIndexValue42 = 0;\n        long currentMaxIndexValue43\
    \ = 0;\n        long currentMaxIndexValue44 = 0;\n        long currentMaxIndexValue45\
    \ = 0;\n        long currentMaxIndexValue46 = 0;\n        long currentMaxIndexValue47\
    \ = 0;\n        long currentMaxIndexValue48 = 0;\n        long currentMaxIndexValue49\
    \ = 0;\n        long currentMaxIndexValue50 = 0;\n        long currentMaxIndexValue51\
    \ = 0;\n        long currentMaxIndexValue52 = 0;\n        long currentMaxIndexValue53\
    \ = 0;\n        long currentMaxIndexValue54\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L,\
    \ (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new\
    \ long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpr8mz57to.cs(69,36): error CS1002: ; expected

    '
  timestamp: 1660008889
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    public\
    \ static List<long> RollingMax(List<long> numbers) {\n        List<long> result\
    \ = new List<long>();\n        long maxValue = numbers.Max();\n        long currentMax\
    \ = maxValue;\n        long currentSum = 0;\n        long currentSumOfSquares\
    \ = 0;\n        long currentSumOfSquaresOfSquares = 0;\n        long currentSumOfSquaresOfSquaresOfSquares\
    \ = 0;\n        long currentSumOfSquaresOfSquaresOfSquaresOfSquares = 0;\n   \
    \     long currentSumOfSquaresOfSquaresOfSquaresOfSquaresOfSquares = 0;\n    \
    \    long currentSumOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquares = 0;\n\
    \        long currentSumOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquares\
    \ = 0;\n        long currentSumOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquares\
    \ = 0;\n        long currentSumOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquares\
    \ = 0;\n        long currentSumOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquares\
    \ = 0;\n        long currentSumOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquares\
    \ = 0;\n        long currentSumOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquares\
    \ = 0;\n        long currentSumOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquares\
    \ = 0;\n        long currentSumOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquares\
    \ = 0;\n        long currentSumOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquares\
    \ = 0;\n        long currentSumOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquares\
    \ = 0;\n        long currentSumOfSquaresOfSquares\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new\
    \ long[]{(long)4L, (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp_v59y84c.cs(32,42): error CS1002: ; expected

    '
  timestamp: 1660008891
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    public\
    \ static List<long> RollingMax(List<long> numbers) {\n        List<long> result\
    \ = new List<long>();\n        long max = 0;\n        long currentMax = 0;\n \
    \       long currentNumber = 0;\n        long currentSum = 0;\n        long sum\
    \ = 0;\n        long maxSum = 0;\n        long currentMaxSum = 0;\n        long\
    \ currentMaxSum2 = 0;\n        long currentMaxSum3 = 0;\n        long currentMaxSum4\
    \ = 0;\n        long currentMaxSum5 = 0;\n        long currentMaxSum6 = 0;\n \
    \       long currentMaxSum7 = 0;\n        long currentMaxSum8 = 0;\n        long\
    \ currentMaxSum9 = 0;\n        long currentMaxSum10 = 0;\n        long currentMaxSum11\
    \ = 0;\n        long currentMaxSum12 = 0;\n        long currentMaxSum13 = 0;\n\
    \        long currentMaxSum14 = 0;\n        long currentMaxSum15 = 0;\n      \
    \  long currentMaxSum16 = 0;\n        long currentMaxSum17 = 0;\n        long\
    \ currentMaxSum18 = 0;\n        long currentMaxSum19 = 0;\n        long currentMaxSum20\
    \ = 0;\n        long currentMaxSum21 = 0;\n        long currentMaxSum22 = 0;\n\
    \        long currentMaxSum23 = 0;\n        long currentMaxSum24 = 0;\n      \
    \  long currentMaxSum25 = 0;\n        long currentMaxSum26 = 0;\n        long\
    \ currentMaxSum27 = 0;\n        long currentMaxSum28 = 0;\n        long currentMaxSum29\
    \ = 0;\n        long currentMaxSum30 = 0;\n        long currentMaxSum31 = 0;\n\
    \        long currentMaxSum32 = 0;\n        long currentMaxSum33 = 0;\n      \
    \  long currentMaxSum34 = 0;\n        long currentMaxSum35 = 0;\n        long\
    \ currentMaxSum36 = 0;\n        long currentMaxSum37 = 0;\n        long currentMaxSum38\
    \ = 0;\n        long currentMaxSum39 = 0;\n        long currentMaxSum40 = 0;\n\
    \        long currentMaxSum41 = 0;\n        long currentMaxSum42 = 0;\n      \
    \  long currentMaxSum43 = 0;\n        long currentMaxSum44 = 0;\n        long\
    \ currentMaxSum45 = 0;\n        long currentMaxSum46 = 0;\n        long currentMaxSum47\
    \ = 0;\n        long currentMaxSum48 = 0;\n        long currentMaxSum49 = 0;\n\
    \        long currentMaxSum50 = 0;\n        long currentMaxSum51 = 0;\n      \
    \  long currentMaxSum52 = 0;\n        long currentMaxSum53 = 0;\n        long\
    \ currentMaxSum54 = 0;\n        long currentMaxSum55 = 0;\n        long currentMaxSum56\
    \ = 0;\n        long currentMaxSum57 = 0;\n        long currentMaxSum58 = 0;\n\
    \        long currentMaxSum59 = 0;\n        \n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L,\
    \ (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new\
    \ long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpop5t8se6.cs(13,14): warning CS0219: The variable ''max'' is assigned but
    its value is never used

    /tmp/tmpop5t8se6.cs(14,14): warning CS0219: The variable ''currentMax'' is assigned
    but its value is never used

    /tmp/tmpop5t8se6.cs(15,14): warning CS0219: The variable ''currentNumber'' is
    assigned but its value is never used

    /tmp/tmpop5t8se6.cs(16,14): warning CS0219: The variable ''currentSum'' is assigned
    but its value is never used

    /tmp/tmpop5t8se6.cs(17,14): warning CS0219: The variable ''sum'' is assigned but
    its value is never used

    /tmp/tmpop5t8se6.cs(18,14): warning CS0219: The variable ''maxSum'' is assigned
    but its value is never used

    /tmp/tmpop5t8se6.cs(19,14): warning CS0219: The variable ''currentMaxSum'' is
    assigned but its value is never used

    /tmp/tmpop5t8se6.cs(20,14): warning CS0219: The variable ''currentMaxSum2'' is
    assigned but its value is never used

    /tmp/tmpop5t8se6.cs(21,14): warning CS0219: The variable ''currentMaxSum3'' is
    assigned but its value is never used

    /tmp/tmpop5t8se6.cs(22,14): warning CS0219: The variable ''currentMaxSum4'' is
    assigned but its value is never used

    /tmp/tmpop5t8se6.cs(23,14): warning CS0219: The variable ''currentMaxSum5'' is
    assigned but its value is never used

    /tmp/tmpop5t8se6.cs(24,14): warning CS0219: The variable ''currentMaxSum6'' is
    assigned but its value is never used

    /tmp/tmpop5t8se6.cs(25,14): warning CS0219: The variable ''currentMaxSum7'' is
    assigned but its value is never used

    /tmp/tmpop5t8se6.cs(26,14): warning CS0219: The variable ''currentMaxSum8'' is
    assigned but its value is never used

    /tmp/tmpop5t8se6.cs(27,14): warning CS0219: The variable ''currentMaxSum9'' is
    assigned but its value is never used

    /tmp/tmpop5t8se6.cs(28,14): warning CS0219: The variable ''currentMaxSum10'' is
    assigned but its value is never used

    /tmp/tmpop5t8se6.cs(29,14): warning CS0219: The variable ''currentMaxSum11'' is
    assigned but its value is never used

    /tmp/tmpop5t8se6.cs(3'
  timestamp: 1660008891
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    public\
    \ static List<long> RollingMax(List<long> numbers) {\n        List<long> max =\
    \ new List<long>();\n        long maxValue = numbers.Max();\n        long currentMax\
    \ = maxValue;\n        long currentMaxIndex = 0;\n        long currentMaxIndexValue\
    \ = 0;\n        long currentMaxIndexValue2 = 0;\n        long currentMaxIndexValue3\
    \ = 0;\n        long currentMaxIndexValue4 = 0;\n        long currentMaxIndexValue5\
    \ = 0;\n        long currentMaxIndexValue6 = 0;\n        long currentMaxIndexValue7\
    \ = 0;\n        long currentMaxIndexValue8 = 0;\n        long currentMaxIndexValue9\
    \ = 0;\n        long currentMaxIndexValue10 = 0;\n        long currentMaxIndexValue11\
    \ = 0;\n        long currentMaxIndexValue12 = 0;\n        long currentMaxIndexValue13\
    \ = 0;\n        long currentMaxIndexValue14 = 0;\n        long currentMaxIndexValue15\
    \ = 0;\n        long currentMaxIndexValue16 = 0;\n        long currentMaxIndexValue17\
    \ = 0;\n        long currentMaxIndexValue18 = 0;\n        long currentMaxIndexValue19\
    \ = 0;\n        long currentMaxIndexValue20 = 0;\n        long currentMaxIndexValue21\
    \ = 0;\n        long currentMaxIndexValue22 = 0;\n        long currentMaxIndexValue23\
    \ = 0;\n        long currentMaxIndexValue24 = 0;\n        long currentMaxIndexValue25\
    \ = 0;\n        long currentMaxIndexValue26 = 0;\n        long currentMaxIndexValue27\
    \ = 0;\n        long currentMaxIndexValue28 = 0;\n        long currentMaxIndexValue29\
    \ = 0;\n        long currentMaxIndexValue30 = 0;\n        long currentMaxIndexValue31\
    \ = 0;\n        long currentMaxIndexValue32 = 0;\n        long currentMaxIndexValue33\
    \ = 0;\n        long currentMaxIndexValue34 = 0;\n        long currentMaxIndexValue35\
    \ = 0;\n        long currentMaxIndexValue36 = 0;\n        long currentMaxIndexValue37\
    \ = 0;\n        long currentMaxIndexValue38 = 0;\n        long currentMaxIndexValue39\
    \ = 0;\n        long currentMaxIndexValue40 = 0;\n        long currentMaxIndexValue41\
    \ = 0;\n        long currentMaxIndexValue42 = 0;\n        long currentMaxIndexValue43\
    \ = 0;\n        long currentMaxIndexValue44 = 0;\n        long currentMaxIndexValue45\
    \ = 0;\n        long currentMaxIndexValue46 = 0;\n        long currentMaxIndexValue47\
    \ = 0;\n        long currentMaxIndexValue48 = 0;\n        long currentMaxIndexValue49\
    \ = 0;\n        long currentMaxIndexValue50 = 0;\n        long currentMaxIndexValue51\
    \ = 0;\n        long currentMaxIndexValue52 = 0;\n        long currentMaxIndexValue53\
    \ = 0;\n        long currentMaxIndexValue54\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L,\
    \ (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new\
    \ long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpcj81lryj.cs(69,36): error CS1002: ; expected

    '
  timestamp: 1660008889
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    public\
    \ static List<long> RollingMax(List<long> numbers) {\n        List<long> max =\
    \ new List<long>();\n        long maxValue = numbers.First();\n        long currentMaxValue\
    \ = maxValue;\n        long currentMaxIndex = 0;\n        long currentMaxIndexValue\
    \ = numbers.First();\n        long currentMaxIndexValue2 = numbers.First();\n\
    \        long currentMaxIndexValue3 = numbers.First();\n        long currentMaxIndexValue4\
    \ = numbers.First();\n        long currentMaxIndexValue5 = numbers.First();\n\
    \        long currentMaxIndexValue6 = numbers.First();\n        long currentMaxIndexValue7\
    \ = numbers.First();\n        long currentMaxIndexValue8 = numbers.First();\n\
    \        long currentMaxIndexValue9 = numbers.First();\n        long currentMaxIndexValue10\
    \ = numbers.First();\n        long currentMaxIndexValue11 = numbers.First();\n\
    \        long currentMaxIndexValue12 = numbers.First();\n        long currentMaxIndexValue13\
    \ = numbers.First();\n        long currentMaxIndexValue14 = numbers.First();\n\
    \        long currentMaxIndexValue15 = numbers.First();\n        long currentMaxIndexValue16\
    \ = numbers.First();\n        long currentMaxIndexValue17 = numbers.First();\n\
    \        long currentMaxIndexValue18 = numbers.First();\n        long currentMaxIndexValue19\
    \ = numbers.First();\n        long currentMaxIndexValue20 = numbers.First();\n\
    \        long currentMaxIndexValue21 = numbers.First();\n        long currentMaxIndexValue22\
    \ = numbers.First();\n        long currentMaxIndexValue23 = numbers.First();\n\
    \        long currentMaxIndexValue24 = numbers.First();\n        long currentMaxIndexValue25\
    \ = numbers.First();\n        long currentMaxIndexValue26 = numbers.First();\n\
    \        long currentMaxIndexValue27 = numbers.First();\n        long currentMaxIndexValue28\
    \ = numbers.First();\n        long currentMaxIndexValue29 = numbers.First();\n\
    \        long currentMaxIndexValue30 = numbers.First();\n        long currentMaxIndexValue31\
    \ = numbers.First();\n        long currentMaxIndexValue32 = numbers.First();\n\
    \        long currentMaxIndexValue33 = numbers.First();\n        long currentMaxIndexValue34\
    \ = numbers.First();\n        long currentMaxIndexValue35 = numbers.First();\n\
    \        long currentMaxIndexValue36 = numbers.First();\n        long currentMaxIndexValue37\
    \ = numbers.First();\n        long currentMaxIndexValue38 = numbers.First();\n\
    \        long currentMaxIndexValue39 = numbers.First();\n        long currentMaxIndexValue40\
    \ = numbers.First();\n        long currentMaxIndexValue41 = numbers.First();\n\
    \n    }\n    public static void Main(string[] args) {\n    Debug.Assert(RollingMax((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(RollingMax((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new\
    \ List<long>(new long[]{(long)4L, (long)3L, (long)2L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmptx70q_rb.cs(15,14): warning CS0219: The variable ''currentMaxIndex'' is
    assigned but its value is never used

    /tmp/tmptx70q_rb.cs(11,30): error CS0161: ''Problem.RollingMax(List<long>)'':
    not all code paths return a value

    '
  timestamp: 1660008891
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    public\
    \ static List<long> RollingMax(List<long> numbers) {\n        List<long> result\
    \ = new List<long>();\n        long max = 0;\n        long currentMax = 0;\n \
    \       long currentMaxIndex = 0;\n        long currentMaxValue = numbers[0];\n\
    \        long currentMaxValueIndex = -1;\n        long currentMaxValueIndex =\
    \ -1;\n        long currentMaxValueIndex = -1;\n        long currentMaxValueIndex\
    \ = -1;\n        long currentMaxValueIndex = -1;\n        long currentMaxValueIndex\
    \ = -1;\n        long currentMaxValueIndex = -1;\n        long currentMaxValueIndex\
    \ = -1;\n        long currentMaxValueIndex = -1;\n        long currentMaxValueIndex\
    \ = -1;\n        long currentMaxValueIndex = -1;\n        long currentMaxValueIndex\
    \ = -1;\n        long currentMaxValueIndex = -1;\n        long currentMaxValueIndex\
    \ = -1;\n        long currentMaxValueIndex = -1;\n        long currentMaxValueIndex\
    \ = -1;\n        long currentMaxValueIndex = -1;\n        long currentMaxValueIndex\
    \ = -1;\n        long currentMaxValueIndex = -1;\n        long currentMaxValueIndex\
    \ = -1;\n        long currentMaxValueIndex = -1;\n        long currentMaxValueIndex\
    \ = -1;\n        long currentMaxValueIndex = -1;\n        long currentMaxValueIndex\
    \ = -1;\n        long currentMaxValueIndex = -1;\n        long currentMaxValueIndex\
    \ = -1;\n        long currentMaxValueIndex = -1;\n        long currentMaxValueIndex\
    \ = -1;\n        long currentMaxValueIndex = -1;\n        long currentMaxValueIndex\
    \ = -1;\n        long currentMaxValueIndex = -1;\n        long currentMaxValueIndex\
    \ = -1;\n        long currentMaxValueIndex = -1;\n        long currentMaxValueIndex\
    \ = -1;\n        long currentMaxValueIndex = -1;\n        long currentMaxValueIndex\
    \ = -1;\n        long currentMaxValueIndex = -1;\n        long currentMaxValueIndex\
    \ = -1;\n        long currentMaxValueIndex = -1;\n        long currentMaxValueIndex\
    \ = -1;\n        long currentMaxValueIndex = -1;\n        long currentMaxValueIndex\
    \ = -1;\n        long currentMaxValueIndex = -1;\n        long currentMaxValueIndex\
    \ = -1;\n        long currentMaxValueIndex = -1;\n        long currentMaxValueIndex\
    \ = -1;\n        long currentMaxValueIndex = -1;\n        long currentMaxValueIndex\
    \ = -1;\n        long currentMaxValueIndex = -1;\n        long currentMaxValueIndex\
    \ = -1;\n        long currentMaxValueIndex = -1;\n        long currentMaxValueIndex\
    \ = -1;\n        long currentMaxValueIndex = -1;\n        long currentMaxValueIndex\
    \ = -1;\n        long currentMaxValueIndex = -1;\n        long currentMaxValueIndex\
    \ = -1;\n        long currentMaxValueIndex = -1;\n        long currentMaxValueIndex\
    \ = -1;\n        long currentMaxValueIndex = -1;\n        long currentMax\n  \
    \  }\n    public static void Main(string[] args) {\n    Debug.Assert(RollingMax((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(RollingMax((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new\
    \ List<long>(new long[]{(long)4L, (long)3L, (long)2L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp4rkmavuj.cs(76,24): error CS1002: ; expected

    '
  timestamp: 1660008891
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    public\
    \ static List<long> RollingMax(List<long> numbers) {\n        List<long> max =\
    \ new List<long>();\n        long maxValue = numbers.Max();\n        long currentMaxValue\
    \ = maxValue;\n        long currentMaxIndex = -1;\n        long currentMaxIndexValue\
    \ = numbers.Count;\n        long currentMaxIndexValueSum = 0;\n        long currentMaxIndexValueSumOfSquares\
    \ = 0;\n        long currentMaxIndexValueSumOfSquaresOfSquares = 0;\n        long\
    \ currentMaxIndexValueSumOfSquaresOfSquaresOfSquares = 0;\n        long currentMaxIndexValueSumOfSquaresOfSquaresOfSquaresOfSquares\
    \ = 0;\n        long currentMaxIndexValueSumOfSquaresOfSquaresOfSquaresOfSquaresOfSquares\
    \ = 0;\n        long currentMaxIndexValueSumOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquares\
    \ = 0;\n        long currentMaxIndexValueSumOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquares\
    \ = 0;\n        long currentMaxIndexValueSumOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquares\
    \ = 0;\n        long currentMaxIndexValueSumOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquares\
    \ = 0;\n        long currentMaxIndexValueSumOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquares\
    \ = 0;\n        long currentMaxIndexValueSumOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquares\
    \ = 0;\n        long currentMaxIndexValueSumOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquares\
    \ = 0;\n        long currentMaxIndexValueSumOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquares\
    \ = 0;\n        long currentMaxIndexValueSumOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquares\
    \ = 0;\n        long currentMaxIndexValueSumOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquares\
    \ = 0;\n        long currentMaxIndexValueSumOfSquares\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new\
    \ long[]{(long)4L, (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpbl5k65de.cs(33,46): error CS1002: ; expected

    '
  timestamp: 1660008891
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    public\
    \ static List<long> RollingMax(List<long> numbers) {\n        List<long> result\
    \ = new List<long>();\n        long maxValue = numbers.Max();\n        long currentMax\
    \ = maxValue;\n        long currentSum = 0;\n        long currentCount = 0;\n\
    \        long currentSumOfSquares = 0;\n        long currentSumOfProducts = 0;\n\
    \        long currentSumOfProductsOfSquares = 0;\n        long currentSumOfProductsOfProducts\
    \ = 0;\n        long currentSumOfProductsOfProductsOfSquares = 0;\n        long\
    \ currentSumOfProductsOfProductsOfProducts = 0;\n        long currentSumOfProductsOfProductsOfProductsOfSquares\
    \ = 0;\n        long currentSumOfProductsOfProductsOfProductsOfProductsOfSquares\
    \ = 0;\n        long currentSumOfProductsOfProductsOfProductsOfProductsOfProductsOfSquares\
    \ = 0;\n        long currentSumOfProductsOfProductsOfProductsOfProductsOfProductsOfProductsOfSquares\
    \ = 0;\n        long currentSumOfProductsOfProductsOfProductsOfProductsOfProductsOfProductsOfProductsOfSquares\
    \ = 0;\n        long currentSumOfProductsOfProductsOfProductsOfProductsOfProductsOfProductsOfProductsOfProductsOfSquares\
    \ = 0;\n        long currentSumOfProductsOfProductsOfProductsOfProductsOfProductsOfProductsOfProductsOfProductsOfProductsOfSquares\
    \ = 0;\n        long currentSumOfProductsOfProductsOfProductsOfProductsOfProductsOfProductsOfProductsOfProductsOfProductsOfProductsOfSquares\
    \ = 0;\n        long currentSumOfProductsOfProductsOfProductsOfProductsOfProductsOfProductsOfProductsOfProductsOfProductsOfProductsOfProductsOfSquares\
    \ = 0;\n        long currentSumOfProductsOfProductsOfProductsOfProductsOfProductsOfProductsOfProductsOfProductsOfProductsOfProductsOfProductsOfProductsOfSquares\
    \ = 0;\n        long currentSumOfProductsOfProductsOfProductsOfProductsOfProductsOfProductsOfProductsOfProductsOfProductsOfProductsOfProductsOfProductsOfProductsOfSquares\
    \ = 0;\n        long currentSumOfProductsOfProductsOfProductsOfProductsOfProductsOfProductsOfProductsOfProductsOfProductsOfProductsOfProductsOfProductsOfProductsOfProductsOfProductsOfSquares\
    \ = 0;\n        long current\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L,\
    \ (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new\
    \ long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp7fzcpock.cs(35,21): error CS1002: ; expected

    '
  timestamp: 1660008891
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    public\
    \ static List<long> RollingMax(List<long> numbers) {\n        List<long> result\
    \ = new List<long>();\n        long maxValue = numbers.Max();\n        long currentMax\
    \ = maxValue;\n        long currentMaxIndex = 0;\n        long currentMaxIndexCount\
    \ = 0;\n        long currentMaxIndexCountMax = numbers.Count;\n        long currentMaxIndexCountMaxIndex\
    \ = 0;\n        long currentMaxIndexCountMaxIndexMax = numbers.Count;\n      \
    \  long currentMaxIndexCountMaxIndexMax = numbers.Count;\n        long currentMaxIndexCountMaxIndexMax\
    \ = numbers.Count;\n        long currentMaxIndexCountMaxIndexMax = numbers.Count;\n\
    \        long currentMaxIndexCountMaxIndexMax = numbers.Count;\n        long currentMaxIndexCountMaxIndexMax\
    \ = numbers.Count;\n        long currentMaxIndexCountMaxIndexMax = numbers.Count;\n\
    \        long currentMaxIndexCountMaxIndexMax = numbers.Count;\n        long currentMaxIndexCountMaxIndexMax\
    \ = numbers.Count;\n        long currentMaxIndexCountMaxIndexMax = numbers.Count;\n\
    \        long currentMaxIndexCountMaxIndexMax = numbers.Count;\n        long currentMaxIndexCountMaxIndexMax\
    \ = numbers.Count;\n        long currentMaxIndexCountMaxIndexMax = numbers.Count;\n\
    \        long currentMaxIndexCountMaxIndexMax = numbers.Count;\n        long currentMaxIndexCountMaxIndexMax\
    \ = numbers.Count;\n        long currentMaxIndexCountMaxIndexMax = numbers.Count;\n\
    \        long currentMaxIndexCountMaxIndexMax = numbers.Count;\n        long currentMaxIndexCountMaxIndexMax\
    \ = numbers.Count;\n        long currentMaxIndexCountMaxIndexMax = numbers.Count;\n\
    \        long currentMaxIndexCountMaxIndexMax = numbers.Count;\n        long currentMaxIndexCountMaxIndexMax\
    \ = numbers.Count;\n        long currentMaxIndexCountMaxIndexMax = numbers.Count;\n\
    \        long currentMaxIndexCountMaxIndexMax = numbers.Count;\n        long currentMaxIndexCountMaxIndexMax\
    \ = numbers.Count;\n        long currentMaxIndexCountMaxIndexMax = numbers.Count;\n\
    \        long currentMaxIndexCountMaxIndexMax = numbers.Count;\n        long currentMaxIndexCountMaxIndexMax\
    \ = numbers.Count;\n        long currentMaxIndexCountMaxIndexMax = numbers.Count;\n\
    \        long currentMaxIndexCountMaxIndexMax = numbers.Count;\n        long currentMaxIndexCountMaxIndexMax\
    \ = numbers.Count;\n        long currentMaxIndexCountMaxIndexMax = numbers.Count;\n\
    \        long currentMaxIndexCountMaxIndexMax = numbers.Count;\n        \n   \
    \ }\n    public static void Main(string[] args) {\n    Debug.Assert(RollingMax((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(RollingMax((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new\
    \ List<long>(new long[]{(long)4L, (long)3L, (long)2L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpcpzqi_v7.cs(20,14): error CS0128: A local variable or function named ''currentMaxIndexCountMaxIndexMax''
    is already defined in this scope

    /tmp/tmpcpzqi_v7.cs(21,14): error CS0128: A local variable or function named ''currentMaxIndexCountMaxIndexMax''
    is already defined in this scope

    /tmp/tmpcpzqi_v7.cs(22,14): error CS0128: A local variable or function named ''currentMaxIndexCountMaxIndexMax''
    is already defined in this scope

    /tmp/tmpcpzqi_v7.cs(23,14): error CS0128: A local variable or function named ''currentMaxIndexCountMaxIndexMax''
    is already defined in this scope

    /tmp/tmpcpzqi_v7.cs(24,14): error CS0128: A local variable or function named ''currentMaxIndexCountMaxIndexMax''
    is already defined in this scope

    /tmp/tmpcpzqi_v7.cs(25,14): error CS0128: A local variable or function named ''currentMaxIndexCountMaxIndexMax''
    is already defined in this scope

    /tmp/tmpcpzqi_v7.cs(26,14): error CS0128: A local variable or function named ''currentMaxIndexCountMaxIndexMax''
    is already defined in this scope

    /tmp/tmpcpzqi_v7.cs(27,14): error CS0128: A local variable or function named ''currentMaxIndexCountMaxIndexMax''
    is already defined in this scope

    /tmp/tmpcpzqi_v7.cs(28,14): error CS0128: A local variable or function named ''currentMaxIndexCountMaxIndexMax''
    is already defined in this scope

    /tmp/tmpcpzqi_v7.cs(29,14): error CS0128: A local variable or function named ''currentMaxIndexCountMaxIndexMax''
    is already defined in this scope

    /tmp/tmpcpzqi_v7.cs(30,14): error CS0128: A local variable or function named ''currentMaxIndexCountMaxIndexMax''
    is already defined in this scope

    /tmp/tmpcpzqi_v7.cs(31,14): error CS0128: A local variable or function named ''currentMaxIndexCountMaxIndexMax''
    is already defined in this scope

    /tmp/tmpcpzqi_v7.cs(32,14): error CS0128: A local variable or function named ''currentMaxIndexCountMaxIndexMax''
    is already defined in this scope

    /tmp/tmpcpzqi_v7.cs(33,14): error CS0128: A local'
  timestamp: 1660008891
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    public\
    \ static List<long> RollingMax(List<long> numbers) {\n        List<long> result\
    \ = new List<long>();\n        long maxValue = numbers.Max();\n        long currentMax\
    \ = maxValue;\n        long currentSum = 0;\n        long currentCount = 0;\n\
    \        long currentSumOfSquares = 0;\n        long currentSumOfProducts = 0;\n\
    \        long currentSumOfProductsSquares = 0;\n        long currentSumOfProductsProducts\
    \ = 0;\n        long currentSumOfProductsProductsSquares = 0;\n        long currentSumOfProductsProductsProducts\
    \ = 0;\n        long currentSumOfProductsProductsProductsSquares = 0;\n      \
    \  long currentSumOfProductsProductsProductsProductsSquares = 0;\n        long\
    \ currentSumOfProductsProductsProductsProductsProductsSquares = 0;\n        long\
    \ currentSumOfProductsProductsProductsProductsProductsProductsSquares = 0;\n \
    \       long currentSumOfProductsProductsProductsProductsProductsProductsProductsSquares\
    \ = 0;\n        long currentSumOfProductsProductsProductsProductsProductsProductsProductsProductsSquares\
    \ = 0;\n        long currentSumOfProductsProductsProductsProductsProductsProductsProductsProductsProductsSquares\
    \ = 0;\n        long currentSumOfProductsProductsProductsProductsProductsProductsProductsProductsProductsProductsSquares\
    \ = 0;\n        long currentSumOfProductsProductsProductsProductsProductsProductsProductsProductsProductsProductsProductsSquares\
    \ = 0;\n        long currentSumOfProductsProductsProductsProductsProductsProductsProductsProductsProductsProductsProductsProductsSquares\
    \ = 0;\n        long currentSumOfProductsProductsProductsProductsProductsProductsProductsProductsProductsProductsProductsProductsProductsSquares\
    \ = 0;\n        long currentSumOfProductsProductsProductsProductsProductsProductsProductsProductsProductsProductsProductsProductsProductsProductsSquares\
    \ = 0;\n        long currentSumOfProductsProductsProductsProductsProductsProductsProductsProductsProductsProductsProductsProductsProductsProductsProductsSquares\
    \ = 0;\n        long currentSumOfProductsProductsProductsProductsProductsProductsProductsProductsProductsProductsProductsProductsProductsProductsProductsProductsSquares\
    \ = 0;\n        long currentSumOfProductsProductsProductsProductsProductsProductsProductsProductsProductsProductsProductsProductsProductsProductsProductsProduct\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(RollingMax((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(RollingMax((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new\
    \ List<long>(new long[]{(long)4L, (long)3L, (long)2L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpwolehonn.cs(37,153): error CS1002: ; expected

    '
  timestamp: 1660008891
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    public\
    \ static List<long> RollingMax(List<long> numbers) {\n        List<long> result\
    \ = new List<long>();\n        long max = 0;\n        long currentMax = 0;\n \
    \       long currentNumber = 0;\n        long currentSum = 0;\n        long currentSumOfSquares\
    \ = 0;\n        foreach (long number in numbers) {\n            currentNumber\
    \ = number;\n            currentSum = 0;\n            currentSumOfSquares = 0;\n\
    \            while (currentNumber > 0) {\n                currentSum += currentNumber;\n\
    \                currentSumOfSquares += currentNumber * currentNumber;\n     \
    \           currentNumber--;\n            }\n            if (currentSum > currentMax)\
    \ {\n                currentMax = currentSum;\n            }\n            if (currentSumOfSquares\
    \ > currentMax * currentMax) {\n                currentMax = currentSum;\n   \
    \         }\n            result.Add(currentMax);\n        }\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(RollingMax((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(RollingMax((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new\
    \ List<long>(new long[]{(long)4L, (long)3L, (long)2L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <f611b35b093745e0b3d3d43ffaddd589>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <f611b35b093745e0b3d3d43ffaddd589>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660008892
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    public\
    \ static List<long> RollingMax(List<long> numbers) {\n        List<long> result\
    \ = new List<long>();\n        long max = 0;\n        long currentMax = 0;\n \
    \       long current = 0;\n        foreach (long number in numbers) {\n      \
    \      if (number > max) {\n                max = number;\n            }\n   \
    \         if (number > currentMax) {\n                currentMax = number;\n \
    \               current = 1;\n            }\n            else if (number == currentMax)\
    \ {\n                current++;\n            }\n            result.Add(currentMax);\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L,\
    \ (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new\
    \ long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <463edf23526548c185f3117fa91c2772>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <463edf23526548c185f3117fa91c2772>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660008892
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    public\
    \ static List<long> RollingMax(List<long> numbers) {\n        List<long> result\
    \ = new List<long>();\n        long max = 0;\n        long maxIndex = 0;\n   \
    \     long currentMax = numbers.First();\n        long currentMaxIndex = 0;\n\
    \        long currentMaxValue = numbers.First();\n        long currentMaxValueIndex\
    \ = 0;\n        long currentMaxValueIndex = numbers.First();\n        long currentMaxValueIndex\
    \ = numbers.First();\n        long currentMaxValueIndex = numbers.First();\n \
    \       long currentMaxValueIndex = numbers.First();\n        long currentMaxValueIndex\
    \ = numbers.First();\n        long currentMaxValueIndex = numbers.First();\n \
    \       long currentMaxValueIndex = numbers.First();\n        long currentMaxValueIndex\
    \ = numbers.First();\n        long currentMaxValueIndex = numbers.First();\n \
    \       long currentMaxValueIndex = numbers.First();\n        long currentMaxValueIndex\
    \ = numbers.First();\n        long currentMaxValueIndex = numbers.First();\n \
    \       long currentMaxValueIndex = numbers.First();\n        long currentMaxValueIndex\
    \ = numbers.First();\n        long currentMaxValueIndex = numbers.First();\n \
    \       long currentMaxValueIndex = numbers.First();\n        long currentMaxValueIndex\
    \ = numbers.First();\n        long currentMaxValueIndex = numbers.First();\n \
    \       long currentMaxValueIndex = numbers.First();\n        long currentMaxValueIndex\
    \ = numbers.First();\n        long currentMaxValueIndex = numbers.First();\n \
    \       long currentMaxValueIndex = numbers.First();\n        long currentMaxValueIndex\
    \ = numbers.First();\n        long currentMaxValueIndex = numbers.First();\n \
    \       long currentMaxValueIndex = numbers.First();\n        long currentMaxValueIndex\
    \ = numbers.First();\n        long currentMaxValueIndex = numbers.First();\n \
    \       long currentMaxValueIndex = numbers.First();\n        long currentMaxValueIndex\
    \ = numbers.First();\n        long currentMaxValueIndex = numbers.First();\n \
    \       long currentMaxValueIndex = numbers.First();\n        long currentMaxValueIndex\
    \ = numbers.First();\n        long currentMaxValueIndex = numbers.First();\n \
    \       long currentMaxValueIndex = numbers.First();\n        long currentMaxValueIndex\
    \ = numbers.First();\n        long currentMaxValueIndex = numbers.First();\n \
    \       long currentMaxValueIndex = numbers.First();\n        long currentMaxValueIndex\
    \ = numbers.First();\n        long currentMaxValueIndex = numbers.First();\n \
    \       long currentMaxValueIndex = numbers.First();\n        long currentMaxValueIndex\
    \ = numbers.First();\n        long currentMaxValueIndex = numbers.First();\n \
    \       long currentMaxValueIndex = numbers.First();\n        long currentMaxValueIndex\
    \ = numbers.First();\n        long currentMaxValueIndex = numbers.First();\n \
    \       long currentMaxValueIndex = numbers.First\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new\
    \ long[]{(long)4L, (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpr1431eae.cs(64,50): error CS1002: ; expected

    '
  timestamp: 1660008891
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    public\
    \ static List<long> RollingMax(List<long> numbers) {\n        List<long> result\
    \ = new List<long>();\n        long max = 0;\n        long currentMax = 0;\n \
    \       long currentNumber = 0;\n        foreach (long number in numbers) {\n\
    \            currentNumber = number;\n            currentMax = number;\n     \
    \       while (currentNumber > max) {\n                result.Add(currentMax);\n\
    \                currentMax = currentNumber;\n                currentNumber =\
    \ numbers.ElementAt(currentNumber - 1);\n            }\n            max = currentMax;\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L,\
    \ (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new\
    \ long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp_caoit_x.cs(22,51): error CS1503: Argument 2: cannot convert from ''long''
    to ''int''

    '
  timestamp: 1660008891
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    public\
    \ static List<long> RollingMax(List<long> numbers) {\n        List<long> result\
    \ = new List<long>();\n        long max = 0;\n        long currentMax = 0;\n \
    \       long currentSum = 0;\n        long currentSum2 = 0;\n        long currentSum3\
    \ = 0;\n        long currentSum4 = 0;\n        long currentSum5 = 0;\n       \
    \ long currentSum6 = 0;\n        long currentSum7 = 0;\n        long currentSum8\
    \ = 0;\n        long currentSum9 = 0;\n        long currentSum10 = 0;\n      \
    \  long currentSum11 = 0;\n        long currentSum12 = 0;\n        long currentSum13\
    \ = 0;\n        long currentSum14 = 0;\n        long currentSum15 = 0;\n     \
    \   long currentSum16 = 0;\n        long currentSum17 = 0;\n        long currentSum18\
    \ = 0;\n        long currentSum19 = 0;\n        long currentSum20 = 0;\n     \
    \   long currentSum21 = 0;\n        long currentSum22 = 0;\n        long currentSum23\
    \ = 0;\n        long currentSum24 = 0;\n        long currentSum25 = 0;\n     \
    \   long currentSum26 = 0;\n        long currentSum27 = 0;\n        long currentSum28\
    \ = 0;\n        long currentSum29 = 0;\n        long currentSum30 = 0;\n     \
    \   long currentSum31 = 0;\n        long currentSum32 = 0;\n        long currentSum33\
    \ = 0;\n        long currentSum34 = 0;\n        long currentSum35 = 0;\n     \
    \   long currentSum36 = 0;\n        long currentSum37 = 0;\n        long currentSum38\
    \ = 0;\n        long currentSum39 = 0;\n        long currentSum40 = 0;\n     \
    \   long currentSum41 = 0;\n        long currentSum42 = 0;\n        long currentSum43\
    \ = 0;\n        long currentSum44 = 0;\n        long currentSum45 = 0;\n     \
    \   long currentSum46 = 0;\n        long currentSum47 = 0;\n        long currentSum48\
    \ = 0;\n        long currentSum49 = 0;\n        long currentSum50 = 0;\n     \
    \   long currentSum51 = 0;\n        long currentSum52 = 0;\n        long currentSum53\
    \ = 0;\n        long currentSum54 = 0;\n        long currentSum55 = 0;\n     \
    \   long currentSum56 = 0;\n        long currentSum57 = 0;\n        long currentSum58\
    \ = 0;\n        long currentSum59 = 0;\n        long currentSum60 = 0;\n     \
    \   long currentSum61 = 0;\n        long currentSum62 = 0;\n        long currentSum63\
    \ = 0;\n        long currentSum64 = 0;\n        long currentSum65 = 0;\n     \
    \   long currentSum66 = 0;\n        long currentSum67 = 0;\n        long currentSum68\
    \ = 0;\n        long currentSum69 = 0;\n        long currentSum70 = 0;\n     \
    \   long currentSum71 = 0;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L,\
    \ (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new\
    \ long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpim5ndhov.cs(13,14): warning CS0219: The variable ''max'' is assigned but
    its value is never used

    /tmp/tmpim5ndhov.cs(14,14): warning CS0219: The variable ''currentMax'' is assigned
    but its value is never used

    /tmp/tmpim5ndhov.cs(15,14): warning CS0219: The variable ''currentSum'' is assigned
    but its value is never used

    /tmp/tmpim5ndhov.cs(16,14): warning CS0219: The variable ''currentSum2'' is assigned
    but its value is never used

    /tmp/tmpim5ndhov.cs(17,14): warning CS0219: The variable ''currentSum3'' is assigned
    but its value is never used

    /tmp/tmpim5ndhov.cs(18,14): warning CS0219: The variable ''currentSum4'' is assigned
    but its value is never used

    /tmp/tmpim5ndhov.cs(19,14): warning CS0219: The variable ''currentSum5'' is assigned
    but its value is never used

    /tmp/tmpim5ndhov.cs(20,14): warning CS0219: The variable ''currentSum6'' is assigned
    but its value is never used

    /tmp/tmpim5ndhov.cs(21,14): warning CS0219: The variable ''currentSum7'' is assigned
    but its value is never used

    /tmp/tmpim5ndhov.cs(22,14): warning CS0219: The variable ''currentSum8'' is assigned
    but its value is never used

    /tmp/tmpim5ndhov.cs(23,14): warning CS0219: The variable ''currentSum9'' is assigned
    but its value is never used

    /tmp/tmpim5ndhov.cs(24,14): warning CS0219: The variable ''currentSum10'' is assigned
    but its value is never used

    /tmp/tmpim5ndhov.cs(25,14): warning CS0219: The variable ''currentSum11'' is assigned
    but its value is never used

    /tmp/tmpim5ndhov.cs(26,14): warning CS0219: The variable ''currentSum12'' is assigned
    but its value is never used

    /tmp/tmpim5ndhov.cs(27,14): warning CS0219: The variable ''currentSum13'' is assigned
    but its value is never used

    /tmp/tmpim5ndhov.cs(28,14): warning CS0219: The variable ''currentSum14'' is assigned
    but its value is never used

    /tmp/tmpim5ndhov.cs(29,14): warning CS0219: The variable ''currentSum15'' is assigned
    but its value is never used

    /tmp/tmpim5ndhov.cs(30,14): warning CS'
  timestamp: 1660008891
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    public\
    \ static List<long> RollingMax(List<long> numbers) {\n        List<long> max =\
    \ new List<long>();\n        long maxValue = numbers.Max();\n        long currentMaxValue\
    \ = maxValue;\n        long currentMaxIndex = -1;\n        long currentMaxIndexValue\
    \ = numbers.Last();\n        long currentMaxIndexValue = numbers.Last();\n   \
    \     long currentMaxIndexValue = numbers.Last();\n        long currentMaxIndexValue\
    \ = numbers.Last();\n        long currentMaxIndexValue = numbers.Last();\n   \
    \     long currentMaxIndexValue = numbers.Last();\n        long currentMaxIndexValue\
    \ = numbers.Last();\n        long currentMaxIndexValue = numbers.Last();\n   \
    \     long currentMaxIndexValue = numbers.Last();\n        long currentMaxIndexValue\
    \ = numbers.Last();\n        long currentMaxIndexValue = numbers.Last();\n   \
    \     long currentMaxIndexValue = numbers.Last();\n        long currentMaxIndexValue\
    \ = numbers.Last();\n        long currentMaxIndexValue = numbers.Last();\n   \
    \     long currentMaxIndexValue = numbers.Last();\n        long currentMaxIndexValue\
    \ = numbers.Last();\n        long currentMaxIndexValue = numbers.Last();\n   \
    \     long currentMaxIndexValue = numbers.Last();\n        long currentMaxIndexValue\
    \ = numbers.Last();\n        long currentMaxIndexValue = numbers.Last();\n   \
    \     long currentMaxIndexValue = numbers.Last();\n        long currentMaxIndexValue\
    \ = numbers.Last();\n        long currentMaxIndexValue = numbers.Last();\n   \
    \     long currentMaxIndexValue = numbers.Last();\n        long currentMaxIndexValue\
    \ = numbers.Last();\n        long currentMaxIndexValue = numbers.Last();\n   \
    \     long currentMaxIndexValue = numbers.Last();\n        long currentMaxIndexValue\
    \ = numbers.Last();\n        long currentMaxIndexValue = numbers.Last();\n   \
    \     long currentMaxIndexValue = numbers.Last();\n        long currentMaxIndexValue\
    \ = numbers.Last();\n        long currentMaxIndexValue = numbers.Last();\n   \
    \     long currentMaxIndexValue = numbers.Last();\n        long currentMaxIndexValue\
    \ = numbers.Last();\n        long currentMaxIndexValue = numbers.Last();\n   \
    \     long currentMaxIndexValue = numbers.Last();\n        long currentMaxIndexValue\
    \ = numbers.Last();\n        long currentMaxIndexValue = numbers.Last();\n   \
    \     long currentMaxIndexValue = numbers.Last();\n        long currentMaxIndexValue\
    \ = numbers.Last();\n        long currentMaxIndexValue = numbers.Last();\n   \
    \     long currentMaxIndexValue = numbers.Last();\n        long currentMaxIndexValue\
    \ = numbers.Last();\n        long currentMaxIndexValue = numbers.Last();\n   \
    \     long currentMaxIndexValue = numbers.Last();\n        long currentMaxIndexValue\
    \ = numbers.Last();\n        long currentMaxIndexValue = numbers.Last();\n   \
    \     long currentMaxIndexValue = numbers.Last();\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new\
    \ long[]{(long)4L, (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpb7r9hp54.cs(17,14): error CS0128: A local variable or function named ''currentMaxIndexValue''
    is already defined in this scope

    /tmp/tmpb7r9hp54.cs(18,14): error CS0128: A local variable or function named ''currentMaxIndexValue''
    is already defined in this scope

    /tmp/tmpb7r9hp54.cs(19,14): error CS0128: A local variable or function named ''currentMaxIndexValue''
    is already defined in this scope

    /tmp/tmpb7r9hp54.cs(20,14): error CS0128: A local variable or function named ''currentMaxIndexValue''
    is already defined in this scope

    /tmp/tmpb7r9hp54.cs(21,14): error CS0128: A local variable or function named ''currentMaxIndexValue''
    is already defined in this scope

    /tmp/tmpb7r9hp54.cs(22,14): error CS0128: A local variable or function named ''currentMaxIndexValue''
    is already defined in this scope

    /tmp/tmpb7r9hp54.cs(23,14): error CS0128: A local variable or function named ''currentMaxIndexValue''
    is already defined in this scope

    /tmp/tmpb7r9hp54.cs(24,14): error CS0128: A local variable or function named ''currentMaxIndexValue''
    is already defined in this scope

    /tmp/tmpb7r9hp54.cs(25,14): error CS0128: A local variable or function named ''currentMaxIndexValue''
    is already defined in this scope

    /tmp/tmpb7r9hp54.cs(26,14): error CS0128: A local variable or function named ''currentMaxIndexValue''
    is already defined in this scope

    /tmp/tmpb7r9hp54.cs(27,14): error CS0128: A local variable or function named ''currentMaxIndexValue''
    is already defined in this scope

    /tmp/tmpb7r9hp54.cs(28,14): error CS0128: A local variable or function named ''currentMaxIndexValue''
    is already defined in this scope

    /tmp/tmpb7r9hp54.cs(29,14): error CS0128: A local variable or function named ''currentMaxIndexValue''
    is already defined in this scope

    /tmp/tmpb7r9hp54.cs(30,14): error CS0128: A local variable or function named ''currentMaxIndexValue''
    is already defined in this scope

    /tmp/tmpb7r9hp54.cs(31,14): error CS0128: A local variable '
  timestamp: 1660008891
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    public\
    \ static List<long> RollingMax(List<long> numbers) {\n        List<long> result\
    \ = new List<long>();\n        long max = 0;\n        long rollingMax = numbers.First();\n\
    \        foreach (long number in numbers) {\n            if (number > rollingMax)\
    \ {\n                rollingMax = number;\n            }\n            if (number\
    \ > max) {\n                max = number;\n            }\n        }\n        result.Add(rollingMax);\n\
    \        rollingMax = numbers.First();\n        foreach (long number in numbers.Skip(1))\
    \ {\n            if (number > rollingMax) {\n                rollingMax = number;\n\
    \            }\n            if (number > max) {\n                max = number;\n\
    \            }\n        }\n        result.Add(rollingMax);\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(RollingMax((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(RollingMax((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new\
    \ List<long>(new long[]{(long)4L, (long)3L, (long)2L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.InvalidOperationException: Sequence contains\
    \ no elements\n  at System.Linq.Enumerable.First[TSource] (System.Collections.Generic.IEnumerable`1[T]\
    \ source) [0x00010] in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem.RollingMax\
    \ (System.Collections.Generic.List`1[T] numbers) [0x0000a] in <35898df261f6412e87467f3502a87f2d>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <35898df261f6412e87467f3502a87f2d>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.InvalidOperationException: Sequence\
    \ contains no elements\n  at System.Linq.Enumerable.First[TSource] (System.Collections.Generic.IEnumerable`1[T]\
    \ source) [0x00010] in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem.RollingMax\
    \ (System.Collections.Generic.List`1[T] numbers) [0x0000a] in <35898df261f6412e87467f3502a87f2d>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <35898df261f6412e87467f3502a87f2d>:0\
    \ \n"
  stdout: ''
  timestamp: 1660008892
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    public\
    \ static List<long> RollingMax(List<long> numbers) {\n        List<long> result\
    \ = new List<long>();\n        long max = 0;\n        long currentMax = 0;\n \
    \       long currentNumber = 0;\n        long currentSum = 0;\n        long currentSumOfSquares\
    \ = 0;\n        long currentSumOfSquareOfDifference = 0;\n        long currentSumOfSquareOfDifferenceSquares\
    \ = 0;\n        long currentSumOfSquareOfDifferenceSquareOfDifference = 0;\n \
    \       long currentSumOfSquareOfDifferenceSquareOfDifferenceSquares = 0;\n  \
    \      long currentSumOfSquareOfDifferenceSquareOfDifferenceSquareOfDifference\
    \ = 0;\n        long currentSumOfSquareOfDifferenceSquareOfDifferenceSquareOfDifferenceSquares\
    \ = 0;\n        long currentSumOfSquareOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifference\
    \ = 0;\n        long currentSumOfSquareOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifference\
    \ = 0;\n        long currentSumOfSquareOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifference\
    \ = 0;\n        long currentSumOfSquareOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifference\
    \ = 0;\n        long currentSumOfSquareOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifference\
    \ = 0;\n        long currentSumOfSquareOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifference\
    \ = 0;\n        long currentSumOfSquareOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifference\
    \ = 0;\n        long currentSumOfSquareOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifference\
    \ = 0;\n        long currentSumOfSquareOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifference\
    \ = 0;\n        long currentSumOfSquareOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifference\
    \ = 0;\n        long currentSumOfSquareOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifference\
    \ = 0;\n        long currentSumOfSquareOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifference\
    \ = 0;\n        long currentSumOfSquareOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifference\
    \ = 0;\n        long currentSumOfSquareOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifference\
    \ = 0;\n        long currentSumOfSquareOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifference\
    \ = 0;\n        long currentSumOfSquareOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifference\
    \ = 0;\n        long currentSumOfSquareOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifference\
    \ = 0;\n        long currentSumOfSquareOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifference\
    \ = 0;\n        long currentSumOfSquareOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifference\
    \ = 0;\n        long currentSumOfSquareOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifference\
    \ = 0;\n        long currentSumOfSquareOfDifferenceSquareOf\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new\
    \ long[]{(long)4L, (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpi6_8i4zc.cs(44,52): error CS1002: ; expected

    '
  timestamp: 1660008891
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    public\
    \ static List<long> RollingMax(List<long> numbers) {\n        List<long> result\
    \ = new List<long>();\n        long max = 0;\n        long currentMax = 0;\n \
    \       long currentNumber = 0;\n        foreach (long number in numbers) {\n\
    \            currentNumber = number;\n            currentMax = number;\n     \
    \       while (currentNumber > 0) {\n                currentMax = Math.Max(currentMax,\
    \ currentNumber);\n                currentNumber = currentNumber - 1;\n      \
    \      }\n            result.Add(currentMax);\n        }\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(RollingMax((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(RollingMax((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new\
    \ List<long>(new long[]{(long)4L, (long)3L, (long)2L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <e3cf9a7048c449cd8f343bb07a4432b0>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <e3cf9a7048c449cd8f343bb07a4432b0>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660008892
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    public\
    \ static List<long> RollingMax(List<long> numbers) {\n        List<long> result\
    \ = new List<long>();\n        long max = 0;\n        long curMax = 0;\n     \
    \   long curMaxIndex = 0;\n        long curMaxValue = numbers[0];\n        long\
    \ curMaxIndex = numbers.IndexOf(curMaxValue);\n        long curMaxValue = numbers[0];\n\
    \        long curMaxIndex = numbers.IndexOf(curMaxValue);\n        long curMaxValue\
    \ = numbers[0];\n        long curMaxIndex = numbers.IndexOf(curMaxValue);\n  \
    \      long curMaxValue = numbers[0];\n        long curMaxIndex = numbers.IndexOf(curMaxValue);\n\
    \        long curMaxValue = numbers[0];\n        long curMaxIndex = numbers.IndexOf(curMaxValue);\n\
    \        long curMaxValue = numbers[0];\n        long curMaxIndex = numbers.IndexOf(curMaxValue);\n\
    \        long curMaxValue = numbers[0];\n        long curMaxIndex = numbers.IndexOf(curMaxValue);\n\
    \        long curMaxValue = numbers[0];\n        long curMaxIndex = numbers.IndexOf(curMaxValue);\n\
    \        long curMaxValue = numbers[0];\n        long curMaxIndex = numbers.IndexOf(curMaxValue);\n\
    \        long curMaxValue = numbers[0];\n        long curMaxIndex = numbers.IndexOf(curMaxValue);\n\
    \        long curMaxValue = numbers[0];\n        long curMaxIndex = numbers.IndexOf(curMaxValue);\n\
    \        long curMaxValue = numbers[0];\n        long curMaxIndex = numbers.IndexOf(curMaxValue);\n\
    \        long curMaxValue = numbers[0];\n        long curMaxIndex = numbers.IndexOf(curMaxValue);\n\
    \        long curMaxValue = numbers[0];\n        long curMaxIndex = numbers.IndexOf(curMaxValue);\n\
    \        long curMaxValue = numbers[0];\n        long curMaxIndex = numbers.IndexOf(curMaxValue);\n\
    \        long curMaxValue = numbers[0];\n        long curMaxIndex = numbers.IndexOf(curMaxValue);\n\
    \        long curMaxValue = numbers[0];\n        long curMaxIndex = numbers.IndexOf(curMaxValue);\n\
    \        long curMaxValue = numbers[0];\n        long curMaxIndex = numbers.IndexOf(curMaxValue);\n\
    \        long curMaxValue = numbers[0];\n        long curMaxIndex = numbers.IndexOf(curMaxValue);\n\
    \        long curMaxValue = numbers[0];\n        long curMaxIndex = numbers.IndexOf(curMaxValue);\n\
    \        long curMaxValue = numbers[0];\n        long curMaxIndex = numbers.IndexOf(curMaxValue);\n\
    \        long curMaxValue = numbers[0];\n        long curMaxIndex = numbers.IndexOf(curMaxValue);\n\
    \        long curMaxValue = numbers[0];\n        long curMaxIndex = numbers.IndexOf(curMaxValue);\n\
    \        long curMaxValue = numbers[0];\n        long curMaxIndex = numbers.IndexOf(curMaxValue);\n\
    \        long curMax\n    }\n    public static void Main(string[] args) {\n  \
    \  Debug.Assert(RollingMax((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L,\
    \ (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new\
    \ long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmporx1muy3.cs(64,20): error CS1002: ; expected

    '
  timestamp: 1660008891
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    public\
    \ static List<long> RollingMax(List<long> numbers) {\n        List<long> result\
    \ = new List<long>();\n        long max = 0;\n        long currentMax = 0;\n \
    \       long currentSum = 0;\n        long sum = 0;\n        long count = 0;\n\
    \        foreach (long number in numbers) {\n            currentSum += number;\n\
    \            if (currentSum > max) {\n                max = currentSum;\n    \
    \        }\n            if (currentSum == max) {\n                result.Add(max);\n\
    \                currentMax = max;\n                currentSum = 0;\n        \
    \        count++;\n            }\n        }\n        if (count > 0) {\n      \
    \      result.Add(currentMax);\n        }\n        return result;\n    }\n   \
    \ public static void Main(string[] args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new\
    \ long[]{(long)4L, (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <586a75b2ba87453d8415b6a02e8dfeed>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <586a75b2ba87453d8415b6a02e8dfeed>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660008892
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    public\
    \ static List<long> RollingMax(List<long> numbers) {\n        List<long> result\
    \ = new List<long>();\n        long maxValue = numbers.Max();\n        long currentMax\
    \ = maxValue;\n        long currentSum = 0;\n        long currentSumOfSquares\
    \ = 0;\n        long currentSumOfSquaresOfSquares = 0;\n        long currentSumOfSquaresOfSquaresOfSquares\
    \ = 0;\n        long currentSumOfSquaresOfSquaresOfSquaresOfSquares = 0;\n   \
    \     long currentSumOfSquaresOfSquaresOfSquaresOfSquaresOfSquares = 0;\n    \
    \    long currentSumOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquares = 0;\n\
    \        long currentSumOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquares\
    \ = 0;\n        long currentSumOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquares\
    \ = 0;\n        long currentSumOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquares\
    \ = 0;\n        long currentSumOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquares\
    \ = 0;\n        long currentSumOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquares\
    \ = 0;\n        long currentSumOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquares\
    \ = 0;\n        long currentSumOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquares\
    \ = 0;\n        long currentSumOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquares\
    \ = 0;\n        long currentSumOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquares\
    \ = 0;\n        long currentSumOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquares\
    \ = 0;\n        long currentSumOfSquaresOfSquares\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new\
    \ long[]{(long)4L, (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp_v59y84c.cs(32,42): error CS1002: ; expected

    '
  timestamp: 1660008891
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    public\
    \ static List<long> RollingMax(List<long> numbers) {\n        List<long> result\
    \ = new List<long>();\n        long maxValue = numbers.Max();\n        long currentMax\
    \ = maxValue;\n        long currentMaxIndex = -1;\n        long currentMaxIndex2\
    \ = -1;\n        long currentMaxIndex3 = -1;\n        long currentMaxIndex4 =\
    \ -1;\n        long currentMaxIndex5 = -1;\n        long currentMaxIndex6 = -1;\n\
    \        long currentMaxIndex7 = -1;\n        long currentMaxIndex8 = -1;\n  \
    \      long currentMaxIndex9 = -1;\n        long currentMaxIndex10 = -1;\n   \
    \     long currentMaxIndex11 = -1;\n        long currentMaxIndex12 = -1;\n   \
    \     long currentMaxIndex13 = -1;\n        long currentMaxIndex14 = -1;\n   \
    \     long currentMaxIndex15 = -1;\n        long currentMaxIndex16 = -1;\n   \
    \     long currentMaxIndex17 = -1;\n        long currentMaxIndex18 = -1;\n   \
    \     long currentMaxIndex19 = -1;\n        long currentMaxIndex20 = -1;\n   \
    \     long currentMaxIndex21 = -1;\n        long currentMaxIndex22 = -1;\n   \
    \     long currentMaxIndex23 = -1;\n        long currentMaxIndex24 = -1;\n   \
    \     long currentMaxIndex25 = -1;\n        long currentMaxIndex26 = -1;\n   \
    \     long currentMaxIndex27 = -1;\n        long currentMaxIndex28 = -1;\n   \
    \     long currentMaxIndex29 = -1;\n        long currentMaxIndex30 = -1;\n   \
    \     long currentMaxIndex31 = -1;\n        long currentMaxIndex32 = -1;\n   \
    \     long currentMaxIndex33 = -1;\n        long currentMaxIndex34 = -1;\n   \
    \     long currentMaxIndex35 = -1;\n        long currentMaxIndex36 = -1;\n   \
    \     long currentMaxIndex37 = -1;\n        long currentMaxIndex38 = -1;\n   \
    \     long currentMaxIndex39 = -1;\n        long currentMaxIndex40 = -1;\n   \
    \     long currentMaxIndex41 = -1;\n        long currentMaxIndex42 = -1;\n   \
    \     long currentMaxIndex43 = -1;\n        long currentMaxIndex44 = -1;\n   \
    \     long currentMaxIndex45 = -1;\n        long currentMaxIndex46 = -1;\n   \
    \     long currentMaxIndex47 = -1;\n        long currentMaxIndex48 = -1;\n   \
    \     long currentMaxIndex49 = -1;\n        long currentMaxIndex50 = -1;\n   \
    \     long currentMaxIndex51 = -1;\n        long currentMaxIndex52 = -1;\n   \
    \     long currentMaxIndex53 = -1;\n        long currentMaxIndex54 = -1;\n   \
    \     long currentMaxIndex55 = -1;\n        long currentMax\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new\
    \ long[]{(long)4L, (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpeez6_0z8.cs(70,24): error CS1002: ; expected

    '
  timestamp: 1660008891
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    public\
    \ static List<long> RollingMax(List<long> numbers) {\n        List<long> result\
    \ = new List<long>();\n        long max = 0;\n        long currentMax = 0;\n \
    \       long currentNumber = 0;\n        long currentSum = 0;\n        foreach\
    \ (long number in numbers) {\n            currentNumber = number;\n          \
    \  currentSum = currentNumber;\n            while (currentSum > 0) {\n       \
    \         currentSum -= currentNumber;\n                currentMax = currentSum;\n\
    \                result.Add(currentMax);\n            }\n        }\n        return\
    \ result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(RollingMax((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(RollingMax((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new\
    \ List<long>(new long[]{(long)4L, (long)3L, (long)2L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <1c1e39ee2a1a41ecb2e13667c1f8c723>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <1c1e39ee2a1a41ecb2e13667c1f8c723>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660008892
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    public\
    \ static List<long> RollingMax(List<long> numbers) {\n        List<long> result\
    \ = new List<long>();\n        long maxValue = numbers.Max();\n        long currentMaxValue\
    \ = maxValue;\n        long currentMaxIndex = 0;\n        long currentMaxIndexValue\
    \ = 0;\n        long currentMaxIndexValue2 = 0;\n        long currentMaxIndexValue3\
    \ = 0;\n        long currentMaxIndexValue4 = 0;\n        long currentMaxIndexValue5\
    \ = 0;\n        long currentMaxIndexValue6 = 0;\n        long currentMaxIndexValue7\
    \ = 0;\n        long currentMaxIndexValue8 = 0;\n        long currentMaxIndexValue9\
    \ = 0;\n        long currentMaxIndexValue10 = 0;\n        long currentMaxIndexValue11\
    \ = 0;\n        long currentMaxIndexValue12 = 0;\n        long currentMaxIndexValue13\
    \ = 0;\n        long currentMaxIndexValue14 = 0;\n        long currentMaxIndexValue15\
    \ = 0;\n        long currentMaxIndexValue16 = 0;\n        long currentMaxIndexValue17\
    \ = 0;\n        long currentMaxIndexValue18 = 0;\n        long currentMaxIndexValue19\
    \ = 0;\n        long currentMaxIndexValue20 = 0;\n        long currentMaxIndexValue21\
    \ = 0;\n        long currentMaxIndexValue22 = 0;\n        long currentMaxIndexValue23\
    \ = 0;\n        long currentMaxIndexValue24 = 0;\n        long currentMaxIndexValue25\
    \ = 0;\n        long currentMaxIndexValue26 = 0;\n        long currentMaxIndexValue27\
    \ = 0;\n        long currentMaxIndexValue28 = 0;\n        long currentMaxIndexValue29\
    \ = 0;\n        long currentMaxIndexValue30 = 0;\n        long currentMaxIndexValue31\
    \ = 0;\n        long currentMaxIndexValue32 = 0;\n        long currentMaxIndexValue33\
    \ = 0;\n        long currentMaxIndexValue34 = 0;\n        long currentMaxIndexValue35\
    \ = 0;\n        long currentMaxIndexValue36 = 0;\n        long currentMaxIndexValue37\
    \ = 0;\n        long currentMaxIndexValue38 = 0;\n        long currentMaxIndexValue39\
    \ = 0;\n        long currentMaxIndexValue40 = 0;\n        long currentMaxIndexValue41\
    \ = 0;\n        long currentMaxIndexValue42 = 0;\n        long currentMaxIndexValue43\
    \ = 0;\n        long currentMaxIndexValue44 = 0;\n        long currentMaxIndexValue45\
    \ = 0;\n        long currentMaxIndexValue46 = 0;\n        long currentMaxIndexValue47\
    \ = 0;\n        long currentMaxIndexValue48 = 0;\n        long currentMaxIndexValue49\
    \ = 0;\n        long currentMaxIndexValue50 = 0;\n        long currentMaxIndexValue51\
    \ = 0;\n        long currentMaxIndexValue52 = 0;\n        long currentMaxIndexValue53\
    \ = 0;\n        long currentMaxIndexValue54\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L,\
    \ (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new\
    \ long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpr8mz57to.cs(69,36): error CS1002: ; expected

    '
  timestamp: 1660008889
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    public\
    \ static List<long> RollingMax(List<long> numbers) {\n        List<long> result\
    \ = new List<long>();\n        long maxValue = numbers.Max();\n        long currentMaxValue\
    \ = maxValue;\n        long currentMaxIndex = 0;\n        long currentMaxIndexValue\
    \ = 0;\n        long currentMaxIndexValue2 = 0;\n        long currentMaxIndexValue3\
    \ = 0;\n        long currentMaxIndexValue4 = 0;\n        long currentMaxIndexValue5\
    \ = 0;\n        long currentMaxIndexValue6 = 0;\n        long currentMaxIndexValue7\
    \ = 0;\n        long currentMaxIndexValue8 = 0;\n        long currentMaxIndexValue9\
    \ = 0;\n        long currentMaxIndexValue10 = 0;\n        long currentMaxIndexValue11\
    \ = 0;\n        long currentMaxIndexValue12 = 0;\n        long currentMaxIndexValue13\
    \ = 0;\n        long currentMaxIndexValue14 = 0;\n        long currentMaxIndexValue15\
    \ = 0;\n        long currentMaxIndexValue16 = 0;\n        long currentMaxIndexValue17\
    \ = 0;\n        long currentMaxIndexValue18 = 0;\n        long currentMaxIndexValue19\
    \ = 0;\n        long currentMaxIndexValue20 = 0;\n        long currentMaxIndexValue21\
    \ = 0;\n        long currentMaxIndexValue22 = 0;\n        long currentMaxIndexValue23\
    \ = 0;\n        long currentMaxIndexValue24 = 0;\n        long currentMaxIndexValue25\
    \ = 0;\n        long currentMaxIndexValue26 = 0;\n        long currentMaxIndexValue27\
    \ = 0;\n        long currentMaxIndexValue28 = 0;\n        long currentMaxIndexValue29\
    \ = 0;\n        long currentMaxIndexValue30 = 0;\n        long currentMaxIndexValue31\
    \ = 0;\n        long currentMaxIndexValue32 = 0;\n        long currentMaxIndexValue33\
    \ = 0;\n        long currentMaxIndexValue34 = 0;\n        long currentMaxIndexValue35\
    \ = 0;\n        long currentMaxIndexValue36 = 0;\n        long currentMaxIndexValue37\
    \ = 0;\n        long currentMaxIndexValue38 = 0;\n        long currentMaxIndexValue39\
    \ = 0;\n        long currentMaxIndexValue40 = 0;\n        long currentMaxIndexValue41\
    \ = 0;\n        long currentMaxIndexValue42 = 0;\n        long currentMaxIndexValue43\
    \ = 0;\n        long currentMaxIndexValue44 = 0;\n        long currentMaxIndexValue45\
    \ = 0;\n        long currentMaxIndexValue46 = 0;\n        long currentMaxIndexValue47\
    \ = 0;\n        long currentMaxIndexValue48 = 0;\n        long currentMaxIndexValue49\
    \ = 0;\n        long currentMaxIndexValue50 = 0;\n        long currentMaxIndexValue51\
    \ = 0;\n        long currentMaxIndexValue52 = 0;\n        long currentMaxIndexValue53\
    \ = 0;\n        long currentMaxIndexValue54\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L,\
    \ (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new\
    \ long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpr8mz57to.cs(69,36): error CS1002: ; expected

    '
  timestamp: 1660008889
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    public\
    \ static List<long> RollingMax(List<long> numbers) {\n        List<long> max =\
    \ new List<long>();\n        long maxValue = numbers.First();\n        long currentMaxValue\
    \ = numbers.First();\n        long currentMaxIndex = numbers.First();\n      \
    \  foreach (long number in numbers) {\n            if (number > currentMaxValue)\
    \ {\n                currentMaxValue = number;\n                currentMaxIndex\
    \ = currentMaxIndex;\n            }\n            if (number > maxValue) {\n  \
    \              maxValue = number;\n                maxIndex = currentMaxIndex;\n\
    \            }\n            currentMaxIndex++;\n        }\n        max.Add(maxValue);\n\
    \        return max;\n    }\n    public static void Main(string[] args) {\n  \
    \  Debug.Assert(RollingMax((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L,\
    \ (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new\
    \ long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp9l6he9kd.cs(23,17): error CS0103: The name ''maxIndex'' does not exist
    in the current context

    /tmp/tmp9l6he9kd.cs(19,17): warning CS1717: Assignment made to same variable;
    did you mean to assign something else?

    '
  timestamp: 1660008892
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    public\
    \ static List<long> RollingMax(List<long> numbers) {\n        List<long> result\
    \ = new List<long>();\n        long maxValue = numbers.Max();\n        long currentMax\
    \ = maxValue;\n        long currentMaxIndex = 0;\n        long currentMaxIndex2\
    \ = -1;\n        long currentMaxIndex3 = -1;\n        long currentMaxIndex4 =\
    \ -1;\n        long currentMaxIndex5 = -1;\n        long currentMaxIndex6 = -1;\n\
    \        long currentMaxIndex7 = -1;\n        long currentMaxIndex8 = -1;\n  \
    \      long currentMaxIndex9 = -1;\n        long currentMaxIndex10 = -1;\n   \
    \     long currentMaxIndex11 = -1;\n        long currentMaxIndex12 = -1;\n   \
    \     long currentMaxIndex13 = -1;\n        long currentMaxIndex14 = -1;\n   \
    \     long currentMaxIndex15 = -1;\n        long currentMaxIndex16 = -1;\n   \
    \     long currentMaxIndex17 = -1;\n        long currentMaxIndex18 = -1;\n   \
    \     long currentMaxIndex19 = -1;\n        long currentMaxIndex20 = -1;\n   \
    \     long currentMaxIndex21 = -1;\n        long currentMaxIndex22 = -1;\n   \
    \     long currentMaxIndex23 = -1;\n        long currentMaxIndex24 = -1;\n   \
    \     long currentMaxIndex25 = -1;\n        long currentMaxIndex26 = -1;\n   \
    \     long currentMaxIndex27 = -1;\n        long currentMaxIndex28 = -1;\n   \
    \     long currentMaxIndex29 = -1;\n        long currentMaxIndex30 = -1;\n   \
    \     long currentMaxIndex31 = -1;\n        long currentMaxIndex32 = -1;\n   \
    \     long currentMaxIndex33 = -1;\n        long currentMaxIndex34 = -1;\n   \
    \     long currentMaxIndex35 = -1;\n        long currentMaxIndex36 = -1;\n   \
    \     long currentMaxIndex37 = -1;\n        long currentMaxIndex38 = -1;\n   \
    \     long currentMaxIndex39 = -1;\n        long currentMaxIndex40 = -1;\n   \
    \     long currentMaxIndex41 = -1;\n        long currentMaxIndex42 = -1;\n   \
    \     long currentMaxIndex43 = -1;\n        long currentMaxIndex44 = -1;\n   \
    \     long currentMaxIndex45 = -1;\n        long currentMaxIndex46 = -1;\n   \
    \     long currentMaxIndex47 = -1;\n        long currentMaxIndex48 = -1;\n   \
    \     long currentMaxIndex49 = -1;\n        long currentMaxIndex50 = -1;\n   \
    \     long currentMaxIndex51 = -1;\n        long currentMaxIndex52 = -1;\n   \
    \     long currentMaxIndex53 = -1;\n        long currentMaxIndex54 = -1;\n   \
    \     long currentMaxIndex55 = -1;\n        long currentMax\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new\
    \ long[]{(long)4L, (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp6j6oa1sh.cs(70,24): error CS1002: ; expected

    '
  timestamp: 1660008891
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    public\
    \ static List<long> RollingMax(List<long> numbers) {\n        List<long> result\
    \ = new List<long>();\n        long max = 0;\n        long currentMax = 0;\n \
    \       long currentSum = 0;\n        long currentSumOfSquares = 0;\n        foreach\
    \ (long number in numbers) {\n            currentSum += number;\n            currentSumOfSquares\
    \ += number * number;\n            if (currentSum > max) {\n                max\
    \ = currentSum;\n                currentMax = currentSum;\n            }\n   \
    \         else if (currentSum > currentMax) {\n                currentMax = currentSum;\n\
    \            }\n        }\n        result.Add(currentMax);\n        result.Add(currentMax);\n\
    \        return result;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(RollingMax((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L,\
    \ (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new\
    \ long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <394f0af37988409faa227a73bc7938a4>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <394f0af37988409faa227a73bc7938a4>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660008892
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    public\
    \ static List<long> RollingMax(List<long> numbers) {\n        List<long> result\
    \ = new List<long>();\n        long max = 0;\n        long currentMax = 0;\n \
    \       long currentMaxIndex = 0;\n        long currentMaxValue = 0;\n       \
    \ long currentMaxValueIndex = 0;\n        long currentMaxValueValue = 0;\n   \
    \     long currentMaxValueValueIndex = 0;\n        long currentMaxValueValueValue\
    \ = 0;\n        long currentMaxValueValueValueIndex = 0;\n        long currentMaxValueValueValueValue\
    \ = 0;\n        long currentMaxValueValueValueIndexValue = 0;\n        long currentMaxValueValueValueValue\
    \ = 0;\n        long currentMaxValueValueValueIndexValue = 0;\n        long currentMaxValueValueValueValue\
    \ = 0;\n        long currentMaxValueValueValueIndexValue = 0;\n        long currentMaxValueValueValueValue\
    \ = 0;\n        long currentMaxValueValueValueIndexValue = 0;\n        long currentMaxValueValueValueValue\
    \ = 0;\n        long currentMaxValueValueValueIndexValue = 0;\n        long currentMaxValueValueValueValue\
    \ = 0;\n        long currentMaxValueValueValueIndexValue = 0;\n        long currentMaxValueValueValueValue\
    \ = 0;\n        long currentMaxValueValueValueIndexValue = 0;\n        long currentMaxValueValueValueValue\
    \ = 0;\n        long currentMaxValueValueValueIndexValue = 0;\n        long currentMaxValueValueValueValue\
    \ = 0;\n        long currentMaxValueValueValueIndexValue = 0;\n        long currentMaxValueValueValueValue\
    \ = 0;\n        long currentMaxValueValueValueIndexValue = 0;\n        long currentMaxValueValueValueValue\
    \ = 0;\n        long currentMaxValueValueValueIndexValue = 0;\n        long currentMaxValueValueValueValue\
    \ = 0;\n        long currentMaxValueValueValueIndexValue = 0;\n        long currentMaxValueValueValueValue\
    \ = 0;\n        long currentMaxValueValueValueIndexValue = 0;\n        long currentMaxValueValueValueValue\
    \ = 0;\n        long currentMaxValueValueValueIndexValue = 0;\n        long currentMaxValueValueValueValue\
    \ = 0;\n        long currentMaxValueValueValueIndexValue = 0;\n        long currentMaxValueValueValueValue\
    \ = 0;\n        long currentMaxValueValueValueIndexValue = 0;\n        long currentMaxValueValueValueValue\
    \ = 0;\n        long currentMaxValueValueValueIndexValue = 0;\n        long currentMaxValueValueValueValue\
    \ = 0;\n        long currentMaxValueValueValueIndexValue = 0;\n        long currentMaxValueValueValueValue\
    \ = 0;\n        long currentMaxValueValueValueIndexValue = 0;\n        long currentMaxValueValueValueValue\
    \ = 0;\n        long currentMaxValueValueValueIndexValue = 0;\n        long currentMaxValueValueValueValue\
    \ = 0;\n        long current\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L,\
    \ (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new\
    \ long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpvxn7bfe1.cs(63,21): error CS1002: ; expected

    '
  timestamp: 1660008889
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    public\
    \ static List<long> RollingMax(List<long> numbers) {\n        List<long> maxes\
    \ = new List<long>();\n        long max = 0;\n        long currentMax = 0;\n \
    \       long currentMaxIndex = 0;\n        long currentMaxValue = numbers[0];\n\
    \        long currentMaxValueIndex = numbers[0];\n        foreach (long n in numbers)\
    \ {\n            if (n > currentMaxValue) {\n                currentMaxValue =\
    \ n;\n                currentMaxIndex = currentMaxValue - currentMax;\n      \
    \      }\n            if (n > max) {\n                max = n;\n             \
    \   maxes.Add(max);\n            }\n            currentMaxValue = n;\n       \
    \     currentMaxIndex = currentMaxValue - currentMax;\n        }\n        return\
    \ maxes;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(RollingMax((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(RollingMax((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new\
    \ List<long>(new long[]{(long)4L, (long)3L, (long)2L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out\
    \ of range. Must be non-negative and less than the size of the collection.\nParameter\
    \ name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax\
    \ (System.Collections.Generic.List`1[T] numbers) [0x00010] in <9fbd82e959ea429cbac7c93a4507fd93>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <9fbd82e959ea429cbac7c93a4507fd93>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index\
    \ was out of range. Must be non-negative and less than the size of the collection.\n\
    Parameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax\
    \ (System.Collections.Generic.List`1[T] numbers) [0x00010] in <9fbd82e959ea429cbac7c93a4507fd93>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <9fbd82e959ea429cbac7c93a4507fd93>:0\
    \ \n"
  stdout: ''
  timestamp: 1660008892
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    public\
    \ static List<long> RollingMax(List<long> numbers) {\n        List<long> result\
    \ = new List<long>();\n        long maxValue = numbers.Max();\n        long currentMax\
    \ = maxValue;\n        long currentSum = 0;\n        long currentCount = 0;\n\
    \        long currentSumOfSquares = 0;\n        long currentSumOfSquareOfSums\
    \ = 0;\n        foreach (long number in numbers) {\n            currentSum +=\
    \ number;\n            currentCount += 1;\n            currentSumOfSquares +=\
    \ number * number;\n            currentSumOfSquareOfSums += currentSum * currentSum;\n\
    \            if (currentCount > 1) {\n                currentMax = Math.Max(currentMax,\
    \ currentSum);\n                currentSum = 0;\n                currentCount\
    \ = 0;\n            }\n            if (currentCount == 1 && currentSumOfSquareOfSums\
    \ == currentSumOfSquares) {\n                result.Add(currentMax);\n       \
    \     }\n        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L,\
    \ (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new\
    \ long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n    }\n\n\
    }\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.InvalidOperationException: Sequence contains\
    \ no elements\n  at System.Linq.Enumerable.Max (System.Collections.Generic.IEnumerable`1[T]\
    \ source) [0x00022] in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem.RollingMax\
    \ (System.Collections.Generic.List`1[T] numbers) [0x00007] in <24a9a1c1b3cc42a29a02f349f0542f6e>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <24a9a1c1b3cc42a29a02f349f0542f6e>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.InvalidOperationException: Sequence\
    \ contains no elements\n  at System.Linq.Enumerable.Max (System.Collections.Generic.IEnumerable`1[T]\
    \ source) [0x00022] in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem.RollingMax\
    \ (System.Collections.Generic.List`1[T] numbers) [0x00007] in <24a9a1c1b3cc42a29a02f349f0542f6e>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <24a9a1c1b3cc42a29a02f349f0542f6e>:0\
    \ \n"
  stdout: ''
  timestamp: 1660008892
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    public\
    \ static List<long> RollingMax(List<long> numbers) {\n        List<long> max =\
    \ new List<long>();\n        long maxValue = numbers.Max();\n        long currentMax\
    \ = maxValue;\n        long currentMaxIndex = 0;\n        long currentMaxIndexValue\
    \ = 0;\n        long currentMaxIndexValue2 = 0;\n        long currentMaxIndexValue3\
    \ = 0;\n        long currentMaxIndexValue4 = 0;\n        long currentMaxIndexValue5\
    \ = 0;\n        long currentMaxIndexValue6 = 0;\n        long currentMaxIndexValue7\
    \ = 0;\n        long currentMaxIndexValue8 = 0;\n        long currentMaxIndexValue9\
    \ = 0;\n        long currentMaxIndexValue10 = 0;\n        long currentMaxIndexValue11\
    \ = 0;\n        long currentMaxIndexValue12 = 0;\n        long currentMaxIndexValue13\
    \ = 0;\n        long currentMaxIndexValue14 = 0;\n        long currentMaxIndexValue15\
    \ = 0;\n        long currentMaxIndexValue16 = 0;\n        long currentMaxIndexValue17\
    \ = 0;\n        long currentMaxIndexValue18 = 0;\n        long currentMaxIndexValue19\
    \ = 0;\n        long currentMaxIndexValue20 = 0;\n        long currentMaxIndexValue21\
    \ = 0;\n        long currentMaxIndexValue22 = 0;\n        long currentMaxIndexValue23\
    \ = 0;\n        long currentMaxIndexValue24 = 0;\n        long currentMaxIndexValue25\
    \ = 0;\n        long currentMaxIndexValue26 = 0;\n        long currentMaxIndexValue27\
    \ = 0;\n        long currentMaxIndexValue28 = 0;\n        long currentMaxIndexValue29\
    \ = 0;\n        long currentMaxIndexValue30 = 0;\n        long currentMaxIndexValue31\
    \ = 0;\n        long currentMaxIndexValue32 = 0;\n        long currentMaxIndexValue33\
    \ = 0;\n        long currentMaxIndexValue34 = 0;\n        long currentMaxIndexValue35\
    \ = 0;\n        long currentMaxIndexValue36 = 0;\n        long currentMaxIndexValue37\
    \ = 0;\n        long currentMaxIndexValue38 = 0;\n        long currentMaxIndexValue39\
    \ = 0;\n        long currentMaxIndexValue40 = 0;\n        long currentMaxIndexValue41\
    \ = 0;\n        long currentMaxIndexValue42 = 0;\n        long currentMaxIndexValue43\
    \ = 0;\n        long currentMaxIndexValue44 = 0;\n        long currentMaxIndexValue45\
    \ = 0;\n        long currentMaxIndexValue46 = 0;\n        long currentMaxIndexValue47\
    \ = 0;\n        long currentMaxIndexValue48 = 0;\n        long currentMaxIndexValue49\
    \ = 0;\n        long currentMaxIndexValue50 = 0;\n        long currentMaxIndexValue51\
    \ = 0;\n        long currentMaxIndexValue52 = 0;\n        long currentMaxIndexValue53\
    \ = 0;\n        long currentMaxIndexValue54\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L,\
    \ (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new\
    \ long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpcj81lryj.cs(69,36): error CS1002: ; expected

    '
  timestamp: 1660008889
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    public\
    \ static List<long> RollingMax(List<long> numbers) {\n        List<long> result\
    \ = new List<long>();\n        long max = 0;\n        long currentMax = 0;\n \
    \       long currentNumber = 0;\n        long currentSum = 0;\n        foreach\
    \ (long number in numbers) {\n            currentNumber = number;\n          \
    \  currentSum = currentNumber;\n            while (currentSum > 0) {\n       \
    \         currentMax = currentSum;\n                currentSum = 0;\n        \
    \        foreach (long number in numbers) {\n                    if (number >\
    \ currentMax) {\n                        currentMax = number;\n              \
    \      }\n                    currentSum += number;\n                }\n     \
    \           if (currentSum > 0) {\n                    result.Add(currentMax);\n\
    \                }\n            }\n        }\n        return result;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(RollingMax((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(RollingMax((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new\
    \ List<long>(new long[]{(long)4L, (long)3L, (long)2L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpnl2n62y3.cs(23,31): error CS0136: A local or parameter named ''number''
    cannot be declared in this scope because that name is used in an enclosing local
    scope to define a local or parameter

    /tmp/tmpnl2n62y3.cs(13,14): warning CS0219: The variable ''max'' is assigned but
    its value is never used

    '
  timestamp: 1660008892
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    public\
    \ static List<long> RollingMax(List<long> numbers) {\n        List<long> result\
    \ = new List<long>();\n        long maxValue = numbers.Max();\n        long currentMaxValue\
    \ = maxValue;\n        long currentMaxIndex = -1;\n        long currentMaxIndexValue\
    \ = numbers.Max();\n        long currentMaxIndexValue = numbers.Max();\n     \
    \   long currentMaxIndexValue = numbers.Max();\n        long currentMaxIndexValue\
    \ = numbers.Max();\n        long currentMaxIndexValue = numbers.Max();\n     \
    \   long currentMaxIndexValue = numbers.Max();\n        long currentMaxIndexValue\
    \ = numbers.Max();\n        long currentMaxIndexValue = numbers.Max();\n     \
    \   long currentMaxIndexValue = numbers.Max();\n        long currentMaxIndexValue\
    \ = numbers.Max();\n        long currentMaxIndexValue = numbers.Max();\n     \
    \   long currentMaxIndexValue = numbers.Max();\n        long currentMaxIndexValue\
    \ = numbers.Max();\n        long currentMaxIndexValue = numbers.Max();\n     \
    \   long currentMaxIndexValue = numbers.Max();\n        long currentMaxIndexValue\
    \ = numbers.Max();\n        long currentMaxIndexValue = numbers.Max();\n     \
    \   long currentMaxIndexValue = numbers.Max();\n        long currentMaxIndexValue\
    \ = numbers.Max();\n        long currentMaxIndexValue = numbers.Max();\n     \
    \   long currentMaxIndexValue = numbers.Max();\n        long currentMaxIndexValue\
    \ = numbers.Max();\n        long currentMaxIndexValue = numbers.Max();\n     \
    \   long currentMaxIndexValue = numbers.Max();\n        long currentMaxIndexValue\
    \ = numbers.Max();\n        long currentMaxIndexValue = numbers.Max();\n     \
    \   long currentMaxIndexValue = numbers.Max();\n        long currentMaxIndexValue\
    \ = numbers.Max();\n        long currentMaxIndexValue = numbers.Max();\n     \
    \   long currentMaxIndexValue = numbers.Max();\n        long currentMaxIndexValue\
    \ = numbers.Max();\n        long currentMaxIndexValue = numbers.Max();\n     \
    \   long currentMaxIndexValue = numbers.Max();\n        long currentMaxIndexValue\
    \ = numbers.Max();\n        long currentMaxIndexValue = numbers.Max();\n     \
    \   long currentMaxIndexValue = numbers.Max();\n        long currentMaxIndexValue\
    \ = numbers.Max();\n        long currentMaxIndexValue = numbers.Max();\n     \
    \   long currentMaxIndexValue = numbers.Max();\n        long currentMaxIndexValue\
    \ = numbers.Max();\n        long currentMaxIndexValue = numbers.Max();\n     \
    \   long currentMaxIndexValue = numbers.Max();\n        long currentMaxIndexValue\
    \ = numbers.Max();\n        long currentMaxIndexValue = numbers.Max();\n     \
    \   long currentMaxIndexValue = numbers.Max();\n        long currentMaxIndexValue\
    \ = numbers.Max();\n        long currentMaxIndexValue = numbers.Max();\n     \
    \   long currentMaxIndexValue = numbers.Max();\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new\
    \ long[]{(long)4L, (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpj1d9zaof.cs(17,14): error CS0128: A local variable or function named ''currentMaxIndexValue''
    is already defined in this scope

    /tmp/tmpj1d9zaof.cs(18,14): error CS0128: A local variable or function named ''currentMaxIndexValue''
    is already defined in this scope

    /tmp/tmpj1d9zaof.cs(19,14): error CS0128: A local variable or function named ''currentMaxIndexValue''
    is already defined in this scope

    /tmp/tmpj1d9zaof.cs(20,14): error CS0128: A local variable or function named ''currentMaxIndexValue''
    is already defined in this scope

    /tmp/tmpj1d9zaof.cs(21,14): error CS0128: A local variable or function named ''currentMaxIndexValue''
    is already defined in this scope

    /tmp/tmpj1d9zaof.cs(22,14): error CS0128: A local variable or function named ''currentMaxIndexValue''
    is already defined in this scope

    /tmp/tmpj1d9zaof.cs(23,14): error CS0128: A local variable or function named ''currentMaxIndexValue''
    is already defined in this scope

    /tmp/tmpj1d9zaof.cs(24,14): error CS0128: A local variable or function named ''currentMaxIndexValue''
    is already defined in this scope

    /tmp/tmpj1d9zaof.cs(25,14): error CS0128: A local variable or function named ''currentMaxIndexValue''
    is already defined in this scope

    /tmp/tmpj1d9zaof.cs(26,14): error CS0128: A local variable or function named ''currentMaxIndexValue''
    is already defined in this scope

    /tmp/tmpj1d9zaof.cs(27,14): error CS0128: A local variable or function named ''currentMaxIndexValue''
    is already defined in this scope

    /tmp/tmpj1d9zaof.cs(28,14): error CS0128: A local variable or function named ''currentMaxIndexValue''
    is already defined in this scope

    /tmp/tmpj1d9zaof.cs(29,14): error CS0128: A local variable or function named ''currentMaxIndexValue''
    is already defined in this scope

    /tmp/tmpj1d9zaof.cs(30,14): error CS0128: A local variable or function named ''currentMaxIndexValue''
    is already defined in this scope

    /tmp/tmpj1d9zaof.cs(31,14): error CS0128: A local variable '
  timestamp: 1660008890
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    public\
    \ static List<long> RollingMax(List<long> numbers) {\n        List<long> result\
    \ = new List<long>();\n        long maxValue = numbers.Max();\n        long currentMax\
    \ = maxValue;\n        long currentSum = 0;\n        long currentSumOfSquares\
    \ = 0;\n        long currentSumOfSquaresOfSquares = 0;\n        long currentSumOfSquaresOfSquaresOfSquares\
    \ = 0;\n        long currentSumOfSquaresOfSquaresOfSquaresOfSquares = 0;\n   \
    \     long currentSumOfSquaresOfSquaresOfSquaresOfSquaresOfSquares = 0;\n    \
    \    long currentSumOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquares = 0;\n\
    \        long currentSumOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquares\
    \ = 0;\n        long currentSumOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquares\
    \ = 0;\n        long currentSumOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquares\
    \ = 0;\n        long currentSumOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquares\
    \ = 0;\n        long currentSumOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquares\
    \ = 0;\n        long currentSumOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquares\
    \ = 0;\n        long currentSumOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquares\
    \ = 0;\n        long currentSumOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquares\
    \ = 0;\n        long currentSumOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquares\
    \ = 0;\n        long currentSumOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquares\
    \ = 0;\n        long currentSumOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquares\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(RollingMax((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(RollingMax((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new\
    \ List<long>(new long[]{(long)4L, (long)3L, (long)2L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpwcmpc6ih.cs(32,87): error CS1002: ; expected

    '
  timestamp: 1660008890
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    public\
    \ static List<long> RollingMax(List<long> numbers) {\n        List<long> max =\
    \ new List<long>();\n        long maxValue = numbers.Max();\n        long currentMax\
    \ = maxValue;\n        long currentMaxIndex = 0;\n        long currentMaxIndex2\
    \ = 0;\n        long currentMaxIndex3 = 0;\n        long currentMaxIndex4 = 0;\n\
    \        long currentMaxIndex5 = 0;\n        long currentMaxIndex6 = 0;\n    \
    \    long currentMaxIndex7 = 0;\n        long currentMaxIndex8 = 0;\n        long\
    \ currentMaxIndex9 = 0;\n        long currentMaxIndex10 = 0;\n        long currentMaxIndex11\
    \ = 0;\n        long currentMaxIndex12 = 0;\n        long currentMaxIndex13 =\
    \ 0;\n        long currentMaxIndex14 = 0;\n        long currentMaxIndex15 = 0;\n\
    \        long currentMaxIndex16 = 0;\n        long currentMaxIndex17 = 0;\n  \
    \      long currentMaxIndex18 = 0;\n        long currentMaxIndex19 = 0;\n    \
    \    long currentMaxIndex20 = 0;\n        long currentMaxIndex21 = 0;\n      \
    \  long currentMaxIndex22 = 0;\n        long currentMaxIndex23 = 0;\n        long\
    \ currentMaxIndex24 = 0;\n        long currentMaxIndex25 = 0;\n        long currentMaxIndex26\
    \ = 0;\n        long currentMaxIndex27 = 0;\n        long currentMaxIndex28 =\
    \ 0;\n        long currentMaxIndex29 = 0;\n        long currentMaxIndex30 = 0;\n\
    \        long currentMaxIndex31 = 0;\n        long currentMaxIndex32 = 0;\n  \
    \      long currentMaxIndex33 = 0;\n        long currentMaxIndex34 = 0;\n    \
    \    long currentMaxIndex35 = 0;\n        long currentMaxIndex36 = 0;\n      \
    \  long currentMaxIndex37 = 0;\n        long currentMaxIndex38 = 0;\n        long\
    \ currentMaxIndex39 = 0;\n        long currentMaxIndex40 = 0;\n        long currentMaxIndex41\
    \ = 0;\n        long currentMaxIndex42 = 0;\n        long currentMaxIndex43 =\
    \ 0;\n        long currentMaxIndex44 = 0;\n        long currentMaxIndex45 = 0;\n\
    \        long currentMaxIndex46 = 0;\n        long currentMaxIndex47 = 0;\n  \
    \      long currentMaxIndex48 = 0;\n        long currentMaxIndex49 = 0;\n    \
    \    long currentMaxIndex50 = 0;\n        long currentMaxIndex51 = 0;\n      \
    \  long currentMaxIndex52 = 0;\n        long currentMaxIndex53 = 0;\n        long\
    \ currentMaxIndex54 = 0;\n        long currentMaxIndex55 = 0;\n        long currentMaxIndex56\
    \ = 0;\n        long currentMaxIndex57 = 0;\n        long currentMaxIndex58 =\
    \ 0;\n        long currentMaxIndex59 = 0;\n        long currentMaxIndex60 = 0;\n\
    \        long currentMaxIndex61 = 0;\n        long current\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new\
    \ long[]{(long)4L, (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpo4_80yrq.cs(76,21): error CS1002: ; expected

    '
  timestamp: 1660008891
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    public\
    \ static List<long> RollingMax(List<long> numbers) {\n        List<long> result\
    \ = new List<long>();\n        long maxValue = numbers.Max();\n        long currentMax\
    \ = maxValue;\n        long currentMaxIndex = -1;\n        long currentMaxIndexInResult\
    \ = -1;\n        long currentMaxIndexInResultInResult = -1;\n        long currentMaxIndexInResultInResultInResult\
    \ = -1;\n        long currentMaxIndexInResultInResultInResultInResult = -1;\n\
    \        long currentMaxIndexInResultInResultInResultInResultInResult = -1;\n\
    \        long currentMaxIndexInResultInResultInResultInResultInResultInResult\
    \ = -1;\n        long currentMaxIndexInResultInResultInResultInResultInResultInResultInResult\
    \ = -1;\n        long currentMaxIndexInResultInResultInResultInResultInResultInResultInResultInResult\
    \ = -1;\n        long currentMaxIndexInResultInResultInResultInResultInResultInResultInResultInResultInResult\
    \ = -1;\n        long currentMaxIndexInResultInResultInResultInResultInResultInResultInResultInResultInResult\
    \ = -1;\n        long currentMaxIndexInResultInResultInResultInResultInResultInResultInResultInResultInResultInResult\
    \ = -1;\n        long currentMaxIndexInResultInResultInResultInResultInResultInResultInResultInResultInResultInResult\
    \ = -1;\n        long currentMaxIndexInResultInResultInResultInResultInResultInResultInResultInResultInResultInResult\
    \ = -1;\n        long currentMaxIndexInResultInResultInResultInResultInResultInResultInResultInResultInResultInResult\
    \ = -1;\n        long currentMaxIndexInResultInResultInResultInResultInResultInResultInResultInResultInResultInResult\
    \ = -1;\n        long currentMaxIndexInResultInResultInResultInResultInResultInResultInResultInResultInResultInResult\
    \ = -1;\n        long currentMaxIndexInResultInResultInResultInResultInResultInResultInResultInResultInResultInResult\
    \ = -1;\n        long currentMaxIndexInResultInResultInResultInResultInResultInResultInResultInResultInResultInResult\
    \ = -1;\n        long currentMaxIndexInResultInResultInResultInResultInResultInResultInResultInResultInResultInResult\
    \ = -1;\n        long currentMaxIndexInResultInResultInResultInResultInResultInResultInResultInResultInResultInResult\
    \ = -1;\n        long currentMaxIndexInResultInResultInResult\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new\
    \ long[]{(long)4L, (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpbx3u2wkr.cs(36,53): error CS1002: ; expected

    '
  timestamp: 1660008891
