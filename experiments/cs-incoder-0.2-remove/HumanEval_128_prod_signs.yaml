name: HumanEval_128_prod_signs
language: cs
prompt: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\n\
  using System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass\
  \ Problem {\n    // You are given an array arr of integers and you need to return\n\
  \    // sum of magnitudes of integers multiplied by product of all signs\n    //\
  \ of each number in the array, represented by 1, -1 or 0.\n    // Note: return None\
  \ for empty arr.\n    // Example:\n    public static Nullable<long> ProdSigns(List<long>\
  \ arr) {\n"
tests: "    }\n    public static void Main(string[] args) {\n    Debug.Assert(ProdSigns((new\
  \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)-4L}))).Equals(-9L));\n\
  \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)0L, (long)1L}))).Equals(0L));\n\
  \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
  \ (long)2L, (long)3L, (long)-1L, (long)1L}))).Equals(-10L));\n    Debug.Assert(ProdSigns((new\
  \ List<long>())).Equals(null));\n    Debug.Assert(ProdSigns((new List<long>(new\
  \ long[]{(long)2L, (long)4L, (long)1L, (long)2L, (long)-1L, (long)-1L, (long)9L}))).Equals(20L));\n\
  \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L, (long)1L, (long)-1L,\
  \ (long)1L}))).Equals(4L));\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L,\
  \ (long)1L, (long)1L, (long)1L}))).Equals(-4L));\n    Debug.Assert(ProdSigns((new\
  \ List<long>(new long[]{(long)-1L, (long)1L, (long)1L, (long)0L}))).Equals(0L));\n\
  \    }\n\n}\n"
completions: ["        long product = 1;\n        long sum = 0;\n        foreach (long\
    \ i in arr) {\n            long sign = i < 0 ? -1 : 1;\n            product *=\
    \ sign;\n            sum += sign * i;\n        }\n        return sum > 0 ? sum\
    \ : null;", "        if (arr.Count == 0) {\n            return null;\n       \
    \ }\n        long sum = 0;\n        long product = 1;\n        bool sign = true;\n\
    \        foreach (long i in arr) {\n            sign = sign && i > 0;\n      \
    \      sum += sign * i;\n            product *= sign;\n        }\n        return\
    \ sum * product;", "        long sum = 0;\n        long prod = 1;\n        foreach\
    \ (var item in arr) {\n            sum += Math.Abs(item);\n            prod *=\
    \ item;\n        }\n        if (sum == 0) {\n            return null;\n      \
    \  }\n        return sum * prod;", "        if (arr.Count == 0)\n            return\
    \ null;\n        var signs = new List<long>();\n        foreach (var item in arr)\
    \ {\n            signs.Add(item < 0 ? -1 : 1);\n        }\n        var product\
    \ = signs.Aggregate((a, b) => a * b); // product of all signs\n        var magnitudes\
    \ = arr.Select(x => Math.Abs(x)).ToList(); // magnitudes of numbers\n        var\
    \ result = magnitudes.Aggregate((a, b) => a * b * product); // sum of magnitudes\n\
    \        return result.HasValue ? result.Value : None;", "        long sum = 0;\n\
    \        long product = 1;\n        bool sign = true;\n        foreach (long n\
    \ in arr) {\n            sum += Math.Abs(n);\n            product *= n;\n    \
    \        if (n < 0) sign = false;\n        }\n        if (sum == 0) return null;\n\
    \        return sign == true ? sum * product : -sum * product;", "        if (arr.Count\
    \ == 0)\n            return null;\n        var signs = new List<long>();\n   \
    \     var product = 1;\n        foreach (var num in arr)\n        {\n        \
    \    signs.Add(num < 0 ? -1 : 1);\n            product *= num;\n        }\n  \
    \      var sum = signs.Sum();\n        return sum * product;", "        long sum\
    \ = 0;\n        long product = 1;\n        foreach (long n in arr) {\n       \
    \     sum += Math.Abs(n);\n            product *= n;\n        }\n        if (sum\
    \ == 0) {\n            return null;\n        }\n        return sum * product;",
  "        if (arr.Count == 0) {\n            return null;\n        }\n        long\
    \ product = 1;\n        long sum = 0;\n        foreach (long i in arr) {\n   \
    \         int sign = i % 2 == 0 ? 1 : -1;\n            product *= sign;\n    \
    \        sum += sign * i;\n        }\n        return sum == 0 ? null : sum;",
  "        if (arr.Count == 0)\n            return null;\n        long prod = 1;\n\
    \        long sign = 1;\n        long sum = 0;\n        foreach (long i in arr)\
    \ {\n            prod *= i;\n            sign *= i;\n            sum += sign;\n\
    \        }\n        return sum;", "        if (arr.Count == 0) return null;\n\
    \        var signs = arr.Select(x => Math.Sign(x)).ToList();\n        var mags\
    \ = arr.Select(x => Math.Abs(x)).ToList();\n        var prod = signs.Aggregate((x,\
    \ y) => x * y);\n        var magProd = mags.Aggregate((x, y) => x * y);\n    \
    \    var magSum = mags.Aggregate((x, y) => x + y);\n        return magSum * prod\
    \ * magProd;", "        if (arr.Count == 0)\n            return null;\n      \
    \  long prod = 1;\n        long sign = 1;\n        foreach (long n in arr)\n \
    \           prod *= n;\n        foreach (long n in arr)\n            sign *= n;\n\
    \        long mag = prod;\n        long signMag = sign;\n        long sum = 0;\n\
    \        foreach (long n in arr)\n            sum += Math.Abs(n) * signMag;\n\
    \        return sum;", "        if (arr.Count == 0) {\n            return null;\n\
    \        }\n        long product = 1;\n        long sum = 0;\n        foreach\
    \ (long i in arr) {\n            long sign = i < 0 ? -1 : 1;\n            long\
    \ mag = i;\n            product *= sign;\n            sum += mag * sign;\n   \
    \     }\n        return sum;", "        long sum = 0;\n        long product =\
    \ 1;\n        foreach (long i in arr) {\n            sum += Math.Abs(i);\n   \
    \         product *= i;\n        }\n        if (sum == 0) {\n            return\
    \ null;\n        }\n        return sum * product;", "        if (arr.Count ==\
    \ 0)\n            return null;\n        long prod = 1;\n        long sign = 1;\n\
    \        foreach (long i in arr) {\n            prod *= i;\n            sign *=\
    \ i;\n        }\n        long res = sign * prod;\n        return res;", "    \
    \    if (arr.Count == 0)\n            return null;\n        long prod = 1;\n \
    \       long sign = 1;\n        foreach (long i in arr)\n            prod *= i;\n\
    \        foreach (long i in arr)\n            sign *= i;\n        long result\
    \ = sign * prod;\n        return result < 0 ? null : result;", "        if (arr.Count\
    \ == 0)\n            return null;\n        long prod = 1;\n        long sign =\
    \ 1;\n        long sum = 0;\n        foreach (long i in arr)\n        {\n    \
    \        prod *= i;\n            sign *= i;\n            sum += sign;\n      \
    \  }\n        if (sum == 0)\n            return null;\n        return sum;", " \
    \       if (arr.Count == 0) {\n            return null;\n        }\n        var\
    \ signs = new List<long>();\n        var product = 1;\n        foreach (var item\
    \ in arr) {\n            var sign = item < 0 ? -1 : 1;\n            signs.Add(sign);\n\
    \            product *= sign;\n        }\n        var magnitudes = arr.Select(x\
    \ => Math.Abs(x)).ToList();\n        var result = magnitudes.Aggregate(product,\
    \ (current, magnitude) => current * magnitude);\n        return result.HasValue\
    \ ? result.Value : result;", "        long sum = 0;\n        long prod = 1;\n\
    \        foreach (long i in arr) {\n            sum += i;\n            prod *=\
    \ i;\n        }\n        if (arr.Count == 0) {\n            return null;\n   \
    \     }\n        long sign = prod > 0 ? 1 : -1;\n        long mag = sum;\n   \
    \     long mag2 = mag * mag;\n        long mag4 = mag2 * mag;\n        long mag8\
    \ = mag4 * mag;\n        long mag16 = mag8 * mag;\n        long mag32 = mag16\
    \ * mag;\n        long mag64 = mag32 * mag;\n        long mag128 = mag64 * mag;\n\
    \        long mag256 = mag128 * mag;\n        long mag512 = mag256 * mag;\n  \
    \      long mag1024 = mag512 * mag;\n        long mag2048 = mag1024 * mag;\n \
    \       long mag4096 = mag2048 * mag;\n        long mag8192 = mag4096 * mag;\n\
    \        long mag16384 = mag8192 * mag;\n        long mag32768 = mag16384 * mag;\n\
    \        long mag65536 = mag32768 * mag;\n        long mag131072 = mag65536 *\
    \ mag;\n        long mag262144 = mag131072 * mag;\n        long mag524288 = mag262144\
    \ * mag;\n        long mag1048576 = mag524288 * mag;\n        long mag2097152\
    \ = mag1048576 * mag;\n        long mag4194304 = mag2097152 * mag;\n        long\
    \ mag8388608 = mag4194304 * mag;\n        long mag16777216 = mag8388608 * mag;\n\
    \        long mag33554432 = mag16777216 * mag;\n        long mag67108864 = mag33554432\
    \ * mag;\n        long mag134217728 = mag67108864 * mag;\n        long mag268435456\
    \ = mag134217728 * mag;\n        long mag536870912 = mag268435456 * mag;\n   \
    \     long mag1073741824 = mag536870912 * mag;\n        long mag2147483648 = mag1073741824\
    \ * mag;\n        long mag4294967296 = mag2147483648 * mag;\n        long mag8589934592\
    \ = mag4294967296 * mag;\n        long mag17179869184 = mag8589934", "       \
    \ if (arr.Count == 0) {\n            return null;\n        }\n        long product\
    \ = 1;\n        long sum = 0;\n        foreach (long i in arr) {\n           \
    \ int sign = i % 2 == 0 ? 1 : -1;\n            product *= sign;\n            sum\
    \ += sign * i;\n        }\n        return sum == 0 ? null : sum;", "        if\
    \ (arr.Count == 0) {\n            return null;\n        }\n        var signs =\
    \ new List<long>();\n        var product = 1;\n        foreach (var item in arr)\
    \ {\n            signs.Add(item < 0 ? -1 : 1);\n            product *= item;\n\
    \        }\n        var result = signs.Sum();\n        if (product != 0) {\n \
    \           result *= signs.Sum();\n        }\n        return result;", "    \
    \    if (arr.Count == 0) {\n            return null;\n        }\n        long\
    \ sum = 0;\n        long prod = 1;\n        foreach (long i in arr) {\n      \
    \      sum += Math.Abs(i);\n            prod *= i;\n        }\n        if (sum\
    \ == 0) {\n            return null;\n        }\n        long sign = 1;\n     \
    \   long mag = 0;\n        foreach (long i in arr) {\n            mag += Math.Abs(i);\n\
    \            sign *= i;\n        }\n        long signMag = sign * mag;\n     \
    \   if (signMag > 0) {\n            return sum;\n        }\n        if (signMag\
    \ < 0) {\n            return -sum;\n        }\n        return prod;", "      \
    \  if (arr.Count == 0) return null;\n        var signs = arr.Select(x => x < 0\
    \ ? -1 : 1).ToArray();\n        var mags = arr.Select(x => Math.Abs(x)).ToArray();\n\
    \        var product = signs.Aggregate((x, y) => x * y);\n        var result =\
    \ mags.Aggregate((x, y) => x * y);\n        return product * result;", "     \
    \   if (arr.Count == 0) {\n            return null;\n        }\n        long product\
    \ = 1;\n        long sum = 0;\n        foreach (long i in arr) {\n           \
    \ int sign = i % 2 == 1 ? 1 : -1;\n            product *= sign;\n            sum\
    \ += sign * i;\n        }\n        return sum == 0 ? null : sum;", "        if\
    \ (arr.Count == 0) {\n            return null;\n        }\n        long sum =\
    \ 0;\n        long product = 1;\n        bool sign = true;\n        foreach (long\
    \ i in arr) {\n            sum += Math.Abs(i);\n            product *= i;\n  \
    \          if (sign) {\n                sign = i == 0;\n            } else {\n\
    \                sign = i == -1;\n            }\n        }\n        return sum\
    \ * product;", "        if (arr.Count == 0) {\n            return null;\n    \
    \    }\n        long product = 1;\n        long sum = 0;\n        bool sign =\
    \ true;\n        foreach (long i in arr) {\n            sign = sign && i > 0;\n\
    \            product *= i;\n            sum += sign * Math.Abs(i);\n        }\n\
    \        return sum * product;", "        if (arr.Count == 0) {\n            return\
    \ null;\n        }\n        long product = 1;\n        long sum = 0;\n       \
    \ bool sign = true;\n        foreach (var item in arr) {\n            sign = sign\
    \ ? item < 0 : item > 0;\n            product *= sign;\n            sum += sign\
    \ * item;\n        }\n        return sum > 0 ? sum : sum * product;", "      \
    \  if (arr.Count == 0)\n            return null;\n        var signs = new List<long>();\n\
    \        foreach (var x in arr)\n            signs.Add(x < 0 ? -1 : 1);\n    \
    \    var res = new long[arr.Count];\n        for (int i = 0; i < arr.Count; i++)\n\
    \            res[i] = signs[i] * arr[i];\n        return res.Sum();", "      \
    \  if (arr.Count == 0) {\n            return null;\n        }\n        var signs\
    \ = new List<long>();\n        var product = 1;\n        foreach (var i in arr)\
    \ {\n            signs.Add(i);\n            product *= i;\n        }\n       \
    \ var result = signs.Aggregate(product, (current, i) => current * i);\n      \
    \  return result != 0 ? result : null;", "        if (arr.Count == 0) return null;\n\
    \        var signs = new List<long>();\n        var product = 1;\n        foreach\
    \ (var num in arr) {\n            signs.Add(num < 0 ? -1 : 1);\n            product\
    \ *= num;\n        }\n        var result = signs.Aggregate(product, (current,\
    \ sign) => current * sign);\n        return result > 0 ? result : null;", "  \
    \      long sum = 0;\n        long product = 1;\n        foreach (long i in arr)\
    \ {\n            sum += Math.Abs(i);\n            product *= i;\n        }\n \
    \       if (sum == 0) {\n            return null;\n        }\n        return sum\
    \ * product;", "        long sum = 0;\n        long product = 1;\n        foreach\
    \ (long i in arr) {\n            sum += Math.Abs(i);\n            product *= i;\n\
    \        }\n        if (sum == 0) {\n            return null;\n        }\n   \
    \     long sign = product < 0 ? -1 : 1;\n        long result = sign * sum;\n \
    \       return result;", "        if (arr.Count == 0)\n            return null;\n\
    \        var signs = new List<long>();\n        var product = arr.Aggregate((a,\
    \ b) => a * b); // product of all numbers\n        foreach (var number in arr)\
    \ {\n            var sign = number < 0 ? -1 : 1;\n            signs.Add(sign *\
    \ Math.Sign(number));\n        }\n        var magnitudes = signs.Select(sign =>\
    \ Math.Abs(number)).ToList();\n        return product.Aggregate((a, b) => a *\
    \ b) + magnitudes.Aggregate((a, b) => a * b) * Math.Sign(product);", "       \
    \ if (arr.Count == 0) {\n            return null;\n        }\n        long sum\
    \ = 0;\n        long product = 1;\n        long sign = 1;\n        foreach (long\
    \ i in arr) {\n            sum += Math.Abs(i);\n            product *= i;\n  \
    \          sign *= i;\n        }\n        if (sum == 0) {\n            return\
    \ null;\n        }\n        return sign * Math.Abs(sum) * product;", "       \
    \ if (arr.Count == 0)\n            return null;\n        var signs = arr.Select(x\
    \ => x < 0 ? -1 : 1); // signs of numbers\n        var mags = arr.Select(x =>\
    \ Math.Abs(x)); // magnitudes of numbers\n        var product = signs.Aggregate((x,\
    \ y) => x * y); // product of all signs\n        return mags.Aggregate((x, y)\
    \ => x * y * product); // sum of magnitudes", "        long sum = 0;\n       \
    \ long prod = 1;\n        foreach (var item in arr) {\n            sum += Math.Abs(item);\n\
    \            prod *= item;\n        }\n        if (arr.Count == 0) {\n       \
    \     return null;\n        }\n        return sum * prod;", "        if (arr.Count\
    \ == 0)\n            return null;\n        long product = 1;\n        long sum\
    \ = 0;\n        foreach (long n in arr)\n        {\n            long sign = n\
    \ < 0 ? -1 : 0;\n            product *= sign;\n            sum += sign * n;\n\
    \        }\n        return sum * product;", "        if (arr.Count == 0) {\n \
    \           return null;\n        }\n        long sum = 0;\n        long product\
    \ = 1;\n        foreach (long i in arr) {\n            long sign = Sign(i);\n\
    \            sum += sign * i;\n            product *= sign;\n        }\n     \
    \   return sum == 0 ? null : sum * product;", "        if (arr.Count == 0)\n \
    \           return null;\n        var signs = new List<long>();\n        foreach\
    \ (var i in arr)\n            signs.Add(Sign(i));\n        var product = signs.Aggregate((x,\
    \ y) => x * y);\n        var magnitudes = arr.Select(x => Math.Abs(x)).ToList();\n\
    \        return magnitudes.Aggregate((x, y) => x * y * product);", "        if\
    \ (arr.Count == 0)\n            return null;\n        long sum = 0;\n        long\
    \ product = 1;\n        foreach (long i in arr) {\n            sum += Math.Abs(i);\n\
    \            product *= i;\n        }\n        if (sum < 0)\n            return\
    \ null;\n        return sum * product;", "        if (arr.Count == 0)\n      \
    \      return null;\n        var signs = new List<long>();\n        var product\
    \ = 1;\n        foreach (var x in arr) {\n            signs.Add(x * product);\n\
    \            product *= x;\n        }\n        var sum = 0;\n        foreach (var\
    \ x in signs)\n            sum += x;\n        return sum;", "        if (arr.Count\
    \ == 0) return null;\n        var signs = arr.Select(x => x < 0 ? -1 : 1).ToArray();\n\
    \        var magnitudes = arr.Select(x => Math.Abs(x)).ToArray();\n        var\
    \ product = signs.Aggregate((x, y) => x * y);\n        var sum = magnitudes.Aggregate((x,\
    \ y) => x + y);\n        return product * sum;", "        if (arr.Count == 0)\n\
    \            return null;\n        var signs = arr.Select(x => x < 0 ? -1 : 1).ToArray();\n\
    \        var mags = arr.Select(x => Math.Abs(x)).ToArray();\n        var prod\
    \ = signs.Aggregate((x, y) => x * y);\n        var sum = mags.Aggregate((x, y)\
    \ => x * y);\n        return prod * sum;", "        if (arr.Count == 0) {\n  \
    \          return null;\n        }\n        var signs = new List<long>();\n  \
    \      var product = 1;\n        foreach (var num in arr) {\n            signs.Add(num\
    \ >= 0 ? 1 : -1);\n            product *= num;\n        }\n        var magnitudes\
    \ = arr.Select(x => Math.Abs(x)).ToList();\n        var result = magnitudes.Aggregate(product,\
    \ (current, magnitude) => current * magnitude);\n        return signs.Aggregate(result,\
    \ (current, sign) => current * sign);", "        if (arr.Count == 0)\n       \
    \     return null;\n        var signs = arr.Select(x => x < 0 ? -1 : (x > 0 ?\
    \ 1 : 0));\n        var magnitudes = arr.Select(x => Math.Abs(x));\n        var\
    \ product = signs.Aggregate((x, y) => x * y);\n        var result = magnitudes.Aggregate((x,\
    \ y) => x * y);\n        return result * product;", "        if (arr.Count ==\
    \ 0) {\n            return null;\n        }\n        long prod = 1;\n        long\
    \ sign = 1;\n        foreach (long i in arr) {\n            prod *= i;\n     \
    \       sign *= i;\n        }\n        long mag = prod;\n        long signMag\
    \ = sign;\n        long sum = 0;\n        foreach (long i in arr) {\n        \
    \    sum += signMag * i;\n            signMag *= i;\n        }\n        return\
    \ sum;", "        long product = 1;\n        long sum = 0;\n        foreach (var\
    \ item in arr) {\n            product *= item;\n            sum += Math.Abs(item);\n\
    \        }\n        if (sum == 0)\n            return null;\n        return sum\
    \ * product;", "        if (arr.Count == 0) return null;\n        long product\
    \ = 1;\n        long sum = 0;\n        foreach (long i in arr) {\n           \
    \ long sign = i < 0 ? -1 : 0;\n            long magnitude = i < 0 ? i : -i;\n\
    \            product *= magnitude;\n            sum += sign * magnitude;\n   \
    \     }\n        return sum;", "        long product = 1;\n        long sum =\
    \ 0;\n        foreach (var item in arr) {\n            product *= item;\n    \
    \        sum += Math.Abs(item);\n        }\n        if (sum == 0) return null;\n\
    \        return sum * product;", "        if (arr.Count == 0) {\n            return\
    \ null;\n        }\n        var signs = new List<long>();\n        var product\
    \ = 1;\n        foreach (var item in arr) {\n            signs.Add(item < 0 ?\
    \ -1 : 1);\n            product *= item;\n        }\n        var result = signs.Sum();\n\
    \        return product * result;", "        if (arr.Count == 0)\n           \
    \ return null;\n        var signs = new List<long>();\n        foreach (var i\
    \ in arr)\n            signs.Add(Sign(i));\n        var res = new List<long>();\n\
    \        foreach (var i in signs)\n            res.Add(i * Sign(arr.Sum()));\n\
    \        return res.Sum();", "        if (arr.Count == 0) {\n            return\
    \ null;\n        }\n        long prod = 1;\n        long sign = 1;\n        long\
    \ sum = 0;\n        foreach (long i in arr) {\n            prod *= i;\n      \
    \      sign *= i;\n            sum += sign;\n        }\n        return sum;",
  "        if (arr.Count == 0)\n            return null;\n        var signs = new\
    \ List<long>();\n        var product = 1;\n        foreach (var x in arr)\n  \
    \          signs.Add(x * product);\n            product *= x;\n        return\
    \ signs.Sum();", "        if (arr.Count == 0) {\n            return null;\n  \
    \      }\n        long product = 1;\n        long sum = 0;\n        bool sign\
    \ = true;\n        foreach (long i in arr) {\n            sign = sign && i > 0;\n\
    \            sum += sign * i;\n            product *= sign;\n        }\n     \
    \   return sum * product;", "        if (arr.Count == 0)\n            return null;\n\
    \        long product = 1;\n        long sum = 0;\n        foreach (var item in\
    \ arr) {\n            sum += Math.Abs(item);\n            product *= item;\n \
    \       }\n        if (sum == 0)\n            return null;\n        long sign\
    \ = 1;\n        foreach (var item in arr) {\n            sign *= item;\n     \
    \   }\n        long result = sign * Math.Abs(product);\n        return result\
    \ < 0 ? null : result;", "        long prod = 1;\n        long sign = 1;\n   \
    \     foreach (var x in arr) {\n            prod *= x;\n            sign *= (x\
    \ < 0 ? -1 : 1);\n        }\n        return prod * sign;", "        if (arr.Count\
    \ == 0) return null;\n        var signs = arr.Select(x => x < 0 ? -1 : (x > 0\
    \ ? 1 : 0));\n        var mags = arr.Select(x => Math.Abs(x)).ToList();\n    \
    \    var product = signs.Aggregate((x, y) => x * y);\n        var result = mags.Aggregate((x,\
    \ y) => x * y * product);\n        return result > 0 ? result : null;", "    \
    \    if (arr.Count == 0)\n            return null;\n        var signs = new List<long>();\n\
    \        foreach (var i in arr)\n            signs.Add(Sign(i));\n        var\
    \ sum = 0;\n        foreach (var i in signs)\n            sum += i;\n        var\
    \ product = 1;\n        foreach (var i in signs)\n            product *= i;\n\
    \        return sum * product;", "        if (arr.Count == 0) {\n            return\
    \ null;\n        }\n        long product = 1;\n        long sum = 0;\n       \
    \ foreach (long i in arr) {\n            long sign = i < 0 ? -1 : 1;\n       \
    \     product *= sign;\n            sum += sign * i;\n        }\n        return\
    \ sum * product;", "        if (arr.Count == 0)\n            return null;\n  \
    \      var signs = new List<long>();\n        var product = 1;\n        foreach\
    \ (var x in arr)\n        {\n            var sign = x < 0 ? -1 : 1;\n        \
    \    signs.Add(sign);\n            product *= sign;\n        }\n        var result\
    \ = signs.Aggregate((x, y) => x * y);\n        return result * product;", "  \
    \      if (arr.Count == 0) {\n            return null;\n        }\n        var\
    \ signs = new List<long>();\n        foreach (var item in arr) {\n           \
    \ var sign = item < 0 ? -1 : 1;\n            signs.Add(sign);\n        }\n   \
    \     var product = signs.Aggregate((a, b) => a * b); // product of signs\n  \
    \      var magnitudes = arr.Select(x => Math.Abs(x)).ToList();\n        var result\
    \ = magnitudes.Aggregate((a, b) => a * b); // sum of magnitudes\n        return\
    \ product.Equals(result) ? result : product;", "        if (arr.Count == 0)\n\
    \            return null;\n        var signs = new List<long>();\n        var\
    \ product = 1;\n        foreach (var item in arr)\n        {\n            signs.Add(Math.Sign(item));\n\
    \            product *= item;\n        }\n        var result = signs.Aggregate((a,\
    \ b) => a * b);\n        return result * product;", "        if (arr.Count ==\
    \ 0)\n            return null;\n        long prod = 1;\n        long sign = 1;\n\
    \        long sum = 0;\n        foreach (long i in arr) {\n            sign *=\
    \ i;\n            sum += sign;\n            prod *= sign;\n        }\n       \
    \ return sum;", "        if (arr.Count == 0)\n            return null;\n     \
    \   var signs = new List<long>();\n        var product = 1;\n        foreach (var\
    \ item in arr) {\n            signs.Add(item < 0 ? -1 : 1);\n            product\
    \ *= item;\n        }\n        var sum = 0;\n        foreach (var item in signs)\n\
    \            sum += item;\n        return sum * product;", "        long product\
    \ = 1;\n        long sum = 0;\n        foreach (var i in arr) {\n            sum\
    \ += Math.Abs(i);\n            product *= i;\n        }\n        if (arr.Count\
    \ == 0) {\n            return null;\n        }\n        long sign = -1;\n    \
    \    foreach (var i in arr) {\n            sign *= i;\n        }\n        return\
    \ sign * sum * product;", "        long sum = 0;\n        long product = 1;\n\
    \        foreach (long i in arr) {\n            sum += Math.Abs(i);\n        \
    \    product *= i;\n        }\n        if (sum < 0)\n            return null;\n\
    \        return sum * product;", "        if (arr.Count == 0)\n            return\
    \ null;\n        long product = 1;\n        long sum = 0;\n        foreach (long\
    \ i in arr) {\n            long sign = i < 0 ? -1 : 0;\n            long magnitude\
    \ = i < 0 ? 1 : 0;\n            product *= sign;\n            sum += magnitude\
    \ * i;\n        }\n        return sum > 0 ? sum : null;", "        if (arr.Count\
    \ == 0) {\n            return null;\n        }\n        long product = 1;\n  \
    \      long sum = 0;\n        long sign = 1;\n        foreach (long i in arr)\
    \ {\n            sign *= i;\n            sum += sign * Math.Abs(i);\n        \
    \    product *= sign;\n        }\n        return sum;", "        if (arr.Count\
    \ == 0)\n            return null;\n        long product = 1;\n        long sum\
    \ = 0;\n        foreach (var item in arr) {\n            long sign = item < 0\
    \ ? -1 : 1;\n            product *= sign;\n            sum += sign * item;\n \
    \       }\n        return sum * product;", "        if (arr.Count == 0)\n    \
    \        return null;\n        var signs = arr.Select(x => x < 0 ? -1 : (x > 0\
    \ ? 1 : 0)).ToArray();\n        var product = signs.Aggregate((x, y) => x * y);\n\
    \        var magnitudes = arr.Select(x => Math.Abs(x)).ToArray();\n        return\
    \ magnitudes.Aggregate((x, y) => x * y * product);", "        if (arr.Count ==\
    \ 0) {\n            return null;\n        }\n        long prod = 1;\n        long\
    \ sign = 1;\n        long sum = 0;\n        foreach (long i in arr) {\n      \
    \      sign = sign * i;\n            sum += sign;\n            prod *= sign;\n\
    \        }\n        if (sum == 0) {\n            return null;\n        }\n   \
    \     return sum;", "        if (arr.Count == 0)\n            return null;\n \
    \       var signs = new List<long>();\n        foreach (var i in arr)\n      \
    \      signs.Add(Sign(i));\n        var prod = Sign(arr.Sum());\n        var result\
    \ = signs.Aggregate(prod, (acc, s) => acc * s);\n        return result != prod\
    \ ? result : null;", "        long product = 1;\n        long sum = 0;\n     \
    \   foreach (long i in arr) {\n            product *= i;\n            sum += Math.Abs(i);\n\
    \        }\n        if (sum > 0) {\n            return sum;\n        }\n     \
    \   return product;", "        if (arr.Count == 0) {\n            return null;\n\
    \        }\n        long product = 1;\n        long sum = 0;\n        foreach\
    \ (long i in arr) {\n            long sign = Sign(i);\n            product *=\
    \ sign;\n            sum += sign * i;\n        }\n        return sum == 0 ? null\
    \ : sum;", "        if (arr.Count == 0)\n            return null;\n        var\
    \ signs = new List<long>();\n        var product = 1;\n        foreach (var item\
    \ in arr) {\n            var sign = item < 0 ? -1 : 1;\n            signs.Add(sign);\n\
    \            product *= sign;\n        }\n        var result = signs.Aggregate(product,\
    \ (current, sign) => current * sign);\n        return result != 0 ? result : null;",
  "        if (arr.Count == 0)\n            return null;\n        long prod = 1;\n\
    \        long sign = 1;\n        foreach (long i in arr) {\n            prod *=\
    \ i;\n            sign *= i;\n        }\n        long mag = arr.Sum(x => Math.Abs(x));\n\
    \        long result = mag * prod;\n        if (sign < 0)\n            return\
    \ result;\n        if (sign > 0)\n            return -result;\n        return\
    \ result;", "        if (arr.Count == 0)\n            return null;\n        var\
    \ signs = new List<long>();\n        foreach (var item in arr)\n            signs.Add(item\
    \ < 0 ? -1 : 1);\n        var product = signs.Aggregate((x, y) => x * y);\n  \
    \      var magnitudes = arr.Select(x => Math.Abs(x)).ToList();\n        return\
    \ magnitudes.Aggregate((x, y) => x * y * product);", "        if (arr.Count ==\
    \ 0)\n            return null;\n        var signs = arr.Select(x => x < 0 ? -1\
    \ : 1).ToArray();\n        var mags = arr.Select(x => Math.Abs(x)).ToArray();\n\
    \        var product = signs.Aggregate((x, y) => x * y);\n        var result =\
    \ mags.Aggregate((x, y) => x * y);\n        return result * product;", "     \
    \   if (arr.Count == 0)\n            return null;\n        long prod = 1;\n  \
    \      long sum = 0;\n        foreach (long i in arr)\n            prod *= i;\n\
    \        foreach (long i in arr)\n            sum += Math.Abs(i);\n        if\
    \ (sum == 0)\n            return null;\n        long sign = 1;\n        foreach\
    \ (long i in arr)\n            sign *= i;\n        long result = sign * prod;\n\
    \        if (result > 0)\n            return result;\n        return -result;",
  "        long prod = 1;\n        long sign = 1;\n        foreach (long i in arr)\
    \ {\n            prod *= i;\n            sign *= (i < 0) ? -1 : 1;\n        }\n\
    \        return prod * sign;", "        if (arr.Count == 0) {\n            return\
    \ null;\n        }\n        var signs = new List<long>();\n        foreach (var\
    \ num in arr) {\n            signs.Add(num > 0 ? 1 : -1);\n        }\n       \
    \ var product = signs.Aggregate((a, b) => a * b); // product of signs\n      \
    \  var magnitudes = arr.Select(x => Math.Abs(x)).ToList(); // magnitudes of numbers\n\
    \        var sum = magnitudes.Aggregate((a, b) => a + b); // sum of magnitudes\n\
    \        return product * sum;", "        long product = 1;\n        long sum\
    \ = 0;\n        foreach (long i in arr) {\n            long magnitude = i;\n \
    \           int sign = i < 0 ? -1 : 1;\n            product *= sign;\n       \
    \     sum += magnitude * product;\n        }\n        return sum;", "        if\
    \ (arr.Count == 0) {\n            return null;\n        }\n        long product\
    \ = 1;\n        long sum = 0;\n        bool sign = true;\n        foreach (long\
    \ i in arr) {\n            sum += Math.Abs(i);\n            product *= i;\n  \
    \          sign = sign && i < 0;\n        }\n        return sign\n           \
    \ ? sum\n            : sum * product;", "        long product = 1;\n        long\
    \ sum = 0;\n        foreach (long i in arr) {\n            long sign = i < 0 ?\
    \ -1 : 1;\n            product *= sign;\n            sum += sign * i;\n      \
    \  }\n        return sum > 0 ? sum : null;", "        if (arr.Count == 0) {\n\
    \            return null;\n        }\n        long product = 1;\n        long\
    \ sum = 0;\n        foreach (long n in arr) {\n            sum += Math.Abs(n);\n\
    \            product *= n;\n        }\n        if (sum == 0) {\n            return\
    \ null;\n        }\n        return sum * product;", "        long product = 1;\n\
    \        long sum = 0;\n        foreach (var item in arr) {\n            product\
    \ *= item;\n            sum += Math.Abs(item);\n        }\n        if (arr.Count\
    \ == 0) {\n            return null;\n        }\n        return sum * product;",
  "        if (arr.Count == 0)\n            return null;\n        long prod = 1;\n\
    \        long sign = 1;\n        long sum = 0;\n        foreach (long i in arr)\
    \ {\n            prod *= i;\n            sign *= i;\n            sum += sign;\n\
    \        }\n        return sum;", "        if (arr.Count == 0) {\n           \
    \ return null;\n        }\n        var signs = new List<long>();\n        var\
    \ product = 1;\n        foreach (var item in arr) {\n            signs.Add(item\
    \ < 0 ? -1 : 1);\n            product *= item;\n        }\n        var result\
    \ = signs.Aggregate((x, y) => x * y);\n        return result * product;", "  \
    \      if (arr.Count == 0) {\n            return null;\n        }\n        long\
    \ product = 1;\n        long sum = 0;\n        bool sign = true;\n        foreach\
    \ (long i in arr) {\n            sign = sign && i > 0;\n            sum += sign\
    \ * i;\n            product *= sign;\n        }\n        return sum * product;",
  "        long product = 1;\n        long sum = 0;\n        foreach (long i in arr)\
    \ {\n            int sign = i < 0 ? -1 : 1;\n            product *= sign;\n  \
    \          sum += sign * i;\n        }\n        return sum > 0 ? sum : null;",
  "        if (arr.Count == 0) {\n            return null;\n        }\n        long\
    \ sum = 0;\n        long product = 1;\n        long sign = 1;\n        foreach\
    \ (long i in arr) {\n            sum += Math.Abs(i);\n            product *= i;\n\
    \            sign *= i;\n        }\n        if (sum == 0) {\n            return\
    \ null;\n        }\n        return sign * Math.Abs(sum) * product;", "       \
    \ long prod = 1;\n        long sign = 1;\n        foreach (var i in arr) {\n \
    \           prod *= i;\n            sign *= (i < 0) ? -1 : 1;\n        }\n   \
    \     return prod * sign;", "        long product = 1;\n        long sum = 0;\n\
    \        foreach (long n in arr) {\n            long sign = n < 0 ? -1 : 0;\n\
    \            product *= sign;\n            sum += sign * n;\n        }\n     \
    \   if (product == 0)\n            return null;\n        return sum;", "     \
    \   if (arr.Count == 0) {\n            return null;\n        }\n        long product\
    \ = 1;\n        long sum = 0;\n        foreach (long i in arr) {\n           \
    \ long sign = i < 0 ? -1 : 1;\n            product *= sign;\n            sum +=\
    \ sign * i;\n        }\n        return sum > 0 ? sum : sum * -1;", "        if\
    \ (arr.Count == 0) {\n            return null;\n        }\n        var signs =\
    \ new List<long>();\n        foreach (var i in arr) {\n            signs.Add(Sign(i));\n\
    \        }\n        var product = signs.Aggregate((a, b) => a * b);\n        var\
    \ magnitudes = arr.Select(i => Math.Abs(i)).ToList();\n        var result = magnitudes.Aggregate((a,\
    \ b) => a * b);\n        return product * result;", "        if (arr.Count ==\
    \ 0) {\n            return null;\n        }\n        long product = 1;\n     \
    \   long sum = 0;\n        foreach (long i in arr) {\n            long sign =\
    \ Sign(i);\n            product *= sign;\n            sum += sign * i;\n     \
    \   }\n        return sum == 0 ? null : sum;", "        long sum = 0;\n      \
    \  long product = 1;\n        foreach (long i in arr) {\n            sum += Math.Abs(i);\n\
    \            product *= i;\n        }\n        if (sum < 0)\n            return\
    \ null;\n        return sum * product;", "        if (arr.Count == 0) {\n    \
    \        return null;\n        }\n        long prod = 1;\n        long sum = 0;\n\
    \        foreach (long n in arr) {\n            sum += Math.Abs(n);\n        \
    \    prod *= n;\n        }\n        if (sum == 0) {\n            return null;\n\
    \        }\n        long sign = 1;\n        foreach (long n in arr) {\n      \
    \      sign *= n;\n        }\n        long res = sign * prod;\n        if (res\
    \ == 0) {\n            return null;\n        }\n        return res;", "      \
    \  if (arr.Count == 0)\n            return null;\n        long product = 1;\n\
    \        long sum = 0;\n        foreach (long i in arr)\n        {\n         \
    \   long sign = i < 0 ? -1 : 1;\n            product *= sign;\n            sum\
    \ += sign * i;\n        }\n        return sum * product;", "        if (arr.Count\
    \ == 0) {\n            return null;\n        }\n        long prod = 1;\n     \
    \   long sign = 1;\n        foreach (long i in arr) {\n            prod *= i;\n\
    \            sign *= (i < 0) ? -1 : 1;\n        }\n        return sign * prod;",
  "        if (arr.Count == 0)\n            return null;\n        long prod = 1;\n\
    \        long sum = 0;\n        foreach (long i in arr)\n            prod *= i;\n\
    \        foreach (long i in arr)\n            sum += Math.Abs(i) * prod;\n   \
    \     return sum;", "        if (arr.Count == 0)\n            return null;\n \
    \       long sum = 0;\n        long product = 1;\n        bool sign = true;\n\
    \        foreach (long i in arr) {\n            sum += Math.Abs(i);\n        \
    \    product *= i;\n            sign = sign && (i < 0);\n        }\n        if\
    \ (sign)\n            return sum;\n        else\n            return -sum;", " \
    \       if (arr.Count == 0) {\n            return null;\n        }\n        long\
    \ prod = 1;\n        long sign = 1;\n        long sum = 0;\n        foreach (long\
    \ i in arr) {\n            prod *= i;\n            sign *= i;\n            sum\
    \ += sign;\n        }\n        return sum;", "        long sum = 0;\n        long\
    \ prod = 1;\n        foreach (long n in arr) {\n            sum += Math.Abs(n);\n\
    \            prod *= n;\n        }\n        if (arr.Count == 0) {\n          \
    \  return null;\n        }\n        long sign = 1;\n        foreach (long n in\
    \ arr) {\n            sign *= n;\n        }\n        long res = sum * sign;\n\
    \        if (res > 0) {\n            return res;\n        }\n        if (res <\
    \ 0) {\n            return -res;\n        }\n        return null;", "        long\
    \ product = 1;\n        long sum = 0;\n        foreach (long i in arr) {\n   \
    \         product *= i;\n            sum += Math.Abs(i);\n        }\n        if\
    \ (sum > 0) {\n            return sum;\n        }\n        return product;", " \
    \       long sum = 0;\n        long product = 1;\n        foreach (long i in arr)\
    \ {\n            sum += Math.Abs(i);\n            product *= i;\n        }\n \
    \       if (sum < 0)\n            return null;\n        else\n            return\
    \ sum * product;", "        if (arr.Count == 0) {\n            return null;\n\
    \        }\n        var signs = new List<long>();\n        foreach (var x in arr)\
    \ {\n            signs.Add(Sign(x));\n        }\n        var product = signs.Aggregate((x,\
    \ y) => x * y);\n        var magnitudes = arr.Select(x => Math.Abs(x)).ToList();\n\
    \        var result = magnitudes.Aggregate((x, y) => x * y);\n        return product\
    \ * result;", "        if (arr.Count == 0) {\n            return null;\n     \
    \   }\n        long product = 1;\n        long sum = 0;\n        long sign = 1;\n\
    \        foreach (long i in arr) {\n            sum += sign * i;\n           \
    \ product *= sign;\n            sign *= -1;\n        }\n        return sum;",
  "        long product = 1;\n        long sum = 0;\n        foreach (var item in\
    \ arr) {\n            long magnitude = item > 0 ? item : -item ;\n           \
    \ sum += magnitude;\n            product *= magnitude;\n        }\n        if\
    \ (arr.Count == 0) {\n            return null;\n        }\n        return sum;",
  "        long sum = 0;\n        long prod = 1;\n        foreach (long i in arr)\
    \ {\n            sum += Math.Abs(i);\n            prod *= i;\n        }\n    \
    \    if (sum == 0)\n            return null;\n        return sum * prod;", " \
    \       long sum = 0;\n        long product = 1;\n        foreach (long i in arr)\
    \ {\n            sum += Math.Abs(i);\n            product *= i;\n        }\n \
    \       if (sum == 0)\n            return null;\n        return sum * product;",
  "        long product = 1;\n        long sum = 0;\n        foreach (var item in\
    \ arr) {\n            product *= item;\n            sum += Math.Abs(item);\n \
    \       }\n        if (sum == 0)\n            return null;\n        return sum\
    \ * product;", "        long sum = 0;\n        long prod = 1;\n        foreach\
    \ (var item in arr)\n        {\n            sum += Math.Abs(item);\n         \
    \   prod *= item;\n        }\n        if (arr.Count == 0)\n        {\n       \
    \     return null;\n        }\n        if (arr.Count == 1)\n        {\n      \
    \      return sum;\n        }\n        if (arr.Count == 2)\n        {\n      \
    \      return sum * prod;\n        }\n        long sign = -1;\n        long product\
    \ = prod;\n        foreach (var item in arr)\n        {\n            sign *= item;\n\
    \            product *= item;\n        }\n        return sign * Math.Abs(Math.Sqrt(product));",
  "        if (arr.Count == 0)\n            return null;\n        long product = 1;\n\
    \        long sum = 0;\n        foreach (long i in arr) {\n            int sign\
    \ = i % 2 == 0 ? 1 : -1;\n            product *= sign;\n            sum += sign\
    \ * i;\n        }\n        if (sum == 0)\n            return null;\n        return\
    \ sum * product;", "        if (arr.Count == 0)\n            return null;\n  \
    \      var signs = new List<long>();\n        foreach (var i in arr)\n       \
    \     signs.Add(Sign(i));\n        var res = new List<long>();\n        foreach\
    \ (var i in signs)\n            res.Add(i * Math.Abs(arr.Sum()));\n        return\
    \ res.Sum();", "        if (arr.Count == 0) return null;\n        var signs =\
    \ arr.Select(x => Math.Sign(x)).ToList();\n        var product = signs.Aggregate((x,\
    \ y) => x * y);\n        var magnitudes = arr.Select(x => Math.Abs(x)).ToList();\n\
    \        var result = magnitudes.Aggregate((x, y) => x * y);\n        return result.Equals(product)\
    \ ? result : null;", "        if (arr.Count == 0) return null;\n        var signs\
    \ = new List<long>();\n        foreach (var i in arr) {\n            signs.Add(Sign(i));\n\
    \        }\n        var product = signs.Aggregate((x, y) => x * y);\n        var\
    \ magnitude = arr.Aggregate((x, y) => x * y);\n        return product * magnitude;",
  "        if (arr.Count == 0)\n            return null;\n        long prod = 1;\n\
    \        long sign = 1;\n        foreach (long i in arr) {\n            prod *=\
    \ i;\n            sign *= i;\n        }\n        long mag = arr.Sum(x => Math.Abs(x));\n\
    \        long result = mag * sign;\n        return result < 0 ? null : result;",
  "        if (arr.Count == 0) {\n            return null;\n        }\n        long\
    \ sum = 0;\n        long product = 1;\n        bool sign = true;\n        foreach\
    \ (long i in arr) {\n            sum += Math.Abs(i);\n            product *= i;\n\
    \            if (sign) {\n                sign = i == 0;\n            } else {\n\
    \                sign = i == -1;\n            }\n        }\n        return sum\
    \ * product;", "        if (arr.Count == 0)\n            return null;\n      \
    \  long product = 1;\n        long sum = 0;\n        foreach (long i in arr) {\n\
    \            long sign = i < 0 ? -1 : 1;\n            long magnitude = i < 0 ?\
    \ -i : i;\n            product *= sign;\n            sum += magnitude;\n     \
    \   }\n        return sum * product;", "        if (arr.Count == 0)\n        \
    \    return null;\n        long product = 1;\n        long sum = 0;\n        foreach\
    \ (long i in arr) {\n            long sign = i < 0 ? -1 : 1;\n            product\
    \ *= sign;\n            sum += sign * i;\n        }\n        return sum > 0 ?\
    \ sum : sum * -1;", "        if (arr.Count == 0) {\n            return null;\n\
    \        }\n        var signs = new List<long>();\n        var product = 1;\n\
    \        foreach (var num in arr) {\n            signs.Add(num < 0 ? -1 : 1);\n\
    \            product *= num;\n        }\n        var sum = signs.Sum();\n    \
    \    if (sum == 0) {\n            return null;\n        }\n        var magnitude\
    \ = signs.Max();\n        var result = product * magnitude;\n        return result.IsNull\
    \ ? null : result;", "        if (arr.Count == 0)\n            return null;\n\
    \        long prod = 1;\n        long sign = 1;\n        long sum = 0;\n     \
    \   foreach (long n in arr)\n            prod *= n;\n        foreach (long n in\
    \ arr)\n            sign *= n;\n        foreach (long n in arr)\n            sum\
    \ += sign * n;\n        return sum;", "        long product = 1;\n        long\
    \ sum = 0;\n        foreach (var item in arr) {\n            product *= item;\n\
    \            sum += Math.Abs(item);\n        }\n        return sum > 0 ? sum :\
    \ product;", "        if (arr.Count == 0) {\n            return null;\n      \
    \  }\n        var signs = new List<long>();\n        foreach (var item in arr)\
    \ {\n            signs.Add(item < 0 ? -1 : 1);\n        }\n        var product\
    \ = signs.Aggregate((x, y) => x * y);\n        var magnitudes = arr.Select(x =>\
    \ Math.Abs(x)).ToList();\n        var result = magnitudes.Aggregate((x, y) =>\
    \ x * y);\n        return product * result;", "        if (arr.Count == 0) {\n\
    \            return null;\n        }\n        long product = 1;\n        long\
    \ sum = 0;\n        foreach (long i in arr) {\n            long sign = i < 0 ?\
    \ -1 : 1;\n            product *= sign;\n            sum += sign * i;\n      \
    \  }\n        return sum * product;", "        if (arr.Count == 0) {\n       \
    \     return null;\n        }\n        long prod = 1;\n        long sign = 1;\n\
    \        long sum = 0;\n        foreach (long i in arr) {\n            sign *=\
    \ i;\n            sum += sign;\n            prod *= sign;\n        }\n       \
    \ return sum;", "        if (arr.Count == 0) {\n            return null;\n   \
    \     }\n        long prod = 1;\n        long sign = 1;\n        long sum = 0;\n\
    \        foreach (long i in arr) {\n            prod *= i;\n            sign *=\
    \ i;\n            sum += sign;\n        }\n        return sum;", "        if (arr.Count\
    \ == 0)\n            return null;\n        long sum = 0;\n        long prod =\
    \ 1;\n        foreach (long i in arr) {\n            sum += i;\n            prod\
    \ *= i;\n        }\n        if (sum < 0)\n            return null;\n        if\
    \ (prod < 0)\n            return null;\n        if (prod == 0)\n            return\
    \ null;\n        long mag = arr.Sum(x => Math.Abs(x));\n        long sign = prod\
    \ / mag;\n        if (sign == 0)\n            return null;\n        long result\
    \ = sign * mag;\n        return result;", "        long sum = 0;\n        long\
    \ product = 1;\n        foreach (long n in arr) {\n            sum += Math.Abs(n);\n\
    \            product *= n;\n        }\n        if (sum == 0) return null;\n  \
    \      return sum * product;", "        if (arr.Count == 0)\n            return\
    \ null;\n        long product = 1;\n        long sum = 0;\n        foreach (long\
    \ i in arr) {\n            sum += i;\n            product *= i;\n        }\n \
    \       long sign = 1;\n        long magnitude = 0;\n        foreach (long i in\
    \ arr) {\n            magnitude += Math.Abs(i);\n            sign *= i;\n    \
    \    }\n        if (magnitude == 0)\n            return null;\n        long result\
    \ = sign * magnitude;\n        if (magnitude > 0)\n            result *= -1;\n\
    \        return result;", "        long sum = 0;\n        long product = 1;\n\
    \        bool sign = true;\n        foreach (long i in arr) {\n            sign\
    \ = sign && i >= 0;\n            sum += sign * i;\n            product *= sign;\n\
    \        }\n        if (sum == 0)\n            return null;\n        return sum\
    \ * product;", "        if (arr.Count == 0) return null;\n        long prod =\
    \ 1;\n        long sign = 1;\n        long sum = 0;\n        for (int i = 0; i\
    \ < arr.Count; i++) {\n            long num = arr[i];\n            sum += Math.Abs(num);\n\
    \            prod *= num;\n            if (num > 0) sign = -1;\n            else\
    \ if (num < 0) sign = 1;\n        }\n        if (sum == 0) return null;\n    \
    \    long product = prod;\n        long productSign = sign;\n        long productSum\
    \ = sum;\n        for (int i = 0; i < arr.Count; i++) {\n            long num\
    \ = arr[i];\n            product = product * num;\n            productSign = productSign\
    \ * num;\n            productSum = productSum + Math.Abs(num);\n        }\n  \
    \      if (productSum == 0) return null;\n        long productProduct = product;\n\
    \        long productProductSign = productSign;\n        long productProductSum\
    \ = productSum;\n        for (int i = 0; i < arr.Count; i++) {\n            long\
    \ num = arr[i];\n            productProduct = productProduct * num;\n        \
    \    productProductSign = productProductSign * num;\n            productProductSum\
    \ = productProductSum + Math.Abs(num);\n        }\n        long productProductProduct\
    \ = productProduct;\n        long productProductProductSign = productProductSign;\n\
    \        long productProductProductSum = productProductSum;\n        long productProductProductProduct\
    \ = productProductProduct;\n        long productProductProductProductSign = productProductProductSign;\n\
    \        long productProductProductProductSum = productProductProductSum;\n  \
    \      long productProductProductProductProduct = productProductProductProduct;\n\
    \        long productProductProductProductProductSign = productProductProductProductSign;\n\
    \        long productProductProductProductProductSum = productProductProductProductSum;\n\
    \        long productProductProductProductProductProduct = productProductProductProductProduct;\n\
    \        long productProductProductProductProductProductSign = productProductProductProductProductSign;\n\
    \        long productProductProductProductProductProductSum = productProductProductProductProductSum;\n\
    \        long productProductProductProductProductProductProduct = productProductProductProductProductProduct;\n\
    \        long productProductProductProductProductProductSign = productProductProductProductProductProductSign;\n\
    \        long productProductProductProductProductProductSum = productProductProductProductProductProductSum;\n\
    \        long productProductProductProductProductProductProduct = productProductProductProductProductProductProduct;\n\
    \        long productProductProductProductProductProductProductSign = productProductProductProductProductProductProductSign;\n\
    \        long productProductProductProductProductProductSum = ", "        if (arr.Count\
    \ == 0)\n            return null;\n        long prod = 1;\n        long sign =\
    \ 1;\n        foreach (long i in arr)\n            prod *= i;\n        foreach\
    \ (long i in arr)\n            sign *= i;\n        if (prod == 0)\n          \
    \  return null;\n        long mag = arr.Sum(x => Math.Abs(x));\n        long mag2\
    \ = mag * sign;\n        if (mag2 > Long.MaxValue || mag2 < Long.MinValue)\n \
    \           return null;\n        return mag2;", "        long sum = 0;\n    \
    \    long product = 1;\n        bool sign = true;\n        foreach (long i in\
    \ arr) {\n            sum += Math.Abs(i);\n            product *= i;\n       \
    \     sign = sign && i >= 0;\n        }\n        return sign ? sum : null;", " \
    \       if (arr.Count == 0) return null;\n        long product = 1;\n        long\
    \ sum = 0;\n        long sign = 1;\n        foreach (long i in arr) {\n      \
    \      sign *= i;\n            sum += sign * Math.Abs(i);\n            product\
    \ *= sign;\n        }\n        return sum > 0 ? sum : sum * product;", "     \
    \   if (arr.Count == 0)\n            return null;\n        var signs = arr.Select(x\
    \ => Math.Sign(x)).ToArray();\n        var product = signs.Select(x => x * x).Sum();\n\
    \        var magnitudes = arr.Select(x => Math.Abs(x)).ToArray();\n        var\
    \ sum = magnitudes.Select(x => x * product).Sum();\n        return sum;", "  \
    \      if (arr.Count == 0) {\n            return null;\n        }\n        long\
    \ product = 1;\n        long sum = 0;\n        bool sign = true;\n        foreach\
    \ (var item in arr) {\n            sign = sign && item < 0;\n            product\
    \ *= item;\n            sum += sign * Math.Abs(item);\n        }\n        return\
    \ sum * product;", "        if (arr.Count == 0) {\n            return null;\n\
    \        }\n        var signs = new List<long>();\n        foreach (var i in arr)\
    \ {\n            signs.Add(Sign(i));\n        }\n        var sum = 0;\n      \
    \  foreach (var i in signs) {\n            sum += i;\n        }\n        var product\
    \ = Sign(sum);\n        if (product == 0) {\n            return null;\n      \
    \  }\n        var result = new long[arr.Count];\n        for (int i = 0; i < arr.Count;\
    \ i++) {\n            result[i] = Sign(arr[i]) * product;\n        }\n       \
    \ return result;", "        if (arr.Count == 0)\n            return null;\n  \
    \      var signs = new List<long>();\n        var product = 1;\n        foreach\
    \ (var item in arr) {\n            signs.Add(Math.Sign(item));\n            product\
    \ *= item;\n        }\n        var result = signs.Aggregate((a, b) => a * b);\n\
    \        if (result != 0)\n            return result;\n        signs.Clear();\n\
    \        product = 1;\n        foreach (var item in arr) {\n            signs.Add(Math.Sign(item));\n\
    \            product *= item;\n        }\n        result = signs.Aggregate((a,\
    \ b) => a * b);\n        if (result != 0)\n            return result;\n      \
    \  return null;", "        if (arr.Count == 0) return null;\n        long prod\
    \ = 1;\n        long sign = 1;\n        long sum = 0;\n        foreach (long i\
    \ in arr) {\n            sum += Math.Abs(i);\n            prod *= i;\n       \
    \     sign *= i;\n        }\n        if (sum == 0) return null;\n        return\
    \ sign * Math.Abs(sum);", "        if (arr.Count == 0) {\n            return null;\n\
    \        }\n        long sum = 0;\n        long prod = 1;\n        foreach (long\
    \ n in arr) {\n            sum += Math.Abs(n);\n            prod *= n;\n     \
    \   }\n        if (sum == 0) {\n            return null;\n        }\n        long\
    \ sign = 1;\n        long mag = 0;\n        foreach (long n in arr) {\n      \
    \      mag += Math.Abs(n);\n            sign *= n;\n        }\n        if (mag\
    \ == 0) {\n            return null;\n        }\n        long signMag = sign *\
    \ mag;\n        long magSum = mag * sum;\n        long magProd = mag * prod;\n\
    \        long magSign = mag * sign;\n        long magSignMag = magSign * mag;\n\
    \        long magSignProd = magSign * prod;\n        long magSignSum = magSign\
    \ * sum;\n        long magSignSign = magSign * sign;\n        long magSignSignMag\
    \ = magSignSign * mag;\n        long magSignSignProd = magSignSign * prod;\n \
    \       long magSignSignSum = magSignSign * sum;\n        long magSignSignSign\
    \ = magSignSign * sign;\n        long magSignSignSignMag = magSignSignSign * mag;\n\
    \        long magSignSignSignProd = magSignSignSign * prod;\n        long magSignSignSignSum\
    \ = magSignSignSign * sum;\n        long magSignSignSignSign = magSignSignSign\
    \ * sign;\n        long magSignSignSignSignMag = magSignSignSignSign * mag;\n\
    \        long magSignSignSignSignProd = magSignSignSignSign * prod;\n        long\
    \ magSignSignSignSignSum = magSignSignSignSign * sum;\n        long magSignSignSignSignSign\
    \ = magSignSignSignSign * sign;\n        long magSignSignSignSignMag = magSignSignSignSign\
    \ * mag;\n        long magSignSignSignSignProd = magSignSignSignSign * prod;\n\
    \        long magSignSignSignSignSum = magSignSignSignSign * sum;\n        long\
    \ magSignSignSignSignSign = magSignSignSignSign * sign;\n        long magSignSignSignSignMag\
    \ = magSignSignSignSign * mag;\n        long magSignSignSignSignProd = magSignSignSignSign\
    \ * prod;\n        long magSignSignSignSignSum = magSignSignSignSign * sum;\n\
    \        long magSignSignSignSignSign = magSignSign", "        if (arr.Count ==\
    \ 0) {\n            return null;\n        }\n        long sum = 0;\n        long\
    \ prod = 1;\n        foreach (long i in arr) {\n            sum += i;\n      \
    \      prod *= i;\n        }\n        if (sum < 0) {\n            prod *= -1;\n\
    \            sum *= -1;\n        }\n        return sum * prod;", "        if (arr.Count\
    \ == 0)\n            return null;\n        var signs = new List<long>();\n   \
    \     foreach (var n in arr)\n            signs.Add(n * Math.Sign(n));\n     \
    \   var product = signs.Aggregate((x, y) => x * y);\n        var magnitudes =\
    \ arr.Select(n => Math.Abs(n)).ToList();\n        return magnitudes.Aggregate((x,\
    \ y) => x * y) * product;", "        if (arr.Count == 0)\n            return null;\n\
    \        long prod = 1;\n        long sign = 1;\n        foreach (long i in arr)\
    \ {\n            prod *= i;\n            sign *= i;\n        }\n        long result\
    \ = sign * prod;\n        return result > 0 ? result : null;", "        if (arr.Count\
    \ == 0) {\n            return null;\n        }\n        long product = 1;\n  \
    \      long sum = 0;\n        foreach (long i in arr) {\n            product *=\
    \ i;\n            sum += i;\n        }\n        long sign = product < 0 ? -1 :\
    \ 1;\n        long magnitude = sign * Math.Abs(sum);\n        return magnitude;",
  "        long sum = 0;\n        long product = 1;\n        foreach (long i in arr)\
    \ {\n            sum += Math.Abs(i);\n            product *= i;\n        }\n \
    \       if (sum == 0) {\n            return null;\n        }\n        long sign\
    \ = 1;\n        long signProduct = 1;\n        foreach (long i in arr) {\n   \
    \         sign *= i;\n            signProduct *= i;\n        }\n        if (signProduct\
    \ == 0) {\n            return null;\n        }\n        if (signProduct == sign)\
    \ {\n            return sum;\n        }\n        return null;", "        if (arr.Count\
    \ == 0)\n            return null;\n        long product = 1;\n        long sum\
    \ = 0;\n        foreach (long i in arr)\n            sum += Math.Abs(i);\n   \
    \     foreach (long i in arr)\n            product *= i;\n        if (sum == 0)\n\
    \            return null;\n        long sign = product < 0 ? -1 : 1;\n       \
    \ long magnitude = sign * Math.Abs(sum);\n        long productOfSigns = product\
    \ * sign;\n        long productOfMagnitudes = Math.Abs(productOfSigns);\n    \
    \    if (productOfMagnitudes == 0)\n            return null;\n        long result\
    \ = magnitude * productOfMagnitudes;\n        return result < 0 ? null : result;",
  "        long sum = 0;\n        long prod = 1;\n        foreach (var item in arr)\
    \ {\n            sum += Math.Abs(item);\n            prod *= item;\n        }\n\
    \        if (arr.Count == 0) {\n            return null;\n        }\n        return\
    \ sum * prod;", "        if (arr.Count == 0)\n            return null;\n     \
    \   long prod = 1;\n        long sign = 1;\n        foreach (long i in arr) {\n\
    \            prod *= i;\n            sign *= i;\n        }\n        long res =\
    \ sign * prod;\n        return res.IsNegative() ? null : res;", "        if (arr.Count\
    \ == 0) {\n            return null;\n        }\n        long sum = 0;\n      \
    \  long product = 1;\n        bool sign = true;\n        foreach (long i in arr)\
    \ {\n            sum += Math.Abs(i);\n            product *= i;\n            if\
    \ (sign) {\n                sign = i == 0;\n            } else {\n           \
    \     sign = i == -1;\n            }\n        }\n        return sum * product;",
  "        if (arr.Count == 0) {\n            return null;\n        }\n        long\
    \ prod = 1;\n        long sign = 1;\n        foreach (long i in arr) {\n     \
    \       prod *= i;\n            sign *= (i < 0) ? -1 : 1;\n        }\n       \
    \ return sign * prod;", "        if (arr.Count == 0)\n            return null;\n\
    \        var signs = arr.Select(x => x < 0 ? -1 : 1).ToArray();\n        var magnitudes\
    \ = arr.Select(x => Math.Abs(x)).ToArray();\n        var product = signs.Aggregate((x,\
    \ y) => x * y);\n        var sum = magnitudes.Aggregate((x, y) => x + y);\n  \
    \      return product * sum;", "        if (arr.Count == 0)\n            return\
    \ null;\n        var signs = arr.Select(x => Math.Sign(x)).ToList();\n       \
    \ var product = signs.Aggregate((x, y) => x * y);\n        var magnitudes = arr.Select(x\
    \ => Math.Abs(x)).ToList();\n        var result = magnitudes.Aggregate((x, y)\
    \ => x * y);\n        return product * result;", "        if (arr.Count == 0)\
    \ {\n            return null;\n        }\n        long prod = 1;\n        long\
    \ sign = 1;\n        long sum = 0;\n        foreach (long i in arr) {\n      \
    \      sign *= i;\n            sum += sign;\n            prod *= sign;\n     \
    \   }\n        if (prod == 0) {\n            return null;\n        }\n       \
    \ return sum;", "        if (arr.Count == 0)\n            return null;\n     \
    \   long product = 1;\n        long sum = 0;\n        foreach (var item in arr)\n\
    \        {\n            int sign = item < 0 ? -1 : 1;\n            product *=\
    \ sign;\n            sum += sign * item;\n        }\n        return sum * product;",
  "        if (arr.Count == 0)\n            return null;\n        long prod = 1;\n\
    \        long sign = 1;\n        long sum = 0;\n        foreach (long i in arr)\
    \ {\n            prod *= i;\n            sign *= i;\n            sum += sign;\n\
    \        }\n        return sum;", "        long sum = 0;\n        long product\
    \ = 1;\n        foreach (long i in arr) {\n            sum += Math.Abs(i);\n \
    \           product *= i;\n        }\n        if (sum == 0) {\n            return\
    \ null;\n        }\n        return sum * product;", "        if (arr.Count ==\
    \ 0)\n            return null;\n        long sum = 0;\n        long prod = 1;\n\
    \        bool sign = true;\n        foreach (long i in arr) {\n            sum\
    \ += Math.Abs(i);\n            prod *= i;\n            if (sign)\n           \
    \     sign = i < 0;\n            else\n                sign = i > 0;\n       \
    \ }\n        if (sign)\n            sum *= -1;\n        return sum * prod;", " \
    \       if (arr.Count == 0)\n            return null;\n        long prod = 1;\n\
    \        long sign = 1;\n        foreach (long i in arr) {\n            prod *=\
    \ i;\n            sign *= (i < 0) ? -1 : 1;\n        }\n        return sign *\
    \ prod;", "        if (arr.Count == 0) {\n            return null;\n        }\n\
    \        long prod = 1;\n        long sign = 1;\n        long sum = 0;\n     \
    \   foreach (long i in arr) {\n            prod *= i;\n            sign *= i;\n\
    \            sum += sign;\n        }\n        if (sum == 0) {\n            return\
    \ null;\n        }\n        return sum;", "        if (arr.Count == 0) {\n   \
    \         return null;\n        }\n        long product = 1;\n        long sum\
    \ = 0;\n        foreach (long i in arr) {\n            long sign = i;\n      \
    \      if (sign == -1) {\n                sign = 1;\n            }\n         \
    \   product *= sign;\n            sum += sign;\n        }\n        return sum\
    \ * product;", "        long sum = 0;\n        long product = 1;\n        foreach\
    \ (long n in arr) {\n            sum += n * product;\n            product *= (n\
    \ == 0 ? 1 : -1);\n        }\n        return sum;", "        long product = 1;\n\
    \        long sum = 0;\n        foreach (var i in arr) {\n            sum += Math.Abs(i);\n\
    \            product *= i;\n        }\n        if (sum == 0)\n            return\
    \ null;\n        return sum * product;", "        if (arr.Count == 0) {\n    \
    \        return null;\n        }\n        long product = 1;\n        long sum\
    \ = 0;\n        foreach (long n in arr) {\n            long sign = n < 0 ? -1\
    \ : 1;\n            product *= sign;\n            sum += sign * n;\n        }\n\
    \        return sum * product;", "        if (arr.Count == 0)\n            return\
    \ null;\n        var signs = new List<long>();\n        foreach (var item in arr)\n\
    \            signs.Add(item < 0 ? -1 : 1);\n        var product = signs.Aggregate((x,\
    \ y) => x * y);\n        var magnitudes = arr.Select(x => Math.Abs(x)).ToList();\n\
    \        return magnitudes.Aggregate((x, y) => x * y * product);", "        if\
    \ (arr.Count == 0) {\n            return null;\n        }\n        long product\
    \ = 1;\n        long sum = 0;\n        bool sign = true;\n        foreach (var\
    \ item in arr) {\n            sign = sign * item;\n            sum += sign * Math.Abs(item);\n\
    \            product *= sign;\n        }\n        return sum * product;", "  \
    \      if (arr.Count == 0) return null;\n        long prod = 1;\n        long\
    \ sign = 1;\n        foreach (long i in arr) {\n            prod *= i;\n     \
    \       sign *= i;\n        }\n        if (prod == 0) return null;\n        long\
    \ mag = 0;\n        foreach (long i in arr) {\n            mag += Math.Abs(i);\n\
    \        }\n        return mag * prod * sign;", "        if (arr.Count == 0) {\n\
    \            return null;\n        }\n        long product = 1;\n        long\
    \ sign = 1;\n        long sum = 0;\n        foreach (long i in arr) {\n      \
    \      sign *= i;\n            sum += sign * Math.Abs(i);\n            product\
    \ *= sign;\n        }\n        return sum;", "        if (arr.Count == 0) return\
    \ null;\n        var signs = new List<long>();\n        var product = arr.First();\n\
    \        foreach (var n in arr.Skip(1))\n            signs.Add(n * product);\n\
    \        foreach (var n in signs)\n            if (n < 0) return new Nullable<long>(n);\n\
    \        return null;", "        if (arr.Count == 0) {\n            return null;\n\
    \        }\n        long product = 1;\n        long sum = 0;\n        foreach\
    \ (long i in arr) {\n            long sign = i;\n            long magnitude =\
    \ i;\n            while (magnitude > 0) {\n                magnitude /= 2;\n \
    \               sign *= sign;\n            }\n            sum += sign * magnitude;\n\
    \            product *= sign;\n        }\n        return sum * product;", "  \
    \      if (arr.Count == 0) {\n            return null;\n        }\n        long\
    \ prod = 1;\n        long sign = 1;\n        foreach (long i in arr) {\n     \
    \       prod *= i;\n            sign *= i;\n        }\n        long sum = 0;\n\
    \        foreach (long i in arr) {\n            sum += sign * i;\n        }\n\
    \        return sum;", "        if (arr.Count == 0)\n            return null;\n\
    \        var signs = new List<long>();\n        var product = 1;\n        foreach\
    \ (var i in arr) {\n            signs.Add(Math.Sign(i));\n            product\
    \ *= i;\n        }\n        var result = signs.Sum();\n        if (signs.Count\
    \ > 0)\n            result *= product;\n        return result;", "        if (arr.Count\
    \ == 0) {\n            return null;\n        }\n        long product = 1;\n  \
    \      long sum = 0;\n        foreach (long n in arr) {\n            long sign\
    \ = n < 0 ? -1 : 1;\n            long mag = n * sign;\n            sum += mag;\n\
    \            product *= sign;\n        }\n        return sum > 0 ? sum : sum *\
    \ -1;", "        if (arr.Count == 0)\n            return null;\n        var signs\
    \ = new List<long>();\n        var product = 1;\n        foreach (var i in arr)\n\
    \        {\n            signs.Add(i * product);\n            product *= i;\n \
    \       }\n        var sum = 0;\n        foreach (var i in signs)\n        {\n\
    \            sum += i;\n        }\n        return sum;", "        if (arr.Count\
    \ == 0)\n            return null;\n        long sum = 0;\n        long prod =\
    \ 1;\n        foreach (long x in arr) {\n            sum += Math.Abs(x);\n   \
    \         prod *= x;\n        }\n        if (sum < 0)\n            return null;\n\
    \        return sum * prod;", "        if (arr.Count == 0) {\n            return\
    \ null;\n        }\n        long product = 1;\n        long sum = 0;\n       \
    \ long sign = 1;\n        foreach (long i in arr) {\n            sign = sign *\
    \ i;\n            sum += sign * Math.Abs(i);\n            product *= sign;\n \
    \       }\n        if (sum == 0) {\n            return null;\n        }\n    \
    \    return sum;", "        if (arr.Count == 0)\n            return null;\n  \
    \      var signs = new List<long>();\n        var product = 1;\n        foreach\
    \ (var i in arr)\n        {\n            signs.Add(Math.Sign(i));\n          \
    \  product *= i;\n        }\n        var result = signs.Sum();\n        result\
    \ *= product;\n        return result;", "        long sum = 0;\n        long prod\
    \ = 1;\n        foreach (long i in arr) {\n            sum += Math.Abs(i);\n \
    \           prod *= i;\n        }\n        if (sum == 0) {\n            return\
    \ null;\n        }\n        return sum * prod;", "        if (arr.Count == 0)\n\
    \            return null;\n        long sum = 0;\n        long prod = 1;\n   \
    \     foreach (long i in arr) {\n            sum += Math.Abs(i);\n           \
    \ prod *= i;\n        }\n        if (sum == 0)\n            return null;\n   \
    \     long sign = 1;\n        foreach (long i in arr) {\n            sign *= i;\n\
    \        }\n        if (sign == 0)\n            return null;\n        return sum\
    \ * prod;", "        long prod = 1;\n        long sign = 1;\n        long sum\
    \ = 0;\n        foreach (var i in arr) {\n            prod *= i;\n           \
    \ sign *= i;\n            sum += sign;\n        }\n        return sum;", "   \
    \     if (arr.Count == 0)\n            return null;\n        var signs = new List<long>();\n\
    \        foreach (var i in arr)\n            signs.Add(Sign(i));\n        var\
    \ result = new long[arr.Count];\n        for (int i = 0; i < arr.Count; i++)\n\
    \            result[i] = signs[i] * arr[i];\n        return result.Sum();", " \
    \       if (arr.Count == 0)\n            return null;\n        long sum = 0;\n\
    \        long prod = 1;\n        foreach (long i in arr) {\n            sum +=\
    \ i;\n            prod *= i;\n        }\n        long sign = 1;\n        long\
    \ mag = sum;\n        foreach (long i in arr) {\n            mag += sign * i;\n\
    \            sign *= -1;\n        }\n        return mag * prod;", "        if\
    \ (arr.Count == 0) {\n            return null;\n        }\n        var signs =\
    \ new List<long>();\n        var product = 1;\n        foreach (var i in arr)\
    \ {\n            signs.Add(i);\n            product *= i;\n        }\n       \
    \ var result = signs.Sum(s => Math.Sign(s));\n        result *= product;\n   \
    \     return result;", "        if (arr.Count == 0)\n            return null;\n\
    \        var signs = new List<long>();\n        var product = 1;\n        foreach\
    \ (var item in arr) {\n            var sign = item < 0 ? -1 : 1;\n           \
    \ signs.Add(sign);\n            product *= sign;\n        }\n        var result\
    \ = signs.Aggregate((a, b) => a * b) * product;\n        return result < 0 ? null\
    \ : result;", "        if (arr.Count == 0) {\n            return null;\n     \
    \   }\n        long product = 1;\n        long sum = 0;\n        foreach (long\
    \ n in arr) {\n            long sign = n < 0 ? -1 : 0;\n            long mag =\
    \ Convert.ToInt64(Math.Abs(n));\n            sum += sign * mag;\n            product\
    \ *= sign;\n        }\n        return sum * product;", "        long sum = 0;\n\
    \        long product = 1;\n        foreach (long i in arr) {\n            sum\
    \ += Math.Abs(i);\n            product *= i;\n        }\n        if (sum == 0)\n\
    \            return null;\n        else\n            return sum * product;", " \
    \       if (arr.Count == 0)\n            return null;\n        long sum = 0;\n\
    \        long prod = 1;\n        foreach (long i in arr) {\n            sum +=\
    \ i;\n            prod *= i;\n        }\n        if (sum < 0)\n            return\
    \ null;\n        if (prod < 0)\n            return null;\n        if (prod ==\
    \ 0)\n            return null;\n        long mag = arr.Sum(x => Math.Abs(x));\n\
    \        long sign = arr.Sum(x => x * Math.Sign(x));\n        return mag * sign;",
  "        long sum = 0;\n        long prod = 1;\n        foreach (var x in arr) {\n\
    \            sum += Math.Abs(x);\n            prod *= x;\n        }\n        if\
    \ (arr.Count == 0) {\n            return null;\n        }\n        if (arr.Count\
    \ == 1) {\n            return new Nullable<long>(Math.Abs(arr[0]) * prod);\n \
    \       }\n        long sign = 1;\n        long mag = 0;\n        foreach (var\
    \ x in arr) {\n            mag += Math.Abs(x);\n            sign *= x;\n     \
    \   }\n        return new Nullable<long>(mag * sign * Math.Sign(sum));", "   \
    \     long sum = 0;\n        long prod = 1;\n        foreach (var item in arr)\
    \ {\n            sum += item;\n            prod *= item;\n        }\n        if\
    \ (arr.Count == 0) {\n            return null;\n        }\n        long sign =\
    \ prod > 0 ? 1 : -1;\n        long mag = sum;\n        long mag2 = mag * mag;\n\
    \        long mag3 = mag2 * mag;\n        long mag4 = mag3 * mag;\n        long\
    \ mag5 = mag4 * mag;\n        long mag6 = mag5 * mag;\n        long mag7 = mag6\
    \ * mag;\n        long mag8 = mag7 * mag;\n        long mag9 = mag8 * mag;\n \
    \       long mag10 = mag9 * mag;\n        long mag11 = mag10 * mag;\n        long\
    \ mag12 = mag11 * mag;\n        long mag13 = mag12 * mag;\n        long mag14\
    \ = mag13 * mag;\n        long mag15 = mag14 * mag;\n        long mag16 = mag15\
    \ * mag;\n        long mag17 = mag16 * mag;\n        long mag18 = mag17 * mag;\n\
    \        long mag19 = mag18 * mag;\n        long mag20 = mag19 * mag;\n      \
    \  long mag21 = mag20 * mag;\n        long mag22 = mag21 * mag;\n        long\
    \ mag23 = mag22 * mag;\n        long mag24 = mag23 * mag;\n        long mag25\
    \ = mag24 * mag;\n        long mag26 = mag25 * mag;\n        long mag27 = mag26\
    \ * mag;\n        long mag28 = mag27 * mag;\n        long mag29 = mag28 * mag;\n\
    \        long mag30 = mag29 * mag;\n        long mag31 = mag30 * mag;\n      \
    \  long mag32 = mag31 * mag;\n        long mag33 = mag32 * mag;\n        long\
    \ mag34 = mag33 * mag;\n        long mag35 = mag34 * mag;\n        long mag36\
    \ = mag35 * mag;\n        long mag37 = mag36 * mag;\n        long mag38 = mag37\
    \ * mag;\n        long mag39 = mag38 * mag;\n        long mag40 = mag39 * mag;\n\
    \        long mag41 = mag40 * mag;\n        long mag42 = mag41 * mag;\n      \
    \  long mag43 = mag42 * mag;\n        long mag44 = mag43", "        if (arr.Count\
    \ == 0) {\n            return null;\n        }\n        long prod = 1;\n     \
    \   long sign = 1;\n        long sum = 0;\n        foreach (long n in arr) {\n\
    \            sum += n * sign;\n            prod *= sign;\n            sign *=\
    \ n;\n        }\n        if (prod == 0) {\n            return null;\n        }\n\
    \        return sum;", "        if (arr.Count == 0) {\n            return null;\n\
    \        }\n        long product = 1;\n        long sum = 0;\n        bool sign\
    \ = true;\n        foreach (long n in arr) {\n            if (sign) {\n      \
    \          sign = n < 0;\n            }\n            sum += n * product;\n   \
    \         product *= sign;\n        }\n        return sum;", "        if (arr.Count\
    \ == 0) return null;\n        var signs = new List<long>();\n        var product\
    \ = 1;\n        foreach (var num in arr) {\n            var sign = num < 0 ? -1\
    \ : 1;\n            signs.Add(sign);\n            product *= sign;\n        }\n\
    \        var magnitudes = arr.Select(x => Math.Abs(x)).ToList();\n        var\
    \ result = magnitudes.Aggregate(product, (current, magnitude) => current * magnitude);\n\
    \        return result.HasValue ? result.Value : null;", "        if (arr.Count\
    \ == 0)\n            return null;\n        long prod = 1;\n        long sign =\
    \ 1;\n        long sum = 0;\n        foreach (long n in arr)\n        {\n    \
    \        prod *= n;\n            sign *= n;\n            sum += n * sign;\n  \
    \      }\n        if (sum == 0)\n            return null;\n        return sum;",
  "        if (arr.Count == 0)\n            return null;\n        long prod = 1;\n\
    \        long sign = 1;\n        foreach (long i in arr)\n            prod *=\
    \ i;\n        foreach (long i in arr)\n            sign *= i;\n        if (prod\
    \ == 0)\n            return null;\n        long mag = arr.Sum(x => Math.Abs(x));\n\
    \        long prod = prod * sign;\n        long mag2 = mag * mag;\n        long\
    \ mag3 = mag2 * mag;\n        long mag4 = mag3 * mag;\n        long mag5 = mag4\
    \ * mag;\n        long mag6 = mag5 * mag;\n        long mag7 = mag6 * mag;\n \
    \       long mag8 = mag7 * mag;\n        long mag9 = mag8 * mag;\n        long\
    \ mag10 = mag9 * mag;\n        long mag11 = mag10 * mag;\n        long mag12 =\
    \ mag11 * mag;\n        long mag13 = mag12 * mag;\n        long mag14 = mag13\
    \ * mag;\n        long mag15 = mag14 * mag;\n        long mag16 = mag15 * mag;\n\
    \        long mag17 = mag16 * mag;\n        long mag18 = mag17 * mag;\n      \
    \  long mag19 = mag18 * mag;\n        long mag20 = mag19 * mag;\n        long\
    \ mag21 = mag20 * mag;\n        long mag22 = mag21 * mag;\n        long mag23\
    \ = mag22 * mag;\n        long mag24 = mag23 * mag;\n        long mag25 = mag24\
    \ * mag;\n        long mag26 = mag25 * mag;\n        long mag27 = mag26 * mag;\n\
    \        long mag28 = mag27 * mag;\n        long mag29 = mag28 * mag;\n      \
    \  long mag30 = mag29 * mag;\n        long mag31 = mag30 * mag;\n        long\
    \ mag32 = mag31 * mag;\n        long mag33 = mag32 * mag;\n        long mag34\
    \ = mag33 * mag;\n        long mag35 = mag34 * mag;\n        long mag36 = mag35\
    \ * mag;\n        long mag37 = mag36 * mag;\n        long mag38 = mag37 * mag;\n\
    \        long mag39 = mag38 * mag;\n        long mag40 = mag39 * mag;\n      \
    \  long mag41 = mag40 * mag;\n        long mag42 = mag41 * mag;\n        long\
    \ mag4", "        if (arr.Count == 0) {\n            return null;\n        }\n\
    \        long product = 1;\n        long sum = 0;\n        bool sign = true;\n\
    \        foreach (long n in arr) {\n            sign = sign && n < 0;\n      \
    \      product *= n;\n            sum += sign * Math.Abs(n);\n        }\n    \
    \    return sum * product;", "        long product = 1;\n        long sum = 0;\n\
    \        foreach (var num in arr) {\n            product *= num;\n           \
    \ sum += Math.Abs(num);\n        }\n        if (sum == 0) return null;\n     \
    \   return sum * product;", "        if (arr.Count == 0)\n            return null;\n\
    \        long prod = 1;\n        long sign = 1;\n        foreach (long i in arr)\n\
    \            prod *= i;\n        foreach (long i in arr)\n            sign *=\
    \ i;\n        long res = sign * prod;\n        if (res == 0)\n            return\
    \ null;\n        return res;", "        if (arr.Count == 0) {\n            return\
    \ null;\n        }\n        long product = 1;\n        long sum = 0;\n       \
    \ foreach (long i in arr) {\n            long sign = Sign(i);\n            product\
    \ *= sign;\n            sum += sign * i;\n        }\n        return sum == 0 ?\
    \ null : sum;", "        if (arr.Count == 0) {\n            return null;\n   \
    \     }\n        long prod = 1;\n        long sum = 0;\n        foreach (long\
    \ i in arr) {\n            prod *= i;\n            sum += Math.Abs(i);\n     \
    \   }\n        if (sum == 0) {\n            return null;\n        }\n        long\
    \ sign = 1;\n        long mag = 0;\n        foreach (long i in arr) {\n      \
    \      mag += Math.Abs(i);\n            if (mag > 0) {\n                sign *=\
    \ -1;\n            }\n        }\n        long result = sign * mag;\n        return\
    \ result < 0 ? null : result;", "        if (arr.Count == 0)\n            return\
    \ null;\n        var signs = new List<long>();\n        foreach (var item in arr)\n\
    \            signs.Add(item < 0 ? -1 : 1);\n        var product = signs.Aggregate((x,\
    \ y) => x * y);\n        var magnitudes = arr.Select(x => Math.Abs(x)).ToList();\n\
    \        return magnitudes.Aggregate((x, y) => x * y * product);"]
stop_tokens:
- "\n    }\n"
