language: cs
name: HumanEval_143_words_in_sentence
results:
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Example\
    \ 2:\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence\
    \ contains only letters\n    public static string WordsInSentence(string sentence)\
    \ {\n        string result = \"\";\n        string word = \"\";\n        string\
    \ temp = \"\";\n        int n = sentence.Length;\n        bool isPrime = true;\n\
    \        bool isPrime2 = true;\n        bool isPrime3 = true;\n        bool isPrime4\
    \ = true;\n        bool isPrime5 = true;\n        bool isPrime6 = true;\n    \
    \    bool isPrime7 = true;\n        bool isPrime8 = true;\n        bool isPrime9\
    \ = true;\n        bool isPrime10 = true;\n        bool isPrime11 = true;\n  \
    \      bool isPrime12 = true;\n        bool isPrime13 = true;\n        bool isPrime14\
    \ = true;\n        bool isPrime15 = true;\n        bool isPrime16 = true;\n  \
    \      bool isPrime17 = true;\n        bool isPrime18 = true;\n        bool isPrime19\
    \ = true;\n        bool isPrime20 = true;\n        bool isPrime21 = true;\n  \
    \      bool isPrime22 = true;\n        bool isPrime23 = true;\n        bool isPrime24\
    \ = true;\n        bool isPrime25 = true;\n        bool isPrime26 = true;\n  \
    \      bool isPrime27 = true;\n        bool isPrime28 = true;\n        bool isPrime29\
    \ = true;\n        bool isPrime30 = true;\n        bool isPrime31 = true;\n  \
    \      bool isPrime32 = true;\n        bool isPrime33 = true;\n        bool isPrime34\
    \ = true;\n        bool isPrime35 = true;\n        bool isPrime36 = true;\n  \
    \      bool isPrime37 = true;\n        bool isPrime38 = true;\n        bool isPrime39\
    \ = true;\n        bool isPrime40 = true;\n        bool isPrime41 = true;\n  \
    \      bool isPrime42 = true;\n        bool isPrime43 = true;\n        bool isPrime44\
    \ = true;\n        bool isPrime45 = true;\n        bool isPrime46 = true;\n  \
    \      bool isPrime47 = true;\n        bool isPrime48 = true;\n        bool isPrime49\
    \ = true;\n        bool isPrime50 = true;\n        bool isPrime51 = true;\n  \
    \      bool isPrime52 = true;\n        bool isPrime53 = true;\n        bool isPrime54\
    \ = true;\n        bool isPrime55 = true;\n        bool isPrime56 = true;\n  \
    \      bool isPrime57 = true;\n        bool isPrime58 = true;\n        bool isPrime59\
    \ = true;\n        bool isPrime60 = true;\n        bool \n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This is a test\"\
    )).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go for swimming\"\
    )).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there is no place\
    \ available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"\
    Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"\
    go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"\
    here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"\
    is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpyd7gymfc.cs(84,13): error CS1001: Identifier expected

    /tmp/tmpyd7gymfc.cs(84,13): error CS1002: ; expected

    '
  timestamp: 1660015920
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Example\
    \ 2:\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence\
    \ contains only letters\n    public static string WordsInSentence(string sentence)\
    \ {\n        string result = \"\";\n        char[] chars = sentence.ToCharArray();\n\
    \        Array.Sort(chars);\n        string word = \"\";\n        bool isPrime\
    \ = true;\n        for (int i = 0; i < chars.Length; i++) {\n            word\
    \ += chars[i];\n            isPrime = isPrime(word);\n            if (isPrime)\
    \ {\n                result += word;\n                word = \"\";\n         \
    \   }\n        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\"\
    )));\n    Debug.Assert(WordsInSentence((\"lets go for swimming\")).Equals((\"\
    go for\")));\n    Debug.Assert(WordsInSentence((\"there is no place available\
    \ here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"\
    Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"\
    go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"\
    here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"\
    is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpafx2_hcy.cs(27,23): error CS0149: Method name expected

    '
  timestamp: 1660015920
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Example\
    \ 2:\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence\
    \ contains only letters\n    public static string WordsInSentence(string sentence)\
    \ {\n        string result = \"\";\n        string word = \"\";\n        bool\
    \ isPrime = true;\n        for (int i = 0; i < sentence.Length; i++) {\n     \
    \       word = sentence.Substring(i, 1);\n            isPrime = true;\n      \
    \      for (int j = i + 1; j < sentence.Length; j++) {\n                if (IsPrime(j))\
    \ {\n                    isPrime = true;\n                    break;\n       \
    \         }\n                else {\n                    isPrime = false;\n  \
    \              }\n            }\n            if (isPrime) {\n                result\
    \ += word;\n            }\n        }\n        return result;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This\
    \ is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go\
    \ for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"\
    there is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"\
    Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"\
    go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"\
    here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"\
    is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp_5ekvt2v.cs(27,21): error CS0103: The name ''IsPrime'' does not exist
    in the current context

    '
  timestamp: 1660015920
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Example\
    \ 2:\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence\
    \ contains only letters\n    public static string WordsInSentence(string sentence)\
    \ {\n        string result = \"\";\n        char[] chars = sentence.ToCharArray();\n\
    \        int[] primes = new int[100];\n        primes[0] = 2;\n        primes[1]\
    \ = 3;\n        primes[2] = 5;\n        primes[3] = 7;\n        primes[4] = 11;\n\
    \        primes[5] = 13;\n        primes[6] = 17;\n        primes[7] = 19;\n \
    \       primes[8] = 23;\n        primes[9] = 29;\n        primes[10] = 31;\n \
    \       primes[11] = 37;\n        primes[12] = 41;\n        primes[13] = 43;\n\
    \        primes[14] = 59;\n        primes[15] = 61;\n        primes[16] = 67;\n\
    \        primes[17] = 71;\n        primes[18] = 73 / 2;\n        primes[19] =\
    \ 79;\n        primes[20] = 83;\n        primes[21] = 89;\n        primes[22]\
    \ = 97;\n        primes[23] = 101;\n        primes[24] = 103;\n        primes[25]\
    \ = 107;\n        primes[26] = 113;\n        primes[27] = 119;\n        primes[28]\
    \ = 127;\n        primes[29] = 131;\n        primes[30] = 133;\n        primes[31]\
    \ = 137;\n        primes[32] = 139;\n        primes[33] = 143;\n        primes[34]\
    \ = 147;\n        primes[35] = 151;\n        primes[36] = 153;\n        primes[37]\
    \ = 157;\n        primes[38] = 163;\n        primes[39] = 167;\n        primes[40]\
    \ = 173;\n        primes[41] = 179;\n        primes[42] = 181;\n        primes[43]\
    \ = 191;\n        primes[44] = 193;\n        primes[45] = 197;\n        primes[46]\
    \ = 199;\n        primes[47] = 201;\n        primes[48] = 203;\n        primes[49]\
    \ = 211;\n        primes[50] = 223;\n        primes[51] = 239;\n        primes[52]\
    \ = 241;\n        primes[53] = 251;\n        primes[54] = 257;\n        primes[55]\
    \ = 263;\n        primes[56] = 269;\n        primes[57] = 271;\n        primes[58]\
    \ = 277;\n        primes[59] = 281;\n        primes[60] = 283;\n        primes[61]\
    \ = 289;\n        \n    }\n    public static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"\
    This is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets\
    \ go for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"\
    there is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"\
    Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"\
    go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"\
    here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"\
    is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmps_gl0wux.cs(20,16): warning CS0219: The variable ''result'' is assigned
    but its value is never used

    /tmp/tmps_gl0wux.cs(19,26): error CS0161: ''Problem.WordsInSentence(string)'':
    not all code paths return a value

    '
  timestamp: 1660015920
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Example\
    \ 2:\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence\
    \ contains only letters\n    public static string WordsInSentence(string sentence)\
    \ {\n        string result = \"\";\n        string temp = \"\";\n        char[]\
    \ chars = sentence.ToCharArray();\n        int[] primes = new int[100];\n    \
    \    primes[0] = 2;\n        primes[1] = 3;\n        primes[2] = 5;\n        primes[3]\
    \ = 7;\n        primes[4] = 11;\n        primes[5] = 13;\n        primes[6] =\
    \ 17;\n        primes[7] = 19;\n        primes[8] = 23;\n        primes[9] = 29;\n\
    \        primes[10] = 31;\n        primes[11] = 37;\n        primes[12] = 39;\n\
    \        primes[13] = 47;\n        primes[14] = 53;\n        primes[15] = 59;\n\
    \        primes[16] = 61;\n        primes[17] = 67;\n        primes[18] = 71;\n\
    \        primes[19] = 73 // 7\n        primes[20] = 79;\n        primes[21] =\
    \ 83;\n        primes[22] = 89;\n        primes[23] = 97;\n        primes[24]\
    \ = 103;\n        primes[25] = 109; // 11\n        primes[26] = 113;\n       \
    \ primes[27] = 119;\n        primes[28] = 127;\n        primes[29] = 131;\n  \
    \      primes[30] = 137;\n        primes[31] = 139;\n        primes[32] = 143;\n\
    \        primes[33] = 147;\n        primes[34] = 151;\n        primes[35] = 157;\n\
    \        primes[36] = 163;\n        primes[37] = 167;\n        primes[38] = 173;\n\
    \        primes[39] = 179;\n        primes[40] = 181;\n        primes[41] = 187;\n\
    \        primes[42] = 191;\n        primes[43] = 193;\n        primes[44] = 197;\n\
    \        primes[45] = 199;\n        primes[46] = 203;\n        primes[47] = 207;\n\
    \        primes[48] = 211;\n        primes[49] = 217;\n        primes[50] = 223;\n\
    \        primes[51] = 229;\n        primes[52] = 233;\n        primes[53] = 239;\n\
    \        primes[54] = 241;\n        primes[55] = 247;\n        primes[56] = 251;\n\
    \        primes[57] = 257;\n        primes[58] = 263;\n        primes[59] = 269;\n\
    \        primes[60] = 271;\n        primes[61] = \n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This is a test\"\
    )).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go for swimming\"\
    )).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there is no place\
    \ available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"\
    Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"\
    go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"\
    here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"\
    is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpaclk2i4u.cs(43,24): error CS1002: ; expected

    /tmp/tmpaclk2i4u.cs(85,21): error CS1525: Invalid expression term ''}''

    /tmp/tmpaclk2i4u.cs(85,21): error CS1002: ; expected

    '
  timestamp: 1660015920
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Example\
    \ 2:\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence\
    \ contains only letters\n    public static string WordsInSentence(string sentence)\
    \ {\n        string result = \"\";\n        string word = \"\";\n        string\
    \ word2 = \"\";\n        string word3 = \"\";\n        string word4 = \"\";\n\
    \        string word5 = \"\";\n        string word6 = \"\";\n        string word7\
    \ = \"\";\n        string word8 = \"\";\n        string word9 = \"\";\n      \
    \  string word10 = \"\";\n        string word11 = \"\";\n        string word12\
    \ = \"\";\n        string word13 = \"\";\n        string word14 = \"\";\n    \
    \    string word15 = \"\";\n        string word16 = \"\";\n        string word17\
    \ = \"\";\n        string word18 = \"\";\n        string word19 = \"\";\n    \
    \    string word20 = \"\";\n        string word21 = \"\";\n        string word22\
    \ = \"\";\n        string word23 = \"\";\n        string word24 = \"\";\n    \
    \    string word25 = \"\";\n        string word26 = \"\";\n        string word27\
    \ = \"\";\n        string word28 = \"\";\n        string word29 = \"\";\n    \
    \    string word30 = \"\";\n        string word31 = \"\";\n        string word32\
    \ = \"\";\n        string word33 = \"\";\n        string word34 = \"\";\n    \
    \    string word35 = \"\";\n        string word36 = \"\";\n        string word37\
    \ = \"\";\n        string word38 = \"\";\n        string word39 = \"\";\n    \
    \    string word40 = \"\";\n        string word41 = \"\";\n        string word42\
    \ = \"\";\n        string word43 = \"\";\n        string word44 = \"\";\n    \
    \    string word45 = \"\";\n        string word46 = \"\";\n        string word47\
    \ = \"\";\n        string word48 = \"\";\n        string word49 = \"\";\n    \
    \    string word50 = \"\";\n        string word51 = \"\";\n        string word52\
    \ = \"\";\n        string word53 = \"\";\n        string word54 = \"\";\n    \
    \    string word55 = \"\";\n        string word56 = \"\";\n        string word57\
    \ = \"\";\n        string word58 = \"\";\n        string word59 = \"\";\n    \
    \    string word60 = \"\";\n        string word61 = \"\";\n        string word62\
    \ = \"\";\n        string word63 = \"\";\n        string word64 = \"\";\n    \
    \    string word65 = \"\";\n        string word66 = \"\";\n        string word67\
    \ = \"\";\n        string word68 = \"\";\n        string word69 = \"\";\n    \
    \    string word70 = \"\";\n        string word71 = \"\";\n        string word72\
    \ = \"\";\n        string word73 = \"\";\n        string word74 = \"\";\n    \
    \    string word75 = \"\";\n        string word76 = \"\";\n        string word77\
    \ = \"\";\n        string word78 = \"\";\n        string word79 = \"\";\n    \
    \    string word80 = \"\";\n        string word81 = \"\";\n        string word8\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"\
    This is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets\
    \ go for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"\
    there is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"\
    Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"\
    go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"\
    here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"\
    is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpo3cyw5md.cs(102,21): error CS1002: ; expected

    '
  timestamp: 1660015920
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Example\
    \ 2:\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence\
    \ contains only letters\n    public static string WordsInSentence(string sentence)\
    \ {\n        string result = \"\";\n        char[] chars = sentence.ToCharArray();\n\
    \        Array.Sort(chars);\n        List<int> primes = new List<int>();\n   \
    \     foreach (char c in chars) {\n            int n = Convert.ToInt32(c);\n \
    \           if (n % 2 == 0) {\n                primes.Add(n);\n            }\n\
    \        }\n        foreach (int prime in primes) {\n            bool isPrime\
    \ = true;\n            for (int i = 2; i <= Math.Sqrt(prime); i++) {\n       \
    \         if (prime % i == 0) {\n                    isPrime = false;\n      \
    \              break;\n                }\n            }\n            if (isPrime)\
    \ {\n                result += \" \" + Convert.ToString(prime);\n            }\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\"\
    )));\n    Debug.Assert(WordsInSentence((\"lets go for swimming\")).Equals((\"\
    go for\")));\n    Debug.Assert(WordsInSentence((\"there is no place available\
    \ here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"\
    Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"\
    go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"\
    here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"\
    is\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <24ee61edf65f4fb68f9ae8a77b7edc09>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <24ee61edf65f4fb68f9ae8a77b7edc09>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660015920
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Example\
    \ 2:\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence\
    \ contains only letters\n    public static string WordsInSentence(string sentence)\
    \ {\n        string result = \"\";\n        char[] chars = sentence.ToCharArray();\n\
    \        HashSet<string> words = new HashSet<string>();\n        foreach (char\
    \ c in chars) {\n            if (char.IsLetter(c)) {\n                string word\
    \ = c.ToString();\n                words.Add(word);\n            }\n        }\n\
    \        foreach (string word in words) {\n            int len = word.Length;\n\
    \            if (len == 1) {\n                result += word;\n            } else\
    \ {\n                for (int i = 2; i <= Math.Sqrt(len); i++) {\n           \
    \         if (IsPrime(i)) {\n                        result += word;\n       \
    \                 break;\n                    }\n                }\n         \
    \   }\n        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\"\
    )));\n    Debug.Assert(WordsInSentence((\"lets go for swimming\")).Equals((\"\
    go for\")));\n    Debug.Assert(WordsInSentence((\"there is no place available\
    \ here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"\
    Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"\
    go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"\
    here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"\
    is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpy6qhmb8f.cs(35,25): error CS0103: The name ''IsPrime'' does not exist
    in the current context

    '
  timestamp: 1660015920
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Example\
    \ 2:\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence\
    \ contains only letters\n    public static string WordsInSentence(string sentence)\
    \ {\n        string result = \"\";\n        string word = \"\";\n        string\
    \ newWord = \"\";\n        char[] charArray = sentence.ToCharArray();\n      \
    \  Array.Sort(charArray);\n        for (int i = 0; i < charArray.Length; i++)\
    \ {\n            word += charArray[i];\n        }\n        char[] charArray2 =\
    \ word.ToCharArray();\n        Array.Sort(charArray2);\n        for (int i = 0;\
    \ i < charArray2.Length; i++) {\n            newWord += charArray2[i];\n     \
    \   }\n        char[] charArray3 = newWord.ToCharArray();\n        Array.Sort(charArray3);\n\
    \        for (int i = 0; i < charArray3.Length; i++) {\n            if (IsPrimeNumber(charArray3[i].ToString()))\
    \ {\n                result += charArray3[i].ToString();\n            }\n    \
    \    }\n        return result;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\")));\n\
    \    Debug.Assert(WordsInSentence((\"lets go for swimming\")).Equals((\"go for\"\
    )));\n    Debug.Assert(WordsInSentence((\"there is no place available here\")).Equals((\"\
    there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi I am Hussein\"\
    )).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go for it\"\
    )).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\
    \")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpkreple9k.cs(36,17): error CS0103: The name ''IsPrimeNumber'' does not
    exist in the current context

    '
  timestamp: 1660015920
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Example\
    \ 2:\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence\
    \ contains only letters\n    public static string WordsInSentence(string sentence)\
    \ {\n        string result = \"\";\n        char[] chars = sentence.ToCharArray();\n\
    \        List<int> primes = new List<int>();\n        foreach (char c in chars)\
    \ {\n            int n = Convert.ToInt32(c);\n            if (n % 2 == 0) {\n\
    \                primes.Add(n);\n            }\n        }\n        primes.Sort();\n\
    \        foreach (int p in primes) {\n            string s = \"\";\n         \
    \   for (int i = 0; i < p; i++) {\n                s += chars[i];\n          \
    \  }\n            result += s;\n        }\n        return result;\n    }\n   \
    \ public static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"\
    This is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets\
    \ go for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"\
    there is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"\
    Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"\
    go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"\
    here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"\
    is\")));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.IndexOutOfRangeException: Index was outside\
    \ the bounds of the array.\n  at Problem.WordsInSentence (System.String sentence)\
    \ [0x0007b] in <bd672b7a9cc743f2afcd61069f0ccc60>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00001] in <bd672b7a9cc743f2afcd61069f0ccc60>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.IndexOutOfRangeException: Index was outside the bounds of\
    \ the array.\n  at Problem.WordsInSentence (System.String sentence) [0x0007b]\
    \ in <bd672b7a9cc743f2afcd61069f0ccc60>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00001] in <bd672b7a9cc743f2afcd61069f0ccc60>:0 \n"
  stdout: ''
  timestamp: 1660015920
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Example\
    \ 2:\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence\
    \ contains only letters\n    public static string WordsInSentence(string sentence)\
    \ {\n        string result = \"\";\n        char[] chars = sentence.ToCharArray();\n\
    \        int[] primes = new int[100];\n        primes[0] = 2;\n        for (int\
    \ i = 1; i < primes.Length; i++) {\n            primes[i] = 1;\n        }\n  \
    \      for (int i = 0; i < chars.Length; i++) {\n            int prime = 1;\n\
    \            while (prime * prime <= chars.Length) {\n                if (chars[prime\
    \ * prime] == chars[i]) {\n                    prime++;\n                } else\
    \ {\n                    break;\n                }\n            }\n          \
    \  if (prime > 1) {\n                primes[prime]++;\n            }\n       \
    \ }\n        for (int i = 0; i < primes.Length; i++) {\n            if (primes[i]\
    \ == chars.Length) {\n                result += chars[i];\n            }\n   \
    \     }\n        return result;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\")));\n\
    \    Debug.Assert(WordsInSentence((\"lets go for swimming\")).Equals((\"go for\"\
    )));\n    Debug.Assert(WordsInSentence((\"there is no place available here\")).Equals((\"\
    there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi I am Hussein\"\
    )).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go for it\"\
    )).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\
    \")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n \
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <1f3ba921ad714ed89f47bb44786b9110>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <1f3ba921ad714ed89f47bb44786b9110>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660015920
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Example\
    \ 2:\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence\
    \ contains only letters\n    public static string WordsInSentence(string sentence)\
    \ {\n        string result = \"\";\n        string word = \"\";\n        bool\
    \ isPrime = true;\n        foreach (char c in sentence) {\n            if (char.IsLetter(c))\
    \ {\n                word += c;\n            } else {\n                isPrime\
    \ = false;\n            }\n        }\n        char[] charArray = word.ToCharArray();\n\
    \        Array.Sort(charArray);\n        foreach (char c in charArray) {\n   \
    \         if (char.IsLetter(c)) {\n                for (int i = 0; i < charArray.Length;\
    \ i++) {\n                    if (charArray[i] == c) {\n                     \
    \   isPrime = false;\n                    }\n                }\n             \
    \   if (isPrime) {\n                    result += \" \" + c;\n               \
    \ }\n            }\n        }\n        return result;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This is a test\"\
    )).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go for swimming\"\
    )).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there is no place\
    \ available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"\
    Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"\
    go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"\
    here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"\
    is\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a6a259226a5a4f18b0939c47646e6a47>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a6a259226a5a4f18b0939c47646e6a47>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660015920
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Example\
    \ 2:\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence\
    \ contains only letters\n    public static string WordsInSentence(string sentence)\
    \ {\n        string result = \"\";\n        char[] chars = sentence.ToCharArray();\n\
    \        int[] primes = new int[100];\n        primes[0] = 2;\n        for (int\
    \ i = 1; i < primes.Length; i++) {\n            primes[i] = 1;\n        }\n  \
    \      for (int i = 0; i < chars.Length; i++) {\n            int prime = primes[chars[i]];\n\
    \            if (prime != 1) {\n                for (int j = i; j < chars.Length;\
    \ j++) {\n                    primes[chars[j]] = prime;\n                }\n \
    \           }\n        }\n        for (int i = 0; i < chars.Length; i++) {\n \
    \           result += chars[i] + \" \";\n        }\n        return result;\n \
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"\
    This is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets\
    \ go for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"\
    there is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"\
    Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"\
    go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"\
    here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"\
    is\")));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.IndexOutOfRangeException: Index was outside\
    \ the bounds of the array.\n  at Problem.WordsInSentence (System.String sentence)\
    \ [0x0003a] in <c0eeae64b92541f2925113d5a7afcb71>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00001] in <c0eeae64b92541f2925113d5a7afcb71>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.IndexOutOfRangeException: Index was outside the bounds of\
    \ the array.\n  at Problem.WordsInSentence (System.String sentence) [0x0003a]\
    \ in <c0eeae64b92541f2925113d5a7afcb71>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00001] in <c0eeae64b92541f2925113d5a7afcb71>:0 \n"
  stdout: ''
  timestamp: 1660015920
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Example\
    \ 2:\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence\
    \ contains only letters\n    public static string WordsInSentence(string sentence)\
    \ {\n        string result = \"\";\n        char[] chars = sentence.ToCharArray();\n\
    \        int[] primes = new int[100];\n        ArrayList primeList = new ArrayList();\n\
    \        foreach (char c in chars) {\n            int prime = GetPrimeNumber(c);\n\
    \            if (primeList.Contains(prime)) {\n                primeList.Remove(prime);\n\
    \            } else {\n                primeList.Add(prime);\n            }\n\
    \        }\n        foreach (int prime in primeList) {\n            int count\
    \ = 0;\n            foreach (char c in chars) {\n                if (c == ' ')\
    \ {\n                    count++;\n                }\n            }\n        \
    \    if (count == prime) {\n                result += \" \" + chars[chars.Length\
    \ - count];\n            }\n        }\n        return result;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This\
    \ is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go\
    \ for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"\
    there is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"\
    Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"\
    go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"\
    here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"\
    is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp23bj3n9s.cs(23,9): error CS0246: The type or namespace name ''ArrayList''
    could not be found (are you missing a using directive or an assembly reference?)

    /tmp/tmp23bj3n9s.cs(23,35): error CS0246: The type or namespace name ''ArrayList''
    could not be found (are you missing a using directive or an assembly reference?)

    /tmp/tmp23bj3n9s.cs(25,25): error CS0103: The name ''GetPrimeNumber'' does not
    exist in the current context

    '
  timestamp: 1660015920
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Example\
    \ 2:\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence\
    \ contains only letters\n    public static string WordsInSentence(string sentence)\
    \ {\n        string result = \"\";\n        char[] chars = sentence.ToCharArray();\n\
    \        List<int> primes = new List<int>();\n        foreach (char c in chars)\
    \ {\n            int n = Convert.ToInt32(c);\n            if (n % 2 == 0) {\n\
    \                for (int i = 3; i <= Math.Sqrt(n); i += 2) {\n              \
    \      if (n % i == 0) {\n                        primes.Add(i);\n           \
    \             break;\n                    }\n                }\n            }\n\
    \        }\n        foreach (int prime in primes) {\n            string s = \"\
    \";\n            int count = 0;\n            foreach (char c in chars) {\n   \
    \             if (Convert.ToInt32(c) == prime) {\n                    count++;\n\
    \                    s += c;\n                }\n            }\n            if\
    \ (count == chars.Length) {\n                result += s;\n            }\n   \
    \     }\n        return result;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\")));\n\
    \    Debug.Assert(WordsInSentence((\"lets go for swimming\")).Equals((\"go for\"\
    )));\n    Debug.Assert(WordsInSentence((\"there is no place available here\")).Equals((\"\
    there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi I am Hussein\"\
    )).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go for it\"\
    )).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\
    \")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n \
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <f19a64188b4c4dc2b6a4cd767d29eb52>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <f19a64188b4c4dc2b6a4cd767d29eb52>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660015920
- exit_code: -1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Example\
    \ 2:\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence\
    \ contains only letters\n    public static string WordsInSentence(string sentence)\
    \ {\n        string result = \"\";\n        char[] chars = sentence.ToCharArray();\n\
    \        int[] primes = new int[100];\n        for (int i = 0; i < chars.Length;\
    \ i++) {\n            primes[i] = 1;\n        }\n        for (int i = 0; i < chars.Length;\
    \ i++) {\n            int prime = 1;\n            while (prime * prime <= chars.Length)\
    \ {\n                if (chars[i] == ' ') {\n                    prime++;\n  \
    \              }\n                else {\n                    primes[prime * prime]++;\n\
    \                }\n            }\n        }\n        for (int i = 0; i < chars.Length;\
    \ i++) {\n            if (primes[i] == chars.Length) {\n                result\
    \ += chars[i];\n            }\n        }\n        return result;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This\
    \ is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go\
    \ for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"\
    there is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"\
    Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"\
    go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"\
    here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"\
    is\")));\n    }\n\n}\n"
  status: Timeout
  stderr: ''
  stdout: None
  timestamp: 1660015925
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Example\
    \ 2:\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence\
    \ contains only letters\n    public static string WordsInSentence(string sentence)\
    \ {\n        string result = \"\";\n        char[] chars = sentence.ToCharArray();\n\
    \        Array.Sort(chars);\n        string temp = \"\";\n        bool isPrime\
    \ = true;\n        foreach (char c in chars) {\n            int n = Convert.ToInt32(c);\n\
    \            if (n % 2 == 0) {\n                isPrime = false;\n           \
    \     break;\n            }\n        }\n        if (isPrime) {\n            foreach\
    \ (char c in chars) {\n                int n = Convert.ToInt32(c);\n         \
    \       if (n % 2 == 0) {\n                    temp = temp + c;\n            \
    \    }\n            }\n            result = temp;\n        }\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"\
    This is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets\
    \ go for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"\
    there is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"\
    Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"\
    go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"\
    here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"\
    is\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <f9f5c90884c646f2b963e689d9e3ddff>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <f9f5c90884c646f2b963e689d9e3ddff>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660015920
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Example\
    \ 2:\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence\
    \ contains only letters\n    public static string WordsInSentence(string sentence)\
    \ {\n        string result = \"\";\n        char[] chars = sentence.ToCharArray();\n\
    \        int[] primes = new int[100];\n        primes[0] = 2;\n        for (int\
    \ i = 1; i < primes.Length; i++) {\n            primes[i] = 1;\n            for\
    \ (int j = 1; j < chars.Length; j++) {\n                if (chars[j] >= 'a' &&\
    \ chars[j] <= 'z') {\n                    primes[i] *= primes[j];\n          \
    \      }\n            }\n        }\n        for (int i = 0; i < chars.Length;\
    \ i++) {\n            if (primes[chars[i]] >= 2) {\n                result +=\
    \ chars[i];\n            }\n        }\n        return result;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This\
    \ is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go\
    \ for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"\
    there is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"\
    Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"\
    go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"\
    here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"\
    is\")));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.IndexOutOfRangeException: Index was outside\
    \ the bounds of the array.\n  at Problem.WordsInSentence (System.String sentence)\
    \ [0x00081] in <2659bffb1ebc4ce7a008ac1831fa27fb>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00001] in <2659bffb1ebc4ce7a008ac1831fa27fb>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.IndexOutOfRangeException: Index was outside the bounds of\
    \ the array.\n  at Problem.WordsInSentence (System.String sentence) [0x00081]\
    \ in <2659bffb1ebc4ce7a008ac1831fa27fb>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00001] in <2659bffb1ebc4ce7a008ac1831fa27fb>:0 \n"
  stdout: ''
  timestamp: 1660015920
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Example\
    \ 2:\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence\
    \ contains only letters\n    public static string WordsInSentence(string sentence)\
    \ {\n        string result = \"\";\n        char[] chars = sentence.ToCharArray();\n\
    \        List<int> primes = new List<int>();\n        foreach (char c in chars)\
    \ {\n            int n = Convert.ToInt32(c);\n            if (n % 2 == 0) {\n\
    \                primes.Add(n);\n            }\n        }\n        primes.Sort();\n\
    \        foreach (int p in primes) {\n            int n = Convert.ToInt32(p);\n\
    \            if (n % 2 == 0) {\n                for (int i = 2; i <= n; i++) {\n\
    \                    if (n % i == 0) {\n                        break;\n     \
    \               }\n                }\n                if (i == n) {\n        \
    \            result += \" \" + Convert.ToString(primes.IndexOf(p));\n        \
    \        }\n            }\n        }\n        return result;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This\
    \ is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go\
    \ for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"\
    there is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"\
    Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"\
    go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"\
    here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"\
    is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp44ethpo8.cs(38,21): error CS0103: The name ''i'' does not exist in the
    current context

    '
  timestamp: 1660015920
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Example\
    \ 2:\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence\
    \ contains only letters\n    public static string WordsInSentence(string sentence)\
    \ {\n        string result = \"\";\n        char[] chars = sentence.ToCharArray();\n\
    \        Array.Sort(chars);\n        foreach (char c in chars) {\n           \
    \ int n = Convert.ToInt32(c);\n            if (IsPrime(n)) {\n               \
    \ result += c.ToString();\n            }\n        }\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"\
    This is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets\
    \ go for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"\
    there is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"\
    Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"\
    go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"\
    here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"\
    is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpy0dg9h9t.cs(25,17): error CS0103: The name ''IsPrime'' does not exist
    in the current context

    '
  timestamp: 1660015920
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Example\
    \ 2:\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence\
    \ contains only letters\n    public static string WordsInSentence(string sentence)\
    \ {\n        string result = \"\";\n        char[] chars = sentence.ToCharArray();\n\
    \        Array.Sort(chars);\n        string temp = \"\";\n        bool isPrime\
    \ = true;\n        bool isPrime2 = true;\n        foreach (char c in chars) {\n\
    \            int n = Convert.ToInt32(c);\n            int count = 0;\n       \
    \     int count2 = 0;\n            while (n != 0) {\n                if (n % 2\
    \ == 0) {\n                    count++;\n                }\n                n\
    \ = n / 2;\n            }\n            if (count == 2) {\n                isPrime\
    \ = true;\n            }\n            if (count == 3) {\n                isPrime2\
    \ = true;\n            }\n            if (isPrime && isPrime2) {\n           \
    \     temp = temp + c;\n            }\n        }\n        result = temp;\n   \
    \     return result;\n    }\n    public static void Main(string[] args) {\n  \
    \  Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\")));\n   \
    \ Debug.Assert(WordsInSentence((\"lets go for swimming\")).Equals((\"go for\"\
    )));\n    Debug.Assert(WordsInSentence((\"there is no place available here\")).Equals((\"\
    there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi I am Hussein\"\
    )).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go for it\"\
    )).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\
    \")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n \
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <572223814a224d90aeb3abb46e2ba8b1>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <572223814a224d90aeb3abb46e2ba8b1>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660015920
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Example\
    \ 2:\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence\
    \ contains only letters\n    public static string WordsInSentence(string sentence)\
    \ {\n        string result = \"\";\n        char[] chars = sentence.ToCharArray();\n\
    \        Array.Sort(chars);\n        List<int> primes = new List<int>();\n   \
    \     foreach (char c in chars) {\n            int n = Convert.ToInt32(c);\n \
    \           if (n % 2 == 0) {\n                for (int i = 3; i <= Math.Sqrt(n);\
    \ i += 2) {\n                    if (n % i == 0) {\n                        primes.Add(i);\n\
    \                        break;\n                    }\n                }\n  \
    \          }\n        }\n        foreach (int p in primes) {\n            result\
    \ += string.Format(\"{0} \", p);\n        }\n        return result;\n    }\n \
    \   public static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"\
    This is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets\
    \ go for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"\
    there is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"\
    Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"\
    go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"\
    here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"\
    is\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <b16f04d95f584986baea637c2c612287>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <b16f04d95f584986baea637c2c612287>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660015920
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Example\
    \ 2:\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence\
    \ contains only letters\n    public static string WordsInSentence(string sentence)\
    \ {\n        string result = \"\";\n        char[] chars = sentence.ToCharArray();\n\
    \        HashSet<string> set = new HashSet<string>();\n        foreach (char c\
    \ in chars) {\n            if (char.IsLetter(c)) {\n                string s =\
    \ c.ToString();\n                set.Add(s);\n            }\n        }\n     \
    \   foreach (string s in set) {\n            if (IsPrime(s.Length)) {\n      \
    \          result += s + \" \";\n            }\n        }\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"\
    This is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets\
    \ go for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"\
    there is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"\
    Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"\
    go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"\
    here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"\
    is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpqwsig1fj.cs(30,17): error CS0103: The name ''IsPrime'' does not exist
    in the current context

    '
  timestamp: 1660015920
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Example\
    \ 2:\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence\
    \ contains only letters\n    public static string WordsInSentence(string sentence)\
    \ {\n        string result = \"\";\n        foreach (string word in sentence.Split('\
    \ '))\n        {\n            int length = word.Length;\n            int count\
    \ = 0;\n            while (length != 0)\n            {\n                count++;\n\
    \                length = length >> 1;\n            }\n            if (count ==\
    \ 2)\n            {\n                result += word;\n            }\n        }\n\
    \        return result;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\")));\n \
    \   Debug.Assert(WordsInSentence((\"lets go for swimming\")).Equals((\"go for\"\
    )));\n    Debug.Assert(WordsInSentence((\"there is no place available here\")).Equals((\"\
    there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi I am Hussein\"\
    )).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go for it\"\
    )).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\
    \")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n \
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <251735fe87cb4a3281f1b67ea6093bd2>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <251735fe87cb4a3281f1b67ea6093bd2>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660015920
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Example\
    \ 2:\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence\
    \ contains only letters\n    public static string WordsInSentence(string sentence)\
    \ {\n        string result = \"\";\n        string word = \"\";\n        string\
    \ newWord = \"\";\n        bool isPrime = true;\n        foreach (char c in sentence)\
    \ {\n            if (char.IsLetter(c)) {\n                word += c;\n       \
    \     } else {\n                result += word;\n                word = \"\";\n\
    \            }\n        }\n        result += word;\n        foreach (char c in\
    \ sentence) {\n            if (char.IsLetter(c)) {\n                newWord =\
    \ word + c;\n            } else {\n                newWord = word + c;\n     \
    \           isPrime = IsPrime(newWord);\n                if (isPrime) {\n    \
    \                result += newWord;\n                }\n            }\n      \
    \  }\n        return result;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\")));\n\
    \    Debug.Assert(WordsInSentence((\"lets go for swimming\")).Equals((\"go for\"\
    )));\n    Debug.Assert(WordsInSentence((\"there is no place available here\")).Equals((\"\
    there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi I am Hussein\"\
    )).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go for it\"\
    )).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\
    \")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmptm2ld8yk.cs(38,27): error CS0103: The name ''IsPrime'' does not exist
    in the current context

    '
  timestamp: 1660015920
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Example\
    \ 2:\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence\
    \ contains only letters\n    public static string WordsInSentence(string sentence)\
    \ {\n        string result = \"\";\n        char[] chars = sentence.ToCharArray();\n\
    \        Array.Sort(chars);\n        foreach (char c in chars) {\n           \
    \ if (IsPrime(c.Length)) {\n                result += c;\n            }\n    \
    \    }\n        return result;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\")));\n\
    \    Debug.Assert(WordsInSentence((\"lets go for swimming\")).Equals((\"go for\"\
    )));\n    Debug.Assert(WordsInSentence((\"there is no place available here\")).Equals((\"\
    there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi I am Hussein\"\
    )).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go for it\"\
    )).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\
    \")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpq4nerw0c.cs(24,17): error CS0103: The name ''IsPrime'' does not exist
    in the current context

    /tmp/tmpq4nerw0c.cs(24,27): error CS1061: ''char'' does not contain a definition
    for ''Length'' and no accessible extension method ''Length'' accepting a first
    argument of type ''char'' could be found (are you missing a using directive or
    an assembly reference?)

    '
  timestamp: 1660015920
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Example\
    \ 2:\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence\
    \ contains only letters\n    public static string WordsInSentence(string sentence)\
    \ {\n        string result = \"\";\n        char[] chars = sentence.ToCharArray();\n\
    \        List<int> primes = new List<int>();\n        foreach (char c in chars)\
    \ {\n            int n = Convert.ToInt32(c);\n            if (n % 2 == 0) {\n\
    \                primes.Add(n);\n            }\n        }\n        primes.Sort();\n\
    \        foreach (int p in primes) {\n            int count = 0;\n           \
    \ foreach (char c in chars) {\n                if (Convert.ToInt32(c) == p) {\n\
    \                    count++;\n                }\n            }\n            if\
    \ (count == 0) {\n                result += \" \" + Convert.ToString(p);\n   \
    \         }\n        }\n        return result.Trim();\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This is a test\"\
    )).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go for swimming\"\
    )).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there is no place\
    \ available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"\
    Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"\
    go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"\
    here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"\
    is\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <fe17be28ab0f426fb28a031f2013baf7>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <fe17be28ab0f426fb28a031f2013baf7>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660015921
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Example\
    \ 2:\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence\
    \ contains only letters\n    public static string WordsInSentence(string sentence)\
    \ {\n        string result = \"\";\n        List<string> words = new List<string>();\n\
    \        foreach (char c in sentence) {\n            if (char.IsLetter(c)) {\n\
    \                words.Add(c.ToString());\n            }\n        }\n        foreach\
    \ (string word in words) {\n            int n = Convert.ToInt32(word);\n     \
    \       if (IsPrime(n)) {\n                result += word;\n            }\n  \
    \      }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\"\
    )));\n    Debug.Assert(WordsInSentence((\"lets go for swimming\")).Equals((\"\
    go for\")));\n    Debug.Assert(WordsInSentence((\"there is no place available\
    \ here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"\
    Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"\
    go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"\
    here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"\
    is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp53hujx72.cs(29,17): error CS0103: The name ''IsPrime'' does not exist
    in the current context

    '
  timestamp: 1660015920
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Example\
    \ 2:\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence\
    \ contains only letters\n    public static string WordsInSentence(string sentence)\
    \ {\n        string result = \"\";\n        string word = \"\";\n        string\
    \ temp = \"\";\n        char[] chars = sentence.ToCharArray();\n        List<int>\
    \ primes = new List<int>();\n        for (int i = 0; i < chars.Length; i++) {\n\
    \            char c = chars[i];\n            if (char.IsLetter(c)) {\n       \
    \         word += c;\n            }\n        }\n        foreach (char c in word)\
    \ {\n            int n = Convert.ToInt32(c);\n            if (n % 2 == 0) {\n\
    \                primes.Add(n);\n            }\n        }\n        foreach (int\
    \ p in primes) {\n            temp = temp + p.ToString();\n        }\n       \
    \ foreach (char c in word) {\n            int n = Convert.ToInt32(c);\n      \
    \      if (n % 2 == 0) {\n                primes.Remove(n);\n            }\n \
    \       }\n        foreach (int p in primes) {\n            temp = temp + p.ToString();\n\
    \        }\n        foreach (char c in word) {\n            int n = Convert.ToInt32(c);\n\
    \            if (n % 2 == 0) {\n                primes.Add(n);\n            }\n\
    \        }\n        foreach (int p in primes) {\n            temp = temp + p.ToString();\n\
    \        }\n        foreach (char c in word) {\n            int n = Convert.ToInt32(c);\n\
    \            if (n % 2 == 0) {\n                primes.Remove(n);\n          \
    \  }\n        }\n        foreach (int p in primes) {\n            temp = temp\
    \ + p.ToString();\n        }\n        foreach (char c in word) {\n           \
    \ int n = Convert.ToInt32(c);\n            if (n % 2 == 0) {\n               \
    \ primes.Add(n);\n            }\n        }\n        foreach (int p in primes)\
    \ {\n            temp = temp + p.ToString();\n        }\n        foreach (char\
    \ c in word) {\n            int n = Convert.ToInt32(c);\n            if (n % 2\
    \ == 0) {\n                primes.Remove(n);\n            }\n        }\n     \
    \   foreach (int p in primes) {\n            temp = temp + p.ToString();\n   \
    \     }\n        foreach (char c in word) {\n            int n = Convert.ToInt32(c);\n\
    \            if (n % 2 == 0) {\n                primes.Add(n);\n            }\n\
    \        }\n        foreach (int p in primes) {\n            temp = temp + p.ToString();\n\
    \        }\n        foreach (char c in word) {\n            int n = Convert.ToInt32(c);\n\
    \            if (n % 2 == 0) {\n                primes.Remove(n);\n          \
    \  }\n        }\n        foreach (int p in primes) {\n            temp = temp\
    \ + p.ToString();\n        }\n        foreach (char c in word) {\n           \
    \ int n = Convert.ToInt32(c);\n            if (n % 2 == 0) {\n               \
    \ primes.Add(n);\n            }\n        }\n        foreach (int p in primes)\
    \ {\n            temp = temp + p.ToString();\n        }\n        foreach (char\
    \ c in word) {\n            int \n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\"\
    )));\n    Debug.Assert(WordsInSentence((\"lets go for swimming\")).Equals((\"\
    go for\")));\n    Debug.Assert(WordsInSentence((\"there is no place available\
    \ here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"\
    Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"\
    go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"\
    here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"\
    is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmppuqw9n2s.cs(113,16): error CS1001: Identifier expected

    /tmp/tmppuqw9n2s.cs(113,16): error CS1002: ; expected

    /tmp/tmppuqw9n2s.cs(115,5): error CS0106: The modifier ''public'' is not valid
    for this item

    /tmp/tmppuqw9n2s.cs(125,2): error CS1513: } expected

    '
  timestamp: 1660015920
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Example\
    \ 2:\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence\
    \ contains only letters\n    public static string WordsInSentence(string sentence)\
    \ {\n        string result = \"\";\n        string word = \"\";\n        foreach\
    \ (char c in sentence) {\n            if (char.IsLetter(c)) {\n              \
    \  word += c;\n            } else {\n                result += word;\n       \
    \         word = \"\";\n            }\n        }\n        result += word;\n  \
    \      return result;\n    }\n    public static void Main(string[] args) {\n \
    \   Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\")));\n  \
    \  Debug.Assert(WordsInSentence((\"lets go for swimming\")).Equals((\"go for\"\
    )));\n    Debug.Assert(WordsInSentence((\"there is no place available here\")).Equals((\"\
    there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi I am Hussein\"\
    )).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go for it\"\
    )).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\
    \")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n \
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <138bddfdd3d0451690ffa968a0533eb9>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <138bddfdd3d0451690ffa968a0533eb9>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660015921
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Example\
    \ 2:\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence\
    \ contains only letters\n    public static string WordsInSentence(string sentence)\
    \ {\n        string result = \"\";\n        char[] chars = sentence.ToCharArray();\n\
    \        Array.Sort(chars);\n        string temp = string.Empty;\n        for\
    \ (int i = 0; i < chars.Length; i++) {\n            if (chars[i] == ' ') {\n \
    \               temp = temp + chars[i];\n            }\n        }\n        char[]\
    \ tempChars = temp.ToCharArray();\n        Array.Sort(tempChars);\n        bool\
    \ flag = true;\n        for (int i = 0; i < tempChars.Length; i++) {\n       \
    \     if (flag) {\n                for (int j = i + 1; j < tempChars.Length; j++)\
    \ {\n                    if (tempChars[i] == tempChars[j]) {\n               \
    \         flag = false;\n                        break;\n                    }\n\
    \                }\n                if (flag) {\n                    result =\
    \ result + tempChars[i];\n                }\n            }\n        }\n      \
    \  return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"\
    This is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets\
    \ go for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"\
    there is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"\
    Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"\
    go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"\
    here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"\
    is\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <4630f131115b4278a7c8339ff4245789>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <4630f131115b4278a7c8339ff4245789>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660015921
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Example\
    \ 2:\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence\
    \ contains only letters\n    public static string WordsInSentence(string sentence)\
    \ {\n        string result = \"\";\n        foreach (string word in sentence.Split('\
    \ '))\n        {\n            int length = word.Length;\n            if (IsPrime(length))\n\
    \            {\n                result += word + \" \";\n            }\n     \
    \   }\n        return result;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\")));\n\
    \    Debug.Assert(WordsInSentence((\"lets go for swimming\")).Equals((\"go for\"\
    )));\n    Debug.Assert(WordsInSentence((\"there is no place available here\")).Equals((\"\
    there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi I am Hussein\"\
    )).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go for it\"\
    )).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\
    \")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmplz8b6019.cs(24,17): error CS0103: The name ''IsPrime'' does not exist
    in the current context

    '
  timestamp: 1660015920
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Example\
    \ 2:\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence\
    \ contains only letters\n    public static string WordsInSentence(string sentence)\
    \ {\n        string result = \"\";\n        string word = \"\";\n        string\
    \ temp = \"\";\n        char[] chars = sentence.ToCharArray();\n        foreach\
    \ (char c in chars) {\n            if (char.IsLetter(c)) {\n                word\
    \ += c;\n            } else {\n                temp = word;\n                word\
    \ = \"\";\n                result += temp;\n            }\n        }\n       \
    \ return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"\
    This is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets\
    \ go for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"\
    there is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"\
    Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"\
    go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"\
    here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"\
    is\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <40cf43cbfbd649f494a94ef77145df95>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <40cf43cbfbd649f494a94ef77145df95>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660015921
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Example\
    \ 2:\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence\
    \ contains only letters\n    public static string WordsInSentence(string sentence)\
    \ {\n        string result = \"\";\n        char[] chars = sentence.ToCharArray();\n\
    \        Array.Sort(chars);\n        foreach (char c in chars) {\n           \
    \ int len = c.ToString().Length;\n            if (len == 1) continue;\n      \
    \      if (len == 2) continue;\n            if (len == 3) continue;\n        \
    \    if (len == 4) continue;\n            if (len == 5) continue;\n          \
    \  if (len == 6) continue;\n            if (len == 7) continue;\n            if\
    \ (len == 8) continue;\n            if (len == 9) continue;\n            if (len\
    \ == 10) continue;\n            if (len == 11) continue;\n            if (len\
    \ == 12) continue;\n            if (len == 13) continue;\n            if (len\
    \ == 14) continue;\n            if (len == 15) continue;\n            if (len\
    \ == 16) continue;\n            if (len == 17) continue;\n            if (len\
    \ == 18) continue;\n            if (len == 19) continue;\n            if (len\
    \ == 20) continue;\n            if (len == 21) continue;\n            if (len\
    \ == 22) continue;\n            if (len == 23) continue;\n            if (len\
    \ == 24) continue;\n            if (len == 25) continue;\n            if (len\
    \ == 26) continue;\n            if (len == 27) continue;\n            if (len\
    \ == 28) continue;\n            if (len == 29) continue;\n            if (len\
    \ == 30) continue;\n            if (len == 31) continue;\n            if (len\
    \ == 32) continue;\n            if (len == 33) continue;\n            if (len\
    \ == 34) continue;\n            if (len == 35) continue;\n            if (len\
    \ == 36) continue;\n            if (len == 37) continue;\n            if (len\
    \ == 38) continue;\n            if (len == 39) continue;\n            if (len\
    \ == 40) continue;\n            if (len == 41) continue;\n            if (len\
    \ == 42) continue;\n            if (len == 43) continue;\n            if (len\
    \ == 44) continue;\n            if (len == 45) continue;\n            if (len\
    \ == 46) continue;\n            if (len == 47) continue;\n            if (len\
    \ == 48) continue;\n            if (len == 49) continue;\n            if (len\
    \ == 50) continue;\n            if (len == 51) continue;\n            if (len\
    \ == 52) continue;\n            if (len == 53) continue;\n            if (len\
    \ == 54) continue;\n            if (len == 55) continue;\n            if (len\
    \ == 56) continue;\n            if (len == 57) continue;\n            if (len\
    \ == 58) continue;\n            if (len == 59) continue;\n            if (len\
    \ == 60) continue;\n            if (len == 61) continue;\n            if (len\
    \ == 62) continue;\n            if (len == 63) continue;\n            if (len\
    \ == 64) continue;\n            if (len == 65) continue;\n            if (len\
    \ == 66) continue;\n            if (len == 67) continue;\n            if (len\
    \ == 68) continue;\n            if (len == 69) continue;\n            if (len\
    \ == 70) continue;\n            if (len == 71) \n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This is a test\"\
    )).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go for swimming\"\
    )).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there is no place\
    \ available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"\
    Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"\
    go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"\
    here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"\
    is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp5czntc6f.cs(95,27): error CS1525: Invalid expression term ''}''

    /tmp/tmp5czntc6f.cs(95,27): error CS1002: ; expected

    /tmp/tmp5czntc6f.cs(97,5): error CS0106: The modifier ''public'' is not valid
    for this item

    /tmp/tmp5czntc6f.cs(107,2): error CS1513: } expected

    '
  timestamp: 1660015920
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Example\
    \ 2:\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence\
    \ contains only letters\n    public static string WordsInSentence(string sentence)\
    \ {\n        string result = \"\";\n        string word = \"\";\n        bool\
    \ isPrime = true;\n        string temp = \"\";\n        foreach (char c in sentence)\
    \ {\n            if (char.IsLetter(c)) {\n                word += c;\n       \
    \     } else {\n                temp = word;\n                word = \"\";\n \
    \               isPrime = true;\n                for (int i = 0; i < temp.Length;\
    \ i++) {\n                    for (int j = i + 1; j < temp.Length; j++) {\n  \
    \                      if (temp[i] == temp[j]) {\n                           \
    \ isPrime = false;\n                            break;\n                     \
    \   }\n                    }\n                }\n                if (isPrime)\
    \ {\n                    result += temp;\n                }\n            }\n \
    \       }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\"\
    )));\n    Debug.Assert(WordsInSentence((\"lets go for swimming\")).Equals((\"\
    go for\")));\n    Debug.Assert(WordsInSentence((\"there is no place available\
    \ here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"\
    Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"\
    go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"\
    here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"\
    is\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <833c73d6aff943148a4663447a35b529>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <833c73d6aff943148a4663447a35b529>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660015921
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Example\
    \ 2:\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence\
    \ contains only letters\n    public static string WordsInSentence(string sentence)\
    \ {\n        string result = \"\";\n        string word = \"\";\n        bool\
    \ isPrime = true;\n        foreach (char c in sentence) {\n            if (char.IsLetter(c))\
    \ {\n                word += c;\n            } else {\n                isPrime\
    \ = false;\n            }\n        }\n        char[] charArray = word.ToCharArray();\n\
    \        List<int> primes = new List<int>();\n        foreach (char c in charArray)\
    \ {\n            int n = Convert.ToInt32(c);\n            if (isPrime) {\n   \
    \             for (int i = 2; i <= Math.Sqrt(n); i++) {\n                    if\
    \ (n % i == 0) {\n                        isPrime = false;\n                 \
    \       break;\n                    }\n                }\n                if (isPrime)\
    \ {\n                    primes.Add(n);\n                }\n            }\n  \
    \      }\n        foreach (int prime in primes) {\n            result += \" \"\
    \ + word;\n        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\"\
    )));\n    Debug.Assert(WordsInSentence((\"lets go for swimming\")).Equals((\"\
    go for\")));\n    Debug.Assert(WordsInSentence((\"there is no place available\
    \ here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"\
    Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"\
    go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"\
    here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"\
    is\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <cb5511c47f674c06b67f5eddfcd25e5d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <cb5511c47f674c06b67f5eddfcd25e5d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660015921
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Example\
    \ 2:\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence\
    \ contains only letters\n    public static string WordsInSentence(string sentence)\
    \ {\n        string result = \"\";\n        char[] chars = sentence.ToCharArray();\n\
    \        Array.Sort(chars);\n        foreach (char c in chars) {\n           \
    \ int n = Convert.ToInt32(c);\n            if (n % 2 == 0) {\n               \
    \ for (int i = 3; i * i <= n; i += 2) {\n                    if (n % i == 0) {\n\
    \                        for (int j = i; j <= n; j += i) {\n                 \
    \           if (n % j == 0) {\n                                result += c.ToString();\n\
    \                                break;\n                            }\n     \
    \                   }\n                        break;\n                    }\n\
    \                }\n            }\n        }\n        return result;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"\
    This is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets\
    \ go for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"\
    there is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"\
    Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"\
    go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"\
    here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"\
    is\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8f79e7e197c941e9b133d0cf1a6eeb47>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8f79e7e197c941e9b133d0cf1a6eeb47>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660015921
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Example\
    \ 2:\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence\
    \ contains only letters\n    public static string WordsInSentence(string sentence)\
    \ {\n        string result = \"\";\n        string word = \"\";\n        string\
    \ word2 = \"\";\n        string word3 = \"\";\n        string word4 = \"\";\n\
    \        string word5 = \"\";\n        string word6 = \"\";\n        string word7\
    \ = \"\";\n        string word8 = \"\";\n        string word9 = \"\";\n      \
    \  string word10 = \"\";\n        string word11 = \"\";\n        string word12\
    \ = \"\";\n        string word13 = \"\";\n        string word14 = \"\";\n    \
    \    string word15 = \"\";\n        string word16 = \"\";\n        string word17\
    \ = \"\";\n        string word18 = \"\";\n        string word19 = \"\";\n    \
    \    string word20 = \"\";\n        string word21 = \"\";\n        string word22\
    \ = \"\";\n        string word23 = \"\";\n        string word24 = \"\";\n    \
    \    string word25 = \"\";\n        string word26 = \"\";\n        string word27\
    \ = \"\";\n        string word28 = \"\";\n        string word29 = \"\";\n    \
    \    string word30 = \"\";\n        string word31 = \"\";\n        string word32\
    \ = \"\";\n        string word33 = \"\";\n        string word34 = \"\";\n    \
    \    string word35 = \"\";\n        string word36 = \"\";\n        string word37\
    \ = \"\";\n        string word38 = \"\";\n        string word39 = \"\";\n    \
    \    string word40 = \"\";\n        string word41 = \"\";\n        string word42\
    \ = \"\";\n        string word43 = \"\";\n        string word44 = \"\";\n    \
    \    string word45 = \"\";\n        string word46 = \"\";\n        string word47\
    \ = \"\";\n        string word48 = \"\";\n        string word49 = \"\";\n    \
    \    string word50 = \"\";\n        string word51 = \"\";\n        string word52\
    \ = \"\";\n        string word53 = \"\";\n        string word54 = \"\";\n    \
    \    string word55 = \"\";\n        string word56 = \"\";\n        string word57\
    \ = \"\";\n        string word58 = \"\";\n        string word59 = \"\";\n    \
    \    string word60 = \"\";\n        string word61 = \"\";\n        string word62\
    \ = \"\";\n        string word63 = \"\";\n        string word64 = \"\";\n    \
    \    string word65 = \"\";\n        string word66 = \"\";\n        string word67\
    \ = \"\";\n        string word68 = \"\";\n        string word69 = \"\";\n    \
    \    string word70 = \"\";\n        string word71 = \"\";\n        string word72\
    \ = \"\";\n        string word73 = \"\";\n        string word74 = \"\";\n    \
    \    string word75 = \"\";\n        string word76 = \"\";\n        string word77\
    \ = \"\";\n        string word78 = \"\";\n        string word79 = \"\";\n    \
    \    string word80 = \"\";\n        string word81 = \"\";\n        string word8\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"\
    This is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets\
    \ go for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"\
    there is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"\
    Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"\
    go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"\
    here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"\
    is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpo3cyw5md.cs(102,21): error CS1002: ; expected

    '
  timestamp: 1660015920
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Example\
    \ 2:\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence\
    \ contains only letters\n    public static string WordsInSentence(string sentence)\
    \ {\n        string result = \"\";\n        string word = \"\";\n        bool\
    \ isPrime = true;\n        BigInteger num = new BigInteger(sentence.Split(' ').Select(x\
    \ => Convert.ToInt32(x)).ToArray());\n        for (int i = 0; i < sentence.Length;\
    \ i++) {\n            isPrime = true;\n            while (num.Divide(2).Equals(BigInteger.Zero))\
    \ {\n                isPrime = false;\n                num = num.Divide(2);\n\
    \            }\n            if (isPrime) {\n                result += \" \" +\
    \ word;\n                word = \"\";\n            }\n            word += sentence[i];\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\"\
    )));\n    Debug.Assert(WordsInSentence((\"lets go for swimming\")).Equals((\"\
    go for\")));\n    Debug.Assert(WordsInSentence((\"there is no place available\
    \ here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"\
    Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"\
    go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"\
    here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"\
    is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp_q0b9cxm.cs(23,41): error CS1503: Argument 1: cannot convert from ''int[]''
    to ''int''

    /tmp/tmp_q0b9cxm.cs(26,24): error CS7036: There is no argument given that corresponds
    to the required formal parameter ''divisor'' of ''BigInteger.Divide(BigInteger,
    BigInteger)''

    /tmp/tmp_q0b9cxm.cs(28,27): error CS7036: There is no argument given that corresponds
    to the required formal parameter ''divisor'' of ''BigInteger.Divide(BigInteger,
    BigInteger)''

    '
  timestamp: 1660015921
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Example\
    \ 2:\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence\
    \ contains only letters\n    public static string WordsInSentence(string sentence)\
    \ {\n        string result = \"\";\n        char[] charArray = sentence.ToCharArray();\n\
    \        Array.Sort(charArray);\n        foreach (char c in charArray) {\n   \
    \         int count = 0;\n            while (c != ' ') {\n                count++;\n\
    \                c = charArray[count];\n            }\n            if (count %\
    \ 2 == 0) {\n                result += \" \" + c;\n            }\n        }\n\
    \        return result;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\")));\n \
    \   Debug.Assert(WordsInSentence((\"lets go for swimming\")).Equals((\"go for\"\
    )));\n    Debug.Assert(WordsInSentence((\"there is no place available here\")).Equals((\"\
    there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi I am Hussein\"\
    )).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go for it\"\
    )).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\
    \")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpviqrai34.cs(27,17): error CS1656: Cannot assign to ''c'' because it is
    a ''foreach iteration variable''

    '
  timestamp: 1660015921
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Example\
    \ 2:\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence\
    \ contains only letters\n    public static string WordsInSentence(string sentence)\
    \ {\n        string result = \"\";\n        char[] chars = sentence.ToCharArray();\n\
    \        Array.Sort(chars);\n        List<int> primes = new List<int>();\n   \
    \     foreach (char c in chars) {\n            int n = Convert.ToInt32(c);\n \
    \           if (n % 2 == 0) {\n                primes.Add(n);\n            }\n\
    \        }\n        foreach (int n in primes) {\n            if (n % 2 == 0) {\n\
    \                for (int i = 2; i <= n / 2; i++) {\n                    if (n\
    \ % i == 0) {\n                        n = n / i;\n                        break;\n\
    \                    }\n                }\n            }\n            if (n ==\
    \ 1) {\n                result += \" \" + n;\n            }\n        }\n     \
    \   return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"\
    This is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets\
    \ go for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"\
    there is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"\
    Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"\
    go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"\
    here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"\
    is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmptn1ac6jj.cs(34,25): error CS1656: Cannot assign to ''n'' because it is
    a ''foreach iteration variable''

    '
  timestamp: 1660015921
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Example\
    \ 2:\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence\
    \ contains only letters\n    public static string WordsInSentence(string sentence)\
    \ {\n        string result = \"\";\n        char[] chars = sentence.ToCharArray();\n\
    \        List<int> primes = new List<int>();\n        foreach (char c in chars)\
    \ {\n            int n = Convert.ToInt32(c);\n            if (n % 2 == 0) {\n\
    \                for (int i = 3; i <= Math.Sqrt(n); i += 2) {\n              \
    \      if (n % i == 0) {\n                        primes.Add(i);\n           \
    \             break;\n                    }\n                }\n            }\n\
    \        }\n        foreach (int p in primes) {\n            result += string.Join(\"\
    \ \", chars.Where(x => x == p).ToArray());\n        }\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"\
    This is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets\
    \ go for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"\
    there is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"\
    Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"\
    go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"\
    here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"\
    is\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <51f20007d1d0419ab36683cf496cacce>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <51f20007d1d0419ab36683cf496cacce>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660015921
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Example\
    \ 2:\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence\
    \ contains only letters\n    public static string WordsInSentence(string sentence)\
    \ {\n        string result = \"\";\n        foreach (string word in sentence.Split('\
    \ '))\n        {\n            int length = word.Length;\n            if (IsPrime(length))\n\
    \            {\n                result += word;\n            }\n        }\n  \
    \      return result;\n    }\n    public static void Main(string[] args) {\n \
    \   Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\")));\n  \
    \  Debug.Assert(WordsInSentence((\"lets go for swimming\")).Equals((\"go for\"\
    )));\n    Debug.Assert(WordsInSentence((\"there is no place available here\")).Equals((\"\
    there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi I am Hussein\"\
    )).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go for it\"\
    )).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\
    \")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp1486vcnu.cs(24,17): error CS0103: The name ''IsPrime'' does not exist
    in the current context

    '
  timestamp: 1660015921
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Example\
    \ 2:\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence\
    \ contains only letters\n    public static string WordsInSentence(string sentence)\
    \ {\n        string result = \"\";\n        char[] chars = sentence.ToCharArray();\n\
    \        Array.Sort(chars);\n        foreach (char c in chars) {\n           \
    \ int n = Convert.ToInt32(c);\n            if (n % 2 == 0) {\n               \
    \ for (int i = 3; i <= Math.Sqrt(n); i += 2) {\n                    if (n % i\
    \ == 0) {\n                        result += c.ToString();\n                 \
    \       break;\n                    }\n                }\n            }\n    \
    \    }\n        return result;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\")));\n\
    \    Debug.Assert(WordsInSentence((\"lets go for swimming\")).Equals((\"go for\"\
    )));\n    Debug.Assert(WordsInSentence((\"there is no place available here\")).Equals((\"\
    there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi I am Hussein\"\
    )).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go for it\"\
    )).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\
    \")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n \
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <2aee09c5473e4886a87b8b827d5b2967>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <2aee09c5473e4886a87b8b827d5b2967>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660015921
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Example\
    \ 2:\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence\
    \ contains only letters\n    public static string WordsInSentence(string sentence)\
    \ {\n        string result = \"\";\n        string word = \"\";\n        string\
    \ temp = \"\";\n        bool isPrime = true;\n        int length = sentence.Length;\n\
    \        for (int i = 0; i < length; i++) {\n            word = sentence.Substring(i,\
    \ 1);\n            temp = word.ToLower();\n            isPrime = true;\n     \
    \       int j = 2;\n            while (j < length) {\n                if (temp.Length\
    \ % j == 0) {\n                    isPrime = false;\n                    break;\n\
    \                }\n                j++;\n            }\n            if (isPrime)\
    \ {\n                result += word + \" \";\n            }\n        }\n     \
    \   return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"\
    This is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets\
    \ go for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"\
    there is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"\
    Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"\
    go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"\
    here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"\
    is\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <4303a29b00e5404990277792440ea5ea>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <4303a29b00e5404990277792440ea5ea>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660015921
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Example\
    \ 2:\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence\
    \ contains only letters\n    public static string WordsInSentence(string sentence)\
    \ {\n        string result = \"\";\n        char[] chars = sentence.ToCharArray();\n\
    \        Array.Sort(chars);\n        foreach (char c in chars) {\n           \
    \ int n = Convert.ToInt32(c);\n            if (IsPrime(n)) {\n               \
    \ result += \" \" + c;\n            }\n        }\n        return result.Trim();\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"\
    This is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets\
    \ go for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"\
    there is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"\
    Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"\
    go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"\
    here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"\
    is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp8r8gq8fe.cs(25,17): error CS0103: The name ''IsPrime'' does not exist
    in the current context

    '
  timestamp: 1660015921
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Example\
    \ 2:\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence\
    \ contains only letters\n    public static string WordsInSentence(string sentence)\
    \ {\n        string result = \"\";\n        string word = \"\";\n        bool\
    \ isPrime = true;\n        foreach (char c in sentence) {\n            if (char.IsLetter(c))\
    \ {\n                word += c;\n            } else {\n                isPrime\
    \ = false;\n            }\n        }\n        char[] arr = word.ToCharArray();\n\
    \        Array.Sort(arr);\n        foreach (char c in arr) {\n            if (isPrime)\
    \ {\n                result += c;\n            }\n        }\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"\
    This is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets\
    \ go for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"\
    there is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"\
    Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"\
    go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"\
    here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"\
    is\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c8a2975be6c94cf4bbbc13e2ec9672f3>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c8a2975be6c94cf4bbbc13e2ec9672f3>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660015921
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Example\
    \ 2:\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence\
    \ contains only letters\n    public static string WordsInSentence(string sentence)\
    \ {\n        string result = \"\";\n        string temp = \"\";\n        bool\
    \ isPrime = true;\n        foreach (char c in sentence) {\n            int n =\
    \ Convert.ToInt32(c);\n            if (n % 2 == 0) {\n                isPrime\
    \ = false;\n            }\n        }\n        if (isPrime) {\n            int\
    \ n = Convert.ToInt32(sentence);\n            int count = 0;\n            int\
    \ tempCount = 0;\n            int tempCount2 = 0;\n            int tempCount3\
    \ = 0;\n            int tempCount4 = 0;\n            int tempCount5 = 0;\n   \
    \         int tempCount6 = 0;\n            int tempCount7 = 0;\n            int\
    \ tempCount8 = 0;\n            int tempCount9 = 0;\n            int tempCount10\
    \ = 0;\n            int tempCount11 = 0;\n            int tempCount12 = 0;\n \
    \           int tempCount13 = 0;\n            int tempCount14 = 0;\n         \
    \   int tempCount15 = 0;\n            int tempCount16 = 0;\n            int tempCount17\
    \ = 0;\n            int tempCount18 = 0;\n            int tempCount19 = 0;\n \
    \           int tempCount20 = 0;\n            int tempCount21 = 0;\n         \
    \   int tempCount22 = 0;\n            int tempCount23 = 0;\n            int tempCount24\
    \ = 0;\n            int tempCount25 = 0;\n            int tempCount26 = 0;\n \
    \           int tempCount27 = 0;\n            int tempCount28 = 0;\n         \
    \   int tempCount29 = 0;\n            int tempCount30 = 0;\n            int tempCount31\
    \ = 0;\n            int tempCount32 = 0;\n            int tempCount33 = 0;\n \
    \           int tempCount34 = 0;\n            int tempCount35 = 0;\n         \
    \   int tempCount36 = 0;\n            int tempCount37 = 0;\n            int tempCount38\
    \ = 0;\n            int tempCount39 = 0;\n            int tempCount40 = 0;\n \
    \           int tempCount41 = 0;\n            int tempCount42 = 0;\n         \
    \   int tempCount43 = 0;\n            int tempCount44 = 0;\n            int tempCount45\
    \ = 0;\n            int tempCount46 = 0;\n            int tempCount47 = 0;\n \
    \           int tempCount48 = 0;\n            int tempCount49 = 0;\n         \
    \   int tempCount50 = 0;\n            int tempCount51 = 0;\n            int tempCount52\
    \ = 0;\n            int tempCount53 = 0;\n            int tempCount54 = 0;\n \
    \           int tempCount55 = 0;\n            int tempCount56 = 0;\n         \
    \   int tempCount57 = 0;\n            int tempCount58 = 0;\n            int tempCount59\
    \ = 0;\n            int tempCount60 = 0;\n            int tempCount61 = 0;\n \
    \           int tempCount62 = 0;\n            int tempCount63 = 0;\n         \
    \   int tempCount64 = 0;\n            \n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\"\
    )));\n    Debug.Assert(WordsInSentence((\"lets go for swimming\")).Equals((\"\
    go for\")));\n    Debug.Assert(WordsInSentence((\"there is no place available\
    \ here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"\
    Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"\
    go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"\
    here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"\
    is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpaktxoeuv.cs(98,5): error CS0106: The modifier ''public'' is not valid
    for this item

    /tmp/tmpaktxoeuv.cs(108,2): error CS1513: } expected

    '
  timestamp: 1660015920
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Example\
    \ 2:\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence\
    \ contains only letters\n    public static string WordsInSentence(string sentence)\
    \ {\n        string result = \"\";\n        string word = \"\";\n        string\
    \ temp = \"\";\n        int count = 0;\n        char[] chars = sentence.ToCharArray();\n\
    \        foreach (char c in chars) {\n            if (char.IsLetter(c)) {\n  \
    \              word += c;\n            } else {\n                temp = word;\n\
    \                word = \"\";\n                if (IsPrime(temp.Length)) {\n \
    \                   result += temp;\n                    count++;\n          \
    \      }\n            }\n        }\n        return result;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This\
    \ is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go\
    \ for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"\
    there is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"\
    Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"\
    go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"\
    here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"\
    is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpnbk2d50o.cs(31,21): error CS0103: The name ''IsPrime'' does not exist
    in the current context

    '
  timestamp: 1660015921
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Example\
    \ 2:\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence\
    \ contains only letters\n    public static string WordsInSentence(string sentence)\
    \ {\n        string result = \"\";\n        List<string> words = new List<string>();\n\
    \        foreach (string word in sentence.Split(' '))\n        {\n           \
    \ words.Add(word);\n        }\n        foreach (string word in words)\n      \
    \  {\n            int length = word.Length;\n            bool isPrime = true;\n\
    \            for (int i = 2; i <= Math.Sqrt(length); i++)\n            {\n   \
    \             if (length % i == 0)\n                {\n                    isPrime\
    \ = false;\n                    break;\n                }\n            }\n   \
    \         if (isPrime)\n            {\n                result += word + \" \"\
    ;\n            }\n        }\n        return result;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This is a test\"\
    )).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go for swimming\"\
    )).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there is no place\
    \ available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"\
    Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"\
    go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"\
    here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"\
    is\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <b14c177d88cb49daa49541bf00b6644a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <b14c177d88cb49daa49541bf00b6644a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660015921
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Example\
    \ 2:\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence\
    \ contains only letters\n    public static string WordsInSentence(string sentence)\
    \ {\n        string result = \"\";\n        char[] chars = sentence.ToCharArray();\n\
    \        HashSet<string> set = new HashSet<string>();\n        foreach (char c\
    \ in chars) {\n            if (chars.Contains(c)) {\n                set.Add(c.ToString());\n\
    \            }\n        }\n        foreach (string s in set) {\n            int\
    \ count = 0;\n            foreach (char c in s) {\n                if (chars.Contains(c))\
    \ {\n                    count++;\n                }\n            }\n        \
    \    if (count % 2 == 0) {\n                result += s;\n            }\n    \
    \    }\n        return result;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\")));\n\
    \    Debug.Assert(WordsInSentence((\"lets go for swimming\")).Equals((\"go for\"\
    )));\n    Debug.Assert(WordsInSentence((\"there is no place available here\")).Equals((\"\
    there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi I am Hussein\"\
    )).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go for it\"\
    )).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\
    \")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n \
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <bfc1c32a34284dbeb5d46ba12261d965>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <bfc1c32a34284dbeb5d46ba12261d965>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660015921
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Example\
    \ 2:\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence\
    \ contains only letters\n    public static string WordsInSentence(string sentence)\
    \ {\n        string result = \"\";\n        char[] chars = sentence.ToCharArray();\n\
    \        List<int> primes = new List<int>();\n        foreach (char c in chars)\
    \ {\n            int n = Convert.ToInt32(c);\n            if (n % 2 == 0) {\n\
    \                for (int i = 3; i * i <= n; i += 2) {\n                    if\
    \ (n % i == 0) {\n                        primes.Add(i);\n                   \
    \     break;\n                    }\n                }\n            }\n      \
    \  }\n        foreach (int p in primes) {\n            string s = \"\";\n    \
    \        for (int i = 0; i < p; i++) {\n                s += chars[i];\n     \
    \       }\n            result += s;\n        }\n        return result;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"\
    This is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets\
    \ go for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"\
    there is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"\
    Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"\
    go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"\
    here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"\
    is\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <5fc12a72a88b4a72a971f41d7c529829>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <5fc12a72a88b4a72a971f41d7c529829>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660015921
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Example\
    \ 2:\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence\
    \ contains only letters\n    public static string WordsInSentence(string sentence)\
    \ {\n        string result = \"\";\n        char[] chars = sentence.ToCharArray();\n\
    \        List<int> primes = new List<int>();\n        foreach (char c in chars)\
    \ {\n            int n = Convert.ToInt32(c);\n            if (n % 2 == 0) {\n\
    \                primes.Add(n);\n            }\n        }\n        primes.Sort();\n\
    \        foreach (int prime in primes) {\n            int count = 0;\n       \
    \     foreach (char c in chars) {\n                if (Convert.ToInt32(c) == prime)\
    \ {\n                    count++;\n                }\n            }\n        \
    \    if (count == 0) {\n                result += prime + \" \";\n           \
    \ }\n        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\"\
    )));\n    Debug.Assert(WordsInSentence((\"lets go for swimming\")).Equals((\"\
    go for\")));\n    Debug.Assert(WordsInSentence((\"there is no place available\
    \ here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"\
    Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"\
    go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"\
    here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"\
    is\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <5c8788f4fcd648c0b438b154017d6a96>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <5c8788f4fcd648c0b438b154017d6a96>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660015921
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Example\
    \ 2:\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence\
    \ contains only letters\n    public static string WordsInSentence(string sentence)\
    \ {\n        string result = \"\";\n        char[] chars = sentence.ToCharArray();\n\
    \        HashSet<string> words = new HashSet<string>();\n        foreach (char\
    \ c in chars) {\n            if (char.IsLetter(c)) {\n                string word\
    \ = c.ToString();\n                words.Add(word);\n            }\n        }\n\
    \        foreach (string word in words) {\n            int length = word.Length;\n\
    \            bool isPrime = true;\n            for (int i = 2; i <= Math.Sqrt(length);\
    \ i++) {\n                if (length % i == 0) {\n                    isPrime\
    \ = false;\n                    break;\n                }\n            }\n   \
    \         if (isPrime) {\n                result += word + \" \";\n          \
    \  }\n        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\"\
    )));\n    Debug.Assert(WordsInSentence((\"lets go for swimming\")).Equals((\"\
    go for\")));\n    Debug.Assert(WordsInSentence((\"there is no place available\
    \ here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"\
    Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"\
    go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"\
    here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"\
    is\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <6dff44bb1ecd467ba397b6c7537a25a2>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <6dff44bb1ecd467ba397b6c7537a25a2>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660015921
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Example\
    \ 2:\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence\
    \ contains only letters\n    public static string WordsInSentence(string sentence)\
    \ {\n        string result = \"\";\n        char[] chars = sentence.ToCharArray();\n\
    \        List<int> primes = new List<int>();\n        foreach (char c in chars)\
    \ {\n            int n = Convert.ToInt32(c);\n            if (n % 2 == 0) {\n\
    \                for (int i = 3; i <= Math.Sqrt(n); i += 2) {\n              \
    \      if (n % i == 0) {\n                        primes.Add(i);\n           \
    \         }\n                }\n            }\n        }\n        foreach (int\
    \ p in primes) {\n            string s = \"\";\n            for (int i = 0; i\
    \ < chars.Length; i++) {\n                if (chars[i] == ' ') {\n           \
    \         s += chars[i];\n                }\n            }\n            if (s.Length\
    \ == p) {\n                result += s;\n            }\n        }\n        return\
    \ result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"\
    This is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets\
    \ go for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"\
    there is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"\
    Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"\
    go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"\
    here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"\
    is\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8ed41727b1aa4f72ac5b078b8f0eaf31>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8ed41727b1aa4f72ac5b078b8f0eaf31>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660015921
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Example\
    \ 2:\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence\
    \ contains only letters\n    public static string WordsInSentence(string sentence)\
    \ {\n        string result = \"\";\n        string word = \"\";\n        string\
    \ temp = \"\";\n        char[] chars = sentence.ToCharArray();\n        Array.Sort(chars);\n\
    \        foreach (char c in chars) {\n            if (chars.Contains(c)) {\n \
    \               word += c;\n            }\n        }\n        char[] chars2 =\
    \ word.ToCharArray();\n        Array.Sort(chars2);\n        foreach (char c in\
    \ chars2) {\n            if (chars2.Contains(c)) {\n                temp += c;\n\
    \            }\n        }\n        char[] chars3 = temp.ToCharArray();\n     \
    \   Array.Sort(chars3);\n        foreach (char c in chars3) {\n            if\
    \ (chars3.Contains(c)) {\n                result += c;\n            }\n      \
    \  }\n        return result;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\")));\n\
    \    Debug.Assert(WordsInSentence((\"lets go for swimming\")).Equals((\"go for\"\
    )));\n    Debug.Assert(WordsInSentence((\"there is no place available here\")).Equals((\"\
    there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi I am Hussein\"\
    )).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go for it\"\
    )).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\
    \")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n \
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <5e9ff4dedb31434da1aa1531de631796>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <5e9ff4dedb31434da1aa1531de631796>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660015921
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Example\
    \ 2:\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence\
    \ contains only letters\n    public static string WordsInSentence(string sentence)\
    \ {\n        string result = \"\";\n        string word = \"\";\n        bool\
    \ isPrime = true;\n        foreach (char c in sentence) {\n            isPrime\
    \ = true;\n            int n = Convert.ToInt32(c);\n            for (int i = 2;\
    \ i <= Math.Sqrt(n); i++) {\n                if (n % i == 0) {\n             \
    \       isPrime = false;\n                    break;\n                }\n    \
    \        }\n            if (isPrime) {\n                result += word;\n    \
    \            word = \"\";\n            }\n            word += c;\n        }\n\
    \        result += word;\n        return result;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This is a test\"\
    )).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go for swimming\"\
    )).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there is no place\
    \ available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"\
    Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"\
    go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"\
    here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"\
    is\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8fa8d95f2d9946e38b55ea914ad58ee0>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8fa8d95f2d9946e38b55ea914ad58ee0>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660015921
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Example\
    \ 2:\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence\
    \ contains only letters\n    public static string WordsInSentence(string sentence)\
    \ {\n        string result = \"\";\n        char[] chars = sentence.ToCharArray();\n\
    \        List<int> primes = new List<int>();\n        foreach (char c in chars)\
    \ {\n            int n = Convert.ToInt32(c);\n            if (n % 2 == 0) {\n\
    \                primes.Add(n);\n            }\n        }\n        foreach (int\
    \ p in primes) {\n            int n = p;\n            while (n % 2 == 0) {\n \
    \               n = n / 2;\n            }\n            while (n % 3 == 0) {\n\
    \                n = n / 3;\n            }\n            while (n % 5 == 0) {\n\
    \                n = n / 5;\n            }\n            if (n == 1) {\n      \
    \          result += chars[p];\n            }\n        }\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"\
    This is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets\
    \ go for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"\
    there is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"\
    Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"\
    go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"\
    here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"\
    is\")));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.IndexOutOfRangeException: Index was outside\
    \ the bounds of the array.\n  at Problem.WordsInSentence (System.String sentence)\
    \ [0x000bc] in <42bb1115943f46ceb02295658f62ff57>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00001] in <42bb1115943f46ceb02295658f62ff57>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.IndexOutOfRangeException: Index was outside the bounds of\
    \ the array.\n  at Problem.WordsInSentence (System.String sentence) [0x000bc]\
    \ in <42bb1115943f46ceb02295658f62ff57>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00001] in <42bb1115943f46ceb02295658f62ff57>:0 \n"
  stdout: ''
  timestamp: 1660015921
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Example\
    \ 2:\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence\
    \ contains only letters\n    public static string WordsInSentence(string sentence)\
    \ {\n        string result = \"\";\n        string word = \"\";\n        string\
    \ temp = \"\";\n        bool isPrime = true;\n        int count = 0;\n       \
    \ foreach (char c in sentence) {\n            if (char.IsLetter(c)) {\n      \
    \          word += c;\n            } else {\n                result += word;\n\
    \                word = \"\";\n            }\n        }\n        result += word;\n\
    \        foreach (char c in sentence) {\n            if (char.IsLetter(c)) {\n\
    \                temp = c + temp;\n            } else {\n                result\
    \ += temp;\n                temp = \"\";\n            }\n        }\n        foreach\
    \ (char c in sentence) {\n            if (char.IsLetter(c)) {\n              \
    \  isPrime = IsPrime(Convert.ToInt32(c));\n                if (isPrime) {\n  \
    \                  count++;\n                }\n            } else {\n       \
    \         result += temp;\n                temp = \"\";\n            }\n     \
    \   }\n        result += temp;\n        foreach (char c in sentence) {\n     \
    \       if (char.IsLetter(c)) {\n                isPrime = IsPrime(Convert.ToInt32(c));\n\
    \                if (isPrime) {\n                    count++;\n              \
    \  }\n            } else {\n                result += temp;\n                temp\
    \ = \"\";\n            }\n        }\n        result += temp;\n        foreach\
    \ (char c in sentence) {\n            if (char.IsLetter(c)) {\n              \
    \  isPrime = IsPrime(Convert.ToInt32(c));\n                if (isPrime) {\n  \
    \                  count++;\n                }\n            } else {\n       \
    \         result += temp;\n                temp = \"\";\n            }\n     \
    \   }\n        result += temp;\n        foreach (char c in sentence) {\n     \
    \       if (char.IsLetter(c)) {\n                isPrime = IsPrime(Convert.ToInt32(c));\n\
    \                if (isPrime) {\n                    count++;\n              \
    \  }\n            } else {\n                result += temp;\n                temp\
    \ = \"\";\n            }\n        }\n        result += temp;\n        foreach\
    \ (char c in sentence) {\n            if (char.IsLetter(c)) {\n              \
    \  isPrime = IsPrime(Convert.ToInt32(c));\n                if (isPrime) {\n  \
    \                  count++;\n                }\n            } else {\n       \
    \         result += temp;\n                temp = \"\";\n            }\n     \
    \   }\n        result += temp;\n        foreach (char c in sentence) {\n     \
    \       if (char.IsLetter(c)) {\n                isPrime = IsPrime(Convert.ToInt32(c));\n\
    \                if (isPrime) {\n                    count++;\n              \
    \  }\n            } else {\n                result += temp;\n                temp\
    \ = \"\";\n            }\n        }\n        result += temp;\n        foreach\
    \ (char c in sentence) {\n            if (char.IsLetter(c)) {\n              \
    \  isPrime = IsPrime(Convert.ToInt32(c));\n                if (is\n    }\n   \
    \ public static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"\
    This is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets\
    \ go for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"\
    there is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"\
    Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"\
    go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"\
    here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"\
    is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpuaeelpom.cs(117,21): error CS1525: Invalid expression term ''is''

    /tmp/tmpuaeelpom.cs(117,23): error CS1031: Type expected

    /tmp/tmpuaeelpom.cs(117,23): error CS1026: ) expected

    /tmp/tmpuaeelpom.cs(117,23): error CS1525: Invalid expression term ''}''

    /tmp/tmpuaeelpom.cs(117,23): error CS1002: ; expected

    /tmp/tmpuaeelpom.cs(119,5): error CS0106: The modifier ''public'' is not valid
    for this item

    /tmp/tmpuaeelpom.cs(129,2): error CS1513: } expected

    '
  timestamp: 1660015921
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Example\
    \ 2:\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence\
    \ contains only letters\n    public static string WordsInSentence(string sentence)\
    \ {\n        string result = \"\";\n        string temp = \"\";\n        char[]\
    \ chars = sentence.ToCharArray();\n        HashSet<string> set = new HashSet<string>();\n\
    \        foreach (char c in chars) {\n            if (char.IsLetter(c)) {\n  \
    \              temp = temp + c;\n            }\n        }\n        char[] chars2\
    \ = temp.ToCharArray();\n        foreach (char c in chars2) {\n            if\
    \ (char.IsLetter(c)) {\n                set.Add(c);\n            }\n        }\n\
    \        foreach (string s in set) {\n            int count = 0;\n           \
    \ int length = s.Length;\n            int max = (int)Math.Sqrt(length);\n    \
    \        for (int i = 0; i < max; i++) {\n                for (int j = 0; j <\
    \ length; j++) {\n                    if (s.Substring(j, 1) == s.Substring(i +\
    \ 1, 1)) {\n                        count++;\n                    }\n        \
    \        }\n                if (count == length) {\n                    result\
    \ = result + s + \" \";\n                    break;\n                }\n     \
    \       }\n        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\"\
    )));\n    Debug.Assert(WordsInSentence((\"lets go for swimming\")).Equals((\"\
    go for\")));\n    Debug.Assert(WordsInSentence((\"there is no place available\
    \ here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"\
    Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"\
    go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"\
    here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"\
    is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpjhn_r9od.cs(32,25): error CS1503: Argument 1: cannot convert from ''char''
    to ''string''

    '
  timestamp: 1660015921
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Example\
    \ 2:\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence\
    \ contains only letters\n    public static string WordsInSentence(string sentence)\
    \ {\n        string result = \"\";\n        string word = \"\";\n        string\
    \ temp = \"\";\n        bool isPrime = true;\n        int len = sentence.Length;\n\
    \        for (int i = 0; i < len; i++) {\n            word = sentence.Substring(i,\
    \ 1);\n            temp = word.ToLower();\n            if (isPrime) {\n      \
    \          isPrime = IsPrime(temp);\n            }\n            if (isPrime) {\n\
    \                result += temp + \" \";\n            }\n        }\n        return\
    \ result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"\
    This is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets\
    \ go for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"\
    there is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"\
    Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"\
    go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"\
    here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"\
    is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp21j7tm2x.cs(29,27): error CS0103: The name ''IsPrime'' does not exist
    in the current context

    '
  timestamp: 1660015921
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Example\
    \ 2:\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence\
    \ contains only letters\n    public static string WordsInSentence(string sentence)\
    \ {\n        string result = \"\";\n        char[] chars = sentence.ToCharArray();\n\
    \        Array.Sort(chars);\n        foreach (char c in chars) {\n           \
    \ if (IsPrime(c.ToString().Length)) {\n                result += c.ToString();\n\
    \            }\n        }\n        return result;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This is a test\"\
    )).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go for swimming\"\
    )).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there is no place\
    \ available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"\
    Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"\
    go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"\
    here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"\
    is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpffbihfzg.cs(24,17): error CS0103: The name ''IsPrime'' does not exist
    in the current context

    '
  timestamp: 1660015921
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Example\
    \ 2:\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence\
    \ contains only letters\n    public static string WordsInSentence(string sentence)\
    \ {\n        string result = \"\";\n        List<int> primes = new List<int>();\n\
    \        string word = \"\";\n        foreach (char c in sentence) {\n       \
    \     if (char.IsLetter(c)) {\n                word += c;\n            } else\
    \ {\n                if (word.Length > 0) {\n                    primes.Add(new\
    \ BigInteger(word.ToCharArray()).Sieve());\n                    word = \"\";\n\
    \                }\n            }\n        }\n        if (word.Length > 0) {\n\
    \            primes.Add(new BigInteger(word.ToCharArray()).Sieve());\n       \
    \ }\n        foreach (int p in primes) {\n            result += \" \" + p.ToString();\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\"\
    )));\n    Debug.Assert(WordsInSentence((\"lets go for swimming\")).Equals((\"\
    go for\")));\n    Debug.Assert(WordsInSentence((\"there is no place available\
    \ here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"\
    Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"\
    go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"\
    here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"\
    is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpr7wa_9qn.cs(28,47): error CS1503: Argument 1: cannot convert from ''char[]''
    to ''int''

    /tmp/tmpr7wa_9qn.cs(34,39): error CS1503: Argument 1: cannot convert from ''char[]''
    to ''int''

    '
  timestamp: 1660015921
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Example\
    \ 2:\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence\
    \ contains only letters\n    public static string WordsInSentence(string sentence)\
    \ {\n        string result = \"\";\n        char[] chars = sentence.ToCharArray();\n\
    \        Array.Sort(chars);\n        string word = \"\";\n        bool isPrime\
    \ = true;\n        foreach (char c in chars) {\n            int n = Convert.ToInt32(c);\n\
    \            if (n % 2 == 0) {\n                isPrime = false;\n           \
    \ }\n            if (isPrime) {\n                word += c;\n            }\n \
    \       }\n        char[] wordChars = word.ToCharArray();\n        Array.Sort(wordChars);\n\
    \        foreach (char c in wordChars) {\n            int n = Convert.ToInt32(c);\n\
    \            if (n % 2 == 0) {\n                isPrime = false;\n           \
    \ }\n            if (isPrime) {\n                result += c;\n            }\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\"\
    )));\n    Debug.Assert(WordsInSentence((\"lets go for swimming\")).Equals((\"\
    go for\")));\n    Debug.Assert(WordsInSentence((\"there is no place available\
    \ here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"\
    Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"\
    go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"\
    here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"\
    is\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <2c320a08f81c46169300bd7334813d39>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <2c320a08f81c46169300bd7334813d39>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660015921
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Example\
    \ 2:\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence\
    \ contains only letters\n    public static string WordsInSentence(string sentence)\
    \ {\n        string result = \"\";\n        char[] chars = sentence.ToCharArray();\n\
    \        Array.Sort(chars);\n        foreach (char c in chars) {\n           \
    \ int length = c.ToString().Length;\n            if (length == 1) continue;\n\
    \            bool isPrime = true;\n            for (int i = 2; i <= Math.Sqrt(length);\
    \ i++) {\n                if (length % i == 0) {\n                    isPrime\
    \ = false;\n                    break;\n                }\n            }\n   \
    \         if (isPrime) {\n                result += c.ToString();\n          \
    \  }\n        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\"\
    )));\n    Debug.Assert(WordsInSentence((\"lets go for swimming\")).Equals((\"\
    go for\")));\n    Debug.Assert(WordsInSentence((\"there is no place available\
    \ here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"\
    Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"\
    go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"\
    here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"\
    is\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <34c92724e0ec4c8b81d461d7bf9712f1>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <34c92724e0ec4c8b81d461d7bf9712f1>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660015921
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Example\
    \ 2:\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence\
    \ contains only letters\n    public static string WordsInSentence(string sentence)\
    \ {\n        string result = \"\";\n        string word = \"\";\n        foreach\
    \ (char c in sentence) {\n            if (char.IsLetter(c)) {\n              \
    \  word += c;\n            } else {\n                result += word;\n       \
    \         word = \"\";\n            }\n        }\n        result += word;\n  \
    \      return result;\n    }\n    public static void Main(string[] args) {\n \
    \   Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\")));\n  \
    \  Debug.Assert(WordsInSentence((\"lets go for swimming\")).Equals((\"go for\"\
    )));\n    Debug.Assert(WordsInSentence((\"there is no place available here\")).Equals((\"\
    there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi I am Hussein\"\
    )).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go for it\"\
    )).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\
    \")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n \
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <138bddfdd3d0451690ffa968a0533eb9>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <138bddfdd3d0451690ffa968a0533eb9>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660015921
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Example\
    \ 2:\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence\
    \ contains only letters\n    public static string WordsInSentence(string sentence)\
    \ {\n        string result = \"\";\n        char[] charArray = sentence.ToCharArray();\n\
    \        Array.Sort(charArray);\n        foreach (char c in charArray) {\n   \
    \         int n = Convert.ToInt32(c);\n            if (IsPrime(n)) {\n       \
    \         result += \" \" + c;\n            }\n        }\n        return result.Trim();\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"\
    This is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets\
    \ go for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"\
    there is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"\
    Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"\
    go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"\
    here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"\
    is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp53hln8d0.cs(25,17): error CS0103: The name ''IsPrime'' does not exist
    in the current context

    '
  timestamp: 1660015921
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Example\
    \ 2:\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence\
    \ contains only letters\n    public static string WordsInSentence(string sentence)\
    \ {\n        string result = \"\";\n        char[] chars = sentence.ToCharArray();\n\
    \        Array.Sort(chars);\n        bool isPrime = true;\n        for (int i\
    \ = 0; i < chars.Length; i++) {\n            int n = chars[i];\n            if\
    \ (n % 2 == 0) {\n                isPrime = false;\n                break;\n \
    \           }\n        }\n        if (isPrime) {\n            int primeCount =\
    \ 0;\n            int primeLength = 0;\n            int primeIndex = 0;\n    \
    \        int primeSum = 0;\n            int primeSum2 = 0;\n            int primeSum3\
    \ = 0;\n            int primeSum4 = 0;\n            int primeSum5 = 0;\n     \
    \       int primeSum6 = 0;\n            int primeSum7 = 0;\n            int primeSum8\
    \ = 0;\n            int primeSum9 = 0;\n            int primeSum10 = 0;\n    \
    \        int primeSum11 = 0;\n            int primeSum12 = 0;\n            int\
    \ primeSum13 = 0;\n            int primeSum14 = 0;\n            int primeSum15\
    \ = 0;\n            int primeSum16 = 0;\n            int primeSum17 = 0;\n   \
    \         int primeSum18 = 0;\n            int primeSum19 = 0;\n            int\
    \ primeSum20 = 0;\n            int primeSum21 = 0;\n            int primeSum22\
    \ = 0;\n            int primeSum23 = 0;\n            int primeSum24 = 0;\n   \
    \         int primeSum25 = 0;\n            int primeSum26 = 0;\n            int\
    \ primeSum27 = 0;\n            int primeSum28 = 0;\n            int primeSum29\
    \ = 0;\n            int primeSum30 = 0;\n            int primeSum31 = 0;\n   \
    \         int primeSum32 = 0;\n            int primeSum33 = 0;\n            int\
    \ primeSum34 = 0;\n            int primeSum35 = 0;\n            int primeSum36\
    \ = 0;\n            int primeSum37 = 0;\n            int primeSum38 = 0;\n   \
    \         int primeSum39 = 0;\n            int primeSum40 = 0;\n            int\
    \ primeSum41 = 0;\n            int primeSum42 = 0;\n            int primeSum43\
    \ = 0;\n            int primeSum44 = 0;\n            int primeSum45 = 0;\n   \
    \         int primeSum46 = 0;\n            int primeSum47 = 0;\n            int\
    \ primeSum48 = 0;\n            int primeSum49 = 0;\n            int primeSum50\
    \ = 0;\n            int primeSum51 = 0;\n            int primeSum52 = 0;\n   \
    \         int primeSum53 = 0;\n            int primeSum54 = 0;\n            int\
    \ primeSum55 = 0;\n            int primeSum56 = 0;\n            int primeSum57\
    \ = 0;\n            int primeSum58 = 0;\n            int primeSum59 = 0;\n   \
    \         int primeSum60 = 0;\n            int primeSum61 = 0;\n            int\
    \ primeSum62 = 0;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"\
    This is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets\
    \ go for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"\
    there is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"\
    Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"\
    go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"\
    here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"\
    is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpvm7uoe5q.cs(98,5): error CS0106: The modifier ''public'' is not valid
    for this item

    /tmp/tmpvm7uoe5q.cs(108,2): error CS1513: } expected

    '
  timestamp: 1660015921
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Example\
    \ 2:\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence\
    \ contains only letters\n    public static string WordsInSentence(string sentence)\
    \ {\n        string result = \"\";\n        string word = \"\";\n        bool\
    \ isPrime = true;\n        foreach (char c in sentence) {\n            if (char.IsLetter(c))\
    \ {\n                word += c;\n            } else {\n                isPrime\
    \ = false;\n            }\n        }\n        if (isPrime) {\n            int\
    \ length = word.Length;\n            int counter = 0;\n            int primeCounter\
    \ = 0;\n            int primeLength = 0;\n            int primeLengthCounter =\
    \ 0;\n            int primeLengthCounter2 = 0;\n            int primeLengthCounter3\
    \ = 0;\n            int primeLengthCounter4 = 0;\n            int primeLengthCounter5\
    \ = 0;\n            int primeLengthCounter6 = 0;\n            int primeLengthCounter7\
    \ = 0;\n            int primeLengthCounter8 = 0;\n            int primeLengthCounter9\
    \ = 0;\n            int primeLengthCounter10 = 0;\n            int primeLengthCounter11\
    \ = 0;\n            int primeLengthCounter12 = 0;\n            int primeLengthCounter13\
    \ = 0;\n            int primeLengthCounter14 = 0;\n            int primeLengthCounter15\
    \ = 0;\n            int primeLengthCounter16 = 0;\n            int primeLengthCounter17\
    \ = 0;\n            int primeLengthCounter18 = 0;\n            int primeLengthCounter19\
    \ = 0;\n            int primeLengthCounter20 = 0;\n            int primeLengthCounter21\
    \ = 0;\n            int primeLengthCounter22 = 0;\n            int primeLengthCounter23\
    \ = 0;\n            int primeLengthCounter24 = 0;\n            int primeLengthCounter25\
    \ = 0;\n            int primeLengthCounter26 = 0;\n            int primeLengthCounter27\
    \ = 0;\n            int primeLengthCounter28 = 0;\n            int primeLengthCounter29\
    \ = 0;\n            int primeLengthCounter30 = 0;\n            int primeLengthCounter31\
    \ = 0;\n            int primeLengthCounter32 = 0;\n            int primeLengthCounter33\
    \ = 0;\n            int primeLengthCounter34 = 0;\n            int primeLengthCounter35\
    \ = 0;\n            int primeLengthCounter36 = 0;\n            int primeLengthCounter37\
    \ = 0;\n            int primeLengthCounter38 = 0;\n            int primeLengthCounter39\
    \ = 0;\n            int primeLengthCounter40 = 0;\n            int primeLengthCounter41\
    \ = 0;\n            int primeLengthCounter42 = 0;\n            int primeLengthCounter43\
    \ = 0;\n            int primeLengthCounter44 = 0;\n            int primeLengthCounter45\
    \ = 0;\n            int primeLengthCounter46 = 0;\n            int primeLengthCounter47\
    \ = 0;\n            int primeLengthCounter48 = 0;\n            int primeLengthCounter49\
    \ = 0;\n            int primeLengthCounter50 = 0;\n            int primeLengthCounter51\
    \ = 0;\n            int primeLengthCounter52 = 0;\n            int primeLengthCounter53\
    \ = 0;\n            int primeLengthCounter54 = 0;\n            int primeLengthCounter55\
    \ = 0;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"\
    This is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets\
    \ go for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"\
    there is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"\
    Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"\
    go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"\
    here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"\
    is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp17okffa6.cs(91,5): error CS0106: The modifier ''public'' is not valid
    for this item

    /tmp/tmp17okffa6.cs(101,2): error CS1513: } expected

    '
  timestamp: 1660015921
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Example\
    \ 2:\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence\
    \ contains only letters\n    public static string WordsInSentence(string sentence)\
    \ {\n        string result = \"\";\n        string word = \"\";\n        bool\
    \ isPrime = true;\n        foreach (char c in sentence) {\n            int n =\
    \ Convert.ToInt32(c);\n            if (n % 2 == 0) {\n                isPrime\
    \ = false;\n            }\n        }\n        if (isPrime) {\n            int\
    \ n = Convert.ToInt32(sentence);\n            int count = 0;\n            while\
    \ (n > 1) {\n                if (n % 2 == 0) {\n                    count++;\n\
    \                }\n                n = n / 2;\n            }\n            for\
    \ (int i = 3; i <= Math.Sqrt(n); i += 2) {\n                if (n % i == 0) {\n\
    \                    count++;\n                }\n            }\n            for\
    \ (int i = 3; i <= Math.Sqrt(n); i += 2) {\n                if (n % i == 0) {\n\
    \                    count++;\n                }\n            }\n            for\
    \ (int i = 3; i <= Math.Sqrt(n); i += 2) {\n                if (n % i == 0) {\n\
    \                    count++;\n                }\n            }\n            for\
    \ (int i = 3; i <= Math.Sqrt(n); i += 2) {\n                if (n % i == 0) {\n\
    \                    count++;\n                }\n            }\n            for\
    \ (int i = 3; i <= Math.Sqrt(n); i += 2) {\n                if (n % i == 0) {\n\
    \                    count++;\n                }\n            }\n            for\
    \ (int i = 3; i <= Math.Sqrt(n); i += 2) {\n                if (n % i == 0) {\n\
    \                    count++;\n                }\n            }\n            for\
    \ (int i = 3; i <= Math.Sqrt(n); i += 2) {\n                if (n % i == 0) {\n\
    \                    count++;\n                }\n            }\n            for\
    \ (int i = 3; i <= Math.Sqrt(n); i += 2) {\n                if (n % i == 0) {\n\
    \                    count++;\n                }\n            }\n            for\
    \ (int i = 3; i <= Math.Sqrt(n); i += 2) {\n                if (n % i == 0) {\n\
    \                    count++;\n                }\n            }\n            for\
    \ (int i = 3; i <= Math.Sqrt(n); i += 2) {\n                if (n % i == 0) {\n\
    \                    count++;\n                }\n            }\n            for\
    \ (int i = 3; i <= Math.Sqrt(n); i += 2) {\n                if (n % i == 0) {\n\
    \                    count++;\n                }\n            }\n            for\
    \ (int i = 3; i <= Math.Sqrt(n); i += 2) {\n                if (n % i == 0) {\n\
    \                    count++;\n                }\n            }\n            for\
    \ (int i = 3; i <= Math.Sqrt(n); i += 2) {\n                if (n % i == 0) {\n\
    \                    count++;\n                }\n            }\n            for\
    \ (int i = 3; i <= Math.Sqrt(n); i += 2) {\n                if (n % i == 0) {\n\
    \                    count++;\n                }\n            }\n            for\
    \ (int i = 3; i <= Math.Sqrt(n); i += 2) {\n                if (n % i == 0) {\n\
    \                    count++;\n                }\n            }\n            for\
    \ (int i = 3; i <= Math.Sqrt(n); i += 2) {\n                if (\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This\
    \ is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go\
    \ for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"\
    there is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"\
    Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"\
    go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"\
    here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"\
    is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpzfvnmft3.cs(114,21): error CS1525: Invalid expression term ''}''

    /tmp/tmpzfvnmft3.cs(114,21): error CS1026: ) expected

    /tmp/tmpzfvnmft3.cs(114,21): error CS1002: ; expected

    /tmp/tmpzfvnmft3.cs(116,5): error CS0106: The modifier ''public'' is not valid
    for this item

    /tmp/tmpzfvnmft3.cs(126,2): error CS1513: } expected

    '
  timestamp: 1660015921
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Example\
    \ 2:\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence\
    \ contains only letters\n    public static string WordsInSentence(string sentence)\
    \ {\n        string result = \"\";\n        string word = \"\";\n        string\
    \ temp = \"\";\n        char[] charArray = sentence.ToCharArray();\n        Array.Sort(charArray);\n\
    \        foreach (char c in charArray) {\n            if (char.IsLetter(c)) {\n\
    \                word += c;\n            }\n        }\n        char[] charArray2\
    \ = word.ToCharArray();\n        Array.Sort(charArray2);\n        foreach (char\
    \ c in charArray2) {\n            if (char.IsLetter(c)) {\n                temp\
    \ += c;\n            }\n        }\n        char[] charArray3 = temp.ToCharArray();\n\
    \        Array.Sort(charArray3);\n        foreach (char c in charArray3) {\n \
    \           if (char.IsLetter(c)) {\n                result += c;\n          \
    \  }\n        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\"\
    )));\n    Debug.Assert(WordsInSentence((\"lets go for swimming\")).Equals((\"\
    go for\")));\n    Debug.Assert(WordsInSentence((\"there is no place available\
    \ here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"\
    Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"\
    go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"\
    here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"\
    is\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <7180f431ff9440db838e7d2b9baa5cd5>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <7180f431ff9440db838e7d2b9baa5cd5>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660015922
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Example\
    \ 2:\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence\
    \ contains only letters\n    public static string WordsInSentence(string sentence)\
    \ {\n        string result = \"\";\n        char[] charArray = sentence.ToCharArray();\n\
    \        List<int> primes = new List<int>();\n        foreach (char c in charArray)\
    \ {\n            int prime = GetPrime(c);\n            if (primes.Contains(prime))\
    \ {\n                continue;\n            }\n            primes.Add(prime);\n\
    \            result += \" \" + c;\n        }\n        return result.Trim();\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"\
    This is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets\
    \ go for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"\
    there is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"\
    Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"\
    go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"\
    here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"\
    is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp84fu8plv.cs(24,25): error CS0103: The name ''GetPrime'' does not exist
    in the current context

    '
  timestamp: 1660015921
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Example\
    \ 2:\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence\
    \ contains only letters\n    public static string WordsInSentence(string sentence)\
    \ {\n        string result = \"\";\n        char[] chars = sentence.ToCharArray();\n\
    \        HashSet<string> words = new HashSet<string>();\n        foreach (char\
    \ c in chars) {\n            if (char.IsLetter(c)) {\n                string word\
    \ = c.ToString();\n                words.Add(word);\n            }\n        }\n\
    \        foreach (string word in words) {\n            int length = word.Length;\n\
    \            if (length == 1) {\n                result += word;\n           \
    \ }\n            else if (length == 2 && IsPrime(length)) {\n                result\
    \ += word;\n            }\n            else if (length == 3 && IsPrime(length))\
    \ {\n                result += word;\n            }\n            else if (length\
    \ == 4 && IsPrime(length)) {\n                result += word;\n            }\n\
    \            else if (length == 5 && IsPrime(length)) {\n                result\
    \ += word;\n            }\n            else if (length == 6 && IsPrime(length))\
    \ {\n                result += word;\n            }\n            else if (length\
    \ == 7 && IsPrime(length)) {\n                result += word;\n            }\n\
    \            else if (length == 8 && IsPrime(length)) {\n                result\
    \ += word;\n            }\n            else if (length == 9 && IsPrime(length))\
    \ {\n                result += word;\n            }\n            else if (length\
    \ == 10 && IsPrime(length)) {\n                result += word;\n            }\n\
    \            else if (length == 11 && IsPrime(length)) {\n                result\
    \ += word;\n            }\n            else if (length == 12 && IsPrime(length))\
    \ {\n                result += word;\n            }\n            else if (length\
    \ == 13 && IsPrime(length)) {\n                result += word;\n            }\n\
    \            else if (length == 14 && IsPrime(length)) {\n                result\
    \ += word;\n            }\n            else if (length == 15 && IsPrime(length))\
    \ {\n                result += word;\n            }\n            else if (length\
    \ == 16 && IsPrime(length)) {\n                result += word;\n            }\n\
    \            else if (length == 17 && IsPrime(length)) {\n                result\
    \ += word;\n            }\n            else if (length == 18 && IsPrime(length))\
    \ {\n                result += word;\n            }\n            else if (length\
    \ == 19 && IsPrime(length)) {\n                result += word;\n            }\n\
    \            else if (length == 20 && IsPrime(length)) {\n                result\
    \ += word;\n            }\n            else if (length == 21 && IsPrime(length))\
    \ {\n                result += word;\n            }\n            else if (length\
    \ == 22 && IsPrime(length)) {\n                result += word;\n            }\n\
    \            else if (length == 23 && IsPrime(length)) {\n                result\
    \ += word\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"\
    This is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets\
    \ go for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"\
    there is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"\
    Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"\
    go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"\
    here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"\
    is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp6u5ixu7m.cs(98,31): error CS1002: ; expected

    /tmp/tmp6u5ixu7m.cs(100,5): error CS0106: The modifier ''public'' is not valid
    for this item

    /tmp/tmp6u5ixu7m.cs(110,2): error CS1513: } expected

    '
  timestamp: 1660015921
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Example\
    \ 2:\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence\
    \ contains only letters\n    public static string WordsInSentence(string sentence)\
    \ {\n        string result = \"\";\n        char[] chars = sentence.ToCharArray();\n\
    \        Array.Sort(chars);\n        foreach (char c in chars) {\n           \
    \ int len = c.ToString().Length;\n            if (len == 1) continue;\n      \
    \      if (len == 2 && c.ToString() == \"a\") continue;\n            if (len ==\
    \ 2 && c.ToString() == \"b\") continue;\n            if (len == 2 && c.ToString()\
    \ == \"c\") continue;\n            if (len == 2 && c.ToString() == \"d\") continue;\n\
    \            if (len == 2 && c.ToString() == \"e\") continue;\n            if\
    \ (len == 2 && c.ToString() == \"f\") continue;\n            if (len == 2 && c.ToString()\
    \ == \"g\") continue;\n            if (len == 2 && c.ToString() == \"h\") continue;\n\
    \            if (len == 2 && c.ToString() == \"i\") continue;\n            if\
    \ (len == 2 && c.ToString() == \"j\") continue;\n            if (len == 2 && c.ToString()\
    \ == \"k\") continue;\n            if (len == 2 && c.ToString() == \"l\") continue;\n\
    \            if (len == 2 && c.ToString() == \"m\") continue;\n            if\
    \ (len == 2 && c.ToString() == \"n\") continue;\n            if (len == 2 && c.ToString()\
    \ == \"o\") continue;\n            if (len == 2 && c.ToString() == \"p\") continue;\n\
    \            if (len == 2 && c.ToString() == \"q\") continue;\n            if\
    \ (len == 2 && c.ToString() == \"r\") continue;\n            if (len == 2 && c.ToString()\
    \ == \"s\") continue;\n            if (len == 2 && c.ToString() == \"t\") continue;\n\
    \            if (len == 2 && c.ToString() == \"u\") continue;\n            if\
    \ (len == 2 && c.ToString() == \"v\") continue;\n            if (len == 2 && c.ToString()\
    \ == \"w\") continue;\n            if (len == 2 && c.ToString() == \"x\") continue;\n\
    \            if (len == 2 && c.ToString() == \"y\") continue;\n            if\
    \ (len == 2 && c.ToString() == \"z\") continue;\n            if (len == 3 && c.ToString()\
    \ == \"aa\") continue;\n            if (len == 3 && c.ToString() == \"ab\") continue;\n\
    \            if (len == 3 && c.ToString() == \"ac\") continue;\n            if\
    \ (len == 3 && c.ToString() == \"ad\") continue;\n            if (len == 3 &&\
    \ c.ToString() == \"ae\") continue;\n            if (len == 3 && c.ToString()\
    \ == \"af\") continue;\n            if (len == 3 && c.ToString() == \"ag\") continue;\n\
    \            if (len == 3 && c.ToString() == \"ah\") continue;\n            if\
    \ (len == 3 && c.ToString() == \"ai\") continue;\n            if (len == 3 &&\
    \ c.ToString() == \"aj\") continue;\n            if (len == 3 && c.ToString()\
    \ == \"ak\") continue;\n            if (len == 3 && c.ToString() == \"al\") continue;\n\
    \            if (len == 3 && c.ToString() == \"am\") continue;\n            if\
    \ (len == 3 && c.ToString() == \"an\") continue;\n            if (len == 3 &&\
    \ c.ToString() == \"ao\") continue;\n            if (len == 3 && c.ToString()\
    \ == \"ap\") continue;\n            if (len == 3 && c.\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This is a test\"\
    )).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go for swimming\"\
    )).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there is no place\
    \ available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"\
    Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"\
    go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"\
    here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"\
    is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpdwwspi84.cs(68,31): error CS1001: Identifier expected

    /tmp/tmpdwwspi84.cs(68,31): error CS1026: ) expected

    /tmp/tmpdwwspi84.cs(68,31): error CS1525: Invalid expression term ''}''

    /tmp/tmpdwwspi84.cs(68,31): error CS1002: ; expected

    /tmp/tmpdwwspi84.cs(70,5): error CS0106: The modifier ''public'' is not valid
    for this item

    /tmp/tmpdwwspi84.cs(80,2): error CS1513: } expected

    '
  timestamp: 1660015921
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Example\
    \ 2:\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence\
    \ contains only letters\n    public static string WordsInSentence(string sentence)\
    \ {\n        string result = \"\";\n        char[] chars = sentence.ToCharArray();\n\
    \        List<string> words = new List<string>();\n        foreach (char c in\
    \ chars) {\n            if (char.IsLetter(c)) {\n                string word =\
    \ c.ToString();\n                words.Add(word);\n            }\n        }\n\
    \        foreach (string word in words) {\n            int length = word.Length;\n\
    \            if (length == 1) continue;\n            bool isPrime = true;\n  \
    \          for (int i = 2; i <= Math.Sqrt(length); i++) {\n                if\
    \ (length % i == 0) {\n                    isPrime = false;\n                \
    \    break;\n                }\n            }\n            if (isPrime) {\n  \
    \              result += word;\n            }\n        }\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"\
    This is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets\
    \ go for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"\
    there is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"\
    Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"\
    go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"\
    here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"\
    is\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <b62fb4bb13a744f08fa0e251f0c90467>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <b62fb4bb13a744f08fa0e251f0c90467>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660015922
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Example\
    \ 2:\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence\
    \ contains only letters\n    public static string WordsInSentence(string sentence)\
    \ {\n        string result = \"\";\n        char[] chars = sentence.ToCharArray();\n\
    \        Array.Sort(chars);\n        foreach (char c in chars) {\n           \
    \ int n = Convert.ToInt32(c);\n            if (IsPrime(n)) {\n               \
    \ result += c.ToString();\n            }\n        }\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"\
    This is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets\
    \ go for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"\
    there is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"\
    Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"\
    go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"\
    here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"\
    is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpy0dg9h9t.cs(25,17): error CS0103: The name ''IsPrime'' does not exist
    in the current context

    '
  timestamp: 1660015920
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Example\
    \ 2:\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence\
    \ contains only letters\n    public static string WordsInSentence(string sentence)\
    \ {\n        string result = \"\";\n        char[] chars = sentence.ToCharArray();\n\
    \        int[] primes = new int[100];\n        for (int i = 0; i < chars.Length;\
    \ i++) {\n            primes[i] = 1;\n        }\n        for (int i = 0; i < chars.Length;\
    \ i++) {\n            for (int j = 0; j < chars.Length; j++) {\n             \
    \   if (chars[i] == chars[j]) {\n                    primes[j]++;\n          \
    \      }\n            }\n        }\n        for (int i = 0; i < chars.Length;\
    \ i++) {\n            if (primes[i] != 1) {\n                result += chars[i];\n\
    \            }\n        }\n        return result;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This is a test\"\
    )).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go for swimming\"\
    )).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there is no place\
    \ available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"\
    Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"\
    go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"\
    here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"\
    is\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9dbe7b19f4e947c696765fa6486d5841>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9dbe7b19f4e947c696765fa6486d5841>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660015922
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Example\
    \ 2:\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence\
    \ contains only letters\n    public static string WordsInSentence(string sentence)\
    \ {\n        string result = \"\";\n        char[] chars = sentence.ToCharArray();\n\
    \        HashSet<string> words = new HashSet<string>();\n        foreach (char\
    \ c in chars) {\n            if (char.IsLetter(c)) {\n                string word\
    \ = c.ToString();\n                words.Add(word);\n            }\n        }\n\
    \        foreach (string word in words) {\n            int n = Convert.ToInt32(word);\n\
    \            int count = 0;\n            int i = 2;\n            while (i <= Math.Sqrt(n))\
    \ {\n                if (n % i == 0) {\n                    count++;\n       \
    \         }\n                i++;\n            }\n            if (count == 2)\
    \ {\n                result += word;\n            }\n        }\n        return\
    \ result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"\
    This is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets\
    \ go for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"\
    there is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"\
    Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"\
    go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"\
    here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"\
    is\")));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.FormatException: Input string was not in\
    \ a correct format.\n  at System.Number.ThrowOverflowOrFormatException (System.Boolean\
    \ overflow, System.String overflowResourceKey) [0x0001a] in <aa5dff9b31c64fce86559bbbf6cd364f>:0\
    \ \n  at System.Number.ParseInt32 (System.ReadOnlySpan`1[T] value, System.Globalization.NumberStyles\
    \ styles, System.Globalization.NumberFormatInfo info) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0\
    \ \n  at System.Int32.Parse (System.String s, System.IFormatProvider provider)\
    \ [0x00017] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at System.Convert.ToInt32\
    \ (System.String value) [0x0000b] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n \
    \ at Problem.WordsInSentence (System.String sentence) [0x00067] in <6850bd6a31124de6977a3ec3209f57e7>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00001] in <6850bd6a31124de6977a3ec3209f57e7>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.FormatException: Input string was\
    \ not in a correct format.\n  at System.Number.ThrowOverflowOrFormatException\
    \ (System.Boolean overflow, System.String overflowResourceKey) [0x0001a] in <aa5dff9b31c64fce86559bbbf6cd364f>:0\
    \ \n  at System.Number.ParseInt32 (System.ReadOnlySpan`1[T] value, System.Globalization.NumberStyles\
    \ styles, System.Globalization.NumberFormatInfo info) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0\
    \ \n  at System.Int32.Parse (System.String s, System.IFormatProvider provider)\
    \ [0x00017] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at System.Convert.ToInt32\
    \ (System.String value) [0x0000b] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n \
    \ at Problem.WordsInSentence (System.String sentence) [0x00067] in <6850bd6a31124de6977a3ec3209f57e7>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00001] in <6850bd6a31124de6977a3ec3209f57e7>:0\
    \ \n"
  stdout: ''
  timestamp: 1660015922
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Example\
    \ 2:\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence\
    \ contains only letters\n    public static string WordsInSentence(string sentence)\
    \ {\n        string result = \"\";\n        string words = sentence.Split(' ');\n\
    \        List<int> primes = new List<int>();\n        foreach (string word in\
    \ words) {\n            int length = word.Length;\n            int prime = 1;\n\
    \            while (prime * prime <= length) {\n                if (length ==\
    \ prime * prime) {\n                    primes.Add(prime);\n                }\n\
    \                prime++;\n            }\n        }\n        foreach (int prime\
    \ in primes) {\n            string temp = sentence.Substring(0, sentence.IndexOf(\"\
    \ \", 0));\n            int count = 0;\n            while (temp.Length > 0) {\n\
    \                if (temp.Length % prime == 0) {\n                    count++;\n\
    \                }\n                temp = temp.Substring(0, temp.Length - 1);\n\
    \            }\n            if (count == 0) {\n                result += \" \"\
    \ + word;\n            }\n        }\n        return result;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This\
    \ is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go\
    \ for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"\
    there is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"\
    Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"\
    go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"\
    here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"\
    is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp_mi1kiky.cs(21,24): error CS0029: Cannot implicitly convert type ''string[]''
    to ''string''

    /tmp/tmp_mi1kiky.cs(23,9): error CS0030: Cannot convert type ''char'' to ''string''

    /tmp/tmp_mi1kiky.cs(43,33): error CS0103: The name ''word'' does not exist in
    the current context

    '
  timestamp: 1660015922
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Example\
    \ 2:\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence\
    \ contains only letters\n    public static string WordsInSentence(string sentence)\
    \ {\n        string result = \"\";\n        string word = \"\";\n        string\
    \ word2 = \"\";\n        string word3 = \"\";\n        string word4 = \"\";\n\
    \        string word5 = \"\";\n        string word6 = \"\";\n        string word7\
    \ = \"\";\n        string word8 = \"\";\n        string word9 = \"\";\n      \
    \  string word10 = \"\";\n        string word11 = \"\";\n        string word12\
    \ = \"\";\n        string word13 = \"\";\n        string word14 = \"\";\n    \
    \    string word15 = \"\";\n        string word16 = \"\";\n        string word17\
    \ = \"\";\n        string word18 = \"\";\n        string word19 = \"\";\n    \
    \    string word20 = \"\";\n        string word21 = \"\";\n        string word22\
    \ = \"\";\n        string word23 = \"\";\n        string word24 = \"\";\n    \
    \    string word25 = \"\";\n        string word26 = \"\";\n        string word27\
    \ = \"\";\n        string word28 = \"\";\n        string word29 = \"\";\n    \
    \    string word30 = \"\";\n        string word31 = \"\";\n        string word32\
    \ = \"\";\n        string word33 = \"\";\n        string word34 = \"\";\n    \
    \    string word35 = \"\";\n        string word36 = \"\";\n        string word37\
    \ = \"\";\n        string word38 = \"\";\n        string word39 = \"\";\n    \
    \    string word40 = \"\";\n        string word41 = \"\";\n        string word42\
    \ = \"\";\n        string word43 = \"\";\n        string word44 = \"\";\n    \
    \    string word45 = \"\";\n        string word46 = \"\";\n        string word47\
    \ = \"\";\n        string word48 = \"\";\n        string word49 = \"\";\n    \
    \    string word50 = \"\";\n        string word51 = \"\";\n        string word52\
    \ = \"\";\n        string word53 = \"\";\n        string word54 = \"\";\n    \
    \    string word55 = \"\";\n        string word56 = \"\";\n        string word57\
    \ = \"\";\n        string word58 = \"\";\n        string word59 = \"\";\n    \
    \    string word60 = \"\";\n        string word61 = \"\";\n        string word62\
    \ = \"\";\n        string word63 = \"\";\n        string word64 = \"\";\n    \
    \    string word65 = \"\";\n        string word66 = \"\";\n        string word67\
    \ = \"\";\n        string word68 = \"\";\n        string word69 = \"\";\n    \
    \    string word70 = \"\";\n        string word71 = \"\";\n        string word72\
    \ = \"\";\n        string word73 = \"\";\n        string word74 = \"\";\n    \
    \    string word75 = \"\";\n        string word76 = \"\";\n        string word77\
    \ = \"\";\n        string word78 = \"\";\n        string word79 = \"\";\n    \
    \    string word80 = \"\";\n        string word81 = \"\";\n        string word8\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"\
    This is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets\
    \ go for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"\
    there is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"\
    Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"\
    go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"\
    here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"\
    is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpo3cyw5md.cs(102,21): error CS1002: ; expected

    '
  timestamp: 1660015920
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Example\
    \ 2:\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence\
    \ contains only letters\n    public static string WordsInSentence(string sentence)\
    \ {\n        string result = \"\";\n        char[] chars = sentence.ToCharArray();\n\
    \        List<string> words = new List<string>();\n        foreach (char c in\
    \ chars) {\n            if (char.IsLetter(c)) {\n                words.Add(c.ToString());\n\
    \            }\n        }\n        foreach (string word in words) {\n        \
    \    int length = word.Length;\n            bool isPrime = true;\n           \
    \ for (int i = 2; i <= Math.Sqrt(length); i++) {\n                if (length %\
    \ i == 0) {\n                    isPrime = false;\n                    break;\n\
    \                }\n            }\n            if (isPrime) {\n              \
    \  result += word;\n            }\n        }\n        return result;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"\
    This is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets\
    \ go for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"\
    there is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"\
    Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"\
    go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"\
    here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"\
    is\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <17c7ab6224d04caea806918625b533f9>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <17c7ab6224d04caea806918625b533f9>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660015922
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Example\
    \ 2:\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence\
    \ contains only letters\n    public static string WordsInSentence(string sentence)\
    \ {\n        string result = \"\";\n        string word = \"\";\n        string\
    \ temp = \"\";\n        bool isPrime = true;\n        for (int i = 0; i < sentence.Length;\
    \ i++) {\n            word = sentence.Substring(i, 1);\n            temp = word.ToUpper();\n\
    \            isPrime = true;\n            for (int j = 2; j < Math.Sqrt(temp.Length);\
    \ j++) {\n                if (temp.Substring(j, 1).Equals(\"\")) {\n         \
    \           isPrime = false;\n                    break;\n                }\n\
    \            }\n            if (isPrime) {\n                result += word;\n\
    \            }\n        }\n        return result;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This is a test\"\
    )).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go for swimming\"\
    )).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there is no place\
    \ available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"\
    Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"\
    go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"\
    here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"\
    is\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a74abc9a7ba840be864a09767a6b8902>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a74abc9a7ba840be864a09767a6b8902>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660015922
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Example\
    \ 2:\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence\
    \ contains only letters\n    public static string WordsInSentence(string sentence)\
    \ {\n        string result = \"\";\n        char[] chars = sentence.ToCharArray();\n\
    \        HashSet<string> set = new HashSet<string>();\n        foreach (char c\
    \ in chars) {\n            if (char.IsLetter(c)) {\n                string s =\
    \ c.ToString();\n                if (set.Contains(s)) {\n                    set.Remove(s);\n\
    \                } else {\n                    set.Add(s);\n                }\n\
    \            }\n        }\n        foreach (string s in set) {\n            int\
    \ count = 0;\n            foreach (char c in s) {\n                if (char.IsLetter(c))\
    \ {\n                    count++;\n                }\n            }\n        \
    \    if (count == 2) {\n                result += s + \" \";\n            }\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\"\
    )));\n    Debug.Assert(WordsInSentence((\"lets go for swimming\")).Equals((\"\
    go for\")));\n    Debug.Assert(WordsInSentence((\"there is no place available\
    \ here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"\
    Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"\
    go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"\
    here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"\
    is\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <f8bafa5d2434417781dca6b49cb762f7>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <f8bafa5d2434417781dca6b49cb762f7>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660015922
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Example\
    \ 2:\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence\
    \ contains only letters\n    public static string WordsInSentence(string sentence)\
    \ {\n        string result = \"\";\n        string word = \"\";\n        foreach\
    \ (char c in sentence) {\n            if (char.IsLetter(c)) {\n              \
    \  word += c;\n            }\n        }\n        char[] chars = word.ToCharArray();\n\
    \        List<int> primes = new List<int>();\n        foreach (char c in chars)\
    \ {\n            int n = Convert.ToInt32(c);\n            if (n % 2 == 0) {\n\
    \                primes.Add(n);\n            }\n        }\n        primes.Sort();\n\
    \        foreach (int prime in primes) {\n            int count = 0;\n       \
    \     int start = 0;\n            int end = primes.Count - 1;\n            while\
    \ (start <= end) {\n                int mid = (start + end) / 2;\n           \
    \     if (prime == primes[mid]) {\n                    count++;\n            \
    \        if (count == 2) {\n                        result = result + word.Substring(start,\
    \ mid + 1);\n                        start = mid + 1;\n                    }\n\
    \                }\n                else if (count > 2) {\n                  \
    \  start = mid + 1;\n                }\n                else {\n             \
    \       end = mid - 1;\n                }\n            }\n        }\n        return\
    \ result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"\
    This is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets\
    \ go for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"\
    there is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"\
    Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"\
    go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"\
    here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"\
    is\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <78de131439be401e8dc30cadfd363323>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <78de131439be401e8dc30cadfd363323>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660015922
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Example\
    \ 2:\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence\
    \ contains only letters\n    public static string WordsInSentence(string sentence)\
    \ {\n        string result = \"\";\n        char[] chars = sentence.ToCharArray();\n\
    \        int[] primes = new int[100];\n        bool isPrime = true;\n        for\
    \ (int i = 0; i < chars.Length; i++) {\n            int length = chars[i].Length;\n\
    \            primes[i] = 1;\n            for (int j = i + 1; j < chars.Length;\
    \ j++) {\n                if (chars[i].Equals(chars[j])) {\n                 \
    \   primes[i]++;\n                    primes[j]++;\n                }\n      \
    \      }\n            if (primes[i] < length) {\n                isPrime = false;\n\
    \            }\n        }\n        if (isPrime) {\n            for (int i = 0;\
    \ i < chars.Length; i++) {\n                result += chars[i];\n            }\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\"\
    )));\n    Debug.Assert(WordsInSentence((\"lets go for swimming\")).Equals((\"\
    go for\")));\n    Debug.Assert(WordsInSentence((\"there is no place available\
    \ here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"\
    Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"\
    go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"\
    here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"\
    is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp0m8kwmks.cs(25,35): error CS1061: ''char'' does not contain a definition
    for ''Length'' and no accessible extension method ''Length'' accepting a first
    argument of type ''char'' could be found (are you missing a using directive or
    an assembly reference?)

    '
  timestamp: 1660015922
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Example\
    \ 2:\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence\
    \ contains only letters\n    public static string WordsInSentence(string sentence)\
    \ {\n        string result = \"\";\n        char[] chars = sentence.ToCharArray();\n\
    \        List<int> primes = new List<int>();\n        foreach (char c in chars)\
    \ {\n            int n = Convert.ToInt32(c);\n            bool isPrime = true;\n\
    \            for (int i = 2; i <= Math.Sqrt(n); i++) {\n                if (n\
    \ % i == 0) {\n                    isPrime = false;\n                    break;\n\
    \                }\n            }\n            if (isPrime) {\n              \
    \  primes.Add(n);\n            }\n        }\n        foreach (int prime in primes)\
    \ {\n            string s = \"\";\n            for (int i = 0; i < chars.Length;\
    \ i++) {\n                if (chars[i] == ' ') {\n                    s += \"\
    \ \";\n                } else {\n                    s += chars[i];\n        \
    \        }\n            }\n            while (s.Length > 0) {\n              \
    \  s = s.Substring(0, s.Length - 1);\n                if (s.Length == prime) {\n\
    \                    result += s;\n                    break;\n              \
    \  }\n            }\n        }\n        return result;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This is a test\"\
    )).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go for swimming\"\
    )).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there is no place\
    \ available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"\
    Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"\
    go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"\
    here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"\
    is\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a89a8a6aad844337a4aaa029e2d6a591>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a89a8a6aad844337a4aaa029e2d6a591>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660015922
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Example\
    \ 2:\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence\
    \ contains only letters\n    public static string WordsInSentence(string sentence)\
    \ {\n        string result = \"\";\n        char[] chars = sentence.ToCharArray();\n\
    \        List<int> primes = new List<int>();\n        foreach (char c in chars)\
    \ {\n            int n = Convert.ToInt32(c);\n            if (n % 2 == 0) {\n\
    \                for (int i = 3; i * i <= n; i += 2) {\n                    if\
    \ (n % i == 0) {\n                        primes.Add(i);\n                   \
    \     break;\n                    }\n                }\n            }\n      \
    \  }\n        foreach (int p in primes) {\n            result += string.Join(\"\
    \ \", chars.Where(c => c >= 'a' && c <= 'z' && c <= 'z' + p));\n        }\n  \
    \      return result;\n    }\n    public static void Main(string[] args) {\n \
    \   Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\")));\n  \
    \  Debug.Assert(WordsInSentence((\"lets go for swimming\")).Equals((\"go for\"\
    )));\n    Debug.Assert(WordsInSentence((\"there is no place available here\")).Equals((\"\
    there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi I am Hussein\"\
    )).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go for it\"\
    )).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\
    \")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n \
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <ad8d04843f364456b40753e61ea83757>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <ad8d04843f364456b40753e61ea83757>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660015922
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Example\
    \ 2:\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence\
    \ contains only letters\n    public static string WordsInSentence(string sentence)\
    \ {\n        string result = \"\";\n        char[] chars = sentence.ToCharArray();\n\
    \        List<int> primes = new List<int>();\n        foreach (char c in chars)\
    \ {\n            int n = Convert.ToInt32(c);\n            if (n % 2 == 0) {\n\
    \                primes.Add(n);\n            }\n        }\n        primes.Sort();\n\
    \        foreach (int p in primes) {\n            int count = 0;\n           \
    \ foreach (char c in chars) {\n                if (Convert.ToInt32(c) == p) {\n\
    \                    count++;\n                }\n            }\n            if\
    \ (count == primes.Count) {\n                result += \" \" + Convert.ToInt32(p);\n\
    \            }\n        }\n        return result;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This is a test\"\
    )).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go for swimming\"\
    )).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there is no place\
    \ available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"\
    Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"\
    go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"\
    here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"\
    is\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <571308a382254b2fa046abdead79074c>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <571308a382254b2fa046abdead79074c>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660015922
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Example\
    \ 2:\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence\
    \ contains only letters\n    public static string WordsInSentence(string sentence)\
    \ {\n        string result = \"\";\n        char[] charArray = sentence.ToCharArray();\n\
    \        Array.Sort(charArray);\n        string word = \"\";\n        for (int\
    \ i = 0; i < charArray.Length; i++) {\n            if (charArray[i] == ' ') {\n\
    \                result += word;\n                word = \"\";\n            }\
    \ else {\n                word += charArray[i];\n            }\n        }\n  \
    \      result += word;\n        return result;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This is a test\"\
    )).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go for swimming\"\
    )).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there is no place\
    \ available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"\
    Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"\
    go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"\
    here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"\
    is\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <aa63ba1b3d1f414eba1c53090a0a1e8f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <aa63ba1b3d1f414eba1c53090a0a1e8f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660015922
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Example\
    \ 2:\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence\
    \ contains only letters\n    public static string WordsInSentence(string sentence)\
    \ {\n        string result = \"\";\n        string words = sentence.Split(' ');\n\
    \        foreach (string word in words) {\n            int length = word.Length;\n\
    \            bool isPrime = true;\n            for (int i = 2; i <= Math.Sqrt(length);\
    \ i++) {\n                if (length % i == 0) {\n                    isPrime\
    \ = false;\n                    break;\n                }\n            }\n   \
    \         if (isPrime) {\n                result += word + \" \";\n          \
    \  }\n        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\"\
    )));\n    Debug.Assert(WordsInSentence((\"lets go for swimming\")).Equals((\"\
    go for\")));\n    Debug.Assert(WordsInSentence((\"there is no place available\
    \ here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"\
    Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"\
    go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"\
    here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"\
    is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpfscs7rql.cs(21,24): error CS0029: Cannot implicitly convert type ''string[]''
    to ''string''

    /tmp/tmpfscs7rql.cs(22,9): error CS0030: Cannot convert type ''char'' to ''string''

    '
  timestamp: 1660015922
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Example\
    \ 2:\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence\
    \ contains only letters\n    public static string WordsInSentence(string sentence)\
    \ {\n        string result = \"\";\n        string word = \"\";\n        string\
    \ temp = \"\";\n        foreach (char c in sentence) {\n            if (char.IsLetter(c))\
    \ {\n                word += c;\n            }\n        }\n        char[] charArray\
    \ = word.ToCharArray();\n        Array.Sort(charArray);\n        foreach (char\
    \ c in charArray) {\n            temp = c + temp;\n        }\n        foreach\
    \ (char c in charArray) {\n            int count = 0;\n            int length\
    \ = temp.Length;\n            while (length > 0) {\n                if (temp[length\
    \ - 1] == c) {\n                    count++;\n                    length--;\n\
    \                }\n                else {\n                    break;\n     \
    \           }\n            }\n            if (count == 2) {\n                result\
    \ += temp;\n                temp = \"\";\n            }\n        }\n        return\
    \ result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"\
    This is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets\
    \ go for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"\
    there is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"\
    Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"\
    go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"\
    here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"\
    is\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <1af721b2aad64626b8df76409c36587e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <1af721b2aad64626b8df76409c36587e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660015922
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Example\
    \ 2:\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence\
    \ contains only letters\n    public static string WordsInSentence(string sentence)\
    \ {\n        string result = \"\";\n        string word = \"\";\n        foreach\
    \ (char c in sentence) {\n            if (char.IsLetter(c)) {\n              \
    \  word += c;\n            }\n        }\n        char[] charArray = word.ToCharArray();\n\
    \        Array.Sort(charArray);\n        string sortedWord = string.Join(\"\"\
    , charArray);\n        char[] sortedCharArray = sortedWord.ToCharArray();\n  \
    \      Array.Sort(sortedCharArray);\n        string sortedWord2 = string.Join(\"\
    \", sortedCharArray);\n        char[] sortedCharArray2 = sortedWord2.ToCharArray();\n\
    \        Array.Sort(sortedCharArray2);\n        string sortedWord3 = string.Join(\"\
    \", sortedCharArray2);\n        char[] sortedCharArray3 = sortedWord3.ToCharArray();\n\
    \        Array.Sort(sortedCharArray3);\n        string sortedWord4 = string.Join(\"\
    \", sortedCharArray3);\n        char[] sortedCharArray4 = sortedWord4.ToCharArray();\n\
    \        Array.Sort(sortedCharArray4);\n        string sortedWord5 = string.Join(\"\
    \", sortedCharArray4);\n        char[] sortedCharArray5 = sortedWord5.ToCharArray();\n\
    \        Array.Sort(sortedCharArray5);\n        string sortedWord6 = string.Join(\"\
    \", sortedCharArray5);\n        char[] sortedCharArray6 = sortedWord6.ToCharArray();\n\
    \        Array.Sort(sortedCharArray6);\n        string sortedWord7 = string.Join(\"\
    \", sortedCharArray6);\n        char[] sortedCharArray7 = sortedWord7.ToCharArray();\n\
    \        Array.Sort(sortedCharArray7);\n        string sortedWord8 = string.Join(\"\
    \", sortedCharArray7);\n        char[] sortedCharArray8 = sortedWord8.ToCharArray();\n\
    \        Array.Sort(sortedCharArray8);\n        string sortedWord9 = string.Join(\"\
    \", sortedCharArray8);\n        char[] sortedCharArray9 = sortedWord9.ToCharArray();\n\
    \        Array.Sort(sortedCharArray9);\n        string sortedWord10 = string.Join(\"\
    \", sortedCharArray9);\n        char[] sortedCharArray10 = sortedWord10.ToCharArray();\n\
    \        Array.Sort(sortedCharArray10);\n        string sortedWord11 = string.Join(\"\
    \", sortedCharArray10);\n        char[] sortedCharArray11 = sortedWord11.ToCharArray();\n\
    \        Array.Sort(sortedCharArray11);\n        string sortedWord12 = string.Join(\"\
    \", sortedCharArray11);\n        char[] sortedCharArray12 = sortedWord12.ToCharArray();\n\
    \        Array.Sort(sortedCharArray12);\n        string sorted\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This\
    \ is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go\
    \ for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"\
    there is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"\
    Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"\
    go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"\
    here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"\
    is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpevohe58k.cs(65,22): error CS1002: ; expected

    '
  timestamp: 1660015922
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Example\
    \ 2:\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence\
    \ contains only letters\n    public static string WordsInSentence(string sentence)\
    \ {\n        string result = \"\";\n        char[] chars = sentence.ToCharArray();\n\
    \        List<int> primes = new List<int>();\n        foreach (char c in chars)\
    \ {\n            int n = Convert.ToInt32(c);\n            if (n % 2 == 0) {\n\
    \                for (int i = 3; i <= Math.Sqrt(n); i += 2) {\n              \
    \      if (n % i == 0) {\n                        primes.Add(i);\n           \
    \             break;\n                    }\n                }\n            }\n\
    \        }\n        foreach (int p in primes) {\n            int count = 0;\n\
    \            foreach (char c in chars) {\n                int n = Convert.ToInt32(c);\n\
    \                if (n % p == 0) {\n                    count++;\n           \
    \     }\n            }\n            if (count == chars.Length) {\n           \
    \     result += chars.Aggregate((x, y) => x + \" \" + y);\n            }\n   \
    \     }\n        return result;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\")));\n\
    \    Debug.Assert(WordsInSentence((\"lets go for swimming\")).Equals((\"go for\"\
    )));\n    Debug.Assert(WordsInSentence((\"there is no place available here\")).Equals((\"\
    there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi I am Hussein\"\
    )).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go for it\"\
    )).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\
    \")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpf1ry1mfw.cs(43,53): error CS0029: Cannot implicitly convert type ''string''
    to ''char''

    /tmp/tmpf1ry1mfw.cs(43,53): error CS1662: Cannot convert lambda expression to
    intended delegate type because some of the return types in the block are not implicitly
    convertible to the delegate return type

    '
  timestamp: 1660015922
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Example\
    \ 2:\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence\
    \ contains only letters\n    public static string WordsInSentence(string sentence)\
    \ {\n        string result = \"\";\n        foreach (string word in sentence.Split('\
    \ '))\n        {\n            int len = word.Length;\n            if (len == 1)\n\
    \            {\n                result += word;\n            }\n            else\
    \ if (len == 2 || len == 3 || len == 5 || len == 7 || len == 11 || len == 13 ||\
    \ len == 17 || len == 19 || len == 23\n                || len == 29 || len ==\
    \ 37 || len == 41 || len == 43\n                || len == 47 || len == 53\n  \
    \              || len == 59 || len == 71)\n            {\n                result\
    \ += word;\n            }\n            else if (len == 2 || len == 3 || len ==\
    \ 5 || len == 7 || len == 11 || len == 13 || len == 17 || len == 19 || len ==\
    \ 23\n                || len == 29 || len == 37 || len == 41 || len == 43\n  \
    \              || len == 47 || len == 53\n                || len == 59 || len\
    \ == 71)\n            {\n                result += word;\n            }\n    \
    \        else if (len == 2 || len == 3 || len == 5 || len == 7 || len == 11 ||\
    \ len == 13 || len == 17 || len == 19 || len == 23\n                || len ==\
    \ 29 || len == 37 || len == 41 || len == 43\n                || len == 47 || len\
    \ == 53\n                || len == 59 || len == 71)\n            {\n         \
    \       result += word;\n            }\n            else if (len == 2 || len ==\
    \ 3 || len == 5 || len == 7 || len == 11 || len == 13 || len == 17 || len == 19\
    \ || len == 23\n                || len == 29 || len == 37 || len == 41 || len\
    \ == 43\n                || len == 47 || len == 53\n                || len ==\
    \ 59 || len == 71)\n            {\n                result += word;\n         \
    \   }\n            else if (len == 2 || len == 3 || len == 5 || len == 7 || len\
    \ == 11 || len == 13 || len == 17 || len == 19 || len == 23\n                ||\
    \ len == 29 || len == 37 || len == 41 || len == 43\n                || len ==\
    \ 47 || len == 53\n                || len == 59 || len == 71)\n            {\n\
    \                result += word;\n            }\n            else if (len == 2\
    \ || len == 3 || len == 5 || len == 7 || len == 11 || len == 13 || len == 17 ||\
    \ len == 19 || len == 23\n                || len == 29 || len == 37 || len ==\
    \ 41 || len == 43\n                || len == 47 || len == 53\n               \
    \ || len == 59 || len == 71)\n            {\n                result += word;\n\
    \            }\n\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"\
    This is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets\
    \ go for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"\
    there is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"\
    Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"\
    go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"\
    here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"\
    is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpz4u5sfz4.cs(72,5): error CS0106: The modifier ''public'' is not valid
    for this item

    /tmp/tmpz4u5sfz4.cs(82,2): error CS1513: } expected

    '
  timestamp: 1660015922
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Example\
    \ 2:\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence\
    \ contains only letters\n    public static string WordsInSentence(string sentence)\
    \ {\n        string result = \"\";\n        char[] chars = sentence.ToCharArray();\n\
    \        int[] primes = new int[100];\n        primes[0] = 2;\n        primes[1]\
    \ = 3;\n        primes[2] = 5;\n        primes[3] = 7;\n        primes[4] = 11;\n\
    \        primes[5] = 13;\n        primes[6] = 17;\n        primes[7] = 19;\n \
    \       primes[8] = 23;\n        primes[9] = 29;\n        primes[10] = 31;\n \
    \       primes[11] = 33;\n        primes[12] = 37;\n        primes[13] = 39;\n\
    \        primes[14] = 41;\n        primes[15] = 43;\n        primes[16] = 47;\n\
    \        primes[17] = 51;\n        primes[18] = 53;\n        primes[19] = 59;\n\
    \        primes[20] = 61;\n        primes[21] = 61;\n        primes[22] = 67;\n\
    \        primes[23] = 71;\n        primes[24] = 71;\n        primes[25] = 79;\n\
    \        primes[26] = 83;\n        primes[27] = 89;\n        primes[28] = 97;\n\
    \        primes[29] = 101;\n        primes[30] = 103;\n        primes[31] = 107;\
    \ \n        primes[32] = 109; \n        primes[33] = 113;\n        primes[34]\
    \ = 127;\n        primes[35] = 131;\n        primes[36] = 137;\n        primes[37]\
    \ = 139;\n        primes[38] = 149;\n        primes[39] = 151;\n        primes[40]\
    \ = 157;\n        primes[41] = 163;\n        primes[42] = 167;\n        primes[43]\
    \ = 173;\n        primes[44] = 179;\n        primes[45] = 181;\n        primes[46]\
    \ = 191;\n        primes[47] = 193;\n        primes[48] = 197;\n        primes[49]\
    \ = 199;\n        primes[50] = 211;\n        primes[51] = 213;\n        primes[52]\
    \ = 217;\n        primes[53] = 223;\n        primes[54] = 229;\n        primes[55]\
    \ = 233;\n        primes[56] = 239;\n        primes[57] = 241;\n        primes[58]\
    \ = 251;\n        primes[59] = 257;\n        primes[60] = 263;\n        primes[61]\
    \ = 269;\n        primes[62\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\")));\n\
    \    Debug.Assert(WordsInSentence((\"lets go for swimming\")).Equals((\"go for\"\
    )));\n    Debug.Assert(WordsInSentence((\"there is no place available here\")).Equals((\"\
    there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi I am Hussein\"\
    )).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go for it\"\
    )).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\
    \")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpso655ol6.cs(85,18): error CS1003: Syntax error, '']'' expected

    /tmp/tmpso655ol6.cs(85,18): error CS1002: ; expected

    '
  timestamp: 1660015922
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Example\
    \ 2:\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence\
    \ contains only letters\n    public static string WordsInSentence(string sentence)\
    \ {\n        string result = \"\";\n        string word = \"\";\n        bool\
    \ isPrime = true;\n        foreach (char c in sentence) {\n            int length\
    \ = Convert.ToInt32(c);\n            if (length == 0)\n                continue;\n\
    \            if (isPrime) {\n                isPrime = IsPrime(length);\n    \
    \        }\n            if (isPrime) {\n                word += c;\n         \
    \   }\n        }\n        if (isPrime) {\n            int length = Convert.ToInt32(word);\n\
    \            if (length == 0)\n                return result;\n            string\
    \ newWord = string.Empty;\n            int index = 0;\n            while (index\
    \ < length) {\n                string newWord = word + newWord;\n            \
    \    index++;\n            }\n            result = newWord;\n        }\n     \
    \   return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"\
    This is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets\
    \ go for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"\
    there is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"\
    Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"\
    go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"\
    here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"\
    is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpl_bi4m9i.cs(28,27): error CS0103: The name ''IsPrime'' does not exist
    in the current context

    /tmp/tmpl_bi4m9i.cs(41,24): error CS0136: A local or parameter named ''newWord''
    cannot be declared in this scope because that name is used in an enclosing local
    scope to define a local or parameter

    /tmp/tmpl_bi4m9i.cs(41,41): error CS0165: Use of unassigned local variable ''newWord''

    '
  timestamp: 1660015922
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Example\
    \ 2:\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence\
    \ contains only letters\n    public static string WordsInSentence(string sentence)\
    \ {\n        string result = \"\";\n        List<string> words = new List<string>();\n\
    \        foreach (string word in sentence.Split(' '))\n        {\n           \
    \ words.Add(word);\n        }\n        List<int> primes = new List<int>();\n \
    \       foreach (string word in words)\n        {\n            int length = word.Length;\n\
    \            int prime = 1;\n            while (length != 1)\n            {\n\
    \                if (length%2 == 0)\n                {\n                    prime\
    \ = prime * 2;\n                }\n                else\n                {\n \
    \                   prime = prime * 3;\n                }\n                length\
    \ = length / 2;\n            }\n            primes.Add(prime);\n        }\n  \
    \      foreach (int prime in primes)\n        {\n            bool isPrime = true;\n\
    \            foreach (string word in words)\n            {\n                if\
    \ (word.Length == prime)\n                {\n                    isPrime = false;\n\
    \                    break;\n                }\n            }\n            if\
    \ (isPrime)\n            {\n                result += string.Join(\" \", words);\n\
    \            }\n        }\n        return result;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This is a test\"\
    )).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go for swimming\"\
    )).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there is no place\
    \ available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"\
    Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"\
    go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"\
    here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"\
    is\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <69cad8ceac304827a3d37d9ba22784fd>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <69cad8ceac304827a3d37d9ba22784fd>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660015922
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Example\
    \ 2:\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence\
    \ contains only letters\n    public static string WordsInSentence(string sentence)\
    \ {\n        string result = \"\";\n        char[] chars = sentence.ToCharArray();\n\
    \        int[] primes = new int[100];\n        primes[0] = 2;\n        primes[1]\
    \ = 3;\n        primes[2] = 5;\n        primes[3] = 7;\n        primes[4] = 11;\n\
    \        primes[5] = 13;\n        primes[6] = 17;\n        primes[7] = 19;\n \
    \       primes[8] = 23;\n        primes[9] = 29;\n        primes[10] = 31;\n \
    \       primes[11] = 37;\n        primes[12] = 41;\n        primes[13] = 43;\n\
    \        primes[14] = 59;\n        primes[15] = 61;\n        primes[16] = 67;\n\
    \        primes[17] = 71;\n        primes[18] = 73 / 2;\n        primes[19] =\
    \ 79;\n        primes[20] = 83;\n        primes[21] = 89;\n        primes[22]\
    \ = 97;\n        primes[23] = 101;\n        primes[24] = 103;\n        primes[25]\
    \ = 107;\n        primes[26] = 113;\n        primes[27] = 119;\n        primes[28]\
    \ = 127;\n        primes[29] = 131;\n        primes[30] = 133;\n        primes[31]\
    \ = 137;\n        primes[32] = 139;\n        primes[33] = 143;\n        primes[34]\
    \ = 147;\n        primes[35] = 151;\n        primes[36] = 153;\n        primes[37]\
    \ = 157;\n        primes[38] = 163;\n        primes[39] = 167;\n        primes[40]\
    \ = 173;\n        primes[41] = 179;\n        primes[42] = 181;\n        primes[43]\
    \ = 191;\n        primes[44] = 193;\n        primes[45] = 197;\n        primes[46]\
    \ = 199;\n        primes[47] = 201;\n        primes[48] = 203;\n        primes[49]\
    \ = 211;\n        primes[50] = 223;\n        primes[51] = 221;\n        primes[52]\
    \ = 223;\n        primes[53] = 223;\n        primes[54] = 223;\n        primes[55]\
    \ = 223;\n        primes[56] = 223;\n        primes[57] = 223;\n        primes[58]\
    \ = 223;\n        primes[59] = 223;\n        primes[60] = 223;\n        primes[61]\
    \ = 223;\n        prime\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\")));\n \
    \   Debug.Assert(WordsInSentence((\"lets go for swimming\")).Equals((\"go for\"\
    )));\n    Debug.Assert(WordsInSentence((\"there is no place available here\")).Equals((\"\
    there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi I am Hussein\"\
    )).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go for it\"\
    )).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\
    \")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpo34jmris.cs(85,14): error CS1002: ; expected

    '
  timestamp: 1660015922
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Example\
    \ 2:\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence\
    \ contains only letters\n    public static string WordsInSentence(string sentence)\
    \ {\n        string result = \"\";\n        string word = \"\";\n        string\
    \ temp = \"\";\n        bool isPrime = true;\n        for (int i = 0; i < sentence.Length;\
    \ i++) {\n            word = sentence.Substring(i, 1);\n            temp = word.ToUpper();\n\
    \            isPrime = true;\n            for (int j = 2; j < temp.Length; j++)\
    \ {\n                if (temp.Substring(j, 1).Equals(temp.Substring(j - 1, 1)))\
    \ {\n                    isPrime = false;\n                    break;\n      \
    \          }\n            }\n            if (isPrime) {\n                result\
    \ += \" \" + word;\n            }\n        }\n        return result;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"\
    This is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets\
    \ go for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"\
    there is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"\
    Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"\
    go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"\
    here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"\
    is\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <ec2b58c6829f40989ce9834dedf13d57>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <ec2b58c6829f40989ce9834dedf13d57>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660015922
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Example\
    \ 2:\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence\
    \ contains only letters\n    public static string WordsInSentence(string sentence)\
    \ {\n        string result = \"\";\n        string word = \"\";\n        bool\
    \ isPrime = true;\n        for (int i = 0; i < sentence.Length; i++) {\n     \
    \       word = sentence.Substring(i, 1);\n            isPrime = true;\n      \
    \      for (int j = i + 1; j < sentence.Length; j++) {\n                if (IsPrime(j\
    \ - i)) {\n                    isPrime = false;\n                    break;\n\
    \                }\n            }\n            if (isPrime) {\n              \
    \  result += \" \" + word;\n            }\n        }\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"\
    This is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets\
    \ go for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"\
    there is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"\
    Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"\
    go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"\
    here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"\
    is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmprnk7cx0z.cs(27,21): error CS0103: The name ''IsPrime'' does not exist
    in the current context

    '
  timestamp: 1660015922
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Example\
    \ 2:\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence\
    \ contains only letters\n    public static string WordsInSentence(string sentence)\
    \ {\n        string result = \"\";\n        string word = \"\";\n        bool\
    \ isPrime = true;\n        int n = sentence.Length;\n        char[] charArray\
    \ = sentence.ToCharArray();\n        Array.Sort(charArray);\n        for (int\
    \ i = 0; i < n; i++) {\n            word = charArray[i].ToString();\n        \
    \    int count = 0;\n            while (count < n / 2) {\n                if (IsPrime(word.Length))\
    \ {\n                    isPrime = true;\n                    break;\n       \
    \         }\n                isPrime = false;\n                count++;\n    \
    \        }\n            if (isPrime) {\n                result += word;\n    \
    \        }\n        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\"\
    )));\n    Debug.Assert(WordsInSentence((\"lets go for swimming\")).Equals((\"\
    go for\")));\n    Debug.Assert(WordsInSentence((\"there is no place available\
    \ here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"\
    Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"\
    go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"\
    here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"\
    is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpnc8n7now.cs(30,21): error CS0103: The name ''IsPrime'' does not exist
    in the current context

    '
  timestamp: 1660015922
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Example\
    \ 2:\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence\
    \ contains only letters\n    public static string WordsInSentence(string sentence)\
    \ {\n        string result = \"\";\n        string word = \"\";\n        string\
    \ temp = \"\";\n        char[] charArray = sentence.ToCharArray();\n        List<int>\
    \ primes = new List<int>();\n        foreach (char c in charArray) {\n       \
    \     int n = Convert.ToInt32(c);\n            if (n % 2 == 0) {\n           \
    \     primes.Add(n);\n            }\n        }\n        primes.Sort();\n     \
    \   foreach (int prime in primes) {\n            temp = temp + Convert.ToString(prime);\n\
    \        }\n        temp = temp + \" \";\n        foreach (char c in charArray)\
    \ {\n            int n = Convert.ToInt32(c);\n            if (n % 2 == 0) {\n\
    \                temp = temp + Convert.ToString(primes.IndexOf(n));\n        \
    \    }\n        }\n        result = temp;\n        return result;\n    }\n   \
    \ public static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"\
    This is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets\
    \ go for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"\
    there is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"\
    Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"\
    go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"\
    here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"\
    is\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <553888d927ca4492aeaa454fda1b0b57>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <553888d927ca4492aeaa454fda1b0b57>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660015922
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Example\
    \ 2:\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence\
    \ contains only letters\n    public static string WordsInSentence(string sentence)\
    \ {\n        string result = \"\";\n        char[] chars = sentence.ToCharArray();\n\
    \        int[] primes = new int[100];\n        primes[0] = 2;\n        primes[1]\
    \ = 3;\n        primes[2] = 5;\n        primes[3] = 7;\n        primes[4] = 11;\n\
    \        primes[5] = 13;\n        primes[6] = 17;\n        primes[7] = 19;\n \
    \       primes[8] = 23;\n        primes[9] = 29;\n        primes[10] = 31;\n \
    \       primes[11] = 37;\n        primes[12] = 41;\n        primes[13] = 43;\n\
    \        primes[14] = 59;\n        primes[15] = 61;\n        primes[16] = 67;\n\
    \        primes[17] = 71;\n        primes[18] = 73 // ...\n        primes[19]\
    \ = 79;\n        primes[20] = 83;\n        primes[21] = 89;\n        primes[22]\
    \ = 97;\n        primes[23] = 101;\n        primes[24] = 103;\n        primes[25]\
    \ = 107;\n        primes[26] = 113;\n        primes[27] = 119;\n        primes[28]\
    \ = 127;\n        primes[29] = 131;\n        primes[30] = 133;\n        primes[31]\
    \ = 137;\n        primes[32] = 139;\n        primes[33] = 143;\n        primes[34]\
    \ = 147;\n        primes[35] = 151;\n        primes[36] = 153;\n        primes[37]\
    \ = 157;\n        primes[38] = 163;\n        primes[39] = 167;\n        primes[40]\
    \ = 173;\n        primes[41] = 179;\n        primes[42] = 181;\n        primes[43]\
    \ = 191;\n        primes[44] = 193;\n        primes[45] = 197;\n        primes[46]\
    \ = 199;\n        primes[47] = 203;\n        primes[48] = 207;\n        primes[49]\
    \ = 211;\n        primes[50] = 223;\n        primes[51] = 221;\n        primes[52]\
    \ = 229;\n        primes[53] = 233;\n        primes[54] = 239;\n        primes[55]\
    \ = 241;\n        primes[56] = 251;\n        primes[57] = 257;\n        primes[58]\
    \ = 263;\n        primes[59] = 269;\n        primes[60] = 271;\n        primes[61]\
    \ = 277;\n        prime\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\")));\n \
    \   Debug.Assert(WordsInSentence((\"lets go for swimming\")).Equals((\"go for\"\
    )));\n    Debug.Assert(WordsInSentence((\"there is no place available here\")).Equals((\"\
    there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi I am Hussein\"\
    )).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go for it\"\
    )).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\
    \")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpat5pc0rn.cs(41,24): error CS1002: ; expected

    /tmp/tmpat5pc0rn.cs(85,14): error CS1002: ; expected

    '
  timestamp: 1660015922
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Example\
    \ 2:\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence\
    \ contains only letters\n    public static string WordsInSentence(string sentence)\
    \ {\n        string result = \"\";\n        string word = \"\";\n        string\
    \ temp = \"\";\n        char[] charArray = sentence.ToCharArray();\n        foreach\
    \ (char c in charArray) {\n            if (char.IsLetter(c)) {\n             \
    \   word += c;\n            }\n        }\n        char[] charArray2 = word.ToCharArray();\n\
    \        foreach (char c in charArray2) {\n            if (char.IsLetter(c)) {\n\
    \                temp += c;\n            }\n        }\n        char[] charArray3\
    \ = temp.ToCharArray();\n        foreach (char c in charArray3) {\n          \
    \  if (char.IsLetter(c)) {\n                result += c;\n            }\n    \
    \    }\n        return result;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\")));\n\
    \    Debug.Assert(WordsInSentence((\"lets go for swimming\")).Equals((\"go for\"\
    )));\n    Debug.Assert(WordsInSentence((\"there is no place available here\")).Equals((\"\
    there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi I am Hussein\"\
    )).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go for it\"\
    )).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\
    \")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n \
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a1fb07a90dcd424f960a6ad6f6b8f59b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a1fb07a90dcd424f960a6ad6f6b8f59b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660015923
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Example\
    \ 2:\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence\
    \ contains only letters\n    public static string WordsInSentence(string sentence)\
    \ {\n        string result = \"\";\n        char[] chars = sentence.ToCharArray();\n\
    \        Array.Sort(chars);\n        string word = \"\";\n        for (int i =\
    \ 0; i < chars.Length; i++) {\n            if (chars[i] == ' ') {\n          \
    \      result += word;\n                word = \"\";\n            } else {\n \
    \               word += chars[i];\n            }\n        }\n        result +=\
    \ word;\n        return result;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\")));\n\
    \    Debug.Assert(WordsInSentence((\"lets go for swimming\")).Equals((\"go for\"\
    )));\n    Debug.Assert(WordsInSentence((\"there is no place available here\")).Equals((\"\
    there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi I am Hussein\"\
    )).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go for it\"\
    )).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\
    \")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n \
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <7bfcb58fce59472291c20232d5e5e8db>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <7bfcb58fce59472291c20232d5e5e8db>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660015923
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Example\
    \ 2:\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence\
    \ contains only letters\n    public static string WordsInSentence(string sentence)\
    \ {\n        string result = \"\";\n        List<string> words = new List<string>();\n\
    \        foreach (char c in sentence) {\n            if (char.IsLetter(c)) {\n\
    \                words.Add(c.ToString());\n            }\n        }\n        foreach\
    \ (string word in words) {\n            int length = word.Length;\n          \
    \  if (length == 1) {\n                result += \"1\";\n            } else if\
    \ (length == 2 && word.StartsWith(\"a\") && word.EndsWith(\"a\")) {\n        \
    \        result += \"2\";\n            } else if (length == 2 && word.StartsWith(\"\
    b\") && word.EndsWith(\"b\")) {\n                result += \"3\";\n          \
    \  } else if (length == 2 && word.StartsWith(\"c\") && word.EndsWith(\"c\")) {\n\
    \                result += \"4\";\n            } else if (length == 2 && word.StartsWith(\"\
    d\") && word.EndsWith(\"d\")) {\n                result += \"5\";\n          \
    \  } else if (length == 2 && word.StartsWith(\"e\") && word.EndsWith(\"e\")) {\n\
    \                result += \"6\";\n            } else if (length == 2 && word.StartsWith(\"\
    f\") && word.EndsWith(\"f\")) {\n                result += \"7\";\n          \
    \  } else if (length == 2 && word.StartsWith(\"g\") && word.EndsWith(\"g\")) {\n\
    \                result += \"8\";\n            } else if (length == 2 && word.StartsWith(\"\
    h\") && word.EndsWith(\"h\")) {\n                result += \"9\";\n          \
    \  } else if (length == 2 && word.StartsWith(\"i\") && word.EndsWith(\"i\")) {\n\
    \                result += \"10\";\n            } else if (length == 2 && word.StartsWith(\"\
    j\") && word.EndsWith(\"j\")) {\n                result += \"11\";\n         \
    \   } else if (length == 2 && word.StartsWith(\"k\") && word.EndsWith(\"k\"))\
    \ {\n                result += \"12\";\n            } else if (length == 2 &&\
    \ word.StartsWith(\"l\") && word.EndsWith(\"l\")) {\n                result +=\
    \ \"13\";\n            } else if (length == 2 && word.StartsWith(\"m\") && word.EndsWith(\"\
    m\")) {\n                result += \"14\";\n            } else if (length == 2\
    \ && word.StartsWith(\"n\") && word.EndsWith(\"n\")) {\n                result\
    \ += \"15\";\n            } else if (length == 2 && word.StartsWith(\"o\") &&\
    \ word.EndsWith(\"o\")) {\n                result += \"16\";\n            } else\
    \ if (length == 2 && word.StartsWith(\"p\") && word.EndsWith(\"p\")) {\n     \
    \           result += \"17\";\n            } else if (length == 2 && word.StartsWith(\"\
    q\") && word.EndsWith(\"q\")) {\n                result += \"18\";\n         \
    \   } else if (length == 2 && word.StartsWith(\"r\") && word.EndsWith(\"r\"))\
    \ {\n                result += \"\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\"\
    )));\n    Debug.Assert(WordsInSentence((\"lets go for swimming\")).Equals((\"\
    go for\")));\n    Debug.Assert(WordsInSentence((\"there is no place available\
    \ here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"\
    Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"\
    go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"\
    here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"\
    is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpe4wdkbl3.cs(66,27): error CS1010: Newline in constant

    /tmp/tmpe4wdkbl3.cs(66,28): error CS1002: ; expected

    /tmp/tmpe4wdkbl3.cs(68,5): error CS0106: The modifier ''public'' is not valid
    for this item

    /tmp/tmpe4wdkbl3.cs(78,2): error CS1513: } expected

    '
  timestamp: 1660015922
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Example\
    \ 2:\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence\
    \ contains only letters\n    public static string WordsInSentence(string sentence)\
    \ {\n        string result = \"\";\n        char[] charArray = sentence.ToCharArray();\n\
    \        List<string> words = new List<string>();\n        foreach (char c in\
    \ charArray) {\n            if (char.IsLetter(c)) {\n                string word\
    \ = c.ToString();\n                words.Add(word);\n            }\n        }\n\
    \        foreach (string word in words) {\n            int length = word.Length;\n\
    \            if (length == 1) {\n                result += word;\n           \
    \ }\n            else if (length == 2 && word.StartsWith(\"a\")\n            \
    \    || length == 2 && word.StartsWith(\"e\")\n                || length == 2\
    \ && word.StartsWith(\"i\")\n                || length == 2 && word.StartsWith(\"\
    o\")\n                || length == 2 && word.StartsWith(\"u\")\n             \
    \   || length == 3 && word.StartsWith(\"a\")\n                || length == 3 &&\
    \ word.StartsWith(\"e\")\n                || length == 3 && word.StartsWith(\"\
    i\")\n                || length == 3 && word.StartsWith(\"o\")\n             \
    \   || length == 3 && word.StartsWith(\"u\")\n                || length == 4 &&\
    \ word.StartsWith(\"a\")\n                || length == 4 && word.StartsWith(\"\
    e\")\n                || length == 4 && word.StartsWith(\"i\")\n             \
    \   || length == 4 && word.StartsWith(\"o\")\n                || length == 4 &&\
    \ word.StartsWith(\"u\")\n                || length == 5 && word.StartsWith(\"\
    a\")\n                || length == 5 && word.StartsWith(\"e\")\n             \
    \   || length == 5 && word.StartsWith(\"i\")\n                || length == 5 &&\
    \ word.StartsWith(\"o\")\n                || length == 5 && word.StartsWith(\"\
    u\")\n                || length == 6 && word.StartsWith(\"a\")\n             \
    \   || length == 6 && word.StartsWith(\"e\")\n                || length == 6 &&\
    \ word.StartsWith(\"i\")\n                || length == 6 && word.StartsWith(\"\
    o\")\n                || length == 6 && word.StartsWith(\"u\")\n             \
    \   || length == 7 && word.StartsWith(\"a\")\n                || length == 7 &&\
    \ word.StartsWith(\"e\")\n                || length == 7 && word.StartsWith(\"\
    i\")\n                || length == 7 && word.StartsWith(\"o\")\n             \
    \   || length == 7 && word.StartsWith(\"u\")\n                || length == 8 &&\
    \ word.StartsWith(\"a\")\n                || length == 8 && word.StartsWith(\"\
    e\")\n                || length == 8 && word.StartsWith(\"i\")\n             \
    \   || length == 8 \n    }\n    public static void Main(string[] args) {\n   \
    \ Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"\
    lets go for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"\
    there is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"\
    Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"\
    go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"\
    here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"\
    is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpe_ik8paf.cs(67,31): error CS1026: ) expected

    /tmp/tmpe_ik8paf.cs(67,31): error CS1525: Invalid expression term ''}''

    /tmp/tmpe_ik8paf.cs(67,31): error CS1002: ; expected

    /tmp/tmpe_ik8paf.cs(69,5): error CS0106: The modifier ''public'' is not valid
    for this item

    /tmp/tmpe_ik8paf.cs(79,2): error CS1513: } expected

    '
  timestamp: 1660015922
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Example\
    \ 2:\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence\
    \ contains only letters\n    public static string WordsInSentence(string sentence)\
    \ {\n        string result = \"\";\n        foreach (string word in sentence.Split('\
    \ '))\n        {\n            int length = word.Length;\n            if (IsPrime(length))\n\
    \            {\n                result += word;\n            }\n        }\n  \
    \      return result;\n    }\n    public static void Main(string[] args) {\n \
    \   Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\")));\n  \
    \  Debug.Assert(WordsInSentence((\"lets go for swimming\")).Equals((\"go for\"\
    )));\n    Debug.Assert(WordsInSentence((\"there is no place available here\")).Equals((\"\
    there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi I am Hussein\"\
    )).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go for it\"\
    )).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\
    \")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp1486vcnu.cs(24,17): error CS0103: The name ''IsPrime'' does not exist
    in the current context

    '
  timestamp: 1660015921
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Example\
    \ 2:\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence\
    \ contains only letters\n    public static string WordsInSentence(string sentence)\
    \ {\n        string result = \"\";\n        char[] chars = sentence.ToCharArray();\n\
    \        int[] primes = new int[100];\n        primes[0] = 2;\n        primes[1]\
    \ = 3;\n        primes[2] = 5;\n        primes[3] = 7;\n        primes[4] = 11;\n\
    \        primes[5] = 13;\n        primes[6] = 17;\n        primes[7] = 19;\n \
    \       primes[8] = 23;\n        primes[9] = 29;\n        primes[10] = 31;\n \
    \       primes[11] = 37;\n        primes[12] = 41;\n        primes[13] = 43;\n\
    \        primes[14] = 59;\n        primes[15] = 61;\n        primes[16] = 67;\n\
    \        primes[17] = 71;\n        primes[18] = 73 // ...\n        primes[19]\
    \ = 79;\n        primes[20] = 83;\n        primes[21] = 89;\n        primes[22]\
    \ = 97;\n        primes[23] = 101;\n        primes[24] = 103;\n        primes[25]\
    \ = 107;\n        primes[26] = 113;\n        primes[27] = 119;\n        primes[28]\
    \ = 127;\n        primes[29] = 131;\n        primes[30] = 137;\n        primes[31]\
    \ = 139;\n        primes[32] = 143;\n        primes[33] = 147;\n        primes[34]\
    \ = 151;\n        primes[35] = 157;\n        primes[36] = 163;\n        primes[37]\
    \ = 169;\n        primes[38] = 173;\n        primes[39] = 179;\n        primes[40]\
    \ = 181;\n        primes[41] = 187;\n        primes[42] = 191;\n        primes[43]\
    \ = 193;\n        primes[44] = 197;\n        primes[45] = 199;\n        primes[46]\
    \ = 203;\n        primes[47] = 207;\n        primes[48] = 211;\n        primes[49]\
    \ = 217;\n        primes[50] = 223;\n        primes[51] = 229;\n        primes[52]\
    \ = 233;\n        primes[53] = 239;\n        primes[54] = 241;\n        primes[55]\
    \ = 247;\n        primes[56] = 251;\n        primes[57] = 257;\n        primes[58]\
    \ = 263;\n        primes[59] = 269;\n        primes[60] = 271;\n        primes[61]\
    \ = 277;\n        primes[\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\")));\n \
    \   Debug.Assert(WordsInSentence((\"lets go for swimming\")).Equals((\"go for\"\
    )));\n    Debug.Assert(WordsInSentence((\"there is no place available here\")).Equals((\"\
    there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi I am Hussein\"\
    )).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go for it\"\
    )).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\
    \")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpi2vp0qdd.cs(41,24): error CS1002: ; expected

    /tmp/tmpi2vp0qdd.cs(85,16): error CS1003: Syntax error, '']'' expected

    /tmp/tmpi2vp0qdd.cs(85,16): error CS1002: ; expected

    '
  timestamp: 1660015922
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Example\
    \ 2:\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence\
    \ contains only letters\n    public static string WordsInSentence(string sentence)\
    \ {\n        string result = \"\";\n        string temp = \"\";\n        bool\
    \ isPrime = true;\n        string temp2 = \"\";\n        foreach (char c in sentence)\
    \ {\n            int n = Convert.ToInt32(c);\n            if (n % 2 == 0) {\n\
    \                isPrime = false;\n            }\n        }\n        if (isPrime)\
    \ {\n            int n = Convert.ToInt32(sentence);\n            int count = 0;\n\
    \            int i = 2;\n            while (i <= n) {\n                if (n %\
    \ i == 0) {\n                    count++;\n                }\n               \
    \ i++;\n            }\n            if (count == 2) {\n                for (int\
    \ i = 1; i <= n; i++) {\n                    if (n % i == 0) {\n             \
    \           temp2 = temp2 + \" \" + i;\n                    }\n              \
    \  }\n                temp = temp + temp2;\n            }\n        }\n       \
    \ return temp;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"\
    This is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets\
    \ go for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"\
    there is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"\
    Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"\
    go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"\
    here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"\
    is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpvjxegxpu.cs(41,26): error CS0136: A local or parameter named ''i'' cannot
    be declared in this scope because that name is used in an enclosing local scope
    to define a local or parameter

    /tmp/tmpvjxegxpu.cs(20,16): warning CS0219: The variable ''result'' is assigned
    but its value is never used

    '
  timestamp: 1660015923
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Example\
    \ 2:\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence\
    \ contains only letters\n    public static string WordsInSentence(string sentence)\
    \ {\n        string result = \"\";\n        char[] chars = sentence.ToCharArray();\n\
    \        Array.Sort(chars);\n        List<int> primes = new List<int>();\n   \
    \     for (int i = 0; i < chars.Length; i++) {\n            int prime = IsPrime(chars[i]);\n\
    \            if (prime == 0) {\n                primes.Add(chars[i]);\n      \
    \      }\n        }\n        foreach (int prime in primes) {\n            result\
    \ += \" \" + prime;\n        }\n        return result;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This is a test\"\
    )).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go for swimming\"\
    )).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there is no place\
    \ available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"\
    Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"\
    go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"\
    here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"\
    is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp0o_rtesz.cs(25,25): error CS0103: The name ''IsPrime'' does not exist
    in the current context

    '
  timestamp: 1660015923
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Example\
    \ 2:\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence\
    \ contains only letters\n    public static string WordsInSentence(string sentence)\
    \ {\n        string result = \"\";\n        string word = \"\";\n        string\
    \ word2 = \"\";\n        string word3 = \"\";\n        string word4 = \"\";\n\
    \        string word5 = \"\";\n        string word6 = \"\";\n        string word7\
    \ = \"\";\n        string word8 = \"\";\n        string word9 = \"\";\n      \
    \  string word10 = \"\";\n        string word11 = \"\";\n        string word12\
    \ = \"\";\n        string word13 = \"\";\n        string word14 = \"\";\n    \
    \    string word15 = \"\";\n        string word16 = \"\";\n        string word17\
    \ = \"\";\n        string word18 = \"\";\n        string word19 = \"\";\n    \
    \    string word20 = \"\";\n        string word21 = \"\";\n        string word22\
    \ = \"\";\n        string word23 = \"\";\n        string word24 = \"\";\n    \
    \    string word25 = \"\";\n        string word26 = \"\";\n        string word27\
    \ = \"\";\n        string word28 = \"\";\n        string word29 = \"\";\n    \
    \    string word30 = \"\";\n        string word31 = \"\";\n        string word32\
    \ = \"\";\n        string word33 = \"\";\n        string word34 = \"\";\n    \
    \    string word35 = \"\";\n        string word36 = \"\";\n        string word37\
    \ = \"\";\n        string word38 = \"\";\n        string word39 = \"\";\n    \
    \    string word40 = \"\";\n        string word41 = \"\";\n        string word42\
    \ = \"\";\n        string word43 = \"\";\n        string word44 = \"\";\n    \
    \    string word45 = \"\";\n        string word46 = \"\";\n        string word47\
    \ = \"\";\n        string word48 = \"\";\n        string word49 = \"\";\n    \
    \    string word50 = \"\";\n        string word51 = \"\";\n        string word52\
    \ = \"\";\n        string word53 = \"\";\n        string word54 = \"\";\n    \
    \    string word55 = \"\";\n        string word56 = \"\";\n        string word57\
    \ = \"\";\n        string word58 = \"\";\n        string word59 = \"\";\n    \
    \    string word60 = \"\";\n        string word61 = \"\";\n        string word62\
    \ = \"\";\n        string word63 = \"\";\n        string word64 = \"\";\n    \
    \    string word65 = \"\";\n        string word66 = \"\";\n        string word67\
    \ = \"\";\n        string word68 = \"\";\n        string word69 = \"\";\n    \
    \    string word70 = \"\";\n        string word71 = \"\";\n        string word72\
    \ = \"\";\n        string word73 = \"\";\n        string word74 = \"\";\n    \
    \    string word75 = \"\";\n        string word76 = \"\";\n        string word77\
    \ = \"\";\n        string word78 = \"\";\n        string word79 = \"\";\n    \
    \    string word80 = \"\";\n        string word81 = \"\";\n        string word8\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"\
    This is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets\
    \ go for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"\
    there is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"\
    Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"\
    go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"\
    here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"\
    is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpo3cyw5md.cs(102,21): error CS1002: ; expected

    '
  timestamp: 1660015920
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Example\
    \ 2:\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence\
    \ contains only letters\n    public static string WordsInSentence(string sentence)\
    \ {\n        string result = \"\";\n        char[] chars = sentence.ToCharArray();\n\
    \        List<int> primes = new List<int>();\n        foreach (char c in chars)\
    \ {\n            int n = Convert.ToInt32(c);\n            bool isPrime = true;\n\
    \            for (int i = 2; i <= n / 2; i++) {\n                if (n % i ==\
    \ 0) {\n                    isPrime = false;\n                    break;\n   \
    \             }\n            }\n            if (isPrime) {\n                primes.Add(n);\n\
    \            }\n        }\n        foreach (int p in primes) {\n            result\
    \ += string.Join(\" \", chars.Where(c => Convert.ToInt32(c) == p).ToArray());\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\"\
    )));\n    Debug.Assert(WordsInSentence((\"lets go for swimming\")).Equals((\"\
    go for\")));\n    Debug.Assert(WordsInSentence((\"there is no place available\
    \ here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"\
    Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"\
    go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"\
    here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"\
    is\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <fa1627885a384f3080042c77ccc71d81>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <fa1627885a384f3080042c77ccc71d81>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660015923
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Example\
    \ 2:\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence\
    \ contains only letters\n    public static string WordsInSentence(string sentence)\
    \ {\n        string result = \"\";\n        char[] chars = sentence.ToCharArray();\n\
    \        HashSet<string> words = new HashSet<string>();\n        foreach (char\
    \ c in chars) {\n            if (char.IsLetter(c)) {\n                string word\
    \ = c.ToString();\n                words.Add(word);\n            }\n        }\n\
    \        foreach (string word in words) {\n            int length = word.Length;\n\
    \            bool isPrime = true;\n            for (int i = 2; i <= Math.Sqrt(length);\
    \ i++) {\n                if (length % i == 0) {\n                    isPrime\
    \ = false;\n                    break;\n                }\n            }\n   \
    \         if (isPrime) {\n                result += word + \" \";\n          \
    \  }\n        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\"\
    )));\n    Debug.Assert(WordsInSentence((\"lets go for swimming\")).Equals((\"\
    go for\")));\n    Debug.Assert(WordsInSentence((\"there is no place available\
    \ here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"\
    Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"\
    go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"\
    here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"\
    is\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <6dff44bb1ecd467ba397b6c7537a25a2>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <6dff44bb1ecd467ba397b6c7537a25a2>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660015921
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Example\
    \ 2:\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence\
    \ contains only letters\n    public static string WordsInSentence(string sentence)\
    \ {\n        string result = \"\";\n        char[] chars = sentence.ToCharArray();\n\
    \        List<int> primes = new List<int>();\n        foreach (char c in chars)\
    \ {\n            int n = Convert.ToInt32(c);\n            if (n % 2 == 0) {\n\
    \                primes.Add(n);\n            }\n        }\n        primes.Sort();\n\
    \        for (int i = 0; i < primes.Count; i++) {\n            if (primes[i] ==\
    \ primes.Count - 1) {\n                result += chars[i];\n            }\n  \
    \      }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\"\
    )));\n    Debug.Assert(WordsInSentence((\"lets go for swimming\")).Equals((\"\
    go for\")));\n    Debug.Assert(WordsInSentence((\"there is no place available\
    \ here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"\
    Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"\
    go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"\
    here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"\
    is\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <3ecaffe8c6eb4ab5a6ff18b58cbae38f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <3ecaffe8c6eb4ab5a6ff18b58cbae38f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660015923
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Example\
    \ 2:\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence\
    \ contains only letters\n    public static string WordsInSentence(string sentence)\
    \ {\n        string result = \"\";\n        foreach (string word in sentence.Split('\
    \ '))\n        {\n            int length = word.Length;\n            bool isPrime\
    \ = true;\n            int i = 2;\n            while (i < length)\n          \
    \  {\n                if (length%i == 0)\n                {\n                \
    \    isPrime = false;\n                    break;\n                }\n       \
    \         i++;\n            }\n            if (isPrime)\n            {\n     \
    \           result += word;\n            }\n        }\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"\
    This is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets\
    \ go for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"\
    there is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"\
    Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"\
    go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"\
    here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"\
    is\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <20e2137df02543fc91b5cf9efd444554>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <20e2137df02543fc91b5cf9efd444554>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660015923
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Example\
    \ 2:\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence\
    \ contains only letters\n    public static string WordsInSentence(string sentence)\
    \ {\n        string result = \"\";\n        char[] chars = sentence.ToCharArray();\n\
    \        Array.Sort(chars);\n        foreach (char c in chars) {\n           \
    \ int n = Convert.ToInt32(c);\n            if (IsPrime(n)) {\n               \
    \ result += c.ToString();\n            }\n        }\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"\
    This is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets\
    \ go for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"\
    there is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"\
    Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"\
    go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"\
    here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"\
    is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpy0dg9h9t.cs(25,17): error CS0103: The name ''IsPrime'' does not exist
    in the current context

    '
  timestamp: 1660015920
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Example\
    \ 2:\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence\
    \ contains only letters\n    public static string WordsInSentence(string sentence)\
    \ {\n        string result = \"\";\n        char[] chars = sentence.ToCharArray();\n\
    \        int[] primes = new int[100];\n        bool isPrime = true;\n        for\
    \ (int i = 0; i < chars.Length; i++) {\n            int n = Convert.ToInt32(chars[i]);\n\
    \            if (isPrime) {\n                for (int j = i; j < chars.Length;\
    \ j++) {\n                    if (n % j == 0) {\n                        isPrime\
    \ = false;\n                        break;\n                    }\n          \
    \      }\n            }\n            if (isPrime) {\n                primes[i]\
    \ = n;\n            }\n        }\n        for (int i = 0; i < primes.Length; i++)\
    \ {\n            if (primes[i] == chars.Length) {\n                result = result\
    \ + chars[i];\n            }\n        }\n        return result;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This\
    \ is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go\
    \ for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"\
    there is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"\
    Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"\
    go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"\
    here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"\
    is\")));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.DivideByZeroException: Attempted to divide\
    \ by zero.\n  at Problem.WordsInSentence (System.String sentence) [0x00038] in\
    \ <3f8eb3a17a2d4743ab1eb80a5c165a0a>:0 \n  at Problem.Main (System.String[] args)\
    \ [0x00001] in <3f8eb3a17a2d4743ab1eb80a5c165a0a>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.DivideByZeroException: Attempted to divide by zero.\n  at\
    \ Problem.WordsInSentence (System.String sentence) [0x00038] in <3f8eb3a17a2d4743ab1eb80a5c165a0a>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00001] in <3f8eb3a17a2d4743ab1eb80a5c165a0a>:0\
    \ \n"
  stdout: ''
  timestamp: 1660015923
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Example\
    \ 2:\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence\
    \ contains only letters\n    public static string WordsInSentence(string sentence)\
    \ {\n        string result = \"\";\n        string word = \"\";\n        bool\
    \ isPrime = true;\n        foreach (char c in sentence) {\n            int n =\
    \ Convert.ToInt32(c);\n            if (n % 2 == 0) {\n                isPrime\
    \ = false;\n            }\n        }\n        if (isPrime) {\n            int\
    \ n = Convert.ToInt32(sentence);\n            int count = 0;\n            while\
    \ (n > 1) {\n                if (n % 2 == 0) {\n                    n = (n / 2);\n\
    \                    count++;\n                }\n                else {\n   \
    \                 n = (3 * n) + 1;\n                    count++;\n           \
    \     }\n            }\n            int count = 0;\n            while (n > 1)\
    \ {\n                if (n % 2 == 0) {\n                    n = (n / 2);\n   \
    \                 count++;\n                }\n                else {\n      \
    \              n = (3 * n) + 1;\n                    count++;\n              \
    \  }\n            }\n            int count = 0;\n            while (n > 1) {\n\
    \                if (n % 2 == 0) {\n                    n = (n / 2);\n       \
    \             count++;\n                }\n                else {\n          \
    \          n = (3 * n) + 1;\n                    count++;\n                }\n\
    \            }\n            int count = 0;\n            while (n > 1) {\n    \
    \            if (n % 2 == 0) {\n                    n = (n / 2);\n           \
    \         count++;\n                }\n                else {\n              \
    \      n = (3 * n) + 1;\n                    count++;\n                }\n   \
    \         }\n            int count = 0;\n            while (n > 1) {\n       \
    \         if (n % 2 == 0) {\n                    n = (n / 2);\n              \
    \      count++;\n                }\n                else {\n                 \
    \   n = (3 * n) + 1;\n                    count++;\n                }\n      \
    \      }\n            int count = 0;\n            while (n > 1) {\n          \
    \      if (n % 2 == 0) {\n                    n = (n / 2);\n                 \
    \   count++;\n                }\n                else {\n                    n\
    \ = (3 * n) + 1;\n                    count++;\n                }\n          \
    \  }\n            int count = 0;\n            while (n > 1) {\n              \
    \  if (n % 2 == 0) {\n                    n = (n / 2);\n                    count++;\n\
    \                }\n                else {\n                    n = (3 * n) +\
    \ 1;\n                    count++;\n                }\n            }\n       \
    \     int count = 0;\n            while (n > 1) {\n                if (n % 2 ==\
    \ 0) {\n                    n = (n / 2);\n                    count++;\n     \
    \           }\n                else {\n                    n = (3 * n) + 1;\n\
    \                    count++;\n                }\n            }\n            int\
    \ count = 0;\n            while (n > 1) {\n                if (n % 2 == 0) {\n\
    \                    n = (n / 2);\n                    count++;\n            \
    \    }\n                else {\n                    n = (3 * n) + 1;\n       \
    \             count++;\n                }\n            }\n            int count\
    \ = 0;\n            while (n > 1) {\n                if (n % 2 == 0) {\n     \
    \               n = (n / 2);\n                    count++;\n                }\n\
    \                else {\n                    n = (3 * \n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This is a test\"\
    )).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go for swimming\"\
    )).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there is no place\
    \ available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"\
    Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"\
    go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"\
    here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"\
    is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpn93lbwpw.cs(137,29): error CS1525: Invalid expression term ''}''

    /tmp/tmpn93lbwpw.cs(137,29): error CS1026: ) expected

    /tmp/tmpn93lbwpw.cs(137,29): error CS1002: ; expected

    /tmp/tmpn93lbwpw.cs(139,5): error CS0106: The modifier ''public'' is not valid
    for this item

    /tmp/tmpn93lbwpw.cs(149,2): error CS1513: } expected

    '
  timestamp: 1660015922
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Example\
    \ 2:\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence\
    \ contains only letters\n    public static string WordsInSentence(string sentence)\
    \ {\n        string result = \"\";\n        string word = \"\";\n        string\
    \ temp = \"\";\n        int count = 0;\n        char[] chars = sentence.ToCharArray();\n\
    \        foreach (char c in chars) {\n            if (char.IsLetter(c)) {\n  \
    \              word += c;\n            } else {\n                temp = word;\n\
    \                word = \"\";\n                result += temp;\n             \
    \   count++;\n            }\n        }\n        temp = word;\n        word = \"\
    \";\n        result += temp;\n        count++;\n        for (int i = 0; i < count;\
    \ i++) {\n            int count = 0;\n            foreach (char c in chars) {\n\
    \                if (char.IsLetter(c)) {\n                    word += c;\n   \
    \             } else {\n                    temp = word;\n                   \
    \ word = \"\";\n                    result += temp;\n                    count++;\n\
    \                }\n            }\n            temp = word;\n            word\
    \ = \"\";\n            result += temp;\n            count++;\n        }\n    \
    \    return result;\n    }\n    public static void Main(string[] args) {\n   \
    \ Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"\
    lets go for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"\
    there is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"\
    Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"\
    go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"\
    here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"\
    is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpqin8s0fj.cs(40,17): error CS0136: A local or parameter named ''count''
    cannot be declared in this scope because that name is used in an enclosing local
    scope to define a local or parameter

    '
  timestamp: 1660015923
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Example\
    \ 2:\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence\
    \ contains only letters\n    public static string WordsInSentence(string sentence)\
    \ {\n        string result = \"\";\n        char[] chars = sentence.ToCharArray();\n\
    \        HashSet<string> words = new HashSet<string>();\n        foreach (char\
    \ c in chars) {\n            if (char.IsLetter(c)) {\n                string word\
    \ = c.ToString();\n                words.Add(word);\n            }\n        }\n\
    \        foreach (string word in words) {\n            int len = word.Length;\n\
    \            if (len == 1) {\n                result += word;\n            } else\
    \ if (len == 2 && word.Contains(\"a\") && word.Contains(\"b\")) {\n          \
    \      result += word;\n            } else if (len == 2 && word.Contains(\"a\"\
    ) && !word.Contains(\"b\")) {\n                result += word;\n            }\
    \ else if (len == 2 && !word.Contains(\"a\") && word.Contains(\"b\")) {\n    \
    \            result += word;\n            } else if (len == 2 && !word.Contains(\"\
    a\") && !word.Contains(\"b\")) {\n                result += word;\n          \
    \  } else if (len == 3 && word.Contains(\"a\") && word.Contains(\"b\") && word.Contains(\"\
    c\")) {\n                result += word;\n            } else if (len == 3 && word.Contains(\"\
    a\") && word.Contains(\"b\") && !word.Contains(\"c\")) {\n                result\
    \ += word;\n            } else if (len == 3 && word.Contains(\"a\") && !word.Contains(\"\
    b\") && word.Contains(\"c\")) {\n                result += word;\n           \
    \ } else if (len == 3 && !word.Contains(\"a\") && word.Contains(\"b\") && word.Contains(\"\
    c\")) {\n                result += word;\n            } else if (len == 3 && !word.Contains(\"\
    a\") && word.Contains(\"b\") && !word.Contains(\"c\")) {\n                result\
    \ += word;\n            } else if (len == 3 && !word.Contains(\"a\") && !word.Contains(\"\
    b\") && word.Contains(\"c\")) {\n                result += word;\n           \
    \ } else if (len == 4 && word.Contains(\"a\") && word.Contains(\"b\") && word.Contains(\"\
    c\") && word.Contains(\"d\")) {\n                result += word;\n           \
    \ } else if (len == 4 && word.Contains(\"a\") && word.Contains(\"b\") && word.Contains(\"\
    c\") && !word.Contains(\"d\")) {\n                result += word;\n          \
    \  } else if (len == 4 && word.Contains(\"a\") && word.Contains(\"b\") && !word.Contains(\"\
    c\") && word.Contains(\"d\")) {\n                result += word;\n           \
    \ } else if (len == 4 && word.Contains(\"a\") && word.Contains(\"b\") && !word.Contains(\"\
    c\") && !word.Contains(\"d\")) {\n                result += word;\n          \
    \  } else if (len == 4 && !word.Contains(\"a\") && word.Contains(\"b\") && word.Contains(\"\
    c\") && word.Contains(\"d\")) {\n                result += word;\n           \
    \ } else if (len == 4 && !word.Contains(\"a\") && word.Contains(\"b\") \n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"\
    This is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets\
    \ go for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"\
    there is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"\
    Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"\
    go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"\
    here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"\
    is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp01zjzgj6.cs(63,77): error CS1026: ) expected

    /tmp/tmp01zjzgj6.cs(63,77): error CS1525: Invalid expression term ''}''

    /tmp/tmp01zjzgj6.cs(63,77): error CS1002: ; expected

    /tmp/tmp01zjzgj6.cs(65,5): error CS0106: The modifier ''public'' is not valid
    for this item

    /tmp/tmp01zjzgj6.cs(75,2): error CS1513: } expected

    '
  timestamp: 1660015922
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Example\
    \ 2:\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence\
    \ contains only letters\n    public static string WordsInSentence(string sentence)\
    \ {\n        string result = \"\";\n        string temp = \"\";\n        char[]\
    \ chars = sentence.ToCharArray();\n        HashSet<string> set = new HashSet<string>();\n\
    \        foreach (char c in chars) {\n            if (char.IsLetter(c)) {\n  \
    \              temp = temp + c;\n            }\n        }\n        char[] chars2\
    \ = temp.ToCharArray();\n        foreach (char c in chars2) {\n            if\
    \ (char.IsLetter(c)) {\n                set.Add(c);\n            }\n        }\n\
    \        foreach (char c in chars) {\n            if (set.Contains(c)) {\n   \
    \             result += c;\n            }\n        }\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"\
    This is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets\
    \ go for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"\
    there is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"\
    Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"\
    go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"\
    here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"\
    is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpoaw_okmo.cs(32,25): error CS1503: Argument 1: cannot convert from ''char''
    to ''string''

    /tmp/tmpoaw_okmo.cs(36,30): error CS1503: Argument 1: cannot convert from ''char''
    to ''string''

    '
  timestamp: 1660015923
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Example\
    \ 2:\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence\
    \ contains only letters\n    public static string WordsInSentence(string sentence)\
    \ {\n        string result = \"\";\n        foreach (string word in sentence.Split('\
    \ '))\n        {\n            int length = word.Length;\n            int count\
    \ = 0;\n            int prime = 1;\n            while (count < length)\n     \
    \       {\n                if (prime % length == 0)\n                {\n     \
    \               prime++;\n                }\n                else\n          \
    \      {\n                    prime = prime + 2;\n                }\n        \
    \        count++;\n            }\n            result += word;\n        }\n   \
    \     return result;\n    }\n    public static void Main(string[] args) {\n  \
    \  Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\")));\n   \
    \ Debug.Assert(WordsInSentence((\"lets go for swimming\")).Equals((\"go for\"\
    )));\n    Debug.Assert(WordsInSentence((\"there is no place available here\")).Equals((\"\
    there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi I am Hussein\"\
    )).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go for it\"\
    )).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\
    \")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n \
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <2b91cbc67c8346d680260dea74801f38>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <2b91cbc67c8346d680260dea74801f38>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660015923
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Example\
    \ 2:\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence\
    \ contains only letters\n    public static string WordsInSentence(string sentence)\
    \ {\n        string result = \"\";\n        char[] charArray = sentence.ToCharArray();\n\
    \        List<string> words = new List<string>();\n        foreach (char c in\
    \ charArray) {\n            if (char.IsLetter(c)) {\n                string word\
    \ = c.ToString();\n                words.Add(word);\n            }\n        }\n\
    \        List<int> lengths = new List<int>();\n        foreach (string word in\
    \ words) {\n            int length = word.Length;\n            lengths.Add(length);\n\
    \        }\n        List<int> primes = new List<int>();\n        foreach (int\
    \ length in lengths) {\n            bool isPrime = true;\n            for (int\
    \ i = 2; i <= Math.Sqrt(length); i++) {\n                if (length % i == 0)\
    \ {\n                    isPrime = false;\n                    break;\n      \
    \          }\n            }\n            if (isPrime) {\n                primes.Add(length);\n\
    \            }\n        }\n        foreach (int length in primes) {\n        \
    \    string newWord = \"\";\n            foreach (string word in words) {\n  \
    \              if (word.Length == length) {\n                    newWord += word\
    \ + \" \";\n                }\n            }\n            result += newWord;\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\"\
    )));\n    Debug.Assert(WordsInSentence((\"lets go for swimming\")).Equals((\"\
    go for\")));\n    Debug.Assert(WordsInSentence((\"there is no place available\
    \ here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"\
    Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"\
    go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"\
    here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"\
    is\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a62484c609c64369afbe6e5c90d9c0b3>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a62484c609c64369afbe6e5c90d9c0b3>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660015923
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Example\
    \ 2:\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence\
    \ contains only letters\n    public static string WordsInSentence(string sentence)\
    \ {\n        string result = \"\";\n        char[] chars = sentence.ToCharArray();\n\
    \        int[] primes = new int[100];\n        for (int i = 0; i < chars.Length;\
    \ i++) {\n            primes[i] = 1;\n        }\n        for (int i = 0; i < chars.Length;\
    \ i++) {\n            int count = 0;\n            while (count < chars.Length)\
    \ {\n                if (chars[count] == chars[i]) {\n                    count++;\n\
    \                } else {\n                    break;\n                }\n   \
    \         }\n            if (count < chars.Length) {\n                primes[count]\
    \ = primes[count] + 1;\n            }\n        }\n        for (int i = 0; i <\
    \ primes.Length; i++) {\n            if (primes[i] == 2) {\n                result\
    \ = result + chars[i].ToString();\n            }\n        }\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"\
    This is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets\
    \ go for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"\
    there is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"\
    Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"\
    go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"\
    here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"\
    is\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d35822e62e774695b4f7056611241181>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d35822e62e774695b4f7056611241181>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660015923
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Example\
    \ 2:\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence\
    \ contains only letters\n    public static string WordsInSentence(string sentence)\
    \ {\n        string result = \"\";\n        string word = \"\";\n        bool\
    \ isPrime = true;\n        int len = sentence.Length;\n        char[] charArray\
    \ = sentence.ToCharArray();\n        List<int> primes = new List<int>();\n   \
    \     primes.Add(2);\n        primes.Add(3);\n        primes.Add(5);\n       \
    \ primes.Add(7);\n        primes.Add(11);\n        primes.Add(13);\n        primes.Add(17);\n\
    \        primes.Add(19);\n        primes.Add(23);\n        primes.Add(29);\n \
    \       primes.Add(31);\n        primes.Add(37);\n        primes.Add(41);\n  \
    \      primes.Add(43);\n        primes.Add(47);\n        primes.Add(53);\n   \
    \     primes.Add(59);\n        primes.Add(61);\n        primes.Add(67);\n    \
    \    primes.Add(71);\n        primes.Add(73);\n        primes.Add(79);\n     \
    \   primes.Add(83);\n        primes.Add(89);\n        primes.Add(97);\n      \
    \  primes.Add(103);\n        primes.Add(109);\n        primes.Add(113);\n    \
    \    primes.Add(127);\n        primes.Add(131);\n        primes.Add(137);\n  \
    \      primes.Add(139);\n        primes.Add(143);\n        primes.Add(147);\n\
    \        primes.Add(151);\n        primes.Add(157);\n        primes.Add(163);\n\
    \        primes.Add(167);\n        primes.Add(173);\n        primes.Add(179);\n\
    \        primes.Add(181);\n        primes.Add(191);\n        primes.Add(193);\n\
    \        primes.Add(197);\n        primes.Add(199);\n        primes.Add(211);\n\
    \        primes.Add(223);\n        primes.Add(227);\n        primes.Add(229);\n\
    \        primes.Add(233);\n        primes.Add(239);\n        primes.Add(241);\n\
    \        primes.Add(251);\n        primes.Add(257);\n        primes.Add(263);\n\
    \        primes.Add(269);\n        primes.Add(271);\n        primes.Add(277);\n\
    \        primes.Add(281);\n        primes.Add(283);\n        primes.Add(293);\n\
    \        primes.Add(307);\n        primes.Add(311);\n        primes.Add(313;\n\
    \        primes.Add(317;\n        primes.Add(331);\n        primes.Add(337);\n\
    \        primes.Add(34\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\")));\n \
    \   Debug.Assert(WordsInSentence((\"lets go for swimming\")).Equals((\"go for\"\
    )));\n    Debug.Assert(WordsInSentence((\"there is no place available here\")).Equals((\"\
    there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi I am Hussein\"\
    )).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go for it\"\
    )).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\
    \")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpb1lh01oa.cs(89,23): error CS1026: ) expected

    /tmp/tmpb1lh01oa.cs(90,23): error CS1026: ) expected

    /tmp/tmpb1lh01oa.cs(93,22): error CS1026: ) expected

    /tmp/tmpb1lh01oa.cs(93,22): error CS1002: ; expected

    '
  timestamp: 1660015922
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Example\
    \ 2:\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence\
    \ contains only letters\n    public static string WordsInSentence(string sentence)\
    \ {\n        string result = \"\";\n        string word = \"\";\n        bool\
    \ isPrime = true;\n        foreach (char c in sentence) {\n            int n =\
    \ Convert.ToInt32(c);\n            if (n % 2 == 0) {\n                isPrime\
    \ = false;\n            }\n        }\n        if (isPrime) {\n            foreach\
    \ (char c in sentence) {\n                int n = Convert.ToInt32(c);\n      \
    \          if (n % 2 == 0) {\n                    int count = 0;\n           \
    \         for (int i = 3; i <= Math.Sqrt(n); i += 2) {\n                     \
    \   if (n % i == 0) {\n                            count++;\n                \
    \        }\n                    }\n                    if (count == 2) {\n   \
    \                     result += word;\n                        word = \"\";\n\
    \                    }\n                }\n                else {\n          \
    \          word += c;\n                }\n            }\n        }\n        return\
    \ result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"\
    This is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets\
    \ go for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"\
    there is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"\
    Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"\
    go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"\
    here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"\
    is\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <5f6fc0d0361746a1a6d3a52520aec94e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <5f6fc0d0361746a1a6d3a52520aec94e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660015923
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Example\
    \ 2:\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence\
    \ contains only letters\n    public static string WordsInSentence(string sentence)\
    \ {\n        string result = \"\";\n        char[] chars = sentence.ToCharArray();\n\
    \        int[] primes = new int[100];\n        primes[0] = 2;\n        for (int\
    \ i = 1; i < primes.Length; i++) {\n            primes[i] = 1;\n            for\
    \ (int j = 1; j < chars.Length; j++) {\n                if (chars[j] == ' ') {\n\
    \                    primes[i] *= primes[j];\n                }\n            }\n\
    \        }\n        for (int i = 0; i < chars.Length; i++) {\n            if (primes[chars.Length\
    \ - i - 1] != 1) {\n                result += chars[i];\n            }\n     \
    \   }\n        return result;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\")));\n\
    \    Debug.Assert(WordsInSentence((\"lets go for swimming\")).Equals((\"go for\"\
    )));\n    Debug.Assert(WordsInSentence((\"there is no place available here\")).Equals((\"\
    there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi I am Hussein\"\
    )).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go for it\"\
    )).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\
    \")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n \
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <ad0dd482467048628b59e8cb597443a1>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <ad0dd482467048628b59e8cb597443a1>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660015923
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Example\
    \ 2:\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence\
    \ contains only letters\n    public static string WordsInSentence(string sentence)\
    \ {\n        string result = \"\";\n        char[] chars = sentence.ToCharArray();\n\
    \        Array.Sort(chars);\n        string word = \"\";\n        foreach (char\
    \ c in chars) {\n            word += c;\n        }\n        char[] words = word.Split('\
    \ ');\n        Array.Sort(words);\n        foreach (string s in words) {\n   \
    \         int len = s.Length;\n            bool isPrime = true;\n            for\
    \ (int i = 2; i <= len / 2; i++) {\n                if (s.Length % i == 0) {\n\
    \                    isPrime = false;\n                    break;\n          \
    \      }\n            }\n            if (isPrime) {\n                result +=\
    \ s + \" \";\n            }\n        }\n        return result;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This\
    \ is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go\
    \ for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"\
    there is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"\
    Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"\
    go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"\
    here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"\
    is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmphibmcux9.cs(27,24): error CS0029: Cannot implicitly convert type ''string[]''
    to ''char[]''

    /tmp/tmphibmcux9.cs(29,9): error CS0030: Cannot convert type ''char'' to ''string''

    '
  timestamp: 1660015923
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Example\
    \ 2:\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence\
    \ contains only letters\n    public static string WordsInSentence(string sentence)\
    \ {\n        string result = \"\";\n        string word = \"\";\n        string\
    \ newWord = \"\";\n        string temp = \"\";\n        char[] charArray = sentence.ToCharArray();\n\
    \        Array.Sort(charArray);\n        foreach (char c in charArray) {\n   \
    \         if (char.IsLetter(c)) {\n                word += c;\n            } else\
    \ {\n                if (word.Length > 0) {\n                    newWord = word\
    \ + \" \";\n                    result += newWord;\n                    word =\
    \ \"\";\n                }\n                newWord = c;\n            }\n    \
    \    }\n        if (word.Length > 0) {\n            newWord = word + \" \";\n\
    \            result += newWord;\n        }\n        return result;\n    }\n  \
    \  public static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"\
    This is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets\
    \ go for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"\
    there is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"\
    Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"\
    go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"\
    here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"\
    is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpegob0cps.cs(35,27): error CS0029: Cannot implicitly convert type ''char''
    to ''string''

    /tmp/tmpegob0cps.cs(23,16): warning CS0219: The variable ''temp'' is assigned
    but its value is never used

    '
  timestamp: 1660015923
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Example\
    \ 2:\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence\
    \ contains only letters\n    public static string WordsInSentence(string sentence)\
    \ {\n        string result = \"\";\n        string word = \"\";\n        bool\
    \ isPrime = true;\n        bool isPrime2 = true;\n        bool isPrime3 = true;\n\
    \        bool isPrime4 = true;\n        bool isPrime5 = true;\n        bool isPrime6\
    \ = true;\n        bool isPrime7 = true;\n        bool isPrime8 = true;\n    \
    \    bool isPrime9 = true;\n        bool isPrime10 = true;\n        bool isPrime11\
    \ = true;\n        bool isPrime12 = true;\n        bool isPrime13 = true;\n  \
    \      bool isPrime14 = true;\n        bool isPrime15 = true;\n        bool isPrime16\
    \ = true;\n        bool isPrime17 = true;\n        bool isPrime18 = true;\n  \
    \      bool isPrime19 = true;\n        bool isPrime20 = true;\n        bool isPrime21\
    \ = true;\n        bool isPrime22 = true;\n        bool isPrime23 = true;\n  \
    \      bool isPrime24 = true;\n        bool isPrime25 = true;\n        bool isPrime26\
    \ = true;\n        bool isPrime27 = true;\n        bool isPrime28 = true;\n  \
    \      bool isPrime29 = true;\n        bool isPrime30 = true;\n        bool isPrime31\
    \ = true;\n        bool isPrime32 = true;\n        bool isPrime33 = true;\n  \
    \      bool isPrime34 = true;\n        bool isPrime35 = true;\n        bool isPrime36\
    \ = true;\n        bool isPrime37 = true;\n        bool isPrime38 = true;\n  \
    \      bool isPrime39 = true;\n        bool isPrime40 = true;\n        bool isPrime41\
    \ = true;\n        bool isPrime42 = true;\n        bool isPrime43 = true;\n  \
    \      bool isPrime44 = true;\n        bool isPrime45 = true;\n        bool isPrime46\
    \ = true;\n        bool isPrime47 = true;\n        bool isPrime48 = true;\n  \
    \      bool isPrime49 = true;\n        bool isPrime50 = true;\n        bool isPrime51\
    \ = true;\n        bool isPrime52 = true;\n        bool isPrime53 = true;\n  \
    \      bool isPrime54 = true;\n        bool isPrime55 = true;\n        bool isPrime56\
    \ = true;\n        bool isPrime57 = true;\n        bool isPrime58 = true;\n  \
    \      bool isPrime59 = true;\n        bool isPrime60 = true;\n        bool isPrime61\
    \ = true;\n        bool isPri\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\")));\n\
    \    Debug.Assert(WordsInSentence((\"lets go for swimming\")).Equals((\"go for\"\
    )));\n    Debug.Assert(WordsInSentence((\"there is no place available here\")).Equals((\"\
    there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi I am Hussein\"\
    )).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go for it\"\
    )).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\
    \")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpxs2cr1s7.cs(83,19): error CS1002: ; expected

    '
  timestamp: 1660015923
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Example\
    \ 2:\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence\
    \ contains only letters\n    public static string WordsInSentence(string sentence)\
    \ {\n        string result = \"\";\n        string word = \"\";\n        string\
    \ temp = \"\";\n        bool isPrime = true;\n        foreach (char c in sentence)\
    \ {\n            if (char.IsLetter(c)) {\n                word += c;\n       \
    \     } else {\n                temp = word;\n                word = \"\";\n \
    \               isPrime = IsPrime(temp);\n                if (isPrime) {\n   \
    \                 result += temp;\n                }\n            }\n        }\n\
    \        return result;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\")));\n \
    \   Debug.Assert(WordsInSentence((\"lets go for swimming\")).Equals((\"go for\"\
    )));\n    Debug.Assert(WordsInSentence((\"there is no place available here\")).Equals((\"\
    there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi I am Hussein\"\
    )).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go for it\"\
    )).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\
    \")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmph7adzo1c.cs(30,27): error CS0103: The name ''IsPrime'' does not exist
    in the current context

    '
  timestamp: 1660015923
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Example\
    \ 2:\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence\
    \ contains only letters\n    public static string WordsInSentence(string sentence)\
    \ {\n        string result = \"\";\n        char[] chars = sentence.ToCharArray();\n\
    \        List<int> primes = new List<int>();\n        foreach (char c in chars)\
    \ {\n            int prime = PrimeNumber(c);\n            if (prime > 0)\n   \
    \             primes.Add(prime);\n        }\n        primes.Sort();\n        for\
    \ (int i = 0; i < primes.Count; i++) {\n            if (primes[i] > 0)\n     \
    \           result += chars[i];\n        }\n        return result;\n    }\n  \
    \  public static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"\
    This is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets\
    \ go for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"\
    there is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"\
    Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"\
    go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"\
    here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"\
    is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpvl7hk0bl.cs(24,25): error CS0103: The name ''PrimeNumber'' does not exist
    in the current context

    '
  timestamp: 1660015923
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Example\
    \ 2:\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence\
    \ contains only letters\n    public static string WordsInSentence(string sentence)\
    \ {\n        string result = \"\";\n        List<string> words = new List<string>();\n\
    \        foreach (string word in sentence.Split(' '))\n        {\n           \
    \ words.Add(word);\n        }\n        List<int> primes = new List<int>();\n \
    \       foreach (string word in words)\n        {\n            int length = word.Length;\n\
    \            int prime = 1;\n            while (length != 1)\n            {\n\
    \                if (length%2 == 0)\n                {\n                    prime\
    \ = prime * 2;\n                }\n                else\n                {\n \
    \                   prime = prime * 3;\n                }\n                length\
    \ = length / 2;\n            }\n            primes.Add(prime);\n        }\n  \
    \      List<int> primesSorted = new List<int>(primes);\n        primesSorted.Sort();\n\
    \        foreach (int prime in primesSorted)\n        {\n            int count\
    \ = 0;\n            foreach (string word in words)\n            {\n          \
    \      if (word.Length == prime)\n                {\n                    count++;\n\
    \                }\n            }\n            if (count == words.Count)\n   \
    \         {\n                result = result + prime + \" \";\n            }\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\"\
    )));\n    Debug.Assert(WordsInSentence((\"lets go for swimming\")).Equals((\"\
    go for\")));\n    Debug.Assert(WordsInSentence((\"there is no place available\
    \ here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"\
    Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"\
    go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"\
    here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"\
    is\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <b01925a6ae8c4473b38a4f12795c7a3d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <b01925a6ae8c4473b38a4f12795c7a3d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660015923
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Example\
    \ 2:\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence\
    \ contains only letters\n    public static string WordsInSentence(string sentence)\
    \ {\n        string result = \"\";\n        string word = \"\";\n        bool\
    \ isPrime = true;\n        int n = sentence.Length;\n        int[] primes = new\
    \ int[n];\n        primes[0] = 2;\n        for (int i = 1; i < n; i++) {\n   \
    \         int count = 0;\n            while (count < n && isPrime) {\n       \
    \         isPrime = true;\n                for (int j = 2; j < i; j++) {\n   \
    \                 if (i % j == 0) {\n                        isPrime = false;\n\
    \                        break;\n                    }\n                }\n  \
    \              if (isPrime) {\n                    primes[count] = i;\n      \
    \              count++;\n                }\n            }\n        }\n       \
    \ for (int i = 0; i < n; i++) {\n            int count = 0;\n            while\
    \ (count < n && isPrime) {\n                isPrime = true;\n                for\
    \ (int j = 0; j < primes[count]; j++) {\n                    if (sentence.Substring(i,\
    \ 1).Contains(word.Substring(j, 1))) {\n                        isPrime = false;\n\
    \                        break;\n                    }\n                }\n  \
    \              if (isPrime) {\n                    result += \" \" + word;\n \
    \                   count++;\n                }\n            }\n            word\
    \ = sentence.Substring(0, i);\n        }\n        return result;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This\
    \ is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go\
    \ for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"\
    there is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"\
    Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"\
    go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"\
    here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"\
    is\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <bc12837ad0af47b788234f8afe65c7bd>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <bc12837ad0af47b788234f8afe65c7bd>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660015923
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Example\
    \ 2:\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence\
    \ contains only letters\n    public static string WordsInSentence(string sentence)\
    \ {\n        string result = \"\";\n        string words = sentence.Split(' ');\n\
    \        foreach (string word in words) {\n            int length = word.Length;\n\
    \            if (length == 1) continue;\n            int prime = 1;\n        \
    \    while (prime * prime <= length) {\n                if (length % prime ==\
    \ 0) {\n                    prime++;\n                    break;\n           \
    \     }\n            }\n            if (prime == length) result += word + \" \"\
    ;\n        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\"\
    )));\n    Debug.Assert(WordsInSentence((\"lets go for swimming\")).Equals((\"\
    go for\")));\n    Debug.Assert(WordsInSentence((\"there is no place available\
    \ here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"\
    Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"\
    go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"\
    here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"\
    is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpm4_i2aj5.cs(21,24): error CS0029: Cannot implicitly convert type ''string[]''
    to ''string''

    /tmp/tmpm4_i2aj5.cs(22,9): error CS0030: Cannot convert type ''char'' to ''string''

    '
  timestamp: 1660015923
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Example\
    \ 2:\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence\
    \ contains only letters\n    public static string WordsInSentence(string sentence)\
    \ {\n        string result = \"\";\n        char[] chars = sentence.ToCharArray();\n\
    \        HashSet<string> words = new HashSet<string>();\n        foreach (char\
    \ c in chars) {\n            if (char.IsLetter(c)) {\n                string word\
    \ = c.ToString();\n                if (words.Contains(word)) {\n             \
    \       result += \"\\n\" + word;\n                } else {\n                \
    \    words.Add(word);\n                }\n            }\n        }\n        return\
    \ result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"\
    This is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets\
    \ go for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"\
    there is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"\
    Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"\
    go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"\
    here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"\
    is\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <19f95da876144e68b5318910237dbbda>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <19f95da876144e68b5318910237dbbda>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660015923
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Example\
    \ 2:\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence\
    \ contains only letters\n    public static string WordsInSentence(string sentence)\
    \ {\n        string result = \"\";\n        char[] chars = sentence.ToCharArray();\n\
    \        Array.Sort(chars);\n        string str = string.Join(\" \", chars);\n\
    \        char[] chars2 = str.ToCharArray();\n        Array.Sort(chars2);\n   \
    \     string str2 = string.Join(\" \", chars2);\n        char[] chars3 = str2.ToCharArray();\n\
    \        Array.Sort(chars3);\n        string str3 = string.Join(\" \", chars3);\n\
    \        char[] chars4 = str3.ToCharArray();\n        Array.Sort(chars4);\n  \
    \      string str4 = string.Join(\" \", chars4);\n        char[] chars5 = str4.ToCharArray();\n\
    \        Array.Sort(chars5);\n        string str5 = string.Join(\" \", chars5);\n\
    \        char[] chars6 = str5.ToCharArray();\n        Array.Sort(chars6);\n  \
    \      string str6 = string.Join(\" \", chars6);\n        char[] chars7 = str6.ToCharArray();\n\
    \        Array.Sort(chars7);\n        string str7 = string.Join(\" \", chars7);\n\
    \        char[] chars8 = str7.ToCharArray();\n        Array.Sort(chars8);\n  \
    \      string str8 = string.Join(\" \", chars8);\n        char[] chars9 = str8.ToCharArray();\n\
    \        Array.Sort(chars9);\n        string str9 = string.Join(\" \", chars9);\n\
    \        char[] chars10 = str9.ToCharArray();\n        Array.Sort(chars10);\n\
    \        string str10 = string.Join(\" \", chars10);\n        char[] chars11 =\
    \ str10.ToCharArray();\n        Array.Sort(chars11);\n        string str11 = string.Join(\"\
    \ \", chars11);\n        char[] chars12 = str11.ToCharArray();\n        Array.Sort(chars12);\n\
    \        string str12 = string.Join(\" \", chars12);\n        char[] chars13 =\
    \ str12.ToCharArray();\n        Array.Sort(chars13);\n        string str13 = string.Join(\"\
    \ \", chars13);\n        char[] chars14 = str13.ToCharArray();\n        Array.Sort(chars14);\n\
    \        string str14 = string.Join(\" \", chars14);\n        char[] chars15 =\
    \ str14.ToCharArray();\n        Array.Sort(chars15);\n        string str15 = string.Join(\"\
    \ \", chars\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"\
    This is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets\
    \ go for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"\
    there is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"\
    Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"\
    go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"\
    here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"\
    is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp58nri6xe.cs(65,46): error CS1026: ) expected

    /tmp/tmp58nri6xe.cs(65,46): error CS1002: ; expected

    '
  timestamp: 1660015923
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Example\
    \ 2:\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence\
    \ contains only letters\n    public static string WordsInSentence(string sentence)\
    \ {\n        string result = \"\";\n        char[] chars = sentence.ToCharArray();\n\
    \        Array.Sort(chars);\n        foreach (char c in chars) {\n           \
    \ int n = Convert.ToInt32(c);\n            if (IsPrime(n)) {\n               \
    \ result += \" \" + c;\n            }\n        }\n        return result.Trim();\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"\
    This is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets\
    \ go for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"\
    there is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"\
    Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"\
    go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"\
    here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"\
    is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp8r8gq8fe.cs(25,17): error CS0103: The name ''IsPrime'' does not exist
    in the current context

    '
  timestamp: 1660015921
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Example\
    \ 2:\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence\
    \ contains only letters\n    public static string WordsInSentence(string sentence)\
    \ {\n        string result = \"\";\n        string word = \"\";\n        string\
    \ newWord = \"\";\n        char[] charArray = sentence.ToCharArray();\n      \
    \  int[] primes = new int[100];\n        primes[0] = 2;\n        primes[1] = 3;\n\
    \        primes[2] = 5;\n        primes[3] = 7;\n        primes[4] = 11;\n   \
    \     primes[5] = 13;\n        primes[6] = 17;\n        primes[7] = 19;\n    \
    \    primes[8] = 23;\n        primes[9] = 29;\n        primes[10] = 31;\n    \
    \    primes[11] = 37;\n        primes[12] = 47;\n        primes[13] = 53;\n  \
    \      primes[14] = 59;\n        primes[15] = 61;\n        primes[16] = 67;\n\
    \        primes[17] = 71;\n        primes[18] = 71;\n        primes[19] = 79;\n\
    \        primes[20] = 83;\n        primes[21] = 89;\n        primes[22] = 97;\n\
    \        primes[23] = 101;\n        primes[24] = 103;\n        primes[25] = 107;\n\
    \        primes[26] = 113;\n        primes[27] = 119;\n        primes[28] = 127;\n\
    \        primes[29] = 131;\n        primes[30] = 133;\n        primes[31] = 137;\n\
    \        primes[32] = 139;\n        primes[33] = 143;\n        primes[34] = 147;\n\
    \        primes[35] = 151;\n        primes[36] = 153;\n        primes[37] = 157;\n\
    \        primes[38] = 163;\n        primes[39] = 167;\n        primes[40] = 173;\n\
    \        primes[41] = 179;\n        primes[42] = 181;\n        primes[43] = 191;\n\
    \        primes[44] = 193;\n        primes[45] = 197;\n        primes[46] = 199;\n\
    \        primes[47] = 203;\n        primes[48] = 207;\n        primes[49] = 211;\n\
    \        primes[50] = 223;\n        primes[51] = 223;\n        primes[52] = 223;\n\
    \        primes[53] = 223;\n        primes[54] = 223;\n        primes[55] = 223;\n\
    \        primes[56] = 223;\n        primes[57] = 223;\n        primes[58] = 223;\n\
    \        primes[59] = 223;\n        primes[60] = 223;\n\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This is a test\"\
    )).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go for swimming\"\
    )).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there is no place\
    \ available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"\
    Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"\
    go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"\
    here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"\
    is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp8jpyu21x.cs(20,16): warning CS0219: The variable ''result'' is assigned
    but its value is never used

    /tmp/tmp8jpyu21x.cs(21,16): warning CS0219: The variable ''word'' is assigned
    but its value is never used

    /tmp/tmp8jpyu21x.cs(22,16): warning CS0219: The variable ''newWord'' is assigned
    but its value is never used

    /tmp/tmp8jpyu21x.cs(19,26): error CS0161: ''Problem.WordsInSentence(string)'':
    not all code paths return a value

    '
  timestamp: 1660015923
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Example\
    \ 2:\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence\
    \ contains only letters\n    public static string WordsInSentence(string sentence)\
    \ {\n        string result = \"\";\n        string word = \"\";\n        bool\
    \ isPrime = true;\n        foreach (char c in sentence) {\n            int n =\
    \ Convert.ToInt32(c);\n            if (n % 2 == 0) {\n                isPrime\
    \ = false;\n                break;\n            }\n        }\n        if (isPrime)\
    \ {\n            int n = Convert.ToInt32(sentence);\n            int count = 0;\n\
    \            while (n != 1) {\n                count++;\n                n = n\
    \ / 2;\n            }\n            for (int i = 1; i <= count; i++) {\n      \
    \          word = sentence + \" \" + word;\n            }\n            result\
    \ = word;\n        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\"\
    )));\n    Debug.Assert(WordsInSentence((\"lets go for swimming\")).Equals((\"\
    go for\")));\n    Debug.Assert(WordsInSentence((\"there is no place available\
    \ here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"\
    Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"\
    go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"\
    here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"\
    is\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <638e1df146794b98b70530e3a0137a6f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <638e1df146794b98b70530e3a0137a6f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660015923
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Example\
    \ 2:\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence\
    \ contains only letters\n    public static string WordsInSentence(string sentence)\
    \ {\n        string result = \"\";\n        char[] chars = sentence.ToCharArray();\n\
    \        Array.Sort(chars);\n        foreach (char c in chars) {\n           \
    \ int len = c.ToString().Length;\n            if (len == 1) {\n              \
    \  result += c;\n            }\n            else if (len == 2 && chars.Contains(c))\
    \ {\n                result += c;\n            }\n            else if (len ==\
    \ 3 && chars.Contains(c)) {\n                result += c;\n            }\n   \
    \         else if (len == 4 && chars.Contains(c)) {\n                result +=\
    \ c;\n            }\n            else if (len == 5 && chars.Contains(c)) {\n \
    \               result += c;\n            }\n            else if (len == 6 &&\
    \ chars.Contains(c)) {\n                result += c;\n            }\n        \
    \    else if (len == 7 && chars.Contains(c)) {\n                result += c;\n\
    \            }\n            else if (len == 8 && chars.Contains(c)) {\n      \
    \          result += c;\n            }\n            else if (len == 9 && chars.Contains(c))\
    \ {\n                result += c;\n            }\n            else if (len ==\
    \ 10 && chars.Contains(c)) {\n                result += c;\n            }\n  \
    \          else if (len == 11 && chars.Contains(c)) {\n                result\
    \ += c;\n            }\n            else if (len == 12 && chars.Contains(c)) {\n\
    \                result += c;\n            }\n            else if (len == 13 &&\
    \ chars.Contains(c)) {\n                result += c;\n            }\n        \
    \    else if (len == 14 && chars.Contains(c)) {\n                result += c;\n\
    \            }\n            else if (len == 15 && chars.Contains(c)) {\n     \
    \           result += c;\n            }\n            else if (len == 16 && chars.Contains(c))\
    \ {\n                result += c;\n            }\n            else if (len ==\
    \ 17 && chars.Contains(c)) {\n                result += c;\n            }\n  \
    \          else if (len == 18 && chars.Contains(c)) {\n                result\
    \ += c;\n            }\n            else if (len == 19 && chars.Contains(c)) {\n\
    \                result += c;\n            }\n            else if (len == 20 &&\
    \ chars.Contains(c)) {\n                result += c;\n            }\n        \
    \    else if (len == 21 && chars.Contains(c)) {\n                result += c;\n\
    \            }\n            else if (len == 22 && chars.Contains(c)) {\n     \
    \           result += c;\n            }\n            else if (len == 23 && chars.Contains(c))\
    \ {\n                result += c;\n            }\n            else if (len ==\
    \ 24 && chars.Contains(c)) {\n                result += c;\n            }\n  \
    \          else if (len == 25 && chars.Contains(c)) {\n                result\
    \ += c;\n            }\n            else if (len == 26 && chars.Contains(c)) {\n\
    \                result += c;\n            }\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\"\
    )));\n    Debug.Assert(WordsInSentence((\"lets go for swimming\")).Equals((\"\
    go for\")));\n    Debug.Assert(WordsInSentence((\"there is no place available\
    \ here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"\
    Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"\
    go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"\
    here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"\
    is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpp9cbv9ex.cs(104,5): error CS0106: The modifier ''public'' is not valid
    for this item

    /tmp/tmpp9cbv9ex.cs(114,2): error CS1513: } expected

    '
  timestamp: 1660015923
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Example\
    \ 2:\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence\
    \ contains only letters\n    public static string WordsInSentence(string sentence)\
    \ {\n        string result = \"\";\n        string word = \"\";\n        bool\
    \ isPrime = true;\n        for (int i = 0; i < sentence.Length; i++) {\n     \
    \       word = sentence[i];\n            isPrime = true;\n            for (int\
    \ j = i + 1; j < sentence.Length; j++) {\n                if (IsPrime(j - i))\
    \ {\n                    isPrime = false;\n                    break;\n      \
    \          }\n            }\n            if (isPrime) {\n                result\
    \ += \" \" + word;\n            }\n        }\n        return result;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"\
    This is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets\
    \ go for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"\
    there is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"\
    Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"\
    go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"\
    here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"\
    is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp17mxjsck.cs(24,20): error CS0029: Cannot implicitly convert type ''char''
    to ''string''

    /tmp/tmp17mxjsck.cs(27,21): error CS0103: The name ''IsPrime'' does not exist
    in the current context

    '
  timestamp: 1660015923
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Example\
    \ 2:\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence\
    \ contains only letters\n    public static string WordsInSentence(string sentence)\
    \ {\n        string result = \"\";\n        List<string> words = new List<string>();\n\
    \        foreach (char c in sentence) {\n            if (char.IsLetter(c)) {\n\
    \                words.Add(c.ToString());\n            }\n        }\n        foreach\
    \ (string word in words) {\n            int length = word.Length;\n          \
    \  if (length == 1) {\n                result += word;\n            }\n      \
    \      else if (length == 2 && word == words[0]) {\n                result +=\
    \ word;\n            }\n            else if (length == 2 && word == words[1])\
    \ {\n                result += word;\n            }\n            else if (length\
    \ == 3 && word == words[0] && word == words[1]) {\n                result += word;\n\
    \            }\n            else if (length == 3 && word == words[1] && word ==\
    \ words[2]) {\n                result += word;\n            }\n            else\
    \ if (length == 4 && word == words[0] && word == words[1] && word == words[2])\
    \ {\n                result += word;\n            }\n            else if (length\
    \ == 4 && word == words[1] && word == words[2] && word == words[3]) {\n      \
    \          result += word;\n            }\n            else if (length == 5 &&\
    \ word == words[0] && word == words[1] && word == words[2] && word == words[3])\
    \ {\n                result += word;\n            }\n            else if (length\
    \ == 5 && word == words[1] && word == words[2] && word == words[3] && word ==\
    \ words[4]) {\n                result += word;\n            }\n            else\
    \ if (length == 6 && word == words[0] && word == words[1] && word == words[2]\
    \ && word == words[3] && word == words[4]) {\n                result += word;\n\
    \            }\n            else if (length == 6 && word == words[1] && word ==\
    \ words[2] && word == words[3] && word == words[4] && word == words[5]) {\n  \
    \              result += word;\n            }\n            else if (length ==\
    \ 7 && word == words[0] && word == words[1] && word == words[2] && word == words[3]\
    \ && word == words[4] && word == words[5]) {\n                result += word;\n\
    \            }\n            else if (length == 7 && word == words[1] && word ==\
    \ words[2] && word == words[3] && word == words[4] && word == words[5] && word\
    \ == words[6]) {\n                result += word;\n            }\n           \
    \ else if (length == 8 && word == words[0] && word == words[1] && word == words[2]\
    \ && word == words[3] && word == words[4] && word == words[5] && word == words[6])\
    \ {\n                result += word;\n            }\n            else if (length\
    \ == 8 && word == words[1] && word \n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\"\
    )));\n    Debug.Assert(WordsInSentence((\"lets go for swimming\")).Equals((\"\
    go for\")));\n    Debug.Assert(WordsInSentence((\"there is no place available\
    \ here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"\
    Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"\
    go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"\
    here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"\
    is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpcljgmtop.cs(71,61): error CS1026: ) expected

    /tmp/tmpcljgmtop.cs(71,61): error CS1525: Invalid expression term ''}''

    /tmp/tmpcljgmtop.cs(71,61): error CS1002: ; expected

    /tmp/tmpcljgmtop.cs(73,5): error CS0106: The modifier ''public'' is not valid
    for this item

    /tmp/tmpcljgmtop.cs(83,2): error CS1513: } expected

    '
  timestamp: 1660015923
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Example\
    \ 2:\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence\
    \ contains only letters\n    public static string WordsInSentence(string sentence)\
    \ {\n        string result = \"\";\n        char[] chars = sentence.ToCharArray();\n\
    \        List<int> primes = new List<int>();\n        foreach (char c in chars)\
    \ {\n            int n = Convert.ToInt32(c);\n            if (n % 2 == 0) {\n\
    \                for (int i = 3; i <= Math.Sqrt(n); i += 2) {\n              \
    \      if (n % i == 0) {\n                        primes.Add(i);\n           \
    \             break;\n                    }\n                }\n            }\n\
    \        }\n        foreach (int prime in primes) {\n            string s = \"\
    \";\n            int count = 0;\n            foreach (char c in chars) {\n   \
    \             int n = Convert.ToInt32(c);\n                if (n % prime == 0)\
    \ {\n                    count++;\n                    s += c;\n             \
    \   }\n            }\n            if (count == chars.Length) {\n             \
    \   result += s;\n            }\n        }\n        return result;\n    }\n  \
    \  public static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"\
    This is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets\
    \ go for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"\
    there is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"\
    Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"\
    go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"\
    here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"\
    is\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d0be8b4b39c94ef09e6bf41e07b3b1e1>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d0be8b4b39c94ef09e6bf41e07b3b1e1>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660015924
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Example\
    \ 2:\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence\
    \ contains only letters\n    public static string WordsInSentence(string sentence)\
    \ {\n        string result = \"\";\n        char[] charArray = sentence.ToCharArray();\n\
    \        List<int> primes = new List<int>();\n        foreach (char c in charArray)\
    \ {\n            int prime = PrimeNumber(c);\n            if (prime > 1) {\n \
    \               primes.Add(prime);\n            }\n        }\n        primes.Sort();\n\
    \        foreach (int prime in primes) {\n            result += \" \" + charArray[prime];\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\"\
    )));\n    Debug.Assert(WordsInSentence((\"lets go for swimming\")).Equals((\"\
    go for\")));\n    Debug.Assert(WordsInSentence((\"there is no place available\
    \ here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"\
    Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"\
    go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"\
    here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"\
    is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpgzg_0j1j.cs(24,25): error CS0103: The name ''PrimeNumber'' does not exist
    in the current context

    '
  timestamp: 1660015923
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Example\
    \ 2:\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence\
    \ contains only letters\n    public static string WordsInSentence(string sentence)\
    \ {\n        string result = \"\";\n        char[] chars = sentence.ToCharArray();\n\
    \        Array.Sort(chars);\n        foreach (char c in chars) {\n           \
    \ if (IsPrime(c.ToString().Length)) {\n                result += c.ToString();\n\
    \            }\n        }\n        return result;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This is a test\"\
    )).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go for swimming\"\
    )).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there is no place\
    \ available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"\
    Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"\
    go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"\
    here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"\
    is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpffbihfzg.cs(24,17): error CS0103: The name ''IsPrime'' does not exist
    in the current context

    '
  timestamp: 1660015921
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Example\
    \ 2:\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence\
    \ contains only letters\n    public static string WordsInSentence(string sentence)\
    \ {\n        string result = \"\";\n        char[] chars = sentence.ToCharArray();\n\
    \        int[] primes = new int[100];\n        primes[0] = 2;\n        primes[1]\
    \ = 3;\n        primes[2] = 5;\n        primes[3] = 7;\n        primes[4] = 11;\n\
    \        primes[5] = 13;\n        primes[6] = 17;\n        primes[7] = 19;\n \
    \       primes[8] = 23;\n        primes[9] = 29;\n        primes[10] = 41;\n \
    \       primes[11] = 53;\n        primes[12] = 59;\n        primes[13] = 67;\n\
    \        primes[14] = 71;\n        primes[15] = 79;\n        primes[16] = 87;\n\
    \        primes[17] = 97;\n        primes[18] = 103;\n        primes[19] = 109;\
    \ // 10^18\n        primes[20] = 113; // 10^19\n        primes[21] = 116; // 10^20\n\
    \        primes[22] = 121; // 10^21\n        primes[23] = 122; // 10^22\n    \
    \    primes[24] = 123; // 10^23\n        primes[25] = 126; // 10^24\n        primes[26]\
    \ = 127; // 10^25\n        primes[27] = 130; // 10^26\n        primes[28] = 133;\
    \ // 10^27\n        primes[29] = 136; // 10^28\n        primes[30] = 139; // 10^29\n\
    \        primes[31] = 142; // 10^30\n        primes[32] = 147; // 10^31\n    \
    \    primes[33] = 151; // 10^32\n        primes[34] = 157; // 10^33\n        primes[35]\
    \ = 162; // 10^34\n        primes[36] = 167; // 10^35\n        primes[37] = 173;\
    \ // 10^36\n        primes[38] = 179; // 10^37\n        primes[39] = 181; // 10^38\n\
    \        primes[40] = 183; // 10^39\n        primes[41] = 186; // 10^40\n    \
    \    primes[42] = 191; // 10^41\n        primes[43] = 196; // 10^42\n        primes[44]\
    \ = 199; // 10^43\n        primes[45] = 202; // 10^44\n        primes[46] = 205;\
    \ // 10^45\n        primes[47] = 208; // 10^46\n        primes[48] = 211; // 10^47\n\
    \        primes[49] = 214; // 10\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\"\
    )));\n    Debug.Assert(WordsInSentence((\"lets go for swimming\")).Equals((\"\
    go for\")));\n    Debug.Assert(WordsInSentence((\"there is no place available\
    \ here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"\
    Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"\
    go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"\
    here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"\
    is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpac8ynqqk.cs(20,16): warning CS0219: The variable ''result'' is assigned
    but its value is never used

    /tmp/tmpac8ynqqk.cs(19,26): error CS0161: ''Problem.WordsInSentence(string)'':
    not all code paths return a value

    '
  timestamp: 1660015923
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Example\
    \ 2:\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence\
    \ contains only letters\n    public static string WordsInSentence(string sentence)\
    \ {\n        string result = \"\";\n        char[] chars = sentence.ToCharArray();\n\
    \        int[] primes = new int[100];\n        primes[0] = 2;\n        for (int\
    \ i = 1; i < primes.Length; i++) {\n            primes[i] = 1;\n            for\
    \ (int j = i + 1; j < primes.Length; j++) {\n                if (IsPrime(j)) {\n\
    \                    primes[j] = primes[i] * 2;\n                }\n         \
    \   }\n        }\n        for (int i = 0; i < chars.Length; i++) {\n         \
    \   int len = chars[i].ToString().Length;\n            if (primes[len] == 1) {\n\
    \                result += chars[i].ToString();\n            }\n        }\n  \
    \      return result;\n    }\n    public static void Main(string[] args) {\n \
    \   Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\")));\n  \
    \  Debug.Assert(WordsInSentence((\"lets go for swimming\")).Equals((\"go for\"\
    )));\n    Debug.Assert(WordsInSentence((\"there is no place available here\")).Equals((\"\
    there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi I am Hussein\"\
    )).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go for it\"\
    )).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\
    \")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp1mp09d2f.cs(27,21): error CS0103: The name ''IsPrime'' does not exist
    in the current context

    '
  timestamp: 1660015923
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Example\
    \ 2:\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence\
    \ contains only letters\n    public static string WordsInSentence(string sentence)\
    \ {\n        string result = \"\";\n        char[] chars = sentence.ToCharArray();\n\
    \        List<int> primes = new List<int>();\n        foreach (char c in chars)\
    \ {\n            int n = Convert.ToInt32(c);\n            primes.Add(n);\n   \
    \     }\n        primes.Sort();\n        foreach (int n in primes) {\n       \
    \     if (n % 2 == 0) {\n                for (int i = 2; i <= n / 2; i++) {\n\
    \                    if (n % i == 0) {\n                        break;\n     \
    \               }\n                }\n                if (i == n / 2) {\n    \
    \                result += n.ToString() + \" \";\n                }\n        \
    \    }\n        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\"\
    )));\n    Debug.Assert(WordsInSentence((\"lets go for swimming\")).Equals((\"\
    go for\")));\n    Debug.Assert(WordsInSentence((\"there is no place available\
    \ here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"\
    Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"\
    go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"\
    here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"\
    is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpdmmg4a_9.cs(35,21): error CS0103: The name ''i'' does not exist in the
    current context

    '
  timestamp: 1660015923
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Example\
    \ 2:\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence\
    \ contains only letters\n    public static string WordsInSentence(string sentence)\
    \ {\n        string result = \"\";\n        char[] chars = sentence.ToCharArray();\n\
    \        List<int> primes = new List<int>();\n        foreach (char c in chars)\
    \ {\n            int n = Convert.ToInt32(c);\n            if (n % 2 == 0) {\n\
    \                for (int i = 3; i <= Math.Sqrt(n); i += 2) {\n              \
    \      if (n % i == 0) {\n                        primes.Add(i);\n           \
    \             break;\n                    }\n                }\n            }\n\
    \        }\n        foreach (int prime in primes) {\n            result += string.Join(\"\
    \ \", chars.Where(c => Convert.ToInt32(c) == prime).ToArray());\n        }\n \
    \       return result;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\")));\n \
    \   Debug.Assert(WordsInSentence((\"lets go for swimming\")).Equals((\"go for\"\
    )));\n    Debug.Assert(WordsInSentence((\"there is no place available here\")).Equals((\"\
    there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi I am Hussein\"\
    )).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go for it\"\
    )).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\
    \")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n \
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <70ef29e7798547ee870f947db0f49997>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <70ef29e7798547ee870f947db0f49997>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660015924
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Example\
    \ 2:\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence\
    \ contains only letters\n    public static string WordsInSentence(string sentence)\
    \ {\n        string result = \"\";\n        string word = \"\";\n        string\
    \ temp = \"\";\n        char[] chars = sentence.ToCharArray();\n        List<int>\
    \ primes = new List<int>();\n        foreach (char c in chars) {\n           \
    \ primes.Add(c);\n        }\n        primes.Sort();\n        foreach (int prime\
    \ in primes) {\n            int count = 0;\n            foreach (char c in chars)\
    \ {\n                if (c == prime) {\n                    count++;\n       \
    \         }\n            }\n            if (count == 2) {\n                result\
    \ += prime + \" \";\n            }\n        }\n        return result;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"\
    This is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets\
    \ go for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"\
    there is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"\
    Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"\
    go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"\
    here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"\
    is\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <26fd810e8d5846c08972b8dbabef04aa>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <26fd810e8d5846c08972b8dbabef04aa>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660015924
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Example\
    \ 2:\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence\
    \ contains only letters\n    public static string WordsInSentence(string sentence)\
    \ {\n        string result = \"\";\n        char[] chars = sentence.ToCharArray();\n\
    \        Array.Sort(chars);\n        foreach (char c in chars) {\n           \
    \ if (IsPrime(c.ToString().Length)) {\n                result += c.ToString();\n\
    \            }\n        }\n        return result;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This is a test\"\
    )).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go for swimming\"\
    )).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there is no place\
    \ available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"\
    Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"\
    go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"\
    here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"\
    is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpffbihfzg.cs(24,17): error CS0103: The name ''IsPrime'' does not exist
    in the current context

    '
  timestamp: 1660015921
- exit_code: -1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Example\
    \ 2:\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence\
    \ contains only letters\n    public static string WordsInSentence(string sentence)\
    \ {\n        string result = \"\";\n        char[] chars = sentence.ToCharArray();\n\
    \        int[] primes = new int[100];\n        primes[0] = 2;\n        primes[1]\
    \ = 3;\n        for (int i = 2; i < primes.Length; i++) {\n            primes[i]\
    \ = 1;\n        }\n        for (int i = 0; i < chars.Length; i++) {\n        \
    \    int prime = 1;\n            while (prime < primes.Length) {\n           \
    \     if (chars[i] == ' ') {\n                    prime = primes[prime];\n   \
    \             } else {\n                    prime = primes[prime] + 1;\n     \
    \           }\n            }\n            if (prime == primes.Length) {\n    \
    \            result += chars[i];\n            }\n        }\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"\
    This is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets\
    \ go for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"\
    there is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"\
    Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"\
    go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"\
    here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"\
    is\")));\n    }\n\n}\n"
  status: Timeout
  stderr: ''
  stdout: None
  timestamp: 1660015929
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Example\
    \ 2:\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence\
    \ contains only letters\n    public static string WordsInSentence(string sentence)\
    \ {\n        string result = \"\";\n        char[] chars = sentence.ToCharArray();\n\
    \        HashSet<string> set = new HashSet<string>();\n        foreach (char c\
    \ in chars) {\n            int len = c.ToString().Length;\n            if (set.Contains(len))\
    \ {\n                set.Add(len);\n            } else {\n                set.Add(len);\n\
    \                result += c.ToString();\n            }\n        }\n        return\
    \ result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"\
    This is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets\
    \ go for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"\
    there is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"\
    Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"\
    go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"\
    here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"\
    is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpgds9tezd.cs(25,30): error CS1503: Argument 1: cannot convert from ''int''
    to ''string''

    /tmp/tmpgds9tezd.cs(26,25): error CS1503: Argument 1: cannot convert from ''int''
    to ''string''

    /tmp/tmpgds9tezd.cs(28,25): error CS1503: Argument 1: cannot convert from ''int''
    to ''string''

    '
  timestamp: 1660015923
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Example\
    \ 2:\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence\
    \ contains only letters\n    public static string WordsInSentence(string sentence)\
    \ {\n        string result = \"\";\n        char[] chars = sentence.ToCharArray();\n\
    \        List<int> primes = new List<int>();\n        foreach (char c in chars)\
    \ {\n            int n = Convert.ToInt32(c);\n            if (n % 2 == 0) {\n\
    \                primes.Add(n);\n            }\n        }\n        primes.Sort();\n\
    \        foreach (int p in primes) {\n            int count = 0;\n           \
    \ foreach (char c in chars) {\n                int n = Convert.ToInt32(c);\n \
    \               if (n % p == 0) {\n                    count++;\n            \
    \    }\n            }\n            if (count == chars.Length) {\n            \
    \    result += \" \" + p;\n            }\n        }\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"\
    This is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets\
    \ go for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"\
    there is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"\
    Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"\
    go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"\
    here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"\
    is\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <4ffa82084c2344a6bd790f959bd31c5a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <4ffa82084c2344a6bd790f959bd31c5a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660015924
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Example\
    \ 2:\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence\
    \ contains only letters\n    public static string WordsInSentence(string sentence)\
    \ {\n        string result = \"\";\n        string word = \"\";\n        string\
    \ newWord = \"\";\n        bool isPrime = true;\n        foreach (char c in sentence)\
    \ {\n            if (char.IsLetter(c)) {\n                word += c;\n       \
    \     } else {\n                newWord = word;\n                word = \"\";\n\
    \                isPrime = true;\n                for (int i = 0; i < newWord.Length;\
    \ i++) {\n                    char newChar = newWord[i];\n                   \
    \ for (int j = 0; j < word.Length; j++) {\n                        char wordChar\
    \ = word[j];\n                        if (newChar == wordChar) {\n           \
    \                 isPrime = false;\n                            break;\n     \
    \                   }\n                    }\n                }\n            \
    \    if (isPrime) {\n                    result += newWord;\n                }\n\
    \            }\n        }\n        return result;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This is a test\"\
    )).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go for swimming\"\
    )).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there is no place\
    \ available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"\
    Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"\
    go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"\
    here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"\
    is\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <66a05a6abe3b4561ae1970ec9fc54757>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <66a05a6abe3b4561ae1970ec9fc54757>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660015924
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Example\
    \ 2:\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence\
    \ contains only letters\n    public static string WordsInSentence(string sentence)\
    \ {\n        string result = \"\";\n        char[] chars = sentence.ToCharArray();\n\
    \        Array.Sort(chars);\n        bool isPrime = true;\n        for (int i\
    \ = 0; i < chars.Length; i++) {\n            if (isPrime) {\n                if\
    \ (chars[i] != ' ') {\n                    isPrime = false;\n                }\n\
    \            }\n            else {\n                if (chars[i] != ' ') {\n \
    \                   isPrime = true;\n                }\n            }\n      \
    \  }\n        for (int i = 0; i < chars.Length; i++) {\n            if (chars[i]\
    \ == ' ') {\n                for (int j = i + 1; j < chars.Length; j++) {\n  \
    \                  if (chars[j] == ' ') {\n                        for (int k\
    \ = j + 1; k < chars.Length; k++) {\n                            if (chars[k]\
    \ == ' ') {\n                                for (int l = k + 1; l < chars.Length;\
    \ l++) {\n                                    if (chars[l] == ' ') {\n       \
    \                                 for (int m = l + 1; m < chars.Length; m++) {\n\
    \                                            if (chars[m] == ' ') {\n        \
    \                                        for (int n = m + 1; n < chars.Length;\
    \ n++) {\n                                                    if (chars[n] ==\
    \ ' ') {\n                                                        for (int o =\
    \ n + 1; o < chars.Length; o++) {\n                                          \
    \                  if (chars[o] == ' ') {\n                                  \
    \                              for (int p = o + 1; p < chars.Length; p++) {\n\
    \                                                                    if (chars[p]\
    \ == ' ') {\n                                                                \
    \        for (int q = p + 1; q < chars.Length; q++) {\n                      \
    \                                                      if (chars[q] == ' ') {\n\
    \                                                                            \
    \    for (int r = q + 1; r < chars.Length; r++) {\n                          \
    \                                                          if (chars[r] == ' ')\
    \ {\n                                                                        \
    \                for (int s = r + 1; s < chars.Length; s++) {\n              \
    \                                                                            \
    \  if (chars[s] == ' ') {\n                                                  \
    \                                              for (int t = s + 1; t < chars.Length;\
    \ t++) {\n                                                                   \
    \                                 if (chars[t] == ' ') {\n                   \
    \                                                                            \
    \         for (int u = t + 1; u < chars.Length; u++) {\n                     \
    \                                                                            \
    \           if (chars[u] == ' ') {\n                                         \
    \                                                                       for (int\
    \ v = u + 1; v < chars.Length; v++) {\n                                      \
    \                                                                            \
    \  if (chars[v] == ' ') {\n                                                  \
    \                                                                      for (int\
    \ w = v + 1; w < chars.Length; w++) {\n                                      \
    \                                                                            \
    \          if (chars[w] == ' ') {\n                                          \
    \                                                                            \
    \          for (int x = w + 1; x < chars.Length; x++) {\n                    \
    \                                                                            \
    \                                    if (chars[x] == ' ') {\n                \
    \                                                                            \
    \                                            for (int y = x + 1; y < chars.Length;\
    \ y++) {\n                                                                   \
    \                                                                         if (chars[y]\
    \ == ' ') {\n                                                                \
    \                                                                            \
    \    for (int z = y + 1; z < chars.Length; z++) {\n                          \
    \                                                                            \
    \                                              if (chars[z] == ' ') {\n      \
    \                                                                            \
    \                                                                      for (int\
    \ a = \n    }\n    public static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"\
    This is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets\
    \ go for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"\
    there is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"\
    Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"\
    go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"\
    here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"\
    is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp_jq7r0zf.cs(72,165): error CS1525: Invalid expression term ''}''

    /tmp/tmp_jq7r0zf.cs(72,165): error CS1002: ; expected

    /tmp/tmp_jq7r0zf.cs(72,165): error CS1026: ) expected

    /tmp/tmp_jq7r0zf.cs(74,5): error CS0106: The modifier ''public'' is not valid
    for this item

    /tmp/tmp_jq7r0zf.cs(84,2): error CS1513: } expected

    '
  timestamp: 1660015923
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Example\
    \ 2:\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence\
    \ contains only letters\n    public static string WordsInSentence(string sentence)\
    \ {\n        string result = \"\";\n        char[] chars = sentence.ToCharArray();\n\
    \        HashSet<string> primes = new HashSet<string>();\n        foreach (char\
    \ c in chars) {\n            int n = Convert.ToInt32(c);\n            if (n %\
    \ 2 == 0) {\n                primes.Add(n.ToString());\n            }\n      \
    \  }\n        foreach (string prime in primes) {\n            int n = Convert.ToInt32(prime);\n\
    \            int count = 0;\n            while (count < n) {\n               \
    \ string s = \"\";\n                for (int i = 0; i < n; i++) {\n          \
    \          s += chars[i];\n                }\n                if (primes.Contains(s))\
    \ {\n                    result += s;\n                    count++;\n        \
    \        }\n            }\n        }\n        return result;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This\
    \ is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go\
    \ for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"\
    there is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"\
    Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"\
    go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"\
    here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"\
    is\")));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.IndexOutOfRangeException: Index was outside\
    \ the bounds of the array.\n  at Problem.WordsInSentence (System.String sentence)\
    \ [0x00088] in <377a4238432144c7b313a384c81bbd61>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00001] in <377a4238432144c7b313a384c81bbd61>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.IndexOutOfRangeException: Index was outside the bounds of\
    \ the array.\n  at Problem.WordsInSentence (System.String sentence) [0x00088]\
    \ in <377a4238432144c7b313a384c81bbd61>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00001] in <377a4238432144c7b313a384c81bbd61>:0 \n"
  stdout: ''
  timestamp: 1660015924
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Example\
    \ 2:\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence\
    \ contains only letters\n    public static string WordsInSentence(string sentence)\
    \ {\n        string result = \"\";\n        char[] chars = sentence.ToCharArray();\n\
    \        Array.Sort(chars);\n        foreach (char c in chars) {\n           \
    \ int n = Convert.ToInt32(c);\n            if (IsPrime(n)) {\n               \
    \ result += c.ToString();\n            }\n        }\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"\
    This is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets\
    \ go for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"\
    there is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"\
    Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"\
    go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"\
    here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"\
    is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpy0dg9h9t.cs(25,17): error CS0103: The name ''IsPrime'' does not exist
    in the current context

    '
  timestamp: 1660015920
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Example\
    \ 2:\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence\
    \ contains only letters\n    public static string WordsInSentence(string sentence)\
    \ {\n        string result = \"\";\n        string word = \"\";\n        string\
    \ temp = \"\";\n        bool isPrime = true;\n        foreach (char c in sentence)\
    \ {\n            if (char.IsLetter(c)) {\n                word += c;\n       \
    \     } else {\n                temp = word;\n                word = \"\";\n \
    \               isPrime = true;\n                for (int i = 0; i <= temp.Length;\
    \ i++) {\n                    isPrime = IsPrime(temp.Substring(0, i));\n     \
    \               if (isPrime) {\n                        break;\n             \
    \       }\n                }\n                if (isPrime) {\n               \
    \     result += temp;\n                }\n            }\n        }\n        return\
    \ result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"\
    This is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets\
    \ go for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"\
    there is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"\
    Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"\
    go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"\
    here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"\
    is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp6tm8wchx.cs(32,31): error CS0103: The name ''IsPrime'' does not exist
    in the current context

    '
  timestamp: 1660015923
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Example\
    \ 2:\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence\
    \ contains only letters\n    public static string WordsInSentence(string sentence)\
    \ {\n        string result = \"\";\n        char[] chars = sentence.ToCharArray();\n\
    \        HashSet<string> words = new HashSet<string>();\n        foreach (char\
    \ c in chars) {\n            if (char.IsLetter(c)) {\n                string word\
    \ = c.ToString();\n                words.Add(word);\n            }\n        }\n\
    \        foreach (string word in words) {\n            int n = word.Length;\n\
    \            int count = 0;\n            while (n > 1) {\n                if (n\
    \ % 2 == 0) {\n                    n = (n / 2);\n                } else {\n  \
    \                  n = n / 2;\n                    count++;\n                }\n\
    \            }\n            if (count == word.Length) {\n                result\
    \ += word + \" \";\n            }\n        }\n        return result;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"\
    This is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets\
    \ go for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"\
    there is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"\
    Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"\
    go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"\
    here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"\
    is\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <96f23906d45443d3a0b21c20f5b7f5de>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <96f23906d45443d3a0b21c20f5b7f5de>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660015924
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Example\
    \ 2:\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence\
    \ contains only letters\n    public static string WordsInSentence(string sentence)\
    \ {\n        string result = \"\";\n        string word = \"\";\n        foreach\
    \ (char c in sentence) {\n            if (char.IsLetter(c)) {\n              \
    \  word += c;\n            }\n        }\n        char[] charArray = word.ToCharArray();\n\
    \        List<int> primes = new List<int>();\n        foreach (char c in charArray)\
    \ {\n            int n = Convert.ToInt32(c);\n            int count = 0;\n   \
    \         while (n != 1) {\n                if (n % 2 == 0) {\n              \
    \      n = (n / 2);\n                    count++;\n                }\n       \
    \         else {\n                    n = (3 * n) + 1;\n                    count++;\n\
    \                }\n            }\n            if (count == 0) {\n           \
    \     primes.Add(n);\n            }\n        }\n        foreach (int prime in\
    \ primes) {\n            result += prime + \" \";\n        }\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"\
    This is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets\
    \ go for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"\
    there is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"\
    Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"\
    go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"\
    here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"\
    is\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <ad8f854d3d1a44329aa72a0915663ac6>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <ad8f854d3d1a44329aa72a0915663ac6>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660015924
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Example\
    \ 2:\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence\
    \ contains only letters\n    public static string WordsInSentence(string sentence)\
    \ {\n        string result = \"\";\n        char[] chars = sentence.ToCharArray();\n\
    \        List<int> primes = new List<int>();\n        foreach (char c in chars)\
    \ {\n            int n = Convert.ToInt32(c);\n            if (n % 2 == 0) {\n\
    \                for (int i = 3; i <= Math.Sqrt(n); i += 2) {\n              \
    \      if (n % i == 0) {\n                        primes.Add(i);\n           \
    \             break;\n                    }\n                }\n            }\n\
    \        }\n        foreach (int p in primes) {\n            string s = \"\";\n\
    \            int count = 0;\n            foreach (char c in chars) {\n       \
    \         int n = Convert.ToInt32(c);\n                if (n % p == 0) {\n   \
    \                 count++;\n                    s += c;\n                }\n \
    \           }\n            if (count == chars.Length) {\n                result\
    \ += s;\n            }\n        }\n        return result;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This is a test\"\
    )).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go for swimming\"\
    )).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there is no place\
    \ available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"\
    Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"\
    go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"\
    here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"\
    is\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d8af0423bb784a3b855c0a1506cbc790>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d8af0423bb784a3b855c0a1506cbc790>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660015924
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Example\
    \ 2:\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence\
    \ contains only letters\n    public static string WordsInSentence(string sentence)\
    \ {\n        string result = \"\";\n        string word = \"\";\n        bool\
    \ isPrime = true;\n        foreach (char c in sentence) {\n            int length\
    \ = Convert.ToInt32(c);\n            if (length == 0)\n                continue;\n\
    \            isPrime = true;\n            for (int i = 1; i < length; i++) {\n\
    \                if (length % i == 0) {\n                    isPrime = false;\n\
    \                    break;\n                }\n            }\n            if\
    \ (isPrime) {\n                word += c;\n            }\n        }\n        foreach\
    \ (char c in word) {\n            int length = Convert.ToInt32(c);\n         \
    \   if (length == 0)\n                continue;\n            isPrime = true;\n\
    \            for (int i = 1; i < length; i++) {\n                if (length %\
    \ i == 0) {\n                    isPrime = false;\n                    break;\n\
    \                }\n            }\n            if (isPrime) {\n              \
    \  result += c;\n            }\n        }\n        return result;\n    }\n   \
    \ public static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"\
    This is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets\
    \ go for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"\
    there is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"\
    Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"\
    go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"\
    here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"\
    is\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a7ae70234ca04320a7285e86be05bff3>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a7ae70234ca04320a7285e86be05bff3>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660015924
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Example\
    \ 2:\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence\
    \ contains only letters\n    public static string WordsInSentence(string sentence)\
    \ {\n        string result = \"\";\n        string word = \"\";\n        bool\
    \ isPrime = true;\n        int length = sentence.Length;\n        for (int i =\
    \ 0; i < length; i++) {\n            char c = sentence[i];\n            int count\
    \ = 0;\n            while (c != ' ') {\n                count++;\n           \
    \     c = sentence[++i];\n            }\n            if (count % 2 == 0) {\n \
    \               isPrime = false;\n            }\n            if (isPrime) {\n\
    \                word += c;\n            }\n        }\n        char[] chars =\
    \ word.ToCharArray();\n        Array.Sort(chars);\n        string newWord = \"\
    \";\n        for (int i = 0; i < chars.Length; i++) {\n            if (chars[i]\
    \ == ' ') {\n                newWord += chars[i];\n            }\n        }\n\
    \        for (int i = 0; i < chars.Length; i++) {\n            if (chars[i] ==\
    \ ' ') {\n                for (int j = i + 1; j < chars.Length; j++) {\n     \
    \               if (chars[j] == ' ') {\n                        newWord += chars[i];\n\
    \                        break;\n                    }\n                }\n  \
    \          }\n        }\n        for (int i = 0; i < chars.Length; i++) {\n  \
    \          if (chars[i] == ' ') {\n                for (int j = i + 1; j < chars.Length;\
    \ j++) {\n                    if (chars[j] == ' ') {\n                       \
    \ newWord += chars[i];\n                        break;\n                    }\n\
    \                }\n            }\n        }\n        for (int i = 0; i < chars.Length;\
    \ i++) {\n            if (chars[i] == ' ') {\n                for (int j = i +\
    \ 1; j < chars.Length; j++) {\n                    if (chars[j] == ' ') {\n  \
    \                      newWord += chars[i];\n                        break;\n\
    \                    }\n                }\n            }\n        }\n        for\
    \ (int i = 0; i < chars.Length; i++) {\n            if (chars[i] == ' ') {\n \
    \               for (int j = i + 1; j < chars.Length; j++) {\n               \
    \     if (chars[j] == ' ') {\n                        newWord += chars[i];\n \
    \                       break;\n                    }\n                }\n   \
    \         }\n        }\n        for (int i = 0; i < chars.Length; i++) {\n   \
    \         if (chars[i] == ' ') {\n                for (int j = i + 1; j < chars.Length;\
    \ j++) {\n                    if (chars[j] == ' ') {\n                       \
    \ newWord += chars[i];\n                        break;\n                    }\n\
    \                }\n            }\n        }\n        for (int i = 0; i < chars.Length;\
    \ i++) {\n            if (chars[i] == ' ') {\n                for (int j = i +\
    \ 1; j < chars.Length; j++) {\n                    if (chars[j] == ' ') {\n  \
    \                      newWord += chars[i];\n                        break;\n\
    \                    }\n                }\n            }\n        }\n        for\
    \ (int i = 0; i < chars.Length; i++) {\n            if (chars[i] == ' ') {\n \
    \               for (int j = i + 1; j < chars.Length; j++) {\n               \
    \     if (chars[j] == ' ') {\n                        newWord += chars[i];\n \
    \                       break;\n                    }\n                }\n   \
    \         }\n        }\n        for (int i = 0; i < chars.Length; i++) {\n   \
    \         if (char\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"\
    This is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets\
    \ go for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"\
    there is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"\
    Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"\
    go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"\
    here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"\
    is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpog5md46x.cs(117,17): error CS1525: Invalid expression term ''char''

    /tmp/tmpog5md46x.cs(117,21): error CS1026: ) expected

    /tmp/tmpog5md46x.cs(117,21): error CS1525: Invalid expression term ''}''

    /tmp/tmpog5md46x.cs(117,21): error CS1002: ; expected

    /tmp/tmpog5md46x.cs(119,5): error CS0106: The modifier ''public'' is not valid
    for this item

    /tmp/tmpog5md46x.cs(129,2): error CS1513: } expected

    '
  timestamp: 1660015923
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Example\
    \ 2:\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence\
    \ contains only letters\n    public static string WordsInSentence(string sentence)\
    \ {\n        string result = \"\";\n        string word = \"\";\n        string\
    \ temp = \"\";\n        char[] chars = sentence.ToCharArray();\n        foreach\
    \ (char c in chars) {\n            if (char.IsLetter(c)) {\n                word\
    \ += c;\n            } else {\n                temp = word;\n                word\
    \ = \"\";\n                if (IsPrime(temp.Length)) {\n                    result\
    \ += temp;\n                }\n            }\n        }\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"\
    This is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets\
    \ go for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"\
    there is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"\
    Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"\
    go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"\
    here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"\
    is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpiedzyw4c.cs(30,21): error CS0103: The name ''IsPrime'' does not exist
    in the current context

    '
  timestamp: 1660015924
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Example\
    \ 2:\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence\
    \ contains only letters\n    public static string WordsInSentence(string sentence)\
    \ {\n        string result = \"\";\n        char[] chars = sentence.ToCharArray();\n\
    \        HashSet<string> words = new HashSet<string>();\n        foreach (char\
    \ c in chars) {\n            if (char.IsLetter(c)) {\n                string word\
    \ = c.ToString();\n                if (words.Contains(word)) {\n             \
    \       result += \" \" + word;\n                } else {\n                  \
    \  words.Add(word);\n                }\n            }\n        }\n        string\
    \ newWords = \"\";\n        foreach (string word in words) {\n            int\
    \ length = word.Length;\n            if (length == 1) {\n                newWords\
    \ += word;\n            } else {\n                bool isPrime = true;\n     \
    \           for (int i = 2; i <= Math.Sqrt(length); i++) {\n                 \
    \   if (length % i == 0) {\n                        isPrime = false;\n       \
    \                 break;\n                    }\n                }\n         \
    \       if (isPrime) {\n                    newWords += word;\n              \
    \  }\n            }\n        }\n        return newWords.Trim();\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This\
    \ is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go\
    \ for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"\
    there is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"\
    Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"\
    go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"\
    here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"\
    is\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <71255053594c4515bd29e790ef015674>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <71255053594c4515bd29e790ef015674>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660015924
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Example\
    \ 2:\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence\
    \ contains only letters\n    public static string WordsInSentence(string sentence)\
    \ {\n        string result = \"\";\n        List<string> words = new List<string>();\n\
    \        foreach (string word in sentence.Split(' '))\n        {\n           \
    \ words.Add(word);\n        }\n        foreach (string word in words)\n      \
    \  {\n            int length = word.Length;\n            int count = 0;\n    \
    \        while (count < length)\n            {\n                string temp =\
    \ word.Substring(0, count);\n                if (IsPrime(temp))\n            \
    \    {\n                    result += temp + \" \";\n                    count++;\n\
    \                }\n                else\n                {\n                \
    \    break;\n                }\n            }\n        }\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"\
    This is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets\
    \ go for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"\
    there is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"\
    Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"\
    go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"\
    here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"\
    is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpk8ggtqjz.cs(33,21): error CS0103: The name ''IsPrime'' does not exist
    in the current context

    '
  timestamp: 1660015924
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Example\
    \ 2:\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence\
    \ contains only letters\n    public static string WordsInSentence(string sentence)\
    \ {\n        string result = \"\";\n        List<string> words = new List<string>();\n\
    \        foreach (string word in sentence.Split(' '))\n        {\n           \
    \ words.Add(word);\n        }\n        foreach (string word in words)\n      \
    \  {\n            int length = word.Length;\n            if (length == 1)\n  \
    \          {\n                result += \"1\";\n            }\n            else\
    \ if (length == 2 && IsPrime(length))\n            {\n                result +=\
    \ \"2\";\n            }\n            else if (length == 3 && IsPrime(length))\n\
    \            {\n                result += \"3\";\n            }\n            else\
    \ if (length == 4 && IsPrime(length))\n            {\n                result +=\
    \ \"4\";\n            }\n            else if (length == 5 && IsPrime(length))\n\
    \            {\n                result += \"5\";\n            }\n            else\
    \ if (length == 6 && IsPrime(length))\n            {\n                result +=\
    \ \"6\";\n            }\n            else if (length == 7 && IsPrime(length))\n\
    \            {\n                result += \"7\";\n            }\n            else\
    \ if (length == 8 && IsPrime(length))\n            {\n                result +=\
    \ \"8\";\n            }\n            else if (length == 9 && IsPrime(length))\n\
    \            {\n                result += \"9\";\n            }\n            else\
    \ if (length == 10 && IsPrime(length))\n            {\n                result\
    \ += \"10\";\n            }\n            else if (length == 11 && IsPrime(length))\n\
    \            {\n                result += \"11\";\n            }\n           \
    \ else if (length == 12 && IsPrime(length))\n            {\n                result\
    \ += \"12\";\n            }\n            else if (length == 13 && IsPrime(length))\n\
    \            {\n                result += \"13\";\n            }\n           \
    \ else if (length == 14 && IsPrime(length))\n            {\n                result\
    \ += \"14\";\n            }\n            else if (length == 15 && IsPrime(length))\n\
    \            {\n                result += \"15\";\n            }\n           \
    \ else if (length == 16 && IsPrime(length))\n            {\n                result\
    \ += \"16\";\n            }\n            else if (length == 17 && IsPrime(length))\n\
    \            {\n                result += \"17\";\n            }\n           \
    \ else if (length == 18 && IsPrime(length))\n            {\n                result\
    \ += \"18\";\n            }\n            else if (length == 19 && IsPrime(length))\n\
    \            {\n                result += \"19\";\n            }\n           \
    \ else if (length == 20 && IsPrime(length))\n            {\n                result\
    \ += \"20\";\n            }\n            else if (length == 21 && IsPrime(length))\n\
    \            {\n                result += \"21\";\n            }\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This\
    \ is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go\
    \ for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"\
    there is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"\
    Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"\
    go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"\
    here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"\
    is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp1w5wn5da.cs(114,5): error CS0106: The modifier ''public'' is not valid
    for this item

    /tmp/tmp1w5wn5da.cs(124,2): error CS1513: } expected

    '
  timestamp: 1660015924
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Example\
    \ 2:\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence\
    \ contains only letters\n    public static string WordsInSentence(string sentence)\
    \ {\n        string result = \"\";\n        char[] charArray = sentence.ToCharArray();\n\
    \        Array.Sort(charArray);\n        string newSentence = \"\";\n        for\
    \ (int i = 0; i < charArray.Length; i++) {\n            if (charArray[i] == '\
    \ ') {\n                for (int j = i; j < charArray.Length; j++) {\n       \
    \             if (charArray[j] == ' ') {\n                        break;\n   \
    \                 }\n                }\n                newSentence = charArray[i].ToString()\
    \ + newSentence;\n                i = j;\n            }\n        }\n        char[]\
    \ newCharArray = newSentence.ToCharArray();\n        Array.Sort(newCharArray);\n\
    \        for (int i = 0; i < newCharArray.Length; i++) {\n            if (newCharArray[i]\
    \ == ' ') {\n                for (int j = i; j < newCharArray.Length; j++) {\n\
    \                    if (newCharArray[j] == ' ') {\n                        break;\n\
    \                    }\n                }\n                newCharArray[i] = newCharArray[j];\n\
    \                i = j;\n            }\n        }\n        string newResult =\
    \ \"\";\n        for (int i = 0; i < newCharArray.Length; i++) {\n           \
    \ if (newCharArray[i] == ' ') {\n                for (int j = i; j < newCharArray.Length;\
    \ j++) {\n                    if (newCharArray[j] == ' ') {\n                \
    \        break;\n                    }\n                }\n                newResult\
    \ = newCharArray[i].ToString() + newResult;\n                i = j;\n        \
    \    }\n        }\n        result = newResult;\n        return result;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"\
    This is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets\
    \ go for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"\
    there is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"\
    Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"\
    go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"\
    here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"\
    is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpbe0htutl.cs(32,21): error CS0103: The name ''j'' does not exist in the
    current context

    /tmp/tmpbe0htutl.cs(44,48): error CS0103: The name ''j'' does not exist in the
    current context

    /tmp/tmpbe0htutl.cs(45,21): error CS0103: The name ''j'' does not exist in the
    current context

    /tmp/tmpbe0htutl.cs(57,21): error CS0103: The name ''j'' does not exist in the
    current context

    '
  timestamp: 1660015924
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Example\
    \ 2:\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence\
    \ contains only letters\n    public static string WordsInSentence(string sentence)\
    \ {\n        string result = \"\";\n        foreach (string word in sentence.Split('\
    \ '))\n        {\n            int length = word.Length;\n            if (length\
    \ == 1)\n            {\n                result += word;\n            }\n     \
    \       else if (length == 2 && IsPrime(Convert.ToInt32(word)))\n            {\n\
    \                result += word;\n            }\n            else if (length ==\
    \ 3 && IsPrime(Convert.ToInt32(word)))\n            {\n                result\
    \ += word;\n            }\n            else if (length == 4 && IsPrime(Convert.ToInt32(word)))\n\
    \            {\n                result += word;\n            }\n            else\
    \ if (length == 5 && IsPrime(Convert.ToInt32(word)))\n            {\n        \
    \        result += word;\n            }\n            else if (length == 6 && IsPrime(Convert.ToInt32(word)))\n\
    \            {\n                result += word;\n            }\n            else\
    \ if (length == 7 && IsPrime(Convert.ToInt32(word)))\n            {\n        \
    \        result += word;\n            }\n            else if (length == 8 && IsPrime(Convert.ToInt32(word)))\n\
    \            {\n                result += word;\n            }\n            else\
    \ if (length == 9 && IsPrime(Convert.ToInt32(word)))\n            {\n        \
    \        result += word;\n            }\n            else if (length == 10 &&\
    \ IsPrime(Convert.ToInt32(word)))\n            {\n                result += word;\n\
    \            }\n            else if (length == 11 && IsPrime(Convert.ToInt32(word)))\n\
    \            {\n                result += word;\n            }\n            else\
    \ if (length == 12 && IsPrime(Convert.ToInt32(word)))\n            {\n       \
    \         result += word;\n            }\n            else if (length == 13 &&\
    \ IsPrime(Convert.ToInt32(word)))\n            {\n                result += word;\n\
    \            }\n            else if (length == 14 && IsPrime(Convert.ToInt32(word)))\n\
    \            {\n                result += word;\n            }\n            else\
    \ if (length == 15 && IsPrime(Convert.ToInt32(word)))\n            {\n       \
    \         result += word;\n            }\n            else if (length == 16 &&\
    \ IsPrime(Convert.ToInt32(word)))\n            {\n                result += word;\n\
    \            }\n            else if (length == 17 && IsPrime(Convert.ToInt32(word)))\n\
    \            {\n                result += word;\n            }\n            else\
    \ if (length == 18 && IsPrime(Convert.ToInt32(word)))\n            {\n       \
    \         result += word;\n            }\n            else if (length == 19 &&\
    \ IsPrime(Convert.ToInt32(word)))\n            {\n                result += word;\n\
    \            }\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"\
    This is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets\
    \ go for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"\
    there is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"\
    Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"\
    go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"\
    here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"\
    is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpttt22xcl.cs(101,5): error CS0106: The modifier ''public'' is not valid
    for this item

    /tmp/tmpttt22xcl.cs(111,2): error CS1513: } expected

    '
  timestamp: 1660015924
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Example\
    \ 2:\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence\
    \ contains only letters\n    public static string WordsInSentence(string sentence)\
    \ {\n        string result = \"\";\n        char[] chars = sentence.ToCharArray();\n\
    \        List<int> primes = new List<int>();\n        foreach (char c in chars)\
    \ {\n            int n = Convert.ToInt32(c);\n            if (n % 2 == 0) {\n\
    \                for (int i = 3; i <= Math.Sqrt(n); i += 2) {\n              \
    \      if (n % i == 0) {\n                        primes.Add(i);\n           \
    \             break;\n                    }\n                }\n            }\n\
    \        }\n        foreach (int p in primes) {\n            string s = \"\";\n\
    \            for (int i = 0; i < chars.Length; i++) {\n                if (chars[i]\
    \ == ' ') {\n                    s += chars[i];\n                }\n         \
    \   }\n            int n = Convert.ToInt32(s);\n            if (n % p == 0) {\n\
    \                result += s;\n            }\n        }\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"\
    This is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets\
    \ go for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"\
    there is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"\
    Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"\
    go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"\
    here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"\
    is\")));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.FormatException: Input string was not in\
    \ a correct format.\n  at System.Number.ThrowOverflowOrFormatException (System.Boolean\
    \ overflow, System.String overflowResourceKey) [0x0001a] in <aa5dff9b31c64fce86559bbbf6cd364f>:0\
    \ \n  at System.Number.ParseInt32 (System.ReadOnlySpan`1[T] value, System.Globalization.NumberStyles\
    \ styles, System.Globalization.NumberFormatInfo info) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0\
    \ \n  at System.Int32.Parse (System.String s, System.IFormatProvider provider)\
    \ [0x00017] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at System.Convert.ToInt32\
    \ (System.String value) [0x0000b] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n \
    \ at Problem.WordsInSentence (System.String sentence) [0x000e2] in <c118dda7b7bb4d4990865a67578b857d>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00001] in <c118dda7b7bb4d4990865a67578b857d>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.FormatException: Input string was\
    \ not in a correct format.\n  at System.Number.ThrowOverflowOrFormatException\
    \ (System.Boolean overflow, System.String overflowResourceKey) [0x0001a] in <aa5dff9b31c64fce86559bbbf6cd364f>:0\
    \ \n  at System.Number.ParseInt32 (System.ReadOnlySpan`1[T] value, System.Globalization.NumberStyles\
    \ styles, System.Globalization.NumberFormatInfo info) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0\
    \ \n  at System.Int32.Parse (System.String s, System.IFormatProvider provider)\
    \ [0x00017] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at System.Convert.ToInt32\
    \ (System.String value) [0x0000b] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n \
    \ at Problem.WordsInSentence (System.String sentence) [0x000e2] in <c118dda7b7bb4d4990865a67578b857d>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00001] in <c118dda7b7bb4d4990865a67578b857d>:0\
    \ \n"
  stdout: ''
  timestamp: 1660015924
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Example\
    \ 2:\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence\
    \ contains only letters\n    public static string WordsInSentence(string sentence)\
    \ {\n        string result = \"\";\n        string word = \"\";\n        string\
    \ temp = \"\";\n        bool isPrime = true;\n        foreach (char c in sentence)\
    \ {\n            isPrime = true;\n            foreach (char d in sentence) {\n\
    \                if (c == d) {\n                    isPrime = false;\n       \
    \             break;\n                }\n            }\n            if (isPrime)\
    \ {\n                word += c;\n            }\n        }\n        temp = word;\n\
    \        foreach (char c in word) {\n            isPrime = true;\n           \
    \ foreach (char d in word) {\n                if (c == d) {\n                \
    \    isPrime = false;\n                    break;\n                }\n       \
    \     }\n            if (isPrime) {\n                result += temp;\n       \
    \         temp = \"\";\n            }\n        }\n        return result;\n   \
    \ }\n    public static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"\
    This is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets\
    \ go for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"\
    there is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"\
    Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"\
    go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"\
    here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"\
    is\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <5fd61dffdb444b3fbc54c3d5597e7787>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <5fd61dffdb444b3fbc54c3d5597e7787>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660015924
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Example\
    \ 2:\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence\
    \ contains only letters\n    public static string WordsInSentence(string sentence)\
    \ {\n        string result = \"\";\n        List<string> words = new List<string>();\n\
    \        foreach (char c in sentence) {\n            if (char.IsLetter(c)) {\n\
    \                words.Add(c.ToString());\n            }\n        }\n        foreach\
    \ (string word in words) {\n            int length = word.Length;\n          \
    \  int count = 0;\n            while (count < length) {\n                string\
    \ temp = word.Substring(0, count);\n                for (int i = 2; i <= Math.Sqrt(length);\
    \ i++) {\n                    if (temp.Length % i == 0) {\n                  \
    \      break;\n                    }\n                }\n                if (i\
    \ == Math.Sqrt(length)) {\n                    result += temp;\n             \
    \   }\n                count++;\n            }\n        }\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"\
    This is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets\
    \ go for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"\
    there is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"\
    Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"\
    go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"\
    here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"\
    is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpe_r7tbxh.cs(37,21): error CS0103: The name ''i'' does not exist in the
    current context

    '
  timestamp: 1660015924
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Example\
    \ 2:\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence\
    \ contains only letters\n    public static string WordsInSentence(string sentence)\
    \ {\n        string result = \"\";\n        string word = \"\";\n        string\
    \ temp = \"\";\n        char[] chars = sentence.ToCharArray();\n        foreach\
    \ (char c in chars) {\n            word += c;\n        }\n        char[] chars1\
    \ = word.ToCharArray();\n        foreach (char c in chars1) {\n            temp\
    \ = c + temp;\n        }\n        char[] chars2 = temp.ToCharArray();\n      \
    \  foreach (char c in chars2) {\n            result += c;\n        }\n       \
    \ return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"\
    This is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets\
    \ go for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"\
    there is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"\
    Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"\
    go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"\
    here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"\
    is\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <e5f3416bb9994862a41c3498996a2c4f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <e5f3416bb9994862a41c3498996a2c4f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660015924
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Example\
    \ 2:\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence\
    \ contains only letters\n    public static string WordsInSentence(string sentence)\
    \ {\n        string result = \"\";\n        char[] chars = sentence.ToCharArray();\n\
    \        Array.Sort(chars);\n        string word = \"\";\n        bool isPrime\
    \ = true;\n        for (int i = 0; i < chars.Length; i++) {\n            int length\
    \ = chars[i].ToString().Length;\n            if (length == 1) {\n            \
    \    isPrime = false;\n            }\n            if (isPrime) {\n           \
    \     for (int j = 2; j < length; j++) {\n                    if (chars[i].ToString().Substring(j,\
    \ 1) == chars[j].ToString()) {\n                        isPrime = false;\n   \
    \                     break;\n                    }\n                }\n     \
    \       }\n            if (isPrime) {\n                word += chars[i].ToString();\n\
    \            }\n        }\n        result = word;\n        return result;\n  \
    \  }\n    public static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"\
    This is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets\
    \ go for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"\
    there is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"\
    Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"\
    go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"\
    here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"\
    is\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <dcb5198908fd45f59c4519f5fe1d26b4>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <dcb5198908fd45f59c4519f5fe1d26b4>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660015924
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Example\
    \ 2:\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence\
    \ contains only letters\n    public static string WordsInSentence(string sentence)\
    \ {\n        string result = \"\";\n        char[] chars = sentence.ToCharArray();\n\
    \        List<int> primes = new List<int>();\n        foreach (char c in chars)\
    \ {\n            int prime = PrimeNumber(c);\n            if (prime > 1) {\n \
    \               primes.Add(prime);\n            }\n        }\n        primes.Sort();\n\
    \        foreach (int prime in primes) {\n            result += string.Join(\"\
    \ \", chars.Where(c => PrimeNumber(c) == prime).ToArray());\n        }\n     \
    \   return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"\
    This is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets\
    \ go for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"\
    there is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"\
    Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"\
    go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"\
    here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"\
    is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpu_knrneb.cs(24,25): error CS0103: The name ''PrimeNumber'' does not exist
    in the current context

    /tmp/tmpu_knrneb.cs(31,57): error CS0103: The name ''PrimeNumber'' does not exist
    in the current context

    '
  timestamp: 1660015924
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Example\
    \ 2:\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence\
    \ contains only letters\n    public static string WordsInSentence(string sentence)\
    \ {\n        string result = \"\";\n        char[] charArray = sentence.ToCharArray();\n\
    \        Array.Sort(charArray);\n        foreach (char c in charArray) {\n   \
    \         int count = 0;\n            int i = 1;\n            while (i < charArray.Length)\
    \ {\n                if (charArray[i] == c) {\n                    count++;\n\
    \                    i++;\n                } else {\n                    break;\n\
    \                }\n            }\n            if (count == 2) {\n           \
    \     result += c;\n            }\n        }\n        return result;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"\
    This is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets\
    \ go for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"\
    there is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"\
    Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"\
    go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"\
    here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"\
    is\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <db882cb615f947d5b0f5e9c512f344fc>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <db882cb615f947d5b0f5e9c512f344fc>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660015924
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Example\
    \ 2:\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence\
    \ contains only letters\n    public static string WordsInSentence(string sentence)\
    \ {\n        string result = \"\";\n        string temp = \"\";\n        char[]\
    \ charArray = sentence.ToCharArray();\n        List<int> primes = new List<int>();\n\
    \        foreach (char c in charArray) {\n            int n = Convert.ToInt32(c);\n\
    \            if (n % 2 == 0) {\n                primes.Add(n);\n            }\n\
    \        }\n        primes.Sort();\n        foreach (int p in primes) {\n    \
    \        if (p > 1) {\n                for (int i = 2; i <= p; i++) {\n      \
    \              if (p % i == 0) {\n                        temp = temp + i + \"\
    \ \";\n                    }\n                }\n                if (temp.Length\
    \ > 0) {\n                    result = result + temp + \" \";\n              \
    \      temp = \"\";\n                }\n            }\n        }\n        return\
    \ result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"\
    This is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets\
    \ go for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"\
    there is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"\
    Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"\
    go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"\
    here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"\
    is\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <21eec3f948be4b199daf63466495d108>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <21eec3f948be4b199daf63466495d108>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660015924
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Example\
    \ 2:\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence\
    \ contains only letters\n    public static string WordsInSentence(string sentence)\
    \ {\n        string result = \"\";\n        char[] chars = sentence.ToCharArray();\n\
    \        HashSet<string> words = new HashSet<string>();\n        foreach (char\
    \ c in chars) {\n            if (char.IsLetter(c)) {\n                string word\
    \ = c.ToString();\n                words.Add(word);\n            }\n        }\n\
    \        foreach (string word in words) {\n            int length = word.Length;\n\
    \            bool isPrime = true;\n            for (int i = 2; i <= Math.Sqrt(length);\
    \ i++) {\n                if (length % i == 0) {\n                    isPrime\
    \ = false;\n                    break;\n                }\n            }\n   \
    \         if (isPrime) {\n                result += word + \" \";\n          \
    \  }\n        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\"\
    )));\n    Debug.Assert(WordsInSentence((\"lets go for swimming\")).Equals((\"\
    go for\")));\n    Debug.Assert(WordsInSentence((\"there is no place available\
    \ here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"\
    Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"\
    go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"\
    here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"\
    is\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <6dff44bb1ecd467ba397b6c7537a25a2>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <6dff44bb1ecd467ba397b6c7537a25a2>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660015921
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Example\
    \ 2:\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence\
    \ contains only letters\n    public static string WordsInSentence(string sentence)\
    \ {\n        string result = \"\";\n        string word = \"\";\n        string\
    \ temp = \"\";\n        char[] chars = sentence.ToCharArray();\n        for (int\
    \ i = 0; i < chars.Length; i++) {\n            word = chars[i].ToString();\n \
    \           temp = word.ToLower();\n            if (IsPrime(temp)) {\n       \
    \         result += temp + \" \";\n            }\n        }\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"\
    This is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets\
    \ go for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"\
    there is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"\
    Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"\
    go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"\
    here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"\
    is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp05p7jwhf.cs(27,17): error CS0103: The name ''IsPrime'' does not exist
    in the current context

    '
  timestamp: 1660015924
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Example\
    \ 2:\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence\
    \ contains only letters\n    public static string WordsInSentence(string sentence)\
    \ {\n        string result = \"\";\n        char[] chars = sentence.ToCharArray();\n\
    \        Array.Sort(chars);\n        string primes = \"\";\n        bool isPrime\
    \ = true;\n        foreach (char c in chars) {\n            if (isPrime) {\n \
    \               primes += c;\n                isPrime = false;\n            }\n\
    \            int length = primes.Length;\n            int count = 0;\n       \
    \     while (count < length) {\n                string prime = primes.Substring(count,\
    \ 1);\n                if (IsPrime(prime)) {\n                    result += prime\
    \ + \" \";\n                    isPrime = true;\n                    break;\n\
    \                }\n                count++;\n            }\n        }\n     \
    \   return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"\
    This is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets\
    \ go for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"\
    there is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"\
    Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"\
    go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"\
    here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"\
    is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp_1drscs_.cs(34,21): error CS0103: The name ''IsPrime'' does not exist
    in the current context

    '
  timestamp: 1660015924
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Example\
    \ 2:\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence\
    \ contains only letters\n    public static string WordsInSentence(string sentence)\
    \ {\n        string result = \"\";\n        char[] chars = sentence.ToCharArray();\n\
    \        List<int> primes = new List<int>();\n        foreach (char c in chars)\
    \ {\n            int n = Convert.ToInt32(c);\n            if (n % 2 == 0) {\n\
    \                primes.Add(n);\n            }\n        }\n        primes.Sort();\n\
    \        foreach (int p in primes) {\n            int count = 0;\n           \
    \ foreach (char c in chars) {\n                if (Convert.ToInt32(c) == p) {\n\
    \                    count++;\n                }\n            }\n            if\
    \ (count == 0) {\n                result += \" \" + Convert.ToString(p);\n   \
    \         }\n        }\n        return result;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This is a test\"\
    )).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go for swimming\"\
    )).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there is no place\
    \ available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"\
    Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"\
    go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"\
    here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"\
    is\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <955bf36ddf0d4f1cb89f7e47a7ba15b8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <955bf36ddf0d4f1cb89f7e47a7ba15b8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660015924
- exit_code: -1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Example\
    \ 2:\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence\
    \ contains only letters\n    public static string WordsInSentence(string sentence)\
    \ {\n        string result = \"\";\n        char[] chars = sentence.ToCharArray();\n\
    \        List<int> primes = new List<int>();\n        foreach (char c in chars)\
    \ {\n            int n = Convert.ToInt32(c);\n            if (n % 2 == 0) {\n\
    \                for (int i = 3; i <= Math.Sqrt(n); i += 2) {\n              \
    \      if (n % i == 0) {\n                        primes.Add(i);\n           \
    \             break;\n                    }\n                }\n            }\n\
    \        }\n        foreach (int p in primes) {\n            string s = \"\";\n\
    \            int n = p;\n            while (n != 1) {\n                s = s +\
    \ Convert.ToChar(n);\n                n = n / 10;\n            }\n           \
    \ result = result + s + \" \";\n        }\n        return result;\n    }\n   \
    \ public static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"\
    This is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets\
    \ go for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"\
    there is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"\
    Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"\
    go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"\
    here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"\
    is\")));\n    }\n\n}\n"
  status: Timeout
  stderr: ''
  stdout: None
  timestamp: 1660015929
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Example\
    \ 2:\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence\
    \ contains only letters\n    public static string WordsInSentence(string sentence)\
    \ {\n        string result = \"\";\n        char[] chars = sentence.ToCharArray();\n\
    \        HashSet<string> set = new HashSet<string>();\n        foreach (char c\
    \ in chars) {\n            string s = c.ToString();\n            if (set.Contains(s))\
    \ {\n                set.Remove(s);\n            } else {\n                set.Add(s);\n\
    \            }\n        }\n        foreach (string s in set) {\n            int\
    \ n = s.Length;\n            if (n % 2 == 0) {\n                for (int i = 1;\
    \ i <= n; i++) {\n                    if (n % i == 0) {\n                    \
    \    result += s;\n                        break;\n                    }\n   \
    \             }\n            }\n        }\n        return result;\n    }\n   \
    \ public static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"\
    This is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets\
    \ go for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"\
    there is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"\
    Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"\
    go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"\
    here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"\
    is\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <54d065699cf245b69f5f4ee71cdc50fe>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <54d065699cf245b69f5f4ee71cdc50fe>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660015925
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Example\
    \ 2:\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence\
    \ contains only letters\n    public static string WordsInSentence(string sentence)\
    \ {\n        string result = \"\";\n        char[] chars = sentence.ToCharArray();\n\
    \        Array.Sort(chars);\n        foreach (char c in chars) {\n           \
    \ int len = c.ToString().Length;\n            if (len == 1) continue;\n      \
    \      if (len == 2 && c == 'a') continue;\n            if (len == 2 && c == 'e')\
    \ continue;\n            if (len == 2 && c == 'i') continue;\n            if (len\
    \ == 2 && c == 'o') continue;\n            if (len == 2 && c == 'u') continue;\n\
    \            if (len == 3 && c == 'a') continue;\n            if (len == 3 &&\
    \ c == 'e') continue;\n            if (len == 3 && c == 'i') continue;\n     \
    \       if (len == 3 && c == 'o') continue;\n            if (len == 3 && c ==\
    \ 'u') continue;\n            if (len == 4 && c == 'a') continue;\n          \
    \  if (len == 4 && c == 'e') continue;\n            if (len == 4 && c == 'i')\
    \ continue;\n            if (len == 4 && c == 'o') continue;\n            if (len\
    \ == 4 && c == 'u') continue;\n            if (len == 5 && c == 'a') continue;\n\
    \            if (len == 5 && c == 'e') continue;\n            if (len == 5 &&\
    \ c == 'i') continue;\n            if (len == 5 && c == 'o') continue;\n     \
    \       if (len == 5 && c == 'u') continue;\n            if (len == 6 && c ==\
    \ 'a') continue;\n            if (len == 6 && c == 'e') continue;\n          \
    \  if (len == 6 && c == 'i') continue;\n            if (len == 6 && c == 'o')\
    \ continue;\n            if (len == 6 && c == 'u') continue;\n            if (len\
    \ == 7 && c == 'a') continue;\n            if (len == 7 && c == 'e') continue;\n\
    \            if (len == 7 && c == 'i') continue;\n            if (len == 7 &&\
    \ c == 'o') continue;\n            if (len == 7 && c == 'u') continue;\n     \
    \       if (len == 8 && c == 'a') continue;\n            if (len == 8 && c ==\
    \ 'e') continue;\n            if (len == 8 && c == 'i') continue;\n          \
    \  if (len == 8 && c == 'o') continue;\n            if (len == 8 && c == 'u')\
    \ continue;\n            if (len == 9 && c == 'a') continue;\n            if (len\
    \ == 9 && c == 'e') continue;\n            if (len == 9 && c == 'i') continue;\n\
    \            if (len == 9 && c == 'o') continue;\n            if (len == 9 &&\
    \ c == 'u') continue;\n            if (len == 10 && c == 'a') continue;\n    \
    \        if (len == 10 && c == 'e') continue;\n            if (len == 10 && c\
    \ == 'i') continue;\n            if (len == 10 && c == 'o') continue;\n      \
    \      if (len == 10 && c == 'u') continue;\n            if (len == 11 && c ==\
    \ 'a') continue;\n            if (len == 11 && c == 'e\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This is a test\"\
    )).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go for swimming\"\
    )).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there is no place\
    \ available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"\
    Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"\
    go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"\
    here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"\
    is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpyp8l667a.cs(72,35): error CS1010: Newline in constant

    /tmp/tmpyp8l667a.cs(72,37): error CS1026: ) expected

    /tmp/tmpyp8l667a.cs(72,37): error CS1525: Invalid expression term ''}''

    /tmp/tmpyp8l667a.cs(72,37): error CS1002: ; expected

    /tmp/tmpyp8l667a.cs(74,5): error CS0106: The modifier ''public'' is not valid
    for this item

    /tmp/tmpyp8l667a.cs(84,2): error CS1513: } expected

    '
  timestamp: 1660015924
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Example\
    \ 2:\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence\
    \ contains only letters\n    public static string WordsInSentence(string sentence)\
    \ {\n        string result = \"\";\n        char[] chars = sentence.ToCharArray();\n\
    \        int[] primes = new int[100];\n        primes[0] = 2;\n        primes[1]\
    \ = 3;\n        primes[2] = 5;\n        primes[3] = 7;\n        primes[4] = 11;\n\
    \        primes[5] = 13;\n        primes[6] = 17;\n        primes[7] = 19;\n \
    \       primes[8] = 23;\n        primes[9] = 29;\n        primes[10] = 31;\n \
    \       primes[11] = 37;\n        primes[12] = 39;\n        primes[13] = 47;\n\
    \        primes[14] = 53;\n        primes[15] = 59;\n        primes[16] = 61;\n\
    \        primes[17] = 67;\n        primes[18] = 71;\n        primes[19] = 73 //\
    \ ...\n        primes[20] = 79;\n        primes[21] = 81;\n        primes[22]\
    \ = 83;\n        primes[23] = 89;\n        primes[24] = 97;\n        primes[25]\
    \ = 101;\n        primes[26] = 103;\n        primes[27] = 107;\n        primes[28]\
    \ = 113;\n        primes[29] = 119;\n        primes[30] = 133;\n        primes[31]\
    \ = 139;\n        primes[32] = 147;\n        primes[33] = 151;\n        primes[34]\
    \ = 157;\n        primes[35] = 163;\n        primes[36] = 167;\n        primes[37]\
    \ = 173;\n        primes[38] = 179;\n        primes[39] = 181;\n        primes[40]\
    \ = 191;\n        primes[41] = 193;\n        primes[42] = 197;\n        primes[43]\
    \ = 199;\n        primes[44] = 203;\n        primes[45] = 207;\n        primes[46]\
    \ = 211;\n        primes[47] = 213;\n        primes[48] = 217;\n        primes[49]\
    \ = 223;\n        primes[50] = 229;\n        primes[51] = 235;\n        primes[52]\
    \ = 239;\n        primes[53] = 241;\n        primes[54] = 247;\n        primes[55]\
    \ = 251;\n        primes[56] = 257;\n        primes[57] = 263;\n        primes[58]\
    \ = 269;\n        primes[59] = 271;\n        primes[60] = 277;\n        primes[61]\
    \ = 285;\n\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"\
    This is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets\
    \ go for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"\
    there is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"\
    Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"\
    go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"\
    here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"\
    is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmppyilbopx.cs(42,24): error CS1002: ; expected

    '
  timestamp: 1660015924
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Example\
    \ 2:\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence\
    \ contains only letters\n    public static string WordsInSentence(string sentence)\
    \ {\n        string result = \"\";\n        string temp = \"\";\n        bool\
    \ isPrime = true;\n        foreach (char c in sentence) {\n            temp =\
    \ c + temp;\n            int length = temp.Length;\n            if (length ==\
    \ 1) {\n                isPrime = false;\n            }\n        }\n        if\
    \ (isPrime) {\n            int primeCount = 0;\n            int primeLength =\
    \ 0;\n            int primeCount2 = 0;\n            int primeLength2 = 0;\n  \
    \          int primeCount3 = 0;\n            int primeLength3 = 0;\n         \
    \   int primeCount4 = 0;\n            int primeLength4 = 0;\n            int primeCount5\
    \ = 0;\n            int primeLength5 = 0;\n            int primeCount6 = 0;\n\
    \            int primeLength6 = 0;\n            int primeCount7 = 0;\n       \
    \     int primeLength7 = 0;\n            int primeCount8 = 0;\n            int\
    \ primeLength8 = 0;\n            int primeCount9 = 0;\n            int primeLength9\
    \ = 0;\n            int primeCount10 = 0;\n            int primeLength10 = 0;\n\
    \            int primeCount11 = 0;\n            int primeLength11 = 0;\n     \
    \       int primeCount12 = 0;\n            int primeLength12 = 0;\n          \
    \  int primeCount13 = 0;\n            int primeLength13 = 0;\n            int\
    \ primeCount14 = 0;\n            int primeLength14 = 0;\n            int primeCount15\
    \ = 0;\n            int primeLength15 = 0;\n            int primeCount16 = 0;\n\
    \            int primeLength16 = 0;\n            int primeCount17 = 0;\n     \
    \       int primeLength17 = 0;\n            int primeCount18 = 0;\n          \
    \  int primeLength18 = 0;\n            int primeCount19 = 0;\n            int\
    \ primeLength19 = 0;\n            int primeCount20 = 0;\n            int primeLength20\
    \ = 0;\n            int primeCount21 = 0;\n            int primeLength21 = 0;\n\
    \            int primeCount22 = 0;\n            int primeLength22 = 0;\n     \
    \       int primeCount23 = 0;\n            int primeLength23 = 0;\n          \
    \  int primeCount24 = 0;\n            int primeLength24 = 0;\n            int\
    \ primeCount25 = 0;\n            int primeLength25 = 0;\n            int primeCount26\
    \ = 0;\n            int primeLength26 = 0;\n            int primeCount27 = 0;\n\
    \            int primeLength27 = 0;\n            int primeCount28 = 0;\n     \
    \       int primeLength28 = 0;\n            int primeCount29 = 0;\n          \
    \  int primeLength29 = 0;\n            int primeCount30 = 0;\n            int\
    \ primeLength30 = 0;\n            int primeCount31 = 0;\n            int primeLength31\
    \ = 0;\n            int primeCount32 = 0;\n            int primeLength32 = 0;\n\
    \            int primeCount33 = 0;\n            int primeLength33 = 0;\n     \
    \       int prime\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"\
    This is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets\
    \ go for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"\
    there is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"\
    Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"\
    go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"\
    here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"\
    is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp89s04emk.cs(97,22): error CS1002: ; expected

    /tmp/tmp89s04emk.cs(99,5): error CS0106: The modifier ''public'' is not valid
    for this item

    /tmp/tmp89s04emk.cs(109,2): error CS1513: } expected

    '
  timestamp: 1660015924
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Example\
    \ 2:\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence\
    \ contains only letters\n    public static string WordsInSentence(string sentence)\
    \ {\n        string result = \"\";\n        string word = \"\";\n        string\
    \ word2 = \"\";\n        string word3 = \"\";\n        string word4 = \"\";\n\
    \        string word5 = \"\";\n        string word6 = \"\";\n        string word7\
    \ = \"\";\n        string word8 = \"\";\n        string word9 = \"\";\n      \
    \  string word10 = \"\";\n        string word11 = \"\";\n        string word12\
    \ = \"\";\n        string word13 = \"\";\n        string word14 = \"\";\n    \
    \    string word15 = \"\";\n        string word16 = \"\";\n        string word17\
    \ = \"\";\n        string word18 = \"\";\n        string word19 = \"\";\n    \
    \    string word20 = \"\";\n        string word21 = \"\";\n        string word22\
    \ = \"\";\n        string word23 = \"\";\n        string word24 = \"\";\n    \
    \    string word25 = \"\";\n        string word26 = \"\";\n        string word27\
    \ = \"\";\n        string word28 = \"\";\n        string word29 = \"\";\n    \
    \    string word30 = \"\";\n        string word31 = \"\";\n        string word32\
    \ = \"\";\n        string word33 = \"\";\n        string word34 = \"\";\n    \
    \    string word35 = \"\";\n        string word36 = \"\";\n        string word37\
    \ = \"\";\n        string word38 = \"\";\n        string word39 = \"\";\n    \
    \    string word40 = \"\";\n        string word41 = \"\";\n        string word42\
    \ = \"\";\n        string word43 = \"\";\n        string word44 = \"\";\n    \
    \    string word45 = \"\";\n        string word46 = \"\";\n        string word47\
    \ = \"\";\n        string word48 = \"\";\n        string word49 = \"\";\n    \
    \    string word50 = \"\";\n        string word51 = \"\";\n        string word52\
    \ = \"\";\n        string word53 = \"\";\n        string word54 = \"\";\n    \
    \    string word55 = \"\";\n        string word56 = \"\";\n        string word57\
    \ = \"\";\n        string word58 = \"\";\n        string word59 = \"\";\n    \
    \    string word60 = \"\";\n        string word61 = \"\";\n        string word62\
    \ = \"\";\n        string word63 = \"\";\n        string word64 = \"\";\n    \
    \    string word65 = \"\";\n        string word66 = \"\";\n        string word67\
    \ = \"\";\n        string word68 = \"\";\n        string word69 = \"\";\n    \
    \    string word70 = \"\";\n        string word71 = \"\";\n        string word72\
    \ = \"\";\n        string word73 = \"\";\n        string word74 = \"\";\n    \
    \    string word75 = \"\";\n        string word76 = \"\";\n        string word77\
    \ = \"\";\n        string word78 = \"\";\n        string word79 = \"\";\n    \
    \    string word80 = \"\";\n        string word81 = \"\";\n        string word8\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"\
    This is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets\
    \ go for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"\
    there is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"\
    Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"\
    go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"\
    here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"\
    is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpo3cyw5md.cs(102,21): error CS1002: ; expected

    '
  timestamp: 1660015920
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Example\
    \ 2:\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence\
    \ contains only letters\n    public static string WordsInSentence(string sentence)\
    \ {\n        string result = \"\";\n        char[] chars = sentence.ToCharArray();\n\
    \        int[] primes = new int[100];\n        primes[0] = 2;\n        primes[1]\
    \ = 3;\n        primes[2] = 5;\n        primes[3] = 7;\n        primes[4] = 11;\n\
    \        primes[5] = 13;\n        primes[6] = 17;\n        primes[7] = 19;\n \
    \       primes[8] = 23;\n        primes[9] = 29;\n        primes[10] = 31;\n \
    \       primes[11] = 37;\n        primes[12] = 41;\n        primes[13] = 43;\n\
    \        primes[14] = 53;\n        primes[15] = 59;\n        primes[16] = 61;\n\
    \        primes[17] = 67;\n        primes[18] = 71;\n        primes[19] = 73 //\
    \ Odd primes\n        primes[20] = 79;\n        primes[21] = 81;\n        primes[22]\
    \ = 89;\n        primes[23] = 97;\n        primes[24] = 103;\n        primes[25]\
    \ = 109; // Odd primes\n        primes[26] = 113;\n        primes[27] = 127;\n\
    \        primes[28] = 131;\n        primes[29] = 139;\n        primes[30] = 143;\n\
    \        primes[31] = 147;\n        primes[32] = 151;\n        primes[33] = 159;\n\
    \        primes[34] = 163;\n        primes[35] = 167;\n        primes[36] = 173;\n\
    \        primes[37] = 179;\n        primes[38] = 181;\n        primes[39] = 191;\n\
    \        primes[40] = 193;\n        primes[41] = 197;\n        primes[42] = 199;\n\
    \        primes[43] = 203;\n        primes[44] = 207;\n        primes[45] = 211;\n\
    \        primes[46] = 217;\n        primes[47] = 223;\n        primes[48] = 229;\n\
    \        primes[49] = 233;\n        primes[50] = 237;\n        primes[51] = 239;\n\
    \        primes[52] = 241;\n        primes[53] = 243;\n        primes[54] = 247;\n\
    \        primes[55] = 251;\n        primes[56] = 257;\n        primes[57] = 263;\n\
    \        primes[58] = 269;\n        primes[59] = 271;\n        primes[60] = 277;\n\
    \        primes[6\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"\
    This is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets\
    \ go for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"\
    there is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"\
    Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"\
    go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"\
    here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"\
    is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp3k_e3sr8.cs(42,24): error CS1002: ; expected

    /tmp/tmp3k_e3sr8.cs(84,17): error CS1003: Syntax error, '']'' expected

    /tmp/tmp3k_e3sr8.cs(84,17): error CS1002: ; expected

    '
  timestamp: 1660015924
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Example\
    \ 2:\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence\
    \ contains only letters\n    public static string WordsInSentence(string sentence)\
    \ {\n        string result = \"\";\n        string word = \"\";\n        string\
    \ newWord = \"\";\n        bool isPrime = true;\n        foreach (char c in sentence)\
    \ {\n            int length = c.ToString().Length;\n            if (length ==\
    \ 1) {\n                word += c;\n            }\n            else if (length\
    \ == 2) {\n                if (IsPrime(Convert.ToInt32(c.ToString()))) {\n   \
    \                 word += c;\n                }\n            }\n            else\
    \ if (length == 3) {\n                if (IsPrime(Convert.ToInt32(c.ToString())))\
    \ {\n                    word += c;\n                }\n            }\n      \
    \      else if (length == 4) {\n                if (IsPrime(Convert.ToInt32(c.ToString())))\
    \ {\n                    word += c;\n                }\n            }\n      \
    \      else if (length == 5) {\n                if (IsPrime(Convert.ToInt32(c.ToString())))\
    \ {\n                    word += c;\n                }\n            }\n      \
    \      else if (length == 6) {\n                if (IsPrime(Convert.ToInt32(c.ToString())))\
    \ {\n                    word += c;\n                }\n            }\n      \
    \      else if (length == 7) {\n                if (IsPrime(Convert.ToInt32(c.ToString())))\
    \ {\n                    word += c;\n                }\n            }\n      \
    \      else if (length == 8) {\n                if (IsPrime(Convert.ToInt32(c.ToString())))\
    \ {\n                    word += c;\n                }\n            }\n      \
    \      else if (length == 9) {\n                if (IsPrime(Convert.ToInt32(c.ToString())))\
    \ {\n                    word += c;\n                }\n            }\n      \
    \      else if (length == 10) {\n                if (IsPrime(Convert.ToInt32(c.ToString())))\
    \ {\n                    word += c;\n                }\n            }\n      \
    \      else if (length == 11) {\n                if (IsPrime(Convert.ToInt32(c.ToString())))\
    \ {\n                    word += c;\n                }\n            }\n      \
    \      else if (length == 12) {\n                if (IsPrime(Convert.ToInt32(c.ToString())))\
    \ {\n                    word += c;\n                }\n            }\n      \
    \      else if (length == 13) {\n                if (IsPrime(Convert.ToInt32(c.ToString())))\
    \ {\n                    word += c;\n                }\n            }\n      \
    \      else if (length == 14) {\n                if (IsPrime(Convert.ToInt32(c.ToString())))\
    \ {\n                    word += c;\n                }\n            }\n      \
    \      else if (length == 15) {\n                if (IsPrime(Convert.ToInt32(c.ToString())))\
    \ {\n                    word += c;\n                }\n            }\n      \
    \      else if (length == 16) {\n                if (IsPrime(Convert.ToInt32(c.ToString())))\
    \ {\n                    word += c;\n                }\n            }\n      \
    \      else if (length == 17) {\n\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\"\
    )));\n    Debug.Assert(WordsInSentence((\"lets go for swimming\")).Equals((\"\
    go for\")));\n    Debug.Assert(WordsInSentence((\"there is no place available\
    \ here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"\
    Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"\
    go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"\
    here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"\
    is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpn_b8li2w.cs(107,5): error CS0106: The modifier ''public'' is not valid
    for this item

    /tmp/tmpn_b8li2w.cs(117,2): error CS1513: } expected

    '
  timestamp: 1660015924
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Example\
    \ 2:\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence\
    \ contains only letters\n    public static string WordsInSentence(string sentence)\
    \ {\n        string result = \"\";\n        string word = \"\";\n        string\
    \ newWord = \"\";\n        char[] chars = sentence.ToCharArray();\n        Array.Sort(chars);\n\
    \        foreach (char c in chars) {\n            if (chars.Contains(c)) {\n \
    \               word += c;\n            }\n        }\n        foreach (char c\
    \ in chars) {\n            if (chars.Contains(c)) {\n                newWord +=\
    \ c;\n            }\n        }\n        char[] newChars = newWord.ToCharArray();\n\
    \        Array.Sort(newChars);\n        foreach (char c in newChars) {\n     \
    \       if (newChars.Contains(c)) {\n                result += c;\n          \
    \  }\n        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\"\
    )));\n    Debug.Assert(WordsInSentence((\"lets go for swimming\")).Equals((\"\
    go for\")));\n    Debug.Assert(WordsInSentence((\"there is no place available\
    \ here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"\
    Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"\
    go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"\
    here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"\
    is\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <2de2bc53ab824c77a2a5b3e5db05f165>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <2de2bc53ab824c77a2a5b3e5db05f165>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660015925
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Example\
    \ 2:\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence\
    \ contains only letters\n    public static string WordsInSentence(string sentence)\
    \ {\n        string result = \"\";\n        char[] chars = sentence.ToCharArray();\n\
    \        HashSet<string> words = new HashSet<string>();\n        foreach (char\
    \ c in chars) {\n            if (char.IsLetter(c)) {\n                string word\
    \ = c.ToString();\n                words.Add(word);\n            }\n        }\n\
    \        foreach (string word in words) {\n            int length = word.Length;\n\
    \            if (length == 1) {\n                result += word;\n           \
    \ } else {\n                for (int i = 2; i <= Math.Sqrt(length); i++) {\n \
    \                   if (length % i == 0) {\n                        result +=\
    \ word;\n                        break;\n                    }\n             \
    \   }\n            }\n        }\n        return result;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This is a test\"\
    )).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go for swimming\"\
    )).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there is no place\
    \ available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"\
    Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"\
    go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"\
    here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"\
    is\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c4573829362740d18ada52e79627ed9e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c4573829362740d18ada52e79627ed9e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660015925
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Example\
    \ 2:\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence\
    \ contains only letters\n    public static string WordsInSentence(string sentence)\
    \ {\n        string result = \"\";\n        char[] chars = sentence.ToCharArray();\n\
    \        int[] primes = new int[100];\n        bool isPrime = true;\n        for\
    \ (int i = 0; i < chars.Length; i++) {\n            int len = chars[i].ToString().Length;\n\
    \            primes[i] = len;\n            if (len == 1) {\n                isPrime\
    \ = false;\n            }\n        }\n        for (int i = 0; i < primes.Length;\
    \ i++) {\n            if (isPrime) {\n                for (int j = i; j < primes.Length;\
    \ j++) {\n                    if (primes[j] % primes[i] == 0) {\n            \
    \            isPrime = false;\n                        break;\n              \
    \      }\n                }\n            }\n        }\n        if (isPrime) {\n\
    \            for (int i = 0; i < chars.Length; i++) {\n                result\
    \ += chars[i].ToString();\n            }\n        }\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"\
    This is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets\
    \ go for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"\
    there is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"\
    Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"\
    go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"\
    here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"\
    is\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <7fd2b7f58d234aa9b46d5afca5e3875c>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <7fd2b7f58d234aa9b46d5afca5e3875c>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660015925
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Example\
    \ 2:\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence\
    \ contains only letters\n    public static string WordsInSentence(string sentence)\
    \ {\n        string result = \"\";\n        char[] chars = sentence.ToCharArray();\n\
    \        List<int> primes = new List<int>();\n        foreach (char c in chars)\
    \ {\n            int n = Convert.ToInt32(c);\n            if (n % 2 == 0) {\n\
    \                primes.Add(n);\n            }\n        }\n        primes.Sort();\n\
    \        foreach (int p in primes) {\n            int count = 0;\n           \
    \ foreach (char c in chars) {\n                if (Convert.ToInt32(c) == p) {\n\
    \                    count++;\n                }\n            }\n            if\
    \ (count == 2) {\n                result += p.ToString();\n            }\n   \
    \     }\n        return result;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\")));\n\
    \    Debug.Assert(WordsInSentence((\"lets go for swimming\")).Equals((\"go for\"\
    )));\n    Debug.Assert(WordsInSentence((\"there is no place available here\")).Equals((\"\
    there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi I am Hussein\"\
    )).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go for it\"\
    )).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\
    \")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n \
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <dbec454f54574f20bd37d644c573b546>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <dbec454f54574f20bd37d644c573b546>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660015925
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Example\
    \ 2:\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence\
    \ contains only letters\n    public static string WordsInSentence(string sentence)\
    \ {\n        string result = \"\";\n        string temp = \"\";\n        char[]\
    \ chars = sentence.ToCharArray();\n        Array.Sort(chars);\n        foreach\
    \ (char c in chars) {\n            if (chars.Contains(c)) {\n                temp\
    \ = temp + c;\n            }\n        }\n        char[] chars2 = temp.ToCharArray();\n\
    \        Array.Sort(chars2);\n        foreach (char c in chars2) {\n         \
    \   if (chars2.Contains(c)) {\n                result += c;\n            }\n \
    \       }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\"\
    )));\n    Debug.Assert(WordsInSentence((\"lets go for swimming\")).Equals((\"\
    go for\")));\n    Debug.Assert(WordsInSentence((\"there is no place available\
    \ here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"\
    Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"\
    go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"\
    here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"\
    is\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <12e9660a6cf34916bbb808981044f515>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <12e9660a6cf34916bbb808981044f515>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660015925
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Example\
    \ 2:\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence\
    \ contains only letters\n    public static string WordsInSentence(string sentence)\
    \ {\n        string result = \"\";\n        char[] chars = sentence.ToCharArray();\n\
    \        int[] primes = new int[100];\n        Array.Sort(primes);\n        foreach\
    \ (int prime in primes) {\n            bool isPrime = true;\n            for (int\
    \ i = 0; i < chars.Length; i++) {\n                if (chars[i] == ' ') {\n  \
    \                  isPrime = false;\n                    break;\n            \
    \    }\n            }\n            if (isPrime) {\n                result += \"\
    \ \" + chars.ToString();\n            }\n        }\n        return result;\n \
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"\
    This is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets\
    \ go for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"\
    there is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"\
    Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"\
    go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"\
    here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"\
    is\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <535c9c37a94d47799d559078950f69bc>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <535c9c37a94d47799d559078950f69bc>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660015925
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Example\
    \ 2:\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence\
    \ contains only letters\n    public static string WordsInSentence(string sentence)\
    \ {\n        string result = \"\";\n        char[] chars = sentence.ToCharArray();\n\
    \        Array.Sort(chars);\n        foreach (char c in chars) {\n           \
    \ if (IsPrime(c.ToString().Length)) {\n                result += c.ToString();\n\
    \            }\n        }\n        return result;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This is a test\"\
    )).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go for swimming\"\
    )).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there is no place\
    \ available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"\
    Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"\
    go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"\
    here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"\
    is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpffbihfzg.cs(24,17): error CS0103: The name ''IsPrime'' does not exist
    in the current context

    '
  timestamp: 1660015921
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // Example\
    \ 2:\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence\
    \ contains only letters\n    public static string WordsInSentence(string sentence)\
    \ {\n        string result = \"\";\n        string word = \"\";\n        string\
    \ temp = \"\";\n        foreach (char c in sentence) {\n            if (char.IsLetter(c))\
    \ {\n                word += c;\n            } else {\n                if (word.Length\
    \ > 0) {\n                    temp = word;\n                    word = \"\";\n\
    \                    result += temp;\n                }\n            }\n     \
    \   }\n        if (word.Length > 0) {\n            temp = word;\n            word\
    \ = \"\";\n            result += temp;\n        }\n        return result;\n  \
    \  }\n    public static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"\
    This is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets\
    \ go for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"\
    there is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"\
    Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"\
    go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"\
    here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"\
    is\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d6923fcc0a0647ff820e018d84aa6bc7>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d6923fcc0a0647ff820e018d84aa6bc7>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660015925
