name: HumanEval_34_unique
language: cs
prompt: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\n\
  using System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass\
  \ Problem {\n    // Return sorted unique elements in a list\n    public static List<long>\
  \ Unique(List<long> l) {\n"
tests: "    }\n    public static void Main(string[] args) {\n    Debug.Assert(Unique((new\
  \ List<long>(new long[]{(long)5L, (long)3L, (long)5L, (long)2L, (long)3L, (long)3L,\
  \ (long)9L, (long)0L, (long)123L}))).Equals((new List<long>(new long[]{(long)0L,\
  \ (long)2L, (long)3L, (long)5L, (long)9L, (long)123L}))));\n    }\n\n}\n"
completions: ["        List<long> result = new List<long>();\n        foreach (long\
    \ i in l) {\n            if (!result.Contains(i)) {\n                result.Add(i);\n\
    \            }\n        }\n        return result;", "        List<long> result\
    \ = new List<long>();\n        foreach (long i in l) {\n            if (!result.Contains(i))\
    \ {\n                result.Add(i);\n            }\n        }\n        return\
    \ result;", "        List<long> unique = new List<long>();\n        foreach (long\
    \ i in l) {\n            if (!unique.Contains(i)) {\n                unique.Add(i);\n\
    \            }\n        }\n        return unique;", "        List<long> result\
    \ = new List<long>();\n        HashSet<long> hs = new HashSet<long>();\n     \
    \   foreach (long i in l) {\n            if (!hs.Contains(i)) {\n            \
    \    hs.Add(i);\n                result.Add(i);\n            }\n        }\n  \
    \      return result;", "        List<long> result = new List<long>();\n     \
    \   HashSet<long> set = new HashSet<long>();\n        foreach (long i in l) {\n\
    \            if (!set.Contains(i)) {\n                result.Add(i);\n       \
    \         set.Add(i);\n            }\n        }\n        return result;", "  \
    \      List<long> result = new List<long>();\n        foreach (long i in l) {\n\
    \            if (!result.Contains(i)) {\n                result.Add(i);\n    \
    \        }\n        }\n        return result;", "        List<long> result = new\
    \ List<long>();\n        HashSet<long> hs = new HashSet<long>();\n        foreach\
    \ (long i in l) {\n            if (!hs.Contains(i)) {\n                hs.Add(i);\n\
    \                result.Add(i);\n            }\n        }\n        return result;",
  "        List<long> result = new List<long>();\n        HashSet<long> hs = new HashSet<long>();\n\
    \        foreach (long i in l) {\n            if (!hs.Contains(i)) {\n       \
    \         hs.Add(i);\n                result.Add(i);\n            }\n        }\n\
    \        return result;", "        List<long> result = new List<long>();\n   \
    \     foreach (long i in l) {\n            if (!result.Contains(i)) {\n      \
    \          result.Add(i);\n            }\n        }\n        return result;",
  "        List<long> unique = new List<long>();\n        foreach (long i in l) {\n\
    \            if (!unique.Contains(i)) {\n                unique.Add(i);\n    \
    \        }\n        }\n        return unique;", "        List<long> result = new\
    \ List<long>();\n        foreach (long i in l) {\n            if (!result.Contains(i))\
    \ {\n                result.Add(i);\n            }\n        }\n        return\
    \ result;", "        List<long> unique = new List<long>();\n        foreach (long\
    \ x in l)\n            if (unique.Contains(x))\n                continue;\n  \
    \          else\n                unique.Add(x);\n        return unique;", "  \
    \      List<long> result = new List<long>();\n        foreach (long x in l)\n\
    \            if (result.Contains(x))\n                continue;\n            result.Add(x);\n\
    \        return result;", "        List<long> result = new List<long>();\n   \
    \     HashSet<long> set = new HashSet<long>();\n        foreach (long i in l)\
    \ {\n            if (!set.Contains(i)) {\n                result.Add(i);\n   \
    \             set.Add(i);\n            }\n        }\n        return result;",
  "        List<long> result = new List<long>();\n        foreach (long i in l) {\n\
    \            if (!result.Contains(i)) {\n                result.Add(i);\n    \
    \        }\n        }\n        return result;", "        List<long> unique = new\
    \ List<long>();\n        foreach (long i in l) {\n            if (!unique.Contains(i))\
    \ {\n                unique.Add(i);\n            }\n        }\n        return\
    \ unique;", "        List<long> result = new List<long>();\n        HashSet<long>\
    \ hs = new HashSet<long>();\n        foreach (long i in l) {\n            if (!hs.Contains(i))\
    \ {\n                hs.Add(i);\n                result.Add(i);\n            }\n\
    \        }\n        return result;", "        List<long> result = new List<long>();\n\
    \        HashSet<long> hs = new HashSet<long>();\n        foreach (long i in l)\
    \ {\n            if (!hs.Contains(i)) {\n                hs.Add(i);\n        \
    \        result.Add(i);\n            }\n        }\n        return result;", " \
    \       List<long> unique = new List<long>();\n        foreach (long i in l) {\n\
    \            if (!unique.Contains(i)) {\n                unique.Add(i);\n    \
    \        }\n        }\n        return unique;", "        List<long> unique = new\
    \ List<long>();\n        foreach (long i in l) {\n            if (!unique.Contains(i))\
    \ {\n                unique.Add(i);\n            }\n        }\n        return\
    \ unique;", "        List<long> result = new List<long>();\n        foreach (long\
    \ i in l) {\n            if (!result.Contains(i)) {\n                result.Add(i);\n\
    \            }\n        }\n        return result;", "        List<long> result\
    \ = new List<long>();\n        HashSet<long> set = new HashSet<long>();\n    \
    \    foreach (long i in l) {\n            if (!set.Contains(i)) {\n          \
    \      result.Add(i);\n                set.Add(i);\n            }\n        }\n\
    \        return result;", "        List<long> result = new List<long>();\n   \
    \     long temp;\n        foreach (long i in l) {\n            temp = i;\n   \
    \         while (result.Contains(temp)) {\n                temp = temp * 10 +\
    \ i;\n            }\n            result.Add(temp);\n        }\n        return\
    \ result.OrderBy(x => x).ToList();", "        List<long> result = new List<long>();\n\
    \        HashSet<long> hs = new HashSet<long>();\n        foreach (long i in l)\
    \ {\n            if (!hs.Contains(i)) {\n                hs.Add(i);\n        \
    \        result.Add(i);\n            }\n        }\n        return result;", " \
    \       List<long> result = new List<long>();\n        foreach (long i in l) {\n\
    \            if (!result.Contains(i)) {\n                result.Add(i);\n    \
    \        }\n        }\n        return result;", "        List<long> result = new\
    \ List<long>();\n        HashSet<long> set = new HashSet<long>();\n        foreach\
    \ (long i in l) {\n            if (set.Add(i)) {\n                result.Add(i);\n\
    \            }\n        }\n        return result;", "        List<long> result\
    \ = new List<long>();\n        foreach (long i in l) {\n            if (!result.Contains(i))\
    \ {\n                result.Add(i);\n            }\n        }\n        return\
    \ result;", "        List<long> result = new List<long>();\n        foreach (long\
    \ i in l) {\n            if (!result.Contains(i)) {\n                result.Add(i);\n\
    \            }\n        }\n        return result.OrderBy(i => i).ToList();", " \
    \       List<long> unique = new List<long>();\n        foreach (long i in l) {\n\
    \            if (!unique.Contains(i)) {\n                unique.Add(i);\n    \
    \        }\n        }\n        return unique;", "        List<long> result = new\
    \ List<long>();\n        HashSet<long> set = new HashSet<long>();\n        foreach\
    \ (long x in l) {\n            if (!set.Add(x)) {\n                result.Add(x);\n\
    \            }\n        }\n        return result;", "        List<long> unique\
    \ = new List<long>();\n        foreach (long i in l) {\n            if (!unique.Contains(i))\
    \ {\n                unique.Add(i);\n            }\n        }\n        return\
    \ unique;", "        List<long> unique = new List<long>();\n        foreach (long\
    \ i in l) {\n            if (!unique.Contains(i)) {\n                unique.Add(i);\n\
    \            }\n        }\n        return unique;", "        List<long> result\
    \ = new List<long>();\n        HashSet<long> hs = new HashSet<long>();\n     \
    \   foreach (long i in l) {\n            if (!hs.Contains(i)) {\n            \
    \    hs.Add(i);\n                result.Add(i);\n            }\n        }\n  \
    \      return result;", "        List<long> result = new List<long>();\n     \
    \   HashSet<long> set = new HashSet<long>();\n        foreach (long i in l) {\n\
    \            if (!set.Contains(i)) {\n                result.Add(i);\n       \
    \         set.Add(i);\n            }\n        }\n        return result;", "  \
    \      List<long> unique = new List<long>();\n        foreach (long i in l)\n\
    \        {\n            if (!unique.Contains(i))\n            {\n            \
    \    unique.Add(i);\n            }\n        }\n        return unique;", "    \
    \    List<long> unique = new List<long>();\n        foreach (long x in l)\n  \
    \      {\n            if (!unique.Contains(x))\n            {\n              \
    \  unique.Add(x);\n            }\n        }\n        return unique;", "      \
    \  List<long> unique = new List<long>();\n        foreach (long i in l)\n    \
    \    {\n            if (!unique.Contains(i))\n            {\n                unique.Add(i);\n\
    \            }\n        }\n        return unique;", "        List<long> result\
    \ = new List<long>();\n        foreach (long i in l) {\n            if (!result.Contains(i))\
    \ {\n                result.Add(i);\n            }\n        }\n        return\
    \ result;", "        List<long> unique = new List<long>();\n        foreach (long\
    \ x in l)\n        {\n            if (!unique.Contains(x))\n            {\n  \
    \              unique.Add(x);\n            }\n        }\n        return unique;",
  "        List<long> result = new List<long>();\n        foreach (long i in l) {\n\
    \            if (!result.Contains(i)) {\n                result.Add(i);\n    \
    \        }\n        }\n        return result;", "        List<long> result = new\
    \ List<long>();\n        HashSet<long> hs = new HashSet<long>();\n        foreach\
    \ (long i in l) {\n            if (!hs.Contains(i)) {\n                hs.Add(i);\n\
    \                result.Add(i);\n            }\n        }\n        return result;",
  "        List<long> result = new List<long>();\n        long lastValue = long.MinValue;\n\
    \        foreach (long value in l) {\n            if (value != lastValue) {\n\
    \                result.Add(value);\n                lastValue = value;\n    \
    \        }\n        }\n        return result;", "        List<long> result = new\
    \ List<long>();\n        foreach (long i in l) {\n            if (!result.Contains(i))\
    \ {\n                result.Add(i);\n            }\n        }\n        return\
    \ result;", "        List<long> unique = new List<long>();\n        foreach (long\
    \ i in l) {\n            if (!unique.Contains(i)) {\n                unique.Add(i);\n\
    \            }\n        }\n        return unique;", "        List<long> result\
    \ = new List<long>();\n        foreach (long x in l)\n            if (!result.Contains(x))\n\
    \                result.Add(x);\n        return result;", "        List<long>\
    \ result = new List<long>();\n        foreach (long x in l) {\n            if\
    \ (!result.Contains(x)) {\n                result.Add(x);\n            }\n   \
    \     }\n        return result;", "        List<long> result = new List<long>();\n\
    \        foreach (long i in l) {\n            if (!result.Contains(i)) {\n   \
    \             result.Add(i);\n            }\n        }\n        return result;",
  "        List<long> result = new List<long>();\n        HashSet<long> set = new\
    \ HashSet<long>();\n        foreach (long i in l) {\n            if (!set.Add(i))\
    \ {\n                result.Add(i);\n            }\n        }\n        return\
    \ result;", "        List<long> result = new List<long>();\n        HashSet<long>\
    \ hs = new HashSet<long>();\n        foreach (long i in l) {\n            if (!hs.Contains(i))\
    \ {\n                hs.Add(i);\n                result.Add(i);\n            }\n\
    \        }\n        return result;", "        List<long> result = new List<long>();\n\
    \        long temp;\n        foreach (long i in l) {\n            temp = i;\n\
    \            while (result.Contains(temp)) {\n                temp = temp * 10\
    \ + i;\n            }\n            result.Add(temp);\n        }\n        return\
    \ result;", "        List<long> result = new List<long>();\n        HashSet<long>\
    \ set = new HashSet<long>();\n        foreach (long i in l) {\n            if\
    \ (set.Add(i)) {\n                result.Add(i);\n            }\n        }\n \
    \       return result;", "        List<long> result = new List<long>();\n    \
    \    HashSet<long> set = new HashSet<long>();\n        foreach (long i in l) {\n\
    \            if (!set.Contains(i)) {\n                result.Add(i);\n       \
    \         set.Add(i);\n            }\n        }\n        return result;", "  \
    \      List<long> result = new List<long>();\n        long lastValue = long.MinValue;\n\
    \        foreach (long value in l) {\n            if (lastValue != value) {\n\
    \                result.Add(value);\n                lastValue = value;\n    \
    \        }\n        }\n        return result;", "        List<long> unique = new\
    \ List<long>();\n        foreach (long i in l) {\n            if (!unique.Contains(i))\
    \ {\n                unique.Add(i);\n            }\n        }\n        return\
    \ unique;", "        List<long> result = new List<long>();\n        HashSet<long>\
    \ set = new HashSet<long>();\n        foreach (long i in l) {\n            if\
    \ (set.Add(i)) {\n                result.Add(i);\n            }\n        }\n \
    \       return result;", "        List<long> unique = new List<long>();\n    \
    \    foreach (long i in l) {\n            if (!unique.Contains(i)) {\n       \
    \         unique.Add(i);\n            }\n        }\n        return unique;", " \
    \       List<long> unique = new List<long>();\n        foreach (long x in l)\n\
    \        {\n            if (!unique.Contains(x))\n            {\n            \
    \    unique.Add(x);\n            }\n        }\n        return unique;", "    \
    \    List<long> unique = new List<long>();\n        foreach (long i in l) {\n\
    \            if (!unique.Contains(i)) {\n                unique.Add(i);\n    \
    \        }\n        }\n        return unique;", "        List<long> result = new\
    \ List<long>();\n        foreach (long i in l)\n        {\n            if (!result.Contains(i))\n\
    \            {\n                result.Add(i);\n            }\n        }\n   \
    \     return result;", "        List<long> result = new List<long>();\n      \
    \  long prev = 0;\n        foreach (long i in l) {\n            if (prev != i)\
    \ {\n                result.Add(i);\n                prev = i;\n            }\n\
    \        }\n        return result;", "        List<long> result = new List<long>();\n\
    \        foreach (long x in l) {\n            if (!result.Contains(x)) {\n   \
    \             result.Add(x);\n            }\n        }\n        return result;",
  "        List<long> result = new List<long>();\n        HashSet<long> hs = new HashSet<long>();\n\
    \        foreach (long i in l) {\n            if (!hs.Contains(i)) {\n       \
    \         hs.Add(i);\n                result.Add(i);\n            }\n        }\n\
    \        return result;", "        List<long> result = new List<long>();\n   \
    \     HashSet<long> set = new HashSet<long>();\n        foreach (long i in l)\
    \ {\n            if (!set.Contains(i)) {\n                result.Add(i);\n   \
    \             set.Add(i);\n            }\n        }\n        return result;",
  "        List<long> result = new List<long>();\n        foreach (long x in l) {\n\
    \            if (!result.Contains(x)) {\n                result.Add(x);\n    \
    \        }\n        }\n        return result;", "        List<long> result = new\
    \ List<long>();\n        foreach (long i in l) {\n            if (!result.Contains(i))\
    \ {\n                result.Add(i);\n            }\n        }\n        return\
    \ result;", "        List<long> result = new List<long>();\n        foreach (long\
    \ i in l) {\n            if (!result.Contains(i)) {\n                result.Add(i);\n\
    \            }\n        }\n        return result;", "        List<long> result\
    \ = new List<long>();\n        foreach (long i in l) {\n            if (!result.Contains(i))\
    \ {\n                result.Add(i);\n            }\n        }\n        return\
    \ result;", "        List<long> result = new List<long>();\n        HashSet<long>\
    \ set = new HashSet<long>();\n        foreach (long i in l) {\n            if\
    \ (!set.Contains(i)) {\n                result.Add(i);\n                set.Add(i);\n\
    \            }\n        }\n        return result;", "        List<long> result\
    \ = new List<long>();\n        foreach (long i in l) {\n            if (!result.Contains(i))\
    \ {\n                result.Add(i);\n            }\n        }\n        return\
    \ result;", "        List<long> result = new List<long>();\n        HashSet<long>\
    \ set = new HashSet<long>();\n        foreach (long i in l) {\n            if\
    \ (!set.Add(i)) {\n                result.Add(i);\n            }\n        }\n\
    \        return result;", "        List<long> result = new List<long>();\n   \
    \     HashSet<long> set = new HashSet<long>();\n        foreach (long i in l)\
    \ {\n            if (!set.Add(i)) {\n                result.Add(i);\n        \
    \    }\n        }\n        return result;", "        List<long> result = new List<long>();\n\
    \        long lastValue = long.MinValue;\n        foreach (long value in l) {\n\
    \            if (value != lastValue) {\n                result.Add(value);\n \
    \               lastValue = value;\n            }\n        }\n        return result;",
  "        List<long> result = new List<long>();\n        foreach (long i in l) {\n\
    \            if (!result.Contains(i)) {\n                result.Add(i);\n    \
    \        }\n        }\n        return result;", "        List<long> result = new\
    \ List<long>();\n        HashSet<long> set = new HashSet<long>();\n        foreach\
    \ (long i in l) {\n            if (!set.Contains(i)) {\n                result.Add(i);\n\
    \                set.Add(i);\n            }\n        }\n        return result;",
  "        List<long> result = new List<long>();\n        foreach (long i in l) {\n\
    \            if (!result.Contains(i)) {\n                result.Add(i);\n    \
    \        }\n        }\n        return result;", "        List<long> result = new\
    \ List<long>();\n        foreach (long i in l) {\n            if (!result.Contains(i))\
    \ {\n                result.Add(i);\n            }\n        }\n        return\
    \ result;", "        List<long> result = new List<long>();\n        foreach (long\
    \ x in l) {\n            if (!result.Contains(x)) {\n                result.Add(x);\n\
    \            }\n        }\n        return result;", "        List<long> result\
    \ = new List<long>();\n        foreach (long x in l) {\n            if (!result.Contains(x))\
    \ {\n                result.Add(x);\n            }\n        }\n        return\
    \ result;", "        List<long> result = new List<long>();\n        foreach (long\
    \ i in l) {\n            if (!result.Contains(i)) {\n                result.Add(i);\n\
    \            }\n        }\n        return result;", "        List<long> result\
    \ = new List<long>();\n        foreach (long x in l) {\n            if (!result.Contains(x))\
    \ {\n                result.Add(x);\n            }\n        }\n        return\
    \ result;", "        List<long> unique = new List<long>();\n        foreach (long\
    \ i in l) {\n            if (!unique.Contains(i)) {\n                unique.Add(i);\n\
    \            }\n        }\n        return unique;", "        List<long> result\
    \ = new List<long>();\n        foreach (long i in l) {\n            if (!result.Contains(i))\
    \ {\n                result.Add(i);\n            }\n        }\n        return\
    \ result;", "        List<long> result = new List<long>();\n        foreach (long\
    \ x in l) {\n            if (!result.Contains(x)) {\n                result.Add(x);\n\
    \            }\n        }\n        return result;", "        List<long> unique\
    \ = new List<long>();\n        foreach (long i in l) {\n            if (!unique.Contains(i))\
    \ {\n                unique.Add(i);\n            }\n        }\n        return\
    \ unique;", "        List<long> result = new List<long>();\n        foreach (long\
    \ i in l) {\n            if (!result.Contains(i)) {\n                result.Add(i);\n\
    \            }\n        }\n        return result.OrderBy(x => x).ToList();", " \
    \       List<long> result = new List<long>();\n        foreach (long i in l)\n\
    \        {\n            if (!result.Contains(i))\n            {\n            \
    \    result.Add(i);\n            }\n        }\n        return result;", "    \
    \    List<long> result = new List<long>();\n        HashSet<long> set = new HashSet<long>();\n\
    \        foreach (long i in l) {\n            if (!set.Contains(i)) {\n      \
    \          result.Add(i);\n                set.Add(i);\n            }\n      \
    \  }\n        return result;", "        List<long> result = new List<long>();\n\
    \        HashSet<long> hs = new HashSet<long>();\n        foreach (long i in l)\
    \ {\n            if (!hs.Contains(i)) {\n                hs.Add(i);\n        \
    \        result.Add(i);\n            }\n        }\n        return result;", " \
    \       List<long> result = new List<long>();\n        HashSet<long> set = new\
    \ HashSet<long>();\n        foreach (long i in l) {\n            if (!set.Contains(i))\
    \ {\n                result.Add(i);\n                set.Add(i);\n           \
    \ }\n        }\n        return result;", "        List<long> unique = new List<long>();\n\
    \        foreach (long x in l) {\n            if (!unique.Contains(x)) {\n   \
    \             unique.Add(x);\n            }\n        }\n        return unique;",
  "        List<long> result = new List<long>();\n        foreach (long i in l) {\n\
    \            if (!result.Contains(i)) {\n                result.Add(i);\n    \
    \        }\n        }\n        return result;", "        List<long> unique = new\
    \ List<long>();\n        foreach (long i in l) {\n            if (!unique.Contains(i))\
    \ {\n                unique.Add(i);\n            }\n        }\n        return\
    \ unique;", "        List<long> unique = new List<long>();\n        foreach (long\
    \ i in l) {\n            if (!unique.Contains(i)) {\n                unique.Add(i);\n\
    \            }\n        }\n        return unique;", "        List<long> result\
    \ = new List<long>();\n        HashSet<long> set = new HashSet<long>();\n    \
    \    foreach (long i in l) {\n            if (!set.Contains(i)) {\n          \
    \      result.Add(i);\n                set.Add(i);\n            }\n        }\n\
    \        return result;", "        List<long> unique = new List<long>();\n   \
    \     foreach (long i in l) {\n            if (!unique.Contains(i)) {\n      \
    \          unique.Add(i);\n            }\n        }\n        return unique;",
  "        List<long> result = new List<long>();\n        HashSet<long> set = new\
    \ HashSet<long>();\n        foreach (long i in l) {\n            if (!set.Contains(i))\
    \ {\n                result.Add(i);\n                set.Add(i);\n           \
    \ }\n        }\n        return result;", "        List<long> result = new List<long>();\n\
    \        HashSet<long> set = new HashSet<long>();\n        foreach (long i in\
    \ l) {\n            if (!set.Add(i)) {\n                result.Add(i);\n     \
    \       }\n        }\n        return result;", "        List<long> result = new\
    \ List<long>();\n        HashSet<long> set = new HashSet<long>();\n        foreach\
    \ (long i in l) {\n            if (set.Add(i)) {\n                result.Add(i);\n\
    \            }\n        }\n        return result;", "        List<long> unique\
    \ = new List<long>();\n        foreach (long i in l) {\n            if (!unique.Contains(i))\
    \ {\n                unique.Add(i);\n            }\n        }\n        return\
    \ unique;", "        List<long> result = new List<long>();\n        long temp;\n\
    \        foreach (long i in l) {\n            temp = i;\n            while (result.Contains(temp))\
    \ {\n                temp = temp * 10 + i;\n            }\n            result.Add(temp);\n\
    \        }\n        return result.OrderBy(i => i).ToList();", "        List<long>\
    \ unique = new List<long>();\n        foreach (long i in l)\n        {\n     \
    \       if (!unique.Contains(i))\n            {\n                unique.Add(i);\n\
    \            }\n        }\n        return unique;", "        List<long> result\
    \ = new List<long>();\n        foreach (long i in l) {\n            if (!result.Contains(i))\
    \ {\n                result.Add(i);\n            }\n        }\n        return\
    \ result;", "        List<long> result = new List<long>();\n        HashSet<long>\
    \ set = new HashSet<long>();\n        foreach (long i in l) {\n            if\
    \ (set.Add(i)) {\n                result.Add(i);\n            }\n        }\n \
    \       return result;", "        List<long> result = new List<long>();\n    \
    \    foreach (long x in l) {\n            if (!result.Contains(x)) {\n       \
    \         result.Add(x);\n            }\n        }\n        return result;", " \
    \       List<long> unique = new List<long>();\n        foreach (long i in l)\n\
    \            if (!unique.Contains(i))\n                unique.Add(i);\n      \
    \  return unique;", "        List<long> result = new List<long>();\n        foreach\
    \ (long i in l) {\n            if (!result.Contains(i)) {\n                result.Add(i);\n\
    \            }\n        }\n        return result;", "        List<long> result\
    \ = new List<long>();\n        HashSet<long> set = new HashSet<long>();\n    \
    \    foreach (long x in l) {\n            if (set.Add(x)) {\n                result.Add(x);\n\
    \            }\n        }\n        return result;", "        List<long> result\
    \ = new List<long>();\n        foreach (long i in l) {\n            if (!result.Contains(i))\
    \ {\n                result.Add(i);\n            }\n        }\n        return\
    \ result;", "        List<long> unique = new List<long>();\n        foreach (long\
    \ i in l) {\n            if (!unique.Contains(i)) {\n                unique.Add(i);\n\
    \            }\n        }\n        return unique;", "        List<long> result\
    \ = new List<long>();\n        foreach (long i in l) {\n            if (!result.Contains(i))\
    \ {\n                result.Add(i);\n            }\n        }\n        return\
    \ result;", "        List<long> result = new List<long>();\n        foreach (long\
    \ i in l) {\n            if (!result.Contains(i)) {\n                result.Add(i);\n\
    \            }\n        }\n        return result;", "        List<long> unique\
    \ = new List<long>();\n        foreach (long i in l) {\n            if (!unique.Contains(i))\
    \ {\n                unique.Add(i);\n            }\n        }\n        return\
    \ unique;", "        List<long> result = new List<long>();\n        long max =\
    \ l.Max();\n        long min = l.Min();\n        long mid = l.Count / 2;\n   \
    \     long midVal = l[mid];\n        long midVal2 = l[mid+1];\n        long midVal3\
    \ = l[mid+2];\n        long midVal4 = l[mid+3];\n        long midVal5 = l[mid+4];\n\
    \        long midVal6 = l[mid+5];\n        long midVal7 = l[mid+6];\n        long\
    \ midVal8 = l[mid+7];\n        long midVal9 = l[mid+8];\n        long midVal10\
    \ = l[mid+9];\n        long midVal11 = l[mid+10];\n        long midVal12 = l[mid+11];\n\
    \        long midVal13 = l[mid+12];\n        long midVal14 = l[mid+13];\n    \
    \    long midVal15 = l[mid+14];\n        long midVal16 = l[mid+15];\n        long\
    \ midVal17 = l[mid+16];\n        long midVal18 = l[mid+17];\n        long midVal19\
    \ = l[mid+18];\n        long midVal20 = l[mid+19];\n        long midVal21 = l[mid+20];\n\
    \        long midVal22 = l[mid+21];\n        long midVal23 = l[mid+22];\n    \
    \    long midVal24 = l[mid+23];\n        long midVal25 = l[mid+24];\n        long\
    \ midVal26 = l[mid+25];\n        long midVal27 = l[mid+26];\n        long midVal28\
    \ = l[mid+27];\n        long midVal29 = l[mid+28];\n        long midVal30 = l[mid+29];\n\
    \        long midVal31 = l[mid+30];\n        long midVal32 = l[mid+31];\n    \
    \    long midVal33 = l[mid+32];\n        long midVal34 = l[mid+33];\n        long\
    \ midVal35 = l[mid+34];\n        long midVal36 = l[mid+35];\n        long midVal37\
    \ = l[mid+36];\n        long midVal38 = l[mid+37];\n", "        List<long> result\
    \ = new List<long>();\n        HashSet<long> set = new HashSet<long>();\n    \
    \    foreach (long i in l) {\n            if (set.Add(i)) {\n                result.Add(i);\n\
    \            }\n        }\n        return result;", "        List<long> unique\
    \ = new List<long>();\n        foreach (long i in l)\n            if (!unique.Contains(i))\n\
    \                unique.Add(i);\n        return unique;", "        List<long>\
    \ result = new List<long>();\n        foreach (long x in l)\n        {\n     \
    \       if (!result.Contains(x))\n            {\n                result.Add(x);\n\
    \            }\n        }\n        return result;", "        List<long> result\
    \ = new List<long>();\n        HashSet<long> set = new HashSet<long>();\n    \
    \    foreach (long x in l)\n        {\n            if (!set.Add(x))\n        \
    \    {\n                result.Add(x);\n            }\n        }\n        return\
    \ result;", "        List<long> result = new List<long>();\n        HashSet<long>\
    \ set = new HashSet<long>();\n        foreach (long i in l) {\n            if\
    \ (!set.Add(i)) {\n                result.Add(i);\n            }\n        }\n\
    \        return result;", "        List<long> result = new List<long>();\n   \
    \     long prev = 0;\n        foreach (long i in l) {\n            if (i == prev)\
    \ {\n                continue;\n            }\n            result.Add(i);\n  \
    \          prev = i;\n        }\n        return result.OrderBy(x => x).ToList();",
  "        List<long> result = new List<long>();\n        foreach (long i in l) {\n\
    \            if (!result.Contains(i)) {\n                result.Add(i);\n    \
    \        }\n        }\n        return result;", "        List<long> unique = new\
    \ List<long>();\n        foreach (long i in l) {\n            if (!unique.Contains(i))\
    \ {\n                unique.Add(i);\n            }\n        }\n        return\
    \ unique;", "        List<long> result = new List<long>();\n        HashSet<long>\
    \ hs = new HashSet<long>();\n        foreach (long i in l) {\n            if (!hs.Contains(i))\
    \ {\n                hs.Add(i);\n                result.Add(i);\n            }\n\
    \        }\n        return result;", "        List<long> result = new List<long>();\n\
    \        HashSet<long> set = new HashSet<long>();\n        foreach (long i in\
    \ l) {\n            if (!set.Contains(i)) {\n                result.Add(i);\n\
    \                set.Add(i);\n            }\n        }\n        return result;",
  "        List<long> result = new List<long>();\n        HashSet<long> set = new\
    \ HashSet<long>();\n        foreach (long i in l) {\n            if (set.Add(i))\
    \ {\n                result.Add(i);\n            }\n        }\n        return\
    \ result;", "        List<long> result = new List<long>();\n        HashSet<long>\
    \ set = new HashSet<long>();\n        foreach (long i in l) {\n            if\
    \ (set.Add(i)) {\n                result.Add(i);\n            }\n        }\n \
    \       return result;", "        List<long> result = new List<long>();\n    \
    \    foreach (long i in l) {\n            if (!result.Contains(i)) {\n       \
    \         result.Add(i);\n            }\n        }\n        return result;", " \
    \       List<long> result = new List<long>();\n        foreach (long i in l) {\n\
    \            if (!result.Contains(i)) {\n                result.Add(i);\n    \
    \        }\n        }\n        return result;", "        List<long> unique = new\
    \ List<long>();\n        foreach (long i in l) {\n            if (!unique.Contains(i))\
    \ {\n                unique.Add(i);\n            }\n        }\n        return\
    \ unique;", "        List<long> unique = new List<long>();\n        foreach (long\
    \ i in l) {\n            if (!unique.Contains(i)) {\n                unique.Add(i);\n\
    \            }\n        }\n        return unique;", "        List<long> unique\
    \ = new List<long>();\n        foreach (long x in l)\n            if (!unique.Contains(x))\n\
    \                unique.Add(x);\n        return unique;", "        List<long>\
    \ result = new List<long>();\n        foreach (long x in l) {\n            if\
    \ (!result.Contains(x)) {\n                result.Add(x);\n            }\n   \
    \     }\n        return result;", "        List<long> result = new List<long>();\n\
    \        foreach (long i in l) {\n            if (!result.Contains(i)) {\n   \
    \             result.Add(i);\n            }\n        }\n        return result;",
  "        List<long> unique = new List<long>();\n        foreach (long i in l) {\n\
    \            if (!unique.Contains(i)) {\n                unique.Add(i);\n    \
    \        }\n        }\n        return unique;", "        List<long> result = new\
    \ List<long>();\n        foreach (long i in l) {\n            if (!result.Contains(i))\
    \ {\n                result.Add(i);\n            }\n        }\n        return\
    \ result;", "        List<long> result = new List<long>();\n        foreach (long\
    \ i in l) {\n            if (!result.Contains(i)) {\n                result.Add(i);\n\
    \            }\n        }\n        return result;", "        List<long> result\
    \ = new List<long>();\n        long prev = 0;\n        foreach (long i in l) {\n\
    \            if (i != prev) {\n                result.Add(i);\n              \
    \  prev = i;\n            }\n        }\n        return result;", "        List<long>\
    \ unique = new List<long>();\n        foreach (long i in l) {\n            if\
    \ (!unique.Contains(i)) {\n                unique.Add(i);\n            }\n   \
    \     }\n        return unique;", "        List<long> result = new List<long>();\n\
    \        HashSet<long> set = new HashSet<long>();\n        foreach (long i in\
    \ l) {\n            if (!set.Contains(i)) {\n                result.Add(i);\n\
    \                set.Add(i);\n            }\n        }\n        return result;",
  "        List<long> result = new List<long>();\n        foreach (long i in l) {\n\
    \            if (!result.Contains(i)) {\n                result.Add(i);\n    \
    \        }\n        }\n        return result;", "        List<long> result = new\
    \ List<long>();\n        foreach (long i in l) {\n            if (!result.Contains(i))\
    \ {\n                result.Add(i);\n            }\n        }\n        return\
    \ result;", "        List<long> result = new List<long>();\n        foreach (long\
    \ i in l) {\n            if (!result.Contains(i)) {\n                result.Add(i);\n\
    \            }\n        }\n        return result;", "        List<long> result\
    \ = new List<long>();\n        foreach (long i in l) {\n            if (!result.Contains(i))\
    \ {\n                result.Add(i);\n            }\n        }\n        return\
    \ result;", "        List<long> unique = new List<long>();\n        foreach (long\
    \ x in l)\n        {\n            if (!unique.Contains(x))\n            {\n  \
    \              unique.Add(x);\n            }\n        }\n        return unique;",
  "        List<long> result = new List<long>();\n        HashSet<long> set = new\
    \ HashSet<long>();\n        foreach (long i in l) {\n            if (!set.Contains(i))\
    \ {\n                result.Add(i);\n                set.Add(i);\n           \
    \ }\n        }\n        return result;", "        List<long> unique = new List<long>();\n\
    \        foreach (long i in l) {\n            if (!unique.Contains(i)) {\n   \
    \             unique.Add(i);\n            }\n        }\n        return unique;",
  "        List<long> result = new List<long>();\n        foreach (long i in l) {\n\
    \            if (!result.Contains(i)) {\n                result.Add(i);\n    \
    \        }\n        }\n        return result;", "        List<long> unique = new\
    \ List<long>();\n        foreach (long i in l) {\n            if (!unique.Contains(i))\
    \ {\n                unique.Add(i);\n            }\n        }\n        return\
    \ unique;", "        List<long> unique = new List<long>();\n        foreach (long\
    \ i in l) {\n            if (!unique.Contains(i)) {\n                unique.Add(i);\n\
    \            }\n        }\n        return unique;", "        List<long> unique\
    \ = new List<long>();\n        foreach (long i in l) {\n            if (!unique.Contains(i))\
    \ {\n                unique.Add(i);\n            }\n        }\n        return\
    \ unique;", "        List<long> unique = new List<long>();\n        foreach (long\
    \ i in l) {\n            if (!unique.Contains(i)) {\n                unique.Add(i);\n\
    \            }\n        }\n        return unique;", "        List<long> result\
    \ = new List<long>();\n        HashSet<long> set = new HashSet<long>();\n    \
    \    foreach (long x in l) {\n            if (!set.Add(x)) {\n               \
    \ result.Add(x);\n            }\n        }\n        return result;", "       \
    \ List<long> result = new List<long>();\n        HashSet<long> set = new HashSet<long>();\n\
    \        foreach (long i in l) {\n            if (!set.Add(i)) {\n           \
    \     result.Add(i);\n            }\n        }\n        return result;", "   \
    \     List<long> result = new List<long>();\n        foreach (long i in l) {\n\
    \            if (!result.Contains(i)) {\n                result.Add(i);\n    \
    \        }\n        }\n        return result.OrderBy(i => i).ToList();", "   \
    \     List<long> result = new List<long>();\n        HashSet<long> set = new HashSet<long>();\n\
    \        foreach (long i in l) {\n            if (set.Add(i)) {\n            \
    \    result.Add(i);\n            }\n        }\n        return result;", "    \
    \    List<long> result = new List<long>();\n        HashSet<long> set = new HashSet<long>();\n\
    \        foreach (long i in l) {\n            if (!set.Contains(i)) {\n      \
    \          result.Add(i);\n                set.Add(i);\n            }\n      \
    \  }\n        return result;", "        List<long> result = new List<long>();\n\
    \        HashSet<long> set = new HashSet<long>();\n        foreach (long i in\
    \ l) {\n            if (set.Add(i)) {\n                result.Add(i);\n      \
    \      }\n        }\n        return result;", "        List<long> result = new\
    \ List<long>();\n        HashSet<long> set = new HashSet<long>();\n        foreach\
    \ (long i in l) {\n            if (!set.Contains(i)) {\n                result.Add(i);\n\
    \                set.Add(i);\n            }\n        }\n        return result;",
  "        List<long> result = new List<long>();\n        HashSet<long> set = new\
    \ HashSet<long>();\n        foreach (long i in l) {\n            if (!set.Contains(i))\
    \ {\n                result.Add(i);\n                set.Add(i);\n           \
    \ }\n        }\n        return result;", "        List<long> unique = new List<long>();\n\
    \        foreach (long i in l) {\n            if (!unique.Contains(i)) {\n   \
    \             unique.Add(i);\n            }\n        }\n        return unique;",
  "        List<long> result = new List<long>();\n        foreach (long x in l) {\n\
    \            if (!result.Contains(x)) {\n                result.Add(x);\n    \
    \        }\n        }\n        return result;", "        List<long> unique = new\
    \ List<long>();\n        foreach (long i in l) {\n            if (!unique.Contains(i))\
    \ {\n                unique.Add(i);\n            }\n        }\n        return\
    \ unique;", "        List<long> unique = new List<long>();\n        foreach (long\
    \ x in l)\n            if (!unique.Contains(x))\n                unique.Add(x);\n\
    \        return unique;", "        List<long> result = new List<long>();\n   \
    \     HashSet<long> set = new HashSet<long>();\n        foreach (long i in l)\
    \ {\n            if (set.Add(i)) {\n                result.Add(i);\n         \
    \   }\n        }\n        return result;", "        List<long> result = new List<long>();\n\
    \        foreach (long i in l) {\n            if (!result.Contains(i)) {\n   \
    \             result.Add(i);\n            }\n        }\n        return result;",
  "        List<long> result = new List<long>();\n        foreach (long i in l) {\n\
    \            if (!result.Contains(i)) {\n                result.Add(i);\n    \
    \        }\n        }\n        return result;", "        List<long> result = new\
    \ List<long>();\n        foreach (long i in l) {\n            if (!result.Contains(i))\
    \ {\n                result.Add(i);\n            }\n        }\n        return\
    \ result.OrderBy(i => i).ToList();", "        List<long> result = new List<long>();\n\
    \        foreach (long i in l)\n        {\n            if (!result.Contains(i))\n\
    \            {\n                result.Add(i);\n            }\n        }\n   \
    \     return result;", "        List<long> result = new List<long>();\n      \
    \  foreach (long i in l) {\n            if (!result.Contains(i)) {\n         \
    \       result.Add(i);\n            }\n        }\n        return result;", " \
    \       List<long> result = new List<long>();\n        HashSet<long> set = new\
    \ HashSet<long>();\n        foreach (long x in l) {\n            if (!set.Add(x))\
    \ {\n                result.Add(x);\n            }\n        }\n        return\
    \ result;", "        List<long> result = new List<long>();\n        foreach (long\
    \ x in l)\n        {\n            if (!result.Contains(x))\n            {\n  \
    \              result.Add(x);\n            }\n        }\n        return result;",
  "        List<long> result = new List<long>();\n        HashSet<long> set = new\
    \ HashSet<long>();\n        foreach (long i in l) {\n            if (!set.Contains(i))\
    \ {\n                result.Add(i);\n                set.Add(i);\n           \
    \ }\n        }\n        return result;", "        List<long> result = new List<long>();\n\
    \        foreach (long i in l) {\n            if (!result.Contains(i)) {\n   \
    \             result.Add(i);\n            }\n        }\n        return result;",
  "        List<long> result = new List<long>();\n        foreach (long i in l) {\n\
    \            if (!result.Contains(i)) {\n                result.Add(i);\n    \
    \        }\n        }\n        return result;", "        List<long> result = new\
    \ List<long>();\n        long lastValue = long.MinValue;\n        foreach (long\
    \ value in l) {\n            if (value != lastValue) {\n                result.Add(value);\n\
    \                lastValue = value;\n            }\n        }\n        return\
    \ result;", "        List<long> result = new List<long>();\n        HashSet<long>\
    \ set = new HashSet<long>();\n        foreach (long i in l) {\n            if\
    \ (set.Add(i)) {\n                result.Add(i);\n            }\n        }\n \
    \       return result;", "        List<long> result = new List<long>();\n    \
    \    HashSet<long> set = new HashSet<long>();\n        foreach (long i in l) {\n\
    \            if (set.Add(i)) {\n                result.Add(i);\n            }\n\
    \        }\n        return result;", "        List<long> result = new List<long>();\n\
    \        HashSet<long> set = new HashSet<long>();\n        foreach (long i in\
    \ l) {\n            if (!set.Add(i)) {\n                result.Add(i);\n     \
    \       }\n        }\n        return result;", "        List<long> result = new\
    \ List<long>();\n        foreach (long i in l) {\n            if (!result.Contains(i))\
    \ {\n                result.Add(i);\n            }\n        }\n        return\
    \ result;", "        List<long> result = new List<long>();\n        foreach (long\
    \ i in l) {\n            if (!result.Contains(i)) {\n                result.Add(i);\n\
    \            }\n        }\n        return result;", "        List<long> result\
    \ = new List<long>();\n        foreach (long i in l) {\n            if (!result.Contains(i))\
    \ {\n                result.Add(i);\n            }\n        }\n        return\
    \ result;", "        List<long> unique = new List<long>();\n        foreach (long\
    \ i in l) {\n            if (!unique.Contains(i)) {\n                unique.Add(i);\n\
    \            }\n        }\n        return unique;", "        List<long> result\
    \ = new List<long>();\n        foreach (long i in l) {\n            if (!result.Contains(i))\
    \ {\n                result.Add(i);\n            }\n        }\n        return\
    \ result;", "        List<long> result = new List<long>();\n        HashSet<long>\
    \ set = new HashSet<long>();\n        foreach (long i in l) {\n            if\
    \ (!set.Contains(i)) {\n                result.Add(i);\n                set.Add(i);\n\
    \            }\n        }\n        return result;", "        List<long> result\
    \ = new List<long>();\n        foreach (long i in l) {\n            if (!result.Contains(i))\
    \ {\n                result.Add(i);\n            }\n        }\n        return\
    \ result;", "        List<long> result = new List<long>();\n        foreach (long\
    \ i in l) {\n            if (!result.Contains(i)) {\n                result.Add(i);\n\
    \            }\n        }\n        return result;", "        List<long> unique\
    \ = new List<long>();\n        foreach (long i in l) {\n            if (!unique.Contains(i))\
    \ {\n                unique.Add(i);\n            }\n        }\n        return\
    \ unique;", "        List<long> result = new List<long>();\n        long prev\
    \ = 0;\n        foreach (long x in l) {\n            if (x == prev) {\n      \
    \          continue;\n            }\n            result.Add(x);\n            prev\
    \ = x; \n        }\n        return result.OrderBy(x => x).ToList();", "      \
    \  List<long> result = new List<long>();\n        foreach (long i in l)\n    \
    \        if (!result.Contains(i))\n                result.Add(i);\n        return\
    \ result;", "        List<long> result = new List<long>();\n        HashSet<long>\
    \ set = new HashSet<long>();\n        foreach (long i in l) {\n            if\
    \ (!set.Contains(i)) {\n                result.Add(i);\n                set.Add(i);\n\
    \            }\n        }\n        return result;", "        List<long> unique\
    \ = new List<long>();\n        foreach (long i in l) {\n            if (!unique.Contains(i))\
    \ {\n                unique.Add(i);\n            }\n        }\n        return\
    \ unique;", "        List<long> result = new List<long>();\n        foreach (long\
    \ i in l) {\n            if (!result.Contains(i)) {\n                result.Add(i);\n\
    \            }\n        }\n        return result;", "        List<long> result\
    \ = new List<long>();\n        HashSet<long> set = new HashSet<long>();\n    \
    \    foreach (long x in l) {\n            if (set.Add(x)) {\n                result.Add(x);\n\
    \            }\n        }\n        return result;", "        List<long> result\
    \ = new List<long>();\n        HashSet<long> set = new HashSet<long>();\n    \
    \    foreach (long i in l) {\n            if (!set.Add(i)) {\n               \
    \ result.Add(i);\n            }\n        }\n        return result;", "       \
    \ List<long> result = new List<long>();\n        foreach (long i in l) {\n   \
    \         if (!result.Contains(i)) {\n                result.Add(i);\n       \
    \     }\n        }\n        return result;", "        List<long> result = new\
    \ List<long>();\n        long prev = 0;\n        foreach (long i in l) {\n   \
    \         if (prev != i) {\n                result.Add(i);\n                prev\
    \ = i;\n            }\n        }\n        return result;", "        List<long>\
    \ result = new List<long>();\n        HashSet<long> set = new HashSet<long>();\n\
    \        foreach (long i in l) {\n            if (!set.Add(i)) {\n           \
    \     result.Add(i);\n            }\n        }\n        return result;", "   \
    \     List<long> result = new List<long>();\n        HashSet<long> set = new HashSet<long>();\n\
    \        foreach (long i in l) {\n            if (!set.Contains(i)) {\n      \
    \          result.Add(i);\n                set.Add(i);\n            }\n      \
    \  }\n        return result;", "        List<long> unique = new List<long>();\n\
    \        foreach (long i in l) {\n            if (!unique.Contains(i)) {\n   \
    \             unique.Add(i);\n            }\n        }\n        return unique;",
  "        List<long> result = new List<long>();\n        HashSet<long> set = new\
    \ HashSet<long>();\n        foreach (long i in l) {\n            if (set.Add(i))\
    \ {\n                result.Add(i);\n            }\n        }\n        return\
    \ result;", "        List<long> result = new List<long>();\n        foreach (long\
    \ x in l) {\n            if (!result.Contains(x)) {\n                result.Add(x);\n\
    \            }\n        }\n        return result;"]
stop_tokens:
- "\n    }\n"
