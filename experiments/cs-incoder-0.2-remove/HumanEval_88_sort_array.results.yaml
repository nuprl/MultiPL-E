language: cs
name: HumanEval_88_sort_array
results:
- exit_code: -1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of non-negative integers, return a copy of the
    given array after sorting,\n    // you will sort the given array in ascending
    order if the sum( first index value, last index value) is odd,\n    // or sort
    it in descending order if the sum( first index value, last index value) is even.\n
    \   // Note:\n    // * don't change the given array.\n    // Examples:\n    public
    static List<long> SortArray(List<long> array) {\n        long sum = 0;\n        long
    lastSum = 0;\n        long firstSum = 0;\n        long tempSum = 0;\n        long
    tempFirstSum = 0;\n        long tempLastSum = 0;\n        List<long> result =
    new List<long>();\n        foreach (long i in array) {\n            sum += i;\n
    \           lastSum = sum;\n            firstSum = sum;\n            tempSum =
    sum;\n            tempFirstSum = firstSum;\n            tempLastSum = lastSum;\n
    \           while (sum != 0) {\n                tempSum -= lastSum;\n                tempFirstSum
    += firstSum;\n                tempLastSum += lastSum;\n                if (tempSum
    < 0) {\n                    tempSum = 0;\n                    tempFirstSum -=
    lastSum;\n                    tempLastSum -= firstSum;\n                }\n                result.Add(tempSum);\n
    \               lastSum = tempLastSum;\n                firstSum = tempFirstSum;\n
    \               tempSum = tempFirstSum;\n                tempFirstSum = tempLastSum;\n
    \               tempLastSum = tempSum;\n            }\n        }\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortArray((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)5L}))).Equals((new List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: Timeout
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d2b24b6f4dac4c77971ad49c1f3887d1>:0
    \n"
  stdout: None
  timestamp: 1659977115
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of non-negative integers, return a copy of the
    given array after sorting,\n    // you will sort the given array in ascending
    order if the sum( first index value, last index value) is odd,\n    // or sort
    it in descending order if the sum( first index value, last index value) is even.\n
    \   // Note:\n    // * don't change the given array.\n    // Examples:\n    public
    static List<long> SortArray(List<long> array) {\n        long sum = 0;\n        long
    temp = 0;\n        List<long> result = new List<long>();\n        foreach (long
    i in array) {\n            sum += i;\n        }\n        if (sum % 2 == 0) {\n
    \           temp = sum;\n            sum = sum / 2;\n            while (temp !=
    sum) {\n                result.Add(temp);\n                temp = temp / 2;\n
    \           }\n        } else {\n            temp = sum;\n            sum = sum
    / 2;\n            while (temp != sum) {\n                result.Add(temp);\n                temp
    = temp / 2;\n            }\n            temp = sum;\n            sum = sum / 2;\n
    \           while (temp != sum) {\n                result.Add(temp);\n                temp
    = temp / 2;\n            }\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(SortArray((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <608d0309916341dfad4b15a6c52eef34>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <608d0309916341dfad4b15a6c52eef34>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977110
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of non-negative integers, return a copy of the
    given array after sorting,\n    // you will sort the given array in ascending
    order if the sum( first index value, last index value) is odd,\n    // or sort
    it in descending order if the sum( first index value, last index value) is even.\n
    \   // Note:\n    // * don't change the given array.\n    // Examples:\n    public
    static List<long> SortArray(List<long> array) {\n        long sum = 0;\n        long
    temp;\n        List<long> result = new List<long>();\n        foreach (long i
    in array) {\n            sum += i;\n        }\n        if (sum % 2 == 0) {\n            temp
    = sum;\n            sum = array.Sum();\n            foreach (long i in array)
    {\n                sum += i;\n            }\n            temp = sum;\n            sum
    = temp;\n        }\n        Array.Sort(array);\n        foreach (long i in array)
    {\n            result.Add(i);\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(SortArray((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpmqo7sn5a.cs(31,20): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''System.Array''

    '
  timestamp: 1659977110
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of non-negative integers, return a copy of the
    given array after sorting,\n    // you will sort the given array in ascending
    order if the sum( first index value, last index value) is odd,\n    // or sort
    it in descending order if the sum( first index value, last index value) is even.\n
    \   // Note:\n    // * don't change the given array.\n    // Examples:\n    public
    static List<long> SortArray(List<long> array) {\n        long sum = 0;\n        long
    temp;\n        List<long> result = new List<long>();\n        foreach (long i
    in array) {\n            sum += i;\n        }\n        if (sum % 2 == 0) {\n            temp
    = sum;\n            foreach (long i in array) {\n                sum += i;\n                if
    (sum % 2 == 0) {\n                    result.Add(temp);\n                    sum
    -= temp;\n                }\n                temp = sum;\n            }\n        }
    else {\n            temp = sum;\n            foreach (long i in array) {\n                sum
    += i;\n                if (sum % 2 == 1) {\n                    result.Add(temp);\n
    \                   sum -= temp;\n                }\n                temp = sum;\n
    \           }\n        }\n        return result;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(SortArray((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <0ae45a3f3c884ce48d1437d9245b23e5>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <0ae45a3f3c884ce48d1437d9245b23e5>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977110
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of non-negative integers, return a copy of the
    given array after sorting,\n    // you will sort the given array in ascending
    order if the sum( first index value, last index value) is odd,\n    // or sort
    it in descending order if the sum( first index value, last index value) is even.\n
    \   // Note:\n    // * don't change the given array.\n    // Examples:\n    public
    static List<long> SortArray(List<long> array) {\n        long sum = 0;\n        long
    temp = 0;\n        List<long> result = new List<long>();\n        foreach (long
    i in array) {\n            sum += i;\n        }\n        if (sum % 2 == 0) {\n
    \           temp = sum / 2;\n            while (temp > 0) {\n                result.Add(array[temp]);\n
    \               temp--;\n            }\n        } else {\n            temp = sum
    / 2;\n            while (temp < array.Count - 1) {\n                result.Add(array[temp]);\n
    \               temp++;\n            }\n        }\n        return result;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(SortArray((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)5L}))).Equals((new List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpxo9kpbvx.cs(25,34): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmpxo9kpbvx.cs(31,34): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    '
  timestamp: 1659977110
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of non-negative integers, return a copy of the
    given array after sorting,\n    // you will sort the given array in ascending
    order if the sum( first index value, last index value) is odd,\n    // or sort
    it in descending order if the sum( first index value, last index value) is even.\n
    \   // Note:\n    // * don't change the given array.\n    // Examples:\n    public
    static List<long> SortArray(List<long> array) {\n        long sum = 0;\n        long
    first = 0;\n        long last = 0;\n        long temp = 0;\n        List<long>
    result = new List<long>();\n        foreach (long i in array) {\n            sum
    += i;\n            if (sum % 2 == 0) {\n                temp = sum;\n                first
    = i;\n            } else {\n                last = i;\n            }\n            result.Add(temp);\n
    \       }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(SortArray((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c69e2c03b17c429d8f44d89592ca1a75>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c69e2c03b17c429d8f44d89592ca1a75>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977110
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of non-negative integers, return a copy of the
    given array after sorting,\n    // you will sort the given array in ascending
    order if the sum( first index value, last index value) is odd,\n    // or sort
    it in descending order if the sum( first index value, last index value) is even.\n
    \   // Note:\n    // * don't change the given array.\n    // Examples:\n    public
    static List<long> SortArray(List<long> array) {\n        long sum = 0;\n        long
    temp;\n        List<long> result = new List<long>();\n        foreach (long i
    in array) {\n            sum += i;\n        }\n        if (sum % 2 == 0) {\n            temp
    = sum;\n            while (temp > 0) {\n                result.Add(temp % 2);\n
    \               temp /= 2;\n            }\n        } else {\n            temp
    = sum;\n            while (temp > 0) {\n                result.Add(temp % 2);\n
    \               temp /= 2;\n            }\n            temp = sum;\n            while
    (temp > 0) {\n                result.Add(temp % 2);\n                temp /= 2;\n
    \           }\n        }\n        return result;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(SortArray((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <ebc906f8be32468dbd3dfd52888c2db1>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <ebc906f8be32468dbd3dfd52888c2db1>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977110
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of non-negative integers, return a copy of the
    given array after sorting,\n    // you will sort the given array in ascending
    order if the sum( first index value, last index value) is odd,\n    // or sort
    it in descending order if the sum( first index value, last index value) is even.\n
    \   // Note:\n    // * don't change the given array.\n    // Examples:\n    public
    static List<long> SortArray(List<long> array) {\n        List<long> result = new
    List<long>();\n        long sum = 0;\n        long first = 0;\n        long last
    = 0;\n        foreach (long i in array) {\n            sum += i;\n            if
    (sum % 2 == 0) {\n                result.Add(i);\n                first = i;\n
    \           } else {\n                result.Add(last + i);\n                last
    = i;\n            }\n        }\n        return result;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(SortArray((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <08d81e13251d4f95a2ee47db58d5d2a2>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <08d81e13251d4f95a2ee47db58d5d2a2>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977110
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of non-negative integers, return a copy of the
    given array after sorting,\n    // you will sort the given array in ascending
    order if the sum( first index value, last index value) is odd,\n    // or sort
    it in descending order if the sum( first index value, last index value) is even.\n
    \   // Note:\n    // * don't change the given array.\n    // Examples:\n    public
    static List<long> SortArray(List<long> array) {\n        long sum = 0;\n        long
    temp = 0;\n        List<long> result = new List<long>();\n        foreach (long
    i in array) {\n            sum += i;\n            if (sum % 2 == 0) {\n                temp
    = sum;\n            } else {\n                temp = sum - 1;\n            }\n
    \           result.Add(temp);\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(SortArray((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c117842bc8d3401c8673a7a9756613e9>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c117842bc8d3401c8673a7a9756613e9>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977110
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of non-negative integers, return a copy of the
    given array after sorting,\n    // you will sort the given array in ascending
    order if the sum( first index value, last index value) is odd,\n    // or sort
    it in descending order if the sum( first index value, last index value) is even.\n
    \   // Note:\n    // * don't change the given array.\n    // Examples:\n    public
    static List<long> SortArray(List<long> array) {\n        long sum = 0;\n        long
    sum2 = 0;\n        List<long> result = new List<long>();\n        foreach (long
    i in array) {\n            sum += i;\n        }\n        sum2 = sum % 2;\n        if
    (sum2 == 0) {\n            foreach (long i in array) {\n                result.Add(i);\n
    \           }\n        } else {\n            foreach (long i in array) {\n                result.Add(-i);\n
    \           }\n        }\n        return result;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(SortArray((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <686ba2ed7a914babacb5b928d620e2ed>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <686ba2ed7a914babacb5b928d620e2ed>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977110
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of non-negative integers, return a copy of the
    given array after sorting,\n    // you will sort the given array in ascending
    order if the sum( first index value, last index value) is odd,\n    // or sort
    it in descending order if the sum( first index value, last index value) is even.\n
    \   // Note:\n    // * don't change the given array.\n    // Examples:\n    public
    static List<long> SortArray(List<long> array) {\n        long sum = 0;\n        long
    temp;\n        List<long> result = new List<long>();\n        foreach (long i
    in array) {\n            sum += i;\n        }\n        if (sum % 2 == 0) {\n            temp
    = sum;\n            sum = array.Sum();\n            foreach (long i in array)
    {\n                sum += i;\n            }\n            temp = sum;\n            sum
    = temp;\n        }\n        Array.Sort(array);\n        foreach (long i in array)
    {\n            result.Add(i);\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(SortArray((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpmqo7sn5a.cs(31,20): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''System.Array''

    '
  timestamp: 1659977110
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of non-negative integers, return a copy of the
    given array after sorting,\n    // you will sort the given array in ascending
    order if the sum( first index value, last index value) is odd,\n    // or sort
    it in descending order if the sum( first index value, last index value) is even.\n
    \   // Note:\n    // * don't change the given array.\n    // Examples:\n    public
    static List<long> SortArray(List<long> array) {\n        long sum = 0;\n        long
    temp = 0;\n        List<long> result = new List<long>();\n        foreach (long
    i in array) {\n            sum += i;\n        }\n        if (sum % 2 == 0) {\n
    \           temp = sum;\n            sum = sum / 2;\n            while (sum >
    0) {\n                result.Add(temp);\n                sum -= temp;\n                temp
    = sum;\n                sum = sum / 2;\n            }\n        } else {\n            temp
    = sum;\n            sum = sum / 2;\n            while (sum < 0) {\n                result.Add(temp);\n
    \               sum -= temp;\n                temp = sum;\n                sum
    = sum / 2;\n            }\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(SortArray((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <6d3c82652288427a9a7968fdeccccb76>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <6d3c82652288427a9a7968fdeccccb76>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977110
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of non-negative integers, return a copy of the
    given array after sorting,\n    // you will sort the given array in ascending
    order if the sum( first index value, last index value) is odd,\n    // or sort
    it in descending order if the sum( first index value, last index value) is even.\n
    \   // Note:\n    // * don't change the given array.\n    // Examples:\n    public
    static List<long> SortArray(List<long> array) {\n        long sum = 0;\n        long
    temp = 0;\n        List<long> result = new List<long>();\n        foreach (long
    i in array) {\n            sum += i;\n        }\n        if (sum % 2 == 0) {\n
    \           temp = sum;\n            sum = sum / 2;\n            while (temp !=
    0) {\n                result.Add(temp);\n                temp = temp / 2;\n            }\n
    \       } else {\n            temp = sum;\n            sum = sum / 2;\n            while
    (temp != 0) {\n                result.Add(temp);\n                temp = temp
    / 2;\n            }\n            temp = sum;\n            sum = sum / 2;\n            while
    (temp != 0) {\n                result.Add(temp);\n                temp = temp
    / 2;\n            }\n        }\n        return result;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(SortArray((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <fee92372d8154b7b8711e0195a316c37>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <fee92372d8154b7b8711e0195a316c37>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977110
- exit_code: -1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of non-negative integers, return a copy of the
    given array after sorting,\n    // you will sort the given array in ascending
    order if the sum( first index value, last index value) is odd,\n    // or sort
    it in descending order if the sum( first index value, last index value) is even.\n
    \   // Note:\n    // * don't change the given array.\n    // Examples:\n    public
    static List<long> SortArray(List<long> array) {\n        long sum = 0;\n        long
    temp = 0;\n        List<long> result = new List<long>();\n        foreach (long
    i in array) {\n            sum += i;\n        }\n        if (sum % 2 == 0) {\n
    \           temp = sum;\n            sum = sum / 2;\n            while (temp !=
    0) {\n                result.Add(temp);\n                temp -= 1;\n            }\n
    \       } else {\n            temp = sum;\n            sum = sum / 2;\n            while
    (temp != 0) {\n                result.Add(temp);\n                temp += 1;\n
    \           }\n        }\n        return result;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(SortArray((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: Timeout
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <b8bbbb4a828140a3b53195f1b8ac6d73>:0
    \n"
  stdout: None
  timestamp: 1659977115
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of non-negative integers, return a copy of the
    given array after sorting,\n    // you will sort the given array in ascending
    order if the sum( first index value, last index value) is odd,\n    // or sort
    it in descending order if the sum( first index value, last index value) is even.\n
    \   // Note:\n    // * don't change the given array.\n    // Examples:\n    public
    static List<long> SortArray(List<long> array) {\n        long sum = 0;\n        long
    sumOfFirstIndex = 0;\n        long sumOfLastIndex = 0;\n        long firstIndex
    = 0;\n        long lastIndex = 0;\n        long temp = 0;\n        List<long>
    result = new List<long>();\n        foreach (long i in array) {\n            sum
    += i;\n            sumOfFirstIndex += i;\n            sumOfLastIndex += i;\n        }\n
    \       if (sumOfFirstIndex % 2 == 0) {\n            firstIndex = sumOfFirstIndex
    / 2;\n            lastIndex = sumOfLastIndex / 2;\n        } else {\n            firstIndex
    = sumOfFirstIndex / 2;\n            lastIndex = sumOfLastIndex / 2;\n        }\n
    \       temp = firstIndex;\n        while (temp < lastIndex) {\n            result.Add(array[temp]);\n
    \           temp++;\n        }\n        temp = firstIndex;\n        while (temp
    < lastIndex) {\n            result.Add(array[temp]);\n            temp++;\n        }\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(SortArray((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp7a79ntzq.cs(37,30): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmp7a79ntzq.cs(42,30): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    '
  timestamp: 1659977110
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of non-negative integers, return a copy of the
    given array after sorting,\n    // you will sort the given array in ascending
    order if the sum( first index value, last index value) is odd,\n    // or sort
    it in descending order if the sum( first index value, last index value) is even.\n
    \   // Note:\n    // * don't change the given array.\n    // Examples:\n    public
    static List<long> SortArray(List<long> array) {\n        long sum = 0;\n        long
    temp = 0;\n        List<long> result = new List<long>();\n        foreach (long
    i in array) {\n            sum += i;\n        }\n        if (sum % 2 == 0) {\n
    \           temp = sum;\n            sum = sum / 2;\n            while (sum >
    0) {\n                result.Add(temp);\n                sum -= temp;\n                temp
    = sum;\n                sum = sum / 2;\n            }\n        } else {\n            temp
    = sum;\n            sum = sum / 2;\n            while (sum < 0) {\n                result.Add(temp);\n
    \               sum -= temp;\n                temp = sum;\n                sum
    = sum / 2;\n            }\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(SortArray((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <6d3c82652288427a9a7968fdeccccb76>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <6d3c82652288427a9a7968fdeccccb76>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977110
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of non-negative integers, return a copy of the
    given array after sorting,\n    // you will sort the given array in ascending
    order if the sum( first index value, last index value) is odd,\n    // or sort
    it in descending order if the sum( first index value, last index value) is even.\n
    \   // Note:\n    // * don't change the given array.\n    // Examples:\n    public
    static List<long> SortArray(List<long> array) {\n        long sum = 0;\n        long
    max = 0;\n        long min = 0;\n        long sumOfFirst = 0;\n        long sumOfLast
    = 0;\n        long sumOfFirstLast = 0;\n        long sumOfFirstLastEven = 0;\n
    \       long sumOfFirstLastOdd = 0;\n        long sumOfFirstLastEvenOdd = 0;\n
    \       long sumOfFirstLastOddEven = 0;\n        long sumOfFirstLastOddOdd = 0;\n
    \       long sumOfFirstLastEvenOddOdd = 0;\n        long sumOfFirstLastOddEvenOdd
    = 0;\n        long sumOfFirstLastEvenOddEven = 0;\n        long sumOfFirstLastOddEvenOddOdd
    = 0;\n        long sumOfFirstLastEvenOddEvenOdd = 0;\n        long sumOfFirstLastOddEvenOddEven
    = 0;\n        long sumOfFirstLastEvenOddEvenOddOdd = 0;\n        long sumOfFirstLastOddEvenOddEvenOdd
    = 0;\n        long sumOfFirstLastEvenOddEvenOddEven = 0;\n        long sumOfFirstLastOddEvenOddEvenOdd
    = 0;\n        long sumOfFirstLastEvenOddEvenOddEven = 0;\n        long sumOfFirstLastOddEvenOddEvenOdd
    = 0;\n        long sumOfFirstLastEvenOddEvenOddEven = 0;\n        long sumOfFirstLastOddEvenOddEvenOdd
    = 0;\n        long sumOfFirstLastEvenOddEvenOddEven = 0;\n        long sumOfFirstLastOddEvenOddEvenOdd
    = 0;\n        long sumOfFirstLastEvenOddEvenOddEven = 0;\n        long sumOfFirstLastOddEvenOddEvenOdd
    = 0;\n        long sumOfFirstLastEvenOddEvenOddEven = 0;\n        long sumOfFirstLastOddEvenOddEvenOdd
    = 0;\n        long sumOfFirstLastEvenOddEvenOddEven = 0;\n        long sumOfFirstLastOddEvenOddEvenOdd
    = 0;\n        long sumOfFirstLastEvenOddEvenOddEven = 0;\n        long sumOfFirstLastOddEvenOddEvenOdd
    = 0;\n        long sumOfFirstLastEvenOddEvenOddEven = 0;\n        long sumOfFirstLastOddEvenOddEvenOdd
    = 0;\n        long sumOfFirstLastEvenOddEvenOddEven = 0;\n        long sumOfFirstLastOddEvenOddEvenOdd
    = 0;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortArray((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)5L}))).Equals((new List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpjvojngrb.cs(36,14): error CS0128: A local variable or function named ''sumOfFirstLastOddEvenOddEvenOdd''
    is already defined in this scope

    /tmp/tmpjvojngrb.cs(37,14): error CS0128: A local variable or function named ''sumOfFirstLastEvenOddEvenOddEven''
    is already defined in this scope

    /tmp/tmpjvojngrb.cs(38,14): error CS0128: A local variable or function named ''sumOfFirstLastOddEvenOddEvenOdd''
    is already defined in this scope

    /tmp/tmpjvojngrb.cs(39,14): error CS0128: A local variable or function named ''sumOfFirstLastEvenOddEvenOddEven''
    is already defined in this scope

    /tmp/tmpjvojngrb.cs(40,14): error CS0128: A local variable or function named ''sumOfFirstLastOddEvenOddEvenOdd''
    is already defined in this scope

    /tmp/tmpjvojngrb.cs(41,14): error CS0128: A local variable or function named ''sumOfFirstLastEvenOddEvenOddEven''
    is already defined in this scope

    /tmp/tmpjvojngrb.cs(42,14): error CS0128: A local variable or function named ''sumOfFirstLastOddEvenOddEvenOdd''
    is already defined in this scope

    /tmp/tmpjvojngrb.cs(43,14): error CS0128: A local variable or function named ''sumOfFirstLastEvenOddEvenOddEven''
    is already defined in this scope

    /tmp/tmpjvojngrb.cs(44,14): error CS0128: A local variable or function named ''sumOfFirstLastOddEvenOddEvenOdd''
    is already defined in this scope

    /tmp/tmpjvojngrb.cs(45,14): error CS0128: A local variable or function named ''sumOfFirstLastEvenOddEvenOddEven''
    is already defined in this scope

    /tmp/tmpjvojngrb.cs(46,14): error CS0128: A local variable or function named ''sumOfFirstLastOddEvenOddEvenOdd''
    is already defined in this scope

    /tmp/tmpjvojngrb.cs(47,14): error CS0128: A local variable or function named ''sumOfFirstLastEvenOddEvenOddEven''
    is already defined in this scope

    /tmp/tmpjvojngrb.cs(48,14): error CS0128: A local variable or function named ''sumOfFirstLastOddEvenOddEvenOdd''
    is already defined in this scope

    /tmp/tmpjvojngrb.cs(49,14): error CS0128: A'
  timestamp: 1659977110
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of non-negative integers, return a copy of the
    given array after sorting,\n    // you will sort the given array in ascending
    order if the sum( first index value, last index value) is odd,\n    // or sort
    it in descending order if the sum( first index value, last index value) is even.\n
    \   // Note:\n    // * don't change the given array.\n    // Examples:\n    public
    static List<long> SortArray(List<long> array) {\n        long sum = 0;\n        long
    sum2 = 0;\n        long sum3 = 0;\n        long sum4 = 0;\n        long sum5 =
    0;\n        long sum6 = 0;\n        long sum7 = 0;\n        long sum8 = 0;\n        long
    sum9 = 0;\n        long sum10 = 0;\n        long sum11 = 0;\n        long sum12
    = 0;\n        long sum13 = 0;\n        long sum14 = 0;\n        long sum15 = 0;\n
    \       long sum16 = 0;\n        long sum17 = 0;\n        long sum18 = 0;\n        long
    sum19 = 0;\n        long sum20 = 0;\n        long sum21 = 0;\n        long sum22
    = 0;\n        long sum23 = 0;\n        long sum24 = 0;\n        long sum25 = 0;\n
    \       long sum26 = 0;\n        long sum27 = 0;\n        long sum28 = 0;\n        long
    sum29 = 0;\n        long sum30 = 0;\n        long sum31 = 0;\n        long sum32
    = 0;\n        long sum33 = 0;\n        long sum34 = 0;\n        long sum35 = 0;\n
    \       long sum36 = 0;\n        long sum37 = 0;\n        long sum38 = 0;\n        long
    sum39 = 0;\n        long sum40 = 0;\n        long sum41 = 0;\n        long sum42
    = 0;\n        long sum43 = 0;\n        long sum44 = 0;\n        long sum45 = 0;\n
    \       long sum46 = 0;\n        long sum47 = 0;\n        long sum48 = 0;\n        long
    sum49 = 0;\n        long sum50 = 0;\n        long sum51 = 0;\n        long sum52
    = 0;\n        long sum53 = 0;\n        long sum54 = 0;\n        long sum55 = 0;\n
    \       long sum56 = 0;\n        long sum57 = 0;\n        long sum58 = 0;\n        long
    sum59 = 0;\n        long sum60 = 0;\n        long sum61 = 0;\n        long sum62
    = 0;\n        long sum63 = 0;\n        long sum64 = 0;\n        long sum65 = 0;\n
    \       long sum66 = 0;\n        long sum67 = 0;\n        long sum68 = 0;\n        long
    sum69 = 0;\n        long sum70 = 0;\n        long sum71 = 0;\n        long sum72
    = 0;\n        long sum73 = 0;\n        long sum74 = 0;\n        long sum75 = 0;\n
    \       long sum76 = 0;\n        long sum77 = 0;\n        long sum78 = 0;\n        long
    sum79 = 0;\n        long sum80 = 0;\n        long sum81 = 0;\n        long sum82
    = 0;\n        long sum83 = 0;\n        long sum84 = 0;\n        long sum85 = 0;\n
    \       long sum86 = 0;\n        \n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(SortArray((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpmchrwcpg.cs(16,14): warning CS0219: The variable ''sum'' is assigned but
    its value is never used

    /tmp/tmpmchrwcpg.cs(17,14): warning CS0219: The variable ''sum2'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(18,14): warning CS0219: The variable ''sum3'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(19,14): warning CS0219: The variable ''sum4'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(20,14): warning CS0219: The variable ''sum5'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(21,14): warning CS0219: The variable ''sum6'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(22,14): warning CS0219: The variable ''sum7'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(23,14): warning CS0219: The variable ''sum8'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(24,14): warning CS0219: The variable ''sum9'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(25,14): warning CS0219: The variable ''sum10'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(26,14): warning CS0219: The variable ''sum11'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(27,14): warning CS0219: The variable ''sum12'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(28,14): warning CS0219: The variable ''sum13'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(29,14): warning CS0219: The variable ''sum14'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(30,14): warning CS0219: The variable ''sum15'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(31,14): warning CS0219: The variable ''sum16'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(32,14): warning CS0219: The variable ''sum17'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(33,14): warning CS0219: The variable ''sum18'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(34,14): warning CS021'
  timestamp: 1659977110
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of non-negative integers, return a copy of the
    given array after sorting,\n    // you will sort the given array in ascending
    order if the sum( first index value, last index value) is odd,\n    // or sort
    it in descending order if the sum( first index value, last index value) is even.\n
    \   // Note:\n    // * don't change the given array.\n    // Examples:\n    public
    static List<long> SortArray(List<long> array) {\n        long sum = 0;\n        long
    temp = 0;\n        List<long> result = new List<long>();\n        foreach (long
    i in array) {\n            sum += i;\n        }\n        if (sum % 2 == 0) {\n
    \           temp = sum;\n            sum = sum / 2;\n            while (temp !=
    sum) {\n                result.Add(temp);\n                temp = temp / 2;\n
    \           }\n        } else {\n            temp = sum;\n            sum = sum
    / 2;\n            while (temp != sum) {\n                result.Add(temp);\n                temp
    = temp / 2;\n            }\n            temp = sum;\n            sum = sum / 2;\n
    \           while (temp != sum) {\n                result.Add(temp);\n                temp
    = temp / 2;\n            }\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(SortArray((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <608d0309916341dfad4b15a6c52eef34>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <608d0309916341dfad4b15a6c52eef34>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977110
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of non-negative integers, return a copy of the
    given array after sorting,\n    // you will sort the given array in ascending
    order if the sum( first index value, last index value) is odd,\n    // or sort
    it in descending order if the sum( first index value, last index value) is even.\n
    \   // Note:\n    // * don't change the given array.\n    // Examples:\n    public
    static List<long> SortArray(List<long> array) {\n        long sum = 0;\n        long
    temp = 0;\n        List<long> result = new List<long>();\n        foreach (long
    i in array) {\n            sum += i;\n        }\n        if (sum % 2 == 0) {\n
    \           temp = sum;\n            sum = sum / 2;\n            while (sum >
    0) {\n                result.Add(temp);\n                sum -= temp;\n                temp
    = temp / 2;\n            }\n        } else {\n            temp = sum;\n            sum
    = sum / 2;\n            while (sum < 0) {\n                result.Add(temp);\n
    \               sum += temp;\n                temp = temp / 2;\n            }\n
    \       }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(SortArray((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <763d39e47f4c4a8aacc707e4d808438c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <763d39e47f4c4a8aacc707e4d808438c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977110
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of non-negative integers, return a copy of the
    given array after sorting,\n    // you will sort the given array in ascending
    order if the sum( first index value, last index value) is odd,\n    // or sort
    it in descending order if the sum( first index value, last index value) is even.\n
    \   // Note:\n    // * don't change the given array.\n    // Examples:\n    public
    static List<long> SortArray(List<long> array) {\n        long sum = 0;\n        long
    sum1 = 0;\n        long sum2 = 0;\n        List<long> result = new List<long>();\n
    \       foreach (long i in array) {\n            sum += i;\n            sum1 +=
    i;\n            sum2 += i;\n        }\n        if (sum % 2 == 0) {\n            Array.Sort(array);\n
    \           foreach (long i in array) {\n                result.Add(i);\n            }\n
    \       } else {\n            Array.Reverse(array);\n            foreach (long
    i in array) {\n                result.Add(i);\n            }\n        }\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortArray((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)5L}))).Equals((new List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmphwemwl3x.cs(26,24): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''System.Array''

    /tmp/tmphwemwl3x.cs(31,27): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''System.Array''

    '
  timestamp: 1659977110
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of non-negative integers, return a copy of the
    given array after sorting,\n    // you will sort the given array in ascending
    order if the sum( first index value, last index value) is odd,\n    // or sort
    it in descending order if the sum( first index value, last index value) is even.\n
    \   // Note:\n    // * don't change the given array.\n    // Examples:\n    public
    static List<long> SortArray(List<long> array) {\n        long sum = 0;\n        long
    temp = 0;\n        List<long> result = new List<long>();\n        foreach (long
    i in array) {\n            sum += i;\n        }\n        if (sum % 2 == 0) {\n
    \           temp = sum;\n            sum = sum / 2;\n            while (temp !=
    sum) {\n                result.Add(array[temp]);\n                temp++;\n            }\n
    \       } else {\n            temp = sum;\n            sum = sum / 2;\n            while
    (temp != sum) {\n                result.Add(array[temp]);\n                temp--;\n
    \           }\n        }\n        return result;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(SortArray((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpdn1txldm.cs(26,34): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmpdn1txldm.cs(33,34): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    '
  timestamp: 1659977110
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of non-negative integers, return a copy of the
    given array after sorting,\n    // you will sort the given array in ascending
    order if the sum( first index value, last index value) is odd,\n    // or sort
    it in descending order if the sum( first index value, last index value) is even.\n
    \   // Note:\n    // * don't change the given array.\n    // Examples:\n    public
    static List<long> SortArray(List<long> array) {\n        long sum = 0;\n        long
    first = 0;\n        long last = 0;\n        long mid = 0;\n        List<long>
    result = new List<long>();\n        foreach (long i in array) {\n            sum
    += i;\n            if (sum % 2 == 0) {\n                result.Add(i);\n            }
    else {\n                result.Add(-i);\n            }\n        }\n        Array.Sort(result);\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(SortArray((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpkb07jd3l.cs(29,20): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''System.Array''

    /tmp/tmpkb07jd3l.cs(17,14): warning CS0219: The variable ''first'' is assigned
    but its value is never used

    /tmp/tmpkb07jd3l.cs(18,14): warning CS0219: The variable ''last'' is assigned
    but its value is never used

    /tmp/tmpkb07jd3l.cs(19,14): warning CS0219: The variable ''mid'' is assigned but
    its value is never used

    '
  timestamp: 1659977110
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of non-negative integers, return a copy of the
    given array after sorting,\n    // you will sort the given array in ascending
    order if the sum( first index value, last index value) is odd,\n    // or sort
    it in descending order if the sum( first index value, last index value) is even.\n
    \   // Note:\n    // * don't change the given array.\n    // Examples:\n    public
    static List<long> SortArray(List<long> array) {\n        long sum = 0;\n        foreach
    (var item in array) {\n            sum += item;\n        }\n        if (sum %
    2 == 0) {\n            array.Reverse();\n        }\n        long sum2 = 0;\n        foreach
    (var item in array) {\n            sum2 += item;\n        }\n        if (sum2
    % 2 == 0) {\n            array.Reverse();\n        }\n        long sum3 = 0;\n
    \       foreach (var item in array) {\n            sum3 += item;\n        }\n
    \       if (sum3 % 2 == 0) {\n            array.Reverse();\n        }\n        long
    sum4 = 0;\n        foreach (var item in array) {\n            sum4 += item;\n
    \       }\n        if (sum4 % 2 == 0) {\n            array.Reverse();\n        }\n
    \       long sum5 = 0;\n        foreach (var item in array) {\n            sum5
    += item;\n        }\n        if (sum5 % 2 == 0) {\n            array.Reverse();\n
    \       }\n        long sum6 = 0;\n        foreach (var item in array) {\n            sum6
    += item;\n        }\n        if (sum6 % 2 == 0) {\n            array.Reverse();\n
    \       }\n        long sum7 = 0;\n        foreach (var item in array) {\n            sum7
    += item;\n        }\n        if (sum7 % 2 == 0) {\n            array.Reverse();\n
    \       }\n        long sum8 = 0;\n        foreach (var item in array) {\n            sum8
    += item;\n        }\n        if (sum8 % 2 == 0) {\n            array.Reverse();\n
    \       }\n        long sum9 = 0;\n        foreach (var item in array) {\n            sum9
    += item;\n        }\n        if (sum9 % 2 == 0) {\n            array.Reverse();\n
    \       }\n        long sum10 = 0;\n        foreach (var item in array) {\n            sum10
    += item;\n        }\n        if (sum10 % 2 == 0) {\n            array.Reverse();\n
    \       }\n        long sum11 = 0;\n        foreach (var item in array) {\n            sum11
    += item;\n        }\n        if (sum11 % 2 == 0) {\n            array.Reverse();\n
    \       }\n        long sum12 = 0;\n        foreach (var item in array) {\n            sum12
    += item;\n        }\n        if (sum12 % 2 == 0) {\n            array.Reverse();\n
    \       }\n        long sum13 = 0;\n        foreach (var item in array) {\n            sum13
    += item;\n        }\n        if (sum13 % 2 == 0) {\n            array.Reverse();\n
    \       }\n        long sum14 = 0;\n        foreach (var item in array) {\n            sum14
    += item;\n        }\n        if (sum14 % 2 == 0) {\n            array.Reverse();\n
    \       }\n        long sum15 = 0;\n        foreach (var item in array) {\n            sum15
    += item;\n        }\n        if (sum15 % 2 == 0) {\n            array.\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(SortArray((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)5L}))).Equals((new List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpzlmxo7g2.cs(119,19): error CS1001: Identifier expected

    /tmp/tmpzlmxo7g2.cs(119,19): error CS1002: ; expected

    /tmp/tmpzlmxo7g2.cs(121,5): error CS0106: The modifier ''public'' is not valid
    for this item

    /tmp/tmpzlmxo7g2.cs(131,2): error CS1513: } expected

    '
  timestamp: 1659977109
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of non-negative integers, return a copy of the
    given array after sorting,\n    // you will sort the given array in ascending
    order if the sum( first index value, last index value) is odd,\n    // or sort
    it in descending order if the sum( first index value, last index value) is even.\n
    \   // Note:\n    // * don't change the given array.\n    // Examples:\n    public
    static List<long> SortArray(List<long> array) {\n        long sum = 0;\n        long
    lastSum = 0;\n        long firstSum = 0;\n        long lastSum = 0;\n        long
    firstSum = 0;\n        long lastSum = 0;\n        long firstSum = 0;\n        long
    lastSum = 0;\n        long firstSum = 0;\n        long lastSum = 0;\n        long
    firstSum = 0;\n        long lastSum = 0;\n        long firstSum = 0;\n        long
    lastSum = 0;\n        long firstSum = 0;\n        long lastSum = 0;\n        long
    firstSum = 0;\n        long lastSum = 0;\n        long firstSum = 0;\n        long
    lastSum = 0;\n        long firstSum = 0;\n        long lastSum = 0;\n        long
    firstSum = 0;\n        long lastSum = 0;\n        long firstSum = 0;\n        long
    lastSum = 0;\n        long firstSum = 0;\n        long lastSum = 0;\n        long
    firstSum = 0;\n        long lastSum = 0;\n        long firstSum = 0;\n        long
    lastSum = 0;\n        long firstSum = 0;\n        long lastSum = 0;\n        long
    firstSum = 0;\n        long lastSum = 0;\n        long firstSum = 0;\n        long
    lastSum = 0;\n        long firstSum = 0;\n        long lastSum = 0;\n        long
    firstSum = 0;\n        long lastSum = 0;\n        long firstSum = 0;\n        long
    lastSum = 0;\n        long firstSum = 0;\n        long lastSum = 0;\n        long
    firstSum = 0;\n        long lastSum = 0;\n        long firstSum = 0;\n        long
    lastSum = 0;\n        long firstSum = 0;\n        long lastSum = 0;\n        long
    firstSum = 0;\n        long lastSum = 0;\n        long firstSum = 0;\n        long
    lastSum = 0;\n        long firstSum = 0;\n        long lastSum = 0;\n        long
    firstSum = 0;\n        long lastSum = 0;\n        long firstSum = 0;\n        long
    lastSum = 0;\n        long firstSum = 0;\n        long lastSum = 0;\n        long
    firstSum = 0;\n        long lastSum = 0;\n        long firstSum = 0;\n        long
    lastSum = 0;\n        long firstSum = 0;\n        long lastSum = 0;\n        long
    firstSum = 0;\n        long lastSum = 0;\n        long firstSum = 0;\n        long
    lastSum = 0;\n        long firstSum = 0;\n        long lastSum = 0;\n        long
    firstSum = 0;\n        long lastSum = 0;\n        long firstSum = 0;\n        long
    lastSum = 0;\n        long firstSum = 0;\n        long lastSum = 0;\n        long
    firstSum = 0;\n        long lastSum = 0;\n        long firstSum = 0;\n        long
    last\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortArray((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)5L}))).Equals((new List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpu6xfuuys.cs(101,18): error CS1002: ; expected

    '
  timestamp: 1659977109
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of non-negative integers, return a copy of the
    given array after sorting,\n    // you will sort the given array in ascending
    order if the sum( first index value, last index value) is odd,\n    // or sort
    it in descending order if the sum( first index value, last index value) is even.\n
    \   // Note:\n    // * don't change the given array.\n    // Examples:\n    public
    static List<long> SortArray(List<long> array) {\n        long sum = 0;\n        long
    first = 0;\n        long last = 0;\n        long mid = 0;\n        List<long>
    result = new List<long>();\n        foreach (long i in array) {\n            sum
    += i;\n            if (sum % 2 == 0) {\n                result.Add(i);\n            }
    else {\n                result.Add(-i);\n            }\n        }\n        Array.Sort(result);\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(SortArray((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpkb07jd3l.cs(29,20): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''System.Array''

    /tmp/tmpkb07jd3l.cs(17,14): warning CS0219: The variable ''first'' is assigned
    but its value is never used

    /tmp/tmpkb07jd3l.cs(18,14): warning CS0219: The variable ''last'' is assigned
    but its value is never used

    /tmp/tmpkb07jd3l.cs(19,14): warning CS0219: The variable ''mid'' is assigned but
    its value is never used

    '
  timestamp: 1659977110
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of non-negative integers, return a copy of the
    given array after sorting,\n    // you will sort the given array in ascending
    order if the sum( first index value, last index value) is odd,\n    // or sort
    it in descending order if the sum( first index value, last index value) is even.\n
    \   // Note:\n    // * don't change the given array.\n    // Examples:\n    public
    static List<long> SortArray(List<long> array) {\n        long sum = 0;\n        long
    sum2 = 0;\n        long sum3 = 0;\n        long sum4 = 0;\n        long sum5 =
    0;\n        long sum6 = 0;\n        long sum7 = 0;\n        long sum8 = 0;\n        long
    sum9 = 0;\n        long sum10 = 0;\n        long sum11 = 0;\n        long sum12
    = 0;\n        long sum13 = 0;\n        long sum14 = 0;\n        long sum15 = 0;\n
    \       long sum16 = 0;\n        long sum17 = 0;\n        long sum18 = 0;\n        long
    sum19 = 0;\n        long sum20 = 0;\n        long sum21 = 0;\n        long sum22
    = 0;\n        long sum23 = 0;\n        long sum24 = 0;\n        long sum25 = 0;\n
    \       long sum26 = 0;\n        long sum27 = 0;\n        long sum28 = 0;\n        long
    sum29 = 0;\n        long sum30 = 0;\n        long sum31 = 0;\n        long sum32
    = 0;\n        long sum33 = 0;\n        long sum34 = 0;\n        long sum35 = 0;\n
    \       long sum36 = 0;\n        long sum37 = 0;\n        long sum38 = 0;\n        long
    sum39 = 0;\n        long sum40 = 0;\n        long sum41 = 0;\n        long sum42
    = 0;\n        long sum43 = 0;\n        long sum44 = 0;\n        long sum45 = 0;\n
    \       long sum46 = 0;\n        long sum47 = 0;\n        long sum48 = 0;\n        long
    sum49 = 0;\n        long sum50 = 0;\n        long sum51 = 0;\n        long sum52
    = 0;\n        long sum53 = 0;\n        long sum54 = 0;\n        long sum55 = 0;\n
    \       long sum56 = 0;\n        long sum57 = 0;\n        long sum58 = 0;\n        long
    sum59 = 0;\n        long sum60 = 0;\n        long sum61 = 0;\n        long sum62
    = 0;\n        long sum63 = 0;\n        long sum64 = 0;\n        long sum65 = 0;\n
    \       long sum66 = 0;\n        long sum67 = 0;\n        long sum68 = 0;\n        long
    sum69 = 0;\n        long sum70 = 0;\n        long sum71 = 0;\n        long sum72
    = 0;\n        long sum73 = 0;\n        long sum74 = 0;\n        long sum75 = 0;\n
    \       long sum76 = 0;\n        long sum77 = 0;\n        long sum78 = 0;\n        long
    sum79 = 0;\n        long sum80 = 0;\n        long sum81 = 0;\n        long sum82
    = 0;\n        long sum83 = 0;\n        long sum84 = 0;\n        long sum85 = 0;\n
    \       long sum86 = 0;\n        \n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(SortArray((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpmchrwcpg.cs(16,14): warning CS0219: The variable ''sum'' is assigned but
    its value is never used

    /tmp/tmpmchrwcpg.cs(17,14): warning CS0219: The variable ''sum2'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(18,14): warning CS0219: The variable ''sum3'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(19,14): warning CS0219: The variable ''sum4'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(20,14): warning CS0219: The variable ''sum5'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(21,14): warning CS0219: The variable ''sum6'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(22,14): warning CS0219: The variable ''sum7'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(23,14): warning CS0219: The variable ''sum8'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(24,14): warning CS0219: The variable ''sum9'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(25,14): warning CS0219: The variable ''sum10'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(26,14): warning CS0219: The variable ''sum11'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(27,14): warning CS0219: The variable ''sum12'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(28,14): warning CS0219: The variable ''sum13'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(29,14): warning CS0219: The variable ''sum14'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(30,14): warning CS0219: The variable ''sum15'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(31,14): warning CS0219: The variable ''sum16'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(32,14): warning CS0219: The variable ''sum17'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(33,14): warning CS0219: The variable ''sum18'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(34,14): warning CS021'
  timestamp: 1659977110
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of non-negative integers, return a copy of the
    given array after sorting,\n    // you will sort the given array in ascending
    order if the sum( first index value, last index value) is odd,\n    // or sort
    it in descending order if the sum( first index value, last index value) is even.\n
    \   // Note:\n    // * don't change the given array.\n    // Examples:\n    public
    static List<long> SortArray(List<long> array) {\n        long sum = 0;\n        long
    temp = 0;\n        List<long> result = new List<long>();\n        foreach (long
    i in array) {\n            sum += i;\n            if (sum % 2 == 0) {\n                temp
    = sum;\n            } else {\n                temp = sum - 1;\n            }\n
    \           result.Add(temp);\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(SortArray((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c117842bc8d3401c8673a7a9756613e9>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c117842bc8d3401c8673a7a9756613e9>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977110
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of non-negative integers, return a copy of the
    given array after sorting,\n    // you will sort the given array in ascending
    order if the sum( first index value, last index value) is odd,\n    // or sort
    it in descending order if the sum( first index value, last index value) is even.\n
    \   // Note:\n    // * don't change the given array.\n    // Examples:\n    public
    static List<long> SortArray(List<long> array) {\n        long sum = 0;\n        long
    last = 0;\n        long first = 0;\n        List<long> result = new List<long>();\n
    \       foreach (long i in array) {\n            sum += i;\n            if (sum
    % 2 == 0) {\n                result.Add(i);\n                first = i;\n            }
    else {\n                last = i;\n            }\n        }\n        Array.Sort(result);\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(SortArray((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpsa3mqd4q.cs(29,20): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''System.Array''

    '
  timestamp: 1659977110
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of non-negative integers, return a copy of the
    given array after sorting,\n    // you will sort the given array in ascending
    order if the sum( first index value, last index value) is odd,\n    // or sort
    it in descending order if the sum( first index value, last index value) is even.\n
    \   // Note:\n    // * don't change the given array.\n    // Examples:\n    public
    static List<long> SortArray(List<long> array) {\n        long sum = 0;\n        long
    temp = 0;\n        List<long> result = new List<long>();\n        foreach (long
    i in array) {\n            sum += i;\n        }\n        if (sum % 2 == 0) {\n
    \           temp = sum;\n            sum = sum / 2;\n            while (temp !=
    0) {\n                result.Add(temp % 2);\n                temp = temp / 2;\n
    \           }\n        } else {\n            temp = sum;\n            sum = sum
    / 2;\n            while (temp != 0) {\n                result.Add(temp % 2);\n
    \               temp = temp / 2;\n            }\n            temp = sum;\n            while
    (temp != 0) {\n                result.Add(temp % 2);\n                temp = temp
    / 2;\n            }\n        }\n        return result;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(SortArray((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <94da71a7059e48ed99ab512a8ddb116c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <94da71a7059e48ed99ab512a8ddb116c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977110
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of non-negative integers, return a copy of the
    given array after sorting,\n    // you will sort the given array in ascending
    order if the sum( first index value, last index value) is odd,\n    // or sort
    it in descending order if the sum( first index value, last index value) is even.\n
    \   // Note:\n    // * don't change the given array.\n    // Examples:\n    public
    static List<long> SortArray(List<long> array) {\n        long sum = 0;\n        long
    temp;\n        List<long> result = new List<long>();\n        foreach (long i
    in array) {\n            sum += i;\n        }\n        if (sum % 2 == 0) {\n            temp
    = sum;\n            sum = array.Sum();\n            foreach (long i in array)
    {\n                sum += i;\n            }\n            while (temp != sum) {\n
    \               result.Add(array[array.Count - 1]);\n                array.RemoveAt(array.Count
    - 1);\n                sum -= array[array.Count - 1];\n            }\n        }
    else {\n            temp = sum;\n            sum = array.Sum();\n            foreach
    (long i in array) {\n                sum += i;\n            }\n            while
    (temp != sum) {\n                result.Add(array[array.Count - 1]);\n                array.RemoveAt(array.Count
    - 1);\n                sum -= array[array.Count - 1];\n            }\n        }\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(SortArray((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c40888512a92432c8344473f34be1ce8>:0
    \n\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out of
    range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.SortArray
    (System.Collections.Generic.List`1[T] array) [0x00148] in <c40888512a92432c8344473f34be1ce8>:0
    \n  at Problem.Main (System.String[] args) [0x0002b] in <c40888512a92432c8344473f34be1ce8>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index
    was out of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.SortArray
    (System.Collections.Generic.List`1[T] array) [0x00148] in <c40888512a92432c8344473f34be1ce8>:0
    \n  at Problem.Main (System.String[] args) [0x0002b] in <c40888512a92432c8344473f34be1ce8>:0
    \n"
  stdout: ''
  timestamp: 1659977111
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of non-negative integers, return a copy of the
    given array after sorting,\n    // you will sort the given array in ascending
    order if the sum( first index value, last index value) is odd,\n    // or sort
    it in descending order if the sum( first index value, last index value) is even.\n
    \   // Note:\n    // * don't change the given array.\n    // Examples:\n    public
    static List<long> SortArray(List<long> array) {\n        long sum = 0;\n        long
    sum2 = 0;\n        long sum3 = 0;\n        long sum4 = 0;\n        long sum5 =
    0;\n        long sum6 = 0;\n        long sum7 = 0;\n        long sum8 = 0;\n        long
    sum9 = 0;\n        long sum10 = 0;\n        long sum11 = 0;\n        long sum12
    = 0;\n        long sum13 = 0;\n        long sum14 = 0;\n        long sum15 = 0;\n
    \       long sum16 = 0;\n        long sum17 = 0;\n        long sum18 = 0;\n        long
    sum19 = 0;\n        long sum20 = 0;\n        long sum21 = 0;\n        long sum22
    = 0;\n        long sum23 = 0;\n        long sum24 = 0;\n        long sum25 = 0;\n
    \       long sum26 = 0;\n        long sum27 = 0;\n        long sum28 = 0;\n        long
    sum29 = 0;\n        long sum30 = 0;\n        long sum31 = 0;\n        long sum32
    = 0;\n        long sum33 = 0;\n        long sum34 = 0;\n        long sum35 = 0;\n
    \       long sum36 = 0;\n        long sum37 = 0;\n        long sum38 = 0;\n        long
    sum39 = 0;\n        long sum40 = 0;\n        long sum41 = 0;\n        long sum42
    = 0;\n        long sum43 = 0;\n        long sum44 = 0;\n        long sum45 = 0;\n
    \       long sum46 = 0;\n        long sum47 = 0;\n        long sum48 = 0;\n        long
    sum49 = 0;\n        long sum50 = 0;\n        long sum51 = 0;\n        long sum52
    = 0;\n        long sum53 = 0;\n        long sum54 = 0;\n        long sum55 = 0;\n
    \       long sum56 = 0;\n        long sum57 = 0;\n        long sum58 = 0;\n        long
    sum59 = 0;\n        long sum60 = 0;\n        long sum61 = 0;\n        long sum62
    = 0;\n        long sum63 = 0;\n        long sum64 = 0;\n        long sum65 = 0;\n
    \       long sum66 = 0;\n        long sum67 = 0;\n        long sum68 = 0;\n        long
    sum69 = 0;\n        long sum70 = 0;\n        long sum71 = 0;\n        long sum72
    = 0;\n        long sum73 = 0;\n        long sum74 = 0;\n        long sum75 = 0;\n
    \       long sum76 = 0;\n        long sum77 = 0;\n        long sum78 = 0;\n        long
    sum79 = 0;\n        long sum80 = 0;\n        long sum81 = 0;\n        long sum82
    = 0;\n        long sum83 = 0;\n        long sum84 = 0;\n        long sum85 = 0;\n
    \       long sum86 = 0;\n        \n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(SortArray((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpmchrwcpg.cs(16,14): warning CS0219: The variable ''sum'' is assigned but
    its value is never used

    /tmp/tmpmchrwcpg.cs(17,14): warning CS0219: The variable ''sum2'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(18,14): warning CS0219: The variable ''sum3'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(19,14): warning CS0219: The variable ''sum4'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(20,14): warning CS0219: The variable ''sum5'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(21,14): warning CS0219: The variable ''sum6'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(22,14): warning CS0219: The variable ''sum7'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(23,14): warning CS0219: The variable ''sum8'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(24,14): warning CS0219: The variable ''sum9'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(25,14): warning CS0219: The variable ''sum10'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(26,14): warning CS0219: The variable ''sum11'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(27,14): warning CS0219: The variable ''sum12'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(28,14): warning CS0219: The variable ''sum13'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(29,14): warning CS0219: The variable ''sum14'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(30,14): warning CS0219: The variable ''sum15'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(31,14): warning CS0219: The variable ''sum16'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(32,14): warning CS0219: The variable ''sum17'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(33,14): warning CS0219: The variable ''sum18'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(34,14): warning CS021'
  timestamp: 1659977110
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of non-negative integers, return a copy of the
    given array after sorting,\n    // you will sort the given array in ascending
    order if the sum( first index value, last index value) is odd,\n    // or sort
    it in descending order if the sum( first index value, last index value) is even.\n
    \   // Note:\n    // * don't change the given array.\n    // Examples:\n    public
    static List<long> SortArray(List<long> array) {\n        long sum = 0;\n        long
    sumOfFirstIndex = 0;\n        long sumOfLastIndex = 0;\n        long firstIndex
    = 0;\n        long lastIndex = 0;\n        long temp = 0;\n        List<long>
    result = new List<long>();\n        foreach (long i in array) {\n            sum
    += i;\n            sumOfFirstIndex += i;\n            sumOfLastIndex += i;\n        }\n
    \       if (sum % 2 == 0) {\n            foreach (long i in array) {\n                temp
    = sumOfFirstIndex - sumOfLastIndex;\n                if (temp % 2 == 0) {\n                    result.Add(sumOfFirstIndex
    - sumOfLastIndex);\n                    sumOfFirstIndex -= i;\n                    sumOfLastIndex
    -= i;\n                }\n                else {\n                    result.Add(sumOfLastIndex
    - sumOfFirstIndex);\n                    sumOfFirstIndex -= i;\n                    sumOfLastIndex
    -= i;\n                }\n            }\n        }\n        else {\n            foreach
    (long i in array) {\n                temp = sumOfFirstIndex - sumOfLastIndex;\n
    \               if (temp % 2 == 1) {\n                    result.Add(sumOfFirstIndex
    - sumOfLastIndex);\n                    sumOfFirstIndex -= i;\n                    sumOfLastIndex
    -= i;\n                }\n                else {\n                    result.Add(sumOfLastIndex
    - sumOfFirstIndex);\n                    sumOfFirstIndex -= i;\n                    sumOfLastIndex
    -= i;\n                }\n            }\n        }\n        return result;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(SortArray((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)5L}))).Equals((new List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <53dcdcee04204d3f88104cc87b49b2b3>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <53dcdcee04204d3f88104cc87b49b2b3>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977111
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of non-negative integers, return a copy of the
    given array after sorting,\n    // you will sort the given array in ascending
    order if the sum( first index value, last index value) is odd,\n    // or sort
    it in descending order if the sum( first index value, last index value) is even.\n
    \   // Note:\n    // * don't change the given array.\n    // Examples:\n    public
    static List<long> SortArray(List<long> array) {\n        long sum = 0;\n        long
    last = 0;\n        long first = 0;\n        long mid = 0;\n        List<long>
    result = new List<long>();\n        foreach (long i in array) {\n            sum
    = sum + i;\n            if (sum % 2 == 0) {\n                result.Add(i);\n
    \           }\n            if (sum % 2 != 0) {\n                result.Add(-i);\n
    \           }\n        }\n        Array.Sort(result);\n        return result;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(SortArray((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)5L}))).Equals((new List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpnrp1l4gf.cs(30,20): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''System.Array''

    /tmp/tmpnrp1l4gf.cs(17,14): warning CS0219: The variable ''last'' is assigned
    but its value is never used

    /tmp/tmpnrp1l4gf.cs(18,14): warning CS0219: The variable ''first'' is assigned
    but its value is never used

    /tmp/tmpnrp1l4gf.cs(19,14): warning CS0219: The variable ''mid'' is assigned but
    its value is never used

    '
  timestamp: 1659977110
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of non-negative integers, return a copy of the
    given array after sorting,\n    // you will sort the given array in ascending
    order if the sum( first index value, last index value) is odd,\n    // or sort
    it in descending order if the sum( first index value, last index value) is even.\n
    \   // Note:\n    // * don't change the given array.\n    // Examples:\n    public
    static List<long> SortArray(List<long> array) {\n        long sum = 0;\n        long
    lastSum = 0;\n        long firstSum = 0;\n        long lastFirstSum = 0;\n        long
    firstLastSum = 0;\n        long lastFirstLastSum = 0;\n        long firstLastLastSum
    = 0;\n        long lastFirstLastLastSum = 0;\n        long firstLastLastLastSum
    = 0;\n        long lastFirstLastLastLastSum = 0;\n        long firstLastLastLastLastSum
    = 0;\n        long lastFirstLastLastLastSum = 0;\n        long firstLastLastLastLastSum
    = 0;\n        long lastFirstLastLastLastSum = 0;\n        long firstLastLastLastLastSum
    = 0;\n        long lastFirstLastLastLastSum = 0;\n        long firstLastLastLastLastSum
    = 0;\n        long lastFirstLastLastLastSum = 0;\n        long firstLastLastLastLastSum
    = 0;\n        long lastFirstLastLastLastSum = 0;\n        long firstLastLastLastLastSum
    = 0;\n        long lastFirstLastLastLastSum = 0;\n        long firstLastLastLastLastSum
    = 0;\n        long lastFirstLastLastLastSum = 0;\n        long firstLastLastLastLastSum
    = 0;\n        long lastFirstLastLastLastSum = 0;\n        long firstLastLastLastLastSum
    = 0;\n        long lastFirstLastLastLastSum = 0;\n        long firstLastLastLastLastSum
    = 0;\n        long lastFirstLastLastLastSum = 0;\n        long firstLastLastLastLastSum
    = 0;\n        long lastFirstLastLastLastSum = 0;\n        long firstLastLastLastLastSum
    = 0;\n        long lastFirstLastLastLastSum = 0;\n        long firstLastLastLastLastSum
    = 0;\n        long lastFirstLastLastLastSum = 0;\n        long firstLastLastLastLastSum
    = 0;\n        long lastFirstLastLastLastSum = 0;\n        long firstLastLastLastLastSum
    = 0;\n        long lastFirstLastLastLastSum = 0;\n        long firstLastLastLastLastSum
    = 0;\n        long lastFirstLastLastLastSum = 0;\n        long firstLastLastLastLastSum
    = 0;\n        long lastFirstLastLastLastSum = 0;\n        long firstLastLastLastLastSum
    = 0;\n        long lastFirstLastLastLastSum = 0;\n        long firstLastLastLastLastSum
    = 0;\n        long lastFirstLastLastLastSum = 0;\n        long firstLastLastLastLastSum
    = 0;\n        long lastFirstLastLastLastSum = 0;\n        long firstLastLastLastLastSum
    = 0;\n        long lastFirstLastLastLastSum = 0;\n        long firstLastLastLastLastSum
    = 0;\n        long lastFirstLastLastLast\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(SortArray((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpowwpp3_a.cs(69,35): error CS1002: ; expected

    '
  timestamp: 1659977110
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of non-negative integers, return a copy of the
    given array after sorting,\n    // you will sort the given array in ascending
    order if the sum( first index value, last index value) is odd,\n    // or sort
    it in descending order if the sum( first index value, last index value) is even.\n
    \   // Note:\n    // * don't change the given array.\n    // Examples:\n    public
    static List<long> SortArray(List<long> array) {\n        long sum = 0;\n        long
    sum2 = 0;\n        long sum3 = 0;\n        long sum4 = 0;\n        long sum5 =
    0;\n        long sum6 = 0;\n        long sum7 = 0;\n        long sum8 = 0;\n        long
    sum9 = 0;\n        long sum10 = 0;\n        long sum11 = 0;\n        long sum12
    = 0;\n        long sum13 = 0;\n        long sum14 = 0;\n        long sum15 = 0;\n
    \       long sum16 = 0;\n        long sum17 = 0;\n        long sum18 = 0;\n        long
    sum19 = 0;\n        long sum20 = 0;\n        long sum21 = 0;\n        long sum22
    = 0;\n        long sum23 = 0;\n        long sum24 = 0;\n        long sum25 = 0;\n
    \       long sum26 = 0;\n        long sum27 = 0;\n        long sum28 = 0;\n        long
    sum29 = 0;\n        long sum30 = 0;\n        long sum31 = 0;\n        long sum32
    = 0;\n        long sum33 = 0;\n        long sum34 = 0;\n        long sum35 = 0;\n
    \       long sum36 = 0;\n        long sum37 = 0;\n        long sum38 = 0;\n        long
    sum39 = 0;\n        long sum40 = 0;\n        long sum41 = 0;\n        long sum42
    = 0;\n        long sum43 = 0;\n        long sum44 = 0;\n        long sum45 = 0;\n
    \       long sum46 = 0;\n        long sum47 = 0;\n        long sum48 = 0;\n        long
    sum49 = 0;\n        long sum50 = 0;\n        long sum51 = 0;\n        long sum52
    = 0;\n        long sum53 = 0;\n        long sum54 = 0;\n        long sum55 = 0;\n
    \       long sum56 = 0;\n        long sum57 = 0;\n        long sum58 = 0;\n        long
    sum59 = 0;\n        long sum60 = 0;\n        long sum61 = 0;\n        long sum62
    = 0;\n        long sum63 = 0;\n        long sum64 = 0;\n        long sum65 = 0;\n
    \       long sum66 = 0;\n        long sum67 = 0;\n        long sum68 = 0;\n        long
    sum69 = 0;\n        long sum70 = 0;\n        long sum71 = 0;\n        long sum72
    = 0;\n        long sum73 = 0;\n        long sum74 = 0;\n        long sum75 = 0;\n
    \       long sum76 = 0;\n        long sum77 = 0;\n        long sum78 = 0;\n        long
    sum79 = 0;\n        long sum80 = 0;\n        long sum81 = 0;\n        long sum82
    = 0;\n        long sum83 = 0;\n        long sum84 = 0;\n        long sum85 = 0;\n
    \       long sum86 = 0;\n        \n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(SortArray((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpmchrwcpg.cs(16,14): warning CS0219: The variable ''sum'' is assigned but
    its value is never used

    /tmp/tmpmchrwcpg.cs(17,14): warning CS0219: The variable ''sum2'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(18,14): warning CS0219: The variable ''sum3'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(19,14): warning CS0219: The variable ''sum4'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(20,14): warning CS0219: The variable ''sum5'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(21,14): warning CS0219: The variable ''sum6'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(22,14): warning CS0219: The variable ''sum7'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(23,14): warning CS0219: The variable ''sum8'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(24,14): warning CS0219: The variable ''sum9'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(25,14): warning CS0219: The variable ''sum10'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(26,14): warning CS0219: The variable ''sum11'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(27,14): warning CS0219: The variable ''sum12'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(28,14): warning CS0219: The variable ''sum13'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(29,14): warning CS0219: The variable ''sum14'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(30,14): warning CS0219: The variable ''sum15'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(31,14): warning CS0219: The variable ''sum16'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(32,14): warning CS0219: The variable ''sum17'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(33,14): warning CS0219: The variable ''sum18'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(34,14): warning CS021'
  timestamp: 1659977110
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of non-negative integers, return a copy of the
    given array after sorting,\n    // you will sort the given array in ascending
    order if the sum( first index value, last index value) is odd,\n    // or sort
    it in descending order if the sum( first index value, last index value) is even.\n
    \   // Note:\n    // * don't change the given array.\n    // Examples:\n    public
    static List<long> SortArray(List<long> array) {\n        long sum = 0;\n        long
    max = 0;\n        long min = 0;\n        List<long> result = new List<long>();\n
    \       foreach (long i in array) {\n            sum += i;\n            if (sum
    > max) {\n                max = sum;\n            }\n            if (sum < min)
    {\n                min = sum;\n            }\n        }\n        if (sum % 2 ==
    0) {\n            foreach (long i in array) {\n                result.Add(i);\n
    \           }\n            Array.Sort(result);\n            return result;\n        }
    else {\n            foreach (long i in array) {\n                result.Add(i);\n
    \           }\n            Array.Sort(result);\n            Array.Sort(result);\n
    \           return result;\n        }\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(SortArray((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmplv0a_34d.cs(33,24): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''System.Array''

    /tmp/tmplv0a_34d.cs(39,24): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''System.Array''

    /tmp/tmplv0a_34d.cs(40,24): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''System.Array''

    '
  timestamp: 1659977111
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of non-negative integers, return a copy of the
    given array after sorting,\n    // you will sort the given array in ascending
    order if the sum( first index value, last index value) is odd,\n    // or sort
    it in descending order if the sum( first index value, last index value) is even.\n
    \   // Note:\n    // * don't change the given array.\n    // Examples:\n    public
    static List<long> SortArray(List<long> array) {\n        long sum = 0;\n        long
    sum2 = 0;\n        long sum3 = 0;\n        long sum4 = 0;\n        long sum5 =
    0;\n        long sum6 = 0;\n        long sum7 = 0;\n        long sum8 = 0;\n        long
    sum9 = 0;\n        long sum10 = 0;\n        long sum11 = 0;\n        long sum12
    = 0;\n        long sum13 = 0;\n        long sum14 = 0;\n        long sum15 = 0;\n
    \       long sum16 = 0;\n        long sum17 = 0;\n        long sum18 = 0;\n        long
    sum19 = 0;\n        long sum20 = 0;\n        long sum21 = 0;\n        long sum22
    = 0;\n        long sum23 = 0;\n        long sum24 = 0;\n        long sum25 = 0;\n
    \       long sum26 = 0;\n        long sum27 = 0;\n        long sum28 = 0;\n        long
    sum29 = 0;\n        long sum30 = 0;\n        long sum31 = 0;\n        long sum32
    = 0;\n        long sum33 = 0;\n        long sum34 = 0;\n        long sum35 = 0;\n
    \       long sum36 = 0;\n        long sum37 = 0;\n        long sum38 = 0;\n        long
    sum39 = 0;\n        long sum40 = 0;\n        long sum41 = 0;\n        long sum42
    = 0;\n        long sum43 = 0;\n        long sum44 = 0;\n        long sum45 = 0;\n
    \       long sum46 = 0;\n        long sum47 = 0;\n        long sum48 = 0;\n        long
    sum49 = 0;\n        long sum50 = 0;\n        long sum51 = 0;\n        long sum52
    = 0;\n        long sum53 = 0;\n        long sum54 = 0;\n        long sum55 = 0;\n
    \       long sum56 = 0;\n        long sum57 = 0;\n        long sum58 = 0;\n        long
    sum59 = 0;\n        long sum60 = 0;\n        long sum61 = 0;\n        long sum62
    = 0;\n        long sum63 = 0;\n        long sum64 = 0;\n        long sum65 = 0;\n
    \       long sum66 = 0;\n        long sum67 = 0;\n        long sum68 = 0;\n        long
    sum69 = 0;\n        long sum70 = 0;\n        long sum71 = 0;\n        long sum72
    = 0;\n        long sum73 = 0;\n        long sum74 = 0;\n        long sum75 = 0;\n
    \       long sum76 = 0;\n        long sum77 = 0;\n        long sum78 = 0;\n        long
    sum79 = 0;\n        long sum80 = 0;\n        long sum81 = 0;\n        long sum82
    = 0;\n        long sum83 = 0;\n        long sum84 = 0;\n        long sum85 = 0;\n
    \       long sum86 = 0;\n        \n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(SortArray((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpmchrwcpg.cs(16,14): warning CS0219: The variable ''sum'' is assigned but
    its value is never used

    /tmp/tmpmchrwcpg.cs(17,14): warning CS0219: The variable ''sum2'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(18,14): warning CS0219: The variable ''sum3'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(19,14): warning CS0219: The variable ''sum4'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(20,14): warning CS0219: The variable ''sum5'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(21,14): warning CS0219: The variable ''sum6'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(22,14): warning CS0219: The variable ''sum7'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(23,14): warning CS0219: The variable ''sum8'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(24,14): warning CS0219: The variable ''sum9'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(25,14): warning CS0219: The variable ''sum10'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(26,14): warning CS0219: The variable ''sum11'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(27,14): warning CS0219: The variable ''sum12'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(28,14): warning CS0219: The variable ''sum13'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(29,14): warning CS0219: The variable ''sum14'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(30,14): warning CS0219: The variable ''sum15'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(31,14): warning CS0219: The variable ''sum16'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(32,14): warning CS0219: The variable ''sum17'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(33,14): warning CS0219: The variable ''sum18'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(34,14): warning CS021'
  timestamp: 1659977110
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of non-negative integers, return a copy of the
    given array after sorting,\n    // you will sort the given array in ascending
    order if the sum( first index value, last index value) is odd,\n    // or sort
    it in descending order if the sum( first index value, last index value) is even.\n
    \   // Note:\n    // * don't change the given array.\n    // Examples:\n    public
    static List<long> SortArray(List<long> array) {\n        long sum = 0;\n        long
    temp = 0;\n        List<long> result = new List<long>();\n        foreach (long
    i in array) {\n            sum += i;\n        }\n        if (sum % 2 == 0) {\n
    \           temp = sum;\n            sum = sum / 2;\n            while (temp !=
    sum) {\n                result.Add(array[temp]);\n                temp++;\n            }\n
    \       } else {\n            temp = sum;\n            sum = sum / 2;\n            while
    (temp != sum) {\n                result.Add(array[temp]);\n                temp--;\n
    \           }\n        }\n        return result;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(SortArray((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpdn1txldm.cs(26,34): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmpdn1txldm.cs(33,34): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    '
  timestamp: 1659977110
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of non-negative integers, return a copy of the
    given array after sorting,\n    // you will sort the given array in ascending
    order if the sum( first index value, last index value) is odd,\n    // or sort
    it in descending order if the sum( first index value, last index value) is even.\n
    \   // Note:\n    // * don't change the given array.\n    // Examples:\n    public
    static List<long> SortArray(List<long> array) {\n        long sum = 0;\n        long
    maxSum = 0;\n        long minSum = array.First();\n        foreach (long i in
    array) {\n            sum += i;\n            if (sum > maxSum) {\n                maxSum
    = sum;\n            }\n            if (sum < minSum) {\n                minSum
    = sum;\n            }\n        }\n        if (sum % 2 == 0) {\n            array.Reverse();\n
    \       }\n        List<long> result = new List<long>();\n        foreach (long
    i in array) {\n            if (sum - i == 0) {\n                result.Add(i);\n
    \           }\n            else if (sum - i == 1) {\n                result.Add(sum
    - i);\n            }\n            else if (sum - i == -1) {\n                result.Add(sum
    + i);\n            }\n            else if (sum - i == -2) {\n                result.Add(sum
    - i);\n            }\n            else if (sum - i == -3) {\n                result.Add(sum
    + i);\n            }\n        }\n        return result;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(SortArray((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.InvalidOperationException: Sequence contains
    no elements\n  at System.Linq.Enumerable.First[TSource] (System.Collections.Generic.IEnumerable`1[T]
    source) [0x00010] in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem.SortArray
    (System.Collections.Generic.List`1[T] array) [0x00007] in <da5b62285e1c4995b14002c201dfc7e0>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <da5b62285e1c4995b14002c201dfc7e0>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.InvalidOperationException: Sequence
    contains no elements\n  at System.Linq.Enumerable.First[TSource] (System.Collections.Generic.IEnumerable`1[T]
    source) [0x00010] in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem.SortArray
    (System.Collections.Generic.List`1[T] array) [0x00007] in <da5b62285e1c4995b14002c201dfc7e0>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <da5b62285e1c4995b14002c201dfc7e0>:0
    \n"
  stdout: ''
  timestamp: 1659977111
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of non-negative integers, return a copy of the
    given array after sorting,\n    // you will sort the given array in ascending
    order if the sum( first index value, last index value) is odd,\n    // or sort
    it in descending order if the sum( first index value, last index value) is even.\n
    \   // Note:\n    // * don't change the given array.\n    // Examples:\n    public
    static List<long> SortArray(List<long> array) {\n        long sum = 0;\n        long
    sum2 = 0;\n        long sum3 = 0;\n        long sum4 = 0;\n        long sum5 =
    0;\n        long sum6 = 0;\n        long sum7 = 0;\n        long sum8 = 0;\n        long
    sum9 = 0;\n        long sum10 = 0;\n        long sum11 = 0;\n        long sum12
    = 0;\n        long sum13 = 0;\n        long sum14 = 0;\n        long sum15 = 0;\n
    \       long sum16 = 0;\n        long sum17 = 0;\n        long sum18 = 0;\n        long
    sum19 = 0;\n        long sum20 = 0;\n        long sum21 = 0;\n        long sum22
    = 0;\n        long sum23 = 0;\n        long sum24 = 0;\n        long sum25 = 0;\n
    \       long sum26 = 0;\n        long sum27 = 0;\n        long sum28 = 0;\n        long
    sum29 = 0;\n        long sum30 = 0;\n        long sum31 = 0;\n        long sum32
    = 0;\n        long sum33 = 0;\n        long sum34 = 0;\n        long sum35 = 0;\n
    \       long sum36 = 0;\n        long sum37 = 0;\n        long sum38 = 0;\n        long
    sum39 = 0;\n        long sum40 = 0;\n        long sum41 = 0;\n        long sum42
    = 0;\n        long sum43 = 0;\n        long sum44 = 0;\n        long sum45 = 0;\n
    \       long sum46 = 0;\n        long sum47 = 0;\n        long sum48 = 0;\n        long
    sum49 = 0;\n        long sum50 = 0;\n        long sum51 = 0;\n        long sum52
    = 0;\n        long sum53 = 0;\n        long sum54 = 0;\n        long sum55 = 0;\n
    \       long sum56 = 0;\n        long sum57 = 0;\n        long sum58 = 0;\n        long
    sum59 = 0;\n        long sum60 = 0;\n        long sum61 = 0;\n        long sum62
    = 0;\n        long sum63 = 0;\n        long sum64 = 0;\n        long sum65 = 0;\n
    \       long sum66 = 0;\n        long sum67 = 0;\n        long sum68 = 0;\n        long
    sum69 = 0;\n        long sum70 = 0;\n        long sum71 = 0;\n        long sum72
    = 0;\n        long sum73 = 0;\n        long sum74 = 0;\n        long sum75 = 0;\n
    \       long sum76 = 0;\n        long sum77 = 0;\n        long sum78 = 0;\n        long
    sum79 = 0;\n        long sum80 = 0;\n        long sum81 = 0;\n        long sum82
    = 0;\n        long sum83 = 0;\n        long sum84 = 0;\n        long sum85 = 0;\n
    \       long sum86 = 0;\n        \n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(SortArray((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpmchrwcpg.cs(16,14): warning CS0219: The variable ''sum'' is assigned but
    its value is never used

    /tmp/tmpmchrwcpg.cs(17,14): warning CS0219: The variable ''sum2'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(18,14): warning CS0219: The variable ''sum3'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(19,14): warning CS0219: The variable ''sum4'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(20,14): warning CS0219: The variable ''sum5'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(21,14): warning CS0219: The variable ''sum6'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(22,14): warning CS0219: The variable ''sum7'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(23,14): warning CS0219: The variable ''sum8'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(24,14): warning CS0219: The variable ''sum9'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(25,14): warning CS0219: The variable ''sum10'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(26,14): warning CS0219: The variable ''sum11'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(27,14): warning CS0219: The variable ''sum12'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(28,14): warning CS0219: The variable ''sum13'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(29,14): warning CS0219: The variable ''sum14'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(30,14): warning CS0219: The variable ''sum15'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(31,14): warning CS0219: The variable ''sum16'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(32,14): warning CS0219: The variable ''sum17'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(33,14): warning CS0219: The variable ''sum18'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(34,14): warning CS021'
  timestamp: 1659977110
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of non-negative integers, return a copy of the
    given array after sorting,\n    // you will sort the given array in ascending
    order if the sum( first index value, last index value) is odd,\n    // or sort
    it in descending order if the sum( first index value, last index value) is even.\n
    \   // Note:\n    // * don't change the given array.\n    // Examples:\n    public
    static List<long> SortArray(List<long> array) {\n        long sum = 0;\n        foreach
    (long i in array) {\n            sum += i;\n        }\n        List<long> result
    = new List<long>();\n        if (sum % 2 == 0) {\n            foreach (long i
    in array) {\n                result.Add(i);\n            }\n            Array.Sort(result);\n
    \       } else {\n            foreach (long i in array) {\n                result.Add(i);\n
    \           }\n            Array.Sort(result, (a, b) => b - a);\n        }\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortArray((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)5L}))).Equals((new List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpfzfsh_lx.cs(25,24): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''System.Array''

    /tmp/tmpfzfsh_lx.cs(30,24): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''System.Array''

    /tmp/tmpfzfsh_lx.cs(30,32): error CS1660: Cannot convert lambda expression to
    type ''IComparer'' because it is not a delegate type

    '
  timestamp: 1659977110
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of non-negative integers, return a copy of the
    given array after sorting,\n    // you will sort the given array in ascending
    order if the sum( first index value, last index value) is odd,\n    // or sort
    it in descending order if the sum( first index value, last index value) is even.\n
    \   // Note:\n    // * don't change the given array.\n    // Examples:\n    public
    static List<long> SortArray(List<long> array) {\n        long sum = 0;\n        long
    sum2 = 0;\n        long sum3 = 0;\n        long sum4 = 0;\n        long sum5 =
    0;\n        long sum6 = 0;\n        long sum7 = 0;\n        long sum8 = 0;\n        long
    sum9 = 0;\n        long sum10 = 0;\n        long sum11 = 0;\n        long sum12
    = 0;\n        long sum13 = 0;\n        long sum14 = 0;\n        long sum15 = 0;\n
    \       long sum16 = 0;\n        long sum17 = 0;\n        long sum18 = 0;\n        long
    sum19 = 0;\n        long sum20 = 0;\n        long sum21 = 0;\n        long sum22
    = 0;\n        long sum23 = 0;\n        long sum24 = 0;\n        long sum25 = 0;\n
    \       long sum26 = 0;\n        long sum27 = 0;\n        long sum28 = 0;\n        long
    sum29 = 0;\n        long sum30 = 0;\n        long sum31 = 0;\n        long sum32
    = 0;\n        long sum33 = 0;\n        long sum34 = 0;\n        long sum35 = 0;\n
    \       long sum36 = 0;\n        long sum37 = 0;\n        long sum38 = 0;\n        long
    sum39 = 0;\n        long sum40 = 0;\n        long sum41 = 0;\n        long sum42
    = 0;\n        long sum43 = 0;\n        long sum44 = 0;\n        long sum45 = 0;\n
    \       long sum46 = 0;\n        long sum47 = 0;\n        long sum48 = 0;\n        long
    sum49 = 0;\n        long sum50 = 0;\n        long sum51 = 0;\n        long sum52
    = 0;\n        long sum53 = 0;\n        long sum54 = 0;\n        long sum55 = 0;\n
    \       long sum56 = 0;\n        long sum57 = 0;\n        long sum58 = 0;\n        long
    sum59 = 0;\n        long sum60 = 0;\n        long sum61 = 0;\n        long sum62
    = 0;\n        long sum63 = 0;\n        long sum64 = 0;\n        long sum65 = 0;\n
    \       long sum66 = 0;\n        long sum67 = 0;\n        long sum68 = 0;\n        long
    sum69 = 0;\n        long sum70 = 0;\n        long sum71 = 0;\n        long sum72
    = 0;\n        long sum73 = 0;\n        long sum74 = 0;\n        long sum75 = 0;\n
    \       long sum76 = 0;\n        long sum77 = 0;\n        long sum78 = 0;\n        long
    sum79 = 0;\n        long sum80 = 0;\n        long sum81 = 0;\n        long sum82
    = 0;\n        long sum83 = 0;\n        long sum84 = 0;\n        long sum85 = 0;\n
    \       long sum86 = 0;\n        \n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(SortArray((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpmchrwcpg.cs(16,14): warning CS0219: The variable ''sum'' is assigned but
    its value is never used

    /tmp/tmpmchrwcpg.cs(17,14): warning CS0219: The variable ''sum2'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(18,14): warning CS0219: The variable ''sum3'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(19,14): warning CS0219: The variable ''sum4'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(20,14): warning CS0219: The variable ''sum5'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(21,14): warning CS0219: The variable ''sum6'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(22,14): warning CS0219: The variable ''sum7'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(23,14): warning CS0219: The variable ''sum8'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(24,14): warning CS0219: The variable ''sum9'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(25,14): warning CS0219: The variable ''sum10'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(26,14): warning CS0219: The variable ''sum11'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(27,14): warning CS0219: The variable ''sum12'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(28,14): warning CS0219: The variable ''sum13'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(29,14): warning CS0219: The variable ''sum14'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(30,14): warning CS0219: The variable ''sum15'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(31,14): warning CS0219: The variable ''sum16'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(32,14): warning CS0219: The variable ''sum17'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(33,14): warning CS0219: The variable ''sum18'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(34,14): warning CS021'
  timestamp: 1659977110
- exit_code: -1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of non-negative integers, return a copy of the
    given array after sorting,\n    // you will sort the given array in ascending
    order if the sum( first index value, last index value) is odd,\n    // or sort
    it in descending order if the sum( first index value, last index value) is even.\n
    \   // Note:\n    // * don't change the given array.\n    // Examples:\n    public
    static List<long> SortArray(List<long> array) {\n        long sum = 0;\n        long
    temp = 0;\n        List<long> result = new List<long>();\n        foreach (long
    i in array) {\n            sum += i;\n        }\n        if (sum % 2 == 0) {\n
    \           temp = sum;\n            sum = sum / 2;\n            while (temp !=
    0) {\n                result.Add(sum);\n                sum -= temp;\n                temp
    = sum;\n                sum = sum / 2;\n            }\n        } else {\n            temp
    = sum;\n            sum = sum / 2;\n            while (temp != 0) {\n                result.Add(-sum);\n
    \               sum -= temp;\n                temp = sum;\n                sum
    = sum / 2;\n            }\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(SortArray((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: Timeout
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <3eb5553fa4154187aa4dcac86bcb38bf>:0
    \n"
  stdout: None
  timestamp: 1659977116
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of non-negative integers, return a copy of the
    given array after sorting,\n    // you will sort the given array in ascending
    order if the sum( first index value, last index value) is odd,\n    // or sort
    it in descending order if the sum( first index value, last index value) is even.\n
    \   // Note:\n    // * don't change the given array.\n    // Examples:\n    public
    static List<long> SortArray(List<long> array) {\n        long sum = 0;\n        long
    temp;\n        List<long> result = new List<long>();\n        foreach (long i
    in array) {\n            sum += i;\n        }\n        if (sum % 2 == 0) {\n            temp
    = sum;\n            sum = sum / 2;\n            while (temp != 0) {\n                result.Add(temp
    % 2);\n                temp = temp / 2;\n            }\n        } else {\n            temp
    = sum;\n            sum = sum / 2;\n            while (temp != 0) {\n                result.Add(temp
    % 2);\n                temp = temp / 2;\n            }\n            temp = sum;\n
    \           sum = sum / 2;\n            while (temp != 0) {\n                result.Add(temp
    % 2);\n                temp = temp / 2;\n            }\n        }\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortArray((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)5L}))).Equals((new List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <21e54db968794582bc746b3a21be5c96>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <21e54db968794582bc746b3a21be5c96>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977111
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of non-negative integers, return a copy of the
    given array after sorting,\n    // you will sort the given array in ascending
    order if the sum( first index value, last index value) is odd,\n    // or sort
    it in descending order if the sum( first index value, last index value) is even.\n
    \   // Note:\n    // * don't change the given array.\n    // Examples:\n    public
    static List<long> SortArray(List<long> array) {\n        long sum = 0;\n        long
    max = 0;\n        long min = array.First();\n        foreach (long i in array)
    {\n            sum += i;\n            if (sum > max) {\n                max =
    sum;\n            }\n            if (sum < min) {\n                min = sum;\n
    \           }\n        }\n        List<long> result = new List<long>();\n        long
    sum1 = 0;\n        long sum2 = 0;\n        long sum3 = 0;\n        long sum4 =
    0;\n        long sum5 = 0;\n        long sum6 = 0;\n        long sum7 = 0;\n        long
    sum8 = 0;\n        long sum9 = 0;\n        long sum10 = 0;\n        long sum11
    = 0;\n        long sum12 = 0;\n        long sum13 = 0;\n        long sum14 = 0;\n
    \       long sum15 = 0;\n        long sum16 = 0;\n        long sum17 = 0;\n        long
    sum18 = 0;\n        long sum19 = 0;\n        long sum20 = 0;\n        long sum21
    = 0;\n        long sum22 = 0;\n        long sum23 = 0;\n        long sum24 = 0;\n
    \       long sum25 = 0;\n        long sum26 = 0;\n        long sum27 = 0;\n        long
    sum28 = 0;\n        long sum29 = 0;\n        long sum30 = 0;\n        long sum31
    = 0;\n        long sum32 = 0;\n        long sum33 = 0;\n        long sum34 = 0;\n
    \       long sum35 = 0;\n        long sum36 = 0;\n        long sum37 = 0;\n        long
    sum38 = 0;\n        long sum39 = 0;\n        long sum40 = 0;\n        long sum41
    = 0;\n        long sum42 = 0;\n        long sum43 = 0;\n        long sum44 = 0;\n
    \       long sum45 = 0;\n        long sum46 = 0;\n        long sum47 = 0;\n        long
    sum48 = 0;\n        long sum49 = 0;\n        long sum50 = 0;\n        long sum51
    = 0;\n        long sum52 = 0;\n        long sum53 = 0;\n        long sum54 = 0;\n
    \       long sum55 = 0;\n        long sum56 = 0;\n        long sum57 = 0;\n        long
    sum58 = 0;\n        long sum59 = 0;\n        long sum60 = 0;\n        long sum61
    = 0;\n        long sum62 = 0;\n        long sum63 = 0;\n        long sum64 = 0;\n
    \       long sum65 = 0;\n        long sum66 = 0;\n        long sum67 = 0;\n        long
    sum68 = 0;\n        long sum69 = 0;\n        long sum70 = 0;\n        long sum71
    = 0;\n        long sum72 = 0;\n        long sum73 = 0;\n        long sum74 = 0;\n
    \       long sum75 = 0;\n        long \n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(SortArray((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpxm4z2xqr.cs(104,13): error CS1001: Identifier expected

    /tmp/tmpxm4z2xqr.cs(104,13): error CS1002: ; expected

    '
  timestamp: 1659977110
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of non-negative integers, return a copy of the
    given array after sorting,\n    // you will sort the given array in ascending
    order if the sum( first index value, last index value) is odd,\n    // or sort
    it in descending order if the sum( first index value, last index value) is even.\n
    \   // Note:\n    // * don't change the given array.\n    // Examples:\n    public
    static List<long> SortArray(List<long> array) {\n        long sum = 0;\n        long
    lastSum = 0;\n        long firstSum = 0;\n        long lastFirstSum = 0;\n        long
    firstLastSum = 0;\n        long lastFirstLastSum = 0;\n        long firstLastLastSum
    = 0;\n        long firstLastFirstLastSum = 0;\n        long firstLastFirstSum
    = 0;\n        long firstLastLastSum = 0;\n        long firstSumFirstLastSum =
    0;\n        long firstSumFirstSum = 0;\n        long firstSumLastSum = 0;\n        long
    firstLastFirstSum = 0;\n        long firstLastLastSum = 0;\n        long firstLastFirstLastSum
    = 0;\n        long firstLastFirstSum = 0;\n        long firstLastLastSum = 0;\n
    \       long firstSumFirstLastSum = 0;\n        long firstSumFirstSum = 0;\n        long
    firstSumLastSum = 0;\n        long firstLastFirstSum = 0;\n        long firstLastLastSum
    = 0;\n        long firstLastFirstLastSum = 0;\n        long firstLastFirstSum
    = 0;\n        long firstLastLastSum = 0;\n        long firstSumFirstLastSum =
    0;\n        long firstSumFirstSum = 0;\n        long firstSumLastSum = 0;\n        long
    firstLastFirstSum = 0;\n        long firstLastLastSum = 0;\n        long firstLastFirstLastSum
    = 0;\n        long firstLastFirstSum = 0;\n        long firstLastLastSum = 0;\n
    \       long firstSumFirstLastSum = 0;\n        long firstSumFirstSum = 0;\n        long
    firstSumLastSum = 0;\n        long firstLastFirstSum = 0;\n        long firstLastLastSum
    = 0;\n        long firstLastFirstLastSum = 0;\n        long firstLastFirstSum
    = 0;\n        long firstLastLastSum = 0;\n        long firstSumFirstLastSum =
    0;\n        long firstSumFirstSum = 0;\n        long firstSumLastSum = 0;\n        long
    firstLastFirstSum = 0;\n        long firstLastLastSum = 0;\n        long firstLastFirstLastSum
    = 0;\n        long firstLastFirstSum = 0;\n        long firstLastLastSum = 0;\n
    \       long firstSumFirstLastSum = 0;\n        long firstSumFirstSum = 0;\n        long
    firstSumLastSum = 0;\n        long firstLastFirstSum = 0;\n        long firstLastLastSum
    = 0;\n        long firstLastFirstLastSum = 0;\n        long firstLastFirstSum
    = 0;\n        long firstLastLastSum = 0;\n        long firstSumFirstLastSum =
    0;\n        long firstSumFirstSum = 0;\n        long firstSumLastSum = 0;\n        long
    firstLastFirstSum = 0;\n        long firstLastLastSum = 0;\n        long first\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(SortArray((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)5L}))).Equals((new List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpzvz_2b81.cs(79,19): error CS1002: ; expected

    '
  timestamp: 1659977110
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of non-negative integers, return a copy of the
    given array after sorting,\n    // you will sort the given array in ascending
    order if the sum( first index value, last index value) is odd,\n    // or sort
    it in descending order if the sum( first index value, last index value) is even.\n
    \   // Note:\n    // * don't change the given array.\n    // Examples:\n    public
    static List<long> SortArray(List<long> array) {\n        long sum = 0;\n        long
    temp;\n        List<long> result = new List<long>();\n        foreach (long i
    in array) {\n            sum += i;\n            if (sum % 2 == 0) {\n                temp
    = sum;\n                sum = i;\n                result.Add(temp);\n            }
    else {\n                temp = sum;\n                sum = i;\n                result.Add(sum);\n
    \           }\n        }\n        return result;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(SortArray((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <54b0615e99624e4a91bc39cef6d695bf>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <54b0615e99624e4a91bc39cef6d695bf>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977111
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of non-negative integers, return a copy of the
    given array after sorting,\n    // you will sort the given array in ascending
    order if the sum( first index value, last index value) is odd,\n    // or sort
    it in descending order if the sum( first index value, last index value) is even.\n
    \   // Note:\n    // * don't change the given array.\n    // Examples:\n    public
    static List<long> SortArray(List<long> array) {\n        long sum = 0;\n        long
    temp;\n        List<long> result = new List<long>();\n        foreach (long i
    in array) {\n            sum += i;\n        }\n        if (sum % 2 == 0) {\n            temp
    = sum;\n            sum = array.Sum();\n            foreach (long i in array)
    {\n                sum += i;\n            }\n            while (sum > temp) {\n
    \               result.Add(array[array.Count - 1]);\n                sum -= array[array.Count
    - 1];\n                array.RemoveAt(array.Count - 1);\n            }\n        }
    else {\n            temp = sum;\n            sum = array.Sum();\n            foreach
    (long i in array) {\n                sum += i;\n            }\n            while
    (sum < temp) {\n                result.Add(array[0]);\n                sum +=
    array[0];\n                array.RemoveAt(0);\n            }\n        }\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortArray((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)5L}))).Equals((new List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <3bb18d2ce6fe4f0c96c1aca8c9509930>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <3bb18d2ce6fe4f0c96c1aca8c9509930>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977111
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of non-negative integers, return a copy of the
    given array after sorting,\n    // you will sort the given array in ascending
    order if the sum( first index value, last index value) is odd,\n    // or sort
    it in descending order if the sum( first index value, last index value) is even.\n
    \   // Note:\n    // * don't change the given array.\n    // Examples:\n    public
    static List<long> SortArray(List<long> array) {\n        long sum = 0;\n        long
    sum2 = 0;\n        List<long> list = new List<long>();\n        foreach (long
    i in array) {\n            sum += i;\n        }\n        if (sum % 2 == 0) {\n
    \           sum2 = sum / 2;\n            foreach (long i in array) {\n                sum2
    += i;\n            }\n            list.Add(sum2);\n            list.Add(sum);\n
    \       } else {\n            sum2 = sum / 2;\n            foreach (long i in
    array) {\n                sum2 -= i;\n            }\n            list.Add(sum2);\n
    \           list.Add(sum);\n        }\n        list.Sort();\n        return list;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(SortArray((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)5L}))).Equals((new List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <9d0c0cfce07a41ab8052697a05ca007f>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <9d0c0cfce07a41ab8052697a05ca007f>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977111
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of non-negative integers, return a copy of the
    given array after sorting,\n    // you will sort the given array in ascending
    order if the sum( first index value, last index value) is odd,\n    // or sort
    it in descending order if the sum( first index value, last index value) is even.\n
    \   // Note:\n    // * don't change the given array.\n    // Examples:\n    public
    static List<long> SortArray(List<long> array) {\n        long sum = 0;\n        long
    sumOfFirstIndex = 0;\n        long sumOfLastIndex = 0;\n        long firstIndex
    = 0;\n        long lastIndex = 0;\n        long temp = 0;\n        List<long>
    result = new List<long>();\n        foreach (long i in array) {\n            sum
    = sum + i;\n            sumOfFirstIndex += i;\n            sumOfLastIndex += i;\n
    \       }\n        if (sumOfFirstIndex % 2 == 0) {\n            firstIndex = sumOfFirstIndex
    / 2;\n            lastIndex = sumOfLastIndex / 2;\n        } else {\n            firstIndex
    = sumOfFirstIndex / 2;\n            lastIndex = sumOfLastIndex / 2;\n        }\n
    \       temp = array[firstIndex];\n        array[firstIndex] = array[lastIndex];\n
    \       array[lastIndex] = temp;\n        foreach (long i in array) {\n            result.Add(i);\n
    \       }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(SortArray((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpwqvj91gr.cs(35,22): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmpwqvj91gr.cs(36,15): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmpwqvj91gr.cs(36,35): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmpwqvj91gr.cs(37,15): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    '
  timestamp: 1659977111
- exit_code: -1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of non-negative integers, return a copy of the
    given array after sorting,\n    // you will sort the given array in ascending
    order if the sum( first index value, last index value) is odd,\n    // or sort
    it in descending order if the sum( first index value, last index value) is even.\n
    \   // Note:\n    // * don't change the given array.\n    // Examples:\n    public
    static List<long> SortArray(List<long> array) {\n        long sum = 0;\n        long
    temp;\n        List<long> result = new List<long>();\n        foreach (long i
    in array) {\n            sum += i;\n        }\n        if (sum % 2 == 0) {\n            temp
    = sum;\n            sum = sum / 2;\n            while (temp != 0) {\n                result.Add(sum);\n
    \               temp -= sum;\n                sum = sum / 2;\n            }\n
    \       } else {\n            temp = sum;\n            sum = sum / 2;\n            while
    (temp != 0) {\n                result.Add(-sum);\n                temp -= sum;\n
    \               sum = sum / 2;\n            }\n        }\n        return result;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(SortArray((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)5L}))).Equals((new List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: Timeout
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a3e5a760bfc84664a0dc487fa1efac08>:0
    \n"
  stdout: None
  timestamp: 1659977116
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of non-negative integers, return a copy of the
    given array after sorting,\n    // you will sort the given array in ascending
    order if the sum( first index value, last index value) is odd,\n    // or sort
    it in descending order if the sum( first index value, last index value) is even.\n
    \   // Note:\n    // * don't change the given array.\n    // Examples:\n    public
    static List<long> SortArray(List<long> array) {\n        List<long> result = new
    List<long>();\n        long sum = 0;\n        long temp;\n        long first =
    0;\n        long last = 0;\n        foreach (long i in array) {\n            sum
    += i;\n            if (sum % 2 == 1) {\n                result.Add(i);\n                first
    = i;\n            } else {\n                last = i;\n            }\n        }\n
    \       if (sum % 2 == 1) {\n            result.Add(last);\n            result.Add(first);\n
    \       } else {\n            result.Add(first);\n            result.Add(last);\n
    \       }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(SortArray((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <18fac38ccf664be8beab166908469b60>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <18fac38ccf664be8beab166908469b60>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977111
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of non-negative integers, return a copy of the
    given array after sorting,\n    // you will sort the given array in ascending
    order if the sum( first index value, last index value) is odd,\n    // or sort
    it in descending order if the sum( first index value, last index value) is even.\n
    \   // Note:\n    // * don't change the given array.\n    // Examples:\n    public
    static List<long> SortArray(List<long> array) {\n        long sum = 0;\n        long
    temp = 0;\n        List<long> result = new List<long>();\n        foreach (long
    i in array) {\n            sum += i;\n            if (sum % 2 == 0) {\n                temp
    = sum;\n                sum = i;\n                result.Add(temp);\n            }\n
    \       }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(SortArray((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c19b36fcbffd4063813f109a377a7afe>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c19b36fcbffd4063813f109a377a7afe>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977111
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of non-negative integers, return a copy of the
    given array after sorting,\n    // you will sort the given array in ascending
    order if the sum( first index value, last index value) is odd,\n    // or sort
    it in descending order if the sum( first index value, last index value) is even.\n
    \   // Note:\n    // * don't change the given array.\n    // Examples:\n    public
    static List<long> SortArray(List<long> array) {\n        long sum = 0;\n        long
    sumOfFirstIndex = 0;\n        long sumOfLastIndex = 0;\n        long firstIndex
    = 0;\n        long lastIndex = 0;\n        long temp = 0;\n        List<long>
    result = new List<long>();\n        foreach (long i in array) {\n            sum
    += i;\n            sumOfFirstIndex += i;\n            sumOfLastIndex += i;\n        }\n
    \       if (sum % 2 == 0) {\n            temp = sumOfFirstIndex;\n            sumOfFirstIndex
    = sumOfLastIndex;\n            sumOfLastIndex = temp;\n        }\n        firstIndex
    = sumOfFirstIndex / 2;\n        lastIndex = sumOfLastIndex / 2;\n        foreach
    (long i in array) {\n            if (i < firstIndex) {\n                result.Add(i);\n
    \           } else if (i > lastIndex) {\n                result.Add(i);\n            }
    else {\n                result.Add(sum - i);\n            }\n        }\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortArray((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)5L}))).Equals((new List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <0457a71a8e0241ceb2a8ed1d4aae839d>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <0457a71a8e0241ceb2a8ed1d4aae839d>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977111
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of non-negative integers, return a copy of the
    given array after sorting,\n    // you will sort the given array in ascending
    order if the sum( first index value, last index value) is odd,\n    // or sort
    it in descending order if the sum( first index value, last index value) is even.\n
    \   // Note:\n    // * don't change the given array.\n    // Examples:\n    public
    static List<long> SortArray(List<long> array) {\n        long sum = 0;\n        long
    sum2 = 0;\n        List<long> result = new List<long>();\n        foreach (long
    i in array) {\n            sum += i;\n        }\n        sum2 = sum % 2;\n        if
    (sum2 == 0) {\n            foreach (long i in array) {\n                result.Add(i);\n
    \           }\n        } else {\n            foreach (long i in array) {\n                result.Add(-i);\n
    \           }\n        }\n        return result;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(SortArray((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <686ba2ed7a914babacb5b928d620e2ed>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <686ba2ed7a914babacb5b928d620e2ed>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977110
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of non-negative integers, return a copy of the
    given array after sorting,\n    // you will sort the given array in ascending
    order if the sum( first index value, last index value) is odd,\n    // or sort
    it in descending order if the sum( first index value, last index value) is even.\n
    \   // Note:\n    // * don't change the given array.\n    // Examples:\n    public
    static List<long> SortArray(List<long> array) {\n        long sum = 0;\n        long
    sum2 = 0;\n        long sum3 = 0;\n        long sum4 = 0;\n        long sum5 =
    0;\n        long sum6 = 0;\n        long sum7 = 0;\n        long sum8 = 0;\n        long
    sum9 = 0;\n        long sum10 = 0;\n        long sum11 = 0;\n        long sum12
    = 0;\n        long sum13 = 0;\n        long sum14 = 0;\n        long sum15 = 0;\n
    \       long sum16 = 0;\n        long sum17 = 0;\n        long sum18 = 0;\n        long
    sum19 = 0;\n        long sum20 = 0;\n        long sum21 = 0;\n        long sum22
    = 0;\n        long sum23 = 0;\n        long sum24 = 0;\n        long sum25 = 0;\n
    \       long sum26 = 0;\n        long sum27 = 0;\n        long sum28 = 0;\n        long
    sum29 = 0;\n        long sum30 = 0;\n        long sum31 = 0;\n        long sum32
    = 0;\n        long sum33 = 0;\n        long sum34 = 0;\n        long sum35 = 0;\n
    \       long sum36 = 0;\n        long sum37 = 0;\n        long sum38 = 0;\n        long
    sum39 = 0;\n        long sum40 = 0;\n        long sum41 = 0;\n        long sum42
    = 0;\n        long sum43 = 0;\n        long sum44 = 0;\n        long sum45 = 0;\n
    \       long sum46 = 0;\n        long sum47 = 0;\n        long sum48 = 0;\n        long
    sum49 = 0;\n        long sum50 = 0;\n        long sum51 = 0;\n        long sum52
    = 0;\n        long sum53 = 0;\n        long sum54 = 0;\n        long sum55 = 0;\n
    \       long sum56 = 0;\n        long sum57 = 0;\n        long sum58 = 0;\n        long
    sum59 = 0;\n        long sum60 = 0;\n        long sum61 = 0;\n        long sum62
    = 0;\n        long sum63 = 0;\n        long sum64 = 0;\n        long sum65 = 0;\n
    \       long sum66 = 0;\n        long sum67 = 0;\n        long sum68 = 0;\n        long
    sum69 = 0;\n        long sum70 = 0;\n        long sum71 = 0;\n        long sum72
    = 0;\n        long sum73 = 0;\n        long sum74 = 0;\n        long sum75 = 0;\n
    \       long sum76 = 0;\n        long sum77 = 0;\n        long sum78 = 0;\n        long
    sum79 = 0;\n        long sum80 = 0;\n        long sum81 = 0;\n        long sum82
    = 0;\n        long sum83 = 0;\n        long sum84 = 0;\n        long sum85 = 0;\n
    \       long sum86 = 0;\n        \n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(SortArray((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpmchrwcpg.cs(16,14): warning CS0219: The variable ''sum'' is assigned but
    its value is never used

    /tmp/tmpmchrwcpg.cs(17,14): warning CS0219: The variable ''sum2'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(18,14): warning CS0219: The variable ''sum3'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(19,14): warning CS0219: The variable ''sum4'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(20,14): warning CS0219: The variable ''sum5'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(21,14): warning CS0219: The variable ''sum6'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(22,14): warning CS0219: The variable ''sum7'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(23,14): warning CS0219: The variable ''sum8'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(24,14): warning CS0219: The variable ''sum9'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(25,14): warning CS0219: The variable ''sum10'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(26,14): warning CS0219: The variable ''sum11'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(27,14): warning CS0219: The variable ''sum12'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(28,14): warning CS0219: The variable ''sum13'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(29,14): warning CS0219: The variable ''sum14'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(30,14): warning CS0219: The variable ''sum15'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(31,14): warning CS0219: The variable ''sum16'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(32,14): warning CS0219: The variable ''sum17'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(33,14): warning CS0219: The variable ''sum18'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(34,14): warning CS021'
  timestamp: 1659977110
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of non-negative integers, return a copy of the
    given array after sorting,\n    // you will sort the given array in ascending
    order if the sum( first index value, last index value) is odd,\n    // or sort
    it in descending order if the sum( first index value, last index value) is even.\n
    \   // Note:\n    // * don't change the given array.\n    // Examples:\n    public
    static List<long> SortArray(List<long> array) {\n        long sum = 0;\n        long
    temp = 0;\n        List<long> result = new List<long>();\n        foreach (long
    i in array) {\n            sum += i;\n            if (sum % 2 == 0) {\n                temp
    = sum;\n            } else {\n                temp = sum - 1;\n            }\n
    \           result.Add(temp);\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(SortArray((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c117842bc8d3401c8673a7a9756613e9>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c117842bc8d3401c8673a7a9756613e9>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977110
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of non-negative integers, return a copy of the
    given array after sorting,\n    // you will sort the given array in ascending
    order if the sum( first index value, last index value) is odd,\n    // or sort
    it in descending order if the sum( first index value, last index value) is even.\n
    \   // Note:\n    // * don't change the given array.\n    // Examples:\n    public
    static List<long> SortArray(List<long> array) {\n        long sum = 0;\n        long
    temp;\n        List<long> result = new List<long>();\n        foreach (long i
    in array) {\n            sum += i;\n        }\n        if (sum % 2 == 0) {\n            temp
    = sum;\n            sum = array.Sum();\n            array.Clear();\n            array.Add(temp);\n
    \       }\n        array.Sort();\n        foreach (long i in array) {\n            result.Add(i);\n
    \       }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(SortArray((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <fae1f3344c5f49baaa19e9985db72cf2>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <fae1f3344c5f49baaa19e9985db72cf2>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977111
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of non-negative integers, return a copy of the
    given array after sorting,\n    // you will sort the given array in ascending
    order if the sum( first index value, last index value) is odd,\n    // or sort
    it in descending order if the sum( first index value, last index value) is even.\n
    \   // Note:\n    // * don't change the given array.\n    // Examples:\n    public
    static List<long> SortArray(List<long> array) {\n        long sum = 0;\n        long
    sum2 = 0;\n        long sum3 = 0;\n        long sum4 = 0;\n        long sum5 =
    0;\n        long sum6 = 0;\n        long sum7 = 0;\n        long sum8 = 0;\n        long
    sum9 = 0;\n        long sum10 = 0;\n        long sum11 = 0;\n        long sum12
    = 0;\n        long sum13 = 0;\n        long sum14 = 0;\n        long sum15 = 0;\n
    \       long sum16 = 0;\n        long sum17 = 0;\n        long sum18 = 0;\n        long
    sum19 = 0;\n        long sum20 = 0;\n        long sum21 = 0;\n        long sum22
    = 0;\n        long sum23 = 0;\n        long sum24 = 0;\n        long sum25 = 0;\n
    \       long sum26 = 0;\n        long sum27 = 0;\n        long sum28 = 0;\n        long
    sum29 = 0;\n        long sum30 = 0;\n        long sum31 = 0;\n        long sum32
    = 0;\n        long sum33 = 0;\n        long sum34 = 0;\n        long sum35 = 0;\n
    \       long sum36 = 0;\n        long sum37 = 0;\n        long sum38 = 0;\n        long
    sum39 = 0;\n        long sum40 = 0;\n        long sum41 = 0;\n        long sum42
    = 0;\n        long sum43 = 0;\n        long sum44 = 0;\n        long sum45 = 0;\n
    \       long sum46 = 0;\n        long sum47 = 0;\n        long sum48 = 0;\n        long
    sum49 = 0;\n        long sum50 = 0;\n        long sum51 = 0;\n        long sum52
    = 0;\n        long sum53 = 0;\n        long sum54 = 0;\n        long sum55 = 0;\n
    \       long sum56 = 0;\n        long sum57 = 0;\n        long sum58 = 0;\n        long
    sum59 = 0;\n        long sum60 = 0;\n        long sum61 = 0;\n        long sum62
    = 0;\n        long sum63 = 0;\n        long sum64 = 0;\n        long sum65 = 0;\n
    \       long sum66 = 0;\n        long sum67 = 0;\n        long sum68 = 0;\n        long
    sum69 = 0;\n        long sum70 = 0;\n        long sum71 = 0;\n        long sum72
    = 0;\n        long sum73 = 0;\n        long sum74 = 0;\n        long sum75 = 0;\n
    \       long sum76 = 0;\n        long sum77 = 0;\n        long sum78 = 0;\n        long
    sum79 = 0;\n        long sum80 = 0;\n        long sum81 = 0;\n        long sum82
    = 0;\n        long sum83 = 0;\n        long sum84 = 0;\n        long sum85 = 0;\n
    \       long sum86 = 0;\n        \n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(SortArray((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpmchrwcpg.cs(16,14): warning CS0219: The variable ''sum'' is assigned but
    its value is never used

    /tmp/tmpmchrwcpg.cs(17,14): warning CS0219: The variable ''sum2'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(18,14): warning CS0219: The variable ''sum3'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(19,14): warning CS0219: The variable ''sum4'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(20,14): warning CS0219: The variable ''sum5'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(21,14): warning CS0219: The variable ''sum6'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(22,14): warning CS0219: The variable ''sum7'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(23,14): warning CS0219: The variable ''sum8'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(24,14): warning CS0219: The variable ''sum9'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(25,14): warning CS0219: The variable ''sum10'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(26,14): warning CS0219: The variable ''sum11'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(27,14): warning CS0219: The variable ''sum12'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(28,14): warning CS0219: The variable ''sum13'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(29,14): warning CS0219: The variable ''sum14'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(30,14): warning CS0219: The variable ''sum15'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(31,14): warning CS0219: The variable ''sum16'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(32,14): warning CS0219: The variable ''sum17'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(33,14): warning CS0219: The variable ''sum18'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(34,14): warning CS021'
  timestamp: 1659977110
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of non-negative integers, return a copy of the
    given array after sorting,\n    // you will sort the given array in ascending
    order if the sum( first index value, last index value) is odd,\n    // or sort
    it in descending order if the sum( first index value, last index value) is even.\n
    \   // Note:\n    // * don't change the given array.\n    // Examples:\n    public
    static List<long> SortArray(List<long> array) {\n        long sum = 0;\n        long
    first = 0;\n        long last = 0;\n        List<long> result = new List<long>();\n
    \       foreach (long i in array) {\n            sum += i;\n            if (sum
    % 2 == 0) {\n                first = i;\n            } else {\n                last
    = i;\n            }\n            result.Add(i);\n        }\n        Array.Sort(result);\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(SortArray((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpgmjahh3d.cs(29,20): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''System.Array''

    '
  timestamp: 1659977111
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of non-negative integers, return a copy of the
    given array after sorting,\n    // you will sort the given array in ascending
    order if the sum( first index value, last index value) is odd,\n    // or sort
    it in descending order if the sum( first index value, last index value) is even.\n
    \   // Note:\n    // * don't change the given array.\n    // Examples:\n    public
    static List<long> SortArray(List<long> array) {\n        long sum = 0;\n        long
    maxSum = array.Last();\n        long minSum = array.First();\n        long maxSum2
    = array.Last();\n        long minSum2 = array.First();\n        foreach (long
    i in array) {\n            sum += i;\n            if (sum > maxSum) {\n                maxSum
    = sum;\n            }\n            if (sum < minSum) {\n                minSum
    = sum;\n            }\n            if (sum > maxSum2) {\n                maxSum2
    = sum;\n            }\n            if (sum < minSum2) {\n                minSum2
    = sum;\n            }\n        }\n        List<long> result = new List<long>();\n
    \       foreach (long i in array) {\n            sum += i;\n            if (sum
    > maxSum) {\n                result.Add(sum);\n                sum = 0;\n            }\n
    \           if (sum < minSum) {\n                result.Add(sum);\n                sum
    = 0;\n            }\n            if (sum > maxSum2) {\n                result.Add(sum);\n
    \               sum = 0;\n            }\n            if (sum < minSum2) {\n                result.Add(sum);\n
    \               sum = 0;\n            }\n        }\n        return result;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(SortArray((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)5L}))).Equals((new List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.InvalidOperationException: Sequence contains
    no elements\n  at System.Linq.Enumerable.Last[TSource] (System.Collections.Generic.IEnumerable`1[T]
    source) [0x00010] in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem.SortArray
    (System.Collections.Generic.List`1[T] array) [0x00004] in <4057ea7dec024743a978799080660207>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <4057ea7dec024743a978799080660207>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.InvalidOperationException: Sequence
    contains no elements\n  at System.Linq.Enumerable.Last[TSource] (System.Collections.Generic.IEnumerable`1[T]
    source) [0x00010] in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem.SortArray
    (System.Collections.Generic.List`1[T] array) [0x00004] in <4057ea7dec024743a978799080660207>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <4057ea7dec024743a978799080660207>:0
    \n"
  stdout: ''
  timestamp: 1659977111
- exit_code: -1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of non-negative integers, return a copy of the
    given array after sorting,\n    // you will sort the given array in ascending
    order if the sum( first index value, last index value) is odd,\n    // or sort
    it in descending order if the sum( first index value, last index value) is even.\n
    \   // Note:\n    // * don't change the given array.\n    // Examples:\n    public
    static List<long> SortArray(List<long> array) {\n        long sum = 0;\n        long
    temp = 0;\n        List<long> result = new List<long>();\n        foreach (long
    i in array) {\n            sum += i;\n        }\n        if (sum % 2 == 0) {\n
    \           temp = sum;\n            sum = sum / 2;\n            while (temp !=
    0) {\n                result.Add(temp);\n                temp -= 1;\n            }\n
    \       } else {\n            temp = sum;\n            sum = sum / 2;\n            while
    (temp != 0) {\n                result.Add(temp);\n                temp += 1;\n
    \           }\n        }\n        return result;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(SortArray((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: Timeout
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <b8bbbb4a828140a3b53195f1b8ac6d73>:0
    \n"
  stdout: None
  timestamp: 1659977115
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of non-negative integers, return a copy of the
    given array after sorting,\n    // you will sort the given array in ascending
    order if the sum( first index value, last index value) is odd,\n    // or sort
    it in descending order if the sum( first index value, last index value) is even.\n
    \   // Note:\n    // * don't change the given array.\n    // Examples:\n    public
    static List<long> SortArray(List<long> array) {\n        long sum = 0;\n        long
    first = 0;\n        long last = 0;\n        long temp = 0;\n        List<long>
    result = new List<long>();\n        foreach (long i in array) {\n            sum
    += i;\n            if (sum % 2 == 0) {\n                temp = sum;\n                first
    = i;\n            } else {\n                last = i;\n            }\n            result.Add(temp);\n
    \       }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(SortArray((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c69e2c03b17c429d8f44d89592ca1a75>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c69e2c03b17c429d8f44d89592ca1a75>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977110
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of non-negative integers, return a copy of the
    given array after sorting,\n    // you will sort the given array in ascending
    order if the sum( first index value, last index value) is odd,\n    // or sort
    it in descending order if the sum( first index value, last index value) is even.\n
    \   // Note:\n    // * don't change the given array.\n    // Examples:\n    public
    static List<long> SortArray(List<long> array) {\n        long sum = 0;\n        long
    sum2 = 0;\n        long sum3 = 0;\n        long sum4 = 0;\n        long sum5 =
    0;\n        long sum6 = 0;\n        long sum7 = 0;\n        long sum8 = 0;\n        long
    sum9 = 0;\n        long sum10 = 0;\n        long sum11 = 0;\n        long sum12
    = 0;\n        long sum13 = 0;\n        long sum14 = 0;\n        long sum15 = 0;\n
    \       long sum16 = 0;\n        long sum17 = 0;\n        long sum18 = 0;\n        long
    sum19 = 0;\n        long sum20 = 0;\n        long sum21 = 0;\n        long sum22
    = 0;\n        long sum23 = 0;\n        long sum24 = 0;\n        long sum25 = 0;\n
    \       long sum26 = 0;\n        long sum27 = 0;\n        long sum28 = 0;\n        long
    sum29 = 0;\n        long sum30 = 0;\n        long sum31 = 0;\n        long sum32
    = 0;\n        long sum33 = 0;\n        long sum34 = 0;\n        long sum35 = 0;\n
    \       long sum36 = 0;\n        long sum37 = 0;\n        long sum38 = 0;\n        long
    sum39 = 0;\n        long sum40 = 0;\n        long sum41 = 0;\n        long sum42
    = 0;\n        long sum43 = 0;\n        long sum44 = 0;\n        long sum45 = 0;\n
    \       long sum46 = 0;\n        long sum47 = 0;\n        long sum48 = 0;\n        long
    sum49 = 0;\n        long sum50 = 0;\n        long sum51 = 0;\n        long sum52
    = 0;\n        long sum53 = 0;\n        long sum54 = 0;\n        long sum55 = 0;\n
    \       long sum56 = 0;\n        long sum57 = 0;\n        long sum58 = 0;\n        long
    sum59 = 0;\n        long sum60 = 0;\n        long sum61 = 0;\n        long sum62
    = 0;\n        long sum63 = 0;\n        long sum64 = 0;\n        long sum65 = 0;\n
    \       long sum66 = 0;\n        long sum67 = 0;\n        long sum68 = 0;\n        long
    sum69 = 0;\n        long sum70 = 0;\n        long sum71 = 0;\n        long sum72
    = 0;\n        long sum73 = 0;\n        long sum74 = 0;\n        long sum75 = 0;\n
    \       long sum76 = 0;\n        long sum77 = 0;\n        long sum78 = 0;\n        long
    sum79 = 0;\n        long sum80 = 0;\n        long sum81 = 0;\n        long sum82
    = 0;\n        long sum83 = 0;\n        long sum84 = 0;\n        long sum85 = 0;\n
    \       long sum86 = 0;\n        \n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(SortArray((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpmchrwcpg.cs(16,14): warning CS0219: The variable ''sum'' is assigned but
    its value is never used

    /tmp/tmpmchrwcpg.cs(17,14): warning CS0219: The variable ''sum2'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(18,14): warning CS0219: The variable ''sum3'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(19,14): warning CS0219: The variable ''sum4'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(20,14): warning CS0219: The variable ''sum5'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(21,14): warning CS0219: The variable ''sum6'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(22,14): warning CS0219: The variable ''sum7'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(23,14): warning CS0219: The variable ''sum8'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(24,14): warning CS0219: The variable ''sum9'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(25,14): warning CS0219: The variable ''sum10'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(26,14): warning CS0219: The variable ''sum11'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(27,14): warning CS0219: The variable ''sum12'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(28,14): warning CS0219: The variable ''sum13'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(29,14): warning CS0219: The variable ''sum14'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(30,14): warning CS0219: The variable ''sum15'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(31,14): warning CS0219: The variable ''sum16'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(32,14): warning CS0219: The variable ''sum17'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(33,14): warning CS0219: The variable ''sum18'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(34,14): warning CS021'
  timestamp: 1659977110
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of non-negative integers, return a copy of the
    given array after sorting,\n    // you will sort the given array in ascending
    order if the sum( first index value, last index value) is odd,\n    // or sort
    it in descending order if the sum( first index value, last index value) is even.\n
    \   // Note:\n    // * don't change the given array.\n    // Examples:\n    public
    static List<long> SortArray(List<long> array) {\n        long sum = 0;\n        long
    sum2 = 0;\n        long sum3 = 0;\n        long sum4 = 0;\n        long sum5 =
    0;\n        long sum6 = 0;\n        long sum7 = 0;\n        long sum8 = 0;\n        long
    sum9 = 0;\n        long sum10 = 0;\n        long sum11 = 0;\n        long sum12
    = 0;\n        long sum13 = 0;\n        long sum14 = 0;\n        long sum15 = 0;\n
    \       long sum16 = 0;\n        long sum17 = 0;\n        long sum18 = 0;\n        long
    sum19 = 0;\n        long sum20 = 0;\n        long sum21 = 0;\n        long sum22
    = 0;\n        long sum23 = 0;\n        long sum24 = 0;\n        long sum25 = 0;\n
    \       long sum26 = 0;\n        long sum27 = 0;\n        long sum28 = 0;\n        long
    sum29 = 0;\n        long sum30 = 0;\n        long sum31 = 0;\n        long sum32
    = 0;\n        long sum33 = 0;\n        long sum34 = 0;\n        long sum35 = 0;\n
    \       long sum36 = 0;\n        long sum37 = 0;\n        long sum38 = 0;\n        long
    sum39 = 0;\n        long sum40 = 0;\n        long sum41 = 0;\n        long sum42
    = 0;\n        long sum43 = 0;\n        long sum44 = 0;\n        long sum45 = 0;\n
    \       long sum46 = 0;\n        long sum47 = 0;\n        long sum48 = 0;\n        long
    sum49 = 0;\n        long sum50 = 0;\n        long sum51 = 0;\n        long sum52
    = 0;\n        long sum53 = 0;\n        long sum54 = 0;\n        long sum55 = 0;\n
    \       long sum56 = 0;\n        long sum57 = 0;\n        long sum58 = 0;\n        long
    sum59 = 0;\n        long sum60 = 0;\n        long sum61 = 0;\n        long sum62
    = 0;\n        long sum63 = 0;\n        long sum64 = 0;\n        long sum65 = 0;\n
    \       long sum66 = 0;\n        long sum67 = 0;\n        long sum68 = 0;\n        long
    sum69 = 0;\n        long sum70 = 0;\n        long sum71 = 0;\n        long sum72
    = 0;\n        long sum73 = 0;\n        long sum74 = 0;\n        long sum75 = 0;\n
    \       long sum76 = 0;\n        long sum77 = 0;\n        long sum78 = 0;\n        long
    sum79 = 0;\n        long sum80 = 0;\n        long sum81 = 0;\n        long sum82
    = 0;\n        long sum83 = 0;\n        long sum84 = 0;\n        long sum85 = 0;\n
    \       long sum86 = 0;\n        \n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(SortArray((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpmchrwcpg.cs(16,14): warning CS0219: The variable ''sum'' is assigned but
    its value is never used

    /tmp/tmpmchrwcpg.cs(17,14): warning CS0219: The variable ''sum2'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(18,14): warning CS0219: The variable ''sum3'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(19,14): warning CS0219: The variable ''sum4'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(20,14): warning CS0219: The variable ''sum5'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(21,14): warning CS0219: The variable ''sum6'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(22,14): warning CS0219: The variable ''sum7'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(23,14): warning CS0219: The variable ''sum8'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(24,14): warning CS0219: The variable ''sum9'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(25,14): warning CS0219: The variable ''sum10'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(26,14): warning CS0219: The variable ''sum11'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(27,14): warning CS0219: The variable ''sum12'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(28,14): warning CS0219: The variable ''sum13'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(29,14): warning CS0219: The variable ''sum14'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(30,14): warning CS0219: The variable ''sum15'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(31,14): warning CS0219: The variable ''sum16'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(32,14): warning CS0219: The variable ''sum17'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(33,14): warning CS0219: The variable ''sum18'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(34,14): warning CS021'
  timestamp: 1659977110
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of non-negative integers, return a copy of the
    given array after sorting,\n    // you will sort the given array in ascending
    order if the sum( first index value, last index value) is odd,\n    // or sort
    it in descending order if the sum( first index value, last index value) is even.\n
    \   // Note:\n    // * don't change the given array.\n    // Examples:\n    public
    static List<long> SortArray(List<long> array) {\n        long sum = 0;\n        long
    temp = 0;\n        List<long> result = new List<long>();\n        foreach (long
    i in array) {\n            sum += i;\n        }\n        if (sum % 2 == 0) {\n
    \           temp = sum;\n            sum = sum / 2;\n            while (temp !=
    sum) {\n                result.Add(temp);\n                temp = temp / 2;\n
    \           }\n        } else {\n            temp = sum;\n            sum = sum
    / 2;\n            while (temp != sum) {\n                result.Add(temp);\n                temp
    = temp / 2;\n            }\n            temp = sum;\n            sum = sum / 2;\n
    \           while (temp != sum) {\n                result.Add(temp);\n                temp
    = temp / 2;\n            }\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(SortArray((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <608d0309916341dfad4b15a6c52eef34>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <608d0309916341dfad4b15a6c52eef34>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977110
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of non-negative integers, return a copy of the
    given array after sorting,\n    // you will sort the given array in ascending
    order if the sum( first index value, last index value) is odd,\n    // or sort
    it in descending order if the sum( first index value, last index value) is even.\n
    \   // Note:\n    // * don't change the given array.\n    // Examples:\n    public
    static List<long> SortArray(List<long> array) {\n        long sum = 0;\n        long
    first = 0;\n        long last = 0;\n        long mid = 0;\n        List<long>
    result = new List<long>();\n        foreach (long i in array) {\n            sum
    += i;\n            if (sum % 2 == 0) {\n                result.Add(i);\n                first
    = i;\n            }\n            if (sum % 2 != 0) {\n                last = i;\n
    \           }\n        }\n        mid = (first + last) / 2;\n        result.Add(mid);\n
    \       if (sum % 2 == 0) {\n            Array.Sort(result);\n        } else {\n
    \           Array.Sort(result, (a, b) => b - a);\n        }\n        return result;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(SortArray((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)5L}))).Equals((new List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpqdti9e4f.cs(34,24): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''System.Array''

    /tmp/tmpqdti9e4f.cs(36,24): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''System.Array''

    /tmp/tmpqdti9e4f.cs(36,32): error CS1660: Cannot convert lambda expression to
    type ''IComparer'' because it is not a delegate type

    '
  timestamp: 1659977111
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of non-negative integers, return a copy of the
    given array after sorting,\n    // you will sort the given array in ascending
    order if the sum( first index value, last index value) is odd,\n    // or sort
    it in descending order if the sum( first index value, last index value) is even.\n
    \   // Note:\n    // * don't change the given array.\n    // Examples:\n    public
    static List<long> SortArray(List<long> array) {\n        long sum = 0;\n        long
    temp = 0;\n        List<long> result = new List<long>();\n        foreach (long
    i in array) {\n            sum += i;\n            if (sum % 2 == 0) {\n                temp
    = sum;\n            } else {\n                temp = sum - 1;\n            }\n
    \           result.Add(temp);\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(SortArray((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c117842bc8d3401c8673a7a9756613e9>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c117842bc8d3401c8673a7a9756613e9>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977110
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of non-negative integers, return a copy of the
    given array after sorting,\n    // you will sort the given array in ascending
    order if the sum( first index value, last index value) is odd,\n    // or sort
    it in descending order if the sum( first index value, last index value) is even.\n
    \   // Note:\n    // * don't change the given array.\n    // Examples:\n    public
    static List<long> SortArray(List<long> array) {\n        long sum = 0;\n        long
    sum2 = 0;\n        long sum3 = 0;\n        long sum4 = 0;\n        long sum5 =
    0;\n        long sum6 = 0;\n        long sum7 = 0;\n        long sum8 = 0;\n        long
    sum9 = 0;\n        long sum10 = 0;\n        long sum11 = 0;\n        long sum12
    = 0;\n        long sum13 = 0;\n        long sum14 = 0;\n        long sum15 = 0;\n
    \       long sum16 = 0;\n        long sum17 = 0;\n        long sum18 = 0;\n        long
    sum19 = 0;\n        long sum20 = 0;\n        long sum21 = 0;\n        long sum22
    = 0;\n        long sum23 = 0;\n        long sum24 = 0;\n        long sum25 = 0;\n
    \       long sum26 = 0;\n        long sum27 = 0;\n        long sum28 = 0;\n        long
    sum29 = 0;\n        long sum30 = 0;\n        long sum31 = 0;\n        long sum32
    = 0;\n        long sum33 = 0;\n        long sum34 = 0;\n        long sum35 = 0;\n
    \       long sum36 = 0;\n        long sum37 = 0;\n        long sum38 = 0;\n        long
    sum39 = 0;\n        long sum40 = 0;\n        long sum41 = 0;\n        long sum42
    = 0;\n        long sum43 = 0;\n        long sum44 = 0;\n        long sum45 = 0;\n
    \       long sum46 = 0;\n        long sum47 = 0;\n        long sum48 = 0;\n        long
    sum49 = 0;\n        long sum50 = 0;\n        long sum51 = 0;\n        long sum52
    = 0;\n        long sum53 = 0;\n        long sum54 = 0;\n        long sum55 = 0;\n
    \       long sum56 = 0;\n        long sum57 = 0;\n        long sum58 = 0;\n        long
    sum59 = 0;\n        long sum60 = 0;\n        long sum61 = 0;\n        long sum62
    = 0;\n        long sum63 = 0;\n        long sum64 = 0;\n        long sum65 = 0;\n
    \       long sum66 = 0;\n        long sum67 = 0;\n        long sum68 = 0;\n        long
    sum69 = 0;\n        long sum70 = 0;\n        long sum71 = 0;\n        long sum72
    = 0;\n        long sum73 = 0;\n        long sum74 = 0;\n        long sum75 = 0;\n
    \       long sum76 = 0;\n        long sum77 = 0;\n        long sum78 = 0;\n        long
    sum79 = 0;\n        long sum80 = 0;\n        long sum81 = 0;\n        long sum82
    = 0;\n        long sum83 = 0;\n        long sum84 = 0;\n        long sum85 = 0;\n
    \       long sum86 = 0;\n        \n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(SortArray((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpmchrwcpg.cs(16,14): warning CS0219: The variable ''sum'' is assigned but
    its value is never used

    /tmp/tmpmchrwcpg.cs(17,14): warning CS0219: The variable ''sum2'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(18,14): warning CS0219: The variable ''sum3'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(19,14): warning CS0219: The variable ''sum4'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(20,14): warning CS0219: The variable ''sum5'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(21,14): warning CS0219: The variable ''sum6'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(22,14): warning CS0219: The variable ''sum7'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(23,14): warning CS0219: The variable ''sum8'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(24,14): warning CS0219: The variable ''sum9'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(25,14): warning CS0219: The variable ''sum10'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(26,14): warning CS0219: The variable ''sum11'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(27,14): warning CS0219: The variable ''sum12'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(28,14): warning CS0219: The variable ''sum13'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(29,14): warning CS0219: The variable ''sum14'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(30,14): warning CS0219: The variable ''sum15'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(31,14): warning CS0219: The variable ''sum16'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(32,14): warning CS0219: The variable ''sum17'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(33,14): warning CS0219: The variable ''sum18'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(34,14): warning CS021'
  timestamp: 1659977110
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of non-negative integers, return a copy of the
    given array after sorting,\n    // you will sort the given array in ascending
    order if the sum( first index value, last index value) is odd,\n    // or sort
    it in descending order if the sum( first index value, last index value) is even.\n
    \   // Note:\n    // * don't change the given array.\n    // Examples:\n    public
    static List<long> SortArray(List<long> array) {\n        List<long> result = new
    List<long>();\n        long sum = 0;\n        long last = 0;\n        foreach
    (long i in array) {\n            sum += i;\n            if (sum % 2 == 0) {\n
    \               result.Add(i);\n            } else {\n                result.Add(last);\n
    \               last = i;\n            }\n        }\n        return result;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(SortArray((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)5L}))).Equals((new List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <27ca23ed260b4753908089a1b480df97>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <27ca23ed260b4753908089a1b480df97>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977111
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of non-negative integers, return a copy of the
    given array after sorting,\n    // you will sort the given array in ascending
    order if the sum( first index value, last index value) is odd,\n    // or sort
    it in descending order if the sum( first index value, last index value) is even.\n
    \   // Note:\n    // * don't change the given array.\n    // Examples:\n    public
    static List<long> SortArray(List<long> array) {\n        long sum = 0;\n        long
    sum2 = 0;\n        List<long> result = new List<long>();\n        foreach (long
    i in array) {\n            sum += i;\n            sum2 += i;\n            result.Add(i);\n
    \       }\n        if (sum % 2 == 0) {\n            Array.Sort(result);\n        }
    else {\n            Array.Sort(result, (a, b) => b - a);\n        }\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortArray((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)5L}))).Equals((new List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmphj3edej_.cs(25,24): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''System.Array''

    /tmp/tmphj3edej_.cs(27,24): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''System.Array''

    /tmp/tmphj3edej_.cs(27,32): error CS1660: Cannot convert lambda expression to
    type ''IComparer'' because it is not a delegate type

    '
  timestamp: 1659977111
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of non-negative integers, return a copy of the
    given array after sorting,\n    // you will sort the given array in ascending
    order if the sum( first index value, last index value) is odd,\n    // or sort
    it in descending order if the sum( first index value, last index value) is even.\n
    \   // Note:\n    // * don't change the given array.\n    // Examples:\n    public
    static List<long> SortArray(List<long> array) {\n        long sum = 0;\n        long
    sum1 = 0;\n        long sum2 = 0;\n        long sum3 = 0;\n        long sum4 =
    0;\n        long sum5 = 0;\n        long sum6 = 0;\n        long sum7 = 0;\n        long
    sum8 = 0;\n        long sum9 = 0;\n        long sum10 = 0;\n        long sum11
    = 0;\n        long sum12 = 0;\n        long sum13 = 0;\n        long sum14 = 0;\n
    \       long sum15 = 0;\n        long sum16 = 0;\n        long sum17 = 0;\n        long
    sum18 = 0;\n        long sum19 = 0;\n        long sum20 = 0;\n        long sum21
    = 0;\n        long sum22 = 0;\n        long sum23 = 0;\n        long sum24 = 0;\n
    \       long sum25 = 0;\n        long sum26 = 0;\n        long sum27 = 0;\n        long
    sum28 = 0;\n        long sum29 = 0;\n        long sum30 = 0;\n        long sum31
    = 0;\n        long sum32 = 0;\n        long sum33 = 0;\n        long sum34 = 0;\n
    \       long sum35 = 0;\n        long sum36 = 0;\n        long sum37 = 0;\n        long
    sum38 = 0;\n        long sum39 = 0;\n        long sum40 = 0;\n        long sum41
    = 0;\n        long sum42 = 0;\n        long sum43 = 0;\n        long sum44 = 0;\n
    \       long sum45 = 0;\n        long sum46 = 0;\n        long sum47 = 0;\n        long
    sum48 = 0;\n        long sum49 = 0;\n        long sum50 = 0;\n        long sum51
    = 0;\n        long sum52 = 0;\n        long sum53 = 0;\n        long sum54 = 0;\n
    \       long sum55 = 0;\n        long sum56 = 0;\n        long sum57 = 0;\n        long
    sum58 = 0;\n        long sum59 = 0;\n        long sum60 = 0;\n        long sum61
    = 0;\n        long sum62 = 0;\n        long sum63 = 0;\n        long sum64 = 0;\n
    \       long sum65 = 0;\n        long sum66 = 0;\n        long sum67 = 0;\n        long
    sum68 = 0;\n        long sum69 = 0;\n        long sum70 = 0;\n        long sum71
    = 0;\n        long sum72 = 0;\n        long sum73 = 0;\n        long sum74 = 0;\n
    \       long sum75 = 0;\n        long sum76 = 0;\n        long sum77 = 0;\n        long
    sum78 = 0;\n        long sum79 = 0;\n        long sum80 = 0;\n        long sum81
    = 0;\n        long sum82 = 0;\n        long sum83 = 0;\n        long sum84 = 0;\n
    \       long sum85 = 0;\n        long \n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(SortArray((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmphw28v9l8.cs(102,13): error CS1001: Identifier expected

    /tmp/tmphw28v9l8.cs(102,13): error CS1002: ; expected

    '
  timestamp: 1659977111
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of non-negative integers, return a copy of the
    given array after sorting,\n    // you will sort the given array in ascending
    order if the sum( first index value, last index value) is odd,\n    // or sort
    it in descending order if the sum( first index value, last index value) is even.\n
    \   // Note:\n    // * don't change the given array.\n    // Examples:\n    public
    static List<long> SortArray(List<long> array) {\n        long sum = 0;\n        long
    sum2 = 0;\n        long sum3 = 0;\n        long sum4 = 0;\n        long sum5 =
    0;\n        long sum6 = 0;\n        long sum7 = 0;\n        long sum8 = 0;\n        long
    sum9 = 0;\n        long sum10 = 0;\n        long sum11 = 0;\n        long sum12
    = 0;\n        long sum13 = 0;\n        long sum14 = 0;\n        long sum15 = 0;\n
    \       long sum16 = 0;\n        long sum17 = 0;\n        long sum18 = 0;\n        long
    sum19 = 0;\n        long sum20 = 0;\n        long sum21 = 0;\n        long sum22
    = 0;\n        long sum23 = 0;\n        long sum24 = 0;\n        long sum25 = 0;\n
    \       long sum26 = 0;\n        long sum27 = 0;\n        long sum28 = 0;\n        long
    sum29 = 0;\n        long sum30 = 0;\n        long sum31 = 0;\n        long sum32
    = 0;\n        long sum33 = 0;\n        long sum34 = 0;\n        long sum35 = 0;\n
    \       long sum36 = 0;\n        long sum37 = 0;\n        long sum38 = 0;\n        long
    sum39 = 0;\n        long sum40 = 0;\n        long sum41 = 0;\n        long sum42
    = 0;\n        long sum43 = 0;\n        long sum44 = 0;\n        long sum45 = 0;\n
    \       long sum46 = 0;\n        long sum47 = 0;\n        long sum48 = 0;\n        long
    sum49 = 0;\n        long sum50 = 0;\n        long sum51 = 0;\n        long sum52
    = 0;\n        long sum53 = 0;\n        long sum54 = 0;\n        long sum55 = 0;\n
    \       long sum56 = 0;\n        long sum57 = 0;\n        long sum58 = 0;\n        long
    sum59 = 0;\n        long sum60 = 0;\n        long sum61 = 0;\n        long sum62
    = 0;\n        long sum63 = 0;\n        long sum64 = 0;\n        long sum65 = 0;\n
    \       long sum66 = 0;\n        long sum67 = 0;\n        long sum68 = 0;\n        long
    sum69 = 0;\n        long sum70 = 0;\n        long sum71 = 0;\n        long sum72
    = 0;\n        long sum73 = 0;\n        long sum74 = 0;\n        long sum75 = 0;\n
    \       long sum76 = 0;\n        long sum77 = 0;\n        long sum78 = 0;\n        long
    sum79 = 0;\n        long sum80 = 0;\n        long sum81 = 0;\n        long sum82
    = 0;\n        long sum83 = 0;\n        long sum84 = 0;\n        long sum85 = 0;\n
    \       long sum86 = 0;\n        \n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(SortArray((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpmchrwcpg.cs(16,14): warning CS0219: The variable ''sum'' is assigned but
    its value is never used

    /tmp/tmpmchrwcpg.cs(17,14): warning CS0219: The variable ''sum2'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(18,14): warning CS0219: The variable ''sum3'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(19,14): warning CS0219: The variable ''sum4'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(20,14): warning CS0219: The variable ''sum5'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(21,14): warning CS0219: The variable ''sum6'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(22,14): warning CS0219: The variable ''sum7'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(23,14): warning CS0219: The variable ''sum8'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(24,14): warning CS0219: The variable ''sum9'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(25,14): warning CS0219: The variable ''sum10'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(26,14): warning CS0219: The variable ''sum11'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(27,14): warning CS0219: The variable ''sum12'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(28,14): warning CS0219: The variable ''sum13'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(29,14): warning CS0219: The variable ''sum14'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(30,14): warning CS0219: The variable ''sum15'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(31,14): warning CS0219: The variable ''sum16'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(32,14): warning CS0219: The variable ''sum17'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(33,14): warning CS0219: The variable ''sum18'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(34,14): warning CS021'
  timestamp: 1659977110
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of non-negative integers, return a copy of the
    given array after sorting,\n    // you will sort the given array in ascending
    order if the sum( first index value, last index value) is odd,\n    // or sort
    it in descending order if the sum( first index value, last index value) is even.\n
    \   // Note:\n    // * don't change the given array.\n    // Examples:\n    public
    static List<long> SortArray(List<long> array) {\n        long sum = 0;\n        long
    temp = 0;\n        List<long> result = new List<long>();\n        foreach (long
    i in array) {\n            sum += i;\n        }\n        if (sum % 2 == 0) {\n
    \           temp = sum;\n            sum = sum / 2;\n            while (temp !=
    0) {\n                result.Add(sum);\n                temp--;\n                sum++;\n
    \           }\n        } else {\n            temp = sum;\n            sum = sum
    / 2;\n            while (temp != 0) {\n                result.Add(sum);\n                temp--;\n
    \               sum--;\n            }\n        }\n        return result;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(SortArray((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)5L}))).Equals((new List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <60ff3cc7a35b4ff8b8aa38d2d5231e93>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <60ff3cc7a35b4ff8b8aa38d2d5231e93>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977111
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of non-negative integers, return a copy of the
    given array after sorting,\n    // you will sort the given array in ascending
    order if the sum( first index value, last index value) is odd,\n    // or sort
    it in descending order if the sum( first index value, last index value) is even.\n
    \   // Note:\n    // * don't change the given array.\n    // Examples:\n    public
    static List<long> SortArray(List<long> array) {\n        long sum = 0;\n        long
    sum2 = 0;\n        long sum3 = 0;\n        long sum4 = 0;\n        long sum5 =
    0;\n        long sum6 = 0;\n        long sum7 = 0;\n        long sum8 = 0;\n        long
    sum9 = 0;\n        long sum10 = 0;\n        long sum11 = 0;\n        long sum12
    = 0;\n        long sum13 = 0;\n        long sum14 = 0;\n        long sum15 = 0;\n
    \       long sum16 = 0;\n        long sum17 = 0;\n        long sum18 = 0;\n        long
    sum19 = 0;\n        long sum20 = 0;\n        long sum21 = 0;\n        long sum22
    = 0;\n        long sum23 = 0;\n        long sum24 = 0;\n        long sum25 = 0;\n
    \       long sum26 = 0;\n        long sum27 = 0;\n        long sum28 = 0;\n        long
    sum29 = 0;\n        long sum30 = 0;\n        long sum31 = 0;\n        long sum32
    = 0;\n        long sum33 = 0;\n        long sum34 = 0;\n        long sum35 = 0;\n
    \       long sum36 = 0;\n        long sum37 = 0;\n        long sum38 = 0;\n        long
    sum39 = 0;\n        long sum40 = 0;\n        long sum41 = 0;\n        long sum42
    = 0;\n        long sum43 = 0;\n        long sum44 = 0;\n        long sum45 = 0;\n
    \       long sum46 = 0;\n        long sum47 = 0;\n        long sum48 = 0;\n        long
    sum49 = 0;\n        long sum50 = 0;\n        long sum51 = 0;\n        long sum52
    = 0;\n        long sum53 = 0;\n        long sum54 = 0;\n        long sum55 = 0;\n
    \       long sum56 = 0;\n        long sum57 = 0;\n        long sum58 = 0;\n        long
    sum59 = 0;\n        long sum60 = 0;\n        long sum61 = 0;\n        long sum62
    = 0;\n        long sum63 = 0;\n        long sum64 = 0;\n        long sum65 = 0;\n
    \       long sum66 = 0;\n        long sum67 = 0;\n        long sum68 = 0;\n        long
    sum69 = 0;\n        long sum70 = 0;\n        long sum71 = 0;\n        long sum72
    = 0;\n        long sum73 = 0;\n        long sum74 = 0;\n        long sum75 = 0;\n
    \       long sum76 = 0;\n        long sum77 = 0;\n        long sum78 = 0;\n        long
    sum79 = 0;\n        long sum80 = 0;\n        long sum81 = 0;\n        long sum82
    = 0;\n        long sum83 = 0;\n        long sum84 = 0;\n        long sum85 = 0;\n
    \       long sum86 = 0;\n        \n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(SortArray((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpmchrwcpg.cs(16,14): warning CS0219: The variable ''sum'' is assigned but
    its value is never used

    /tmp/tmpmchrwcpg.cs(17,14): warning CS0219: The variable ''sum2'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(18,14): warning CS0219: The variable ''sum3'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(19,14): warning CS0219: The variable ''sum4'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(20,14): warning CS0219: The variable ''sum5'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(21,14): warning CS0219: The variable ''sum6'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(22,14): warning CS0219: The variable ''sum7'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(23,14): warning CS0219: The variable ''sum8'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(24,14): warning CS0219: The variable ''sum9'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(25,14): warning CS0219: The variable ''sum10'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(26,14): warning CS0219: The variable ''sum11'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(27,14): warning CS0219: The variable ''sum12'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(28,14): warning CS0219: The variable ''sum13'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(29,14): warning CS0219: The variable ''sum14'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(30,14): warning CS0219: The variable ''sum15'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(31,14): warning CS0219: The variable ''sum16'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(32,14): warning CS0219: The variable ''sum17'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(33,14): warning CS0219: The variable ''sum18'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(34,14): warning CS021'
  timestamp: 1659977110
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of non-negative integers, return a copy of the
    given array after sorting,\n    // you will sort the given array in ascending
    order if the sum( first index value, last index value) is odd,\n    // or sort
    it in descending order if the sum( first index value, last index value) is even.\n
    \   // Note:\n    // * don't change the given array.\n    // Examples:\n    public
    static List<long> SortArray(List<long> array) {\n        long sum = 0;\n        long
    sum1 = 0;\n        long sum2 = 0;\n        long sum3 = 0;\n        long sum4 =
    0;\n        long sum5 = 0;\n        long sum6 = 0;\n        long sum7 = 0;\n        long
    sum8 = 0;\n        long sum9 = 0;\n        long sum10 = 0;\n        long sum11
    = 0;\n        long sum12 = 0;\n        long sum13 = 0;\n        long sum14 = 0;\n
    \       long sum15 = 0;\n        long sum16 = 0;\n        long sum17 = 0;\n        long
    sum18 = 0;\n        long sum19 = 0;\n        long sum20 = 0;\n        long sum21
    = 0;\n        long sum22 = 0;\n        long sum23 = 0;\n        long sum24 = 0;\n
    \       long sum25 = 0;\n        long sum26 = 0;\n        long sum27 = 0;\n        long
    sum28 = 0;\n        long sum29 = 0;\n        long sum30 = 0;\n        long sum31
    = 0;\n        long sum32 = 0;\n        long sum33 = 0;\n        long sum34 = 0;\n
    \       long sum35 = 0;\n        long sum36 = 0;\n        long sum37 = 0;\n        long
    sum38 = 0;\n        long sum39 = 0;\n        long sum40 = 0;\n        long sum41
    = 0;\n        long sum42 = 0;\n        long sum43 = 0;\n        long sum44 = 0;\n
    \       long sum45 = 0;\n        long sum46 = 0;\n        long sum47 = 0;\n        long
    sum48 = 0;\n        long sum49 = 0;\n        long sum50 = 0;\n        long sum51
    = 0;\n        long sum52 = 0;\n        long sum53 = 0;\n        long sum54 = 0;\n
    \       long sum55 = 0;\n        long sum56 = 0;\n        long sum57 = 0;\n        long
    sum58 = 0;\n        long sum59 = 0;\n        long sum60 = 0;\n        long sum61
    = 0;\n        long sum62 = 0;\n        long sum63 = 0;\n        long sum64 = 0;\n
    \       long sum65 = 0;\n        long sum66 = 0;\n        long sum67 = 0;\n        long
    sum68 = 0;\n        long sum69 = 0;\n        long sum70 = 0;\n        long sum71
    = 0;\n        long sum72 = 0;\n        long sum73 = 0;\n        long sum74 = 0;\n
    \       long sum75 = 0;\n        long sum76 = 0;\n        long sum77 = 0;\n        long
    sum78 = 0;\n        long sum79 = 0;\n        long sum80 = 0;\n        long sum81
    = 0;\n        long sum82 = 0;\n        long sum83 = 0;\n        long sum84 = 0;\n
    \       long sum85 = 0;\n        long \n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(SortArray((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmphw28v9l8.cs(102,13): error CS1001: Identifier expected

    /tmp/tmphw28v9l8.cs(102,13): error CS1002: ; expected

    '
  timestamp: 1659977111
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of non-negative integers, return a copy of the
    given array after sorting,\n    // you will sort the given array in ascending
    order if the sum( first index value, last index value) is odd,\n    // or sort
    it in descending order if the sum( first index value, last index value) is even.\n
    \   // Note:\n    // * don't change the given array.\n    // Examples:\n    public
    static List<long> SortArray(List<long> array) {\n        long sum = 0;\n        long
    first = 0;\n        long last = 0;\n        List<long> result = new List<long>();\n
    \       foreach (long i in array) {\n            sum += i;\n            if (sum
    % 2 == 0) {\n                first = i;\n            } else {\n                last
    = i;\n            }\n            result.Add(i);\n        }\n        Array.Sort(result);\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(SortArray((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpgmjahh3d.cs(29,20): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''System.Array''

    '
  timestamp: 1659977111
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of non-negative integers, return a copy of the
    given array after sorting,\n    // you will sort the given array in ascending
    order if the sum( first index value, last index value) is odd,\n    // or sort
    it in descending order if the sum( first index value, last index value) is even.\n
    \   // Note:\n    // * don't change the given array.\n    // Examples:\n    public
    static List<long> SortArray(List<long> array) {\n        long sum = 0;\n        long
    sum2 = 0;\n        long sum3 = 0;\n        long sum4 = 0;\n        long sum5 =
    0;\n        long sum6 = 0;\n        long sum7 = 0;\n        long sum8 = 0;\n        long
    sum9 = 0;\n        long sum10 = 0;\n        long sum11 = 0;\n        long sum12
    = 0;\n        long sum13 = 0;\n        long sum14 = 0;\n        long sum15 = 0;\n
    \       long sum16 = 0;\n        long sum17 = 0;\n        long sum18 = 0;\n        long
    sum19 = 0;\n        long sum20 = 0;\n        long sum21 = 0;\n        long sum22
    = 0;\n        long sum23 = 0;\n        long sum24 = 0;\n        long sum25 = 0;\n
    \       long sum26 = 0;\n        long sum27 = 0;\n        long sum28 = 0;\n        long
    sum29 = 0;\n        long sum30 = 0;\n        long sum31 = 0;\n        long sum32
    = 0;\n        long sum33 = 0;\n        long sum34 = 0;\n        long sum35 = 0;\n
    \       long sum36 = 0;\n        long sum37 = 0;\n        long sum38 = 0;\n        long
    sum39 = 0;\n        long sum40 = 0;\n        long sum41 = 0;\n        long sum42
    = 0;\n        long sum43 = 0;\n        long sum44 = 0;\n        long sum45 = 0;\n
    \       long sum46 = 0;\n        long sum47 = 0;\n        long sum48 = 0;\n        long
    sum49 = 0;\n        long sum50 = 0;\n        long sum51 = 0;\n        long sum52
    = 0;\n        long sum53 = 0;\n        long sum54 = 0;\n        long sum55 = 0;\n
    \       long sum56 = 0;\n        long sum57 = 0;\n        long sum58 = 0;\n        long
    sum59 = 0;\n        long sum60 = 0;\n        long sum61 = 0;\n        long sum62
    = 0;\n        long sum63 = 0;\n        long sum64 = 0;\n        long sum65 = 0;\n
    \       long sum66 = 0;\n        long sum67 = 0;\n        long sum68 = 0;\n        long
    sum69 = 0;\n        long sum70 = 0;\n        long sum71 = 0;\n        long sum72
    = 0;\n        long sum73 = 0;\n        long sum74 = 0;\n        long sum75 = 0;\n
    \       long sum76 = 0;\n        long sum77 = 0;\n        long sum78 = 0;\n        long
    sum79 = 0;\n        long sum80 = 0;\n        long sum81 = 0;\n        long sum82
    = 0;\n        long sum83 = 0;\n        long sum84 = 0;\n        long sum85 = 0;\n
    \       long sum86 = 0;\n        \n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(SortArray((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpmchrwcpg.cs(16,14): warning CS0219: The variable ''sum'' is assigned but
    its value is never used

    /tmp/tmpmchrwcpg.cs(17,14): warning CS0219: The variable ''sum2'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(18,14): warning CS0219: The variable ''sum3'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(19,14): warning CS0219: The variable ''sum4'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(20,14): warning CS0219: The variable ''sum5'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(21,14): warning CS0219: The variable ''sum6'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(22,14): warning CS0219: The variable ''sum7'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(23,14): warning CS0219: The variable ''sum8'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(24,14): warning CS0219: The variable ''sum9'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(25,14): warning CS0219: The variable ''sum10'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(26,14): warning CS0219: The variable ''sum11'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(27,14): warning CS0219: The variable ''sum12'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(28,14): warning CS0219: The variable ''sum13'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(29,14): warning CS0219: The variable ''sum14'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(30,14): warning CS0219: The variable ''sum15'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(31,14): warning CS0219: The variable ''sum16'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(32,14): warning CS0219: The variable ''sum17'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(33,14): warning CS0219: The variable ''sum18'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(34,14): warning CS021'
  timestamp: 1659977110
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of non-negative integers, return a copy of the
    given array after sorting,\n    // you will sort the given array in ascending
    order if the sum( first index value, last index value) is odd,\n    // or sort
    it in descending order if the sum( first index value, last index value) is even.\n
    \   // Note:\n    // * don't change the given array.\n    // Examples:\n    public
    static List<long> SortArray(List<long> array) {\n        long sum = 0;\n        long
    maxSum = 0;\n        long minSum = array.First();\n        foreach (long i in
    array) {\n            sum += i;\n            if (sum > maxSum) {\n                maxSum
    = sum;\n            }\n            if (sum < minSum) {\n                minSum
    = sum;\n            }\n        }\n        List<long> result = new List<long>();\n
    \       foreach (long i in array) {\n            if (sum % 2 == 0) {\n                result.Add(i);\n
    \           }\n            else {\n                result.Add(-i);\n            }\n
    \           sum -= i;\n        }\n        long sum2 = 0;\n        foreach (long
    i in result) {\n            sum2 += i;\n        }\n        if (sum2 > maxSum)
    {\n            foreach (long i in result) {\n                result.Add(-i);\n
    \           }\n        }\n        if (sum2 < minSum) {\n            foreach (long
    i in result) {\n                result.Add(i);\n            }\n        }\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortArray((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)5L}))).Equals((new List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.InvalidOperationException: Sequence contains
    no elements\n  at System.Linq.Enumerable.First[TSource] (System.Collections.Generic.IEnumerable`1[T]
    source) [0x00010] in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem.SortArray
    (System.Collections.Generic.List`1[T] array) [0x00007] in <270f573c834f4c57b448b8e1bb681a9d>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <270f573c834f4c57b448b8e1bb681a9d>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.InvalidOperationException: Sequence
    contains no elements\n  at System.Linq.Enumerable.First[TSource] (System.Collections.Generic.IEnumerable`1[T]
    source) [0x00010] in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem.SortArray
    (System.Collections.Generic.List`1[T] array) [0x00007] in <270f573c834f4c57b448b8e1bb681a9d>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <270f573c834f4c57b448b8e1bb681a9d>:0
    \n"
  stdout: ''
  timestamp: 1659977111
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of non-negative integers, return a copy of the
    given array after sorting,\n    // you will sort the given array in ascending
    order if the sum( first index value, last index value) is odd,\n    // or sort
    it in descending order if the sum( first index value, last index value) is even.\n
    \   // Note:\n    // * don't change the given array.\n    // Examples:\n    public
    static List<long> SortArray(List<long> array) {\n        long sum = 0;\n        long
    lastSum = 0;\n        long firstSum = 0;\n        long lastSum = 0;\n        long
    firstSum = 0;\n        long lastSum = 0;\n        long firstSum = 0;\n        long
    lastSum = 0;\n        long firstSum = 0;\n        long lastSum = 0;\n        long
    firstSum = 0;\n        long lastSum = 0;\n        long firstSum = 0;\n        long
    lastSum = 0;\n        long firstSum = 0;\n        long lastSum = 0;\n        long
    firstSum = 0;\n        long lastSum = 0;\n        long firstSum = 0;\n        long
    lastSum = 0;\n        long firstSum = 0;\n        long lastSum = 0;\n        long
    firstSum = 0;\n        long lastSum = 0;\n        long firstSum = 0;\n        long
    lastSum = 0;\n        long firstSum = 0;\n        long lastSum = 0;\n        long
    firstSum = 0;\n        long lastSum = 0;\n        long firstSum = 0;\n        long
    lastSum = 0;\n        long firstSum = 0;\n        long lastSum = 0;\n        long
    firstSum = 0;\n        long lastSum = 0;\n        long firstSum = 0;\n        long
    lastSum = 0;\n        long firstSum = 0;\n        long lastSum = 0;\n        long
    firstSum = 0;\n        long lastSum = 0;\n        long firstSum = 0;\n        long
    lastSum = 0;\n        long firstSum = 0;\n        long lastSum = 0;\n        long
    firstSum = 0;\n        long lastSum = 0;\n        long firstSum = 0;\n        long
    lastSum = 0;\n        long firstSum = 0;\n        long lastSum = 0;\n        long
    firstSum = 0;\n        long lastSum = 0;\n        long firstSum = 0;\n        long
    lastSum = 0;\n        long firstSum = 0;\n        long lastSum = 0;\n        long
    firstSum = 0;\n        long lastSum = 0;\n        long firstSum = 0;\n        long
    lastSum = 0;\n        long firstSum = 0;\n        long lastSum = 0;\n        long
    firstSum = 0;\n        long lastSum = 0;\n        long firstSum = 0;\n        long
    lastSum = 0;\n        long firstSum = 0;\n        long lastSum = 0;\n        long
    firstSum = 0;\n        long lastSum = 0;\n        long firstSum = 0;\n        long
    lastSum = 0;\n        long firstSum = 0;\n        long lastSum = 0;\n        long
    firstSum = 0;\n        long lastSum = 0;\n        long firstSum = 0;\n        long
    lastSum = 0;\n        long firstSum = 0;\n        long lastSum = 0;\n        long
    firstSum = 0;\n        long lastSum = 0;\n        long firstSum = 0;\n        long
    last\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortArray((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)5L}))).Equals((new List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpu6xfuuys.cs(101,18): error CS1002: ; expected

    '
  timestamp: 1659977109
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of non-negative integers, return a copy of the
    given array after sorting,\n    // you will sort the given array in ascending
    order if the sum( first index value, last index value) is odd,\n    // or sort
    it in descending order if the sum( first index value, last index value) is even.\n
    \   // Note:\n    // * don't change the given array.\n    // Examples:\n    public
    static List<long> SortArray(List<long> array) {\n        long sum = 0;\n        long
    sum2 = 0;\n        long sum3 = 0;\n        long sum4 = 0;\n        long sum5 =
    0;\n        long sum6 = 0;\n        long sum7 = 0;\n        long sum8 = 0;\n        long
    sum9 = 0;\n        long sum10 = 0;\n        long sum11 = 0;\n        long sum12
    = 0;\n        long sum13 = 0;\n        long sum14 = 0;\n        long sum15 = 0;\n
    \       long sum16 = 0;\n        long sum17 = 0;\n        long sum18 = 0;\n        long
    sum19 = 0;\n        long sum20 = 0;\n        long sum21 = 0;\n        long sum22
    = 0;\n        long sum23 = 0;\n        long sum24 = 0;\n        long sum25 = 0;\n
    \       long sum26 = 0;\n        long sum27 = 0;\n        long sum28 = 0;\n        long
    sum29 = 0;\n        long sum30 = 0;\n        long sum31 = 0;\n        long sum32
    = 0;\n        long sum33 = 0;\n        long sum34 = 0;\n        long sum35 = 0;\n
    \       long sum36 = 0;\n        long sum37 = 0;\n        long sum38 = 0;\n        long
    sum39 = 0;\n        long sum40 = 0;\n        long sum41 = 0;\n        long sum42
    = 0;\n        long sum43 = 0;\n        long sum44 = 0;\n        long sum45 = 0;\n
    \       long sum46 = 0;\n        long sum47 = 0;\n        long sum48 = 0;\n        long
    sum49 = 0;\n        long sum50 = 0;\n        long sum51 = 0;\n        long sum52
    = 0;\n        long sum53 = 0;\n        long sum54 = 0;\n        long sum55 = 0;\n
    \       long sum56 = 0;\n        long sum57 = 0;\n        long sum58 = 0;\n        long
    sum59 = 0;\n        long sum60 = 0;\n        long sum61 = 0;\n        long sum62
    = 0;\n        long sum63 = 0;\n        long sum64 = 0;\n        long sum65 = 0;\n
    \       long sum66 = 0;\n        long sum67 = 0;\n        long sum68 = 0;\n        long
    sum69 = 0;\n        long sum70 = 0;\n        long sum71 = 0;\n        long sum72
    = 0;\n        long sum73 = 0;\n        long sum74 = 0;\n        long sum75 = 0;\n
    \       long sum76 = 0;\n        long sum77 = 0;\n        long sum78 = 0;\n        long
    sum79 = 0;\n        long sum80 = 0;\n        long sum81 = 0;\n        long sum82
    = 0;\n        long sum83 = 0;\n        long sum84 = 0;\n        long sum85 = 0;\n
    \       long sum86 = 0;\n        \n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(SortArray((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpmchrwcpg.cs(16,14): warning CS0219: The variable ''sum'' is assigned but
    its value is never used

    /tmp/tmpmchrwcpg.cs(17,14): warning CS0219: The variable ''sum2'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(18,14): warning CS0219: The variable ''sum3'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(19,14): warning CS0219: The variable ''sum4'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(20,14): warning CS0219: The variable ''sum5'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(21,14): warning CS0219: The variable ''sum6'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(22,14): warning CS0219: The variable ''sum7'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(23,14): warning CS0219: The variable ''sum8'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(24,14): warning CS0219: The variable ''sum9'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(25,14): warning CS0219: The variable ''sum10'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(26,14): warning CS0219: The variable ''sum11'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(27,14): warning CS0219: The variable ''sum12'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(28,14): warning CS0219: The variable ''sum13'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(29,14): warning CS0219: The variable ''sum14'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(30,14): warning CS0219: The variable ''sum15'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(31,14): warning CS0219: The variable ''sum16'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(32,14): warning CS0219: The variable ''sum17'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(33,14): warning CS0219: The variable ''sum18'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(34,14): warning CS021'
  timestamp: 1659977110
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of non-negative integers, return a copy of the
    given array after sorting,\n    // you will sort the given array in ascending
    order if the sum( first index value, last index value) is odd,\n    // or sort
    it in descending order if the sum( first index value, last index value) is even.\n
    \   // Note:\n    // * don't change the given array.\n    // Examples:\n    public
    static List<long> SortArray(List<long> array) {\n        long sum = 0;\n        long
    temp = 0;\n        List<long> result = new List<long>();\n        foreach (long
    i in array) {\n            sum += i;\n            if (sum % 2 == 0) {\n                temp
    = sum;\n                sum = i;\n            }\n            result.Add(temp);\n
    \       }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(SortArray((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d0a558cfd5a14054a469ee410d34bf4b>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d0a558cfd5a14054a469ee410d34bf4b>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977112
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of non-negative integers, return a copy of the
    given array after sorting,\n    // you will sort the given array in ascending
    order if the sum( first index value, last index value) is odd,\n    // or sort
    it in descending order if the sum( first index value, last index value) is even.\n
    \   // Note:\n    // * don't change the given array.\n    // Examples:\n    public
    static List<long> SortArray(List<long> array) {\n        long sum = 0;\n        long
    temp = 0;\n        List<long> result = new List<long>();\n        foreach (long
    i in array) {\n            sum += i;\n        }\n        if (sum % 2 == 0) {\n
    \           temp = sum / 2;\n            foreach (long i in array) {\n                if
    (i < temp) {\n                    result.Add(i);\n                }\n            }\n
    \       } else {\n            temp = sum / 2;\n            foreach (long i in
    array) {\n                if (i > temp) {\n                    result.Add(i);\n
    \               }\n            }\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(SortArray((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <8a11359e31ab44779501413b95e4613b>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <8a11359e31ab44779501413b95e4613b>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977112
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of non-negative integers, return a copy of the
    given array after sorting,\n    // you will sort the given array in ascending
    order if the sum( first index value, last index value) is odd,\n    // or sort
    it in descending order if the sum( first index value, last index value) is even.\n
    \   // Note:\n    // * don't change the given array.\n    // Examples:\n    public
    static List<long> SortArray(List<long> array) {\n        List<long> result = new
    List<long>();\n        long sum = 0;\n        long temp;\n        for (int i =
    0; i < array.Count; i++) {\n            sum = sum + array[i];\n            if
    (sum % 2 == 0) {\n                temp = array[i];\n                array[i] =
    array[array.Count - 1];\n                array[array.Count - 1] = temp;\n            }\n
    \           result.Add(array[i]);\n        }\n        return result;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(SortArray((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)5L}))).Equals((new List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <e5518f6742f346f08a23e76bff664f8e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <e5518f6742f346f08a23e76bff664f8e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977112
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of non-negative integers, return a copy of the
    given array after sorting,\n    // you will sort the given array in ascending
    order if the sum( first index value, last index value) is odd,\n    // or sort
    it in descending order if the sum( first index value, last index value) is even.\n
    \   // Note:\n    // * don't change the given array.\n    // Examples:\n    public
    static List<long> SortArray(List<long> array) {\n        long sum = 0;\n        long
    temp = 0;\n        long temp2 = 0;\n        List<long> result = new List<long>();\n
    \       foreach (long i in array) {\n            sum += i;\n        }\n        if
    (sum % 2 == 0) {\n            temp = sum / 2;\n            foreach (long i in
    array) {\n                temp += i;\n            }\n            foreach (long
    i in array) {\n                if (temp < temp2) {\n                    result.Add(i);\n
    \               }\n                temp2 += i;\n            }\n        } else
    {\n            temp = sum / 2;\n            foreach (long i in array) {\n                temp
    += i;\n            }\n            foreach (long i in array) {\n                if
    (temp > temp2) {\n                    result.Add(i);\n                }\n                temp2
    += i;\n            }\n        }\n        return result;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(SortArray((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <3cdaa6a0602e443db74949646fb40d9a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <3cdaa6a0602e443db74949646fb40d9a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977112
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of non-negative integers, return a copy of the
    given array after sorting,\n    // you will sort the given array in ascending
    order if the sum( first index value, last index value) is odd,\n    // or sort
    it in descending order if the sum( first index value, last index value) is even.\n
    \   // Note:\n    // * don't change the given array.\n    // Examples:\n    public
    static List<long> SortArray(List<long> array) {\n        List<long> result = new
    List<long>();\n        long sum = 0;\n        long temp;\n        long firstIndex
    = 0;\n        long lastIndex = 0;\n        foreach (long i in array) {\n            sum
    += i;\n            if (sum % 2 == 0) {\n                result.Add(i);\n                firstIndex
    = i;\n            }\n            if (sum % 2 != 0) {\n                result.Add(i);\n
    \               lastIndex = i;\n            }\n        }\n        temp = firstIndex;\n
    \       firstIndex = lastIndex;\n        lastIndex = temp;\n        temp = firstIndex;\n
    \       firstIndex = lastIndex;\n        lastIndex = temp;\n        temp = firstIndex;\n
    \       firstIndex = lastIndex;\n        lastIndex = temp;\n        temp = firstIndex;\n
    \       firstIndex = lastIndex;\n        lastIndex = temp;\n        temp = firstIndex;\n
    \       firstIndex = lastIndex;\n        lastIndex = temp;\n        temp = firstIndex;\n
    \       firstIndex = lastIndex;\n        lastIndex = temp;\n        temp = firstIndex;\n
    \       firstIndex = lastIndex;\n        lastIndex = temp;\n        temp = firstIndex;\n
    \       firstIndex = lastIndex;\n        lastIndex = temp;\n        temp = firstIndex;\n
    \       firstIndex = lastIndex;\n        lastIndex = temp;\n        temp = firstIndex;\n
    \       firstIndex = lastIndex;\n        lastIndex = temp;\n        temp = firstIndex;\n
    \       firstIndex = lastIndex;\n        lastIndex = temp;\n        temp = firstIndex;\n
    \       firstIndex = lastIndex;\n        lastIndex = temp;\n        temp = firstIndex;\n
    \       firstIndex = lastIndex;\n        lastIndex = temp;\n        temp = firstIndex;\n
    \       firstIndex = lastIndex;\n        lastIndex = temp;\n        temp = firstIndex;\n
    \       firstIndex = lastIndex;\n        lastIndex = temp;\n        temp = firstIndex;\n
    \       firstIndex = lastIndex;\n        lastIndex = temp;\n        temp = firstIndex;\n
    \       firstIndex = lastIndex;\n        lastIndex = temp;\n        temp = firstIndex;\n
    \       firstIndex = lastIndex;\n        lastIndex = temp;\n        temp = firstIndex;\n
    \       firstIndex = lastIndex;\n        lastIndex = temp;\n        temp = firstIndex;\n
    \       firstIndex = lastIndex;\n        lastIndex = temp;\n        temp = firstIndex;\n
    \       firstIndex = lastIndex;\n        lastIndex = temp;\n        temp = firstIndex;\n
    \       firstIndex = lastIndex;\n        lastIndex = temp;\n        temp = firstIndex;\n
    \       firstIndex = lastIndex;\n        lastIndex = temp;\n        temp = firstIndex;\n
    \       firstIndex = lastIndex;\n        lastIndex = temp;\n        temp = firstIndex;\n
    \       firstIndex = lastIndex;\n        lastIndex = temp;\n        temp = firstIndex;\n
    \       firstIndex = lastIndex;\n        lastIndex = temp;\n        temp = firstIndex;\n
    \       firstIndex = lastIndex;\n        lastIndex = temp;\n\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(SortArray((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpx0r1mcu8.cs(15,30): error CS0161: ''Problem.SortArray(List<long>)'': not
    all code paths return a value

    '
  timestamp: 1659977112
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of non-negative integers, return a copy of the
    given array after sorting,\n    // you will sort the given array in ascending
    order if the sum( first index value, last index value) is odd,\n    // or sort
    it in descending order if the sum( first index value, last index value) is even.\n
    \   // Note:\n    // * don't change the given array.\n    // Examples:\n    public
    static List<long> SortArray(List<long> array) {\n        long sum = 0;\n        long
    sum2 = 0;\n        long sum3 = 0;\n        long sum4 = 0;\n        long sum5 =
    0;\n        long sum6 = 0;\n        long sum7 = 0;\n        long sum8 = 0;\n        long
    sum9 = 0;\n        long sum10 = 0;\n        long sum11 = 0;\n        long sum12
    = 0;\n        long sum13 = 0;\n        long sum14 = 0;\n        long sum15 = 0;\n
    \       long sum16 = 0;\n        long sum17 = 0;\n        long sum18 = 0;\n        long
    sum19 = 0;\n        long sum20 = 0;\n        long sum21 = 0;\n        long sum22
    = 0;\n        long sum23 = 0;\n        long sum24 = 0;\n        long sum25 = 0;\n
    \       long sum26 = 0;\n        long sum27 = 0;\n        long sum28 = 0;\n        long
    sum29 = 0;\n        long sum30 = 0;\n        long sum31 = 0;\n        long sum32
    = 0;\n        long sum33 = 0;\n        long sum34 = 0;\n        long sum35 = 0;\n
    \       long sum36 = 0;\n        long sum37 = 0;\n        long sum38 = 0;\n        long
    sum39 = 0;\n        long sum40 = 0;\n        long sum41 = 0;\n        long sum42
    = 0;\n        long sum43 = 0;\n        long sum44 = 0;\n        long sum45 = 0;\n
    \       long sum46 = 0;\n        long sum47 = 0;\n        long sum48 = 0;\n        long
    sum49 = 0;\n        long sum50 = 0;\n        long sum51 = 0;\n        long sum52
    = 0;\n        long sum53 = 0;\n        long sum54 = 0;\n        long sum55 = 0;\n
    \       long sum56 = 0;\n        long sum57 = 0;\n        long sum58 = 0;\n        long
    sum59 = 0;\n        long sum60 = 0;\n        long sum61 = 0;\n        long sum62
    = 0;\n        long sum63 = 0;\n        long sum64 = 0;\n        long sum65 = 0;\n
    \       long sum66 = 0;\n        long sum67 = 0;\n        long sum68 = 0;\n        long
    sum69 = 0;\n        long sum70 = 0;\n        long sum71 = 0;\n        long sum72
    = 0;\n        long sum73 = 0;\n        long sum74 = 0;\n        long sum75 = 0;\n
    \       long sum76 = 0;\n        long sum77 = 0;\n        long sum78 = 0;\n        long
    sum79 = 0;\n        long sum80 = 0;\n        long sum81 = 0;\n        long sum82
    = 0;\n        long sum83 = 0;\n        long sum84 = 0;\n        long sum85 = 0;\n
    \       long sum86 = 0;\n        \n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(SortArray((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpmchrwcpg.cs(16,14): warning CS0219: The variable ''sum'' is assigned but
    its value is never used

    /tmp/tmpmchrwcpg.cs(17,14): warning CS0219: The variable ''sum2'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(18,14): warning CS0219: The variable ''sum3'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(19,14): warning CS0219: The variable ''sum4'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(20,14): warning CS0219: The variable ''sum5'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(21,14): warning CS0219: The variable ''sum6'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(22,14): warning CS0219: The variable ''sum7'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(23,14): warning CS0219: The variable ''sum8'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(24,14): warning CS0219: The variable ''sum9'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(25,14): warning CS0219: The variable ''sum10'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(26,14): warning CS0219: The variable ''sum11'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(27,14): warning CS0219: The variable ''sum12'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(28,14): warning CS0219: The variable ''sum13'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(29,14): warning CS0219: The variable ''sum14'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(30,14): warning CS0219: The variable ''sum15'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(31,14): warning CS0219: The variable ''sum16'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(32,14): warning CS0219: The variable ''sum17'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(33,14): warning CS0219: The variable ''sum18'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(34,14): warning CS021'
  timestamp: 1659977110
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of non-negative integers, return a copy of the
    given array after sorting,\n    // you will sort the given array in ascending
    order if the sum( first index value, last index value) is odd,\n    // or sort
    it in descending order if the sum( first index value, last index value) is even.\n
    \   // Note:\n    // * don't change the given array.\n    // Examples:\n    public
    static List<long> SortArray(List<long> array) {\n        List<long> result = new
    List<long>();\n        long sum = 0;\n        foreach (long i in array) {\n            sum
    += i;\n            result.Add(sum);\n        }\n        Array.Sort(result);\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(SortArray((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp3f3cq6pa.cs(22,20): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''System.Array''

    '
  timestamp: 1659977112
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of non-negative integers, return a copy of the
    given array after sorting,\n    // you will sort the given array in ascending
    order if the sum( first index value, last index value) is odd,\n    // or sort
    it in descending order if the sum( first index value, last index value) is even.\n
    \   // Note:\n    // * don't change the given array.\n    // Examples:\n    public
    static List<long> SortArray(List<long> array) {\n        long sum = 0;\n        long
    temp = 0;\n        List<long> result = new List<long>();\n        foreach (long
    i in array) {\n            sum += i;\n            if (sum % 2 == 0) {\n                temp
    = sum;\n            } else {\n                temp = sum - 1;\n            }\n
    \           result.Add(temp);\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(SortArray((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c117842bc8d3401c8673a7a9756613e9>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c117842bc8d3401c8673a7a9756613e9>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977110
- exit_code: -1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of non-negative integers, return a copy of the
    given array after sorting,\n    // you will sort the given array in ascending
    order if the sum( first index value, last index value) is odd,\n    // or sort
    it in descending order if the sum( first index value, last index value) is even.\n
    \   // Note:\n    // * don't change the given array.\n    // Examples:\n    public
    static List<long> SortArray(List<long> array) {\n        long sum = 0;\n        long
    temp = 0;\n        List<long> result = new List<long>();\n        foreach (long
    i in array) {\n            sum += i;\n        }\n        if (sum % 2 == 0) {\n
    \           temp = sum;\n            sum = sum / 2;\n            while (temp !=
    sum) {\n                result.Add(temp);\n                temp = temp / 2;\n
    \           }\n        } else {\n            temp = sum;\n            sum = sum
    / 2;\n            while (temp != sum) {\n                result.Add(temp);\n                temp
    = temp * 2;\n            }\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(SortArray((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: Timeout
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <9e7ca24e63b74c4bb94e1f5aa40ecb34>:0
    \n"
  stdout: None
  timestamp: 1659977117
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of non-negative integers, return a copy of the
    given array after sorting,\n    // you will sort the given array in ascending
    order if the sum( first index value, last index value) is odd,\n    // or sort
    it in descending order if the sum( first index value, last index value) is even.\n
    \   // Note:\n    // * don't change the given array.\n    // Examples:\n    public
    static List<long> SortArray(List<long> array) {\n        long sum = 0;\n        long
    sum2 = 0;\n        long sum3 = 0;\n        long sum4 = 0;\n        long sum5 =
    0;\n        long sum6 = 0;\n        long sum7 = 0;\n        long sum8 = 0;\n        long
    sum9 = 0;\n        long sum10 = 0;\n        long sum11 = 0;\n        long sum12
    = 0;\n        long sum13 = 0;\n        long sum14 = 0;\n        long sum15 = 0;\n
    \       long sum16 = 0;\n        long sum17 = 0;\n        long sum18 = 0;\n        long
    sum19 = 0;\n        long sum20 = 0;\n        long sum21 = 0;\n        long sum22
    = 0;\n        long sum23 = 0;\n        long sum24 = 0;\n        long sum25 = 0;\n
    \       long sum26 = 0;\n        long sum27 = 0;\n        long sum28 = 0;\n        long
    sum29 = 0;\n        long sum30 = 0;\n        long sum31 = 0;\n        long sum32
    = 0;\n        long sum33 = 0;\n        long sum34 = 0;\n        long sum35 = 0;\n
    \       long sum36 = 0;\n        long sum37 = 0;\n        long sum38 = 0;\n        long
    sum39 = 0;\n        long sum40 = 0;\n        long sum41 = 0;\n        long sum42
    = 0;\n        long sum43 = 0;\n        long sum44 = 0;\n        long sum45 = 0;\n
    \       long sum46 = 0;\n        long sum47 = 0;\n        long sum48 = 0;\n        long
    sum49 = 0;\n        long sum50 = 0;\n        long sum51 = 0;\n        long sum52
    = 0;\n        long sum53 = 0;\n        long sum54 = 0;\n        long sum55 = 0;\n
    \       long sum56 = 0;\n        long sum57 = 0;\n        long sum58 = 0;\n        long
    sum59 = 0;\n        long sum60 = 0;\n        long sum61 = 0;\n        long sum62
    = 0;\n        long sum63 = 0;\n        long sum64 = 0;\n        long sum65 = 0;\n
    \       long sum66 = 0;\n        long sum67 = 0;\n        long sum68 = 0;\n        long
    sum69 = 0;\n        long sum70 = 0;\n        long sum71 = 0;\n        long sum72
    = 0;\n        long sum73 = 0;\n        long sum74 = 0;\n        long sum75 = 0;\n
    \       long sum76 = 0;\n        long sum77 = 0;\n        long sum78 = 0;\n        long
    sum79 = 0;\n        long sum80 = 0;\n        long sum81 = 0;\n        long sum82
    = 0;\n        long sum83 = 0;\n        long sum84 = 0;\n        long sum85 = 0;\n
    \       long sum86 = 0;\n        \n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(SortArray((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpmchrwcpg.cs(16,14): warning CS0219: The variable ''sum'' is assigned but
    its value is never used

    /tmp/tmpmchrwcpg.cs(17,14): warning CS0219: The variable ''sum2'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(18,14): warning CS0219: The variable ''sum3'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(19,14): warning CS0219: The variable ''sum4'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(20,14): warning CS0219: The variable ''sum5'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(21,14): warning CS0219: The variable ''sum6'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(22,14): warning CS0219: The variable ''sum7'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(23,14): warning CS0219: The variable ''sum8'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(24,14): warning CS0219: The variable ''sum9'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(25,14): warning CS0219: The variable ''sum10'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(26,14): warning CS0219: The variable ''sum11'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(27,14): warning CS0219: The variable ''sum12'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(28,14): warning CS0219: The variable ''sum13'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(29,14): warning CS0219: The variable ''sum14'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(30,14): warning CS0219: The variable ''sum15'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(31,14): warning CS0219: The variable ''sum16'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(32,14): warning CS0219: The variable ''sum17'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(33,14): warning CS0219: The variable ''sum18'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(34,14): warning CS021'
  timestamp: 1659977110
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of non-negative integers, return a copy of the
    given array after sorting,\n    // you will sort the given array in ascending
    order if the sum( first index value, last index value) is odd,\n    // or sort
    it in descending order if the sum( first index value, last index value) is even.\n
    \   // Note:\n    // * don't change the given array.\n    // Examples:\n    public
    static List<long> SortArray(List<long> array) {\n        long sum = 0;\n        long
    sum2 = 0;\n        long sum3 = 0;\n        long sum4 = 0;\n        long sum5 =
    0;\n        long sum6 = 0;\n        long sum7 = 0;\n        long sum8 = 0;\n        long
    sum9 = 0;\n        long sum10 = 0;\n        long sum11 = 0;\n        long sum12
    = 0;\n        long sum13 = 0;\n        long sum14 = 0;\n        long sum15 = 0;\n
    \       long sum16 = 0;\n        long sum17 = 0;\n        long sum18 = 0;\n        long
    sum19 = 0;\n        long sum20 = 0;\n        long sum21 = 0;\n        long sum22
    = 0;\n        long sum23 = 0;\n        long sum24 = 0;\n        long sum25 = 0;\n
    \       long sum26 = 0;\n        long sum27 = 0;\n        long sum28 = 0;\n        long
    sum29 = 0;\n        long sum30 = 0;\n        long sum31 = 0;\n        long sum32
    = 0;\n        long sum33 = 0;\n        long sum34 = 0;\n        long sum35 = 0;\n
    \       long sum36 = 0;\n        long sum37 = 0;\n        long sum38 = 0;\n        long
    sum39 = 0;\n        long sum40 = 0;\n        long sum41 = 0;\n        long sum42
    = 0;\n        long sum43 = 0;\n        long sum44 = 0;\n        long sum45 = 0;\n
    \       long sum46 = 0;\n        long sum47 = 0;\n        long sum48 = 0;\n        long
    sum49 = 0;\n        long sum50 = 0;\n        long sum51 = 0;\n        long sum52
    = 0;\n        long sum53 = 0;\n        long sum54 = 0;\n        long sum55 = 0;\n
    \       long sum56 = 0;\n        long sum57 = 0;\n        long sum58 = 0;\n        long
    sum59 = 0;\n        long sum60 = 0;\n        long sum61 = 0;\n        long sum62
    = 0;\n        long sum63 = 0;\n        long sum64 = 0;\n        long sum65 = 0;\n
    \       long sum66 = 0;\n        long sum67 = 0;\n        long sum68 = 0;\n        long
    sum69 = 0;\n        long sum70 = 0;\n        long sum71 = 0;\n        long sum72
    = 0;\n        long sum73 = 0;\n        long sum74 = 0;\n        long sum75 = 0;\n
    \       long sum76 = 0;\n        long sum77 = 0;\n        long sum78 = 0;\n        long
    sum79 = 0;\n        long sum80 = 0;\n        long sum81 = 0;\n        long sum82
    = 0;\n        long sum83 = 0;\n        long sum84 = 0;\n        long sum85 = 0;\n
    \       long sum86 = 0;\n        \n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(SortArray((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpmchrwcpg.cs(16,14): warning CS0219: The variable ''sum'' is assigned but
    its value is never used

    /tmp/tmpmchrwcpg.cs(17,14): warning CS0219: The variable ''sum2'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(18,14): warning CS0219: The variable ''sum3'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(19,14): warning CS0219: The variable ''sum4'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(20,14): warning CS0219: The variable ''sum5'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(21,14): warning CS0219: The variable ''sum6'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(22,14): warning CS0219: The variable ''sum7'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(23,14): warning CS0219: The variable ''sum8'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(24,14): warning CS0219: The variable ''sum9'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(25,14): warning CS0219: The variable ''sum10'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(26,14): warning CS0219: The variable ''sum11'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(27,14): warning CS0219: The variable ''sum12'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(28,14): warning CS0219: The variable ''sum13'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(29,14): warning CS0219: The variable ''sum14'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(30,14): warning CS0219: The variable ''sum15'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(31,14): warning CS0219: The variable ''sum16'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(32,14): warning CS0219: The variable ''sum17'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(33,14): warning CS0219: The variable ''sum18'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(34,14): warning CS021'
  timestamp: 1659977110
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of non-negative integers, return a copy of the
    given array after sorting,\n    // you will sort the given array in ascending
    order if the sum( first index value, last index value) is odd,\n    // or sort
    it in descending order if the sum( first index value, last index value) is even.\n
    \   // Note:\n    // * don't change the given array.\n    // Examples:\n    public
    static List<long> SortArray(List<long> array) {\n        long sum = 0;\n        long
    last = 0;\n        long first = 0;\n        List<long> result = new List<long>();\n
    \       foreach (long i in array) {\n            sum += i;\n            if (sum
    % 2 == 0) {\n                last = i;\n            } else {\n                first
    = i;\n            }\n            result.Add(first);\n            result.Add(last);\n
    \       }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(SortArray((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <8af8386e0bd944e29a34e6edd47d07a3>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <8af8386e0bd944e29a34e6edd47d07a3>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977112
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of non-negative integers, return a copy of the
    given array after sorting,\n    // you will sort the given array in ascending
    order if the sum( first index value, last index value) is odd,\n    // or sort
    it in descending order if the sum( first index value, last index value) is even.\n
    \   // Note:\n    // * don't change the given array.\n    // Examples:\n    public
    static List<long> SortArray(List<long> array) {\n        long sum = 0;\n        long
    sum2 = 0;\n        long sum3 = 0;\n        long sum4 = 0;\n        long sum5 =
    0;\n        long sum6 = 0;\n        long sum7 = 0;\n        long sum8 = 0;\n        long
    sum9 = 0;\n        long sum10 = 0;\n        long sum11 = 0;\n        long sum12
    = 0;\n        long sum13 = 0;\n        long sum14 = 0;\n        long sum15 = 0;\n
    \       long sum16 = 0;\n        long sum17 = 0;\n        long sum18 = 0;\n        long
    sum19 = 0;\n        long sum20 = 0;\n        long sum21 = 0;\n        long sum22
    = 0;\n        long sum23 = 0;\n        long sum24 = 0;\n        long sum25 = 0;\n
    \       long sum26 = 0;\n        long sum27 = 0;\n        long sum28 = 0;\n        long
    sum29 = 0;\n        long sum30 = 0;\n        long sum31 = 0;\n        long sum32
    = 0;\n        long sum33 = 0;\n        long sum34 = 0;\n        long sum35 = 0;\n
    \       long sum36 = 0;\n        long sum37 = 0;\n        long sum38 = 0;\n        long
    sum39 = 0;\n        long sum40 = 0;\n        long sum41 = 0;\n        long sum42
    = 0;\n        long sum43 = 0;\n        long sum44 = 0;\n        long sum45 = 0;\n
    \       long sum46 = 0;\n        long sum47 = 0;\n        long sum48 = 0;\n        long
    sum49 = 0;\n        long sum50 = 0;\n        long sum51 = 0;\n        long sum52
    = 0;\n        long sum53 = 0;\n        long sum54 = 0;\n        long sum55 = 0;\n
    \       long sum56 = 0;\n        long sum57 = 0;\n        long sum58 = 0;\n        long
    sum59 = 0;\n        long sum60 = 0;\n        long sum61 = 0;\n        long sum62
    = 0;\n        long sum63 = 0;\n        long sum64 = 0;\n        long sum65 = 0;\n
    \       long sum66 = 0;\n        long sum67 = 0;\n        long sum68 = 0;\n        long
    sum69 = 0;\n        long sum70 = 0;\n        long sum71 = 0;\n        long sum72
    = 0;\n        long sum73 = 0;\n        long sum74 = 0;\n        long sum75 = 0;\n
    \       long sum76 = 0;\n        long sum77 = 0;\n        long sum78 = 0;\n        long
    sum79 = 0;\n        long sum80 = 0;\n        long sum81 = 0;\n        long sum82
    = 0;\n        long sum83 = 0;\n        long sum84 = 0;\n        long sum85 = 0;\n
    \       long sum86 = 0;\n        \n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(SortArray((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpmchrwcpg.cs(16,14): warning CS0219: The variable ''sum'' is assigned but
    its value is never used

    /tmp/tmpmchrwcpg.cs(17,14): warning CS0219: The variable ''sum2'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(18,14): warning CS0219: The variable ''sum3'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(19,14): warning CS0219: The variable ''sum4'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(20,14): warning CS0219: The variable ''sum5'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(21,14): warning CS0219: The variable ''sum6'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(22,14): warning CS0219: The variable ''sum7'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(23,14): warning CS0219: The variable ''sum8'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(24,14): warning CS0219: The variable ''sum9'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(25,14): warning CS0219: The variable ''sum10'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(26,14): warning CS0219: The variable ''sum11'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(27,14): warning CS0219: The variable ''sum12'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(28,14): warning CS0219: The variable ''sum13'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(29,14): warning CS0219: The variable ''sum14'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(30,14): warning CS0219: The variable ''sum15'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(31,14): warning CS0219: The variable ''sum16'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(32,14): warning CS0219: The variable ''sum17'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(33,14): warning CS0219: The variable ''sum18'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(34,14): warning CS021'
  timestamp: 1659977110
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of non-negative integers, return a copy of the
    given array after sorting,\n    // you will sort the given array in ascending
    order if the sum( first index value, last index value) is odd,\n    // or sort
    it in descending order if the sum( first index value, last index value) is even.\n
    \   // Note:\n    // * don't change the given array.\n    // Examples:\n    public
    static List<long> SortArray(List<long> array) {\n        long sum = 0;\n        long
    temp = 0;\n        List<long> result = new List<long>();\n        foreach (long
    i in array) {\n            sum += i;\n        }\n        if (sum % 2 == 0) {\n
    \           temp = sum;\n            sum = sum / 2;\n            while (temp !=
    0) {\n                result.Add(sum);\n                temp = temp / 2;\n            }\n
    \       } else {\n            temp = sum;\n            sum = sum / 2;\n            while
    (temp != 0) {\n                result.Add(-sum);\n                temp = temp
    / 2;\n            }\n        }\n        return result;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(SortArray((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <bdc0cb516b4c491b9691cad5e9e30dd3>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <bdc0cb516b4c491b9691cad5e9e30dd3>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977112
- exit_code: -1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of non-negative integers, return a copy of the
    given array after sorting,\n    // you will sort the given array in ascending
    order if the sum( first index value, last index value) is odd,\n    // or sort
    it in descending order if the sum( first index value, last index value) is even.\n
    \   // Note:\n    // * don't change the given array.\n    // Examples:\n    public
    static List<long> SortArray(List<long> array) {\n        long sum = 0;\n        long
    temp;\n        List<long> result = new List<long>();\n        foreach (long i
    in array) {\n            sum += i;\n        }\n        if (sum % 2 == 0) {\n            temp
    = sum;\n            sum = sum / 2;\n            while (temp != 0) {\n                result.Add(sum);\n
    \               sum -= temp;\n                temp = sum;\n                sum
    = sum / 2;\n            }\n        } else {\n            temp = sum;\n            sum
    = sum / 2;\n            while (temp != 0) {\n                result.Add(-sum);\n
    \               sum -= temp;\n                temp = sum;\n                sum
    = sum / 2;\n            }\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(SortArray((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: Timeout
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <73fc9d4de60244adaa49fed9dae652bb>:0
    \n"
  stdout: None
  timestamp: 1659977117
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of non-negative integers, return a copy of the
    given array after sorting,\n    // you will sort the given array in ascending
    order if the sum( first index value, last index value) is odd,\n    // or sort
    it in descending order if the sum( first index value, last index value) is even.\n
    \   // Note:\n    // * don't change the given array.\n    // Examples:\n    public
    static List<long> SortArray(List<long> array) {\n        List<long> result = new
    List<long>();\n        long sum = 0;\n        long maxValue = array.Max();\n        long
    minValue = array.Min();\n        foreach (long i in array) {\n            sum
    += i;\n            if (sum % 2 == 0) {\n                result.Add(i);\n            }\n
    \           if (sum % 2 != 0) {\n                result.Add(-i);\n            }\n
    \       }\n        Array.Sort(result);\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(SortArray((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmphvfslzxx.cs(29,20): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''System.Array''

    '
  timestamp: 1659977112
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of non-negative integers, return a copy of the
    given array after sorting,\n    // you will sort the given array in ascending
    order if the sum( first index value, last index value) is odd,\n    // or sort
    it in descending order if the sum( first index value, last index value) is even.\n
    \   // Note:\n    // * don't change the given array.\n    // Examples:\n    public
    static List<long> SortArray(List<long> array) {\n        long sum = 0;\n        long
    lastSum = 0;\n        long firstSum = 0;\n        List<long> result = new List<long>();\n
    \       foreach (long i in array) {\n            sum += i;\n            lastSum
    = sum;\n            firstSum = sum;\n            result.Add(i);\n        }\n        if
    (sum % 2 == 0) {\n            Array.Sort(result);\n        } else {\n            Array.Sort(result,
    (a, b) => b - a);\n        }\n        return result;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(SortArray((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp2izog_4l.cs(27,24): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''System.Array''

    /tmp/tmp2izog_4l.cs(29,24): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''System.Array''

    /tmp/tmp2izog_4l.cs(29,32): error CS1660: Cannot convert lambda expression to
    type ''IComparer'' because it is not a delegate type

    '
  timestamp: 1659977112
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of non-negative integers, return a copy of the
    given array after sorting,\n    // you will sort the given array in ascending
    order if the sum( first index value, last index value) is odd,\n    // or sort
    it in descending order if the sum( first index value, last index value) is even.\n
    \   // Note:\n    // * don't change the given array.\n    // Examples:\n    public
    static List<long> SortArray(List<long> array) {\n        long sum = 0;\n        long
    temp = 0;\n        List<long> result = new List<long>();\n        foreach (long
    i in array) {\n            sum += i;\n        }\n        if (sum % 2 == 0) {\n
    \           temp = sum;\n            sum = sum / 2;\n            while (temp !=
    0) {\n                result.Add(temp % 2);\n                temp = temp / 2;\n
    \           }\n        } else {\n            temp = sum;\n            sum = sum
    / 2;\n            while (temp != 0) {\n                result.Add(temp % 2);\n
    \               temp = temp / 2;\n            }\n            temp = sum;\n            sum
    = sum / 2;\n            while (temp != 0) {\n                result.Add(temp %
    2);\n                temp = temp / 2;\n            }\n        }\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortArray((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)5L}))).Equals((new List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c7bf681371fa461f8d5a09f4b2eeca4b>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c7bf681371fa461f8d5a09f4b2eeca4b>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977112
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of non-negative integers, return a copy of the
    given array after sorting,\n    // you will sort the given array in ascending
    order if the sum( first index value, last index value) is odd,\n    // or sort
    it in descending order if the sum( first index value, last index value) is even.\n
    \   // Note:\n    // * don't change the given array.\n    // Examples:\n    public
    static List<long> SortArray(List<long> array) {\n        List<long> result = new
    List<long>();\n        long sum = 0;\n        long first = 0;\n        long last
    = 0;\n        foreach (long i in array) {\n            sum += i;\n            if
    (sum % 2 == 0) {\n                result.Add(i);\n                first = i;\n
    \           } else {\n                last = i;\n            }\n        }\n        Array.Sort(result);\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(SortArray((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp6prc5u3o.cs(29,20): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''System.Array''

    '
  timestamp: 1659977112
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of non-negative integers, return a copy of the
    given array after sorting,\n    // you will sort the given array in ascending
    order if the sum( first index value, last index value) is odd,\n    // or sort
    it in descending order if the sum( first index value, last index value) is even.\n
    \   // Note:\n    // * don't change the given array.\n    // Examples:\n    public
    static List<long> SortArray(List<long> array) {\n        long sum = 0;\n        long
    sum1 = 0;\n        long sum2 = 0;\n        long sum3 = 0;\n        long sum4 =
    0;\n        long sum5 = 0;\n        long sum6 = 0;\n        long sum7 = 0;\n        long
    sum8 = 0;\n        long sum9 = 0;\n        long sum10 = 0;\n        long sum11
    = 0;\n        long sum12 = 0;\n        long sum13 = 0;\n        long sum14 = 0;\n
    \       long sum15 = 0;\n        long sum16 = 0;\n        long sum17 = 0;\n        long
    sum18 = 0;\n        long sum19 = 0;\n        long sum20 = 0;\n        long sum21
    = 0;\n        long sum22 = 0;\n        long sum23 = 0;\n        long sum24 = 0;\n
    \       long sum25 = 0;\n        long sum26 = 0;\n        long sum27 = 0;\n        long
    sum28 = 0;\n        long sum29 = 0;\n        long sum30 = 0;\n        long sum31
    = 0;\n        long sum32 = 0;\n        long sum33 = 0;\n        long sum34 = 0;\n
    \       long sum35 = 0;\n        long sum36 = 0;\n        long sum37 = 0;\n        long
    sum38 = 0;\n        long sum39 = 0;\n        long sum40 = 0;\n        long sum41
    = 0;\n        long sum42 = 0;\n        long sum43 = 0;\n        long sum44 = 0;\n
    \       long sum45 = 0;\n        long sum46 = 0;\n        long sum47 = 0;\n        long
    sum48 = 0;\n        long sum49 = 0;\n        long sum50 = 0;\n        long sum51
    = 0;\n        long sum52 = 0;\n        long sum53 = 0;\n        long sum54 = 0;\n
    \       long sum55 = 0;\n        long sum56 = 0;\n        long sum57 = 0;\n        long
    sum58 = 0;\n        long sum59 = 0;\n        long sum60 = 0;\n        long sum61
    = 0;\n        long sum62 = 0;\n        long sum63 = 0;\n        long sum64 = 0;\n
    \       long sum65 = 0;\n        long sum66 = 0;\n        long sum67 = 0;\n        long
    sum68 = 0;\n        long sum69 = 0;\n        long sum70 = 0;\n        long sum71
    = 0;\n        long sum72 = 0;\n        long sum73 = 0;\n        long sum74 = 0;\n
    \       long sum75 = 0;\n        long sum76 = 0;\n        long sum77 = 0;\n        long
    sum78 = 0;\n        long sum79 = 0;\n        long sum80 = 0;\n        long sum81
    = 0;\n        long sum82 = 0;\n        long sum83 = 0;\n        long sum84 = 0;\n
    \       long sum85 = 0;\n        long \n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(SortArray((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmphw28v9l8.cs(102,13): error CS1001: Identifier expected

    /tmp/tmphw28v9l8.cs(102,13): error CS1002: ; expected

    '
  timestamp: 1659977111
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of non-negative integers, return a copy of the
    given array after sorting,\n    // you will sort the given array in ascending
    order if the sum( first index value, last index value) is odd,\n    // or sort
    it in descending order if the sum( first index value, last index value) is even.\n
    \   // Note:\n    // * don't change the given array.\n    // Examples:\n    public
    static List<long> SortArray(List<long> array) {\n        long sum = 0;\n        long
    first = 0;\n        long last = 0;\n        long sum1 = 0;\n        long sum2
    = 0;\n        long sum3 = 0;\n        long sum4 = 0;\n        long sum5 = 0;\n
    \       long sum6 = 0;\n        long sum7 = 0;\n        long sum8 = 0;\n        long
    sum9 = 0;\n        long sum10 = 0;\n        long sum11 = 0;\n        long sum12
    = 0;\n        long sum13 = 0;\n        long sum14 = 0;\n        long sum15 = 0;\n
    \       long sum16 = 0;\n        long sum17 = 0;\n        long sum18 = 0;\n        long
    sum19 = 0;\n        long sum20 = 0;\n        long sum21 = 0;\n        long sum22
    = 0;\n        long sum23 = 0;\n        long sum24 = 0;\n        long sum25 = 0;\n
    \       long sum26 = 0;\n        long sum27 = 0;\n        long sum28 = 0;\n        long
    sum29 = 0;\n        long sum30 = 0;\n        long sum31 = 0;\n        long sum32
    = 0;\n        long sum33 = 0;\n        long sum34 = 0;\n        long sum35 = 0;\n
    \       long sum36 = 0;\n        long sum37 = 0;\n        long sum38 = 0;\n        long
    sum39 = 0;\n        long sum40 = 0;\n        long sum41 = 0;\n        long sum42
    = 0;\n        long sum43 = 0;\n        long sum44 = 0;\n        long sum45 = 0;\n
    \       long sum46 = 0;\n        long sum47 = 0;\n        long sum48 = 0;\n        long
    sum49 = 0;\n        long sum50 = 0;\n        long sum51 = 0;\n        long sum52
    = 0;\n        long sum53 = 0;\n        long sum54 = 0;\n        long sum55 = 0;\n
    \       long sum56 = 0;\n        long sum57 = 0;\n        long sum58 = 0;\n        long
    sum59 = 0;\n        long sum60 = 0;\n        long sum61 = 0;\n        long sum62
    = 0;\n        long sum63 = 0;\n        long sum64 = 0;\n        long sum65 = 0;\n
    \       long sum66 = 0;\n        long sum67 = 0;\n        long sum68 = 0;\n        long
    sum69 = 0;\n        long sum70 = 0;\n        long sum71 = 0;\n        long sum72
    = 0;\n        long sum73 = 0;\n        long sum74 = 0;\n        long sum75 = 0;\n
    \       long sum76 = 0;\n        long sum77 = 0;\n        long sum78 = 0;\n        long
    sum79 = 0;\n        long sum80 = 0;\n        long sum81 = 0;\n        long sum82
    = 0;\n        long sum83 = 0;\n        long sum84\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(SortArray((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpngu072mo.cs(102,19): error CS1002: ; expected

    '
  timestamp: 1659977112
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of non-negative integers, return a copy of the
    given array after sorting,\n    // you will sort the given array in ascending
    order if the sum( first index value, last index value) is odd,\n    // or sort
    it in descending order if the sum( first index value, last index value) is even.\n
    \   // Note:\n    // * don't change the given array.\n    // Examples:\n    public
    static List<long> SortArray(List<long> array) {\n        long sum = 0;\n        long
    temp = 0;\n        List<long> result = new List<long>();\n        foreach (long
    i in array) {\n            sum += i;\n        }\n        if (sum % 2 == 0) {\n
    \           temp = sum;\n            sum = sum / 2;\n            while (temp !=
    sum) {\n                result.Add(array[temp]);\n                temp++;\n            }\n
    \       } else {\n            temp = sum;\n            sum = sum / 2;\n            while
    (temp != sum) {\n                result.Add(array[temp]);\n                temp--;\n
    \           }\n        }\n        return result;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(SortArray((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpdn1txldm.cs(26,34): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmpdn1txldm.cs(33,34): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    '
  timestamp: 1659977110
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of non-negative integers, return a copy of the
    given array after sorting,\n    // you will sort the given array in ascending
    order if the sum( first index value, last index value) is odd,\n    // or sort
    it in descending order if the sum( first index value, last index value) is even.\n
    \   // Note:\n    // * don't change the given array.\n    // Examples:\n    public
    static List<long> SortArray(List<long> array) {\n        long sum = 0;\n        long
    lastSum = 0;\n        long firstSum = 0;\n        long lastFirstSum = 0;\n        long
    firstLastSum = 0;\n        long firstLastFirstSum = 0;\n        long firstLastFirstLastSum
    = 0;\n        long firstLastFirstLastLastSum = 0;\n        long firstLastFirstLastLastLastSum
    = 0;\n        long firstLastFirstLastLastLastLastSum = 0;\n        long firstLastFirstLastLastLastLastFirstSum
    = 0;\n        long firstLastFirstLastLastLastLastFirstLastSum = 0;\n        long
    firstLastFirstLastLastLastLastFirstLastLastSum = 0;\n        long firstLastFirstLastLastLastFirstLastLastLastSum
    = 0;\n        long firstLastFirstLastLastFirstLastLastLastLastSum = 0;\n        long
    firstLastFirstLastLastFirstLastLastLastLastFirstSum = 0;\n        long firstLastFirstLastLastFirstLastLastLastFirstLastSum
    = 0;\n        long firstLastFirstLastLastFirstLastLastLastFirstLastSum = 0;\n
    \       long firstLastFirstLastLastFirstLastLastLastFirstLastSum = 0;\n        long
    firstLastFirstLastLastFirstLastLastLastFirstLastSum = 0;\n        long firstLastFirstLastLastFirstLastLastLastFirstLastSum
    = 0;\n        long firstLastFirstLastLastFirstLastLastLastFirstLastSum = 0;\n
    \       long firstLastFirstLastLastFirstLastLastLastFirstLastSum = 0;\n        long
    firstLastFirstLastLastFirstLastLastLastFirstLastSum = 0;\n        long firstLastFirstLastLastFirstLastLastLastFirstLastSum
    = 0;\n        long firstLastFirstLastLastFirstLastLastLastFirstLastSum = 0;\n
    \       long firstLastFirstLastLastFirstLastLastLastFirstLastSum = 0;\n        long
    firstLastFirstLastLastFirstLastLastLastFirstLastSum = 0;\n        long firstLastFirstLastLastFirstLastLastLastFirstLastSum
    = 0;\n        long firstLastFirstLastLastFirstLastLastLastFirstLastSum = 0;\n
    \       long firstLastFirstLastLastFirstLastLastLastFirstLastSum = 0;\n        long
    firstLastFirstLastLastFirstLastLastLastFirstLastSum = 0;\n        long firstLastFirstLastLastFirstLastLastLastFirstLastSum
    = 0;\n        long firstLastFirstLastLastFirstLastLastLastFirstLastSum = 0;\n
    \       long firstLastFirstLastLastFirstLastLastLastFirstLastSum = 0;\n        long
    firstLastFirstLastLastFirstLastLastLastFirstLastSum = 0;\n        long firstLastFirstLastLastFirstLastLastLastFirstLastSum
    = 0;\n        long firstLastFirstLastLast\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(SortArray((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpzg2e0_f1.cs(53,36): error CS1002: ; expected

    '
  timestamp: 1659977112
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of non-negative integers, return a copy of the
    given array after sorting,\n    // you will sort the given array in ascending
    order if the sum( first index value, last index value) is odd,\n    // or sort
    it in descending order if the sum( first index value, last index value) is even.\n
    \   // Note:\n    // * don't change the given array.\n    // Examples:\n    public
    static List<long> SortArray(List<long> array) {\n        long sum = 0;\n        long
    lastSum = 0;\n        long lastSum2 = 0;\n        List<long> result = new List<long>();\n
    \       foreach (long i in array) {\n            sum += i;\n            lastSum
    = sum;\n            lastSum2 = lastSum;\n            result.Add(i);\n        }\n
    \       bool isEven = lastSum2 % 2 == 0;\n        bool isOdd = lastSum % 2 !=
    0;\n        if (isEven) {\n            Array.Sort(result);\n        } else {\n
    \           Array.Sort(result, (a, b) => b - a);\n        }\n        return result;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(SortArray((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)5L}))).Equals((new List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp1rrgrmqd.cs(29,24): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''System.Array''

    /tmp/tmp1rrgrmqd.cs(31,24): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''System.Array''

    /tmp/tmp1rrgrmqd.cs(31,32): error CS1660: Cannot convert lambda expression to
    type ''IComparer'' because it is not a delegate type

    '
  timestamp: 1659977112
- exit_code: -1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of non-negative integers, return a copy of the
    given array after sorting,\n    // you will sort the given array in ascending
    order if the sum( first index value, last index value) is odd,\n    // or sort
    it in descending order if the sum( first index value, last index value) is even.\n
    \   // Note:\n    // * don't change the given array.\n    // Examples:\n    public
    static List<long> SortArray(List<long> array) {\n        long sum = 0;\n        long
    temp = 0;\n        List<long> result = new List<long>();\n        foreach (long
    i in array) {\n            sum += i;\n        }\n        if (sum % 2 == 0) {\n
    \           temp = sum;\n            sum = sum / 2;\n            while (temp !=
    0) {\n                result.Add(temp);\n                temp -= 1;\n            }\n
    \       } else {\n            temp = sum;\n            sum = sum / 2;\n            while
    (temp != 0) {\n                result.Add(temp);\n                temp += 1;\n
    \           }\n        }\n        return result;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(SortArray((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: Timeout
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <b8bbbb4a828140a3b53195f1b8ac6d73>:0
    \n"
  stdout: None
  timestamp: 1659977115
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of non-negative integers, return a copy of the
    given array after sorting,\n    // you will sort the given array in ascending
    order if the sum( first index value, last index value) is odd,\n    // or sort
    it in descending order if the sum( first index value, last index value) is even.\n
    \   // Note:\n    // * don't change the given array.\n    // Examples:\n    public
    static List<long> SortArray(List<long> array) {\n        long sum = 0;\n        long
    max = 0;\n        long min = 0;\n        long sum2 = 0;\n        long max2 = 0;\n
    \       long min2 = 0;\n        List<long> result = new List<long>();\n        foreach
    (long i in array) {\n            sum += i;\n            if (sum > max) {\n                max
    = sum;\n            }\n            if (sum < min) {\n                min = sum;\n
    \           }\n            sum2 += i;\n            if (sum2 > max2) {\n                max2
    = sum2;\n            }\n            if (sum2 < min2) {\n                min2 =
    sum2;\n            }\n        }\n        if (sum % 2 == 0) {\n            array.Reverse();\n
    \       }\n        foreach (long i in array) {\n            result.Add(i);\n        }\n
    \       array.Clear();\n        foreach (long i in result) {\n            array.Add(i);\n
    \       }\n        return array;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(SortArray((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <e9e6c035e9ca41f9a67093d7a8e0ac40>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <e9e6c035e9ca41f9a67093d7a8e0ac40>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977112
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of non-negative integers, return a copy of the
    given array after sorting,\n    // you will sort the given array in ascending
    order if the sum( first index value, last index value) is odd,\n    // or sort
    it in descending order if the sum( first index value, last index value) is even.\n
    \   // Note:\n    // * don't change the given array.\n    // Examples:\n    public
    static List<long> SortArray(List<long> array) {\n        long sum = 0;\n        long
    sum2 = 0;\n        List<long> result = new List<long>();\n        foreach (long
    i in array) {\n            sum += i;\n        }\n        if (sum % 2 == 0) {\n
    \           foreach (long i in array) {\n                sum2 += i;\n            }\n
    \           long temp = 0;\n            while (sum2 > 0) {\n                temp
    = sum2;\n                sum2 -= temp;\n                result.Add(temp);\n            }\n
    \       } else {\n            foreach (long i in array) {\n                sum2
    += i;\n            }\n            long temp = 0;\n            while (sum2 > 0)
    {\n                temp = sum2;\n                sum2 -= temp;\n                result.Add(temp);\n
    \           }\n            temp = sum;\n            while (sum > 0) {\n                temp
    = sum;\n                sum -= temp;\n                result.Add(temp);\n            }\n
    \       }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(SortArray((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f8cb1f1585af49558d1fcd7034710ea7>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f8cb1f1585af49558d1fcd7034710ea7>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977112
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of non-negative integers, return a copy of the
    given array after sorting,\n    // you will sort the given array in ascending
    order if the sum( first index value, last index value) is odd,\n    // or sort
    it in descending order if the sum( first index value, last index value) is even.\n
    \   // Note:\n    // * don't change the given array.\n    // Examples:\n    public
    static List<long> SortArray(List<long> array) {\n        long sum = 0;\n        long
    temp = 0;\n        long sum1 = 0;\n        long sum2 = 0;\n        long sum3 =
    0;\n        long sum4 = 0;\n        long sum5 = 0;\n        long sum6 = 0;\n        long
    sum7 = 0;\n        long sum8 = 0;\n        long sum9 = 0;\n        long sum10
    = 0;\n        long sum11 = 0;\n        long sum12 = 0;\n        long sum13 = 0;\n
    \       long sum14 = 0;\n        long sum15 = 0;\n        long sum16 = 0;\n        long
    sum17 = 0;\n        long sum18 = 0;\n        long sum19 = 0;\n        long sum20
    = 0;\n        long sum21 = 0;\n        long sum22 = 0;\n        long sum23 = 0;\n
    \       long sum24 = 0;\n        long sum25 = 0;\n        long sum26 = 0;\n        long
    sum27 = 0;\n        long sum28 = 0;\n        long sum29 = 0;\n        long sum30
    = 0;\n        long sum31 = 0;\n        long sum32 = 0;\n        long sum33 = 0;\n
    \       long sum34 = 0;\n        long sum35 = 0;\n        long sum36 = 0;\n        long
    sum37 = 0;\n        long sum38 = 0;\n        long sum39 = 0;\n        long sum40
    = 0;\n        long sum41 = 0;\n        long sum42 = 0;\n        long sum43 = 0;\n
    \       long sum44 = 0;\n        long sum45 = 0;\n        long sum46 = 0;\n        long
    sum47 = 0;\n        long sum48 = 0;\n        long sum49 = 0;\n        long sum50
    = 0;\n        long sum51 = 0;\n        long sum52 = 0;\n        long sum53 = 0;\n
    \       long sum54 = 0;\n        long sum55 = 0;\n        long sum56 = 0;\n        long
    sum57 = 0;\n        long sum58 = 0;\n        long sum59 = 0;\n        long sum60
    = 0;\n        long sum61 = 0;\n        long sum62 = 0;\n        long sum63 = 0;\n
    \       long sum64 = 0;\n        long sum65 = 0;\n        long sum66 = 0;\n        long
    sum67 = 0;\n        long sum68 = 0;\n        long sum69 = 0;\n        long sum70
    = 0;\n        long sum71 = 0;\n        long sum72 = 0;\n        long sum73 = 0;\n
    \       long sum74 = 0;\n        long sum75 = 0;\n        long sum76 = 0;\n        long
    sum77 = 0;\n        long sum78 = 0;\n        long sum79 = 0;\n        long sum80
    = 0;\n        long sum81 = 0;\n        long sum82 = 0;\n        long sum83 = 0;\n
    \       long sum84 = 0;\n        long sum\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(SortArray((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpx8jlub36.cs(102,17): error CS1002: ; expected

    '
  timestamp: 1659977112
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of non-negative integers, return a copy of the
    given array after sorting,\n    // you will sort the given array in ascending
    order if the sum( first index value, last index value) is odd,\n    // or sort
    it in descending order if the sum( first index value, last index value) is even.\n
    \   // Note:\n    // * don't change the given array.\n    // Examples:\n    public
    static List<long> SortArray(List<long> array) {\n        long sum = 0;\n        long
    temp;\n        List<long> result = new List<long>();\n        foreach (long i
    in array) {\n            sum += i;\n        }\n        if (sum % 2 == 0) {\n            temp
    = sum;\n            sum = array.Sum();\n            while (temp != sum) {\n                result.Add(array[array.IndexOf(temp)]);\n
    \               temp--;\n            }\n        } else {\n            temp = sum;\n
    \           sum = array.Sum();\n            while (temp != sum) {\n                result.Add(array[array.IndexOf(temp)]);\n
    \               temp++;\n            }\n        }\n        return result;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(SortArray((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)5L}))).Equals((new List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <e2ecadf3c022401881564626b9351332>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <e2ecadf3c022401881564626b9351332>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977113
- exit_code: -1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of non-negative integers, return a copy of the
    given array after sorting,\n    // you will sort the given array in ascending
    order if the sum( first index value, last index value) is odd,\n    // or sort
    it in descending order if the sum( first index value, last index value) is even.\n
    \   // Note:\n    // * don't change the given array.\n    // Examples:\n    public
    static List<long> SortArray(List<long> array) {\n        long sum = 0;\n        long
    temp = 0;\n        List<long> result = new List<long>();\n        foreach (long
    i in array) {\n            sum += i;\n        }\n        if (sum % 2 == 0) {\n
    \           temp = sum;\n            sum = sum / 2;\n            while (temp !=
    sum) {\n                result.Add(temp);\n                temp -= sum;\n            }\n
    \       } else {\n            temp = sum;\n            sum = sum / 2;\n            while
    (temp != sum) {\n                result.Add(temp);\n                temp += sum;\n
    \           }\n        }\n        return result;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(SortArray((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: Timeout
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7211373b0c9b494e97d698985b01a224>:0
    \n"
  stdout: None
  timestamp: 1659977118
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of non-negative integers, return a copy of the
    given array after sorting,\n    // you will sort the given array in ascending
    order if the sum( first index value, last index value) is odd,\n    // or sort
    it in descending order if the sum( first index value, last index value) is even.\n
    \   // Note:\n    // * don't change the given array.\n    // Examples:\n    public
    static List<long> SortArray(List<long> array) {\n        long sum = 0;\n        long
    temp;\n        List<long> result = new List<long>();\n        foreach (long i
    in array) {\n            sum += i;\n            if (sum % 2 == 0) {\n                temp
    = sum;\n                sum = i;\n                result.Add(temp);\n            }\n
    \       }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(SortArray((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <3a460e91f8a14d65a4d9aaabca330d4d>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <3a460e91f8a14d65a4d9aaabca330d4d>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977112
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of non-negative integers, return a copy of the
    given array after sorting,\n    // you will sort the given array in ascending
    order if the sum( first index value, last index value) is odd,\n    // or sort
    it in descending order if the sum( first index value, last index value) is even.\n
    \   // Note:\n    // * don't change the given array.\n    // Examples:\n    public
    static List<long> SortArray(List<long> array) {\n        long sum = 0;\n        long
    sumOfFirstIndex = 0;\n        long sumOfLastIndex = 0;\n        List<long> result
    = new List<long>();\n        foreach (long i in array) {\n            sum += i;\n
    \           sumOfFirstIndex += i;\n            sumOfLastIndex += array[array.Count
    - 1];\n        }\n        if (sumOfFirstIndex % 2 == 1) {\n            array.Reverse();\n
    \       }\n        if (sumOfLastIndex % 2 == 0) {\n            array.Reverse();\n
    \       }\n        foreach (long i in array) {\n            result.Add(i);\n        }\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(SortArray((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7f3a48481b7644e9b5472b66537790ca>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7f3a48481b7644e9b5472b66537790ca>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977113
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of non-negative integers, return a copy of the
    given array after sorting,\n    // you will sort the given array in ascending
    order if the sum( first index value, last index value) is odd,\n    // or sort
    it in descending order if the sum( first index value, last index value) is even.\n
    \   // Note:\n    // * don't change the given array.\n    // Examples:\n    public
    static List<long> SortArray(List<long> array) {\n        long sum = 0;\n        long
    sum2 = 0;\n        long sum3 = 0;\n        long sum4 = 0;\n        long sum5 =
    0;\n        long sum6 = 0;\n        long sum7 = 0;\n        long sum8 = 0;\n        long
    sum9 = 0;\n        long sum10 = 0;\n        long sum11 = 0;\n        long sum12
    = 0;\n        long sum13 = 0;\n        long sum14 = 0;\n        long sum15 = 0;\n
    \       long sum16 = 0;\n        long sum17 = 0;\n        long sum18 = 0;\n        long
    sum19 = 0;\n        long sum20 = 0;\n        long sum21 = 0;\n        long sum22
    = 0;\n        long sum23 = 0;\n        long sum24 = 0;\n        long sum25 = 0;\n
    \       long sum26 = 0;\n        long sum27 = 0;\n        long sum28 = 0;\n        long
    sum29 = 0;\n        long sum30 = 0;\n        long sum31 = 0;\n        long sum32
    = 0;\n        long sum33 = 0;\n        long sum34 = 0;\n        long sum35 = 0;\n
    \       long sum36 = 0;\n        long sum37 = 0;\n        long sum38 = 0;\n        long
    sum39 = 0;\n        long sum40 = 0;\n        long sum41 = 0;\n        long sum42
    = 0;\n        long sum43 = 0;\n        long sum44 = 0;\n        long sum45 = 0;\n
    \       long sum46 = 0;\n        long sum47 = 0;\n        long sum48 = 0;\n        long
    sum49 = 0;\n        long sum50 = 0;\n        long sum51 = 0;\n        long sum52
    = 0;\n        long sum53 = 0;\n        long sum54 = 0;\n        long sum55 = 0;\n
    \       long sum56 = 0;\n        long sum57 = 0;\n        long sum58 = 0;\n        long
    sum59 = 0;\n        long sum60 = 0;\n        long sum61 = 0;\n        long sum62
    = 0;\n        long sum63 = 0;\n        long sum64 = 0;\n        long sum65 = 0;\n
    \       long sum66 = 0;\n        long sum67 = 0;\n        long sum68 = 0;\n        long
    sum69 = 0;\n        long sum70 = 0;\n        long sum71 = 0;\n        long sum72
    = 0;\n        long sum73 = 0;\n        long sum74 = 0;\n        long sum75 = 0;\n
    \       long sum76 = 0;\n        long sum77 = 0;\n        long sum78 = 0;\n        long
    sum79 = 0;\n        long sum80 = 0;\n        long sum81 = 0;\n        long sum82
    = 0;\n        long sum83 = 0;\n        long sum84 = 0;\n        long sum85 = 0;\n
    \       long sum86 = 0;\n        \n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(SortArray((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpmchrwcpg.cs(16,14): warning CS0219: The variable ''sum'' is assigned but
    its value is never used

    /tmp/tmpmchrwcpg.cs(17,14): warning CS0219: The variable ''sum2'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(18,14): warning CS0219: The variable ''sum3'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(19,14): warning CS0219: The variable ''sum4'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(20,14): warning CS0219: The variable ''sum5'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(21,14): warning CS0219: The variable ''sum6'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(22,14): warning CS0219: The variable ''sum7'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(23,14): warning CS0219: The variable ''sum8'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(24,14): warning CS0219: The variable ''sum9'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(25,14): warning CS0219: The variable ''sum10'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(26,14): warning CS0219: The variable ''sum11'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(27,14): warning CS0219: The variable ''sum12'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(28,14): warning CS0219: The variable ''sum13'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(29,14): warning CS0219: The variable ''sum14'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(30,14): warning CS0219: The variable ''sum15'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(31,14): warning CS0219: The variable ''sum16'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(32,14): warning CS0219: The variable ''sum17'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(33,14): warning CS0219: The variable ''sum18'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(34,14): warning CS021'
  timestamp: 1659977110
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of non-negative integers, return a copy of the
    given array after sorting,\n    // you will sort the given array in ascending
    order if the sum( first index value, last index value) is odd,\n    // or sort
    it in descending order if the sum( first index value, last index value) is even.\n
    \   // Note:\n    // * don't change the given array.\n    // Examples:\n    public
    static List<long> SortArray(List<long> array) {\n        long sum = 0;\n        long
    sum2 = 0;\n        long sum3 = 0;\n        long sum4 = 0;\n        long sum5 =
    0;\n        long sum6 = 0;\n        long sum7 = 0;\n        long sum8 = 0;\n        long
    sum9 = 0;\n        long sum10 = 0;\n        long sum11 = 0;\n        long sum12
    = 0;\n        long sum13 = 0;\n        long sum14 = 0;\n        long sum15 = 0;\n
    \       long sum16 = 0;\n        long sum17 = 0;\n        long sum18 = 0;\n        long
    sum19 = 0;\n        long sum20 = 0;\n        long sum21 = 0;\n        long sum22
    = 0;\n        long sum23 = 0;\n        long sum24 = 0;\n        long sum25 = 0;\n
    \       long sum26 = 0;\n        long sum27 = 0;\n        long sum28 = 0;\n        long
    sum29 = 0;\n        long sum30 = 0;\n        long sum31 = 0;\n        long sum32
    = 0;\n        long sum33 = 0;\n        long sum34 = 0;\n        long sum35 = 0;\n
    \       long sum36 = 0;\n        long sum37 = 0;\n        long sum38 = 0;\n        long
    sum39 = 0;\n        long sum40 = 0;\n        long sum41 = 0;\n        long sum42
    = 0;\n        long sum43 = 0;\n        long sum44 = 0;\n        long sum45 = 0;\n
    \       long sum46 = 0;\n        long sum47 = 0;\n        long sum48 = 0;\n        long
    sum49 = 0;\n        long sum50 = 0;\n        long sum51 = 0;\n        long sum52
    = 0;\n        long sum53 = 0;\n        long sum54 = 0;\n        long sum55 = 0;\n
    \       long sum56 = 0;\n        long sum57 = 0;\n        long sum58 = 0;\n        long
    sum59 = 0;\n        long sum60 = 0;\n        long sum61 = 0;\n        long sum62
    = 0;\n        long sum63 = 0;\n        long sum64 = 0;\n        long sum65 = 0;\n
    \       long sum66 = 0;\n        long sum67 = 0;\n        long sum68 = 0;\n        long
    sum69 = 0;\n        long sum70 = 0;\n        long sum71 = 0;\n        long sum72
    = 0;\n        long sum73 = 0;\n        long sum74 = 0;\n        long sum75 = 0;\n
    \       long sum76 = 0;\n        long sum77 = 0;\n        long sum78 = 0;\n        long
    sum79 = 0;\n        long sum80 = 0;\n        long sum81 = 0;\n        long sum82
    = 0;\n        long sum83 = 0;\n        long sum84 = 0;\n        long sum85 = 0;\n
    \       long sum86 = 0;\n        \n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(SortArray((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpmchrwcpg.cs(16,14): warning CS0219: The variable ''sum'' is assigned but
    its value is never used

    /tmp/tmpmchrwcpg.cs(17,14): warning CS0219: The variable ''sum2'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(18,14): warning CS0219: The variable ''sum3'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(19,14): warning CS0219: The variable ''sum4'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(20,14): warning CS0219: The variable ''sum5'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(21,14): warning CS0219: The variable ''sum6'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(22,14): warning CS0219: The variable ''sum7'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(23,14): warning CS0219: The variable ''sum8'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(24,14): warning CS0219: The variable ''sum9'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(25,14): warning CS0219: The variable ''sum10'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(26,14): warning CS0219: The variable ''sum11'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(27,14): warning CS0219: The variable ''sum12'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(28,14): warning CS0219: The variable ''sum13'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(29,14): warning CS0219: The variable ''sum14'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(30,14): warning CS0219: The variable ''sum15'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(31,14): warning CS0219: The variable ''sum16'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(32,14): warning CS0219: The variable ''sum17'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(33,14): warning CS0219: The variable ''sum18'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(34,14): warning CS021'
  timestamp: 1659977110
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of non-negative integers, return a copy of the
    given array after sorting,\n    // you will sort the given array in ascending
    order if the sum( first index value, last index value) is odd,\n    // or sort
    it in descending order if the sum( first index value, last index value) is even.\n
    \   // Note:\n    // * don't change the given array.\n    // Examples:\n    public
    static List<long> SortArray(List<long> array) {\n        long sum = 0;\n        long
    lastSum = 0;\n        long firstSum = 0;\n        long lastValue = 0;\n        long
    firstValue = 0;\n        long sumOfFirst = 0;\n        long sumOfLast = 0;\n        long
    sumOfFirstLast = 0;\n        long sumOfLastFirst = 0;\n        long sumOfFirstLastFirst
    = 0;\n        long sumOfLastFirstLast = 0;\n        long sumOfFirstLastFirstLast
    = 0;\n        long sumOfLastFirstLastFirst = 0;\n        long sumOfFirstLastFirstLastLast
    = 0;\n        long sumOfLastFirstLastFirstLast = 0;\n        long sumOfFirstLastFirstLastLastLast
    = 0;\n        long sumOfLastFirstLastFirstLastLast = 0;\n        long sumOfFirstLastFirstLastLastLast
    = 0;\n        long sumOfLastFirstLastFirstLastLast = 0;\n        long sumOfFirstLastFirstLastLastLast
    = 0;\n        long sumOfLastFirstLastFirstLastLast = 0;\n        long sumOfFirstLastFirstLastLastLast
    = 0;\n        long sumOfLastFirstLastFirstLastLast = 0;\n        long sumOfFirstLastFirstLastLastLast
    = 0;\n        long sumOfLastFirstLastFirstLastLast = 0;\n        long sumOfFirstLastFirstLastLastLast
    = 0;\n        long sumOfLastFirstLastFirstLastLast = 0;\n        long sumOfFirstLastFirstLastLastLast
    = 0;\n        long sumOfLastFirstLastFirstLastLast = 0;\n        long sumOfFirstLastFirstLastLastLast
    = 0;\n        long sumOfLastFirstLastFirstLastLast = 0;\n        long sumOfFirstLastFirstLastLastLast
    = 0;\n        long sumOfLastFirstLastFirstLastLast = 0;\n        long sumOfFirstLastFirstLastLastLast
    = 0;\n        long sumOfLastFirstLastFirstLastLast = 0;\n        long sumOfFirstLastFirstLastLastLast
    = 0;\n        long sumOfLastFirstLastFirstLastLast = 0;\n        long sumOfFirstLastFirstLastLastLast
    = 0;\n        long sumOfLastFirstLastFirstLastLast = 0;\n        long sumOfFirstLastFirstLastLastLast
    = 0;\n        long sumOfLastFirstLastFirstLastLast = 0;\n        long sumOfFirstLastFirstLastLastLast
    = 0;\n        long sumOfLastFirstLastFirstLastLast = 0;\n        long sumOfFirstLastFirstLastLastLast
    = 0;\n        long sumOfLastFirstLastFirstLastLast = 0;\n        long sumOfFirstLastFirstLastLastLast
    = 0;\n        long sumOfLastFirstLastFirstLastLast = 0;\n        long sumOfFirstLastFirstLastLast\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(SortArray((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)5L}))).Equals((new List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmplytqyk85.cs(63,41): error CS1002: ; expected

    '
  timestamp: 1659977112
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of non-negative integers, return a copy of the
    given array after sorting,\n    // you will sort the given array in ascending
    order if the sum( first index value, last index value) is odd,\n    // or sort
    it in descending order if the sum( first index value, last index value) is even.\n
    \   // Note:\n    // * don't change the given array.\n    // Examples:\n    public
    static List<long> SortArray(List<long> array) {\n        long sum = 0;\n        long
    max = 0;\n        foreach (long i in array) {\n            sum += i;\n            if
    (sum > max) max = sum;\n        }\n        List<long> result = new List<long>();\n
    \       long sum2 = 0;\n        long max2 = 0;\n        foreach (long i in array)
    {\n            sum2 += i;\n            if (sum2 > max2) max2 = sum2;\n            if
    (sum2 > max) max = sum2;\n            if (sum2 < max2) max2 = sum2;\n            result.Add(i);\n
    \       }\n        if (sum % 2 == 1) result.Reverse();\n        return result;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(SortArray((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)5L}))).Equals((new List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <9b2693654f7c4935927d5f393583e750>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <9b2693654f7c4935927d5f393583e750>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977113
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of non-negative integers, return a copy of the
    given array after sorting,\n    // you will sort the given array in ascending
    order if the sum( first index value, last index value) is odd,\n    // or sort
    it in descending order if the sum( first index value, last index value) is even.\n
    \   // Note:\n    // * don't change the given array.\n    // Examples:\n    public
    static List<long> SortArray(List<long> array) {\n        long sum = 0;\n        long
    sum2 = 0;\n        long sum3 = 0;\n        long sum4 = 0;\n        long sum5 =
    0;\n        long sum6 = 0;\n        long sum7 = 0;\n        long sum8 = 0;\n        long
    sum9 = 0;\n        long sum10 = 0;\n        long sum11 = 0;\n        long sum12
    = 0;\n        long sum13 = 0;\n        long sum14 = 0;\n        long sum15 = 0;\n
    \       long sum16 = 0;\n        long sum17 = 0;\n        long sum18 = 0;\n        long
    sum19 = 0;\n        long sum20 = 0;\n        long sum21 = 0;\n        long sum22
    = 0;\n        long sum23 = 0;\n        long sum24 = 0;\n        long sum25 = 0;\n
    \       long sum26 = 0;\n        long sum27 = 0;\n        long sum28 = 0;\n        long
    sum29 = 0;\n        long sum30 = 0;\n        long sum31 = 0;\n        long sum32
    = 0;\n        long sum33 = 0;\n        long sum34 = 0;\n        long sum35 = 0;\n
    \       long sum36 = 0;\n        long sum37 = 0;\n        long sum38 = 0;\n        long
    sum39 = 0;\n        long sum40 = 0;\n        long sum41 = 0;\n        long sum42
    = 0;\n        long sum43 = 0;\n        long sum44 = 0;\n        long sum45 = 0;\n
    \       long sum46 = 0;\n        long sum47 = 0;\n        long sum48 = 0;\n        long
    sum49 = 0;\n        long sum50 = 0;\n        long sum51 = 0;\n        long sum52
    = 0;\n        long sum53 = 0;\n        long sum54 = 0;\n        long sum55 = 0;\n
    \       long sum56 = 0;\n        long sum57 = 0;\n        long sum58 = 0;\n        long
    sum59 = 0;\n        long sum60 = 0;\n        long sum61 = 0;\n        long sum62
    = 0;\n        long sum63 = 0;\n        long sum64 = 0;\n        long sum65 = 0;\n
    \       long sum66 = 0;\n        long sum67 = 0;\n        long sum68 = 0;\n        long
    sum69 = 0;\n        long sum70 = 0;\n        long sum71 = 0;\n        long sum72
    = 0;\n        long sum73 = 0;\n        long sum74 = 0;\n        long sum75 = 0;\n
    \       long sum76 = 0;\n        long sum77 = 0;\n        long sum78 = 0;\n        long
    sum79 = 0;\n        long sum80 = 0;\n        long sum81 = 0;\n        long sum82
    = 0;\n        long sum83 = 0;\n        long sum84 = 0;\n        long sum85 = 0;\n
    \       long sum86 = 0;\n        \n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(SortArray((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpmchrwcpg.cs(16,14): warning CS0219: The variable ''sum'' is assigned but
    its value is never used

    /tmp/tmpmchrwcpg.cs(17,14): warning CS0219: The variable ''sum2'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(18,14): warning CS0219: The variable ''sum3'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(19,14): warning CS0219: The variable ''sum4'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(20,14): warning CS0219: The variable ''sum5'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(21,14): warning CS0219: The variable ''sum6'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(22,14): warning CS0219: The variable ''sum7'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(23,14): warning CS0219: The variable ''sum8'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(24,14): warning CS0219: The variable ''sum9'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(25,14): warning CS0219: The variable ''sum10'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(26,14): warning CS0219: The variable ''sum11'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(27,14): warning CS0219: The variable ''sum12'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(28,14): warning CS0219: The variable ''sum13'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(29,14): warning CS0219: The variable ''sum14'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(30,14): warning CS0219: The variable ''sum15'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(31,14): warning CS0219: The variable ''sum16'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(32,14): warning CS0219: The variable ''sum17'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(33,14): warning CS0219: The variable ''sum18'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(34,14): warning CS021'
  timestamp: 1659977110
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of non-negative integers, return a copy of the
    given array after sorting,\n    // you will sort the given array in ascending
    order if the sum( first index value, last index value) is odd,\n    // or sort
    it in descending order if the sum( first index value, last index value) is even.\n
    \   // Note:\n    // * don't change the given array.\n    // Examples:\n    public
    static List<long> SortArray(List<long> array) {\n        List<long> result = new
    List<long>();\n        long sum = 0;\n        long temp = 0;\n        long first
    = 0;\n        long last = 0;\n        foreach (long i in array) {\n            sum
    += i;\n        }\n        if (sum % 2 == 0) {\n            temp = sum;\n            first
    = array[0];\n            last = array[array.Count - 1];\n            while (first
    < last) {\n                result.Add(array[first]);\n                first++;\n
    \           }\n            while (temp != 0) {\n                result.Add(temp
    % 2);\n                temp /= 2;\n            }\n        } else {\n            temp
    = sum;\n            first = array[0];\n            last = array[array.Count -
    1];\n            while (first < last) {\n                result.Add(array[last]);\n
    \               last--;\n            }\n            while (temp != 0) {\n                result.Add(temp
    % 2);\n                temp /= 2;\n            }\n        }\n        return result;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(SortArray((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)5L}))).Equals((new List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpnpus9aku.cs(29,34): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmpnpus9aku.cs(41,34): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    '
  timestamp: 1659977112
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of non-negative integers, return a copy of the
    given array after sorting,\n    // you will sort the given array in ascending
    order if the sum( first index value, last index value) is odd,\n    // or sort
    it in descending order if the sum( first index value, last index value) is even.\n
    \   // Note:\n    // * don't change the given array.\n    // Examples:\n    public
    static List<long> SortArray(List<long> array) {\n        long sum = 0;\n        long
    max = 0;\n        long min = 0;\n        List<long> result = new List<long>();\n
    \       foreach (long i in array) {\n            sum += i;\n            if (sum
    > max) {\n                max = sum;\n            }\n            if (sum < min)
    {\n                min = sum;\n            }\n        }\n        long mid = max
    / 2;\n        long leftSum = sum - mid;\n        long rightSum = sum + mid;\n
    \       if (leftSum < rightSum) {\n            foreach (long i in array) {\n                if
    (i < mid) {\n                    result.Add(i);\n                }\n            }\n
    \       } else {\n            foreach (long i in array) {\n                if
    (i > mid) {\n                    result.Add(i);\n                }\n            }\n
    \       }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(SortArray((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f48d45dd31344d51b62d7ca14af249ff>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f48d45dd31344d51b62d7ca14af249ff>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977113
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of non-negative integers, return a copy of the
    given array after sorting,\n    // you will sort the given array in ascending
    order if the sum( first index value, last index value) is odd,\n    // or sort
    it in descending order if the sum( first index value, last index value) is even.\n
    \   // Note:\n    // * don't change the given array.\n    // Examples:\n    public
    static List<long> SortArray(List<long> array) {\n        List<long> result = new
    List<long>();\n        long sum = 0;\n        long first = 0;\n        long last
    = 0;\n        foreach (long i in array) {\n            sum += i;\n            if
    (sum % 2 == 0) {\n                result.Add(i);\n                first = i;\n
    \           }\n            if (sum % 2 != 0) {\n                last = i;\n            }\n
    \       }\n        Array.Sort(result);\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(SortArray((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpun1wun_g.cs(30,20): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''System.Array''

    '
  timestamp: 1659977113
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of non-negative integers, return a copy of the
    given array after sorting,\n    // you will sort the given array in ascending
    order if the sum( first index value, last index value) is odd,\n    // or sort
    it in descending order if the sum( first index value, last index value) is even.\n
    \   // Note:\n    // * don't change the given array.\n    // Examples:\n    public
    static List<long> SortArray(List<long> array) {\n        long sum = 0;\n        long
    temp = 0;\n        List<long> result = new List<long>();\n        foreach (long
    i in array) {\n            sum += i;\n        }\n        if (sum % 2 == 0) {\n
    \           temp = sum;\n            sum = array.Sum();\n            foreach (long
    i in array) {\n                temp -= i;\n            }\n            temp = temp
    / 2;\n            foreach (long i in array) {\n                if (temp < i) {\n
    \                   result.Add(i);\n                }\n                temp -=
    i;\n            }\n        } else {\n            temp = sum;\n            sum
    = array.Sum();\n            foreach (long i in array) {\n                temp
    -= i;\n            }\n            temp = temp / 2;\n            foreach (long
    i in array) {\n                if (temp > i) {\n                    result.Add(i);\n
    \               }\n                temp -= i;\n            }\n        }\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortArray((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)5L}))).Equals((new List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7cb85bc40459495e9a26e803754688af>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7cb85bc40459495e9a26e803754688af>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977113
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of non-negative integers, return a copy of the
    given array after sorting,\n    // you will sort the given array in ascending
    order if the sum( first index value, last index value) is odd,\n    // or sort
    it in descending order if the sum( first index value, last index value) is even.\n
    \   // Note:\n    // * don't change the given array.\n    // Examples:\n    public
    static List<long> SortArray(List<long> array) {\n        long sum = 0;\n        long
    first = 0;\n        long last = 0;\n        long sum1 = 0;\n        long sum2
    = 0;\n        long sum3 = 0;\n        long sum4 = 0;\n        long sum5 = 0;\n
    \       long sum6 = 0;\n        long sum7 = 0;\n        long sum8 = 0;\n        long
    sum9 = 0;\n        long sum10 = 0;\n        long sum11 = 0;\n        long sum12
    = 0;\n        long sum13 = 0;\n        long sum14 = 0;\n        long sum15 = 0;\n
    \       long sum16 = 0;\n        long sum17 = 0;\n        long sum18 = 0;\n        long
    sum19 = 0;\n        long sum20 = 0;\n        long sum21 = 0;\n        long sum22
    = 0;\n        long sum23 = 0;\n        long sum24 = 0;\n        long sum25 = 0;\n
    \       long sum26 = 0;\n        long sum27 = 0;\n        long sum28 = 0;\n        long
    sum29 = 0;\n        long sum30 = 0;\n        long sum31 = 0;\n        long sum32
    = 0;\n        long sum33 = 0;\n        long sum34 = 0;\n        long sum35 = 0;\n
    \       long sum36 = 0;\n        long sum37 = 0;\n        long sum38 = 0;\n        long
    sum39 = 0;\n        long sum40 = 0;\n        long sum41 = 0;\n        long sum42
    = 0;\n        long sum43 = 0;\n        long sum44 = 0;\n        long sum45 = 0;\n
    \       long sum46 = 0;\n        long sum47 = 0;\n        long sum48 = 0;\n        long
    sum49 = 0;\n        long sum50 = 0;\n        long sum51 = 0;\n        long sum52
    = 0;\n        long sum53 = 0;\n        long sum54 = 0;\n        long sum55 = 0;\n
    \       long sum56 = 0;\n        long sum57 = 0;\n        long sum58 = 0;\n        long
    sum59 = 0;\n        long sum60 = 0;\n        long sum61 = 0;\n        long sum62
    = 0;\n        long sum63 = 0;\n        long sum64 = 0;\n        long sum65 = 0;\n
    \       long sum66 = 0;\n        long sum67 = 0;\n        long sum68 = 0;\n        long
    sum69 = 0;\n        long sum70 = 0;\n        long sum71 = 0;\n        long sum72
    = 0;\n        long sum73 = 0;\n        long sum74 = 0;\n        long sum75 = 0;\n
    \       long sum76 = 0;\n        long sum77 = 0;\n        long sum78 = 0;\n        long
    sum79 = 0;\n        long sum80 = 0;\n        long sum81 = 0;\n        long sum82
    = 0;\n        long sum83 = 0;\n        long sum84\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(SortArray((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpngu072mo.cs(102,19): error CS1002: ; expected

    '
  timestamp: 1659977112
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of non-negative integers, return a copy of the
    given array after sorting,\n    // you will sort the given array in ascending
    order if the sum( first index value, last index value) is odd,\n    // or sort
    it in descending order if the sum( first index value, last index value) is even.\n
    \   // Note:\n    // * don't change the given array.\n    // Examples:\n    public
    static List<long> SortArray(List<long> array) {\n        long sum = 0;\n        long
    maxSum = 0;\n        long minSum = 0;\n        long sumOfFirstIndex = 0;\n        long
    sumOfLastIndex = 0;\n        long sumOfFirstIndexLastIndex = 0;\n        long
    sumOfLastIndexFirstIndex = 0;\n        long sumOfFirstIndexLastIndexFirstIndex
    = 0;\n        long sumOfLastIndexFirstIndexLastIndex = 0;\n        long sumOfFirstIndexLastIndexFirstIndexLastIndex
    = 0;\n        long sumOfLastIndexFirstIndexLastIndexFirstIndexLastIndex = 0;\n
    \       long sumOfFirstIndexLastIndexFirstIndexLastIndexFirstIndexLastIndex =
    0;\n        long sumOfLastIndexFirstIndexLastIndexFirstIndexLastIndexFirstIndexLastIndex
    = 0;\n        long sumOfFirstIndexLastIndexFirstIndexLastIndexFirstIndexLastIndexFirstIndexLastIndex
    = 0;\n        long sumOfLastIndexFirstIndexLastIndexFirstIndexLastIndexFirstIndexLastIndexFirstIndexLastIndex
    = 0;\n        long sumOfFirstIndexLastIndexFirstIndexLastIndexFirstIndexLastIndexFirstIndexLastIndexFirstIndexLastIndex
    = 0;\n        long sumOfLastIndexFirstIndexLastIndexFirstIndexLastIndexFirstIndexLastIndexFirstIndexLastIndexFirstIndexLastIndex
    = 0;\n        long sumOfFirstIndexLastIndexFirstIndexLastIndexFirstIndexLastIndexFirstIndexLastIndexFirstIndexLastIndexFirstIndexLastIndex
    = 0;\n        long sumOfLastIndexFirstIndexLastIndexFirstIndexLastIndexFirstIndexLastIndexFirstIndexLastIndexFirstIndexLastIndexFirstIndexLastIndex
    = 0;\n        long sumOfFirstIndexLastIndexFirstIndexLastIndexFirstIndexLastIndexFirstIndexLastIndexFirstIndexLastIndexFirstIndexLastIndexFirstIndexLastIndex
    = 0;\n        long sumOfLastIndexFirstIndexLastIndexFirstIndexLastIndexFirstIndexLastIndexFirstIndexLastIndexFirstIndexLastIndexFirstIndexLastIndexFirstIndexLastIndex
    = 0;\n        long sumOfFirstIndexLastIndexFirstIndexLastIndexFirstIndexLastIndexFirstIndexLastIndexFirstIndexLastIndexFirstIndexLastIndexFirstIndexLastIndexFirstIndexLastIndex
    = 0;\n        long sumOfLastIndexFirstIndexLastIndexFirstIndexLastIndexFirstIndexLastIndexFirstIndexLastIndexFirstIndexLastIndexFirstIndexLastIndexFirstIndexLastIndexFirstIndexLastIndex
    = 0;\n        long sumOfFirstIndexLastIndexFirstIndexLastIndexFirstIndexLastIndexFirstIndexLastIndexFirstIndexLastIndexFirstIndexLastIndexFirstIndexLastIndexFirstIndexLastIndexFirstIndexLastIndex
    = 0;\n        long sumOfLastIndexFirstIndexLastIndexFirstIndexLastIndexFirst\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(SortArray((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)5L}))).Equals((new List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpc83qch_q.cs(40,71): error CS1002: ; expected

    '
  timestamp: 1659977112
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of non-negative integers, return a copy of the
    given array after sorting,\n    // you will sort the given array in ascending
    order if the sum( first index value, last index value) is odd,\n    // or sort
    it in descending order if the sum( first index value, last index value) is even.\n
    \   // Note:\n    // * don't change the given array.\n    // Examples:\n    public
    static List<long> SortArray(List<long> array) {\n        long sum = 0;\n        long
    sum2 = 0;\n        long sum3 = 0;\n        long sum4 = 0;\n        long sum5 =
    0;\n        long sum6 = 0;\n        long sum7 = 0;\n        long sum8 = 0;\n        long
    sum9 = 0;\n        long sum10 = 0;\n        long sum11 = 0;\n        long sum12
    = 0;\n        long sum13 = 0;\n        long sum14 = 0;\n        long sum15 = 0;\n
    \       long sum16 = 0;\n        long sum17 = 0;\n        long sum18 = 0;\n        long
    sum19 = 0;\n        long sum20 = 0;\n        long sum21 = 0;\n        long sum22
    = 0;\n        long sum23 = 0;\n        long sum24 = 0;\n        long sum25 = 0;\n
    \       long sum26 = 0;\n        long sum27 = 0;\n        long sum28 = 0;\n        long
    sum29 = 0;\n        long sum30 = 0;\n        long sum31 = 0;\n        long sum32
    = 0;\n        long sum33 = 0;\n        long sum34 = 0;\n        long sum35 = 0;\n
    \       long sum36 = 0;\n        long sum37 = 0;\n        long sum38 = 0;\n        long
    sum39 = 0;\n        long sum40 = 0;\n        long sum41 = 0;\n        long sum42
    = 0;\n        long sum43 = 0;\n        long sum44 = 0;\n        long sum45 = 0;\n
    \       long sum46 = 0;\n        long sum47 = 0;\n        long sum48 = 0;\n        long
    sum49 = 0;\n        long sum50 = 0;\n        long sum51 = 0;\n        long sum52
    = 0;\n        long sum53 = 0;\n        long sum54 = 0;\n        long sum55 = 0;\n
    \       long sum56 = 0;\n        long sum57 = 0;\n        long sum58 = 0;\n        long
    sum59 = 0;\n        long sum60 = 0;\n        long sum61 = 0;\n        long sum62
    = 0;\n        long sum63 = 0;\n        long sum64 = 0;\n        long sum65 = 0;\n
    \       long sum66 = 0;\n        long sum67 = 0;\n        long sum68 = 0;\n        long
    sum69 = 0;\n        long sum70 = 0;\n        long sum71 = 0;\n        long sum72
    = 0;\n        long sum73 = 0;\n        long sum74 = 0;\n        long sum75 = 0;\n
    \       long sum76 = 0;\n        long sum77 = 0;\n        long sum78 = 0;\n        long
    sum79 = 0;\n        long sum80 = 0;\n        long sum81 = 0;\n        long sum82
    = 0;\n        long sum83 = 0;\n        long sum84 = 0;\n        long sum85 = 0;\n
    \       long sum86 = 0;\n        \n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(SortArray((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpmchrwcpg.cs(16,14): warning CS0219: The variable ''sum'' is assigned but
    its value is never used

    /tmp/tmpmchrwcpg.cs(17,14): warning CS0219: The variable ''sum2'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(18,14): warning CS0219: The variable ''sum3'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(19,14): warning CS0219: The variable ''sum4'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(20,14): warning CS0219: The variable ''sum5'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(21,14): warning CS0219: The variable ''sum6'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(22,14): warning CS0219: The variable ''sum7'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(23,14): warning CS0219: The variable ''sum8'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(24,14): warning CS0219: The variable ''sum9'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(25,14): warning CS0219: The variable ''sum10'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(26,14): warning CS0219: The variable ''sum11'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(27,14): warning CS0219: The variable ''sum12'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(28,14): warning CS0219: The variable ''sum13'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(29,14): warning CS0219: The variable ''sum14'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(30,14): warning CS0219: The variable ''sum15'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(31,14): warning CS0219: The variable ''sum16'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(32,14): warning CS0219: The variable ''sum17'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(33,14): warning CS0219: The variable ''sum18'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(34,14): warning CS021'
  timestamp: 1659977110
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of non-negative integers, return a copy of the
    given array after sorting,\n    // you will sort the given array in ascending
    order if the sum( first index value, last index value) is odd,\n    // or sort
    it in descending order if the sum( first index value, last index value) is even.\n
    \   // Note:\n    // * don't change the given array.\n    // Examples:\n    public
    static List<long> SortArray(List<long> array) {\n        long sum = 0;\n        long
    last = 0;\n        long first = 0;\n        List<long> result = new List<long>();\n
    \       foreach (long i in array) {\n            sum += i;\n            if (sum
    % 2 == 0) {\n                first = i;\n            } else {\n                last
    = i;\n            }\n            result.Add(first);\n            result.Add(last);\n
    \       }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(SortArray((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <e12160cfb58245e3966d6388478890cf>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <e12160cfb58245e3966d6388478890cf>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977113
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of non-negative integers, return a copy of the
    given array after sorting,\n    // you will sort the given array in ascending
    order if the sum( first index value, last index value) is odd,\n    // or sort
    it in descending order if the sum( first index value, last index value) is even.\n
    \   // Note:\n    // * don't change the given array.\n    // Examples:\n    public
    static List<long> SortArray(List<long> array) {\n        List<long> result = new
    List<long>();\n        long sum = 0;\n        long first = 0;\n        long last
    = 0;\n        foreach (long i in array) {\n            sum += i;\n            if
    (sum % 2 == 1) {\n                result.Add(i);\n                first = i;\n
    \           } else {\n                result.Add(last + i);\n                last
    = i;\n            }\n        }\n        return result;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(SortArray((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <92928621ceda42219b5032edeb369de7>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <92928621ceda42219b5032edeb369de7>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977113
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of non-negative integers, return a copy of the
    given array after sorting,\n    // you will sort the given array in ascending
    order if the sum( first index value, last index value) is odd,\n    // or sort
    it in descending order if the sum( first index value, last index value) is even.\n
    \   // Note:\n    // * don't change the given array.\n    // Examples:\n    public
    static List<long> SortArray(List<long> array) {\n        long sum = 0;\n        long
    first = 0;\n        long last = 0;\n        foreach (long i in array) {\n            sum
    += i;\n            if (sum % 2 == 0) {\n                first = i;\n            }\n
    \           if (sum % 2 != 0) {\n                last = i;\n            }\n        }\n
    \       List<long> result = new List<long>();\n        long temp;\n        long
    temp2;\n        bool isEven = sum % 2 == 0;\n        bool isOdd = sum % 2 != 0;\n
    \       if (isEven) {\n            temp = first;\n            while (temp < last)
    {\n                result.Add(temp);\n                temp++;\n            }\n
    \       } else {\n            temp = first;\n            while (temp > last) {\n
    \               result.Add(temp);\n                temp--;\n            }\n        }\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(SortArray((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <3b19a77249a04b30a0bbd4bcacf35bd1>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <3b19a77249a04b30a0bbd4bcacf35bd1>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977113
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of non-negative integers, return a copy of the
    given array after sorting,\n    // you will sort the given array in ascending
    order if the sum( first index value, last index value) is odd,\n    // or sort
    it in descending order if the sum( first index value, last index value) is even.\n
    \   // Note:\n    // * don't change the given array.\n    // Examples:\n    public
    static List<long> SortArray(List<long> array) {\n        long sum = 0;\n        long
    temp = 0;\n        List<long> result = new List<long>();\n        foreach (long
    i in array) {\n            sum += i;\n        }\n        if (sum % 2 == 0) {\n
    \           temp = sum;\n            sum = sum / 2;\n            foreach (long
    i in array) {\n                sum += i;\n            }\n            while (temp
    != sum) {\n                result.Add(array[array.Count - 1]);\n                array.RemoveAt(array.Count
    - 1);\n                sum -= array[array.Count - 1];\n            }\n        }
    else {\n            temp = sum;\n            sum = sum / 2;\n            foreach
    (long i in array) {\n                sum += i;\n            }\n            while
    (temp != sum) {\n                result.Add(array[array.Count - 1]);\n                array.RemoveAt(array.Count
    - 1);\n                sum -= array[array.Count - 1];\n            }\n        }\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(SortArray((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <241a42c7d8a34ab4be417b664f1707b5>:0
    \n\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out of
    range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.SortArray
    (System.Collections.Generic.List`1[T] array) [0x00147] in <241a42c7d8a34ab4be417b664f1707b5>:0
    \n  at Problem.Main (System.String[] args) [0x0002b] in <241a42c7d8a34ab4be417b664f1707b5>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index
    was out of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.SortArray
    (System.Collections.Generic.List`1[T] array) [0x00147] in <241a42c7d8a34ab4be417b664f1707b5>:0
    \n  at Problem.Main (System.String[] args) [0x0002b] in <241a42c7d8a34ab4be417b664f1707b5>:0
    \n"
  stdout: ''
  timestamp: 1659977113
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of non-negative integers, return a copy of the
    given array after sorting,\n    // you will sort the given array in ascending
    order if the sum( first index value, last index value) is odd,\n    // or sort
    it in descending order if the sum( first index value, last index value) is even.\n
    \   // Note:\n    // * don't change the given array.\n    // Examples:\n    public
    static List<long> SortArray(List<long> array) {\n        long sum = 0;\n        long
    max = 0;\n        foreach (var item in array) {\n            sum += item;\n            if
    (sum > max) {\n                max = sum;\n            }\n        }\n        List<long>
    result = new List<long>();\n        foreach (var item in array) {\n            sum
    += item;\n            if (sum > max) {\n                result.Add(item);\n            }\n
    \       }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(SortArray((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <9b6beea47e0c45b6a6f3940e75482407>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <9b6beea47e0c45b6a6f3940e75482407>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977113
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of non-negative integers, return a copy of the
    given array after sorting,\n    // you will sort the given array in ascending
    order if the sum( first index value, last index value) is odd,\n    // or sort
    it in descending order if the sum( first index value, last index value) is even.\n
    \   // Note:\n    // * don't change the given array.\n    // Examples:\n    public
    static List<long> SortArray(List<long> array) {\n        long sum = 0;\n        long
    sum2 = 0;\n        long sum3 = 0;\n        long sum4 = 0;\n        long sum5 =
    0;\n        long sum6 = 0;\n        long sum7 = 0;\n        long sum8 = 0;\n        long
    sum9 = 0;\n        long sum10 = 0;\n        long sum11 = 0;\n        long sum12
    = 0;\n        long sum13 = 0;\n        long sum14 = 0;\n        long sum15 = 0;\n
    \       long sum16 = 0;\n        long sum17 = 0;\n        long sum18 = 0;\n        long
    sum19 = 0;\n        long sum20 = 0;\n        long sum21 = 0;\n        long sum22
    = 0;\n        long sum23 = 0;\n        long sum24 = 0;\n        long sum25 = 0;\n
    \       long sum26 = 0;\n        long sum27 = 0;\n        long sum28 = 0;\n        long
    sum29 = 0;\n        long sum30 = 0;\n        long sum31 = 0;\n        long sum32
    = 0;\n        long sum33 = 0;\n        long sum34 = 0;\n        long sum35 = 0;\n
    \       long sum36 = 0;\n        long sum37 = 0;\n        long sum38 = 0;\n        long
    sum39 = 0;\n        long sum40 = 0;\n        long sum41 = 0;\n        long sum42
    = 0;\n        long sum43 = 0;\n        long sum44 = 0;\n        long sum45 = 0;\n
    \       long sum46 = 0;\n        long sum47 = 0;\n        long sum48 = 0;\n        long
    sum49 = 0;\n        long sum50 = 0;\n        long sum51 = 0;\n        long sum52
    = 0;\n        long sum53 = 0;\n        long sum54 = 0;\n        long sum55 = 0;\n
    \       long sum56 = 0;\n        long sum57 = 0;\n        long sum58 = 0;\n        long
    sum59 = 0;\n        long sum60 = 0;\n        long sum61 = 0;\n        long sum62
    = 0;\n        long sum63 = 0;\n        long sum64 = 0;\n        long sum65 = 0;\n
    \       long sum66 = 0;\n        long sum67 = 0;\n        long sum68 = 0;\n        long
    sum69 = 0;\n        long sum70 = 0;\n        long sum71 = 0;\n        long sum72
    = 0;\n        long sum73 = 0;\n        long sum74 = 0;\n        long sum75 = 0;\n
    \       long sum76 = 0;\n        long sum77 = 0;\n        long sum78 = 0;\n        long
    sum79 = 0;\n        long sum80 = 0;\n        long sum81 = 0;\n        long sum82
    = 0;\n        long sum83 = 0;\n        long sum84 = 0;\n        long sum85 = 0;\n
    \       long sum86 = 0;\n        \n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(SortArray((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpmchrwcpg.cs(16,14): warning CS0219: The variable ''sum'' is assigned but
    its value is never used

    /tmp/tmpmchrwcpg.cs(17,14): warning CS0219: The variable ''sum2'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(18,14): warning CS0219: The variable ''sum3'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(19,14): warning CS0219: The variable ''sum4'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(20,14): warning CS0219: The variable ''sum5'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(21,14): warning CS0219: The variable ''sum6'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(22,14): warning CS0219: The variable ''sum7'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(23,14): warning CS0219: The variable ''sum8'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(24,14): warning CS0219: The variable ''sum9'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(25,14): warning CS0219: The variable ''sum10'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(26,14): warning CS0219: The variable ''sum11'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(27,14): warning CS0219: The variable ''sum12'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(28,14): warning CS0219: The variable ''sum13'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(29,14): warning CS0219: The variable ''sum14'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(30,14): warning CS0219: The variable ''sum15'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(31,14): warning CS0219: The variable ''sum16'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(32,14): warning CS0219: The variable ''sum17'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(33,14): warning CS0219: The variable ''sum18'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(34,14): warning CS021'
  timestamp: 1659977110
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of non-negative integers, return a copy of the
    given array after sorting,\n    // you will sort the given array in ascending
    order if the sum( first index value, last index value) is odd,\n    // or sort
    it in descending order if the sum( first index value, last index value) is even.\n
    \   // Note:\n    // * don't change the given array.\n    // Examples:\n    public
    static List<long> SortArray(List<long> array) {\n        long sum = 0;\n        long
    last = 0;\n        long first = 0;\n        foreach (long i in array) {\n            sum
    += i;\n            last = i;\n            first = i;\n        }\n        if (sum
    % 2 == 0) {\n            array.Reverse();\n        }\n        long mid = sum /
    2;\n        long temp;\n        List<long> result = new List<long>();\n        long
    tempSum = 0;\n        long tempFirst = 0;\n        long tempLast = 0;\n        foreach
    (long i in array) {\n            tempSum = tempSum + i;\n            tempLast
    = tempLast;\n            tempFirst = tempFirst;\n        }\n        if (tempSum
    > mid) {\n            temp = tempSum - mid;\n            while (temp > 0) {\n
    \               result.Add(tempFirst);\n                temp--;\n            }\n
    \       } else {\n            temp = tempSum + mid - tempSum;\n            while
    (temp > 0) {\n                result.Add(tempLast);\n                temp--;\n
    \           }\n        }\n        return result;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(SortArray((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <0e51d786c3064174a7448d4c6c09ba06>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <0e51d786c3064174a7448d4c6c09ba06>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977113
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of non-negative integers, return a copy of the
    given array after sorting,\n    // you will sort the given array in ascending
    order if the sum( first index value, last index value) is odd,\n    // or sort
    it in descending order if the sum( first index value, last index value) is even.\n
    \   // Note:\n    // * don't change the given array.\n    // Examples:\n    public
    static List<long> SortArray(List<long> array) {\n        long sum = 0;\n        long
    temp = 0;\n        List<long> result = new List<long>();\n        foreach (long
    i in array) {\n            sum += i;\n        }\n        if (sum % 2 == 0) {\n
    \           temp = sum;\n            sum = sum / 2;\n            while (temp !=
    sum) {\n                result.Add(array[array.IndexOf(temp)]);\n                temp
    = temp - array[array.IndexOf(temp)];\n            }\n        } else {\n            temp
    = sum;\n            sum = sum / 2;\n            while (temp != sum) {\n                result.Add(array[array.IndexOf(temp)]);\n
    \               temp = temp - array[array.IndexOf(temp)];\n            }\n            temp
    = sum;\n            sum = sum / 2;\n            while (temp != sum) {\n                result.Add(array[array.IndexOf(temp)]);\n
    \               temp = temp - array[array.IndexOf(temp)];\n            }\n        }\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(SortArray((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <85d7fb6d555e4ae38ccfb7265428bd14>:0
    \n\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out of
    range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.SortArray
    (System.Collections.Generic.List`1[T] array) [0x000a3] in <85d7fb6d555e4ae38ccfb7265428bd14>:0
    \n  at Problem.Main (System.String[] args) [0x0002b] in <85d7fb6d555e4ae38ccfb7265428bd14>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index
    was out of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.SortArray
    (System.Collections.Generic.List`1[T] array) [0x000a3] in <85d7fb6d555e4ae38ccfb7265428bd14>:0
    \n  at Problem.Main (System.String[] args) [0x0002b] in <85d7fb6d555e4ae38ccfb7265428bd14>:0
    \n"
  stdout: ''
  timestamp: 1659977113
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of non-negative integers, return a copy of the
    given array after sorting,\n    // you will sort the given array in ascending
    order if the sum( first index value, last index value) is odd,\n    // or sort
    it in descending order if the sum( first index value, last index value) is even.\n
    \   // Note:\n    // * don't change the given array.\n    // Examples:\n    public
    static List<long> SortArray(List<long> array) {\n        long sum = 0;\n        long
    sum2 = 0;\n        long sum3 = 0;\n        long sum4 = 0;\n        long sum5 =
    0;\n        long sum6 = 0;\n        long sum7 = 0;\n        long sum8 = 0;\n        long
    sum9 = 0;\n        long sum10 = 0;\n        long sum11 = 0;\n        long sum12
    = 0;\n        long sum13 = 0;\n        long sum14 = 0;\n        long sum15 = 0;\n
    \       long sum16 = 0;\n        long sum17 = 0;\n        long sum18 = 0;\n        long
    sum19 = 0;\n        long sum20 = 0;\n        long sum21 = 0;\n        long sum22
    = 0;\n        long sum23 = 0;\n        long sum24 = 0;\n        long sum25 = 0;\n
    \       long sum26 = 0;\n        long sum27 = 0;\n        long sum28 = 0;\n        long
    sum29 = 0;\n        long sum30 = 0;\n        long sum31 = 0;\n        long sum32
    = 0;\n        long sum33 = 0;\n        long sum34 = 0;\n        long sum35 = 0;\n
    \       long sum36 = 0;\n        long sum37 = 0;\n        long sum38 = 0;\n        long
    sum39 = 0;\n        long sum40 = 0;\n        long sum41 = 0;\n        long sum42
    = 0;\n        long sum43 = 0;\n        long sum44 = 0;\n        long sum45 = 0;\n
    \       long sum46 = 0;\n        long sum47 = 0;\n        long sum48 = 0;\n        long
    sum49 = 0;\n        long sum50 = 0;\n        long sum51 = 0;\n        long sum52
    = 0;\n        long sum53 = 0;\n        long sum54 = 0;\n        long sum55 = 0;\n
    \       long sum56 = 0;\n        long sum57 = 0;\n        long sum58 = 0;\n        long
    sum59 = 0;\n        long sum60 = 0;\n        long sum61 = 0;\n        long sum62
    = 0;\n        long sum63 = 0;\n        long sum64 = 0;\n        long sum65 = 0;\n
    \       long sum66 = 0;\n        long sum67 = 0;\n        long sum68 = 0;\n        long
    sum69 = 0;\n        long sum70 = 0;\n        long sum71 = 0;\n        long sum72
    = 0;\n        long sum73 = 0;\n        long sum74 = 0;\n        long sum75 = 0;\n
    \       long sum76 = 0;\n        long sum77 = 0;\n        long sum78 = 0;\n        long
    sum79 = 0;\n        long sum80 = 0;\n        long sum81 = 0;\n        long sum82
    = 0;\n        long sum83 = 0;\n        long sum84 = 0;\n        long sum85 = 0;\n
    \       long sum86 = 0;\n        \n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(SortArray((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpmchrwcpg.cs(16,14): warning CS0219: The variable ''sum'' is assigned but
    its value is never used

    /tmp/tmpmchrwcpg.cs(17,14): warning CS0219: The variable ''sum2'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(18,14): warning CS0219: The variable ''sum3'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(19,14): warning CS0219: The variable ''sum4'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(20,14): warning CS0219: The variable ''sum5'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(21,14): warning CS0219: The variable ''sum6'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(22,14): warning CS0219: The variable ''sum7'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(23,14): warning CS0219: The variable ''sum8'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(24,14): warning CS0219: The variable ''sum9'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(25,14): warning CS0219: The variable ''sum10'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(26,14): warning CS0219: The variable ''sum11'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(27,14): warning CS0219: The variable ''sum12'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(28,14): warning CS0219: The variable ''sum13'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(29,14): warning CS0219: The variable ''sum14'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(30,14): warning CS0219: The variable ''sum15'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(31,14): warning CS0219: The variable ''sum16'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(32,14): warning CS0219: The variable ''sum17'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(33,14): warning CS0219: The variable ''sum18'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(34,14): warning CS021'
  timestamp: 1659977110
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of non-negative integers, return a copy of the
    given array after sorting,\n    // you will sort the given array in ascending
    order if the sum( first index value, last index value) is odd,\n    // or sort
    it in descending order if the sum( first index value, last index value) is even.\n
    \   // Note:\n    // * don't change the given array.\n    // Examples:\n    public
    static List<long> SortArray(List<long> array) {\n        long sum = 0;\n        long
    sum2 = 0;\n        long sum3 = 0;\n        long sum4 = 0;\n        long sum5 =
    0;\n        long sum6 = 0;\n        long sum7 = 0;\n        long sum8 = 0;\n        long
    sum9 = 0;\n        long sum10 = 0;\n        long sum11 = 0;\n        long sum12
    = 0;\n        long sum13 = 0;\n        long sum14 = 0;\n        long sum15 = 0;\n
    \       long sum16 = 0;\n        long sum17 = 0;\n        long sum18 = 0;\n        long
    sum19 = 0;\n        long sum20 = 0;\n        long sum21 = 0;\n        long sum22
    = 0;\n        long sum23 = 0;\n        long sum24 = 0;\n        long sum25 = 0;\n
    \       long sum26 = 0;\n        long sum27 = 0;\n        long sum28 = 0;\n        long
    sum29 = 0;\n        long sum30 = 0;\n        long sum31 = 0;\n        long sum32
    = 0;\n        long sum33 = 0;\n        long sum34 = 0;\n        long sum35 = 0;\n
    \       long sum36 = 0;\n        long sum37 = 0;\n        long sum38 = 0;\n        long
    sum39 = 0;\n        long sum40 = 0;\n        long sum41 = 0;\n        long sum42
    = 0;\n        long sum43 = 0;\n        long sum44 = 0;\n        long sum45 = 0;\n
    \       long sum46 = 0;\n        long sum47 = 0;\n        long sum48 = 0;\n        long
    sum49 = 0;\n        long sum50 = 0;\n        long sum51 = 0;\n        long sum52
    = 0;\n        long sum53 = 0;\n        long sum54 = 0;\n        long sum55 = 0;\n
    \       long sum56 = 0;\n        long sum57 = 0;\n        long sum58 = 0;\n        long
    sum59 = 0;\n        long sum60 = 0;\n        long sum61 = 0;\n        long sum62
    = 0;\n        long sum63 = 0;\n        long sum64 = 0;\n        long sum65 = 0;\n
    \       long sum66 = 0;\n        long sum67 = 0;\n        long sum68 = 0;\n        long
    sum69 = 0;\n        long sum70 = 0;\n        long sum71 = 0;\n        long sum72
    = 0;\n        long sum73 = 0;\n        long sum74 = 0;\n        long sum75 = 0;\n
    \       long sum76 = 0;\n        long sum77 = 0;\n        long sum78 = 0;\n        long
    sum79 = 0;\n        long sum80 = 0;\n        long sum81 = 0;\n        long sum82
    = 0;\n        long sum83 = 0;\n        long sum84 = 0;\n        long sum85 = 0;\n
    \       long sum86 = 0;\n        \n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(SortArray((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpmchrwcpg.cs(16,14): warning CS0219: The variable ''sum'' is assigned but
    its value is never used

    /tmp/tmpmchrwcpg.cs(17,14): warning CS0219: The variable ''sum2'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(18,14): warning CS0219: The variable ''sum3'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(19,14): warning CS0219: The variable ''sum4'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(20,14): warning CS0219: The variable ''sum5'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(21,14): warning CS0219: The variable ''sum6'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(22,14): warning CS0219: The variable ''sum7'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(23,14): warning CS0219: The variable ''sum8'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(24,14): warning CS0219: The variable ''sum9'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(25,14): warning CS0219: The variable ''sum10'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(26,14): warning CS0219: The variable ''sum11'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(27,14): warning CS0219: The variable ''sum12'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(28,14): warning CS0219: The variable ''sum13'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(29,14): warning CS0219: The variable ''sum14'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(30,14): warning CS0219: The variable ''sum15'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(31,14): warning CS0219: The variable ''sum16'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(32,14): warning CS0219: The variable ''sum17'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(33,14): warning CS0219: The variable ''sum18'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(34,14): warning CS021'
  timestamp: 1659977110
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of non-negative integers, return a copy of the
    given array after sorting,\n    // you will sort the given array in ascending
    order if the sum( first index value, last index value) is odd,\n    // or sort
    it in descending order if the sum( first index value, last index value) is even.\n
    \   // Note:\n    // * don't change the given array.\n    // Examples:\n    public
    static List<long> SortArray(List<long> array) {\n        long sum = 0;\n        long
    sum1 = 0;\n        long sum2 = 0;\n        List<long> list = new List<long>();\n
    \       foreach (long i in array) {\n            sum += i;\n            sum1 +=
    i;\n            sum2 += i;\n            list.Add(i);\n        }\n        if (sum
    % 2 == 0) {\n            list.Sort();\n        } else {\n            list.Reverse();\n
    \       }\n        return list;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(SortArray((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c71a2899a00c40e38490a0645d817291>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c71a2899a00c40e38490a0645d817291>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977113
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of non-negative integers, return a copy of the
    given array after sorting,\n    // you will sort the given array in ascending
    order if the sum( first index value, last index value) is odd,\n    // or sort
    it in descending order if the sum( first index value, last index value) is even.\n
    \   // Note:\n    // * don't change the given array.\n    // Examples:\n    public
    static List<long> SortArray(List<long> array) {\n        long sum = 0;\n        long
    lastSum = 0;\n        long firstSum = 0;\n        long lastSum = 0;\n        long
    firstSum = 0;\n        long lastSum = 0;\n        long firstSum = 0;\n        long
    lastSum = 0;\n        long firstSum = 0;\n        long lastSum = 0;\n        long
    firstSum = 0;\n        long lastSum = 0;\n        long firstSum = 0;\n        long
    lastSum = 0;\n        long firstSum = 0;\n        long lastSum = 0;\n        long
    firstSum = 0;\n        long lastSum = 0;\n        long firstSum = 0;\n        long
    lastSum = 0;\n        long firstSum = 0;\n        long lastSum = 0;\n        long
    firstSum = 0;\n        long lastSum = 0;\n        long firstSum = 0;\n        long
    lastSum = 0;\n        long firstSum = 0;\n        long lastSum = 0;\n        long
    firstSum = 0;\n        long lastSum = 0;\n        long firstSum = 0;\n        long
    lastSum = 0;\n        long firstSum = 0;\n        long lastSum = 0;\n        long
    firstSum = 0;\n        long lastSum = 0;\n        long firstSum = 0;\n        long
    lastSum = 0;\n        long firstSum = 0;\n        long lastSum = 0;\n        long
    firstSum = 0;\n        long lastSum = 0;\n        long firstSum = 0;\n        long
    lastSum = 0;\n        long firstSum = 0;\n        long lastSum = 0;\n        long
    firstSum = 0;\n        long lastSum = 0;\n        long firstSum = 0;\n        long
    lastSum = 0;\n        long firstSum = 0;\n        long lastSum = 0;\n        long
    firstSum = 0;\n        long lastSum = 0;\n        long firstSum = 0;\n        long
    lastSum = 0;\n        long firstSum = 0;\n        long lastSum = 0;\n        long
    firstSum = 0;\n        long lastSum = 0;\n        long firstSum = 0;\n        long
    lastSum = 0;\n        long firstSum = 0;\n        long lastSum = 0;\n        long
    firstSum = 0;\n        long lastSum = 0;\n        long firstSum = 0;\n        long
    lastSum = 0;\n        long firstSum = 0;\n        long lastSum = 0;\n        long
    firstSum = 0;\n        long lastSum = 0;\n        long firstSum = 0;\n        long
    lastSum = 0;\n        long firstSum = 0;\n        long lastSum = 0;\n        long
    firstSum = 0;\n        long lastSum = 0;\n        long firstSum = 0;\n        long
    lastSum = 0;\n        long firstSum = 0;\n        long lastSum = 0;\n        long
    firstSum = 0;\n        long lastSum = 0;\n        long firstSum = 0;\n        long
    last\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortArray((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)5L}))).Equals((new List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpu6xfuuys.cs(101,18): error CS1002: ; expected

    '
  timestamp: 1659977109
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of non-negative integers, return a copy of the
    given array after sorting,\n    // you will sort the given array in ascending
    order if the sum( first index value, last index value) is odd,\n    // or sort
    it in descending order if the sum( first index value, last index value) is even.\n
    \   // Note:\n    // * don't change the given array.\n    // Examples:\n    public
    static List<long> SortArray(List<long> array) {\n        List<long> result = new
    List<long>();\n        long sum = 0;\n        long sum2 = 0;\n        long sum3
    = 0;\n        long sum4 = 0;\n        long sum5 = 0;\n        long sum6 = 0;\n
    \       long sum7 = 0;\n        long sum8 = 0;\n        long sum9 = 0;\n        long
    sum10 = 0;\n        long sum11 = 0;\n        long sum12 = 0;\n        long sum13
    = 0;\n        long sum14 = 0;\n        long sum15 = 0;\n        long sum16 = 0;\n
    \       long sum17 = 0;\n        long sum18 = 0;\n        long sum19 = 0;\n        long
    sum20 = 0;\n        long sum21 = 0;\n        long sum22 = 0;\n        long sum23
    = 0;\n        long sum24 = 0;\n        long sum25 = 0;\n        long sum26 = 0;\n
    \       long sum27 = 0;\n        long sum28 = 0;\n        long sum29 = 0;\n        long
    sum30 = 0;\n        long sum31 = 0;\n        long sum32 = 0;\n        long sum33
    = 0;\n        long sum34 = 0;\n        long sum35 = 0;\n        long sum36 = 0;\n
    \       long sum37 = 0;\n        long sum38 = 0;\n        long sum39 = 0;\n        long
    sum40 = 0;\n        long sum41 = 0;\n        long sum42 = 0;\n        long sum43
    = 0;\n        long sum44 = 0;\n        long sum45 = 0;\n        long sum46 = 0;\n
    \       long sum47 = 0;\n        long sum48 = 0;\n        long sum49 = 0;\n        long
    sum50 = 0;\n        long sum51 = 0;\n        long sum52 = 0;\n        long sum53
    = 0;\n        long sum54 = 0;\n        long sum55 = 0;\n        long sum56 = 0;\n
    \       long sum57 = 0;\n        long sum58 = 0;\n        long sum59 = 0;\n        long
    sum60 = 0;\n        long sum61 = 0;\n        long sum62 = 0;\n        long sum63
    = 0;\n        long sum64 = 0;\n        long sum65 = 0;\n        long sum66 = 0;\n
    \       long sum67 = 0;\n        long sum68 = 0;\n        long sum69 = 0;\n        long
    sum70 = 0;\n        long sum71 = 0;\n        long sum72 = 0;\n        long sum73
    = 0;\n        long sum74 = 0;\n        long sum75 = 0;\n        long sum76 = 0;\n
    \       long sum77 = 0;\n        long sum78 = 0;\n        long sum79 = 0;\n        long
    sum80 = 0;\n        long sum81 = 0;\n        long sum82 = 0;\n        long sum83
    = 0;\n        long sum84 = 0;\n        long sum\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(SortArray((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp_l6bpyx1.cs(101,17): error CS1002: ; expected

    '
  timestamp: 1659977113
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of non-negative integers, return a copy of the
    given array after sorting,\n    // you will sort the given array in ascending
    order if the sum( first index value, last index value) is odd,\n    // or sort
    it in descending order if the sum( first index value, last index value) is even.\n
    \   // Note:\n    // * don't change the given array.\n    // Examples:\n    public
    static List<long> SortArray(List<long> array) {\n        long sum = 0;\n        long
    lastSum = 0;\n        long firstSum = 0;\n        long maxSum = 0;\n        long
    minSum = 0;\n        long maxIndex = 0;\n        long minIndex = 0;\n        long
    maxValue = 0;\n        long minValue = 0;\n        long maxIndexValue = 0;\n        long
    minIndexValue = 0;\n        long maxSumValue = 0;\n        long minSumValue =
    0;\n        long maxIndexValueValue = 0;\n        long minIndexValueValue = 0;\n
    \       long maxSumValueValue = 0;\n        long minSumValueValue = 0;\n        long
    maxIndexValueValueValue = 0;\n        long minIndexValueValueValue = 0;\n        long
    maxSumValueValueValue = 0;\n        long minSumValueValueValue = 0;\n        long
    maxIndexValueValueValue = 0;\n        long minIndexValueValueValue = 0;\n        long
    maxSumValueValueValue = 0;\n        long minSumValueValueValue = 0;\n        long
    maxIndexValueValueValue = 0;\n        long minIndexValueValueValue = 0;\n        long
    maxSumValueValueValue = 0;\n        long minSumValueValueValue = 0;\n        long
    maxIndexValueValueValue = 0;\n        long minIndexValueValueValue = 0;\n        long
    maxSumValueValueValue = 0;\n        long minSumValueValueValue = 0;\n        long
    maxIndexValueValueValue = 0;\n        long minIndexValueValueValue = 0;\n        long
    maxSumValueValueValue = 0;\n        long minSumValueValueValue = 0;\n        long
    maxIndexValueValueValue = 0;\n        long minIndexValueValueValue = 0;\n        long
    maxSumValueValueValue = 0;\n        long minSumValueValueValue = 0;\n        long
    maxIndexValueValueValue = 0;\n        long minIndexValueValueValue = 0;\n        long
    maxSumValueValueValue = 0;\n        long minSumValueValueValue = 0;\n        long
    maxIndexValueValueValue = 0;\n        long minIndexValueValueValue = 0;\n        long
    maxSumValueValueValue = 0;\n        long minSumValueValueValue = 0;\n        long
    maxIndexValueValueValue = 0;\n        long minIndexValueValueValue = 0;\n        long
    maxSumValueValueValue = 0;\n        long minSumValueValueValue = 0;\n        long
    maxIndexValueValueValue = 0;\n        long minIndexValueValueValue = 0;\n        long
    maxSumValueValueValue = 0;\n        long minSumValueValueValue = 0;\n        long
    maxIndexValueValueValue = 0;\n        long minIndexValueValueValue = 0;\n        long
    maxSumValueValueValue = 0;\n        long minSumValueValueValue = 0;\n        long
    max\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortArray((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)5L}))).Equals((new List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpg01gbc1k.cs(77,17): error CS1002: ; expected

    '
  timestamp: 1659977113
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of non-negative integers, return a copy of the
    given array after sorting,\n    // you will sort the given array in ascending
    order if the sum( first index value, last index value) is odd,\n    // or sort
    it in descending order if the sum( first index value, last index value) is even.\n
    \   // Note:\n    // * don't change the given array.\n    // Examples:\n    public
    static List<long> SortArray(List<long> array) {\n        long sum = 0;\n        long
    temp = 0;\n        List<long> result = new List<long>();\n        foreach (long
    i in array) {\n            sum += i;\n        }\n        if (sum % 2 == 0) {\n
    \           temp = sum;\n            sum = sum / 2;\n            while (temp !=
    sum) {\n                result.Add(array[temp]);\n                temp++;\n            }\n
    \       } else {\n            temp = sum;\n            sum = sum / 2;\n            while
    (temp != sum) {\n                result.Add(array[temp]);\n                temp--;\n
    \           }\n        }\n        return result;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(SortArray((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpdn1txldm.cs(26,34): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmpdn1txldm.cs(33,34): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    '
  timestamp: 1659977110
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of non-negative integers, return a copy of the
    given array after sorting,\n    // you will sort the given array in ascending
    order if the sum( first index value, last index value) is odd,\n    // or sort
    it in descending order if the sum( first index value, last index value) is even.\n
    \   // Note:\n    // * don't change the given array.\n    // Examples:\n    public
    static List<long> SortArray(List<long> array) {\n        long sum = 0;\n        foreach
    (long i in array) {\n            sum += i;\n        }\n        if (sum % 2 ==
    0) {\n            array.Reverse();\n        }\n        long sum2 = 0;\n        foreach
    (long i in array) {\n            sum2 += i;\n        }\n        long temp = 0;\n
    \       List<long> result = new List<long>();\n        long temp2 = 0;\n        long
    temp3 = 0;\n        long temp4 = 0;\n        long temp5 = 0;\n        long temp6
    = 0;\n        long temp7 = 0;\n        long temp8 = 0;\n        long temp9 = 0;\n
    \       long temp10 = 0;\n        long temp11 = 0;\n        long temp12 = 0;\n
    \       long temp13 = 0;\n        long temp14 = 0;\n        long temp15 = 0;\n
    \       long temp16 = 0;\n        long temp17 = 0;\n        long temp18 = 0;\n
    \       long temp19 = 0;\n        long temp20 = 0;\n        long temp21 = 0;\n
    \       long temp22 = 0;\n        long temp23 = 0;\n        long temp24 = 0;\n
    \       long temp25 = 0;\n        long temp26 = 0;\n        long temp27 = 0;\n
    \       long temp28 = 0;\n        long temp29 = 0;\n        long temp30 = 0;\n
    \       long temp31 = 0;\n        long temp32 = 0;\n        long temp33 = 0;\n
    \       long temp34 = 0;\n        long temp35 = 0;\n        long temp36 = 0;\n
    \       long temp37 = 0;\n        long temp38 = 0;\n        long temp39 = 0;\n
    \       long temp40 = 0;\n        long temp41 = 0;\n        long temp42 = 0;\n
    \       long temp43 = 0;\n        long temp44 = 0;\n        long temp45 = 0;\n
    \       long temp46 = 0;\n        long temp47 = 0;\n        long temp48 = 0;\n
    \       long temp49 = 0;\n        long temp50 = 0;\n        long temp51 = 0;\n
    \       long temp52 = 0;\n        long temp53 = 0;\n        long temp54 = 0;\n
    \       long temp55 = 0;\n        long temp56 = 0;\n        long temp57 = 0;\n
    \       long temp58 = 0;\n        long temp59 = 0;\n        long temp60 = 0;\n
    \       long temp61 = 0;\n        long temp62 = 0;\n        long temp63 = 0;\n
    \       long temp64 = 0;\n        long temp65 = 0;\n        long temp66 = 0;\n
    \       long temp67 = 0;\n        long temp68 = 0;\n        long temp69 = 0;\n
    \       long temp70 = 0;\n        long temp71 = 0;\n        long temp72 = 0;\n
    \       long temp73 = 0;\n        long temp74 = 0;\n        long temp75 = 0;\n
    \       long temp76 = 0;\n        long \n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(SortArray((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpvc7a512r.cs(104,13): error CS1001: Identifier expected

    /tmp/tmpvc7a512r.cs(104,13): error CS1002: ; expected

    '
  timestamp: 1659977113
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of non-negative integers, return a copy of the
    given array after sorting,\n    // you will sort the given array in ascending
    order if the sum( first index value, last index value) is odd,\n    // or sort
    it in descending order if the sum( first index value, last index value) is even.\n
    \   // Note:\n    // * don't change the given array.\n    // Examples:\n    public
    static List<long> SortArray(List<long> array) {\n        long sum = 0;\n        long
    sumOfFirst = 0;\n        long sumOfLast = 0;\n        List<long> result = new
    List<long>();\n        foreach (long i in array) {\n            sum += i;\n            sumOfFirst
    += i;\n            sumOfLast += i;\n        }\n        if (sum % 2 == 0) {\n            Array.Sort(array);\n
    \           foreach (long i in array) {\n                result.Add(i);\n            }\n
    \       } else {\n            Array.Sort(array);\n            foreach (long i
    in array) {\n                result.Add(-i);\n            }\n        }\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortArray((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)5L}))).Equals((new List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpcs8a_uvk.cs(26,24): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''System.Array''

    /tmp/tmpcs8a_uvk.cs(31,24): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''System.Array''

    '
  timestamp: 1659977113
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of non-negative integers, return a copy of the
    given array after sorting,\n    // you will sort the given array in ascending
    order if the sum( first index value, last index value) is odd,\n    // or sort
    it in descending order if the sum( first index value, last index value) is even.\n
    \   // Note:\n    // * don't change the given array.\n    // Examples:\n    public
    static List<long> SortArray(List<long> array) {\n        long sum = 0;\n        long
    last = 0;\n        long first = 0;\n        long temp = 0;\n        List<long>
    result = new List<long>();\n        foreach (long i in array) {\n            sum
    = sum + i;\n            if (sum % 2 == 0) {\n                temp = sum;\n                first
    = i;\n            } else {\n                last = i;\n            }\n        }\n
    \       if (sum % 2 == 0) {\n            result.Add(first);\n            result.Add(last);\n
    \       } else {\n            result.Add(last);\n            result.Add(first);\n
    \       }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(SortArray((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <cd81c2e1e44d4034a35fd4edf9d2a0fc>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <cd81c2e1e44d4034a35fd4edf9d2a0fc>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977114
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of non-negative integers, return a copy of the
    given array after sorting,\n    // you will sort the given array in ascending
    order if the sum( first index value, last index value) is odd,\n    // or sort
    it in descending order if the sum( first index value, last index value) is even.\n
    \   // Note:\n    // * don't change the given array.\n    // Examples:\n    public
    static List<long> SortArray(List<long> array) {\n        long sum = 0;\n        long
    lastSum = 0;\n        long firstSum = 0;\n        long maxSum = 0;\n        long
    minSum = array.First();\n        foreach (long i in array) {\n            sum
    += i;\n            if (sum > maxSum) {\n                maxSum = sum;\n            }\n
    \           if (sum < minSum) {\n                minSum = sum;\n            }\n
    \           lastSum = sum;\n        }\n        List<long> result = new List<long>();\n
    \       foreach (long i in array) {\n            sum += i;\n            if (sum
    > maxSum) {\n                result.Add(sum - maxSum);\n                maxSum
    = sum;\n            }\n            if (sum < minSum) {\n                result.Add(sum
    - minSum);\n                minSum = sum;\n            }\n            lastSum
    = sum;\n        }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(SortArray((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.InvalidOperationException: Sequence contains
    no elements\n  at System.Linq.Enumerable.First[TSource] (System.Collections.Generic.IEnumerable`1[T]
    source) [0x00010] in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem.SortArray
    (System.Collections.Generic.List`1[T] array) [0x0000d] in <15652c35ea7b4121824c8fc216ec4357>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <15652c35ea7b4121824c8fc216ec4357>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.InvalidOperationException: Sequence
    contains no elements\n  at System.Linq.Enumerable.First[TSource] (System.Collections.Generic.IEnumerable`1[T]
    source) [0x00010] in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem.SortArray
    (System.Collections.Generic.List`1[T] array) [0x0000d] in <15652c35ea7b4121824c8fc216ec4357>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <15652c35ea7b4121824c8fc216ec4357>:0
    \n"
  stdout: ''
  timestamp: 1659977113
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of non-negative integers, return a copy of the
    given array after sorting,\n    // you will sort the given array in ascending
    order if the sum( first index value, last index value) is odd,\n    // or sort
    it in descending order if the sum( first index value, last index value) is even.\n
    \   // Note:\n    // * don't change the given array.\n    // Examples:\n    public
    static List<long> SortArray(List<long> array) {\n        long sum = 0;\n        long
    sum2 = 0;\n        List<long> result = new List<long>();\n        foreach (long
    i in array) {\n            sum += i;\n        }\n        sum2 = sum % 2;\n        if
    (sum2 == 0) {\n            foreach (long i in array) {\n                result.Add(i);\n
    \           }\n        } else {\n            foreach (long i in array) {\n                result.Add(-i);\n
    \           }\n        }\n        return result;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(SortArray((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <686ba2ed7a914babacb5b928d620e2ed>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <686ba2ed7a914babacb5b928d620e2ed>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977110
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of non-negative integers, return a copy of the
    given array after sorting,\n    // you will sort the given array in ascending
    order if the sum( first index value, last index value) is odd,\n    // or sort
    it in descending order if the sum( first index value, last index value) is even.\n
    \   // Note:\n    // * don't change the given array.\n    // Examples:\n    public
    static List<long> SortArray(List<long> array) {\n        long sum = 0;\n        long
    sum2 = 0;\n        List<long> result = new List<long>();\n        foreach (long
    i in array) {\n            sum += i;\n            sum2 += i;\n            result.Add(i);\n
    \       }\n        if (sum % 2 == 0) {\n            Array.Sort(result);\n        }
    else {\n            Array.Sort(result, (a, b) => b - a);\n        }\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortArray((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)5L}))).Equals((new List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmphj3edej_.cs(25,24): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''System.Array''

    /tmp/tmphj3edej_.cs(27,24): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''System.Array''

    /tmp/tmphj3edej_.cs(27,32): error CS1660: Cannot convert lambda expression to
    type ''IComparer'' because it is not a delegate type

    '
  timestamp: 1659977111
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of non-negative integers, return a copy of the
    given array after sorting,\n    // you will sort the given array in ascending
    order if the sum( first index value, last index value) is odd,\n    // or sort
    it in descending order if the sum( first index value, last index value) is even.\n
    \   // Note:\n    // * don't change the given array.\n    // Examples:\n    public
    static List<long> SortArray(List<long> array) {\n        long sum = 0;\n        long
    first = 0;\n        long last = 0;\n        long temp = 0;\n        List<long>
    result = new List<long>();\n        foreach (long i in array) {\n            sum
    += i;\n            if (sum % 2 == 0) {\n                temp = first;\n                first
    = last;\n                last = temp;\n            }\n            result.Add(i);\n
    \       }\n        if (sum % 2 == 0) {\n            temp = first;\n            first
    = last;\n            last = temp;\n        }\n        result.Add(last);\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortArray((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)5L}))).Equals((new List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <4513f3aee43f441784c6fc788b22ae80>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <4513f3aee43f441784c6fc788b22ae80>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977114
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of non-negative integers, return a copy of the
    given array after sorting,\n    // you will sort the given array in ascending
    order if the sum( first index value, last index value) is odd,\n    // or sort
    it in descending order if the sum( first index value, last index value) is even.\n
    \   // Note:\n    // * don't change the given array.\n    // Examples:\n    public
    static List<long> SortArray(List<long> array) {\n        long sum = 0;\n        long
    temp;\n        List<long> result = new List<long>();\n        foreach (long i
    in array) {\n            sum += i;\n        }\n        if (sum % 2 == 0) {\n            temp
    = sum;\n            sum = sum / 2;\n            while (temp != 0) {\n                result.Add(temp
    % 2);\n                temp = temp / 2;\n            }\n        } else {\n            temp
    = sum;\n            sum = sum / 2;\n            while (temp != 0) {\n                result.Add(temp
    % 2);\n                temp = temp / 2;\n            }\n            temp = sum;\n
    \           sum = sum / 2;\n            while (temp != 0) {\n                result.Add(temp
    % 2);\n                temp = temp / 2;\n            }\n        }\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortArray((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)5L}))).Equals((new List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <21e54db968794582bc746b3a21be5c96>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <21e54db968794582bc746b3a21be5c96>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977111
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of non-negative integers, return a copy of the
    given array after sorting,\n    // you will sort the given array in ascending
    order if the sum( first index value, last index value) is odd,\n    // or sort
    it in descending order if the sum( first index value, last index value) is even.\n
    \   // Note:\n    // * don't change the given array.\n    // Examples:\n    public
    static List<long> SortArray(List<long> array) {\n        long sum = 0;\n        long
    temp;\n        List<long> result = new List<long>();\n        foreach (long i
    in array) {\n            sum += i;\n        }\n        if (sum % 2 == 0) {\n            temp
    = sum;\n            while (temp > 0) {\n                result.Add(temp % 2);\n
    \               temp /= 2;\n            }\n        } else {\n            temp
    = sum;\n            while (temp > 0) {\n                result.Add(temp % 2);\n
    \               temp /= 2;\n            }\n            temp = sum;\n            while
    (temp > 0) {\n                result.Add(temp % 2);\n                temp /= 2;\n
    \           }\n        }\n        return result;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(SortArray((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <ebc906f8be32468dbd3dfd52888c2db1>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <ebc906f8be32468dbd3dfd52888c2db1>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977110
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of non-negative integers, return a copy of the
    given array after sorting,\n    // you will sort the given array in ascending
    order if the sum( first index value, last index value) is odd,\n    // or sort
    it in descending order if the sum( first index value, last index value) is even.\n
    \   // Note:\n    // * don't change the given array.\n    // Examples:\n    public
    static List<long> SortArray(List<long> array) {\n        List<long> result = new
    List<long>();\n        long sum = 0;\n        long lastSum = 0;\n        long
    firstSum = 0;\n        long firstValue = array[0];\n        long lastValue = array[0];\n
    \       foreach (long i in array) {\n            sum += i;\n            if (sum
    > lastSum) {\n                result.Add(firstValue);\n                firstSum
    = sum;\n                firstValue = i;\n            } else if (sum < lastSum)
    {\n                result.Add(lastValue);\n                lastSum = sum;\n                lastValue
    = i;\n            }\n        }\n        result.Add(lastValue);\n        result.Add(firstValue);\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(SortArray((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.SortArray
    (System.Collections.Generic.List`1[T] array) [0x00010] in <2494b65258ad49f1ad0ff36888a4d293>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <2494b65258ad49f1ad0ff36888a4d293>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index
    was out of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.SortArray
    (System.Collections.Generic.List`1[T] array) [0x00010] in <2494b65258ad49f1ad0ff36888a4d293>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <2494b65258ad49f1ad0ff36888a4d293>:0
    \n"
  stdout: ''
  timestamp: 1659977114
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of non-negative integers, return a copy of the
    given array after sorting,\n    // you will sort the given array in ascending
    order if the sum( first index value, last index value) is odd,\n    // or sort
    it in descending order if the sum( first index value, last index value) is even.\n
    \   // Note:\n    // * don't change the given array.\n    // Examples:\n    public
    static List<long> SortArray(List<long> array) {\n        long sum = 0;\n        long
    sum1 = 0;\n        long sum2 = 0;\n        long sum3 = 0;\n        long sum4 =
    0;\n        long sum5 = 0;\n        long sum6 = 0;\n        long sum7 = 0;\n        long
    sum8 = 0;\n        long sum9 = 0;\n        long sum10 = 0;\n        long sum11
    = 0;\n        long sum12 = 0;\n        long sum13 = 0;\n        long sum14 = 0;\n
    \       long sum15 = 0;\n        long sum16 = 0;\n        long sum17 = 0;\n        long
    sum18 = 0;\n        long sum19 = 0;\n        long sum20 = 0;\n        long sum21
    = 0;\n        long sum22 = 0;\n        long sum23 = 0;\n        long sum24 = 0;\n
    \       long sum25 = 0;\n        long sum26 = 0;\n        long sum27 = 0;\n        long
    sum28 = 0;\n        long sum29 = 0;\n        long sum30 = 0;\n        long sum31
    = 0;\n        long sum32 = 0;\n        long sum33 = 0;\n        long sum34 = 0;\n
    \       long sum35 = 0;\n        long sum36 = 0;\n        long sum37 = 0;\n        long
    sum38 = 0;\n        long sum39 = 0;\n        long sum40 = 0;\n        long sum41
    = 0;\n        long sum42 = 0;\n        long sum43 = 0;\n        long sum44 = 0;\n
    \       long sum45 = 0;\n        long sum46 = 0;\n        long sum47 = 0;\n        long
    sum48 = 0;\n        long sum49 = 0;\n        long sum50 = 0;\n        long sum51
    = 0;\n        long sum52 = 0;\n        long sum53 = 0;\n        long sum54 = 0;\n
    \       long sum55 = 0;\n        long sum56 = 0;\n        long sum57 = 0;\n        long
    sum58 = 0;\n        long sum59 = 0;\n        long sum60 = 0;\n        long sum61
    = 0;\n        long sum62 = 0;\n        long sum63 = 0;\n        long sum64 = 0;\n
    \       long sum65 = 0;\n        long sum66 = 0;\n        long sum67 = 0;\n        long
    sum68 = 0;\n        long sum69 = 0;\n        long sum70 = 0;\n        long sum71
    = 0;\n        long sum72 = 0;\n        long sum73 = 0;\n        long sum74 = 0;\n
    \       long sum75 = 0;\n        long sum76 = 0;\n        long sum77 = 0;\n        long
    sum78 = 0;\n        long sum79 = 0;\n        long sum80 = 0;\n        long sum81
    = 0;\n        long sum82 = 0;\n        long sum83 = 0;\n        long sum84 = 0;\n
    \       long sum85 = 0;\n        long \n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(SortArray((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmphw28v9l8.cs(102,13): error CS1001: Identifier expected

    /tmp/tmphw28v9l8.cs(102,13): error CS1002: ; expected

    '
  timestamp: 1659977111
- exit_code: -1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of non-negative integers, return a copy of the
    given array after sorting,\n    // you will sort the given array in ascending
    order if the sum( first index value, last index value) is odd,\n    // or sort
    it in descending order if the sum( first index value, last index value) is even.\n
    \   // Note:\n    // * don't change the given array.\n    // Examples:\n    public
    static List<long> SortArray(List<long> array) {\n        long sum = 0;\n        long
    temp = 0;\n        List<long> result = new List<long>();\n        foreach (long
    i in array) {\n            sum += i;\n        }\n        if (sum % 2 == 0) {\n
    \           temp = sum;\n            sum = sum / 2;\n            while (temp !=
    0) {\n                result.Add(sum);\n                sum -= temp;\n                temp
    = sum;\n                sum = sum / 2;\n            }\n        } else {\n            temp
    = sum;\n            sum = sum / 2;\n            while (temp != 0) {\n                result.Add(sum);\n
    \               sum -= temp;\n                temp = sum;\n                sum
    = sum / 2;\n            }\n            temp = sum;\n            sum = sum / 2;\n
    \           while (temp != 0) {\n                result.Add(sum);\n                sum
    -= temp;\n                temp = sum;\n                sum = sum / 2;\n            }\n
    \       }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(SortArray((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: Timeout
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <998c77f01c9c44c3886a4b3950b3069a>:0
    \n"
  stdout: None
  timestamp: 1659977119
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of non-negative integers, return a copy of the
    given array after sorting,\n    // you will sort the given array in ascending
    order if the sum( first index value, last index value) is odd,\n    // or sort
    it in descending order if the sum( first index value, last index value) is even.\n
    \   // Note:\n    // * don't change the given array.\n    // Examples:\n    public
    static List<long> SortArray(List<long> array) {\n        long sum = 0;\n        long
    lastSum = 0;\n        long firstSum = 0;\n        long lastSum = 0;\n        long
    firstSum = 0;\n        long lastSum = 0;\n        long firstSum = 0;\n        long
    lastSum = 0;\n        long firstSum = 0;\n        long lastSum = 0;\n        long
    firstSum = 0;\n        long lastSum = 0;\n        long firstSum = 0;\n        long
    lastSum = 0;\n        long firstSum = 0;\n        long lastSum = 0;\n        long
    firstSum = 0;\n        long lastSum = 0;\n        long firstSum = 0;\n        long
    lastSum = 0;\n        long firstSum = 0;\n        long lastSum = 0;\n        long
    firstSum = 0;\n        long lastSum = 0;\n        long firstSum = 0;\n        long
    lastSum = 0;\n        long firstSum = 0;\n        long lastSum = 0;\n        long
    firstSum = 0;\n        long lastSum = 0;\n        long firstSum = 0;\n        long
    lastSum = 0;\n        long firstSum = 0;\n        long lastSum = 0;\n        long
    firstSum = 0;\n        long lastSum = 0;\n        long firstSum = 0;\n        long
    lastSum = 0;\n        long firstSum = 0;\n        long lastSum = 0;\n        long
    firstSum = 0;\n        long lastSum = 0;\n        long firstSum = 0;\n        long
    lastSum = 0;\n        long firstSum = 0;\n        long lastSum = 0;\n        long
    firstSum = 0;\n        long lastSum = 0;\n        long firstSum = 0;\n        long
    lastSum = 0;\n        long firstSum = 0;\n        long lastSum = 0;\n        long
    firstSum = 0;\n        long lastSum = 0;\n        long firstSum = 0;\n        long
    lastSum = 0;\n        long firstSum = 0;\n        long lastSum = 0;\n        long
    firstSum = 0;\n        long lastSum = 0;\n        long firstSum = 0;\n        long
    lastSum = 0;\n        long firstSum = 0;\n        long lastSum = 0;\n        long
    firstSum = 0;\n        long lastSum = 0;\n        long firstSum = 0;\n        long
    lastSum = 0;\n        long firstSum = 0;\n        long lastSum = 0;\n        long
    firstSum = 0;\n        long lastSum = 0;\n        long firstSum = 0;\n        long
    lastSum = 0;\n        long firstSum = 0;\n        long lastSum = 0;\n        long
    firstSum = 0;\n        long lastSum = 0;\n        long firstSum = 0;\n        long
    lastSum = 0;\n        long firstSum = 0;\n        long lastSum = 0;\n        long
    firstSum = 0;\n        long lastSum = 0;\n        long firstSum = 0;\n        long
    last\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortArray((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)5L}))).Equals((new List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpu6xfuuys.cs(101,18): error CS1002: ; expected

    '
  timestamp: 1659977109
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of non-negative integers, return a copy of the
    given array after sorting,\n    // you will sort the given array in ascending
    order if the sum( first index value, last index value) is odd,\n    // or sort
    it in descending order if the sum( first index value, last index value) is even.\n
    \   // Note:\n    // * don't change the given array.\n    // Examples:\n    public
    static List<long> SortArray(List<long> array) {\n        long sum = 0;\n        long
    sum2 = 0;\n        long sum3 = 0;\n        long sum4 = 0;\n        long sum5 =
    0;\n        long sum6 = 0;\n        long sum7 = 0;\n        long sum8 = 0;\n        long
    sum9 = 0;\n        long sum10 = 0;\n        long sum11 = 0;\n        long sum12
    = 0;\n        long sum13 = 0;\n        long sum14 = 0;\n        long sum15 = 0;\n
    \       long sum16 = 0;\n        long sum17 = 0;\n        long sum18 = 0;\n        long
    sum19 = 0;\n        long sum20 = 0;\n        long sum21 = 0;\n        long sum22
    = 0;\n        long sum23 = 0;\n        long sum24 = 0;\n        long sum25 = 0;\n
    \       long sum26 = 0;\n        long sum27 = 0;\n        long sum28 = 0;\n        long
    sum29 = 0;\n        long sum30 = 0;\n        long sum31 = 0;\n        long sum32
    = 0;\n        long sum33 = 0;\n        long sum34 = 0;\n        long sum35 = 0;\n
    \       long sum36 = 0;\n        long sum37 = 0;\n        long sum38 = 0;\n        long
    sum39 = 0;\n        long sum40 = 0;\n        long sum41 = 0;\n        long sum42
    = 0;\n        long sum43 = 0;\n        long sum44 = 0;\n        long sum45 = 0;\n
    \       long sum46 = 0;\n        long sum47 = 0;\n        long sum48 = 0;\n        long
    sum49 = 0;\n        long sum50 = 0;\n        long sum51 = 0;\n        long sum52
    = 0;\n        long sum53 = 0;\n        long sum54 = 0;\n        long sum55 = 0;\n
    \       long sum56 = 0;\n        long sum57 = 0;\n        long sum58 = 0;\n        long
    sum59 = 0;\n        long sum60 = 0;\n        long sum61 = 0;\n        long sum62
    = 0;\n        long sum63 = 0;\n        long sum64 = 0;\n        long sum65 = 0;\n
    \       long sum66 = 0;\n        long sum67 = 0;\n        long sum68 = 0;\n        long
    sum69 = 0;\n        long sum70 = 0;\n        long sum71 = 0;\n        long sum72
    = 0;\n        long sum73 = 0;\n        long sum74 = 0;\n        long sum75 = 0;\n
    \       long sum76 = 0;\n        long sum77 = 0;\n        long sum78 = 0;\n        long
    sum79 = 0;\n        long sum80 = 0;\n        long sum81 = 0;\n        long sum82
    = 0;\n        long sum83 = 0;\n        long sum84 = 0;\n        long sum85 = 0;\n
    \       long sum86 = 0;\n        \n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(SortArray((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpmchrwcpg.cs(16,14): warning CS0219: The variable ''sum'' is assigned but
    its value is never used

    /tmp/tmpmchrwcpg.cs(17,14): warning CS0219: The variable ''sum2'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(18,14): warning CS0219: The variable ''sum3'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(19,14): warning CS0219: The variable ''sum4'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(20,14): warning CS0219: The variable ''sum5'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(21,14): warning CS0219: The variable ''sum6'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(22,14): warning CS0219: The variable ''sum7'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(23,14): warning CS0219: The variable ''sum8'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(24,14): warning CS0219: The variable ''sum9'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(25,14): warning CS0219: The variable ''sum10'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(26,14): warning CS0219: The variable ''sum11'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(27,14): warning CS0219: The variable ''sum12'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(28,14): warning CS0219: The variable ''sum13'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(29,14): warning CS0219: The variable ''sum14'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(30,14): warning CS0219: The variable ''sum15'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(31,14): warning CS0219: The variable ''sum16'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(32,14): warning CS0219: The variable ''sum17'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(33,14): warning CS0219: The variable ''sum18'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(34,14): warning CS021'
  timestamp: 1659977110
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of non-negative integers, return a copy of the
    given array after sorting,\n    // you will sort the given array in ascending
    order if the sum( first index value, last index value) is odd,\n    // or sort
    it in descending order if the sum( first index value, last index value) is even.\n
    \   // Note:\n    // * don't change the given array.\n    // Examples:\n    public
    static List<long> SortArray(List<long> array) {\n        long sum = 0;\n        long
    temp = 0;\n        List<long> result = new List<long>();\n        foreach (long
    i in array) {\n            sum += i;\n        }\n        if (sum % 2 == 0) {\n
    \           temp = sum;\n            sum = sum / 2;\n            foreach (long
    i in array) {\n                sum += i;\n            }\n            temp = sum;\n
    \           sum = temp;\n        }\n        foreach (long i in array) {\n            result.Add(sum
    - i);\n        }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(SortArray((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <e43220df196a4818b56ee55660768ef0>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <e43220df196a4818b56ee55660768ef0>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977114
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of non-negative integers, return a copy of the
    given array after sorting,\n    // you will sort the given array in ascending
    order if the sum( first index value, last index value) is odd,\n    // or sort
    it in descending order if the sum( first index value, last index value) is even.\n
    \   // Note:\n    // * don't change the given array.\n    // Examples:\n    public
    static List<long> SortArray(List<long> array) {\n        long sum = 0;\n        long
    maxSum = 0;\n        long minSum = array.First();\n        foreach (long i in
    array) {\n            sum += i;\n            if (sum > maxSum) {\n                maxSum
    = sum;\n            }\n            if (sum < minSum) {\n                minSum
    = sum;\n            }\n        }\n        if (sum % 2 == 0) {\n            array.Sort();\n
    \           array.Reverse();\n        }\n        List<long> result = new List<long>();\n
    \       foreach (long i in array) {\n            result.Add(i);\n        }\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortArray((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)5L}))).Equals((new List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.InvalidOperationException: Sequence contains
    no elements\n  at System.Linq.Enumerable.First[TSource] (System.Collections.Generic.IEnumerable`1[T]
    source) [0x00010] in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem.SortArray
    (System.Collections.Generic.List`1[T] array) [0x00007] in <fb371adf1766436b9797874698e0fd8c>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <fb371adf1766436b9797874698e0fd8c>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.InvalidOperationException: Sequence
    contains no elements\n  at System.Linq.Enumerable.First[TSource] (System.Collections.Generic.IEnumerable`1[T]
    source) [0x00010] in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem.SortArray
    (System.Collections.Generic.List`1[T] array) [0x00007] in <fb371adf1766436b9797874698e0fd8c>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <fb371adf1766436b9797874698e0fd8c>:0
    \n"
  stdout: ''
  timestamp: 1659977114
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of non-negative integers, return a copy of the
    given array after sorting,\n    // you will sort the given array in ascending
    order if the sum( first index value, last index value) is odd,\n    // or sort
    it in descending order if the sum( first index value, last index value) is even.\n
    \   // Note:\n    // * don't change the given array.\n    // Examples:\n    public
    static List<long> SortArray(List<long> array) {\n        long sum = 0;\n        long
    sum2 = 0;\n        long sum3 = 0;\n        long sum4 = 0;\n        long sum5 =
    0;\n        long sum6 = 0;\n        long sum7 = 0;\n        long sum8 = 0;\n        long
    sum9 = 0;\n        long sum10 = 0;\n        long sum11 = 0;\n        long sum12
    = 0;\n        long sum13 = 0;\n        long sum14 = 0;\n        long sum15 = 0;\n
    \       long sum16 = 0;\n        long sum17 = 0;\n        long sum18 = 0;\n        long
    sum19 = 0;\n        long sum20 = 0;\n        long sum21 = 0;\n        long sum22
    = 0;\n        long sum23 = 0;\n        long sum24 = 0;\n        long sum25 = 0;\n
    \       long sum26 = 0;\n        long sum27 = 0;\n        long sum28 = 0;\n        long
    sum29 = 0;\n        long sum30 = 0;\n        long sum31 = 0;\n        long sum32
    = 0;\n        long sum33 = 0;\n        long sum34 = 0;\n        long sum35 = 0;\n
    \       long sum36 = 0;\n        long sum37 = 0;\n        long sum38 = 0;\n        long
    sum39 = 0;\n        long sum40 = 0;\n        long sum41 = 0;\n        long sum42
    = 0;\n        long sum43 = 0;\n        long sum44 = 0;\n        long sum45 = 0;\n
    \       long sum46 = 0;\n        long sum47 = 0;\n        long sum48 = 0;\n        long
    sum49 = 0;\n        long sum50 = 0;\n        long sum51 = 0;\n        long sum52
    = 0;\n        long sum53 = 0;\n        long sum54 = 0;\n        long sum55 = 0;\n
    \       long sum56 = 0;\n        long sum57 = 0;\n        long sum58 = 0;\n        long
    sum59 = 0;\n        long sum60 = 0;\n        long sum61 = 0;\n        long sum62
    = 0;\n        long sum63 = 0;\n        long sum64 = 0;\n        long sum65 = 0;\n
    \       long sum66 = 0;\n        long sum67 = 0;\n        long sum68 = 0;\n        long
    sum69 = 0;\n        long sum70 = 0;\n        long sum71 = 0;\n        long sum72
    = 0;\n        long sum73 = 0;\n        long sum74 = 0;\n        long sum75 = 0;\n
    \       long sum76 = 0;\n        long sum77 = 0;\n        long sum78 = 0;\n        long
    sum79 = 0;\n        long sum80 = 0;\n        long sum81 = 0;\n        long sum82
    = 0;\n        long sum83 = 0;\n        long sum84 = 0;\n        long sum85 = 0;\n
    \       long sum86 = 0;\n        \n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(SortArray((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpmchrwcpg.cs(16,14): warning CS0219: The variable ''sum'' is assigned but
    its value is never used

    /tmp/tmpmchrwcpg.cs(17,14): warning CS0219: The variable ''sum2'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(18,14): warning CS0219: The variable ''sum3'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(19,14): warning CS0219: The variable ''sum4'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(20,14): warning CS0219: The variable ''sum5'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(21,14): warning CS0219: The variable ''sum6'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(22,14): warning CS0219: The variable ''sum7'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(23,14): warning CS0219: The variable ''sum8'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(24,14): warning CS0219: The variable ''sum9'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(25,14): warning CS0219: The variable ''sum10'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(26,14): warning CS0219: The variable ''sum11'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(27,14): warning CS0219: The variable ''sum12'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(28,14): warning CS0219: The variable ''sum13'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(29,14): warning CS0219: The variable ''sum14'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(30,14): warning CS0219: The variable ''sum15'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(31,14): warning CS0219: The variable ''sum16'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(32,14): warning CS0219: The variable ''sum17'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(33,14): warning CS0219: The variable ''sum18'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(34,14): warning CS021'
  timestamp: 1659977110
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of non-negative integers, return a copy of the
    given array after sorting,\n    // you will sort the given array in ascending
    order if the sum( first index value, last index value) is odd,\n    // or sort
    it in descending order if the sum( first index value, last index value) is even.\n
    \   // Note:\n    // * don't change the given array.\n    // Examples:\n    public
    static List<long> SortArray(List<long> array) {\n        long sum = 0;\n        long
    temp = 0;\n        List<long> result = new List<long>();\n        foreach (long
    i in array) {\n            sum += i;\n            if (sum % 2 == 0) {\n                temp
    = sum;\n                sum = i;\n                result.Add(temp);\n            }\n
    \       }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(SortArray((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c19b36fcbffd4063813f109a377a7afe>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c19b36fcbffd4063813f109a377a7afe>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977111
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of non-negative integers, return a copy of the
    given array after sorting,\n    // you will sort the given array in ascending
    order if the sum( first index value, last index value) is odd,\n    // or sort
    it in descending order if the sum( first index value, last index value) is even.\n
    \   // Note:\n    // * don't change the given array.\n    // Examples:\n    public
    static List<long> SortArray(List<long> array) {\n        long sum = 0;\n        long
    maxSum = 0;\n        long minSum = array.FirstOrDefault();\n        foreach (var
    item in array) {\n            sum += item;\n            if (sum > maxSum) {\n
    \               maxSum = sum;\n            }\n            if (sum < minSum) {\n
    \               minSum = sum;\n            }\n        }\n        if (sum % 2 ==
    0) {\n            array.Reverse();\n        }\n        long sum2 = 0;\n        long
    maxSum2 = 0;\n        long minSum2 = array.FirstOrDefault();\n        foreach
    (var item in array) {\n            sum2 += item;\n            if (sum2 > maxSum2)
    {\n                maxSum2 = sum2;\n            }\n            if (sum2 < minSum2)
    {\n                minSum2 = sum2;\n            }\n        }\n        if (sum2
    % 2 == 0) {\n            array.Reverse();\n        }\n        long sum3 = 0;\n
    \       long maxSum3 = 0;\n        long minSum3 = array.FirstOrDefault();\n        foreach
    (var item in array) {\n            sum3 += item;\n            if (sum3 > maxSum3)
    {\n                maxSum3 = sum3;\n            }\n            if (sum3 < minSum3)
    {\n                minSum3 = sum3;\n            }\n        }\n        if (sum3
    % 2 == 0) {\n            array.Reverse();\n        }\n        long sum4 = 0;\n
    \       long maxSum4 = 0;\n        long minSum4 = array.FirstOrDefault();\n        foreach
    (var item in array) {\n            sum4 += item;\n            if (sum4 > maxSum4)
    {\n                maxSum4 = sum4;\n            }\n            if (sum4 < minSum4)
    {\n                minSum4 = sum4;\n            }\n        }\n        if (sum4
    % 2 == 0) {\n            array.Reverse();\n        }\n        long sum5 = 0;\n
    \       long maxSum5 = 0;\n        long minSum5 = array.FirstOrDefault();\n        foreach
    (var item in array) {\n            sum5 += item;\n            if (sum5 > maxSum5)
    {\n                maxSum5 = sum5;\n            }\n            if (sum5 < minSum5)
    {\n                minSum5 = sum5;\n            }\n        }\n        if (sum5
    % 2 == 0) {\n            array.Reverse();\n        }\n        long sum6 = 0;\n
    \       long maxSum6 = 0;\n        long minSum6 = array.FirstOrDefault();\n        foreach
    (var item in array) {\n            sum6 += item;\n            if (sum6 > maxSum6)
    {\n                maxSum6 = sum6;\n            }\n            if (sum6 < minSum6)
    {\n                minSum6 = sum6;\n            }\n        }\n        if (sum6
    % 2 == 0) {\n            array.Reverse();\n        }\n        \n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(SortArray((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmptw0q8dh3.cs(15,30): error CS0161: ''Problem.SortArray(List<long>)'': not
    all code paths return a value

    '
  timestamp: 1659977114
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of non-negative integers, return a copy of the
    given array after sorting,\n    // you will sort the given array in ascending
    order if the sum( first index value, last index value) is odd,\n    // or sort
    it in descending order if the sum( first index value, last index value) is even.\n
    \   // Note:\n    // * don't change the given array.\n    // Examples:\n    public
    static List<long> SortArray(List<long> array) {\n        long sum = 0;\n        long
    lastSum = 0;\n        long firstSum = 0;\n        long firstIndex = array.First();\n
    \       long lastIndex = array.Last();\n        long firstSumIndex = array.First();\n
    \       long lastSumIndex = array.Last();\n        long firstSumIndex2 = array.First();\n
    \       long lastSumIndex2 = array.Last();\n        long firstSumIndex3 = array.First();\n
    \       long lastSumIndex3 = array.Last();\n        long firstSumIndex4 = array.First();\n
    \       long lastSumIndex4 = array.Last();\n        long firstSumIndex5 = array.First();\n
    \       long lastSumIndex5 = array.Last();\n        long firstSumIndex6 = array.First();\n
    \       long lastSumIndex6 = array.Last();\n        long firstSumIndex7 = array.First();\n
    \       long lastSumIndex7 = array.Last();\n        long firstSumIndex8 = array.First();\n
    \       long lastSumIndex8 = array.Last();\n        long firstSumIndex9 = array.First();\n
    \       long lastSumIndex9 = array.Last();\n        long firstSumIndex10 = array.First();\n
    \       long lastSumIndex10 = array.Last();\n        long firstSumIndex11 = array.First();\n
    \       long lastSumIndex11 = array.Last();\n        long firstSumIndex12 = array.First();\n
    \       long lastSumIndex12 = array.Last();\n        long firstSumIndex13 = array.First();\n
    \       long lastSumIndex13 = array.Last();\n        long firstSumIndex14 = array.First();\n
    \       long lastSumIndex14 = array.Last();\n        long firstSumIndex15 = array.First();\n
    \       long lastSumIndex15 = array.Last();\n        long firstSumIndex16 = array.First();\n
    \       long lastSumIndex16 = array.Last();\n        long firstSumIndex17 = array.First();\n
    \       long lastSumIndex17 = array.Last();\n        long firstSumIndex18 = array.First();\n
    \       long lastSumIndex18 = array.Last();\n        long firstSumIndex19 = array.First();\n
    \       long lastSumIndex19 = array.Last();\n        long firstSumIndex20 = array.First();\n
    \       long lastSumIndex20 = array.Last();\n        long firstSumIndex21 = array.First();\n
    \       long lastSumIndex21 = array.Last();\n        long firstSumIndex22 = array.First();\n
    \       long lastSumIndex22 = array.Last();\n        long firstSumIndex23 = array.First();\n
    \       long lastSumIndex23 = array.Last();\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(SortArray((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpysetb0uf.cs(16,14): warning CS0219: The variable ''sum'' is assigned but
    its value is never used

    /tmp/tmpysetb0uf.cs(17,14): warning CS0219: The variable ''lastSum'' is assigned
    but its value is never used

    /tmp/tmpysetb0uf.cs(18,14): warning CS0219: The variable ''firstSum'' is assigned
    but its value is never used

    /tmp/tmpysetb0uf.cs(15,30): error CS0161: ''Problem.SortArray(List<long>)'': not
    all code paths return a value

    '
  timestamp: 1659977114
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of non-negative integers, return a copy of the
    given array after sorting,\n    // you will sort the given array in ascending
    order if the sum( first index value, last index value) is odd,\n    // or sort
    it in descending order if the sum( first index value, last index value) is even.\n
    \   // Note:\n    // * don't change the given array.\n    // Examples:\n    public
    static List<long> SortArray(List<long> array) {\n        long sum = 0;\n        long
    last = 0;\n        long first = 0;\n        long temp = 0;\n        List<long>
    result = new List<long>();\n        foreach (long i in array) {\n            sum
    += i;\n            if (sum % 2 == 1) {\n                temp = last;\n                last
    = first;\n                first = temp;\n            }\n            result.Add(i);\n
    \       }\n        Array.Sort(result);\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(SortArray((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp2avoiob5.cs(30,20): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''System.Array''

    '
  timestamp: 1659977114
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of non-negative integers, return a copy of the
    given array after sorting,\n    // you will sort the given array in ascending
    order if the sum( first index value, last index value) is odd,\n    // or sort
    it in descending order if the sum( first index value, last index value) is even.\n
    \   // Note:\n    // * don't change the given array.\n    // Examples:\n    public
    static List<long> SortArray(List<long> array) {\n        long sum = 0;\n        long
    temp;\n        List<long> result = new List<long>();\n        foreach (long i
    in array) {\n            sum += i;\n        }\n        if (sum % 2 == 0) {\n            temp
    = sum;\n            sum = array.Sum();\n            foreach (long i in array)
    {\n                sum += i;\n            }\n            while (temp != sum) {\n
    \               result.Add(array[array.Count - 1]);\n                array.RemoveAt(array.Count
    - 1);\n                sum -= array[array.Count - 1];\n            }\n        }
    else {\n            temp = sum;\n            sum = array.Reverse().Sum();\n            foreach
    (long i in array) {\n                sum += i;\n            }\n            while
    (temp != sum) {\n                result.Add(array[array.Count - 1]);\n                array.RemoveAt(array.Count
    - 1);\n                sum -= array[array.Count - 1];\n            }\n        }\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(SortArray((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp6h3_prdo.cs(35,34): error CS0023: Operator ''.'' cannot be applied to
    operand of type ''void''

    '
  timestamp: 1659977114
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of non-negative integers, return a copy of the
    given array after sorting,\n    // you will sort the given array in ascending
    order if the sum( first index value, last index value) is odd,\n    // or sort
    it in descending order if the sum( first index value, last index value) is even.\n
    \   // Note:\n    // * don't change the given array.\n    // Examples:\n    public
    static List<long> SortArray(List<long> array) {\n        long sum = 0;\n        long
    temp = 0;\n        List<long> result = new List<long>();\n        foreach (long
    i in array) {\n            sum += i;\n        }\n        if (sum % 2 == 0) {\n
    \           temp = sum;\n            sum = array.Sum();\n            foreach (long
    i in array) {\n                temp -= i;\n                if (temp < 0) {\n                    result.Add(i);\n
    \                   temp += i;\n                }\n            }\n        } else
    {\n            temp = sum;\n            sum = array.Reverse().Sum();\n            foreach
    (long i in array) {\n                temp -= i;\n                if (temp < 0)
    {\n                    result.Add(i);\n                    temp += i;\n                }\n
    \           }\n        }\n        return result;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(SortArray((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpgl661xaq.cs(34,34): error CS0023: Operator ''.'' cannot be applied to
    operand of type ''void''

    '
  timestamp: 1659977114
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of non-negative integers, return a copy of the
    given array after sorting,\n    // you will sort the given array in ascending
    order if the sum( first index value, last index value) is odd,\n    // or sort
    it in descending order if the sum( first index value, last index value) is even.\n
    \   // Note:\n    // * don't change the given array.\n    // Examples:\n    public
    static List<long> SortArray(List<long> array) {\n        long sum = 0;\n        long
    first = 0;\n        long last = 0;\n        foreach (var item in array) {\n            sum
    += item;\n            if (sum % 2 == 0) {\n                first = item;\n            }
    else {\n                last = item;\n            }\n        }\n        List<long>
    result = new List<long>();\n        long temp;\n        long temp2;\n        long
    temp3;\n        long temp4;\n        long temp5;\n        long temp6;\n        long
    temp7;\n        long temp8;\n        long temp9;\n        long temp10;\n        long
    temp11;\n        long temp12;\n        long temp13;\n        long temp14;\n        long
    temp15;\n        long temp16;\n        long temp17;\n        long temp18;\n        long
    temp19;\n        long temp20;\n        long temp21;\n        long temp22;\n        long
    temp23;\n        long temp24;\n        long temp25;\n        long temp26;\n        long
    temp27;\n        long temp28;\n        long temp29;\n        long temp30;\n        long
    temp31;\n        long temp32;\n        long temp33;\n        long temp34;\n        long
    temp35;\n        long temp36;\n        long temp37;\n        long temp38;\n        long
    temp39;\n        long temp40;\n        long temp41;\n        long temp42;\n        long
    temp43;\n        long temp44;\n        long temp45;\n        long temp46;\n        long
    temp47;\n        long temp48;\n        long temp49;\n        long temp50;\n        long
    temp51;\n        long temp52;\n        long temp53;\n        long temp54;\n        long
    temp55;\n        long temp56;\n        long temp57;\n        long temp58;\n        long
    temp59;\n        long temp60;\n        long temp61;\n        long temp62;\n        long
    temp63;\n        long temp64;\n        long temp65;\n        long temp66;\n        long
    temp67;\n        long temp68;\n        long temp69;\n        long temp70;\n        long
    temp71;\n        long temp72;\n        long temp73;\n        long temp74;\n        long
    temp75;\n        long temp76;\n        long temp77;\n        long temp78;\n        long
    temp79;\n\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortArray((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)5L}))).Equals((new List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpunabjz3m.cs(28,14): warning CS0168: The variable ''temp'' is declared
    but never used

    /tmp/tmpunabjz3m.cs(29,14): warning CS0168: The variable ''temp2'' is declared
    but never used

    /tmp/tmpunabjz3m.cs(30,14): warning CS0168: The variable ''temp3'' is declared
    but never used

    /tmp/tmpunabjz3m.cs(31,14): warning CS0168: The variable ''temp4'' is declared
    but never used

    /tmp/tmpunabjz3m.cs(32,14): warning CS0168: The variable ''temp5'' is declared
    but never used

    /tmp/tmpunabjz3m.cs(33,14): warning CS0168: The variable ''temp6'' is declared
    but never used

    /tmp/tmpunabjz3m.cs(34,14): warning CS0168: The variable ''temp7'' is declared
    but never used

    /tmp/tmpunabjz3m.cs(35,14): warning CS0168: The variable ''temp8'' is declared
    but never used

    /tmp/tmpunabjz3m.cs(36,14): warning CS0168: The variable ''temp9'' is declared
    but never used

    /tmp/tmpunabjz3m.cs(37,14): warning CS0168: The variable ''temp10'' is declared
    but never used

    /tmp/tmpunabjz3m.cs(38,14): warning CS0168: The variable ''temp11'' is declared
    but never used

    /tmp/tmpunabjz3m.cs(39,14): warning CS0168: The variable ''temp12'' is declared
    but never used

    /tmp/tmpunabjz3m.cs(40,14): warning CS0168: The variable ''temp13'' is declared
    but never used

    /tmp/tmpunabjz3m.cs(41,14): warning CS0168: The variable ''temp14'' is declared
    but never used

    /tmp/tmpunabjz3m.cs(42,14): warning CS0168: The variable ''temp15'' is declared
    but never used

    /tmp/tmpunabjz3m.cs(43,14): warning CS0168: The variable ''temp16'' is declared
    but never used

    /tmp/tmpunabjz3m.cs(44,14): warning CS0168: The variable ''temp17'' is declared
    but never used

    /tmp/tmpunabjz3m.cs(45,14): warning CS0168: The variable ''temp18'' is declared
    but never used

    /tmp/tmpunabjz3m.cs(46,14): warning CS0168: The variable ''temp19'' is declared
    but never used

    /tmp/tmpunabjz3m.cs(47,14): warning CS0168: The variable ''temp20'' is declared
    but never used

    /tmp/tmpunabjz3m.cs(48,14): warning CS0168: The variable ''temp21'' is de'
  timestamp: 1659977114
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of non-negative integers, return a copy of the
    given array after sorting,\n    // you will sort the given array in ascending
    order if the sum( first index value, last index value) is odd,\n    // or sort
    it in descending order if the sum( first index value, last index value) is even.\n
    \   // Note:\n    // * don't change the given array.\n    // Examples:\n    public
    static List<long> SortArray(List<long> array) {\n        long sum = 0;\n        long
    temp;\n        List<long> result = new List<long>();\n        foreach (long i
    in array) {\n            sum += i;\n        }\n        if (sum % 2 == 0) {\n            temp
    = sum;\n            while (temp > 0) {\n                result.Add(temp % 2);\n
    \               temp /= 2;\n            }\n        } else {\n            temp
    = sum;\n            while (temp > 0) {\n                result.Add(temp % 2);\n
    \               temp /= 2;\n            }\n            result.Reverse();\n        }\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(SortArray((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <205820693ea749a296e8f2b4e2881b46>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <205820693ea749a296e8f2b4e2881b46>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977114
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of non-negative integers, return a copy of the
    given array after sorting,\n    // you will sort the given array in ascending
    order if the sum( first index value, last index value) is odd,\n    // or sort
    it in descending order if the sum( first index value, last index value) is even.\n
    \   // Note:\n    // * don't change the given array.\n    // Examples:\n    public
    static List<long> SortArray(List<long> array) {\n        long sum = 0;\n        long
    sum2 = 0;\n        List<long> result = new List<long>();\n        foreach (long
    i in array) {\n            sum += i;\n        }\n        foreach (long i in array)
    {\n            sum2 += i;\n        }\n        if (sum % 2 == 0) {\n            Array.Sort(array);\n
    \           foreach (long i in array) {\n                result.Add(i);\n            }\n
    \       }\n        else {\n            Array.Sort(array);\n            foreach
    (long i in array) {\n                result.Add(i);\n            }\n            Array.Sort(result);\n
    \       }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(SortArray((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpuchmq6kh.cs(26,24): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''System.Array''

    /tmp/tmpuchmq6kh.cs(32,24): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''System.Array''

    /tmp/tmpuchmq6kh.cs(36,24): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''System.Array''

    '
  timestamp: 1659977114
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of non-negative integers, return a copy of the
    given array after sorting,\n    // you will sort the given array in ascending
    order if the sum( first index value, last index value) is odd,\n    // or sort
    it in descending order if the sum( first index value, last index value) is even.\n
    \   // Note:\n    // * don't change the given array.\n    // Examples:\n    public
    static List<long> SortArray(List<long> array) {\n        List<long> result = new
    List<long>();\n        long sum = 0;\n        long lastSum = 0;\n        long
    firstSum = 0;\n        long firstIndex = array.First();\n        long lastIndex
    = array.Last();\n        long firstValue = array.First();\n        long lastValue
    = array.Last();\n        bool isEven = lastValue % 2 == 0;\n        bool isOdd
    = firstValue % 2 == 0;\n        bool isOddOrEven = isEven ? isOdd : isEven;\n
    \       bool isOddOrEvenReverse = isEven ? isOdd : isEven;\n        bool isOddOrEvenReverse
    = isEven ? isOdd : isEven;\n        bool isOddOrEvenReverse = isEven ? isOdd :
    isEven;\n        bool isOddOrEvenReverse = isEven ? isOdd : isEven;\n        bool
    isOddOrEvenReverse = isEven ? isOdd : isEven;\n        bool isOddOrEvenReverse
    = isEven ? isOdd : isEven;\n        bool isOddOrEvenReverse = isEven ? isOdd :
    isEven;\n        bool isOddOrEvenReverse = isEven ? isOdd : isEven;\n        bool
    isOddOrEvenReverse = isEven ? isOdd : isEven;\n        bool isOddOrEvenReverse
    = isEven ? isOdd : isEven;\n        bool isOddOrEvenReverse = isEven ? isOdd :
    isEven;\n        bool isOddOrEvenReverse = isEven ? isOdd : isEven;\n        bool
    isOddOrEvenReverse = isEven ? isOdd : isEven;\n        bool isOddOrEvenReverse
    = isEven ? isOdd : isEven;\n        bool isOddOrEvenReverse = isEven ? isOdd :
    isEven;\n        bool isOddOrEvenReverse = isEven ? isOdd : isEven;\n        bool
    isOddOrEvenReverse = isEven ? isOdd : isEven;\n        bool isOddOrEvenReverse
    = isEven ? isOdd : isEven;\n        bool isOddOrEvenReverse = isEven ? isOdd :
    isEven;\n        bool isOddOrEvenReverse = isEven ? isOdd : isEven;\n        bool
    isOddOrEvenReverse = isEven ? isOdd : isEven;\n        bool isOddOrEvenReverse
    = isEven ? isO\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortArray((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)5L}))).Equals((new List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmphafmv4v5.cs(48,47): error CS1003: Syntax error, '':'' expected

    /tmp/tmphafmv4v5.cs(48,47): error CS1525: Invalid expression term ''}''

    /tmp/tmphafmv4v5.cs(48,47): error CS1002: ; expected

    '
  timestamp: 1659977114
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of non-negative integers, return a copy of the
    given array after sorting,\n    // you will sort the given array in ascending
    order if the sum( first index value, last index value) is odd,\n    // or sort
    it in descending order if the sum( first index value, last index value) is even.\n
    \   // Note:\n    // * don't change the given array.\n    // Examples:\n    public
    static List<long> SortArray(List<long> array) {\n        long sum = 0;\n        long
    lastSum = 0;\n        long firstSum = 0;\n        long tempSum = 0;\n        List<long>
    result = new List<long>();\n        foreach (long i in array) {\n            sum
    += i;\n            lastSum = sum;\n            firstSum = sum;\n            tempSum
    = sum;\n            while (tempSum > 0) {\n                if (tempSum % 2 ==
    0) {\n                    result.Add(firstSum);\n                    tempSum -=
    firstSum;\n                } else {\n                    result.Add(lastSum);\n
    \                   tempSum -= lastSum;\n                }\n            }\n        }\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(SortArray((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f5912afe5f034fc1938b936589826a79>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f5912afe5f034fc1938b936589826a79>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977114
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of non-negative integers, return a copy of the
    given array after sorting,\n    // you will sort the given array in ascending
    order if the sum( first index value, last index value) is odd,\n    // or sort
    it in descending order if the sum( first index value, last index value) is even.\n
    \   // Note:\n    // * don't change the given array.\n    // Examples:\n    public
    static List<long> SortArray(List<long> array) {\n        long sum = 0;\n        long
    first = 0;\n        long last = 0;\n        long mid = 0;\n        List<long>
    result = new List<long>();\n        foreach (long i in array) {\n            sum
    += i;\n            if (sum % 2 == 0) {\n                result.Add(i);\n                first
    = i;\n            } else {\n                last = i;\n            }\n        }\n
    \       if (sum % 2 == 1) {\n            result.Add(last);\n            first
    = last;\n        }\n        mid = first + (last - first) / 2;\n        Array.Sort(array,
    first, mid);\n        Array.Sort(array, mid, last);\n        return result;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(SortArray((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)5L}))).Equals((new List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpu18m5_sa.cs(35,20): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''System.Array''

    /tmp/tmpu18m5_sa.cs(35,27): error CS1503: Argument 2: cannot convert from ''long''
    to ''int''

    /tmp/tmpu18m5_sa.cs(35,34): error CS1503: Argument 3: cannot convert from ''long''
    to ''int''

    /tmp/tmpu18m5_sa.cs(36,20): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''System.Array''

    /tmp/tmpu18m5_sa.cs(36,27): error CS1503: Argument 2: cannot convert from ''long''
    to ''int''

    /tmp/tmpu18m5_sa.cs(36,32): error CS1503: Argument 3: cannot convert from ''long''
    to ''int''

    '
  timestamp: 1659977114
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of non-negative integers, return a copy of the
    given array after sorting,\n    // you will sort the given array in ascending
    order if the sum( first index value, last index value) is odd,\n    // or sort
    it in descending order if the sum( first index value, last index value) is even.\n
    \   // Note:\n    // * don't change the given array.\n    // Examples:\n    public
    static List<long> SortArray(List<long> array) {\n        long sum = 0;\n        long
    sum1 = 0;\n        long sum2 = 0;\n        long sum3 = 0;\n        long sum4 =
    0;\n        long sum5 = 0;\n        long sum6 = 0;\n        long sum7 = 0;\n        long
    sum8 = 0;\n        long sum9 = 0;\n        long sum10 = 0;\n        long sum11
    = 0;\n        long sum12 = 0;\n        long sum13 = 0;\n        long sum14 = 0;\n
    \       long sum15 = 0;\n        long sum16 = 0;\n        long sum17 = 0;\n        long
    sum18 = 0;\n        long sum19 = 0;\n        long sum20 = 0;\n        long sum21
    = 0;\n        long sum22 = 0;\n        long sum23 = 0;\n        long sum24 = 0;\n
    \       long sum25 = 0;\n        long sum26 = 0;\n        long sum27 = 0;\n        long
    sum28 = 0;\n        long sum29 = 0;\n        long sum30 = 0;\n        long sum31
    = 0;\n        long sum32 = 0;\n        long sum33 = 0;\n        long sum34 = 0;\n
    \       long sum35 = 0;\n        long sum36 = 0;\n        long sum37 = 0;\n        long
    sum38 = 0;\n        long sum39 = 0;\n        long sum40 = 0;\n        long sum41
    = 0;\n        long sum42 = 0;\n        long sum43 = 0;\n        long sum44 = 0;\n
    \       long sum45 = 0;\n        long sum46 = 0;\n        long sum47 = 0;\n        long
    sum48 = 0;\n        long sum49 = 0;\n        long sum50 = 0;\n        long sum51
    = 0;\n        long sum52 = 0;\n        long sum53 = 0;\n        long sum54 = 0;\n
    \       long sum55 = 0;\n        long sum56 = 0;\n        long sum57 = 0;\n        long
    sum58 = 0;\n        long sum59 = 0;\n        long sum60 = 0;\n        long sum61
    = 0;\n        long sum62 = 0;\n        long sum63 = 0;\n        long sum64 = 0;\n
    \       long sum65 = 0;\n        long sum66 = 0;\n        long sum67 = 0;\n        long
    sum68 = 0;\n        long sum69 = 0;\n        long sum70 = 0;\n        long sum71
    = 0;\n        long sum72 = 0;\n        long sum73 = 0;\n        long sum74 = 0;\n
    \       long sum75 = 0;\n        long sum76 = 0;\n        long sum77 = 0;\n        long
    sum78 = 0;\n        long sum79 = 0;\n        long sum80 = 0;\n        long sum81
    = 0;\n        long sum82 = 0;\n        long sum83 = 0;\n        long sum84 = 0;\n
    \       long sum85 = 0;\n        long \n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(SortArray((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmphw28v9l8.cs(102,13): error CS1001: Identifier expected

    /tmp/tmphw28v9l8.cs(102,13): error CS1002: ; expected

    '
  timestamp: 1659977111
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of non-negative integers, return a copy of the
    given array after sorting,\n    // you will sort the given array in ascending
    order if the sum( first index value, last index value) is odd,\n    // or sort
    it in descending order if the sum( first index value, last index value) is even.\n
    \   // Note:\n    // * don't change the given array.\n    // Examples:\n    public
    static List<long> SortArray(List<long> array) {\n        long sum = 0;\n        long
    last = 0;\n        long first = 0;\n        long temp;\n        List<long> result
    = new List<long>();\n        foreach (long i in array) {\n            sum += i;\n
    \           last = i;\n        }\n        foreach (long i in array) {\n            first
    = i;\n        }\n        if (sum % 2 == 0) {\n            temp = sum;\n            sum
    = first + last;\n            first = temp;\n        }\n        long tempSum =
    0;\n        long tempFirst = 0;\n        long tempLast = 0;\n        foreach (long
    i in array) {\n            tempSum += i;\n            tempLast = i;\n            tempFirst
    = i;\n        }\n        if (tempSum % 2 == 0) {\n            tempSum = tempFirst
    + tempLast;\n            tempFirst = tempSum;\n            tempLast = tempSum;\n
    \       }\n        long tempSum2 = 0;\n        long tempFirst2 = 0;\n        long
    tempLast2 = 0;\n        foreach (long i in array) {\n            tempSum2 += i;\n
    \           tempLast2 = i;\n            tempFirst2 = i;\n        }\n        if
    (tempSum2 % 2 == 0) {\n            tempSum2 = tempFirst2 + tempLast2;\n            tempFirst2
    = tempSum2;\n            tempLast2 = tempSum2;\n        }\n        long tempSum3
    = 0;\n        long tempFirst3 = 0;\n        long tempLast3 = 0;\n        foreach
    (long i in array) {\n            tempSum3 += i;\n            tempLast3 = i;\n
    \           tempFirst3 = i;\n        }\n        if (tempSum3 % 2 == 0) {\n            tempSum3
    = tempFirst3 + tempLast3;\n            tempFirst3 = tempSum3;\n            tempLast3
    = tempSum3;\n        }\n        long tempSum4 = 0;\n        long tempFirst4 =
    0;\n        long tempLast4 = 0;\n        foreach (long i in array) {\n            tempSum4
    += i;\n            tempLast4 = i;\n            tempFirst4 = i;\n        }\n        if
    (tempSum4 % 2 == 0) {\n            tempSum4 = tempFirst4 + tempLast4;\n            tempFirst4
    = tempSum4;\n            tempLast4 = tempSum4;\n        }\n        long tempSum5
    = 0;\n        long tempFirst5 = 0;\n        long tempLast5 = 0;\n        foreach
    (long i in array) {\n            tempSum5 += i;\n            tempLast5 = i;\n
    \           tempFirst5 = i;\n        }\n        if (tempSum5 % 2 == 0) {\n            tempSum5
    = tempFirst5 + tempLast5;\n            tempFirst5 = tempSum5;\n            tempLast5
    = tempSum5;\n        }\n        long tempSum6 = 0;\n        long tempFirst6 =
    0;\n        long tempLast6 = 0;\n        foreach (long i in array) {\n            tempSum6
    += i;\n            tempLast6 = i;\n            tempFirst6 = i;\n        }\n        if
    (tempSum\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortArray((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)5L}))).Equals((new List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp4uu1lyit.cs(106,20): error CS1026: ) expected

    /tmp/tmp4uu1lyit.cs(106,20): error CS1525: Invalid expression term ''}''

    /tmp/tmp4uu1lyit.cs(106,20): error CS1002: ; expected

    '
  timestamp: 1659977114
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of non-negative integers, return a copy of the
    given array after sorting,\n    // you will sort the given array in ascending
    order if the sum( first index value, last index value) is odd,\n    // or sort
    it in descending order if the sum( first index value, last index value) is even.\n
    \   // Note:\n    // * don't change the given array.\n    // Examples:\n    public
    static List<long> SortArray(List<long> array) {\n        long sum = 0;\n        long
    sum2 = 0;\n        List<long> result = new List<long>();\n        foreach (long
    i in array) {\n            sum += i;\n        }\n        sum2 = sum % 2;\n        if
    (sum2 == 0) {\n            foreach (long i in array) {\n                result.Add(i);\n
    \           }\n        } else {\n            foreach (long i in array) {\n                result.Add(-i);\n
    \           }\n        }\n        return result;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(SortArray((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <686ba2ed7a914babacb5b928d620e2ed>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <686ba2ed7a914babacb5b928d620e2ed>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977110
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of non-negative integers, return a copy of the
    given array after sorting,\n    // you will sort the given array in ascending
    order if the sum( first index value, last index value) is odd,\n    // or sort
    it in descending order if the sum( first index value, last index value) is even.\n
    \   // Note:\n    // * don't change the given array.\n    // Examples:\n    public
    static List<long> SortArray(List<long> array) {\n        long sum = 0;\n        long
    temp = 0;\n        List<long> result = new List<long>();\n        foreach (long
    i in array) {\n            sum += i;\n        }\n        if (sum % 2 == 0) {\n
    \           temp = sum;\n            sum = sum / 2;\n            while (temp !=
    sum) {\n                result.Add(temp);\n                temp = temp / 2;\n
    \           }\n        } else {\n            temp = sum;\n            sum = sum
    / 2;\n            while (temp != sum) {\n                result.Add(temp);\n                temp
    = temp / 2;\n            }\n            temp = sum;\n            sum = sum / 2;\n
    \           while (temp != sum) {\n                result.Add(temp);\n                temp
    = temp / 2;\n            }\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(SortArray((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <608d0309916341dfad4b15a6c52eef34>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <608d0309916341dfad4b15a6c52eef34>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977110
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of non-negative integers, return a copy of the
    given array after sorting,\n    // you will sort the given array in ascending
    order if the sum( first index value, last index value) is odd,\n    // or sort
    it in descending order if the sum( first index value, last index value) is even.\n
    \   // Note:\n    // * don't change the given array.\n    // Examples:\n    public
    static List<long> SortArray(List<long> array) {\n        long sum = 0;\n        long
    temp = 0;\n        List<long> result = new List<long>();\n        foreach (long
    i in array) {\n            sum += i;\n        }\n        if (sum % 2 == 0) {\n
    \           temp = sum;\n            sum = sum / 2;\n            foreach (long
    i in array) {\n                sum += i;\n            }\n            sum = temp;\n
    \       }\n        Array.Sort(array);\n        foreach (long i in array) {\n            result.Add(i);\n
    \       }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(SortArray((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpg3ydiyu8.cs(30,20): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''System.Array''

    '
  timestamp: 1659977114
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of non-negative integers, return a copy of the
    given array after sorting,\n    // you will sort the given array in ascending
    order if the sum( first index value, last index value) is odd,\n    // or sort
    it in descending order if the sum( first index value, last index value) is even.\n
    \   // Note:\n    // * don't change the given array.\n    // Examples:\n    public
    static List<long> SortArray(List<long> array) {\n        long sum = 0;\n        long
    last = 0;\n        long first = 0;\n        List<long> result = new List<long>();\n
    \       foreach (long i in array) {\n            sum += i;\n            if (sum
    % 2 == 0) {\n                last = i;\n            } else {\n                first
    = i;\n            }\n            result.Add(first);\n            result.Add(last);\n
    \       }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(SortArray((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <8af8386e0bd944e29a34e6edd47d07a3>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <8af8386e0bd944e29a34e6edd47d07a3>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977112
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of non-negative integers, return a copy of the
    given array after sorting,\n    // you will sort the given array in ascending
    order if the sum( first index value, last index value) is odd,\n    // or sort
    it in descending order if the sum( first index value, last index value) is even.\n
    \   // Note:\n    // * don't change the given array.\n    // Examples:\n    public
    static List<long> SortArray(List<long> array) {\n        long sum = 0;\n        long
    sum2 = 0;\n        long sum3 = 0;\n        long sum4 = 0;\n        long sum5 =
    0;\n        long sum6 = 0;\n        long sum7 = 0;\n        long sum8 = 0;\n        long
    sum9 = 0;\n        long sum10 = 0;\n        long sum11 = 0;\n        long sum12
    = 0;\n        long sum13 = 0;\n        long sum14 = 0;\n        long sum15 = 0;\n
    \       long sum16 = 0;\n        long sum17 = 0;\n        long sum18 = 0;\n        long
    sum19 = 0;\n        long sum20 = 0;\n        long sum21 = 0;\n        long sum22
    = 0;\n        long sum23 = 0;\n        long sum24 = 0;\n        long sum25 = 0;\n
    \       long sum26 = 0;\n        long sum27 = 0;\n        long sum28 = 0;\n        long
    sum29 = 0;\n        long sum30 = 0;\n        long sum31 = 0;\n        long sum32
    = 0;\n        long sum33 = 0;\n        long sum34 = 0;\n        long sum35 = 0;\n
    \       long sum36 = 0;\n        long sum37 = 0;\n        long sum38 = 0;\n        long
    sum39 = 0;\n        long sum40 = 0;\n        long sum41 = 0;\n        long sum42
    = 0;\n        long sum43 = 0;\n        long sum44 = 0;\n        long sum45 = 0;\n
    \       long sum46 = 0;\n        long sum47 = 0;\n        long sum48 = 0;\n        long
    sum49 = 0;\n        long sum50 = 0;\n        long sum51 = 0;\n        long sum52
    = 0;\n        long sum53 = 0;\n        long sum54 = 0;\n        long sum55 = 0;\n
    \       long sum56 = 0;\n        long sum57 = 0;\n        long sum58 = 0;\n        long
    sum59 = 0;\n        long sum60 = 0;\n        long sum61 = 0;\n        long sum62
    = 0;\n        long sum63 = 0;\n        long sum64 = 0;\n        long sum65 = 0;\n
    \       long sum66 = 0;\n        long sum67 = 0;\n        long sum68 = 0;\n        long
    sum69 = 0;\n        long sum70 = 0;\n        long sum71 = 0;\n        long sum72
    = 0;\n        long sum73 = 0;\n        long sum74 = 0;\n        long sum75 = 0;\n
    \       long sum76 = 0;\n        long sum77 = 0;\n        long sum78 = 0;\n        long
    sum79 = 0;\n        long sum80 = 0;\n        long sum81 = 0;\n        long sum82
    = 0;\n        long sum83 = 0;\n        long sum84 = 0;\n        long sum85 = 0;\n
    \       long sum86 = 0;\n        \n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(SortArray((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpmchrwcpg.cs(16,14): warning CS0219: The variable ''sum'' is assigned but
    its value is never used

    /tmp/tmpmchrwcpg.cs(17,14): warning CS0219: The variable ''sum2'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(18,14): warning CS0219: The variable ''sum3'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(19,14): warning CS0219: The variable ''sum4'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(20,14): warning CS0219: The variable ''sum5'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(21,14): warning CS0219: The variable ''sum6'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(22,14): warning CS0219: The variable ''sum7'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(23,14): warning CS0219: The variable ''sum8'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(24,14): warning CS0219: The variable ''sum9'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(25,14): warning CS0219: The variable ''sum10'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(26,14): warning CS0219: The variable ''sum11'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(27,14): warning CS0219: The variable ''sum12'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(28,14): warning CS0219: The variable ''sum13'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(29,14): warning CS0219: The variable ''sum14'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(30,14): warning CS0219: The variable ''sum15'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(31,14): warning CS0219: The variable ''sum16'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(32,14): warning CS0219: The variable ''sum17'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(33,14): warning CS0219: The variable ''sum18'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(34,14): warning CS021'
  timestamp: 1659977110
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of non-negative integers, return a copy of the
    given array after sorting,\n    // you will sort the given array in ascending
    order if the sum( first index value, last index value) is odd,\n    // or sort
    it in descending order if the sum( first index value, last index value) is even.\n
    \   // Note:\n    // * don't change the given array.\n    // Examples:\n    public
    static List<long> SortArray(List<long> array) {\n        long sum = 0;\n        long
    maxSum = array.Sum();\n        long minSum = array.Sum(x => x);\n        long
    maxValue = array.Max();\n        long minValue = array.Min();\n        long maxIndex
    = array.FindIndex(x => x > maxValue);\n        long minIndex = array.FindIndex(x
    => x < minValue);\n        long maxSumOdd = maxSum - maxValue + minValue;\n        long
    maxSumEven = maxSum + minValue;\n        long minSumOdd = minSum - minValue +
    maxValue;\n        long minSumEven = minSum + maxValue;\n        long maxSumOddIndex
    = array.FindIndex(x => x > maxSumOdd);\n        long maxSumEvenIndex = array.FindIndex(x
    => x > maxSumEven);\n        long minSumOddIndex = array.FindIndex(x => x < minSumOdd);\n
    \       long minSumEvenIndex = array.FindIndex(x => x < minSumEven);\n        long
    maxSumOddIndex2 = array.FindIndex(x => x > maxSumOddIndex);\n        long maxSumEvenIndex2
    = array.FindIndex(x => x > maxSumEvenIndex);\n        long minSumOddIndex2 = array.FindIndex(x
    => x < minSumOddIndex);\n        long minSumEvenIndex2 = array.FindIndex(x =>
    x < minSumEvenIndex);\n        long maxSumOddIndex3 = array.FindIndex(x => x >
    maxSumOddIndex2);\n        long maxSumEvenIndex3 = array.FindIndex(x => x > maxSumEvenIndex2);\n
    \       long minSumOddIndex3 = array.FindIndex(x => x < minSumOddIndex2);\n        long
    minSumEvenIndex3 = array.FindIndex(x => x < minSumEvenIndex2);\n        long maxSumOddIndex4
    = array.FindIndex(x => x > maxSumOddIndex3);\n        long maxSumEvenIndex4 =
    array.FindIndex(x => x > maxSumEvenIndex3);\n        long minSumOddIndex4 = array.FindIndex(x
    => x < minSumOddIndex3);\n        long minSumEvenIndex4 = array.FindIndex(x =>
    x < minSumEvenIndex3);\n        long maxSumOddIndex5 = array.FindIndex(x => x
    > maxSumOddIndex4);\n        long maxSumEvenIndex5 = array.FindIndex(x => x >
    maxSumEvenIndex4);\n        long minSumOddIndex5 = array.FindIndex(x => x < minSumOddIndex4);\n
    \       long minSumEvenIndex5 = array.FindIndex(x => x < minSumEvenIndex4);\n\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(SortArray((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)5L}))).Equals((new List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp27gi_35u.cs(16,14): warning CS0219: The variable ''sum'' is assigned but
    its value is never used

    /tmp/tmp27gi_35u.cs(15,30): error CS0161: ''Problem.SortArray(List<long>)'': not
    all code paths return a value

    '
  timestamp: 1659977114
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of non-negative integers, return a copy of the
    given array after sorting,\n    // you will sort the given array in ascending
    order if the sum( first index value, last index value) is odd,\n    // or sort
    it in descending order if the sum( first index value, last index value) is even.\n
    \   // Note:\n    // * don't change the given array.\n    // Examples:\n    public
    static List<long> SortArray(List<long> array) {\n        long sum = 0;\n        long
    lastSum = 0;\n        long firstSum = 0;\n        long lastSum = 0;\n        long
    firstSum = 0;\n        long lastSum = 0;\n        long firstSum = 0;\n        long
    lastSum = 0;\n        long firstSum = 0;\n        long lastSum = 0;\n        long
    firstSum = 0;\n        long lastSum = 0;\n        long firstSum = 0;\n        long
    lastSum = 0;\n        long firstSum = 0;\n        long lastSum = 0;\n        long
    firstSum = 0;\n        long lastSum = 0;\n        long firstSum = 0;\n        long
    lastSum = 0;\n        long firstSum = 0;\n        long lastSum = 0;\n        long
    firstSum = 0;\n        long lastSum = 0;\n        long firstSum = 0;\n        long
    lastSum = 0;\n        long firstSum = 0;\n        long lastSum = 0;\n        long
    firstSum = 0;\n        long lastSum = 0;\n        long firstSum = 0;\n        long
    lastSum = 0;\n        long firstSum = 0;\n        long lastSum = 0;\n        long
    firstSum = 0;\n        long lastSum = 0;\n        long firstSum = 0;\n        long
    lastSum = 0;\n        long firstSum = 0;\n        long lastSum = 0;\n        long
    firstSum = 0;\n        long lastSum = 0;\n        long firstSum = 0;\n        long
    lastSum = 0;\n        long firstSum = 0;\n        long lastSum = 0;\n        long
    firstSum = 0;\n        long lastSum = 0;\n        long firstSum = 0;\n        long
    lastSum = 0;\n        long firstSum = 0;\n        long lastSum = 0;\n        long
    firstSum = 0;\n        long lastSum = 0;\n        long firstSum = 0;\n        long
    lastSum = 0;\n        long firstSum = 0;\n        long lastSum = 0;\n        long
    firstSum = 0;\n        long lastSum = 0;\n        long firstSum = 0;\n        long
    lastSum = 0;\n        long firstSum = 0;\n        long lastSum = 0;\n        long
    firstSum = 0;\n        long lastSum = 0;\n        long firstSum = 0;\n        long
    lastSum = 0;\n        long firstSum = 0;\n        long lastSum = 0;\n        long
    firstSum = 0;\n        long lastSum = 0;\n        long firstSum = 0;\n        long
    lastSum = 0;\n        long firstSum = 0;\n        long lastSum = 0;\n        long
    firstSum = 0;\n        long lastSum = 0;\n        long firstSum = 0;\n        long
    lastSum = 0;\n        long firstSum = 0;\n        long lastSum = 0;\n        long
    firstSum = 0;\n        long lastSum = 0;\n        long firstSum = 0;\n        long
    last\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortArray((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)5L}))).Equals((new List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpu6xfuuys.cs(101,18): error CS1002: ; expected

    '
  timestamp: 1659977109
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of non-negative integers, return a copy of the
    given array after sorting,\n    // you will sort the given array in ascending
    order if the sum( first index value, last index value) is odd,\n    // or sort
    it in descending order if the sum( first index value, last index value) is even.\n
    \   // Note:\n    // * don't change the given array.\n    // Examples:\n    public
    static List<long> SortArray(List<long> array) {\n        long sum = 0;\n        long
    sum2 = 0;\n        long sum3 = 0;\n        long sum4 = 0;\n        long sum5 =
    0;\n        long sum6 = 0;\n        long sum7 = 0;\n        long sum8 = 0;\n        long
    sum9 = 0;\n        long sum10 = 0;\n        long sum11 = 0;\n        long sum12
    = 0;\n        long sum13 = 0;\n        long sum14 = 0;\n        long sum15 = 0;\n
    \       long sum16 = 0;\n        long sum17 = 0;\n        long sum18 = 0;\n        long
    sum19 = 0;\n        long sum20 = 0;\n        long sum21 = 0;\n        long sum22
    = 0;\n        long sum23 = 0;\n        long sum24 = 0;\n        long sum25 = 0;\n
    \       long sum26 = 0;\n        long sum27 = 0;\n        long sum28 = 0;\n        long
    sum29 = 0;\n        long sum30 = 0;\n        long sum31 = 0;\n        long sum32
    = 0;\n        long sum33 = 0;\n        long sum34 = 0;\n        long sum35 = 0;\n
    \       long sum36 = 0;\n        long sum37 = 0;\n        long sum38 = 0;\n        long
    sum39 = 0;\n        long sum40 = 0;\n        long sum41 = 0;\n        long sum42
    = 0;\n        long sum43 = 0;\n        long sum44 = 0;\n        long sum45 = 0;\n
    \       long sum46 = 0;\n        long sum47 = 0;\n        long sum48 = 0;\n        long
    sum49 = 0;\n        long sum50 = 0;\n        long sum51 = 0;\n        long sum52
    = 0;\n        long sum53 = 0;\n        long sum54 = 0;\n        long sum55 = 0;\n
    \       long sum56 = 0;\n        long sum57 = 0;\n        long sum58 = 0;\n        long
    sum59 = 0;\n        long sum60 = 0;\n        long sum61 = 0;\n        long sum62
    = 0;\n        long sum63 = 0;\n        long sum64 = 0;\n        long sum65 = 0;\n
    \       long sum66 = 0;\n        long sum67 = 0;\n        long sum68 = 0;\n        long
    sum69 = 0;\n        long sum70 = 0;\n        long sum71 = 0;\n        long sum72
    = 0;\n        long sum73 = 0;\n        long sum74 = 0;\n        long sum75 = 0;\n
    \       long sum76 = 0;\n        long sum77 = 0;\n        long sum78 = 0;\n        long
    sum79 = 0;\n        long sum80 = 0;\n        long sum81 = 0;\n        long sum82
    = 0;\n        long sum83 = 0;\n        long sum84 = 0;\n        long sum85 = 0;\n
    \       long sum86 = 0;\n        \n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(SortArray((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpmchrwcpg.cs(16,14): warning CS0219: The variable ''sum'' is assigned but
    its value is never used

    /tmp/tmpmchrwcpg.cs(17,14): warning CS0219: The variable ''sum2'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(18,14): warning CS0219: The variable ''sum3'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(19,14): warning CS0219: The variable ''sum4'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(20,14): warning CS0219: The variable ''sum5'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(21,14): warning CS0219: The variable ''sum6'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(22,14): warning CS0219: The variable ''sum7'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(23,14): warning CS0219: The variable ''sum8'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(24,14): warning CS0219: The variable ''sum9'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(25,14): warning CS0219: The variable ''sum10'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(26,14): warning CS0219: The variable ''sum11'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(27,14): warning CS0219: The variable ''sum12'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(28,14): warning CS0219: The variable ''sum13'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(29,14): warning CS0219: The variable ''sum14'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(30,14): warning CS0219: The variable ''sum15'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(31,14): warning CS0219: The variable ''sum16'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(32,14): warning CS0219: The variable ''sum17'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(33,14): warning CS0219: The variable ''sum18'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(34,14): warning CS021'
  timestamp: 1659977110
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of non-negative integers, return a copy of the
    given array after sorting,\n    // you will sort the given array in ascending
    order if the sum( first index value, last index value) is odd,\n    // or sort
    it in descending order if the sum( first index value, last index value) is even.\n
    \   // Note:\n    // * don't change the given array.\n    // Examples:\n    public
    static List<long> SortArray(List<long> array) {\n        long sum = 0;\n        long
    temp = 0;\n        List<long> result = new List<long>();\n        foreach (long
    i in array) {\n            sum += i;\n            if (sum % 2 == 0) {\n                temp
    = sum;\n                sum = i;\n                result.Add(temp);\n            }
    else {\n                temp = sum;\n                sum = i;\n                result.Add(sum);\n
    \           }\n        }\n        return result;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(SortArray((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c5c5a9881eeb4e6eae47be98fb32406b>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c5c5a9881eeb4e6eae47be98fb32406b>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977115
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of non-negative integers, return a copy of the
    given array after sorting,\n    // you will sort the given array in ascending
    order if the sum( first index value, last index value) is odd,\n    // or sort
    it in descending order if the sum( first index value, last index value) is even.\n
    \   // Note:\n    // * don't change the given array.\n    // Examples:\n    public
    static List<long> SortArray(List<long> array) {\n        long sum = 0;\n        long
    temp = 0;\n        List<long> result = new List<long>();\n        foreach (long
    i in array) {\n            sum += i;\n        }\n        if (sum % 2 == 0) {\n
    \           temp = sum;\n            sum = sum / 2;\n            while (temp !=
    sum) {\n                result.Add(array[array.IndexOf(temp)]);\n                temp
    = temp - array[array.IndexOf(temp)];\n            }\n        } else {\n            temp
    = sum;\n            sum = sum / 2;\n            while (temp != sum) {\n                result.Add(array[array.IndexOf(temp)]);\n
    \               temp = temp + array[array.IndexOf(temp)];\n            }\n        }\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(SortArray((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <4e59926eec2e42dbb6d8f52678d33b7a>:0
    \n\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out of
    range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.SortArray
    (System.Collections.Generic.List`1[T] array) [0x000a3] in <4e59926eec2e42dbb6d8f52678d33b7a>:0
    \n  at Problem.Main (System.String[] args) [0x0002b] in <4e59926eec2e42dbb6d8f52678d33b7a>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index
    was out of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.SortArray
    (System.Collections.Generic.List`1[T] array) [0x000a3] in <4e59926eec2e42dbb6d8f52678d33b7a>:0
    \n  at Problem.Main (System.String[] args) [0x0002b] in <4e59926eec2e42dbb6d8f52678d33b7a>:0
    \n"
  stdout: ''
  timestamp: 1659977115
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of non-negative integers, return a copy of the
    given array after sorting,\n    // you will sort the given array in ascending
    order if the sum( first index value, last index value) is odd,\n    // or sort
    it in descending order if the sum( first index value, last index value) is even.\n
    \   // Note:\n    // * don't change the given array.\n    // Examples:\n    public
    static List<long> SortArray(List<long> array) {\n        long sum = 0;\n        long
    temp = 0;\n        List<long> result = new List<long>();\n        foreach (long
    i in array) {\n            sum += i;\n            if (sum % 2 == 0) {\n                temp
    = sum;\n                result.Add(temp);\n            } else {\n                temp
    = sum;\n                result.Add(temp);\n                result.Add(-temp);\n
    \           }\n        }\n        return result;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(SortArray((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <abd29d0f0a62417b8a91759c2720ec1c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <abd29d0f0a62417b8a91759c2720ec1c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977115
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of non-negative integers, return a copy of the
    given array after sorting,\n    // you will sort the given array in ascending
    order if the sum( first index value, last index value) is odd,\n    // or sort
    it in descending order if the sum( first index value, last index value) is even.\n
    \   // Note:\n    // * don't change the given array.\n    // Examples:\n    public
    static List<long> SortArray(List<long> array) {\n        long sum = 0;\n        long
    sum2 = 0;\n        List<long> result = new List<long>();\n        foreach (long
    i in array) {\n            sum += i;\n        }\n        sum2 = sum % 2;\n        if
    (sum2 == 0) {\n            sum = sum / 2;\n        }\n        foreach (long i
    in array) {\n            sum -= i;\n            if (sum < 0) {\n                sum
    = 0;\n            }\n            result.Add(i);\n        }\n        return result;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(SortArray((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)5L}))).Equals((new List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <26a2125be35a497d85ccca25e58fa742>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <26a2125be35a497d85ccca25e58fa742>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977115
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of non-negative integers, return a copy of the
    given array after sorting,\n    // you will sort the given array in ascending
    order if the sum( first index value, last index value) is odd,\n    // or sort
    it in descending order if the sum( first index value, last index value) is even.\n
    \   // Note:\n    // * don't change the given array.\n    // Examples:\n    public
    static List<long> SortArray(List<long> array) {\n        long sum = 0;\n        long
    sum2 = 0;\n        long sum3 = 0;\n        long sum4 = 0;\n        long sum5 =
    0;\n        long sum6 = 0;\n        long sum7 = 0;\n        long sum8 = 0;\n        long
    sum9 = 0;\n        long sum10 = 0;\n        long sum11 = 0;\n        long sum12
    = 0;\n        long sum13 = 0;\n        long sum14 = 0;\n        long sum15 = 0;\n
    \       long sum16 = 0;\n        long sum17 = 0;\n        long sum18 = 0;\n        long
    sum19 = 0;\n        long sum20 = 0;\n        long sum21 = 0;\n        long sum22
    = 0;\n        long sum23 = 0;\n        long sum24 = 0;\n        long sum25 = 0;\n
    \       long sum26 = 0;\n        long sum27 = 0;\n        long sum28 = 0;\n        long
    sum29 = 0;\n        long sum30 = 0;\n        long sum31 = 0;\n        long sum32
    = 0;\n        long sum33 = 0;\n        long sum34 = 0;\n        long sum35 = 0;\n
    \       long sum36 = 0;\n        long sum37 = 0;\n        long sum38 = 0;\n        long
    sum39 = 0;\n        long sum40 = 0;\n        long sum41 = 0;\n        long sum42
    = 0;\n        long sum43 = 0;\n        long sum44 = 0;\n        long sum45 = 0;\n
    \       long sum46 = 0;\n        long sum47 = 0;\n        long sum48 = 0;\n        long
    sum49 = 0;\n        long sum50 = 0;\n        long sum51 = 0;\n        long sum52
    = 0;\n        long sum53 = 0;\n        long sum54 = 0;\n        long sum55 = 0;\n
    \       long sum56 = 0;\n        long sum57 = 0;\n        long sum58 = 0;\n        long
    sum59 = 0;\n        long sum60 = 0;\n        long sum61 = 0;\n        long sum62
    = 0;\n        long sum63 = 0;\n        long sum64 = 0;\n        long sum65 = 0;\n
    \       long sum66 = 0;\n        long sum67 = 0;\n        long sum68 = 0;\n        long
    sum69 = 0;\n        long sum70 = 0;\n        long sum71 = 0;\n        long sum72
    = 0;\n        long sum73 = 0;\n        long sum74 = 0;\n        long sum75 = 0;\n
    \       long sum76 = 0;\n        long sum77 = 0;\n        long sum78 = 0;\n        long
    sum79 = 0;\n        long sum80 = 0;\n        long sum81 = 0;\n        long sum82
    = 0;\n        long sum83 = 0;\n        long sum84 = 0;\n        long sum85 = 0;\n
    \       long sum86 = 0;\n        \n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(SortArray((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpmchrwcpg.cs(16,14): warning CS0219: The variable ''sum'' is assigned but
    its value is never used

    /tmp/tmpmchrwcpg.cs(17,14): warning CS0219: The variable ''sum2'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(18,14): warning CS0219: The variable ''sum3'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(19,14): warning CS0219: The variable ''sum4'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(20,14): warning CS0219: The variable ''sum5'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(21,14): warning CS0219: The variable ''sum6'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(22,14): warning CS0219: The variable ''sum7'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(23,14): warning CS0219: The variable ''sum8'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(24,14): warning CS0219: The variable ''sum9'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(25,14): warning CS0219: The variable ''sum10'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(26,14): warning CS0219: The variable ''sum11'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(27,14): warning CS0219: The variable ''sum12'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(28,14): warning CS0219: The variable ''sum13'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(29,14): warning CS0219: The variable ''sum14'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(30,14): warning CS0219: The variable ''sum15'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(31,14): warning CS0219: The variable ''sum16'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(32,14): warning CS0219: The variable ''sum17'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(33,14): warning CS0219: The variable ''sum18'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(34,14): warning CS021'
  timestamp: 1659977110
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of non-negative integers, return a copy of the
    given array after sorting,\n    // you will sort the given array in ascending
    order if the sum( first index value, last index value) is odd,\n    // or sort
    it in descending order if the sum( first index value, last index value) is even.\n
    \   // Note:\n    // * don't change the given array.\n    // Examples:\n    public
    static List<long> SortArray(List<long> array) {\n        List<long> result = new
    List<long>();\n        long sum = 0;\n        long lastSum = 0;\n        long
    firstSum = 0;\n        long lastSum2 = 0;\n        long firstSum2 = 0;\n        long
    lastSum3 = 0;\n        long firstSum3 = 0;\n        long lastSum4 = 0;\n        long
    firstSum4 = 0;\n        long lastSum5 = 0;\n        long firstSum5 = 0;\n        long
    lastSum6 = 0;\n        long firstSum6 = 0;\n        long lastSum7 = 0;\n        long
    firstSum7 = 0;\n        long lastSum8 = 0;\n        long firstSum8 = 0;\n        long
    lastSum9 = 0;\n        long firstSum9 = 0;\n        long lastSum10 = 0;\n        long
    firstSum10 = 0;\n        long lastSum11 = 0;\n        long firstSum11 = 0;\n        long
    lastSum12 = 0;\n        long firstSum12 = 0;\n        long lastSum13 = 0;\n        long
    firstSum13 = 0;\n        long lastSum14 = 0;\n        long firstSum14 = 0;\n        long
    lastSum15 = 0;\n        long firstSum15 = 0;\n        long lastSum16 = 0;\n        long
    firstSum16 = 0;\n        long lastSum17 = 0;\n        long firstSum17 = 0;\n        long
    lastSum18 = 0;\n        long firstSum18 = 0;\n        long lastSum19 = 0;\n        long
    firstSum19 = 0;\n        long lastSum20 = 0;\n        long firstSum20 = 0;\n        long
    lastSum21 = 0;\n        long firstSum21 = 0;\n        long lastSum22 = 0;\n        long
    firstSum22 = 0;\n        long lastSum23 = 0;\n        long firstSum23 = 0;\n        long
    lastSum24 = 0;\n        long firstSum24 = 0;\n        long lastSum25 = 0;\n        long
    firstSum25 = 0;\n        long lastSum26 = 0;\n        long firstSum26 = 0;\n        long
    lastSum27 = 0;\n        long firstSum27 = 0;\n        long lastSum28 = 0;\n        long
    firstSum28 = 0;\n        long lastSum29 = 0;\n        long firstSum29 = 0;\n        long
    lastSum30 = 0;\n        long firstSum30 = 0;\n        long lastSum31 = 0;\n        long
    firstSum31 = 0;\n        long lastSum32 = 0;\n        long firstSum32 = 0;\n        long
    lastSum33 = 0;\n        long firstSum33 = 0;\n        long lastSum34 = 0;\n        long
    firstSum34 = 0;\n        long lastSum35 = 0;\n        long firstSum35 = 0;\n        long
    lastSum36 = 0;\n        long firstSum36 = 0;\n        long last\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(SortArray((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpkfawo63y.cs(90,18): error CS1002: ; expected

    '
  timestamp: 1659977114
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of non-negative integers, return a copy of the
    given array after sorting,\n    // you will sort the given array in ascending
    order if the sum( first index value, last index value) is odd,\n    // or sort
    it in descending order if the sum( first index value, last index value) is even.\n
    \   // Note:\n    // * don't change the given array.\n    // Examples:\n    public
    static List<long> SortArray(List<long> array) {\n        long sum = 0;\n        long
    sum2 = 0;\n        long sum3 = 0;\n        long sum4 = 0;\n        long sum5 =
    0;\n        long sum6 = 0;\n        long sum7 = 0;\n        long sum8 = 0;\n        long
    sum9 = 0;\n        long sum10 = 0;\n        long sum11 = 0;\n        long sum12
    = 0;\n        long sum13 = 0;\n        long sum14 = 0;\n        long sum15 = 0;\n
    \       long sum16 = 0;\n        long sum17 = 0;\n        long sum18 = 0;\n        long
    sum19 = 0;\n        long sum20 = 0;\n        long sum21 = 0;\n        long sum22
    = 0;\n        long sum23 = 0;\n        long sum24 = 0;\n        long sum25 = 0;\n
    \       long sum26 = 0;\n        long sum27 = 0;\n        long sum28 = 0;\n        long
    sum29 = 0;\n        long sum30 = 0;\n        long sum31 = 0;\n        long sum32
    = 0;\n        long sum33 = 0;\n        long sum34 = 0;\n        long sum35 = 0;\n
    \       long sum36 = 0;\n        long sum37 = 0;\n        long sum38 = 0;\n        long
    sum39 = 0;\n        long sum40 = 0;\n        long sum41 = 0;\n        long sum42
    = 0;\n        long sum43 = 0;\n        long sum44 = 0;\n        long sum45 = 0;\n
    \       long sum46 = 0;\n        long sum47 = 0;\n        long sum48 = 0;\n        long
    sum49 = 0;\n        long sum50 = 0;\n        long sum51 = 0;\n        long sum52
    = 0;\n        long sum53 = 0;\n        long sum54 = 0;\n        long sum55 = 0;\n
    \       long sum56 = 0;\n        long sum57 = 0;\n        long sum58 = 0;\n        long
    sum59 = 0;\n        long sum60 = 0;\n        long sum61 = 0;\n        long sum62
    = 0;\n        long sum63 = 0;\n        long sum64 = 0;\n        long sum65 = 0;\n
    \       long sum66 = 0;\n        long sum67 = 0;\n        long sum68 = 0;\n        long
    sum69 = 0;\n        long sum70 = 0;\n        long sum71 = 0;\n        long sum72
    = 0;\n        long sum73 = 0;\n        long sum74 = 0;\n        long sum75 = 0;\n
    \       long sum76 = 0;\n        long sum77 = 0;\n        long sum78 = 0;\n        long
    sum79 = 0;\n        long sum80 = 0;\n        long sum81 = 0;\n        long sum82
    = 0;\n        long sum83 = 0;\n        long sum84 = 0;\n        long sum85 = 0;\n
    \       long sum86 = 0;\n        \n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(SortArray((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpmchrwcpg.cs(16,14): warning CS0219: The variable ''sum'' is assigned but
    its value is never used

    /tmp/tmpmchrwcpg.cs(17,14): warning CS0219: The variable ''sum2'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(18,14): warning CS0219: The variable ''sum3'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(19,14): warning CS0219: The variable ''sum4'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(20,14): warning CS0219: The variable ''sum5'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(21,14): warning CS0219: The variable ''sum6'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(22,14): warning CS0219: The variable ''sum7'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(23,14): warning CS0219: The variable ''sum8'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(24,14): warning CS0219: The variable ''sum9'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(25,14): warning CS0219: The variable ''sum10'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(26,14): warning CS0219: The variable ''sum11'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(27,14): warning CS0219: The variable ''sum12'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(28,14): warning CS0219: The variable ''sum13'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(29,14): warning CS0219: The variable ''sum14'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(30,14): warning CS0219: The variable ''sum15'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(31,14): warning CS0219: The variable ''sum16'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(32,14): warning CS0219: The variable ''sum17'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(33,14): warning CS0219: The variable ''sum18'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(34,14): warning CS021'
  timestamp: 1659977110
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of non-negative integers, return a copy of the
    given array after sorting,\n    // you will sort the given array in ascending
    order if the sum( first index value, last index value) is odd,\n    // or sort
    it in descending order if the sum( first index value, last index value) is even.\n
    \   // Note:\n    // * don't change the given array.\n    // Examples:\n    public
    static List<long> SortArray(List<long> array) {\n        long sum = 0;\n        long
    temp;\n        List<long> result = new List<long>();\n        foreach (long i
    in array) {\n            sum += i;\n        }\n        if (sum % 2 == 0) {\n            temp
    = sum;\n            sum = array.Sum();\n            while (temp != sum) {\n                result.Add(array[array.IndexOf(temp)]);\n
    \               temp = temp - array[array.IndexOf(temp)];\n            }\n        }
    else {\n            temp = sum;\n            sum = array.Sum();\n            while
    (temp != sum) {\n                result.Add(array[array.IndexOf(temp)]);\n                temp
    = temp - array[array.IndexOf(temp)];\n            }\n            temp = sum;\n
    \           sum = array.Sum();\n            while (temp != sum) {\n                result.Add(array[array.IndexOf(temp)]);\n
    \               temp = temp - array[array.IndexOf(temp)];\n            }\n        }\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(SortArray((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <9b2c6787663a4d7cbf1ad1eda7fe8858>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <9b2c6787663a4d7cbf1ad1eda7fe8858>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977115
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of non-negative integers, return a copy of the
    given array after sorting,\n    // you will sort the given array in ascending
    order if the sum( first index value, last index value) is odd,\n    // or sort
    it in descending order if the sum( first index value, last index value) is even.\n
    \   // Note:\n    // * don't change the given array.\n    // Examples:\n    public
    static List<long> SortArray(List<long> array) {\n        long sum = 0;\n        long
    last = 0;\n        long first = 0;\n        long temp = 0;\n        List<long>
    result = new List<long>();\n        foreach (long i in array) {\n            sum
    += i;\n            if (sum % 2 == 0) {\n                temp = first;\n                first
    = last;\n                last = temp;\n            }\n            result.Add(i);\n
    \       }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(SortArray((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <0cdc8697166e4003844a0e7ca9ab60b2>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <0cdc8697166e4003844a0e7ca9ab60b2>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977115
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of non-negative integers, return a copy of the
    given array after sorting,\n    // you will sort the given array in ascending
    order if the sum( first index value, last index value) is odd,\n    // or sort
    it in descending order if the sum( first index value, last index value) is even.\n
    \   // Note:\n    // * don't change the given array.\n    // Examples:\n    public
    static List<long> SortArray(List<long> array) {\n        long sum = 0;\n        foreach
    (var item in array) {\n            sum += item;\n        }\n        if (sum %
    2 == 0) {\n            array.Reverse();\n        }\n        long sum2 = 0;\n        foreach
    (var item in array) {\n            sum2 += item;\n        }\n        if (sum2
    % 2 == 0) {\n            array.Reverse();\n        }\n        long sum3 = 0;\n
    \       foreach (var item in array) {\n            sum3 += item;\n        }\n
    \       if (sum3 % 2 == 0) {\n            array.Reverse();\n        }\n        long
    sum4 = 0;\n        foreach (var item in array) {\n            sum4 += item;\n
    \       }\n        if (sum4 % 2 == 0) {\n            array.Reverse();\n        }\n
    \       long sum5 = 0;\n        foreach (var item in array) {\n            sum5
    += item;\n        }\n        if (sum5 % 2 == 0) {\n            array.Reverse();\n
    \       }\n        long sum6 = 0;\n        foreach (var item in array) {\n            sum6
    += item;\n        }\n        if (sum6 % 2 == 0) {\n            array.Reverse();\n
    \       }\n        long sum7 = 0;\n        foreach (var item in array) {\n            sum7
    += item;\n        }\n        if (sum7 % 2 == 0) {\n            array.Reverse();\n
    \       }\n        long sum8 = 0;\n        foreach (var item in array) {\n            sum8
    += item;\n        }\n        if (sum8 % 2 == 0) {\n            array.Reverse();\n
    \       }\n        long sum9 = 0;\n        foreach (var item in array) {\n            sum9
    += item;\n        }\n        if (sum9 % 2 == 0) {\n            array.Reverse();\n
    \       }\n        long sum10 = 0;\n        foreach (var item in array) {\n            sum10
    += item;\n        }\n        if (sum10 % 2 == 0) {\n            array.Reverse();\n
    \       }\n        long sum11 = 0;\n        foreach (var item in array) {\n            sum11
    += item;\n        }\n        if (sum11 % 2 == 0) {\n            array.Reverse();\n
    \       }\n        long sum12 = 0;\n        foreach (var item in array) {\n            sum12
    += item;\n        }\n        if (sum12 % 2 == 0) {\n            array.Reverse();\n
    \       }\n        long sum13 = 0;\n        foreach (var item in array) {\n            sum13
    += item;\n        }\n        if (sum13 % 2 == 0) {\n            array.Reverse();\n
    \       }\n        long sum14 = 0;\n        foreach (var item in array) {\n            sum14
    += item;\n        }\n        if (sum14 % 2 == 0) {\n            array.Reverse();\n
    \       }\n        long sum15 = 0;\n        foreach (var item in array) {\n            sum15
    += item;\n        }\n        if (sum15 % 2 == 0) {\n            array.\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(SortArray((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)5L}))).Equals((new List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpzlmxo7g2.cs(119,19): error CS1001: Identifier expected

    /tmp/tmpzlmxo7g2.cs(119,19): error CS1002: ; expected

    /tmp/tmpzlmxo7g2.cs(121,5): error CS0106: The modifier ''public'' is not valid
    for this item

    /tmp/tmpzlmxo7g2.cs(131,2): error CS1513: } expected

    '
  timestamp: 1659977109
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of non-negative integers, return a copy of the
    given array after sorting,\n    // you will sort the given array in ascending
    order if the sum( first index value, last index value) is odd,\n    // or sort
    it in descending order if the sum( first index value, last index value) is even.\n
    \   // Note:\n    // * don't change the given array.\n    // Examples:\n    public
    static List<long> SortArray(List<long> array) {\n        long sum = 0;\n        long
    lastSum = 0;\n        long firstSum = 0;\n        List<long> result = new List<long>();\n
    \       foreach (long i in array) {\n            sum += i;\n            lastSum
    = sum;\n            firstSum = sum;\n            result.Add(i);\n        }\n        if
    (sum % 2 == 0) {\n            Array.Sort(result);\n        } else {\n            Array.Sort(result,
    (a, b) => b - a);\n        }\n        return result;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(SortArray((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp2izog_4l.cs(27,24): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''System.Array''

    /tmp/tmp2izog_4l.cs(29,24): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''System.Array''

    /tmp/tmp2izog_4l.cs(29,32): error CS1660: Cannot convert lambda expression to
    type ''IComparer'' because it is not a delegate type

    '
  timestamp: 1659977112
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of non-negative integers, return a copy of the
    given array after sorting,\n    // you will sort the given array in ascending
    order if the sum( first index value, last index value) is odd,\n    // or sort
    it in descending order if the sum( first index value, last index value) is even.\n
    \   // Note:\n    // * don't change the given array.\n    // Examples:\n    public
    static List<long> SortArray(List<long> array) {\n        long sum = 0;\n        long
    sum2 = 0;\n        long sum3 = 0;\n        long sum4 = 0;\n        long sum5 =
    0;\n        long sum6 = 0;\n        long sum7 = 0;\n        long sum8 = 0;\n        long
    sum9 = 0;\n        long sum10 = 0;\n        long sum11 = 0;\n        long sum12
    = 0;\n        long sum13 = 0;\n        long sum14 = 0;\n        long sum15 = 0;\n
    \       long sum16 = 0;\n        long sum17 = 0;\n        long sum18 = 0;\n        long
    sum19 = 0;\n        long sum20 = 0;\n        long sum21 = 0;\n        long sum22
    = 0;\n        long sum23 = 0;\n        long sum24 = 0;\n        long sum25 = 0;\n
    \       long sum26 = 0;\n        long sum27 = 0;\n        long sum28 = 0;\n        long
    sum29 = 0;\n        long sum30 = 0;\n        long sum31 = 0;\n        long sum32
    = 0;\n        long sum33 = 0;\n        long sum34 = 0;\n        long sum35 = 0;\n
    \       long sum36 = 0;\n        long sum37 = 0;\n        long sum38 = 0;\n        long
    sum39 = 0;\n        long sum40 = 0;\n        long sum41 = 0;\n        long sum42
    = 0;\n        long sum43 = 0;\n        long sum44 = 0;\n        long sum45 = 0;\n
    \       long sum46 = 0;\n        long sum47 = 0;\n        long sum48 = 0;\n        long
    sum49 = 0;\n        long sum50 = 0;\n        long sum51 = 0;\n        long sum52
    = 0;\n        long sum53 = 0;\n        long sum54 = 0;\n        long sum55 = 0;\n
    \       long sum56 = 0;\n        long sum57 = 0;\n        long sum58 = 0;\n        long
    sum59 = 0;\n        long sum60 = 0;\n        long sum61 = 0;\n        long sum62
    = 0;\n        long sum63 = 0;\n        long sum64 = 0;\n        long sum65 = 0;\n
    \       long sum66 = 0;\n        long sum67 = 0;\n        long sum68 = 0;\n        long
    sum69 = 0;\n        long sum70 = 0;\n        long sum71 = 0;\n        long sum72
    = 0;\n        long sum73 = 0;\n        long sum74 = 0;\n        long sum75 = 0;\n
    \       long sum76 = 0;\n        long sum77 = 0;\n        long sum78 = 0;\n        long
    sum79 = 0;\n        long sum80 = 0;\n        long sum81 = 0;\n        long sum82
    = 0;\n        long sum83 = 0;\n        long sum84 = 0;\n        long sum85 = 0;\n
    \       long sum86 = 0;\n        \n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(SortArray((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpmchrwcpg.cs(16,14): warning CS0219: The variable ''sum'' is assigned but
    its value is never used

    /tmp/tmpmchrwcpg.cs(17,14): warning CS0219: The variable ''sum2'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(18,14): warning CS0219: The variable ''sum3'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(19,14): warning CS0219: The variable ''sum4'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(20,14): warning CS0219: The variable ''sum5'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(21,14): warning CS0219: The variable ''sum6'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(22,14): warning CS0219: The variable ''sum7'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(23,14): warning CS0219: The variable ''sum8'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(24,14): warning CS0219: The variable ''sum9'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(25,14): warning CS0219: The variable ''sum10'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(26,14): warning CS0219: The variable ''sum11'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(27,14): warning CS0219: The variable ''sum12'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(28,14): warning CS0219: The variable ''sum13'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(29,14): warning CS0219: The variable ''sum14'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(30,14): warning CS0219: The variable ''sum15'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(31,14): warning CS0219: The variable ''sum16'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(32,14): warning CS0219: The variable ''sum17'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(33,14): warning CS0219: The variable ''sum18'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(34,14): warning CS021'
  timestamp: 1659977110
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of non-negative integers, return a copy of the
    given array after sorting,\n    // you will sort the given array in ascending
    order if the sum( first index value, last index value) is odd,\n    // or sort
    it in descending order if the sum( first index value, last index value) is even.\n
    \   // Note:\n    // * don't change the given array.\n    // Examples:\n    public
    static List<long> SortArray(List<long> array) {\n        long sum = 0;\n        long
    lastSum = 0;\n        long firstSum = 0;\n        long firstIndex = 0;\n        long
    lastIndex = 0;\n        long sumOfFirstIndex = 0;\n        long sumOfLastIndex
    = 0;\n        List<long> result = new List<long>();\n        foreach (long i in
    array) {\n            sum += i;\n            lastSum = sum;\n            firstSum
    = sum;\n            firstIndex = i;\n            lastIndex = i;\n            sumOfFirstIndex
    += firstIndex;\n            sumOfLastIndex += lastIndex;\n        }\n        if
    (sumOfFirstIndex % 2 == 1) {\n            sum = sumOfLastIndex;\n        }\n        if
    (sumOfLastIndex % 2 == 1) {\n            sum = sumOfFirstIndex;\n        }\n        if
    (sum % 2 == 1) {\n            sum = sumOfFirstIndex + sumOfLastIndex;\n        }\n
    \       long firstIndexValue = sumOfFirstIndex / 2;\n        long lastIndexValue
    = sumOfLastIndex / 2;\n        long firstIndexSum = sumOfFirstIndex % 2;\n        long
    lastIndexSum = sumOfLastIndex % 2;\n        long firstIndexSumValue = firstIndexSum
    / 2;\n        long lastIndexSumValue = lastIndexSum / 2;\n        long firstIndexSumSum
    = firstIndexSum % 2;\n        long lastIndexSumSum = lastIndexSum % 2;\n        long
    firstIndexSumSumValue = firstIndexSumSum / 2;\n        long lastIndexSumSumValue
    = lastIndexSumSum / 2;\n        long firstIndexSumSumSum = firstIndexSumSum %
    2;\n        long lastIndexSumSumSum = lastIndexSumSum % 2;\n        long firstIndexSumSumSumValue
    = firstIndexSumSumSum / 2;\n        long lastIndexSumSumSumValue = lastIndexSumSumSum
    / 2;\n        long firstIndexSumSumSumSum = firstIndexSumSumSum % 2;\n        long
    lastIndexSumSumSumSum = lastIndexSumSumSum % 2;\n        long firstIndexSumSumSumSumValue
    = firstIndexSumSumSumSum / 2;\n        long lastIndexSumSumSumSumValue = lastIndexSumSumSumSum
    / 2;\n        long firstIndexSumSumSumSumSum = firstIndexSumSumSumSum % 2;\n        long
    lastIndexSumSumSumSumSum = lastIndexSumSumSumSum % 2;\n        long firstIndexSumSumSumSumSumValue
    = firstIndexSumSumSumSum / 2;\n        long lastIndexSumSumSumSumSumValue = lastIndexSumSumSumSum
    / 2;\n        long firstIndexSumSumSumSumSumSum = firstIndexSumSumSumSumSum %
    2;\n        long lastIndexSumSumSumSumSum = lastIndexSumSumSum\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(SortArray((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpie70_p6q.cs(65,59): error CS1002: ; expected

    '
  timestamp: 1659977114
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of non-negative integers, return a copy of the
    given array after sorting,\n    // you will sort the given array in ascending
    order if the sum( first index value, last index value) is odd,\n    // or sort
    it in descending order if the sum( first index value, last index value) is even.\n
    \   // Note:\n    // * don't change the given array.\n    // Examples:\n    public
    static List<long> SortArray(List<long> array) {\n        long sum = 0;\n        long
    temp = 0;\n        List<long> result = new List<long>();\n        foreach (long
    i in array) {\n            sum += i;\n        }\n        if (sum % 2 == 0) {\n
    \           temp = sum;\n            sum = sum / 2;\n            while (sum >
    0) {\n                result.Add(temp);\n                sum -= temp;\n                temp++;\n
    \           }\n        } else {\n            temp = sum;\n            sum = sum
    / 2;\n            while (sum < 0) {\n                result.Add(temp);\n                sum
    -= temp;\n                temp--;\n            }\n        }\n        return result;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(SortArray((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)5L}))).Equals((new List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <4f8e3416bb2d4d4bae7a81784ca86cfc>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <4f8e3416bb2d4d4bae7a81784ca86cfc>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977115
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of non-negative integers, return a copy of the
    given array after sorting,\n    // you will sort the given array in ascending
    order if the sum( first index value, last index value) is odd,\n    // or sort
    it in descending order if the sum( first index value, last index value) is even.\n
    \   // Note:\n    // * don't change the given array.\n    // Examples:\n    public
    static List<long> SortArray(List<long> array) {\n        List<long> result = new
    List<long>();\n        long sum = 0;\n        long lastSum = 0;\n        long
    firstSum = 0;\n        long maxSum = 0;\n        long minSum = 0;\n        long
    maxSumIndex = 0;\n        long minSumIndex = 0;\n        long maxSumIndex2 = 0;\n
    \       long minSumIndex2 = 0;\n        long maxSumIndex3 = 0;\n        long minSumIndex3
    = 0;\n        long maxSumIndex4 = 0;\n        long minSumIndex4 = 0;\n        long
    maxSumIndex5 = 0;\n        long minSumIndex5 = 0;\n        long maxSumIndex6 =
    0;\n        long minSumIndex6 = 0;\n        long maxSumIndex7 = 0;\n        long
    minSumIndex7 = 0;\n        long maxSumIndex8 = 0;\n        long minSumIndex8 =
    0;\n        long maxSumIndex9 = 0;\n        long minSumIndex9 = 0;\n        long
    maxSumIndex10 = 0;\n        long minSumIndex10 = 0;\n        long maxSumIndex11
    = 0;\n        long minSumIndex11 = 0;\n        long maxSumIndex12 = 0;\n        long
    minSumIndex12 = 0;\n        long maxSumIndex13 = 0;\n        long minSumIndex13
    = 0;\n        long maxSumIndex14 = 0;\n        long minSumIndex14 = 0;\n        long
    maxSumIndex15 = 0;\n        long minSumIndex15 = 0;\n        long maxSumIndex16
    = 0;\n        long minSumIndex16 = 0;\n        long maxSumIndex17 = 0;\n        long
    minSumIndex17 = 0;\n        long maxSumIndex18 = 0;\n        long minSumIndex18
    = 0;\n        long maxSumIndex19 = 0;\n        long minSumIndex19 = 0;\n        long
    maxSumIndex20 = 0;\n        long minSumIndex20 = 0;\n        long maxSumIndex21
    = 0;\n        long minSumIndex21 = 0;\n        long maxSumIndex22 = 0;\n        long
    minSumIndex22 = 0;\n        long maxSumIndex23 = 0;\n        long minSumIndex23
    = 0;\n        long maxSumIndex24 = 0;\n        long minSumIndex24 = 0;\n        long
    maxSumIndex25 = 0;\n        long minSumIndex25 = 0;\n        long maxSumIndex26
    = 0;\n        long minSumIndex26 = 0;\n        long maxSumIndex27 = 0;\n        long
    minSumIndex27 = 0;\n        long maxSumIndex28 = 0;\n        long minSumIndex28
    = 0;\n        long maxSumIndex29 = 0;\n        long minSumIndex29 = 0;\n        long
    maxSumIndex30 = 0;\n        long minSumIndex30 = 0;\n        long max\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(SortArray((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)5L}))).Equals((new List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpaohajxy8.cs(82,17): error CS1002: ; expected

    '
  timestamp: 1659977114
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of non-negative integers, return a copy of the
    given array after sorting,\n    // you will sort the given array in ascending
    order if the sum( first index value, last index value) is odd,\n    // or sort
    it in descending order if the sum( first index value, last index value) is even.\n
    \   // Note:\n    // * don't change the given array.\n    // Examples:\n    public
    static List<long> SortArray(List<long> array) {\n        List<long> result = new
    List<long>();\n        long sum = 0;\n        long sum1 = 0;\n        long sum2
    = 0;\n        long sum3 = 0;\n        long sum4 = 0;\n        long sum5 = 0;\n
    \       long sum6 = 0;\n        long sum7 = 0;\n        long sum8 = 0;\n        long
    sum9 = 0;\n        long sum10 = 0;\n        long sum11 = 0;\n        long sum12
    = 0;\n        long sum13 = 0;\n        long sum14 = 0;\n        long sum15 = 0;\n
    \       long sum16 = 0;\n        long sum17 = 0;\n        long sum18 = 0;\n        long
    sum19 = 0;\n        long sum20 = 0;\n        long sum21 = 0;\n        long sum22
    = 0;\n        long sum23 = 0;\n        long sum24 = 0;\n        long sum25 = 0;\n
    \       long sum26 = 0;\n        long sum27 = 0;\n        long sum28 = 0;\n        long
    sum29 = 0;\n        long sum30 = 0;\n        long sum31 = 0;\n        long sum32
    = 0;\n        long sum33 = 0;\n        long sum34 = 0;\n        long sum35 = 0;\n
    \       long sum36 = 0;\n        long sum37 = 0;\n        long sum38 = 0;\n        long
    sum39 = 0;\n        long sum40 = 0;\n        long sum41 = 0;\n        long sum42
    = 0;\n        long sum43 = 0;\n        long sum44 = 0;\n        long sum45 = 0;\n
    \       long sum46 = 0;\n        long sum47 = 0;\n        long sum48 = 0;\n        long
    sum49 = 0;\n        long sum50 = 0;\n        long sum51 = 0;\n        long sum52
    = 0;\n        long sum53 = 0;\n        long sum54 = 0;\n        long sum55 = 0;\n
    \       long sum56 = 0;\n        long sum57 = 0;\n        long sum58 = 0;\n        long
    sum59 = 0;\n        long sum60 = 0;\n        long sum61 = 0;\n        long sum62
    = 0;\n        long sum63 = 0;\n        long sum64 = 0;\n        long sum65 = 0;\n
    \       long sum66 = 0;\n        long sum67 = 0;\n        long sum68 = 0;\n        long
    sum69 = 0;\n        long sum70 = 0;\n        long sum71 = 0;\n        long sum72
    = 0;\n        long sum73 = 0;\n        long sum74 = 0;\n        long sum75 = 0;\n
    \       long sum76 = 0;\n        long sum77 = 0;\n        long sum78 = 0;\n        long
    sum79 = 0;\n        long sum80 = 0;\n        long sum81 = 0;\n        long sum82
    = 0;\n        long sum83 = 0;\n        long sum84\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(SortArray((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmprs881cfn.cs(101,19): error CS1002: ; expected

    '
  timestamp: 1659977114
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of non-negative integers, return a copy of the
    given array after sorting,\n    // you will sort the given array in ascending
    order if the sum( first index value, last index value) is odd,\n    // or sort
    it in descending order if the sum( first index value, last index value) is even.\n
    \   // Note:\n    // * don't change the given array.\n    // Examples:\n    public
    static List<long> SortArray(List<long> array) {\n        long sum = 0;\n        long
    temp = 0;\n        List<long> result = new List<long>();\n        foreach (long
    i in array) {\n            sum += i;\n        }\n        if (sum % 2 == 0) {\n
    \           temp = sum;\n            sum = sum / 2;\n            while (temp !=
    sum) {\n                result.Add(array[temp]);\n                temp++;\n            }\n
    \       } else {\n            temp = sum;\n            sum = sum / 2;\n            while
    (temp != sum) {\n                result.Add(array[temp]);\n                temp--;\n
    \           }\n        }\n        return result;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(SortArray((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpdn1txldm.cs(26,34): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmpdn1txldm.cs(33,34): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    '
  timestamp: 1659977110
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of non-negative integers, return a copy of the
    given array after sorting,\n    // you will sort the given array in ascending
    order if the sum( first index value, last index value) is odd,\n    // or sort
    it in descending order if the sum( first index value, last index value) is even.\n
    \   // Note:\n    // * don't change the given array.\n    // Examples:\n    public
    static List<long> SortArray(List<long> array) {\n        long sum = 0;\n        long
    sum2 = 0;\n        long sum3 = 0;\n        long sum4 = 0;\n        long sum5 =
    0;\n        long sum6 = 0;\n        long sum7 = 0;\n        long sum8 = 0;\n        long
    sum9 = 0;\n        long sum10 = 0;\n        long sum11 = 0;\n        long sum12
    = 0;\n        long sum13 = 0;\n        long sum14 = 0;\n        long sum15 = 0;\n
    \       long sum16 = 0;\n        long sum17 = 0;\n        long sum18 = 0;\n        long
    sum19 = 0;\n        long sum20 = 0;\n        long sum21 = 0;\n        long sum22
    = 0;\n        long sum23 = 0;\n        long sum24 = 0;\n        long sum25 = 0;\n
    \       long sum26 = 0;\n        long sum27 = 0;\n        long sum28 = 0;\n        long
    sum29 = 0;\n        long sum30 = 0;\n        long sum31 = 0;\n        long sum32
    = 0;\n        long sum33 = 0;\n        long sum34 = 0;\n        long sum35 = 0;\n
    \       long sum36 = 0;\n        long sum37 = 0;\n        long sum38 = 0;\n        long
    sum39 = 0;\n        long sum40 = 0;\n        long sum41 = 0;\n        long sum42
    = 0;\n        long sum43 = 0;\n        long sum44 = 0;\n        long sum45 = 0;\n
    \       long sum46 = 0;\n        long sum47 = 0;\n        long sum48 = 0;\n        long
    sum49 = 0;\n        long sum50 = 0;\n        long sum51 = 0;\n        long sum52
    = 0;\n        long sum53 = 0;\n        long sum54 = 0;\n        long sum55 = 0;\n
    \       long sum56 = 0;\n        long sum57 = 0;\n        long sum58 = 0;\n        long
    sum59 = 0;\n        long sum60 = 0;\n        long sum61 = 0;\n        long sum62
    = 0;\n        long sum63 = 0;\n        long sum64 = 0;\n        long sum65 = 0;\n
    \       long sum66 = 0;\n        long sum67 = 0;\n        long sum68 = 0;\n        long
    sum69 = 0;\n        long sum70 = 0;\n        long sum71 = 0;\n        long sum72
    = 0;\n        long sum73 = 0;\n        long sum74 = 0;\n        long sum75 = 0;\n
    \       long sum76 = 0;\n        long sum77 = 0;\n        long sum78 = 0;\n        long
    sum79 = 0;\n        long sum80 = 0;\n        long sum81 = 0;\n        long sum82
    = 0;\n        long sum83 = 0;\n        long sum84 = 0;\n        long sum85 = 0;\n
    \       long sum86 = 0;\n        \n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(SortArray((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpmchrwcpg.cs(16,14): warning CS0219: The variable ''sum'' is assigned but
    its value is never used

    /tmp/tmpmchrwcpg.cs(17,14): warning CS0219: The variable ''sum2'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(18,14): warning CS0219: The variable ''sum3'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(19,14): warning CS0219: The variable ''sum4'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(20,14): warning CS0219: The variable ''sum5'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(21,14): warning CS0219: The variable ''sum6'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(22,14): warning CS0219: The variable ''sum7'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(23,14): warning CS0219: The variable ''sum8'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(24,14): warning CS0219: The variable ''sum9'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(25,14): warning CS0219: The variable ''sum10'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(26,14): warning CS0219: The variable ''sum11'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(27,14): warning CS0219: The variable ''sum12'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(28,14): warning CS0219: The variable ''sum13'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(29,14): warning CS0219: The variable ''sum14'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(30,14): warning CS0219: The variable ''sum15'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(31,14): warning CS0219: The variable ''sum16'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(32,14): warning CS0219: The variable ''sum17'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(33,14): warning CS0219: The variable ''sum18'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(34,14): warning CS021'
  timestamp: 1659977110
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of non-negative integers, return a copy of the
    given array after sorting,\n    // you will sort the given array in ascending
    order if the sum( first index value, last index value) is odd,\n    // or sort
    it in descending order if the sum( first index value, last index value) is even.\n
    \   // Note:\n    // * don't change the given array.\n    // Examples:\n    public
    static List<long> SortArray(List<long> array) {\n        long sum = 0;\n        long
    sum2 = 0;\n        long sum3 = 0;\n        long sum4 = 0;\n        long sum5 =
    0;\n        long sum6 = 0;\n        long sum7 = 0;\n        long sum8 = 0;\n        long
    sum9 = 0;\n        long sum10 = 0;\n        long sum11 = 0;\n        long sum12
    = 0;\n        long sum13 = 0;\n        long sum14 = 0;\n        long sum15 = 0;\n
    \       long sum16 = 0;\n        long sum17 = 0;\n        long sum18 = 0;\n        long
    sum19 = 0;\n        long sum20 = 0;\n        long sum21 = 0;\n        long sum22
    = 0;\n        long sum23 = 0;\n        long sum24 = 0;\n        long sum25 = 0;\n
    \       long sum26 = 0;\n        long sum27 = 0;\n        long sum28 = 0;\n        long
    sum29 = 0;\n        long sum30 = 0;\n        long sum31 = 0;\n        long sum32
    = 0;\n        long sum33 = 0;\n        long sum34 = 0;\n        long sum35 = 0;\n
    \       long sum36 = 0;\n        long sum37 = 0;\n        long sum38 = 0;\n        long
    sum39 = 0;\n        long sum40 = 0;\n        long sum41 = 0;\n        long sum42
    = 0;\n        long sum43 = 0;\n        long sum44 = 0;\n        long sum45 = 0;\n
    \       long sum46 = 0;\n        long sum47 = 0;\n        long sum48 = 0;\n        long
    sum49 = 0;\n        long sum50 = 0;\n        long sum51 = 0;\n        long sum52
    = 0;\n        long sum53 = 0;\n        long sum54 = 0;\n        long sum55 = 0;\n
    \       long sum56 = 0;\n        long sum57 = 0;\n        long sum58 = 0;\n        long
    sum59 = 0;\n        long sum60 = 0;\n        long sum61 = 0;\n        long sum62
    = 0;\n        long sum63 = 0;\n        long sum64 = 0;\n        long sum65 = 0;\n
    \       long sum66 = 0;\n        long sum67 = 0;\n        long sum68 = 0;\n        long
    sum69 = 0;\n        long sum70 = 0;\n        long sum71 = 0;\n        long sum72
    = 0;\n        long sum73 = 0;\n        long sum74 = 0;\n        long sum75 = 0;\n
    \       long sum76 = 0;\n        long sum77 = 0;\n        long sum78 = 0;\n        long
    sum79 = 0;\n        long sum80 = 0;\n        long sum81 = 0;\n        long sum82
    = 0;\n        long sum83 = 0;\n        long sum84 = 0;\n        long sum85 = 0;\n
    \       long sum86 = 0;\n        \n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(SortArray((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpmchrwcpg.cs(16,14): warning CS0219: The variable ''sum'' is assigned but
    its value is never used

    /tmp/tmpmchrwcpg.cs(17,14): warning CS0219: The variable ''sum2'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(18,14): warning CS0219: The variable ''sum3'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(19,14): warning CS0219: The variable ''sum4'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(20,14): warning CS0219: The variable ''sum5'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(21,14): warning CS0219: The variable ''sum6'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(22,14): warning CS0219: The variable ''sum7'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(23,14): warning CS0219: The variable ''sum8'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(24,14): warning CS0219: The variable ''sum9'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(25,14): warning CS0219: The variable ''sum10'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(26,14): warning CS0219: The variable ''sum11'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(27,14): warning CS0219: The variable ''sum12'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(28,14): warning CS0219: The variable ''sum13'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(29,14): warning CS0219: The variable ''sum14'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(30,14): warning CS0219: The variable ''sum15'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(31,14): warning CS0219: The variable ''sum16'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(32,14): warning CS0219: The variable ''sum17'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(33,14): warning CS0219: The variable ''sum18'' is assigned
    but its value is never used

    /tmp/tmpmchrwcpg.cs(34,14): warning CS021'
  timestamp: 1659977110
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given an array of non-negative integers, return a copy of the
    given array after sorting,\n    // you will sort the given array in ascending
    order if the sum( first index value, last index value) is odd,\n    // or sort
    it in descending order if the sum( first index value, last index value) is even.\n
    \   // Note:\n    // * don't change the given array.\n    // Examples:\n    public
    static List<long> SortArray(List<long> array) {\n        long sum = 0;\n        long
    sum1 = 0;\n        long sum2 = 0;\n        long sum3 = 0;\n        long sum4 =
    0;\n        long sum5 = 0;\n        long sum6 = 0;\n        long sum7 = 0;\n        long
    sum8 = 0;\n        long sum9 = 0;\n        long sum10 = 0;\n        long sum11
    = 0;\n        long sum12 = 0;\n        long sum13 = 0;\n        long sum14 = 0;\n
    \       long sum15 = 0;\n        long sum16 = 0;\n        long sum17 = 0;\n        long
    sum18 = 0;\n        long sum19 = 0;\n        long sum20 = 0;\n        long sum21
    = 0;\n        long sum22 = 0;\n        long sum23 = 0;\n        long sum24 = 0;\n
    \       long sum25 = 0;\n        long sum26 = 0;\n        long sum27 = 0;\n        long
    sum28 = 0;\n        long sum29 = 0;\n        long sum30 = 0;\n        long sum31
    = 0;\n        long sum32 = 0;\n        long sum33 = 0;\n        long sum34 = 0;\n
    \       long sum35 = 0;\n        long sum36 = 0;\n        long sum37 = 0;\n        long
    sum38 = 0;\n        long sum39 = 0;\n        long sum40 = 0;\n        long sum41
    = 0;\n        long sum42 = 0;\n        long sum43 = 0;\n        long sum44 = 0;\n
    \       long sum45 = 0;\n        long sum46 = 0;\n        long sum47 = 0;\n        long
    sum48 = 0;\n        long sum49 = 0;\n        long sum50 = 0;\n        long sum51
    = 0;\n        long sum52 = 0;\n        long sum53 = 0;\n        long sum54 = 0;\n
    \       long sum55 = 0;\n        long sum56 = 0;\n        long sum57 = 0;\n        long
    sum58 = 0;\n        long sum59 = 0;\n        long sum60 = 0;\n        long sum61
    = 0;\n        long sum62 = 0;\n        long sum63 = 0;\n        long sum64 = 0;\n
    \       long sum65 = 0;\n        long sum66 = 0;\n        long sum67 = 0;\n        long
    sum68 = 0;\n        long sum69 = 0;\n        long sum70 = 0;\n        long sum71
    = 0;\n        long sum72 = 0;\n        long sum73 = 0;\n        long sum74 = 0;\n
    \       long sum75 = 0;\n        long sum76 = 0;\n        long sum77 = 0;\n        long
    sum78 = 0;\n        long sum79 = 0;\n        long sum80 = 0;\n        long sum81
    = 0;\n        long sum82 = 0;\n        long sum83 = 0;\n        long sum84 = 0;\n
    \       long sum85 = 0;\n        long \n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(SortArray((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmphw28v9l8.cs(102,13): error CS1001: Identifier expected

    /tmp/tmphw28v9l8.cs(102,13): error CS1002: ; expected

    '
  timestamp: 1659977111
