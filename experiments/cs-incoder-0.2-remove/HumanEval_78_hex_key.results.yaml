language: cs
name: HumanEval_78_hex_key
results:
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    public
    static long HexKey(string num) {\n        long result = 0;\n        foreach (char
    c in num.ToUpper()) {\n            int digit = c - 'A';\n            if (digit
    < 0 || digit > 9) {\n                throw new ArgumentOutOfRangeException(\"Hexadecimal
    digit must be between 0 and 9\");\n            }\n            result *= 16;\n
    \           result += digit;\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(HexKey((\"AB\")) == (1L));\n
    \   Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\"))
    == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\"))
    == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\")) ==
    (12L));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Specified argument
    was out of the range of valid values.\nParameter name: Hexadecimal digit must
    be between 0 and 9\n  at Problem.HexKey (System.String num) [0x00034] in <72d0146e875e456bbccdb10cbd2697a7>:0
    \n  at Problem.Main (System.String[] args) [0x00015] in <72d0146e875e456bbccdb10cbd2697a7>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Specified
    argument was out of the range of valid values.\nParameter name: Hexadecimal digit
    must be between 0 and 9\n  at Problem.HexKey (System.String num) [0x00034] in
    <72d0146e875e456bbccdb10cbd2697a7>:0 \n  at Problem.Main (System.String[] args)
    [0x00015] in <72d0146e875e456bbccdb10cbd2697a7>:0 \n"
  stdout: ''
  timestamp: 1659976665
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    public
    static long HexKey(string num) {\n        long result = 0;\n        foreach (char
    c in num.ToUpper()) {\n            result *= 16;\n            result += Convert.ToInt64(c);\n
    \       }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(HexKey((\"AB\")) == (1L));\n    Debug.Assert(HexKey((\"1077E\"))
    == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"2020\"))
    == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\")) == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\"))
    == (12L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <6ab5d88c7e0d47afa1010f3cef427304>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <6ab5d88c7e0d47afa1010f3cef427304>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976665
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    public
    static long HexKey(string num) {\n        long result = 0;\n        foreach (char
    c in num) {\n            int digit = c - '0';\n            if (digit < 0 || digit
    > 9) {\n                throw new ArgumentException(\"Hexadecimal digit must be
    between 0 and 9\");\n            }\n            result += (digit * Math.Pow(16,
    digit));\n        }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(HexKey((\"AB\")) == (1L));\n    Debug.Assert(HexKey((\"1077E\"))
    == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"2020\"))
    == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\")) == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\"))
    == (12L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpna6dtvqj.cs(27,13): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659976665
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    public
    static long HexKey(string num) {\n        long result = 0;\n        string hex
    = num.ToUpper();\n        foreach (char c in hex) {\n            int d = Convert.ToInt32(c);\n
    \           if (d >= 'A' && d <= 'F') {\n                d -= 'A' - 10;\n            }\n
    \           if (d >= '0' && d <= '9') {\n                d -= '0';\n            }\n
    \           result += d;\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(HexKey((\"AB\")) == (1L));\n
    \   Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\"))
    == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\"))
    == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\")) ==
    (12L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <bca0aa73d6a440318210523bab4e697b>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <bca0aa73d6a440318210523bab4e697b>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976665
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    public
    static long HexKey(string num) {\n        long result = 0;\n        foreach (char
    c in num.ToUpper()) {\n            int digit = c - 'A';\n            if (digit
    >= 2 && digit <= 9) {\n                result += (digit * digit);\n            }\n
    \       }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(HexKey((\"AB\")) == (1L));\n    Debug.Assert(HexKey((\"1077E\"))
    == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"2020\"))
    == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\")) == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\"))
    == (12L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <216f7f1609f34e118d9b5ff6a8ed41f0>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <216f7f1609f34e118d9b5ff6a8ed41f0>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976665
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    public
    static long HexKey(string num) {\n        long result = 0;\n        foreach (char
    c in num.ToUpper()) {\n            result *= 16;\n            result += Convert.ToInt64(c);\n
    \       }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(HexKey((\"AB\")) == (1L));\n    Debug.Assert(HexKey((\"1077E\"))
    == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"2020\"))
    == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\")) == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\"))
    == (12L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <6ab5d88c7e0d47afa1010f3cef427304>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <6ab5d88c7e0d47afa1010f3cef427304>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976665
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    public
    static long HexKey(string num) {\n        long num2 = 0;\n        long num3 =
    0;\n        long num4 = 0;\n        long num5 = 0;\n        long num6 = 0;\n        long
    num7 = 0;\n        long num8 = 0;\n        long num9 = 0;\n        long num10
    = 0;\n        long num11 = 0;\n        long num12 = 0;\n        long num13 = 0;\n
    \       long num14 = 0;\n        long num15 = 0;\n        long num16 = 0;\n        long
    num17 = 0;\n        long num18 = 0;\n        long num19 = 0;\n        long num20
    = 0;\n        long num21 = 0;\n        long num22 = 0;\n        long num23 = 0;\n
    \       long num24 = 0;\n        long num25 = 0;\n        long num26 = 0;\n        long
    num27 = 0;\n        long num28 = 0;\n        long num29 = 0;\n        long num30
    = 0;\n        long num31 = 0;\n        long num32 = 0;\n        long num33 = 0;\n
    \       long num34 = 0;\n        long num35 = 0;\n        long num36 = 0;\n        long
    num37 = 0;\n        long num38 = 0;\n        long num39 = 0;\n        long num40
    = 0;\n        long num41 = 0;\n        long num42 = 0;\n        long num43 = 0;\n
    \       long num44 = 0;\n        long num45 = 0;\n        long num46 = 0;\n        long
    num47 = 0;\n        long num48 = 0;\n        long num49 = 0;\n        long num50
    = 0;\n        long num51 = 0;\n        long num52 = 0;\n        long num53 = 0;\n
    \       long num54 = 0;\n        long num55 = 0;\n        long num56 = 0;\n        long
    num57 = 0;\n        long num58 = 0;\n        long num59 = 0;\n        long num60
    = 0;\n        long num61 = 0;\n        long num62 = 0;\n        long num63 = 0;\n
    \       long num64 = 0;\n        long num65 = 0;\n        long num66 = 0;\n        long
    num67 = 0;\n        long num68 = 0;\n        long num69 = 0;\n        long num70
    = 0;\n        long num71 = 0;\n        long num72 = 0;\n        long num73 = 0;\n
    \       long num74 = 0;\n        long num75 = 0;\n        long num76 = 0;\n        long
    num77 = 0;\n        long num78 = 0;\n        long num79 = 0;\n        long num80
    = 0;\n        long num81 = 0;\n        long num82 = 0;\n        long num83 = 0;\n
    \       long num84 = 0;\n        long num85 = 0;\n        long num86 = 0;\n        long
    num87 = 0;\n\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HexKey((\"AB\"))
    == (1L));\n    Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\"))
    == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\"))
    == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\")) ==
    (12L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpajppcu5a.cs(21,14): warning CS0219: The variable ''num2'' is assigned
    but its value is never used

    /tmp/tmpajppcu5a.cs(22,14): warning CS0219: The variable ''num3'' is assigned
    but its value is never used

    /tmp/tmpajppcu5a.cs(23,14): warning CS0219: The variable ''num4'' is assigned
    but its value is never used

    /tmp/tmpajppcu5a.cs(24,14): warning CS0219: The variable ''num5'' is assigned
    but its value is never used

    /tmp/tmpajppcu5a.cs(25,14): warning CS0219: The variable ''num6'' is assigned
    but its value is never used

    /tmp/tmpajppcu5a.cs(26,14): warning CS0219: The variable ''num7'' is assigned
    but its value is never used

    /tmp/tmpajppcu5a.cs(27,14): warning CS0219: The variable ''num8'' is assigned
    but its value is never used

    /tmp/tmpajppcu5a.cs(28,14): warning CS0219: The variable ''num9'' is assigned
    but its value is never used

    /tmp/tmpajppcu5a.cs(29,14): warning CS0219: The variable ''num10'' is assigned
    but its value is never used

    /tmp/tmpajppcu5a.cs(30,14): warning CS0219: The variable ''num11'' is assigned
    but its value is never used

    /tmp/tmpajppcu5a.cs(31,14): warning CS0219: The variable ''num12'' is assigned
    but its value is never used

    /tmp/tmpajppcu5a.cs(32,14): warning CS0219: The variable ''num13'' is assigned
    but its value is never used

    /tmp/tmpajppcu5a.cs(33,14): warning CS0219: The variable ''num14'' is assigned
    but its value is never used

    /tmp/tmpajppcu5a.cs(34,14): warning CS0219: The variable ''num15'' is assigned
    but its value is never used

    /tmp/tmpajppcu5a.cs(35,14): warning CS0219: The variable ''num16'' is assigned
    but its value is never used

    /tmp/tmpajppcu5a.cs(36,14): warning CS0219: The variable ''num17'' is assigned
    but its value is never used

    /tmp/tmpajppcu5a.cs(37,14): warning CS0219: The variable ''num18'' is assigned
    but its value is never used

    /tmp/tmpajppcu5a.cs(38,14): warning CS0219: The variable ''num19'' is assigned
    but its value is never used

    /tmp/tmpajppcu5a.cs(39,14): warning CS0'
  timestamp: 1659976665
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    public
    static long HexKey(string num) {\n        long result = 0;\n        foreach (char
    c in num.ToUpper()) {\n            int digit = c - 'A' + 10;\n            if (digit
    < 0 || digit > 9) {\n                throw new ArgumentException(\"Invalid hexadecimal
    digit.\");\n            }\n            result *= 16;\n            result += digit;\n
    \       }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(HexKey((\"AB\")) == (1L));\n    Debug.Assert(HexKey((\"1077E\"))
    == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"2020\"))
    == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\")) == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\"))
    == (12L));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentException: Invalid hexadecimal digit.\n
    \ at Problem.HexKey (System.String num) [0x00037] in <e3dbb4de133847f6b36c61247f01309a>:0
    \n  at Problem.Main (System.String[] args) [0x00001] in <e3dbb4de133847f6b36c61247f01309a>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentException: Invalid hexadecimal
    digit.\n  at Problem.HexKey (System.String num) [0x00037] in <e3dbb4de133847f6b36c61247f01309a>:0
    \n  at Problem.Main (System.String[] args) [0x00001] in <e3dbb4de133847f6b36c61247f01309a>:0
    \n"
  stdout: ''
  timestamp: 1659976665
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    public
    static long HexKey(string num) {\n        long result = 0;\n        long hexDigits
    = 0;\n        long hexPrimes = 0;\n        long hexPrimeDigits = 0;\n        string
    hexString = num.ToUpper();\n        foreach (char c in hexString) {\n            hexDigits
    += Convert.ToInt32(c.ToString(), 16);\n        }\n        hexPrimes = HexPrimes(hexDigits);\n
    \       foreach (char c in hexString) {\n            hexPrimeDigits += Convert.ToInt32(c.ToString(),
    16);\n        }\n        foreach (char c in hexString) {\n            if (hexPrimeDigits
    % 2 == 0) {\n                result += Convert.ToInt32(c.ToString(), 16);\n            }\n
    \       }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(HexKey((\"AB\")) == (1L));\n    Debug.Assert(HexKey((\"1077E\"))
    == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"2020\"))
    == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\")) == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\"))
    == (12L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp0kvgv8mx.cs(29,21): error CS0103: The name ''HexPrimes'' does not exist
    in the current context

    '
  timestamp: 1659976665
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    public
    static long HexKey(string num) {\n        long sum = 0;\n        foreach (char
    c in num.ToUpper()) {\n            int digit = c - 'A';\n            if (digit
    >= 2 && digit <= 9) {\n                sum += digit * digit;\n            }\n
    \       }\n        return sum;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(HexKey((\"AB\")) == (1L));\n    Debug.Assert(HexKey((\"1077E\"))
    == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"2020\"))
    == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\")) == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\"))
    == (12L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <469455eb110b4aa49edded58e4cd44eb>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <469455eb110b4aa49edded58e4cd44eb>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976665
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    public
    static long HexKey(string num) {\n        long result = 0;\n        foreach (char
    c in num) {\n            int digit = c - '0';\n            if (digit < 0 || digit
    > 9) {\n                throw new ArgumentOutOfRangeException(\"num\", \"Hexadecimal
    digit must be between 0 and 9\");\n            }\n            result *= 16;\n
    \           result += digit;\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(HexKey((\"AB\")) == (1L));\n
    \   Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\"))
    == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\"))
    == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\")) ==
    (12L));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Hexadecimal
    digit must be between 0 and 9\nParameter name: num\n  at Problem.HexKey (System.String
    num) [0x0002f] in <a7a316b7657543a4a7944fc27c28961b>:0 \n  at Problem.Main (System.String[]
    args) [0x00001] in <a7a316b7657543a4a7944fc27c28961b>:0 \n[ERROR] FATAL UNHANDLED
    EXCEPTION: System.ArgumentOutOfRangeException: Hexadecimal digit must be between
    0 and 9\nParameter name: num\n  at Problem.HexKey (System.String num) [0x0002f]
    in <a7a316b7657543a4a7944fc27c28961b>:0 \n  at Problem.Main (System.String[] args)
    [0x00001] in <a7a316b7657543a4a7944fc27c28961b>:0 \n"
  stdout: ''
  timestamp: 1659976665
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    public
    static long HexKey(string num) {\n        long num2 = 0;\n        long num3 =
    0;\n        long num4 = 0;\n        long num5 = 0;\n        long num6 = 0;\n        long
    num7 = 0;\n        long num8 = 0;\n        long num9 = 0;\n        long num10
    = 0;\n        long num11 = 0;\n        long num12 = 0;\n        long num13 = 0;\n
    \       long num14 = 0;\n        long num15 = 0;\n        long num16 = 0;\n        long
    num17 = 0;\n        long num18 = 0;\n        long num19 = 0;\n        long num20
    = 0;\n        long num21 = 0;\n        long num22 = 0;\n        long num23 = 0;\n
    \       long num24 = 0;\n        long num25 = 0;\n        long num26 = 0;\n        long
    num27 = 0;\n        long num28 = 0;\n        long num29 = 0;\n        long num30
    = 0;\n        long num31 = 0;\n        long num32 = 0;\n        long num33 = 0;\n
    \       long num34 = 0;\n        long num35 = 0;\n        long num36 = 0;\n        long
    num37 = 0;\n        long num38 = 0;\n        long num39 = 0;\n        long num40
    = 0;\n        long num41 = 0;\n        long num42 = 0;\n        long num43 = 0;\n
    \       long num44 = 0;\n        long num45 = 0;\n        long num46 = 0;\n        long
    num47 = 0;\n        long num48 = 0;\n        long num49 = 0;\n        long num50
    = 0;\n        long num51 = 0;\n        long num52 = 0;\n        long num53 = 0;\n
    \       long num54 = 0;\n        long num55 = 0;\n        long num56 = 0;\n        long
    num57 = 0;\n        long num58 = 0;\n        long num59 = 0;\n        long num60
    = 0;\n        long num61 = 0;\n        long num62 = 0;\n        long num63 = 0;\n
    \       long num64 = 0;\n        long num65 = 0;\n        long num66 = 0;\n        long
    num67 = 0;\n        long num68 = 0;\n        long num69 = 0;\n        long num70
    = 0;\n        long num71 = 0;\n        long num72 = 0;\n        long num73 = 0;\n
    \       long num74 = 0;\n        long num75 = 0;\n        long num76 = 0;\n        long
    num77 = 0;\n        long num78 = 0;\n        long num79 = 0;\n        long num80
    = 0;\n        long num81 = 0;\n        long num82 = 0;\n        long num83 = 0;\n
    \       long num84 = 0;\n        long num85 = 0;\n        long num86 = 0;\n        long
    num87 = 0;\n\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HexKey((\"AB\"))
    == (1L));\n    Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\"))
    == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\"))
    == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\")) ==
    (12L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpajppcu5a.cs(21,14): warning CS0219: The variable ''num2'' is assigned
    but its value is never used

    /tmp/tmpajppcu5a.cs(22,14): warning CS0219: The variable ''num3'' is assigned
    but its value is never used

    /tmp/tmpajppcu5a.cs(23,14): warning CS0219: The variable ''num4'' is assigned
    but its value is never used

    /tmp/tmpajppcu5a.cs(24,14): warning CS0219: The variable ''num5'' is assigned
    but its value is never used

    /tmp/tmpajppcu5a.cs(25,14): warning CS0219: The variable ''num6'' is assigned
    but its value is never used

    /tmp/tmpajppcu5a.cs(26,14): warning CS0219: The variable ''num7'' is assigned
    but its value is never used

    /tmp/tmpajppcu5a.cs(27,14): warning CS0219: The variable ''num8'' is assigned
    but its value is never used

    /tmp/tmpajppcu5a.cs(28,14): warning CS0219: The variable ''num9'' is assigned
    but its value is never used

    /tmp/tmpajppcu5a.cs(29,14): warning CS0219: The variable ''num10'' is assigned
    but its value is never used

    /tmp/tmpajppcu5a.cs(30,14): warning CS0219: The variable ''num11'' is assigned
    but its value is never used

    /tmp/tmpajppcu5a.cs(31,14): warning CS0219: The variable ''num12'' is assigned
    but its value is never used

    /tmp/tmpajppcu5a.cs(32,14): warning CS0219: The variable ''num13'' is assigned
    but its value is never used

    /tmp/tmpajppcu5a.cs(33,14): warning CS0219: The variable ''num14'' is assigned
    but its value is never used

    /tmp/tmpajppcu5a.cs(34,14): warning CS0219: The variable ''num15'' is assigned
    but its value is never used

    /tmp/tmpajppcu5a.cs(35,14): warning CS0219: The variable ''num16'' is assigned
    but its value is never used

    /tmp/tmpajppcu5a.cs(36,14): warning CS0219: The variable ''num17'' is assigned
    but its value is never used

    /tmp/tmpajppcu5a.cs(37,14): warning CS0219: The variable ''num18'' is assigned
    but its value is never used

    /tmp/tmpajppcu5a.cs(38,14): warning CS0219: The variable ''num19'' is assigned
    but its value is never used

    /tmp/tmpajppcu5a.cs(39,14): warning CS0'
  timestamp: 1659976665
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    public
    static long HexKey(string num) {\n        long result = 0;\n        long hexDigit
    = 0;\n        long hexDigitCount = 0;\n        bool isPrime = true;\n        string
    hexDigitString = \"\";\n        string hexDigitString2 = \"\";\n        string
    hexDigitString3 = \"\";\n        string hexDigitString4 = \"\";\n        string
    hexDigitString5 = \"\";\n        string hexDigitString6 = \"\";\n        string
    hexDigitString7 = \"\";\n        string hexDigitString8 = \"\";\n        string
    hexDigitString9 = \"\";\n        string hexDigitString10 = \"\";\n        string
    hexDigitString11 = \"\";\n        string hexDigitString12 = \"\";\n        string
    hexDigitString13 = \"\";\n        string hexDigitString14 = \"\";\n        string
    hexDigitString15 = \"\";\n        string hexDigitString16 = \"\";\n        string
    hexDigitString17 = \"\";\n        string hexDigitString18 = \"\";\n        string
    hexDigitString19 = \"\";\n        string hexDigitString20 = \"\";\n        string
    hexDigitString21 = \"\";\n        string hexDigitString22 = \"\";\n        string
    hexDigitString23 = \"\";\n        string hexDigitString24 = \"\";\n        string
    hexDigitString25 = \"\";\n        string hexDigitString26 = \"\";\n        string
    hexDigitString27 = \"\";\n        string hexDigitString28 = \"\";\n        string
    hexDigitString29 = \"\";\n        string hexDigitString30 = \"\";\n        string
    hexDigitString31 = \"\";\n        string hexDigitString32 = \"\";\n        string
    hexDigitString33 = \"\";\n        string hexDigitString34 = \"\";\n        string
    hexDigitString35 = \"\";\n        string hexDigitString36 = \"\";\n        string
    hexDigitString37 = \"\";\n        string hexDigitString38 = \"\";\n        string
    hexDigitString39 = \"\";\n        string hexDigitString40 = \"\";\n        string
    hexDigitString41 = \"\";\n        string hexDigitString42 = \"\";\n        string
    hexDigitString43 = \"\";\n        string hexDigitString44 = \"\";\n        string
    hexDigitString45 = \"\";\n        string hexDigitString46 = \"\";\n        string
    hexDigitString47 = \"\";\n        string hexDigitString48 = \"\";\n        string
    hexDigitString49 = \"\";\n        string hexDigitString50 = \"\";\n        string
    hexDigitString51 = \"\";\n        string hexDigitString52 = \"\";\n        string
    hexDigitString53 = \"\";\n        string hexDigitString54 = \"\";\n        string
    hexDigitString55 = \"\";\n        string hexDigitString56 = \"\";\n        string
    hexDigitString57 = \"\";\n        string hexDigitString58 = \"\";\n        string
    hexDigitString59 = \"\";\n        string hexDigitString60\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(HexKey((\"AB\")) == (1L));\n    Debug.Assert(HexKey((\"1077E\"))
    == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"2020\"))
    == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\")) == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\"))
    == (12L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp7iejcnkp.cs(84,32): error CS1002: ; expected

    '
  timestamp: 1659976664
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    public
    static long HexKey(string num) {\n        long sum = 0;\n        long numDigits
    = num.Length;\n        long digit;\n        bool isPrime;\n        string digits
    = \"\";\n        long prime = 2;\n        long product = 1;\n        bool isPrimeDigit;\n
    \       bool isPrimeDigit2;\n        bool isPrimeDigit3;\n        bool isPrimeDigit4;\n
    \       bool isPrimeDigit5;\n        bool isPrimeDigit6;\n        bool isPrimeDigit7;\n
    \       bool isPrimeDigit8;\n        bool isPrimeDigit9;\n        bool isPrimeDigit10;\n
    \       bool isPrimeDigit11;\n        bool isPrimeDigit12;\n        bool isPrimeDigit13;\n
    \       bool isPrimeDigit14;\n        bool isPrimeDigit15;\n        bool isPrimeDigit16;\n
    \       bool isPrimeDigit17;\n        bool isPrimeDigit18;\n        bool isPrimeDigit19;\n
    \       bool isPrimeDigit20;\n        bool isPrimeDigit21;\n        bool isPrimeDigit22;\n
    \       bool isPrimeDigit23;\n        bool isPrimeDigit24;\n        bool isPrimeDigit25;\n
    \       bool isPrimeDigit26;\n        bool isPrimeDigit27;\n        bool isPrimeDigit28;\n
    \       bool isPrimeDigit29;\n        bool isPrimeDigit30;\n        bool isPrimeDigit31;\n
    \       bool isPrimeDigit32;\n        bool isPrimeDigit33;\n        bool isPrimeDigit34;\n
    \       bool isPrimeDigit35;\n        bool isPrimeDigit36;\n        bool isPrimeDigit37;\n
    \       bool isPrimeDigit38;\n        bool isPrimeDigit39;\n        bool isPrimeDigit40;\n
    \       bool isPrimeDigit41;\n        bool isPrimeDigit42;\n        bool isPrimeDigit43;\n
    \       bool isPrimeDigit44;\n        bool isPrimeDigit45;\n        bool isPrimeDigit46;\n
    \       bool isPrimeDigit47;\n        bool isPrimeDigit48;\n        bool isPrimeDigit49;\n
    \       bool isPrimeDigit50;\n        bool isPrimeDigit51;\n        bool isPrimeDigit52;\n
    \       bool isPrimeDigit53;\n        bool isPrimeDigit54;\n        bool \n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(HexKey((\"AB\"))
    == (1L));\n    Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\"))
    == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\"))
    == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\")) ==
    (12L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpixosoe_k.cs(82,13): error CS1001: Identifier expected

    /tmp/tmpixosoe_k.cs(82,13): error CS1002: ; expected

    '
  timestamp: 1659976664
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    public
    static long HexKey(string num) {\n        long ret = 0;\n        long num2 = Convert.ToInt64(num);\n
    \       long num3 = num2 % 10;\n        long num4 = num2 % 100;\n        long
    num5 = num2 % 1000;\n        long num6 = num2 % 100000;\n        long num7 = num2
    % 1000000;\n        long num8 = num2 % 10000000;\n        long num9 = num2 % 1000000000;\n
    \       long num10 = num2 % 10000000000;\n        long num11 = num2 % 100000000000;\n
    \       long num12 = num2 % 1000000000000;\n        long num13 = num2 % 10000000000000;\n
    \       long num14 = num2 % 100000000000000;\n        long num15 = num2 % 1000000000000000;\n
    \       long num16 = num2 % 10000000000000000; \n        long num17 = num2 % 100000000000000000;\n
    \       long num18 = num2 % 1000000000000000010;\n        long num19 = num2 %
    1000000000000000011;\n        long num20 = num2 % 1000000000000000011;\n        long
    num21 = num2 % 1000000000000000011;\n        long num22 = num2 % 1000000000000000011;\n
    \       long num23 = num2 % 1000000000000000011;\n        long num24 = num2 %
    1000000000000000011;\n        long num25 = num2 % 1000000000000000011;\n        long
    num26 = num2 % 1000000000000000011;\n        long num27 = num2 % 1000000000000000011;\n
    \       long num28 = num2 % 1000000000000000011;\n        long num29 = num2 %
    1000000000000000011;\n        long num30 = num2 % 1000000000000000011;\n        long
    num31 = num2 % 1000000000000000011;\n        long num32 = num2 % 1000000000000000011;\n
    \       long num33 = num2 % 1000000000000000011;\n        long num34 = num2 %
    1000000000000000011;\n        long num35 = num2 % 1000000000000000011;\n        long
    num36 = num2 % 1000000000000000011;\n        long num37 = num2 % 1000000000000000011;\n
    \       long num38 = num2 % 1000000000000000011;\n        long num39 = num2 %
    1000000000000000011;\n        long num40 = num2 % 1000000000000000011;\n        long
    num41 = num2 % 1000000000000000011;\n        long num42 = num2 % 1000000000000000011;\n
    \       long num\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HexKey((\"AB\"))
    == (1L));\n    Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\"))
    == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\"))
    == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\")) ==
    (12L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpmhf01lof.cs(63,17): error CS1002: ; expected

    '
  timestamp: 1659976664
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    public
    static long HexKey(string num) {\n        long result = 0;\n        foreach (char
    c in num) {\n            int digit = c - 'A';\n            if (digit < 0 || digit
    > 9) {\n                throw new ArgumentOutOfRangeException(\"Hexadecimal digit
    must be between 0 and 9\");\n            }\n            result *= 16;\n            result
    += digit;\n        }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(HexKey((\"AB\")) == (1L));\n    Debug.Assert(HexKey((\"1077E\"))
    == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"2020\"))
    == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\")) == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\"))
    == (12L));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Specified argument
    was out of the range of valid values.\nParameter name: Hexadecimal digit must
    be between 0 and 9\n  at Problem.HexKey (System.String num) [0x0002f] in <43a98fd664ea4e5aa380df229e876f83>:0
    \n  at Problem.Main (System.String[] args) [0x00015] in <43a98fd664ea4e5aa380df229e876f83>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Specified
    argument was out of the range of valid values.\nParameter name: Hexadecimal digit
    must be between 0 and 9\n  at Problem.HexKey (System.String num) [0x0002f] in
    <43a98fd664ea4e5aa380df229e876f83>:0 \n  at Problem.Main (System.String[] args)
    [0x00015] in <43a98fd664ea4e5aa380df229e876f83>:0 \n"
  stdout: ''
  timestamp: 1659976665
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    public
    static long HexKey(string num) {\n        long sum = 0;\n        foreach (char
    c in num) {\n            int digit = c - '0';\n            if (digit >= 2 && digit
    <= 9) {\n                sum += digit * digit;\n            }\n        }\n        return
    sum;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HexKey((\"AB\"))
    == (1L));\n    Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\"))
    == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\"))
    == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\")) ==
    (12L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <9be698a829ca45689ae1f8b002eb0dfd>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <9be698a829ca45689ae1f8b002eb0dfd>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976665
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    public
    static long HexKey(string num) {\n        long result = 0;\n        foreach (char
    c in num.ToCharArray()) {\n            int digit = c - '0';\n            if (digit
    >= 2 && digit <= 9) {\n                result += (digit * digit);\n            }\n
    \       }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(HexKey((\"AB\")) == (1L));\n    Debug.Assert(HexKey((\"1077E\"))
    == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"2020\"))
    == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\")) == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\"))
    == (12L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <49a1725ebed84f398d4919bad3a08ad0>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <49a1725ebed84f398d4919bad3a08ad0>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976665
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    public
    static long HexKey(string num) {\n        long result = 0;\n        string hex
    = num.ToUpper();\n        foreach (char c in hex) {\n            int n = Convert.ToInt32(c);\n
    \           if (n % 2 == 0) {\n                result += (long)Math.Pow(16, n);\n
    \           }\n        }\n        return result;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(HexKey((\"AB\")) == (1L));\n    Debug.Assert(HexKey((\"1077E\"))
    == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"2020\"))
    == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\")) == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\"))
    == (12L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f5c3012d492447bba8e2e0bdf9cb12e4>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f5c3012d492447bba8e2e0bdf9cb12e4>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976665
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    public
    static long HexKey(string num) {\n        long result = 0;\n        long digit
    = 0;\n        long digit2 = 0;\n        long digit3 = 0;\n        long digit4
    = 0;\n        long digit5 = 0;\n        long digit6 = 0;\n        long digit7
    = 0;\n        long digit8 = 0;\n        long digit9 = 0;\n        long digit10
    = 0;\n        long digit11 = 0;\n        long digit12 = 0;\n        long digit13
    = 0;\n        long digit14 = 0;\n        long digit15 = 0;\n        long digit16
    = 0;\n        long digit17 = 0;\n        long digit18 = 0;\n        long digit19
    = 0;\n        long digit20 = 0;\n        long digit21 = 0;\n        long digit22
    = 0;\n        long digit23 = 0;\n        long digit24 = 0;\n        long digit25
    = 0;\n        long digit26 = 0;\n        long digit27 = 0;\n        long digit28
    = 0;\n        long digit29 = 0;\n        long digit30 = 0;\n        long digit31
    = 0;\n        long digit32 = 0;\n        long digit33 = 0;\n        long digit34
    = 0;\n        long digit35 = 0;\n        long digit36 = 0;\n        long digit37
    = 0;\n        long digit38 = 0;\n        long digit39 = 0;\n        long digit40
    = 0;\n        long digit41 = 0;\n        long digit42 = 0;\n        long digit43
    = 0;\n        long digit44 = 0;\n        long digit45 = 0;\n        long digit46
    = 0;\n        long digit47 = 0;\n        long digit48 = 0;\n        long digit49
    = 0;\n        long digit50 = 0;\n        long digit51 = 0;\n        long digit52
    = 0;\n        long digit53 = 0;\n        long digit54 = 0;\n        long digit55
    = 0;\n        long digit56 = 0;\n        long digit57 = 0;\n        long digit58
    = 0;\n        long digit59 = 0;\n        long digit60 = 0;\n        long digit61
    = 0;\n        long digit62 = 0;\n        long digit63 = 0;\n        long digit64
    = 0;\n        long digit65 = 0;\n        long digit66 = 0;\n        long digit67
    = 0;\n        long digit68 = 0;\n        long digit69 = 0;\n        long digit70
    = 0;\n        long digit71 = 0;\n        long digit72 = 0;\n        long digit73
    = 0;\n        long digit74 = 0;\n        long digit75 = 0;\n        long digit76
    = 0;\n        long digit77 = 0;\n        long digit78 = 0;\n        long digit79
    = 0;\n        long digit80 = 0;\n        long digit81 = 0;\n        long digit82
    = 0;\n        long digit83 = 0;\n        long digit84 = 0;\n        long digit85
    = 0;\n        long \n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HexKey((\"AB\"))
    == (1L));\n    Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\"))
    == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\"))
    == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\")) ==
    (12L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpgpr07pcn.cs(107,13): error CS1001: Identifier expected

    /tmp/tmpgpr07pcn.cs(107,13): error CS1002: ; expected

    '
  timestamp: 1659976664
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    public
    static long HexKey(string num) {\n        long sum = 0;\n        foreach (char
    c in num) {\n            int digit = c - '0';\n            sum += digit * digit;\n
    \       }\n        return sum;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(HexKey((\"AB\")) == (1L));\n    Debug.Assert(HexKey((\"1077E\"))
    == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"2020\"))
    == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\")) == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\"))
    == (12L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <2349af55a20c429e8a09babc15b9679e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <2349af55a20c429e8a09babc15b9679e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976665
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    public
    static long HexKey(string num) {\n        long num2 = 0;\n        foreach (char
    c in num) {\n            int d = (int)c;\n            if (d >= '0' && d <= '9')
    {\n                num2 += d;\n            }\n        }\n        return num2;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(HexKey((\"AB\"))
    == (1L));\n    Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\"))
    == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\"))
    == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\")) ==
    (12L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <4e93c08c03e843fe9c29c3cfb1fcbe8d>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <4e93c08c03e843fe9c29c3cfb1fcbe8d>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976665
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    public
    static long HexKey(string num) {\n        long result = 0;\n        foreach (char
    c in num.ToUpper()) {\n            int digit = c - 'A';\n            if (digit
    < 0 || digit > 9) {\n                throw new ArgumentOutOfRangeException(\"num\");\n
    \           }\n            result *= 16;\n            result += digit;\n        }\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(HexKey((\"AB\")) == (1L));\n    Debug.Assert(HexKey((\"1077E\"))
    == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"2020\"))
    == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\")) == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\"))
    == (12L));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Specified argument
    was out of the range of valid values.\nParameter name: num\n  at Problem.HexKey
    (System.String num) [0x00034] in <9d0dd370c6d44f3487b37ece06888598>:0 \n  at Problem.Main
    (System.String[] args) [0x00015] in <9d0dd370c6d44f3487b37ece06888598>:0 \n[ERROR]
    FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Specified argument
    was out of the range of valid values.\nParameter name: num\n  at Problem.HexKey
    (System.String num) [0x00034] in <9d0dd370c6d44f3487b37ece06888598>:0 \n  at Problem.Main
    (System.String[] args) [0x00015] in <9d0dd370c6d44f3487b37ece06888598>:0 \n"
  stdout: ''
  timestamp: 1659976665
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    public
    static long HexKey(string num) {\n        long sum = 0;\n        foreach (char
    c in num) {\n            int digit = c - '0';\n            if (digit < 0 || digit
    > 9) {\n                throw new ArgumentOutOfRangeException(\"num\", \"Hexadecimal
    digit must be between 0 and 9\");\n            }\n            sum += digit * Math.Pow(16,
    num.Length - 1 - c.Length);\n        }\n        return sum;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(HexKey((\"AB\")) == (1L));\n
    \   Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\"))
    == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\"))
    == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\")) ==
    (12L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmptvx2jh9z.cs(27,60): error CS1061: ''char'' does not contain a definition
    for ''Length'' and no accessible extension method ''Length'' accepting a first
    argument of type ''char'' could be found (are you missing a using directive or
    an assembly reference?)

    '
  timestamp: 1659976665
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    public
    static long HexKey(string num) {\n        long result = 0;\n        long digit
    = 0;\n        long prime = 0;\n        string hex = num.ToUpper();\n        string
    hexDigits = hex.Replace(\"A\",\"0\").Replace(\"B\",\"1\").Replace(\"C\",\"2\").Replace(\"D\",\"3\").Replace(\"E\",\"4\").Replace(\"F\",\"5\");\n
    \       foreach (char c in hexDigits) {\n            digit = Convert.ToInt64(c);\n
    \           if (digit == 11) {\n                prime = 2;\n            }\n            if
    (digit == 13) {\n                prime = 3;\n            }\n            if (prime
    != 0) {\n                result += prime * digit;\n            }\n            prime
    = 0;\n        }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(HexKey((\"AB\")) == (1L));\n    Debug.Assert(HexKey((\"1077E\"))
    == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"2020\"))
    == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\")) == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\"))
    == (12L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c172d7e7d94a41f7ac410f8efdeb8e0c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c172d7e7d94a41f7ac410f8efdeb8e0c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976665
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    public
    static long HexKey(string num) {\n        long result = 0;\n        foreach (char
    c in num.ToUpper()) {\n            int digit = c - 'A';\n            if (digit
    < 0 || digit > 9) {\n                throw new ArgumentOutOfRangeException(\"Hexadecimal
    digits must be between 0 and 9\");\n            }\n            result += (digit
    << 4) + (digit << 3) + (digit << 2) + (digit << 1) + (digit << 0);\n        }\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(HexKey((\"AB\")) == (1L));\n    Debug.Assert(HexKey((\"1077E\"))
    == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"2020\"))
    == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\")) == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\"))
    == (12L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <567a15872acb4e56ae24061e83af534f>:0
    \n\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Specified argument
    was out of the range of valid values.\nParameter name: Hexadecimal digits must
    be between 0 and 9\n  at Problem.HexKey (System.String num) [0x00034] in <567a15872acb4e56ae24061e83af534f>:0
    \n  at Problem.Main (System.String[] args) [0x00015] in <567a15872acb4e56ae24061e83af534f>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Specified
    argument was out of the range of valid values.\nParameter name: Hexadecimal digits
    must be between 0 and 9\n  at Problem.HexKey (System.String num) [0x00034] in
    <567a15872acb4e56ae24061e83af534f>:0 \n  at Problem.Main (System.String[] args)
    [0x00015] in <567a15872acb4e56ae24061e83af534f>:0 \n"
  stdout: ''
  timestamp: 1659976665
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    public
    static long HexKey(string num) {\n        long result = 0;\n        string hex
    = num.ToUpper();\n        char[] hexChars = hex.ToCharArray();\n        Array.Sort(hexChars);\n
    \       foreach (char c in hexChars) {\n            int digit = c - '0';\n            if
    (digit < 0 || digit > 9) {\n                throw new ArgumentException(\"Invalid
    hexadecimal digit: \" + c);\n            }\n            result += digit * Math.Pow(16,
    hexChars.Length - 1 - hexChars.IndexOf(c));\n        }\n        return result;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(HexKey((\"AB\"))
    == (1L));\n    Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\"))
    == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\"))
    == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\")) ==
    (12L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpfqqexnmo.cs(30,75): error CS1501: No overload for method ''IndexOf'' takes
    1 arguments

    '
  timestamp: 1659976665
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    public
    static long HexKey(string num) {\n        long sum = 0;\n        foreach (char
    c in num.ToUpper()) {\n            int digit = c - 'A';\n            if (digit
    < 0 || digit > 9) {\n                throw new ArgumentException(\"Invalid hexadecimal
    digit: \" + c);\n            }\n            sum += digit * Math.Pow(16, digit);\n
    \       }\n        return sum;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(HexKey((\"AB\")) == (1L));\n    Debug.Assert(HexKey((\"1077E\"))
    == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"2020\"))
    == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\")) == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\"))
    == (12L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmptit3tv6y.cs(27,13): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659976665
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    public
    static long HexKey(string num) {\n        long num2 = 0;\n        long num3 =
    0;\n        long num4 = 0;\n        long num5 = 0;\n        long num6 = 0;\n        long
    num7 = 0;\n        long num8 = 0;\n        long num9 = 0;\n        long num10
    = 0;\n        long num11 = 0;\n        long num12 = 0;\n        long num13 = 0;\n
    \       long num14 = 0;\n        long num15 = 0;\n        long num16 = 0;\n        long
    num17 = 0;\n        long num18 = 0;\n        long num19 = 0;\n        long num20
    = 0;\n        long num21 = 0;\n        long num22 = 0;\n        long num23 = 0;\n
    \       long num24 = 0;\n        long num25 = 0;\n        long num26 = 0;\n        long
    num27 = 0;\n        long num28 = 0;\n        long num29 = 0;\n        long num30
    = 0;\n        long num31 = 0;\n        long num32 = 0;\n        long num33 = 0;\n
    \       long num34 = 0;\n        long num35 = 0;\n        long num36 = 0;\n        long
    num37 = 0;\n        long num38 = 0;\n        long num39 = 0;\n        long num40
    = 0;\n        long num41 = 0;\n        long num42 = 0;\n        long num43 = 0;\n
    \       long num44 = 0;\n        long num45 = 0;\n        long num46 = 0;\n        long
    num47 = 0;\n        long num48 = 0;\n        long num49 = 0;\n        long num50
    = 0;\n        long num51 = 0;\n        long num52 = 0;\n        long num53 = 0;\n
    \       long num54 = 0;\n        long num55 = 0;\n        long num56 = 0;\n        long
    num57 = 0;\n        long num58 = 0;\n        long num59 = 0;\n        long num60
    = 0;\n        long num61 = 0;\n        long num62 = 0;\n        long num63 = 0;\n
    \       long num64 = 0;\n        long num65 = 0;\n        long num66 = 0;\n        long
    num67 = 0;\n        long num68 = 0;\n        long num69 = 0;\n        long num70
    = 0;\n        long num71 = 0;\n        long num72 = 0;\n        long num73 = 0;\n
    \       long num74 = 0;\n        long num75 = 0;\n        long num76 = 0;\n        long
    num77 = 0;\n        long num78 = 0;\n        long num79 = 0;\n        long num80
    = 0;\n        long num81 = 0;\n        long num82 = 0;\n        long num83 = 0;\n
    \       long num84 = 0;\n        long num85 = 0;\n        long num86 = 0;\n        long
    num87 = 0;\n\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HexKey((\"AB\"))
    == (1L));\n    Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\"))
    == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\"))
    == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\")) ==
    (12L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpajppcu5a.cs(21,14): warning CS0219: The variable ''num2'' is assigned
    but its value is never used

    /tmp/tmpajppcu5a.cs(22,14): warning CS0219: The variable ''num3'' is assigned
    but its value is never used

    /tmp/tmpajppcu5a.cs(23,14): warning CS0219: The variable ''num4'' is assigned
    but its value is never used

    /tmp/tmpajppcu5a.cs(24,14): warning CS0219: The variable ''num5'' is assigned
    but its value is never used

    /tmp/tmpajppcu5a.cs(25,14): warning CS0219: The variable ''num6'' is assigned
    but its value is never used

    /tmp/tmpajppcu5a.cs(26,14): warning CS0219: The variable ''num7'' is assigned
    but its value is never used

    /tmp/tmpajppcu5a.cs(27,14): warning CS0219: The variable ''num8'' is assigned
    but its value is never used

    /tmp/tmpajppcu5a.cs(28,14): warning CS0219: The variable ''num9'' is assigned
    but its value is never used

    /tmp/tmpajppcu5a.cs(29,14): warning CS0219: The variable ''num10'' is assigned
    but its value is never used

    /tmp/tmpajppcu5a.cs(30,14): warning CS0219: The variable ''num11'' is assigned
    but its value is never used

    /tmp/tmpajppcu5a.cs(31,14): warning CS0219: The variable ''num12'' is assigned
    but its value is never used

    /tmp/tmpajppcu5a.cs(32,14): warning CS0219: The variable ''num13'' is assigned
    but its value is never used

    /tmp/tmpajppcu5a.cs(33,14): warning CS0219: The variable ''num14'' is assigned
    but its value is never used

    /tmp/tmpajppcu5a.cs(34,14): warning CS0219: The variable ''num15'' is assigned
    but its value is never used

    /tmp/tmpajppcu5a.cs(35,14): warning CS0219: The variable ''num16'' is assigned
    but its value is never used

    /tmp/tmpajppcu5a.cs(36,14): warning CS0219: The variable ''num17'' is assigned
    but its value is never used

    /tmp/tmpajppcu5a.cs(37,14): warning CS0219: The variable ''num18'' is assigned
    but its value is never used

    /tmp/tmpajppcu5a.cs(38,14): warning CS0219: The variable ''num19'' is assigned
    but its value is never used

    /tmp/tmpajppcu5a.cs(39,14): warning CS0'
  timestamp: 1659976665
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    public
    static long HexKey(string num) {\n        long num2 = 0;\n        foreach (char
    c in num) {\n            int d = (int)c;\n            if (d >= '0' && d <= '9')
    {\n                num2 += d;\n            }\n        }\n        return num2;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(HexKey((\"AB\"))
    == (1L));\n    Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\"))
    == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\"))
    == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\")) ==
    (12L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <4e93c08c03e843fe9c29c3cfb1fcbe8d>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <4e93c08c03e843fe9c29c3cfb1fcbe8d>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976665
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    public
    static long HexKey(string num) {\n        long num2 = 0;\n        long num3 =
    0;\n        long num4 = 0;\n        long num5 = 0;\n        long num6 = 0;\n        long
    num7 = 0;\n        long num8 = 0;\n        long num9 = 0;\n        long num10
    = 0;\n        long num11 = 0;\n        long num12 = 0;\n        long num13 = 0;\n
    \       long num14 = 0;\n        long num15 = 0;\n        long num16 = 0;\n        long
    num17 = 0;\n        long num18 = 0;\n        long num19 = 0;\n        long num20
    = 0;\n        long num21 = 0;\n        long num22 = 0;\n        long num23 = 0;\n
    \       long num24 = 0;\n        long num25 = 0;\n        long num26 = 0;\n        long
    num27 = 0;\n        long num28 = 0;\n        long num29 = 0;\n        long num30
    = 0;\n        long num31 = 0;\n        long num32 = 0;\n        long num33 = 0;\n
    \       long num34 = 0;\n        long num35 = 0;\n        long num36 = 0;\n        long
    num37 = 0;\n        long num38 = 0;\n        long num39 = 0;\n        long num40
    = 0;\n        long num41 = 0;\n        long num42 = 0;\n        long num43 = 0;\n
    \       long num44 = 0;\n        long num45 = 0;\n        long num46 = 0;\n        long
    num47 = 0;\n        long num48 = 0;\n        long num49 = 0;\n        long num50
    = 0;\n        long num51 = 0;\n        long num52 = 0;\n        long num53 = 0;\n
    \       long num54 = 0;\n        long num55 = 0;\n        long num56 = 0;\n        long
    num57 = 0;\n        long num58 = 0;\n        long num59 = 0;\n        long num60
    = 0;\n        long num61 = 0;\n        long num62 = 0;\n        long num63 = 0;\n
    \       long num64 = 0;\n        long num65 = 0;\n        long num66 = 0;\n        long
    num67 = 0;\n        long num68 = 0;\n        long num69 = 0;\n        long num70
    = 0;\n        long num71 = 0;\n        long num72 = 0;\n        long num73 = 0;\n
    \       long num74 = 0;\n        long num75 = 0;\n        long num76 = 0;\n        long
    num77 = 0;\n        long num78 = 0;\n        long num79 = 0;\n        long num80
    = 0;\n        long num81 = 0;\n        long num82 = 0;\n        long num83 = 0;\n
    \       long num84 = 0;\n        long num85 = 0;\n        long num86 = 0;\n        long
    num87 = 0;\n\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HexKey((\"AB\"))
    == (1L));\n    Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\"))
    == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\"))
    == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\")) ==
    (12L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpajppcu5a.cs(21,14): warning CS0219: The variable ''num2'' is assigned
    but its value is never used

    /tmp/tmpajppcu5a.cs(22,14): warning CS0219: The variable ''num3'' is assigned
    but its value is never used

    /tmp/tmpajppcu5a.cs(23,14): warning CS0219: The variable ''num4'' is assigned
    but its value is never used

    /tmp/tmpajppcu5a.cs(24,14): warning CS0219: The variable ''num5'' is assigned
    but its value is never used

    /tmp/tmpajppcu5a.cs(25,14): warning CS0219: The variable ''num6'' is assigned
    but its value is never used

    /tmp/tmpajppcu5a.cs(26,14): warning CS0219: The variable ''num7'' is assigned
    but its value is never used

    /tmp/tmpajppcu5a.cs(27,14): warning CS0219: The variable ''num8'' is assigned
    but its value is never used

    /tmp/tmpajppcu5a.cs(28,14): warning CS0219: The variable ''num9'' is assigned
    but its value is never used

    /tmp/tmpajppcu5a.cs(29,14): warning CS0219: The variable ''num10'' is assigned
    but its value is never used

    /tmp/tmpajppcu5a.cs(30,14): warning CS0219: The variable ''num11'' is assigned
    but its value is never used

    /tmp/tmpajppcu5a.cs(31,14): warning CS0219: The variable ''num12'' is assigned
    but its value is never used

    /tmp/tmpajppcu5a.cs(32,14): warning CS0219: The variable ''num13'' is assigned
    but its value is never used

    /tmp/tmpajppcu5a.cs(33,14): warning CS0219: The variable ''num14'' is assigned
    but its value is never used

    /tmp/tmpajppcu5a.cs(34,14): warning CS0219: The variable ''num15'' is assigned
    but its value is never used

    /tmp/tmpajppcu5a.cs(35,14): warning CS0219: The variable ''num16'' is assigned
    but its value is never used

    /tmp/tmpajppcu5a.cs(36,14): warning CS0219: The variable ''num17'' is assigned
    but its value is never used

    /tmp/tmpajppcu5a.cs(37,14): warning CS0219: The variable ''num18'' is assigned
    but its value is never used

    /tmp/tmpajppcu5a.cs(38,14): warning CS0219: The variable ''num19'' is assigned
    but its value is never used

    /tmp/tmpajppcu5a.cs(39,14): warning CS0'
  timestamp: 1659976665
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    public
    static long HexKey(string num) {\n        long ret = 0;\n        foreach (char
    c in num) {\n            int val = (int)c;\n            if (val < '0' || val >
    '9') {\n                throw new ArgumentException(\"Hexadecimal number must
    be in range 0-9\");\n            }\n            int digit = val - '0';\n            if
    (digit < 2) {\n                throw new ArgumentException(\"Hexadecimal number
    must be in range 0-9\");\n            }\n            int power = (int)Math.Pow(16,
    digit);\n            if (power == 0) {\n                throw new ArgumentException(\"Hexadecimal
    number must be in range 0-9\");\n            }\n            int result = Math.Pow(digit,
    power);\n            ret += result;\n        }\n        return ret;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(HexKey((\"AB\")) == (1L));\n
    \   Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\"))
    == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\"))
    == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\")) ==
    (12L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpafz7zcgq.cs(35,26): error CS0266: Cannot implicitly convert type ''double''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659976665
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    public
    static long HexKey(string num) {\n        long sum = 0;\n        long numDigits
    = num.Length;\n        long numPrimes = 0;\n        long numPrimeDigits = 0;\n
    \       long numPrimePrimes = 0;\n        long numPrimePrimeDigits = 0;\n        long
    numPrimePrimePrimes = 0;\n        long numPrimePrimePrimeDigits = 0;\n        long
    numPrimePrimePrimePrimes = 0;\n        long numPrimePrimePrimePrimeDigits = 0;\n
    \       long numPrimePrimePrimePrimePrimes = 0;\n        long numPrimePrimePrimePrimePrimeDigits
    = 0;\n        long numPrimePrimePrimePrimePrimePrimes = 0;\n        long numPrimePrimePrimePrimePrimePrimeDigits
    = 0;\n        long numPrimePrimePrimePrimePrimePrimes = 0;\n        long numPrimePrimePrimePrimePrimePrimeDigits
    = 0;\n        long numPrimePrimePrimePrimePrimePrimePrimes = 0;\n        long
    numPrimePrimePrimePrimePrimePrimePrimeDigits = 0;\n        long numPrimePrimePrimePrimePrimePrimePrimePrimes
    = 0;\n        long numPrimePrimePrimePrimePrimePrimePrimeDigits = 0;\n        long
    numPrimePrimePrimePrimePrimePrimePrimePrimes = 0;\n        long numPrimePrimePrimePrimePrimePrimePrimePrimeDigits
    = 0;\n        long numPrimePrimePrimePrimePrimePrimePrimePrimePrimes = 0;\n        long
    numPrimePrimePrimePrimePrimePrimePrimePrimePrimeDigits = 0;\n        long numPrimePrimePrimePrimePrimePrimePrimePrimePrimes
    = 0;\n        long numPrimePrimePrimePrimePrimePrimePrimePrimePrimeDigits = 0;\n
    \       long numPrimePrimePrimePrimePrimePrimePrimePrimePrimes = 0;\n        long
    numPrimePrimePrimePrimePrimePrimePrimePrimePrimeDigits = 0;\n        long numPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimes
    = 0;\n        long numPrimePrimePrimePrimePrimePrimePrimePrimePrimePrime\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(HexKey((\"AB\"))
    == (1L));\n    Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\"))
    == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\"))
    == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\")) ==
    (12L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpt7_q38yj.cs(50,67): error CS1002: ; expected

    '
  timestamp: 1659976665
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    public
    static long HexKey(string num) {\n        long result = 0;\n        foreach (char
    c in num.ToUpper()) {\n            int digit = c - 'A';\n            if (digit
    < 0 || digit > 9) {\n                throw new ArgumentException(\"Invalid hexadecimal
    digit: \" + c);\n            }\n            result *= 16;\n            result
    += digit;\n        }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(HexKey((\"AB\")) == (1L));\n    Debug.Assert(HexKey((\"1077E\"))
    == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"2020\"))
    == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\")) == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\"))
    == (12L));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentException: Invalid hexadecimal digit:
    1\n  at Problem.HexKey (System.String num) [0x00045] in <36eae70fde2c47659f67ae242fe154c6>:0
    \n  at Problem.Main (System.String[] args) [0x00015] in <36eae70fde2c47659f67ae242fe154c6>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentException: Invalid hexadecimal
    digit: 1\n  at Problem.HexKey (System.String num) [0x00045] in <36eae70fde2c47659f67ae242fe154c6>:0
    \n  at Problem.Main (System.String[] args) [0x00015] in <36eae70fde2c47659f67ae242fe154c6>:0
    \n"
  stdout: ''
  timestamp: 1659976665
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    public
    static long HexKey(string num) {\n        long result = 0;\n        long digit
    = 0;\n        bool isPrime = true;\n        foreach (char c in num) {\n            digit
    = Convert.ToInt64(c);\n            if (digit < 0 || digit > 9) {\n                throw
    new ArgumentOutOfRangeException(\"num\", \"Hexadecimal number must be between
    0 and 9\");\n            }\n            if (isPrime) {\n                isPrime
    = IsPrime(digit);\n            }\n            if (isPrime) {\n                result
    += digit;\n            }\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(HexKey((\"AB\")) == (1L));\n
    \   Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\"))
    == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\"))
    == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\")) ==
    (12L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmppw6_56v5.cs(30,27): error CS0103: The name ''IsPrime'' does not exist
    in the current context

    '
  timestamp: 1659976665
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    public
    static long HexKey(string num) {\n        long result = 0;\n        string hex
    = num.ToUpper();\n        foreach (char c in hex) {\n            int digit = c
    - '0';\n            if (digit < 0 || digit > 9) {\n                throw new ArgumentOutOfRangeException(\"Hexadecimal
    digit must be between 0 and 9\");\n            }\n            result += (long)Math.Pow(16,
    digit);\n        }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(HexKey((\"AB\")) == (1L));\n    Debug.Assert(HexKey((\"1077E\"))
    == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"2020\"))
    == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\")) == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\"))
    == (12L));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Specified argument
    was out of the range of valid values.\nParameter name: Hexadecimal digit must
    be between 0 and 9\n  at Problem.HexKey (System.String num) [0x00038] in <874bd294ba4f4145a1216859e133dbb4>:0
    \n  at Problem.Main (System.String[] args) [0x00001] in <874bd294ba4f4145a1216859e133dbb4>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Specified
    argument was out of the range of valid values.\nParameter name: Hexadecimal digit
    must be between 0 and 9\n  at Problem.HexKey (System.String num) [0x00038] in
    <874bd294ba4f4145a1216859e133dbb4>:0 \n  at Problem.Main (System.String[] args)
    [0x00001] in <874bd294ba4f4145a1216859e133dbb4>:0 \n"
  stdout: ''
  timestamp: 1659976665
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    public
    static long HexKey(string num) {\n        long sum = 0;\n        long digit =
    0;\n        long prime = 0;\n        long product = 1;\n        string hex = num.ToUpper();\n
    \       foreach (char c in hex) {\n            digit = Convert.ToInt64(c);\n            product
    = product * digit;\n            sum += product;\n        }\n        prime = sum
    / 10;\n        return prime;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(HexKey((\"AB\")) == (1L));\n    Debug.Assert(HexKey((\"1077E\"))
    == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"2020\"))
    == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\")) == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\"))
    == (12L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a10d6fbd668346d8952ea08f1a479f12>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a10d6fbd668346d8952ea08f1a479f12>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976666
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    public
    static long HexKey(string num) {\n        long result = 0;\n        foreach (char
    c in num) {\n            int digit = c - '0';\n            if (digit < 0 || digit
    > 9) {\n                throw new ArgumentOutOfRangeException(\"Hex digits must
    be between 0 and 9\");\n            }\n            result *= 16;\n            result
    += digit;\n        }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(HexKey((\"AB\")) == (1L));\n    Debug.Assert(HexKey((\"1077E\"))
    == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"2020\"))
    == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\")) == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\"))
    == (12L));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Specified argument
    was out of the range of valid values.\nParameter name: Hex digits must be between
    0 and 9\n  at Problem.HexKey (System.String num) [0x0002f] in <2b9c1b3447654003896bf53dd66a765c>:0
    \n  at Problem.Main (System.String[] args) [0x00001] in <2b9c1b3447654003896bf53dd66a765c>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Specified
    argument was out of the range of valid values.\nParameter name: Hex digits must
    be between 0 and 9\n  at Problem.HexKey (System.String num) [0x0002f] in <2b9c1b3447654003896bf53dd66a765c>:0
    \n  at Problem.Main (System.String[] args) [0x00001] in <2b9c1b3447654003896bf53dd66a765c>:0
    \n"
  stdout: ''
  timestamp: 1659976665
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    public
    static long HexKey(string num) {\n        long result = 0;\n        foreach (char
    c in num.ToUpper()) {\n            int digit = c - 'A';\n            if (digit
    < 0 || digit > 9) {\n                throw new ArgumentOutOfRangeException(\"num\");\n
    \           }\n            result += digit * Math.Pow(16, digit);\n        }\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(HexKey((\"AB\")) == (1L));\n    Debug.Assert(HexKey((\"1077E\"))
    == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"2020\"))
    == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\")) == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\"))
    == (12L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp_88k4n0d.cs(27,13): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659976665
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    public
    static long HexKey(string num) {\n        long result = 0;\n        long pow =
    1;\n        foreach (char c in num) {\n            pow *= Convert.ToInt64(c);\n
    \       }\n        pow = Convert.ToInt64(Math.Pow(Convert.ToDouble(pow), 2));\n
    \       foreach (char c in num) {\n            result += Convert.ToInt64(c) *
    pow;\n            pow *= Convert.ToInt64(c);\n        }\n        return result;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(HexKey((\"AB\"))
    == (1L));\n    Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\"))
    == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\"))
    == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\")) ==
    (12L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <991b394d5dd148878d7452234ef535ca>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <991b394d5dd148878d7452234ef535ca>:0
    \n\nUnhandled Exception:\nSystem.OverflowException: Arithmetic operation resulted
    in an overflow.\n  at (wrapper managed-to-native) System.Object.__icall_wrapper___emul_fconv_to_ovf_i8(double)\n
    \ at System.Convert.ToInt64 (System.Double value) [0x00006] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at Problem.HexKey (System.String num) [0x00044] in <9"
  stdout: ''
  timestamp: 1659976666
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    public
    static long HexKey(string num) {\n        long sum = 0;\n        long numDigits
    = num.Length;\n        long digit;\n        bool isPrime;\n        string hexDigits
    = \"0123456789ABCDEF\";\n        foreach (char c in num) {\n            digit
    = hexDigits.IndexOf(c);\n            if (digit == -1) {\n                throw
    new Exception(\"Invalid hexadecimal digit: \" + c);\n            }\n            isPrime
    = true;\n            for (int i = 2; i <= Math.Sqrt(digit); i++) {\n                if
    (digit % i == 0) {\n                    isPrime = false;\n                    break;\n
    \               }\n            }\n            if (isPrime) {\n                sum
    += digit;\n            }\n        }\n        return sum;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(HexKey((\"AB\")) == (1L));\n    Debug.Assert(HexKey((\"1077E\"))
    == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"2020\"))
    == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\")) == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\"))
    == (12L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <01d7a0abb562469fbf35ce5667887594>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <01d7a0abb562469fbf35ce5667887594>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976666
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    public
    static long HexKey(string num) {\n        long sum = 0;\n        long digit =
    0;\n        long prime = 0;\n        long numDigits = num.Length;\n        bool
    isPrime = true;\n        bool isDigit = false;\n        bool isDigit2 = false;\n
    \       bool isDigit3 = false;\n        bool isDigit4 = false;\n        bool isDigit5
    = false;\n        bool isDigit6 = false;\n        bool isDigit7 = false;\n        bool
    isDigit8 = false;\n        bool isDigit9 = false;\n        bool isDigitA = false;\n
    \       bool isDigitB = false;\n        bool isDigitC = false;\n        bool isDigitD
    = false;\n        bool isDigitE = false;\n        bool isDigitF = false;\n        bool
    isDigitG = false;\n        bool isDigitH = false;\n        bool isDigitI = false;\n
    \       bool isDigitJ = false;\n        bool isDigitK = false;\n        bool isDigitL
    = false;\n        bool isDigitM = false;\n        bool isDigitN = false;\n        bool
    isDigitO = false;\n        bool isDigitP = false;\n        bool isDigitQ = false;\n
    \       bool isDigitR = false;\n        bool isDigitS = false;\n        bool isDigitT
    = false;\n        bool isDigitU = false;\n        bool isDigitV = false;\n        bool
    isDigitW = false;\n        bool isDigitX = false;\n        bool isDigitY = false;\n
    \       bool isDigitZ = false;\n        bool isDigit0 = false;\n        bool isDigit1
    = false;\n        bool isDigit2 = false;\n        bool isDigit3 = false;\n        bool
    isDigit4 = false;\n        bool isDigit5 = false;\n        bool isDigit6 = false;\n
    \       bool isDigit7 = false;\n        bool isDigit8 = false;\n        bool isDigit9
    = false;\n        bool isDigitA = false;\n        bool isDigitB = false;\n        bool
    isDigitC = false;\n        bool isDigitD = false;\n        bool isDigitE = false;\n
    \       bool isDigitF = false;\n        bool isDigitG = false;\n        bool isDigitH
    = false;\n        bool isDigitI = false;\n        bool isDigitJ = false;\n        bool
    isDigitK = false;\n        bool isDigitL = false;\n        bool isDigitM = false;\n
    \       bool isDigitN = false;\n        bool isDigitO = false;\n        bool isDigitP
    = false;\n        bool isDigitQ = false;\n        bool isDigitR = false;\n        bool
    isDigitS = false;\n        bool isDigitT = false;\n        bool isDigitU = false;\n
    \       bool isDigitV = false;\n        bool isDigitW = false;\n        bool isDigitX\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(HexKey((\"AB\"))
    == (1L));\n    Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\"))
    == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\"))
    == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\")) ==
    (12L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpidflkr0b.cs(94,22): error CS1002: ; expected

    '
  timestamp: 1659976665
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    public
    static long HexKey(string num) {\n        long result = 0;\n        foreach (char
    c in num) {\n            int digit = c - '0';\n            if (digit < 0 || digit
    > 9) {\n                throw new ArgumentOutOfRangeException(\"Hex digits must
    be between 0 and 9\");\n            }\n            result += (digit * Math.Pow(16,
    digit));\n        }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(HexKey((\"AB\")) == (1L));\n    Debug.Assert(HexKey((\"1077E\"))
    == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"2020\"))
    == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\")) == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\"))
    == (12L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpgs4vw6bl.cs(27,13): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659976665
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    public
    static long HexKey(string num) {\n        long ret = 0;\n        foreach (char
    c in num.ToUpper()) {\n            int num = Convert.ToInt32(c);\n            if
    (num < '0' || num > '9') {\n                continue;\n            }\n            long
    pow = Convert.ToInt64(Math.Pow(num, 2));\n            if (pow % 2 == 0) {\n                continue;\n
    \           }\n            ret = ret + pow;\n        }\n        return ret;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(HexKey((\"AB\"))
    == (1L));\n    Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\"))
    == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\"))
    == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\")) ==
    (12L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp0tj0ozv2.cs(23,17): error CS0136: A local or parameter named ''num'' cannot
    be declared in this scope because that name is used in an enclosing local scope
    to define a local or parameter

    '
  timestamp: 1659976665
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    public
    static long HexKey(string num) {\n        long result = 0;\n        foreach (char
    c in num.ToUpper()) {\n            int digit = c - 'A';\n            if (digit
    < 0 || digit > 9) {\n                throw new ArgumentOutOfRangeException(\"HexKey\");\n
    \           }\n            result += (long)Math.Pow(16, digit);\n        }\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HexKey((\"AB\"))
    == (1L));\n    Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\"))
    == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\"))
    == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\")) ==
    (12L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <51686e28d6da42f5b5e371f60e20ac5b>:0
    \n\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Specified argument
    was out of the range of valid values.\nParameter name: HexKey\n  at Problem.HexKey
    (System.String num) [0x00034] in <51686e28d6da42f5b5e371f60e20ac5b>:0 \n  at Problem.Main
    (System.String[] args) [0x00015] in <51686e28d6da42f5b5e371f60e20ac5b>:0 \n[ERROR]
    FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Specified argument
    was out of the range of valid values.\nParameter name: HexKey\n  at Problem.HexKey
    (System.String num) [0x00034] in <51686e28d6da42f5b5e371f60e20ac5b>:0 \n  at Problem.Main
    (System.String[] args) [0x00015] in <51686e28d6da42f5b5e371f60e20ac5b>:0 \n"
  stdout: ''
  timestamp: 1659976666
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    public
    static long HexKey(string num) {\n        long result = 0;\n        long digit
    = 0;\n        long prime = 0;\n        long product = 1;\n        bool isPrime
    = true;\n        bool isDigit = true;\n        foreach (char c in num) {\n            isDigit
    = Char.IsDigit(c);\n            isPrime = Char.IsUpper(c);\n            if (isDigit
    && isPrime) {\n                digit = Convert.ToInt64(c);\n                product
    *= digit;\n            }\n            if (isDigit) {\n                result +=
    (digit * digit);\n            }\n            if (isPrime) {\n                prime
    = Convert.ToInt64(c);\n            }\n        }\n        if (product == 1) {\n
    \           result += (prime * prime);\n        }\n        return result;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(HexKey((\"AB\"))
    == (1L));\n    Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\"))
    == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\"))
    == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\")) ==
    (12L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <b535b3da841545358f74c0623549f504>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <b535b3da841545358f74c0623549f504>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976666
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    public
    static long HexKey(string num) {\n        long result = 0;\n        foreach (char
    c in num.ToUpper()) {\n            int digit = c - 'A';\n            result +=
    (digit * digit);\n        }\n        return result;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(HexKey((\"AB\")) == (1L));\n    Debug.Assert(HexKey((\"1077E\"))
    == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"2020\"))
    == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\")) == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\"))
    == (12L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <0a67c966834f439693c67180ca789443>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <0a67c966834f439693c67180ca789443>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976666
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    public
    static long HexKey(string num) {\n        long numDigits = num.Length;\n        long
    numPrimes = 0;\n        long numPrimes2 = numDigits;\n        long numPrimes3
    = numDigits;\n        long numPrimes4 = numDigits;\n        long numPrimes5 =
    numDigits;\n        long numPrimes6 = numDigits;\n        long numPrimes7 = numDigits;\n
    \       long numPrimes8 = numDigits;\n        long numPrimes9 = numDigits;\n        long
    numPrimes10 = numDigits;\n        long numPrimes11 = numDigits;\n        long
    numPrimes12 = numDigits;\n        long numPrimes13 = numDigits;\n        long
    numPrimes14 = numDigits;\n        long numPrimes15 = numDigits;\n        long
    numPrimes16 = numDigits;\n        long numPrimes17 = numDigits;\n        long
    numPrimes18 = numDigits;\n        long numPrimes19 = numDigits;\n        long
    numPrimes20 = numDigits;\n        long numPrimes21 = numDigits;\n        long
    numPrimes22 = numDigits;\n        long numPrimes23 = numDigits;\n        long
    numPrimes24 = numDigits;\n        long numPrimes25 = numDigits;\n        long
    numPrimes26 = numDigits;\n        long numPrimes27 = numDigits;\n        long
    numPrimes28 = numDigits;\n        long numPrimes29 = numDigits;\n        long
    numPrimes30 = numDigits;\n        long numPrimes31 = numDigits;\n        long
    numPrimes32 = numDigits;\n        long numPrimes33 = numDigits;\n        long
    numPrimes34 = numDigits;\n        long numPrimes35 = numDigits;\n        long
    numPrimes36 = numDigits;\n        long numPrimes37 = numDigits;\n        long
    numPrimes38 = numDigits;\n        long numPrimes39 = numDigits;\n        long
    numPrimes40 = numDigits;\n        long numPrimes41 = numDigits;\n        long
    numPrimes42 = numDigits;\n        long numPrimes43 = numDigits;\n        long
    numPrimes44 = numDigits;\n        long numPrimes45 = numDigits;\n        long
    numPrimes46 = numDigits;\n        long numPrimes47 = numDigits;\n\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(HexKey((\"AB\")) == (1L));\n
    \   Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\"))
    == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\"))
    == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\")) ==
    (12L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp8l0_qt2f.cs(22,14): warning CS0219: The variable ''numPrimes'' is assigned
    but its value is never used

    /tmp/tmp8l0_qt2f.cs(20,24): error CS0161: ''Problem.HexKey(string)'': not all
    code paths return a value

    '
  timestamp: 1659976665
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    public
    static long HexKey(string num) {\n        long result = 0;\n        long temp
    = 0;\n        bool isPrime = true;\n        foreach (char c in num.ToUpper())
    {\n            temp = Convert.ToInt64(c);\n            if (temp % 2 == 0) {\n
    \               isPrime = false;\n                break;\n            }\n        }\n
    \       if (isPrime) {\n            foreach (char c in num.ToUpper()) {\n                temp
    = Convert.ToInt64(c);\n                if (temp % 3 == 0) {\n                    isPrime
    = false;\n                    break;\n                }\n            }\n        }\n
    \       if (isPrime) {\n            foreach (char c in num.ToUpper()) {\n                temp
    = Convert.ToInt64(c);\n                if (temp % 5 == 0) {\n                    isPrime
    = false;\n                    break;\n                }\n            }\n        }\n
    \       if (isPrime) {\n            foreach (char c in num.ToUpper()) {\n                temp
    = Convert.ToInt64(c);\n                if (temp % 7 == 0) {\n                    isPrime
    = false;\n                    break;\n                }\n            }\n        }\n
    \       if (isPrime) {\n            foreach (char c in num.ToUpper()) {\n                temp
    = Convert.ToInt64(c);\n                if (temp % 11 == 0) {\n                    isPrime
    = false;\n                    break;\n                }\n            }\n        }\n
    \       if (isPrime) {\n            foreach (char c in num.ToUpper()) {\n                temp
    = Convert.ToInt64(c);\n                if (temp % 13 == 0) {\n                    isPrime
    = false;\n                    break;\n                }\n            }\n        }\n
    \       if (isPrime) {\n            foreach (char c in num.ToUpper()) {\n                temp
    = Convert.ToInt64(c);\n                if (temp % 17 == 0) {\n                    isPrime
    = false;\n                    break;\n                }\n            }\n        }\n
    \       if (isPrime) {\n            foreach (char c in num.ToUpper()) {\n                temp
    = Convert.ToInt64(c);\n                if (temp % 19 == 0) {\n                    isPrime
    = false;\n                    break;\n                }\n            }\n        }\n
    \       if (isPrime) {\n            foreach (char c in num.ToUpper()) {\n                temp
    = Convert.ToInt64(c);\n                if (temp % 23 == 0) {\n                    isPrime
    = false;\n                    break;\n                }\n            }\n        }\n
    \       if (isPrime) {\n            foreach (char c in num.ToUpper()) {\n                temp
    = Convert.ToInt64(c);\n                if (temp % 29 == 0) {\n                    isPrime
    = false;\n                    break;\n                }\n            }\n        }\n
    \       if (isPrime) {\n            foreach (char c in num.ToUpper()) {\n                temp
    = Convert.ToInt64(c);\n                if (temp % 31 == 0) {\n                    isPrime
    = false;\n                    break;\n                }\n            }\n        }\n
    \       if (isPrime) {\n            foreach (char c in num.ToUpper()) {\n                temp
    = Conver\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HexKey((\"AB\"))
    == (1L));\n    Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\"))
    == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\"))
    == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\")) ==
    (12L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpa9_fsngv.cs(123,30): error CS1002: ; expected

    /tmp/tmpa9_fsngv.cs(125,5): error CS0106: The modifier ''public'' is not valid
    for this item

    /tmp/tmpa9_fsngv.cs(134,2): error CS1513: } expected

    '
  timestamp: 1659976665
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    public
    static long HexKey(string num) {\n        long result = 0;\n        foreach (char
    c in num) {\n            int digit = c - 'A';\n            result += (digit *
    digit);\n        }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(HexKey((\"AB\")) == (1L));\n    Debug.Assert(HexKey((\"1077E\"))
    == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"2020\"))
    == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\")) == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\"))
    == (12L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <0feedefdf6934771b87914e70d41ff11>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <0feedefdf6934771b87914e70d41ff11>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976666
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    public
    static long HexKey(string num) {\n        long result = 0;\n        foreach (char
    c in num.ToUpper()) {\n            if (c == 'A' || c == 'B' || c == 'C' || c ==
    'D' || c == 'E' || c == 'F') {\n                result += Convert.ToInt64(c);\n
    \           }\n        }\n        return result;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(HexKey((\"AB\")) == (1L));\n    Debug.Assert(HexKey((\"1077E\"))
    == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"2020\"))
    == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\")) == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\"))
    == (12L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <0e51bda38bff4682aef93dfa5e9b5a9f>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <0e51bda38bff4682aef93dfa5e9b5a9f>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976666
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    public
    static long HexKey(string num) {\n        long result = 0;\n        string hex
    = num.ToUpper();\n        foreach (char c in hex) {\n            int d = c - 'A';\n
    \           result += (d * d);\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(HexKey((\"AB\")) == (1L));\n
    \   Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\"))
    == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\"))
    == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\")) ==
    (12L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <013382f3d38a4b829f1f92cc711b8e7c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <013382f3d38a4b829f1f92cc711b8e7c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976666
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    public
    static long HexKey(string num) {\n        long result = 0;\n        long digit
    = 0;\n        bool isPrime = true;\n        foreach (char c in num.ToUpper())
    {\n            digit = Convert.ToInt64(c);\n            if (digit == 0) {\n                isPrime
    = false;\n                break;\n            }\n            if (isPrime) {\n
    \               result += (digit % 2 == 0 ? 1 : 0);\n            }\n        }\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(HexKey((\"AB\")) == (1L));\n    Debug.Assert(HexKey((\"1077E\"))
    == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"2020\"))
    == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\")) == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\"))
    == (12L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <8b912e3177b04cfbab6bd60263541ff9>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <8b912e3177b04cfbab6bd60263541ff9>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976666
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    public
    static long HexKey(string num) {\n        long sum = 0;\n        long sum2 = 0;\n
    \       long sum3 = 0;\n        long sum4 = 0;\n        long sum5 = 0;\n        long
    sum6 = 0;\n        long sum7 = 0;\n        long sum8 = 0;\n        long sum9 =
    0;\n        long sum10 = 0;\n        long sum11 = 0;\n        long sum12 = 0;\n
    \       long sum13 = 0;\n        long sum14 = 0;\n        long sum15 = 0;\n        long
    sum16 = 0;\n        long sum17 = 0;\n        long sum18 = 0;\n        long sum19
    = 0;\n        long sum20 = 0;\n        long sum21 = 0;\n        long sum22 = 0;\n
    \       long sum23 = 0;\n        long sum24 = 0;\n        long sum25 = 0;\n        long
    sum26 = 0;\n        long sum27 = 0;\n        long sum28 = 0;\n        long sum29
    = 0;\n        long sum30 = 0;\n        long sum31 = 0;\n        long sum32 = 0;\n
    \       long sum33 = 0;\n        long sum34 = 0;\n        long sum35 = 0;\n        long
    sum36 = 0;\n        long sum37 = 0;\n        long sum38 = 0;\n        long sum39
    = 0;\n        long sum40 = 0;\n        long sum41 = 0;\n        long sum42 = 0;\n
    \       long sum43 = 0;\n        long sum44 = 0;\n        long sum45 = 0;\n        long
    sum46 = 0;\n        long sum47 = 0;\n        long sum48 = 0;\n        long sum49
    = 0;\n        long sum50 = 0;\n        long sum51 = 0;\n        long sum52 = 0;\n
    \       long sum53 = 0;\n        long sum54 = 0;\n        long sum55 = 0;\n        long
    sum56 = 0;\n        long sum57 = 0;\n        long sum58 = 0;\n        long sum59
    = 0;\n        long sum60 = 0;\n        long sum61 = 0;\n        long sum62 = 0;\n
    \       long sum63 = 0;\n        long sum64 = 0;\n        long sum65 = 0;\n        long
    sum66 = 0;\n        long sum67 = 0;\n        long sum68 = 0;\n        long sum69
    = 0;\n        long sum70 = 0;\n        long sum71 = 0;\n        long sum72 = 0;\n
    \       long sum73 = 0;\n        long sum74 = 0;\n        long sum75 = 0;\n        long
    sum76 = 0;\n        long sum77 = 0;\n        long sum78 = 0;\n        long sum79
    = 0;\n        long sum80 = 0;\n        long sum81 = 0;\n        long sum82 = 0;\n
    \       long sum83 = 0;\n        long sum84 = 0;\n        long sum85 = 0;\n        long
    sum86 = 0;\n        \n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HexKey((\"AB\"))
    == (1L));\n    Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\"))
    == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\"))
    == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\")) ==
    (12L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpytbvst_a.cs(21,14): warning CS0219: The variable ''sum'' is assigned but
    its value is never used

    /tmp/tmpytbvst_a.cs(22,14): warning CS0219: The variable ''sum2'' is assigned
    but its value is never used

    /tmp/tmpytbvst_a.cs(23,14): warning CS0219: The variable ''sum3'' is assigned
    but its value is never used

    /tmp/tmpytbvst_a.cs(24,14): warning CS0219: The variable ''sum4'' is assigned
    but its value is never used

    /tmp/tmpytbvst_a.cs(25,14): warning CS0219: The variable ''sum5'' is assigned
    but its value is never used

    /tmp/tmpytbvst_a.cs(26,14): warning CS0219: The variable ''sum6'' is assigned
    but its value is never used

    /tmp/tmpytbvst_a.cs(27,14): warning CS0219: The variable ''sum7'' is assigned
    but its value is never used

    /tmp/tmpytbvst_a.cs(28,14): warning CS0219: The variable ''sum8'' is assigned
    but its value is never used

    /tmp/tmpytbvst_a.cs(29,14): warning CS0219: The variable ''sum9'' is assigned
    but its value is never used

    /tmp/tmpytbvst_a.cs(30,14): warning CS0219: The variable ''sum10'' is assigned
    but its value is never used

    /tmp/tmpytbvst_a.cs(31,14): warning CS0219: The variable ''sum11'' is assigned
    but its value is never used

    /tmp/tmpytbvst_a.cs(32,14): warning CS0219: The variable ''sum12'' is assigned
    but its value is never used

    /tmp/tmpytbvst_a.cs(33,14): warning CS0219: The variable ''sum13'' is assigned
    but its value is never used

    /tmp/tmpytbvst_a.cs(34,14): warning CS0219: The variable ''sum14'' is assigned
    but its value is never used

    /tmp/tmpytbvst_a.cs(35,14): warning CS0219: The variable ''sum15'' is assigned
    but its value is never used

    /tmp/tmpytbvst_a.cs(36,14): warning CS0219: The variable ''sum16'' is assigned
    but its value is never used

    /tmp/tmpytbvst_a.cs(37,14): warning CS0219: The variable ''sum17'' is assigned
    but its value is never used

    /tmp/tmpytbvst_a.cs(38,14): warning CS0219: The variable ''sum18'' is assigned
    but its value is never used

    /tmp/tmpytbvst_a.cs(39,14): warning CS021'
  timestamp: 1659976665
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    public
    static long HexKey(string num) {\n        long result = 0;\n        string hex
    = num.ToUpper();\n        foreach (char c in hex) {\n            int digit = c
    - 'A';\n            result += (digit * digit);\n        }\n        return result;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(HexKey((\"AB\"))
    == (1L));\n    Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\"))
    == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\"))
    == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\")) ==
    (12L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c84f66ffdad9434a8313dc644af10dcf>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c84f66ffdad9434a8313dc644af10dcf>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976666
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    public
    static long HexKey(string num) {\n        long result = 0;\n        long digit
    = 0;\n        bool isPrime = true;\n        foreach (char c in num.ToUpper())
    {\n            digit = Convert.ToInt64(c);\n            if (digit % 2 == 0) {\n
    \               isPrime = false;\n            }\n            if (isPrime) {\n
    \               result += digit;\n            }\n        }\n        return result;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(HexKey((\"AB\"))
    == (1L));\n    Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\"))
    == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\"))
    == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\")) ==
    (12L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <6857229335d24f2388ca1961eabf611e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <6857229335d24f2388ca1961eabf611e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976666
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    public
    static long HexKey(string num) {\n        long result = 0;\n        foreach (char
    c in num) {\n            if (char.IsDigit(c)) {\n                result += Convert.ToInt64(Math.Pow(16,
    num.Length - 1));\n                result += (c - '0');\n            }\n        }\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(HexKey((\"AB\")) == (1L));\n    Debug.Assert(HexKey((\"1077E\"))
    == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"2020\"))
    == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\")) == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\"))
    == (12L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <dbbe09de485d4e1faf0d46de0229c693>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <dbbe09de485d4e1faf0d46de0229c693>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976666
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    public
    static long HexKey(string num) {\n        long numDigits = num.Length;\n        long
    numPrimes = 0;\n        long numPrimeDigits = 0;\n        long numPrimeDigits2
    = 0;\n        long numPrimeDigits3 = 0;\n        long numPrimeDigits4 = 0;\n        long
    numPrimeDigits5 = 0;\n        long numPrimeDigits6 = 0;\n        long numPrimeDigits7
    = 0;\n        long numPrimeDigits8 = 0;\n        long numPrimeDigits9 = 0;\n        long
    numPrimeDigits10 = 0;\n        long numPrimeDigits11 = 0;\n        long numPrimeDigits12
    = 0;\n        long numPrimeDigits13 = 0;\n        long numPrimeDigits14 = 0;\n
    \       long numPrimeDigits15 = 0;\n        long numPrimeDigits16 = 0;\n        long
    numPrimeDigits17 = 0;\n        long numPrimeDigits18 = 0;\n        long numPrimeDigits19
    = 0;\n        long numPrimeDigits20 = 0;\n        long numPrimeDigits21 = 0;\n
    \       long numPrimeDigits22 = 0;\n        long numPrimeDigits23 = 0;\n        long
    numPrimeDigits24 = 0;\n        long numPrimeDigits25 = 0;\n        long numPrimeDigits26
    = 0;\n        long numPrimeDigits27 = 0;\n        long numPrimeDigits28 = 0;\n
    \       long numPrimeDigits29 = 0;\n        long numPrimeDigits30 = 0;\n        long
    numPrimeDigits31 = 0;\n        long numPrimeDigits32 = 0;\n        long numPrimeDigits33
    = 0;\n        long numPrimeDigits34 = 0;\n        long numPrimeDigits35 = 0;\n
    \       long numPrimeDigits36 = 0;\n        long numPrimeDigits37 = 0;\n        long
    numPrimeDigits38 = 0;\n        long numPrimeDigits39 = 0;\n        long numPrimeDigits40
    = 0;\n        long numPrimeDigits41 = 0;\n        long numPrimeDigits42 = 0;\n
    \       long numPrimeDigits43 = 0;\n        long numPrimeDigits44 = 0;\n        long
    numPrimeDigits45 = 0;\n        long numPrimeDigits46 = 0;\n        long numPrimeDigits47
    = 0;\n        long numPrimeDigits48 = 0;\n        long numPrimeDigits49 = 0;\n
    \       long numPrimeDigits50 = 0;\n        \n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(HexKey((\"AB\")) == (1L));\n    Debug.Assert(HexKey((\"1077E\"))
    == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"2020\"))
    == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\")) == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\"))
    == (12L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmptnzhiced.cs(22,14): warning CS0219: The variable ''numPrimes'' is assigned
    but its value is never used

    /tmp/tmptnzhiced.cs(23,14): warning CS0219: The variable ''numPrimeDigits'' is
    assigned but its value is never used

    /tmp/tmptnzhiced.cs(24,14): warning CS0219: The variable ''numPrimeDigits2'' is
    assigned but its value is never used

    /tmp/tmptnzhiced.cs(25,14): warning CS0219: The variable ''numPrimeDigits3'' is
    assigned but its value is never used

    /tmp/tmptnzhiced.cs(26,14): warning CS0219: The variable ''numPrimeDigits4'' is
    assigned but its value is never used

    /tmp/tmptnzhiced.cs(27,14): warning CS0219: The variable ''numPrimeDigits5'' is
    assigned but its value is never used

    /tmp/tmptnzhiced.cs(28,14): warning CS0219: The variable ''numPrimeDigits6'' is
    assigned but its value is never used

    /tmp/tmptnzhiced.cs(29,14): warning CS0219: The variable ''numPrimeDigits7'' is
    assigned but its value is never used

    /tmp/tmptnzhiced.cs(30,14): warning CS0219: The variable ''numPrimeDigits8'' is
    assigned but its value is never used

    /tmp/tmptnzhiced.cs(31,14): warning CS0219: The variable ''numPrimeDigits9'' is
    assigned but its value is never used

    /tmp/tmptnzhiced.cs(32,14): warning CS0219: The variable ''numPrimeDigits10''
    is assigned but its value is never used

    /tmp/tmptnzhiced.cs(33,14): warning CS0219: The variable ''numPrimeDigits11''
    is assigned but its value is never used

    /tmp/tmptnzhiced.cs(34,14): warning CS0219: The variable ''numPrimeDigits12''
    is assigned but its value is never used

    /tmp/tmptnzhiced.cs(35,14): warning CS0219: The variable ''numPrimeDigits13''
    is assigned but its value is never used

    /tmp/tmptnzhiced.cs(36,14): warning CS0219: The variable ''numPrimeDigits14''
    is assigned but its value is never used

    /tmp/tmptnzhiced.cs(37,14): warning CS0219: The variable ''numPrimeDigits15''
    is assigned but its value is never used

    /tmp/tmptnzhiced.cs(38,14): warning CS0219: The variable ''numPrimeDigits16''
    is ass'
  timestamp: 1659976666
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    public
    static long HexKey(string num) {\n        long result = 0;\n        foreach (char
    c in num.ToUpper()) {\n            int d = (int)c;\n            if (d >= 'A' &&
    d <= 'F') {\n                d -= 'A' - 10;\n            }\n            result
    += d * d;\n        }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(HexKey((\"AB\")) == (1L));\n    Debug.Assert(HexKey((\"1077E\"))
    == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"2020\"))
    == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\")) == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\"))
    == (12L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f8958fa51f7d42bb8b9b2dcbcb8cd0d7>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f8958fa51f7d42bb8b9b2dcbcb8cd0d7>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976666
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    public
    static long HexKey(string num) {\n        long result = 0;\n        string hex
    = num.ToUpper();\n        foreach (char c in hex) {\n            int digit = Convert.ToInt32(c);\n
    \           if (digit < 'A' || digit > 'F') {\n                throw new ArgumentOutOfRangeException(\"Hex
    digit must be between A and F\");\n            }\n            result += (digit
    - 'A') * Math.Pow(16, hex.Length - 1 - hex.IndexOf(c));\n        }\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HexKey((\"AB\"))
    == (1L));\n    Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\"))
    == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\"))
    == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\")) ==
    (12L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp6p7ur5r9.cs(28,13): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659976666
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    public
    static long HexKey(string num) {\n        long result = 0;\n        foreach (char
    c in num) {\n            int digit = c - '0';\n            if (digit < 0 || digit
    > 9) {\n                throw new ArgumentException(\"Invalid hexadecimal digit.\");\n
    \           }\n            result *= 16;\n            result += digit;\n        }\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(HexKey((\"AB\")) == (1L));\n    Debug.Assert(HexKey((\"1077E\"))
    == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"2020\"))
    == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\")) == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\"))
    == (12L));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentException: Invalid hexadecimal digit.\n
    \ at Problem.HexKey (System.String num) [0x0002f] in <52db682e2b7a4b2c84ae5160bd26092e>:0
    \n  at Problem.Main (System.String[] args) [0x00001] in <52db682e2b7a4b2c84ae5160bd26092e>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentException: Invalid hexadecimal
    digit.\n  at Problem.HexKey (System.String num) [0x0002f] in <52db682e2b7a4b2c84ae5160bd26092e>:0
    \n  at Problem.Main (System.String[] args) [0x00001] in <52db682e2b7a4b2c84ae5160bd26092e>:0
    \n"
  stdout: ''
  timestamp: 1659976666
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    public
    static long HexKey(string num) {\n        long num2 = 0;\n        long num3 =
    0;\n        long num4 = 0;\n        long num5 = 0;\n        long num6 = 0;\n        long
    num7 = 0;\n        long num8 = 0;\n        long num9 = 0;\n        long num10
    = 0;\n        long num11 = 0;\n        long num12 = 0;\n        long num13 = 0;\n
    \       long num14 = 0;\n        long num15 = 0;\n        long num16 = 0;\n        long
    num17 = 0;\n        long num18 = 0;\n        long num19 = 0;\n        long num20
    = 0;\n        long num21 = 0;\n        long num22 = 0;\n        long num23 = 0;\n
    \       long num24 = 0;\n        long num25 = 0;\n        long num26 = 0;\n        long
    num27 = 0;\n        long num28 = 0;\n        long num29 = 0;\n        long num30
    = 0;\n        long num31 = 0;\n        long num32 = 0;\n        long num33 = 0;\n
    \       long num34 = 0;\n        long num35 = 0;\n        long num36 = 0;\n        long
    num37 = 0;\n        long num38 = 0;\n        long num39 = 0;\n        long num40
    = 0;\n        long num41 = 0;\n        long num42 = 0;\n        long num43 = 0;\n
    \       long num44 = 0;\n        long num45 = 0;\n        long num46 = 0;\n        long
    num47 = 0;\n        long num48 = 0;\n        long num49 = 0;\n        long num50
    = 0;\n        long num51 = 0;\n        long num52 = 0;\n        long num53 = 0;\n
    \       long num54 = 0;\n        long num55 = 0;\n        long num56 = 0;\n        long
    num57 = 0;\n        long num58 = 0;\n        long num59 = 0;\n        long num60
    = 0;\n        long num61 = 0;\n        long num62 = 0;\n        long num63 = 0;\n
    \       long num64 = 0;\n        long num65 = 0;\n        long num66 = 0;\n        long
    num67 = 0;\n        long num68 = 0;\n        long num69 = 0;\n        long num70
    = 0;\n        long num71 = 0;\n        long num72 = 0;\n        long num73 = 0;\n
    \       long num74 = 0;\n        long num75 = 0;\n        long num76 = 0;\n        long
    num77 = 0;\n        long num78 = 0;\n        long num79 = 0;\n        long num80
    = 0;\n        long num81 = 0;\n        long num82 = 0;\n        long num83 = 0;\n
    \       long num84 = 0;\n        long num85 = 0;\n        long num86 = 0;\n        long
    num87 = 0;\n\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HexKey((\"AB\"))
    == (1L));\n    Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\"))
    == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\"))
    == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\")) ==
    (12L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpajppcu5a.cs(21,14): warning CS0219: The variable ''num2'' is assigned
    but its value is never used

    /tmp/tmpajppcu5a.cs(22,14): warning CS0219: The variable ''num3'' is assigned
    but its value is never used

    /tmp/tmpajppcu5a.cs(23,14): warning CS0219: The variable ''num4'' is assigned
    but its value is never used

    /tmp/tmpajppcu5a.cs(24,14): warning CS0219: The variable ''num5'' is assigned
    but its value is never used

    /tmp/tmpajppcu5a.cs(25,14): warning CS0219: The variable ''num6'' is assigned
    but its value is never used

    /tmp/tmpajppcu5a.cs(26,14): warning CS0219: The variable ''num7'' is assigned
    but its value is never used

    /tmp/tmpajppcu5a.cs(27,14): warning CS0219: The variable ''num8'' is assigned
    but its value is never used

    /tmp/tmpajppcu5a.cs(28,14): warning CS0219: The variable ''num9'' is assigned
    but its value is never used

    /tmp/tmpajppcu5a.cs(29,14): warning CS0219: The variable ''num10'' is assigned
    but its value is never used

    /tmp/tmpajppcu5a.cs(30,14): warning CS0219: The variable ''num11'' is assigned
    but its value is never used

    /tmp/tmpajppcu5a.cs(31,14): warning CS0219: The variable ''num12'' is assigned
    but its value is never used

    /tmp/tmpajppcu5a.cs(32,14): warning CS0219: The variable ''num13'' is assigned
    but its value is never used

    /tmp/tmpajppcu5a.cs(33,14): warning CS0219: The variable ''num14'' is assigned
    but its value is never used

    /tmp/tmpajppcu5a.cs(34,14): warning CS0219: The variable ''num15'' is assigned
    but its value is never used

    /tmp/tmpajppcu5a.cs(35,14): warning CS0219: The variable ''num16'' is assigned
    but its value is never used

    /tmp/tmpajppcu5a.cs(36,14): warning CS0219: The variable ''num17'' is assigned
    but its value is never used

    /tmp/tmpajppcu5a.cs(37,14): warning CS0219: The variable ''num18'' is assigned
    but its value is never used

    /tmp/tmpajppcu5a.cs(38,14): warning CS0219: The variable ''num19'' is assigned
    but its value is never used

    /tmp/tmpajppcu5a.cs(39,14): warning CS0'
  timestamp: 1659976665
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    public
    static long HexKey(string num) {\n        long result = 0;\n        foreach (char
    c in num) {\n            int digit = c - '0';\n            if (digit < 0 || digit
    > 9) {\n                throw new ArgumentOutOfRangeException(\"Hex digit must
    be between 0 and 9\");\n            }\n            result += (digit * Math.Pow(16,
    digit));\n        }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(HexKey((\"AB\")) == (1L));\n    Debug.Assert(HexKey((\"1077E\"))
    == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"2020\"))
    == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\")) == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\"))
    == (12L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp1uyu1c18.cs(27,13): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659976666
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    public
    static long HexKey(string num) {\n        long ret = 0;\n        foreach (char
    c in num) {\n            int d = (int)c;\n            if (d >= '0' && d <= '9')
    {\n                ret += d * 0x30;\n            } else if (d >= 'A' && d <= 'F')
    {\n                ret += d * 0x40 + 0x61;\n            } else {\n                throw
    new Exception(\"Invalid hexadecimal digit: \" + d);\n            }\n        }\n
    \       return ret;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HexKey((\"AB\"))
    == (1L));\n    Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\"))
    == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\"))
    == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\")) ==
    (12L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <4a2234030673468aa1b23363f4c50107>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <4a2234030673468aa1b23363f4c50107>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976666
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    public
    static long HexKey(string num) {\n        long ret = 0;\n        foreach (char
    c in num) {\n            int d = (int)c;\n            if (d >= '0' && d <= '9')
    {\n                ret += d * 0x30;\n            } else if (d >= 'A' && d <= 'F')
    {\n                ret += d * 0x40 + 10;\n            } else {\n                throw
    new Exception(\"Invalid hexadecimal digit: \" + d);\n            }\n        }\n
    \       return ret;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HexKey((\"AB\"))
    == (1L));\n    Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\"))
    == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\"))
    == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\")) ==
    (12L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <374087c4018a4e828e84439c9fda111d>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <374087c4018a4e828e84439c9fda111d>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976666
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    public
    static long HexKey(string num) {\n        long result = 0;\n        foreach (char
    c in num.ToUpper()) {\n            int d = (int)c;\n            if (d >= '0' &&
    d <= '9') {\n                result += Math.Pow(16, (int)c - '0');\n            }\n
    \       }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(HexKey((\"AB\")) == (1L));\n    Debug.Assert(HexKey((\"1077E\"))
    == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"2020\"))
    == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\")) == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\"))
    == (12L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpdjhead0f.cs(25,17): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659976666
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    public
    static long HexKey(string num) {\n        long ret = 0;\n        foreach (char
    c in num) {\n            int d = (int)c;\n            if (d >= '0' && d <= '9')
    {\n                ret += d * 16;\n            } else if (d >= 'A' && d <= 'F')
    {\n                ret += d - 'A' + 10;\n            } else {\n                throw
    new Exception(\"Invalid hexadecimal digit: \" + d);\n            }\n        }\n
    \       return ret;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HexKey((\"AB\"))
    == (1L));\n    Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\"))
    == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\"))
    == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\")) ==
    (12L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <800fb0b127b34af6ba47b09e53539342>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <800fb0b127b34af6ba47b09e53539342>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976666
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    public
    static long HexKey(string num) {\n        long result = 0;\n        long digit
    = 0;\n        long prime = 0;\n        long product = 0;\n        long sum = 0;\n
    \       bool isPrime = true;\n        foreach (char c in num) {\n            digit
    = Convert.ToInt64(c);\n            sum += digit;\n        }\n        product =
    sum;\n        prime = Convert.ToInt64(Math.Pow(product, 2));\n        result +=
    (prime * 2);\n        foreach (char c in num) {\n            digit = Convert.ToInt64(c);\n
    \           if (digit % 2 == 0) {\n                isPrime = false;\n            }\n
    \           if (isPrime) {\n                result += (digit * 2);\n            }\n
    \       }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(HexKey((\"AB\")) == (1L));\n    Debug.Assert(HexKey((\"1077E\"))
    == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"2020\"))
    == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\")) == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\"))
    == (12L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <53b33dc4d68345579de0984bdb8336d1>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <53b33dc4d68345579de0984bdb8336d1>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976666
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    public
    static long HexKey(string num) {\n        long result = 0;\n        foreach (char
    c in num.ToUpper()) {\n            result *= 16;\n            result += Convert.ToInt32(c);\n
    \       }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(HexKey((\"AB\")) == (1L));\n    Debug.Assert(HexKey((\"1077E\"))
    == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"2020\"))
    == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\")) == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\"))
    == (12L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <0d797489f6f34715b9ea14e6c3197332>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <0d797489f6f34715b9ea14e6c3197332>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976666
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    public
    static long HexKey(string num) {\n        long sum = 0;\n        foreach (char
    c in num.ToUpper()) {\n            int digit = c - 'A';\n            sum += digit
    * digit;\n        }\n        return sum;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(HexKey((\"AB\")) == (1L));\n    Debug.Assert(HexKey((\"1077E\"))
    == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"2020\"))
    == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\")) == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\"))
    == (12L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a141a5ed59034b97a15719290bb7f42a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a141a5ed59034b97a15719290bb7f42a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976666
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    public
    static long HexKey(string num) {\n        long result = 0;\n        long temp
    = 0;\n        bool isPrime = true;\n        foreach (char c in num) {\n            temp
    = Convert.ToInt64(c);\n            if (temp > 9) {\n                temp = temp
    - 10;\n            }\n            if (isPrime) {\n                isPrime = IsPrime(temp);\n
    \           }\n            if (isPrime) {\n                result += temp;\n            }\n
    \       }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(HexKey((\"AB\")) == (1L));\n    Debug.Assert(HexKey((\"1077E\"))
    == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"2020\"))
    == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\")) == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\"))
    == (12L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp8el94x7_.cs(30,27): error CS0103: The name ''IsPrime'' does not exist
    in the current context

    '
  timestamp: 1659976666
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    public
    static long HexKey(string num) {\n        long result = 0;\n        long hexDigit
    = 0;\n        long hexKey = 0;\n        long hexKey2 = 0;\n        long hexKey3
    = 0;\n        long hexKey4 = 0;\n        long hexKey5 = 0;\n        long hexKey6
    = 0;\n        long hexKey7 = 0;\n        long hexKey8 = 0;\n        long hexKey9
    = 0;\n        long hexKeyA = 0;\n        long hexKeyB = 0;\n        long hexKeyC
    = 0;\n        long hexKeyD = 0;\n        long hexKeyE = 0;\n        long hexKeyF
    = 0;\n        long hexKeyG = 0;\n        long hexKeyH = 0;\n        long hexKeyI
    = 0;\n        long hexKeyJ = 0;\n        long hexKeyK = 0;\n        long hexKeyL
    = 0;\n        long hexKeyM = 0;\n        long hexKeyN = 0;\n        long hexKeyO
    = 0;\n        long hexKeyP = 0;\n        long hexKeyQ = 0;\n        long hexKeyR
    = 0;\n        long hexKeyS = 0;\n        long hexKeyT = 0;\n        long hexKeyU
    = 0;\n        long hexKeyV = 0;\n        long hexKeyW = 0;\n        long hexKeyX
    = 0;\n        long hexKeyY = 0;\n        long hexKeyZ = 0;\n        long hexKey0
    = 0;\n        long hexKey1 = 0;\n        long hexKey2 = 0;\n        long hexKey3
    = 0;\n        long hexKey4 = 0;\n        long hexKey5 = 0;\n        long hexKey6
    = 0;\n        long hexKey7 = 0;\n        long hexKey8 = 0;\n        long hexKey9
    = 0;\n        long hexKeyA = 0;\n        long hexKeyB = 0;\n        long hexKeyC
    = 0;\n        long hexKeyD = 0;\n        long hexKeyE = 0;\n        long hexKeyF
    = 0;\n        long hexKeyG = 0;\n        long hexKeyH = 0;\n        long hexKeyI
    = 0;\n        long hexKeyJ = 0;\n        long hexKeyK = 0;\n        long hexKeyL
    = 0;\n        long hexKeyM = 0;\n        long hexKeyN = 0;\n        long hexKeyO
    = 0;\n        long hexKeyP = 0;\n        long hexKeyQ = 0;\n        long hexKeyR
    = 0;\n        long hexKeyS = 0;\n        long hexKeyT = 0;\n        long hexKeyU
    = 0;\n        long hexKeyV = 0;\n        long hexKeyW = 0;\n        long hexKeyX
    = 0;\n        long hexKeyY = 0;\n        long hexKeyZ = 0;\n        long hexKey0
    = 0;\n        long hexKey1 = 0;\n        \n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(HexKey((\"AB\")) == (1L));\n    Debug.Assert(HexKey((\"1077E\"))
    == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"2020\"))
    == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\")) == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\"))
    == (12L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpbanopebs.cs(60,14): error CS0128: A local variable or function named ''hexKey2''
    is already defined in this scope

    /tmp/tmpbanopebs.cs(61,14): error CS0128: A local variable or function named ''hexKey3''
    is already defined in this scope

    /tmp/tmpbanopebs.cs(62,14): error CS0128: A local variable or function named ''hexKey4''
    is already defined in this scope

    /tmp/tmpbanopebs.cs(63,14): error CS0128: A local variable or function named ''hexKey5''
    is already defined in this scope

    /tmp/tmpbanopebs.cs(64,14): error CS0128: A local variable or function named ''hexKey6''
    is already defined in this scope

    /tmp/tmpbanopebs.cs(65,14): error CS0128: A local variable or function named ''hexKey7''
    is already defined in this scope

    /tmp/tmpbanopebs.cs(66,14): error CS0128: A local variable or function named ''hexKey8''
    is already defined in this scope

    /tmp/tmpbanopebs.cs(67,14): error CS0128: A local variable or function named ''hexKey9''
    is already defined in this scope

    /tmp/tmpbanopebs.cs(68,14): error CS0128: A local variable or function named ''hexKeyA''
    is already defined in this scope

    /tmp/tmpbanopebs.cs(69,14): error CS0128: A local variable or function named ''hexKeyB''
    is already defined in this scope

    /tmp/tmpbanopebs.cs(70,14): error CS0128: A local variable or function named ''hexKeyC''
    is already defined in this scope

    /tmp/tmpbanopebs.cs(71,14): error CS0128: A local variable or function named ''hexKeyD''
    is already defined in this scope

    /tmp/tmpbanopebs.cs(72,14): error CS0128: A local variable or function named ''hexKeyE''
    is already defined in this scope

    /tmp/tmpbanopebs.cs(73,14): error CS0128: A local variable or function named ''hexKeyF''
    is already defined in this scope

    /tmp/tmpbanopebs.cs(74,14): error CS0128: A local variable or function named ''hexKeyG''
    is already defined in this scope

    /tmp/tmpbanopebs.cs(75,14): error CS0128: A local variable or function named ''hexKeyH''
    is already defined in this scope

    /'
  timestamp: 1659976666
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    public
    static long HexKey(string num) {\n        long result = 0;\n        long digit
    = 0;\n        bool isPrime = true;\n        bool isDigit = true;\n        bool
    isUpper = true;\n        bool isLowercase = true;\n        bool isUppercase =
    true;\n        bool isDigitUpper = true;\n        bool isDigitLower = true;\n
    \       bool isDigitUppercase = true;\n        bool isDigitLowercase = true;\n
    \       bool isDigitUppercaseUpper = true;\n        bool isDigitLowercaseUpper
    = true;\n        bool isDigitUppercaseLower = true;\n        bool isDigitLowercaseLower
    = true;\n        bool isDigitUppercaseUpperUpper = true;\n        bool isDigitLowercaseUpperUpper
    = true;\n        bool isDigitUppercaseLowerUpper = true;\n        bool isDigitLowercaseLowerUpper
    = true;\n        bool isDigitUppercaseUpperLower = true;\n        bool isDigitLowercaseUpperLower
    = true;\n        bool isDigitUppercaseLowerLower = true;\n        bool isDigitLowercaseLowerLower
    = true;\n        bool isDigitUppercaseUpperUpperUpper = true;\n        bool isDigitLowercaseUpperUpperUpper
    = true;\n        bool isDigitUppercaseLowerUpperUpper = true;\n        bool isDigitLowercaseUpperUpperUpper
    = true;\n        bool isDigitUppercaseLowerUpperUpper = true;\n        bool isDigitLowercaseUpperUpperUpper
    = true;\n        bool isDigitUppercaseLowerUpperUpper = true;\n        bool isDigitLowercaseUpperUpperUpper
    = true;\n        bool isDigitUppercaseLowerUpperUpper = true;\n        bool isDigitLowercaseUpperUpperUpper
    = true;\n        bool isDigitUppercaseLowerUpperUpper = true;\n        bool isDigitLowercaseUpperUpperUpper
    = true;\n        bool isDigitUppercaseLowerUpperUpper = true;\n        bool isDigitLowercaseUpperUpperUpper
    = true;\n        bool isDigitUppercaseLowerUpperUpper = true;\n        bool isDigitLowercaseUpperUpperUpper
    = true;\n        bool isDigitUppercaseLowerUpperUpper = true;\n        bool isDigitLowercaseUpperUpperUpper
    = true;\n        bool isDigitUppercaseLowerUpperUpper = true;\n        bool isDigitLowercaseUpperUpperUpper
    = true;\n        bool isDigitUppercaseLowerUpperUpper = true;\n        bool isDigitLowercaseUpperUpperUpper
    = true;\n        bool isDigitUppercaseLowerUpperUpper = true;\n        bool isDigitLowercaseUpperUpperUpper
    = true;\n        bool isDigitUppercaseLowerUpperUpper = true;\n        bool isDigitLowercaseUpperUpperUpper
    = true;\n        bool isDigitUppercaseLowerUpperUpper = true;\n        bool isDigitLowercaseUpperUpperUpper
    = true;\n        bool isDigitUppercaseLowerUpper\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(HexKey((\"AB\")) == (1L));\n    Debug.Assert(HexKey((\"1077E\"))
    == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"2020\"))
    == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\")) == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\"))
    == (12L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpi4q___x4.cs(72,40): error CS1002: ; expected

    '
  timestamp: 1659976666
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    public
    static long HexKey(string num) {\n        long sum = 0;\n        foreach (char
    c in num) {\n            int n = Convert.ToInt32(c);\n            if (n % 2 ==
    0) {\n                sum += n;\n            }\n        }\n        return sum;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(HexKey((\"AB\"))
    == (1L));\n    Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\"))
    == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\"))
    == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\")) ==
    (12L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <0143c9bdc7b54b9abe76d43e695b814c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <0143c9bdc7b54b9abe76d43e695b814c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976667
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    public
    static long HexKey(string num) {\n        long result = 0;\n        foreach (char
    c in num) {\n            int digit = c - '0';\n            result += (digit *
    digit);\n        }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(HexKey((\"AB\")) == (1L));\n    Debug.Assert(HexKey((\"1077E\"))
    == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"2020\"))
    == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\")) == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\"))
    == (12L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <0d64037ae3b34f9db971a4271402a7ea>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <0d64037ae3b34f9db971a4271402a7ea>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976667
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    public
    static long HexKey(string num) {\n        long result = 0;\n        string hex
    = num.ToUpper();\n        foreach (char c in hex) {\n            int digit = c
    - '0';\n            if (digit >= 0 && digit < 10) {\n                result +=
    (digit * digit);\n            }\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(HexKey((\"AB\")) == (1L));\n
    \   Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\"))
    == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\"))
    == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\")) ==
    (12L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <886e4a5737c44757944bf8690d62c8c5>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <886e4a5737c44757944bf8690d62c8c5>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976666
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    public
    static long HexKey(string num) {\n        long result = 0;\n        foreach (char
    c in num.ToUpper()) {\n            int d = (int)c;\n            if (d >= '0' &&
    d <= '9') {\n                result += Math.Pow(16, (int)c - '0');\n            }\n
    \       }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(HexKey((\"AB\")) == (1L));\n    Debug.Assert(HexKey((\"1077E\"))
    == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"2020\"))
    == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\")) == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\"))
    == (12L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpdjhead0f.cs(25,17): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659976666
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    public
    static long HexKey(string num) {\n        long result = 0;\n        foreach (char
    c in num.ToUpper()) {\n            int d = (int)c;\n            if (d >= '0' &&
    d <= '9') {\n                result += (long)Math.Pow(16, d);\n            }\n
    \       }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(HexKey((\"AB\")) == (1L));\n    Debug.Assert(HexKey((\"1077E\"))
    == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"2020\"))
    == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\")) == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\"))
    == (12L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f1e0cb649fd54704bc15bf37a7d84776>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f1e0cb649fd54704bc15bf37a7d84776>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976666
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    public
    static long HexKey(string num) {\n        long result = 0;\n        foreach (char
    c in num.ToUpper()) {\n            result *= 16;\n            result += Convert.ToInt32(c);\n
    \       }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(HexKey((\"AB\")) == (1L));\n    Debug.Assert(HexKey((\"1077E\"))
    == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"2020\"))
    == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\")) == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\"))
    == (12L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <0d797489f6f34715b9ea14e6c3197332>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <0d797489f6f34715b9ea14e6c3197332>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976666
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    public
    static long HexKey(string num) {\n        long sum = 0;\n        foreach (char
    c in num.ToUpper()) {\n            int digit = c - 'A';\n            if (digit
    < 0 || digit > 9) {\n                throw new ArgumentOutOfRangeException(\"HexKey\",
    \"Hexadecimal digit must be between 0 and 9\");\n            }\n            sum
    += digit * Math.Pow(16, digit);\n        }\n        return sum;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(HexKey((\"AB\")) == (1L));\n
    \   Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\"))
    == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\"))
    == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\")) ==
    (12L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp2bf4c0kj.cs(27,13): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659976666
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    public
    static long HexKey(string num) {\n        long num2 = 0;\n        long num3 =
    0;\n        long num4 = 0;\n        long num5 = 0;\n        long num6 = 0;\n        long
    num7 = 0;\n        long num8 = 0;\n        long num9 = 0;\n        long num10
    = 0;\n        long num11 = 0;\n        long num12 = 0;\n        long num13 = 0;\n
    \       long num14 = 0;\n        long num15 = 0;\n        long num16 = 0;\n        long
    num17 = 0;\n        long num18 = 0;\n        long num19 = 0;\n        long num20
    = 0;\n        long num21 = 0;\n        long num22 = 0;\n        long num23 = 0;\n
    \       long num24 = 0;\n        long num25 = 0;\n        long num26 = 0;\n        long
    num27 = 0;\n        long num28 = 0;\n        long num29 = 0;\n        long num30
    = 0;\n        long num31 = 0;\n        long num32 = 0;\n        long num33 = 0;\n
    \       long num34 = 0;\n        long num35 = 0;\n        long num36 = 0;\n        long
    num37 = 0;\n        long num38 = 0;\n        long num39 = 0;\n        long num40
    = 0;\n        long num41 = 0;\n        long num42 = 0;\n        long num43 = 0;\n
    \       long num44 = 0;\n        long num45 = 0;\n        long num46 = 0;\n        long
    num47 = 0;\n        long num48 = 0;\n        long num49 = 0;\n        long num50
    = 0;\n        long num51 = 0;\n        long num52 = 0;\n        long num53 = 0;\n
    \       long num54 = 0;\n        long num55 = 0;\n        long num56 = 0;\n        long
    num57 = 0;\n        long num58 = 0;\n        long num59 = 0;\n        long num60
    = 0;\n        long num61 = 0;\n        long num62 = 0;\n        long num63 = 0;\n
    \       long num64 = 0;\n        long num65 = 0;\n        long num66 = 0;\n        long
    num67 = 0;\n        long num68 = 0;\n        long num69 = 0;\n        long num70
    = 0;\n        long num71 = 0;\n        long num72 = 0;\n        long num73 = 0;\n
    \       long num74 = 0;\n        long num75 = 0;\n        long num76 = 0;\n        long
    num77 = 0;\n        long num78 = 0;\n        long num79 = 0;\n        long num80
    = 0;\n        long num81 = 0;\n        long num82 = 0;\n        long num83 = 0;\n
    \       long num84 = 0;\n        long num85 = 0;\n        long num86 = 0;\n        long
    num87 = 0;\n\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HexKey((\"AB\"))
    == (1L));\n    Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\"))
    == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\"))
    == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\")) ==
    (12L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpajppcu5a.cs(21,14): warning CS0219: The variable ''num2'' is assigned
    but its value is never used

    /tmp/tmpajppcu5a.cs(22,14): warning CS0219: The variable ''num3'' is assigned
    but its value is never used

    /tmp/tmpajppcu5a.cs(23,14): warning CS0219: The variable ''num4'' is assigned
    but its value is never used

    /tmp/tmpajppcu5a.cs(24,14): warning CS0219: The variable ''num5'' is assigned
    but its value is never used

    /tmp/tmpajppcu5a.cs(25,14): warning CS0219: The variable ''num6'' is assigned
    but its value is never used

    /tmp/tmpajppcu5a.cs(26,14): warning CS0219: The variable ''num7'' is assigned
    but its value is never used

    /tmp/tmpajppcu5a.cs(27,14): warning CS0219: The variable ''num8'' is assigned
    but its value is never used

    /tmp/tmpajppcu5a.cs(28,14): warning CS0219: The variable ''num9'' is assigned
    but its value is never used

    /tmp/tmpajppcu5a.cs(29,14): warning CS0219: The variable ''num10'' is assigned
    but its value is never used

    /tmp/tmpajppcu5a.cs(30,14): warning CS0219: The variable ''num11'' is assigned
    but its value is never used

    /tmp/tmpajppcu5a.cs(31,14): warning CS0219: The variable ''num12'' is assigned
    but its value is never used

    /tmp/tmpajppcu5a.cs(32,14): warning CS0219: The variable ''num13'' is assigned
    but its value is never used

    /tmp/tmpajppcu5a.cs(33,14): warning CS0219: The variable ''num14'' is assigned
    but its value is never used

    /tmp/tmpajppcu5a.cs(34,14): warning CS0219: The variable ''num15'' is assigned
    but its value is never used

    /tmp/tmpajppcu5a.cs(35,14): warning CS0219: The variable ''num16'' is assigned
    but its value is never used

    /tmp/tmpajppcu5a.cs(36,14): warning CS0219: The variable ''num17'' is assigned
    but its value is never used

    /tmp/tmpajppcu5a.cs(37,14): warning CS0219: The variable ''num18'' is assigned
    but its value is never used

    /tmp/tmpajppcu5a.cs(38,14): warning CS0219: The variable ''num19'' is assigned
    but its value is never used

    /tmp/tmpajppcu5a.cs(39,14): warning CS0'
  timestamp: 1659976665
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    public
    static long HexKey(string num) {\n        long result = 0;\n        long digits
    = 0;\n        long primes = 0;\n        long factors = 0;\n        long primeFactors
    = 0;\n        string hex = num.ToUpper();\n        foreach (char c in hex) {\n
    \           digits += Convert.ToInt64(c);\n        }\n        primes = HexPrimes(digits);\n
    \       factors = HexFactors(digits);\n        primeFactors = HexPrimeFactors(digits);\n
    \       result += primes;\n        result += factors;\n        result += primeFactors;\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(HexKey((\"AB\")) == (1L));\n    Debug.Assert(HexKey((\"1077E\"))
    == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"2020\"))
    == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\")) == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\"))
    == (12L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmprhzoshwv.cs(30,18): error CS0103: The name ''HexPrimes'' does not exist
    in the current context

    /tmp/tmprhzoshwv.cs(31,19): error CS0103: The name ''HexFactors'' does not exist
    in the current context

    /tmp/tmprhzoshwv.cs(32,24): error CS0103: The name ''HexPrimeFactors'' does not
    exist in the current context

    '
  timestamp: 1659976666
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    public
    static long HexKey(string num) {\n        long result = 0;\n        foreach (char
    c in num) {\n            int digit = c - '0';\n            result += (digit ==
    2) ? 2 : digit == 3 ? 3 : digit == 5 ? 5 : digit == 7 ? 7 : digit == 11 ? 11 :
    digit == 13 ? 13 : 0;\n        }\n        return result;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(HexKey((\"AB\")) == (1L));\n    Debug.Assert(HexKey((\"1077E\"))
    == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"2020\"))
    == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\")) == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\"))
    == (12L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <9083d2f1e409487b95a52d2b2730d608>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <9083d2f1e409487b95a52d2b2730d608>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976667
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    public
    static long HexKey(string num) {\n        long result = 0;\n        foreach (char
    c in num) {\n            int d = (int)c;\n            if (d >= '0' && d <= '9')
    {\n                result += (long)Math.Pow(16, d);\n            }\n        }\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(HexKey((\"AB\")) == (1L));\n    Debug.Assert(HexKey((\"1077E\"))
    == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"2020\"))
    == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\")) == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\"))
    == (12L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <00ac9e60f64840628ded05b0726902c9>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <00ac9e60f64840628ded05b0726902c9>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976667
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    public
    static long HexKey(string num) {\n        long result = 0;\n        foreach (char
    c in num.ToUpper()) {\n            int digit = c - 'A';\n            result +=
    (digit * digit);\n        }\n        return result;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(HexKey((\"AB\")) == (1L));\n    Debug.Assert(HexKey((\"1077E\"))
    == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"2020\"))
    == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\")) == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\"))
    == (12L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <0a67c966834f439693c67180ca789443>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <0a67c966834f439693c67180ca789443>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976666
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    public
    static long HexKey(string num) {\n        long result = 0;\n        foreach (char
    c in num) {\n            int digit = c - '0';\n            if (digit >= 2 && digit
    <= 9) {\n                result += (digit * digit);\n            }\n        }\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(HexKey((\"AB\")) == (1L));\n    Debug.Assert(HexKey((\"1077E\"))
    == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"2020\"))
    == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\")) == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\"))
    == (12L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <341a845210aa47f2b161e2edaa87c29a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <341a845210aa47f2b161e2edaa87c29a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976667
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    public
    static long HexKey(string num) {\n        long sum = 0;\n        long digit;\n
    \       bool isPrime = true;\n        foreach (char c in num) {\n            digit
    = Convert.ToInt32(c);\n            if (digit < 0 || digit > 15) {\n                throw
    new ArgumentOutOfRangeException(\"Hexadecimal number must be between 0 and 15\");\n
    \           }\n            if (isPrime) {\n                isPrime = IsPrime(digit);\n
    \           }\n            sum += digit;\n        }\n        return sum;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(HexKey((\"AB\"))
    == (1L));\n    Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\"))
    == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\"))
    == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\")) ==
    (12L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpdtjt07_1.cs(30,27): error CS0103: The name ''IsPrime'' does not exist
    in the current context

    '
  timestamp: 1659976667
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    public
    static long HexKey(string num) {\n        long sum = 0;\n        long num2 = 0;\n
    \       long num3 = 0;\n        long num4 = 0;\n        long num5 = 0;\n        long
    num6 = 0;\n        long num7 = 0;\n        long num8 = 0;\n        long num9 =
    0;\n        long num10 = 0;\n        long num11 = 0;\n        long num12 = 0;\n
    \       long num13 = 0;\n        long num14 = 0;\n        long num15 = 0;\n        long
    num16 = 0;\n        long num17 = 0;\n        long num18 = 0;\n        long num19
    = 0;\n        long num20 = 0;\n        long num21 = 0;\n        long num22 = 0;\n
    \       long num23 = 0;\n        long num24 = 0;\n        long num25 = 0;\n        long
    num26 = 0;\n        long num27 = 0;\n        long num28 = 0;\n        long num29
    = 0;\n        long num30 = 0;\n        long num31 = 0;\n        long num32 = 0;\n
    \       long num33 = 0;\n        long num34 = 0;\n        long num35 = 0;\n        long
    num36 = 0;\n        long num37 = 0;\n        long num38 = 0;\n        long num39
    = 0;\n        long num40 = 0;\n        long num41 = 0;\n        long num42 = 0;\n
    \       long num43 = 0;\n        long num44 = 0;\n        long num45 = 0;\n        long
    num46 = 0;\n        long num47 = 0;\n        long num48 = 0;\n        long num49
    = 0;\n        long num50 = 0;\n        long num51 = 0;\n        long num52 = 0;\n
    \       long num53 = 0;\n        long num54 = 0;\n        long num55 = 0;\n        long
    num56 = 0;\n        long num57 = 0;\n        long num58 = 0;\n        long num59
    = 0;\n        long num60 = 0;\n        long num61 = 0;\n        long num62 = 0;\n
    \       long num63 = 0;\n        long num64 = 0;\n        long num65 = 0;\n        long
    num66 = 0;\n        long num67 = 0;\n        long num68 = 0;\n        long num69
    = 0;\n        long num70 = 0;\n        long num71 = 0;\n        long num72 = 0;\n
    \       long num73 = 0;\n        long num74 = 0;\n        long num75 = 0;\n        long
    num76 = 0;\n        long num77 = 0;\n        long num78 = 0;\n        long num79
    = 0;\n        long num80 = 0;\n        long num81 = 0;\n        long num82 = 0;\n
    \       long num83 = 0;\n        long num84 = 0;\n        long num85 = 0;\n        long
    num86 = 0;\n        \n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HexKey((\"AB\"))
    == (1L));\n    Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\"))
    == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\"))
    == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\")) ==
    (12L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpa7rxt6c8.cs(21,14): warning CS0219: The variable ''sum'' is assigned but
    its value is never used

    /tmp/tmpa7rxt6c8.cs(22,14): warning CS0219: The variable ''num2'' is assigned
    but its value is never used

    /tmp/tmpa7rxt6c8.cs(23,14): warning CS0219: The variable ''num3'' is assigned
    but its value is never used

    /tmp/tmpa7rxt6c8.cs(24,14): warning CS0219: The variable ''num4'' is assigned
    but its value is never used

    /tmp/tmpa7rxt6c8.cs(25,14): warning CS0219: The variable ''num5'' is assigned
    but its value is never used

    /tmp/tmpa7rxt6c8.cs(26,14): warning CS0219: The variable ''num6'' is assigned
    but its value is never used

    /tmp/tmpa7rxt6c8.cs(27,14): warning CS0219: The variable ''num7'' is assigned
    but its value is never used

    /tmp/tmpa7rxt6c8.cs(28,14): warning CS0219: The variable ''num8'' is assigned
    but its value is never used

    /tmp/tmpa7rxt6c8.cs(29,14): warning CS0219: The variable ''num9'' is assigned
    but its value is never used

    /tmp/tmpa7rxt6c8.cs(30,14): warning CS0219: The variable ''num10'' is assigned
    but its value is never used

    /tmp/tmpa7rxt6c8.cs(31,14): warning CS0219: The variable ''num11'' is assigned
    but its value is never used

    /tmp/tmpa7rxt6c8.cs(32,14): warning CS0219: The variable ''num12'' is assigned
    but its value is never used

    /tmp/tmpa7rxt6c8.cs(33,14): warning CS0219: The variable ''num13'' is assigned
    but its value is never used

    /tmp/tmpa7rxt6c8.cs(34,14): warning CS0219: The variable ''num14'' is assigned
    but its value is never used

    /tmp/tmpa7rxt6c8.cs(35,14): warning CS0219: The variable ''num15'' is assigned
    but its value is never used

    /tmp/tmpa7rxt6c8.cs(36,14): warning CS0219: The variable ''num16'' is assigned
    but its value is never used

    /tmp/tmpa7rxt6c8.cs(37,14): warning CS0219: The variable ''num17'' is assigned
    but its value is never used

    /tmp/tmpa7rxt6c8.cs(38,14): warning CS0219: The variable ''num18'' is assigned
    but its value is never used

    /tmp/tmpa7rxt6c8.cs(39,14): warning CS021'
  timestamp: 1659976667
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    public
    static long HexKey(string num) {\n        long num2 = 0;\n        long num3 =
    0;\n        long num4 = 0;\n        long num5 = 0;\n        long num6 = 0;\n        long
    num7 = 0;\n        long num8 = 0;\n        long num9 = 0;\n        long num10
    = 0;\n        long num11 = 0;\n        long num12 = 0;\n        long num13 = 0;\n
    \       long num14 = 0;\n        long num15 = 0;\n        long num16 = 0;\n        long
    num17 = 0;\n        long num18 = 0;\n        long num19 = 0;\n        long num20
    = 0;\n        long num21 = 0;\n        long num22 = 0;\n        long num23 = 0;\n
    \       long num24 = 0;\n        long num25 = 0;\n        long num26 = 0;\n        long
    num27 = 0;\n        long num28 = 0;\n        long num29 = 0;\n        long num30
    = 0;\n        long num31 = 0;\n        long num32 = 0;\n        long num33 = 0;\n
    \       long num34 = 0;\n        long num35 = 0;\n        long num36 = 0;\n        long
    num37 = 0;\n        long num38 = 0;\n        long num39 = 0;\n        long num40
    = 0;\n        long num41 = 0;\n        long num42 = 0;\n        long num43 = 0;\n
    \       long num44 = 0;\n        long num45 = 0;\n        long num46 = 0;\n        long
    num47 = 0;\n        long num48 = 0;\n        long num49 = 0;\n        long num50
    = 0;\n        long num51 = 0;\n        long num52 = 0;\n        long num53 = 0;\n
    \       long num54 = 0;\n        long num55 = 0;\n        long num56 = 0;\n        long
    num57 = 0;\n        long num58 = 0;\n        long num59 = 0;\n        long num60
    = 0;\n        long num61 = 0;\n        long num62 = 0;\n        long num63 = 0;\n
    \       long num64 = 0;\n        long num65 = 0;\n        long num66 = 0;\n        long
    num67 = 0;\n        long num68 = 0;\n        long num69 = 0;\n        long num70
    = 0;\n        long num71 = 0;\n        long num72 = 0;\n        long num73 = 0;\n
    \       long num74 = 0;\n        long num75 = 0;\n        long num76 = 0;\n        long
    num77 = 0;\n        long num78 = 0;\n        long num79 = 0;\n        long num80
    = 0;\n        long num81 = 0;\n        long num82 = 0;\n        long num83 = 0;\n
    \       long num84 = 0;\n        long num85 = 0;\n        long num86 = 0;\n        long
    num87 = 0;\n\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HexKey((\"AB\"))
    == (1L));\n    Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\"))
    == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\"))
    == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\")) ==
    (12L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpajppcu5a.cs(21,14): warning CS0219: The variable ''num2'' is assigned
    but its value is never used

    /tmp/tmpajppcu5a.cs(22,14): warning CS0219: The variable ''num3'' is assigned
    but its value is never used

    /tmp/tmpajppcu5a.cs(23,14): warning CS0219: The variable ''num4'' is assigned
    but its value is never used

    /tmp/tmpajppcu5a.cs(24,14): warning CS0219: The variable ''num5'' is assigned
    but its value is never used

    /tmp/tmpajppcu5a.cs(25,14): warning CS0219: The variable ''num6'' is assigned
    but its value is never used

    /tmp/tmpajppcu5a.cs(26,14): warning CS0219: The variable ''num7'' is assigned
    but its value is never used

    /tmp/tmpajppcu5a.cs(27,14): warning CS0219: The variable ''num8'' is assigned
    but its value is never used

    /tmp/tmpajppcu5a.cs(28,14): warning CS0219: The variable ''num9'' is assigned
    but its value is never used

    /tmp/tmpajppcu5a.cs(29,14): warning CS0219: The variable ''num10'' is assigned
    but its value is never used

    /tmp/tmpajppcu5a.cs(30,14): warning CS0219: The variable ''num11'' is assigned
    but its value is never used

    /tmp/tmpajppcu5a.cs(31,14): warning CS0219: The variable ''num12'' is assigned
    but its value is never used

    /tmp/tmpajppcu5a.cs(32,14): warning CS0219: The variable ''num13'' is assigned
    but its value is never used

    /tmp/tmpajppcu5a.cs(33,14): warning CS0219: The variable ''num14'' is assigned
    but its value is never used

    /tmp/tmpajppcu5a.cs(34,14): warning CS0219: The variable ''num15'' is assigned
    but its value is never used

    /tmp/tmpajppcu5a.cs(35,14): warning CS0219: The variable ''num16'' is assigned
    but its value is never used

    /tmp/tmpajppcu5a.cs(36,14): warning CS0219: The variable ''num17'' is assigned
    but its value is never used

    /tmp/tmpajppcu5a.cs(37,14): warning CS0219: The variable ''num18'' is assigned
    but its value is never used

    /tmp/tmpajppcu5a.cs(38,14): warning CS0219: The variable ''num19'' is assigned
    but its value is never used

    /tmp/tmpajppcu5a.cs(39,14): warning CS0'
  timestamp: 1659976665
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    public
    static long HexKey(string num) {\n        long result = 0;\n        long digit
    = 0;\n        bool isPrime = true;\n        string hex = num.ToUpper();\n        foreach
    (char c in hex) {\n            digit = Convert.ToInt64(c);\n            if (isPrime)
    {\n                if (digit % 2 == 0) {\n                    isPrime = false;\n
    \               }\n            }\n            else {\n                if (digit
    % 2 == 1) {\n                    isPrime = true;\n                }\n            }\n
    \           if (isPrime) {\n                result += digit;\n            }\n
    \       }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(HexKey((\"AB\")) == (1L));\n    Debug.Assert(HexKey((\"1077E\"))
    == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"2020\"))
    == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\")) == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\"))
    == (12L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7f90e4f4efe2496d9d3f44d17c7d5307>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7f90e4f4efe2496d9d3f44d17c7d5307>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976667
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    public
    static long HexKey(string num) {\n        long result = 0;\n        foreach (char
    c in num) {\n            int digit = c - '0';\n            if (digit < 0 || digit
    > 9) {\n                throw new ArgumentOutOfRangeException(\"num\", \"Hexadecimal
    digit must be between 0 and 9\");\n            }\n            result *= 16;\n
    \           result += digit;\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(HexKey((\"AB\")) == (1L));\n
    \   Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\"))
    == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\"))
    == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\")) ==
    (12L));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Hexadecimal
    digit must be between 0 and 9\nParameter name: num\n  at Problem.HexKey (System.String
    num) [0x0002f] in <a7a316b7657543a4a7944fc27c28961b>:0 \n  at Problem.Main (System.String[]
    args) [0x00001] in <a7a316b7657543a4a7944fc27c28961b>:0 \n[ERROR] FATAL UNHANDLED
    EXCEPTION: System.ArgumentOutOfRangeException: Hexadecimal digit must be between
    0 and 9\nParameter name: num\n  at Problem.HexKey (System.String num) [0x0002f]
    in <a7a316b7657543a4a7944fc27c28961b>:0 \n  at Problem.Main (System.String[] args)
    [0x00001] in <a7a316b7657543a4a7944fc27c28961b>:0 \n"
  stdout: ''
  timestamp: 1659976665
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    public
    static long HexKey(string num) {\n        long result = 0;\n        foreach (char
    c in num.ToUpper()) {\n            int digit = c - 'A';\n            if (digit
    < 0 || digit > 9) {\n                throw new ArgumentException(\"Invalid hexadecimal
    digit: \" + c);\n            }\n            result += (digit * 16L);\n        }\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(HexKey((\"AB\")) == (1L));\n    Debug.Assert(HexKey((\"1077E\"))
    == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"2020\"))
    == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\")) == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\"))
    == (12L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <4ef3363a585e4bc49c6983b546ac94f5>:0
    \n\nUnhandled Exception:\nSystem.ArgumentException: Invalid hexadecimal digit:
    1\n  at Problem.HexKey (System.String num) [0x00045] in <4ef3363a585e4bc49c6983b546ac94f5>:0
    \n  at Problem.Main (System.String[] args) [0x00015] in <4ef3363a585e4bc49c6983b546ac94f5>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentException: Invalid hexadecimal
    digit: 1\n  at Problem.HexKey (System.String num) [0x00045] in <4ef3363a585e4bc49c6983b546ac94f5>:0
    \n  at Problem.Main (System.String[] args) [0x00015] in <4ef3363a585e4bc49c6983b546ac94f5>:0
    \n"
  stdout: ''
  timestamp: 1659976667
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    public
    static long HexKey(string num) {\n        long result = 0;\n        long numDigits
    = num.Length;\n        long digit;\n        long prime = 2;\n        long lastDigit;\n
    \       bool isPrime;\n        bool isPrime2 = false;\n        bool isPrime3 =
    false;\n        bool isPrime5 = false;\n        bool isPrime7 = false;\n        bool
    isPrime11 = false;\n        bool isPrime13 = false;\n        bool isPrime17 =
    false;\n        bool isPrime19 = false;\n        bool isPrime23 = false;\n        bool
    isPrime25 = false;\n        bool isPrime27 = false;\n        bool isPrime29 =
    false;\n        bool isPrime33 = false;\n        bool isPrime35 = false;\n        bool
    isPrime37 = false;\n        bool isPrime39 = false;\n        bool isPrime43 =
    false;\n        bool isPrime47 = false;\n        bool isPrime51 = false;\n        bool
    isPrime55 = false;\n        bool isPrime57 = false;\n        bool isPrime59 =
    false;\n        bool isPrime63 = false;\n        bool isPrime67 = false;\n        bool
    isPrime69 = false;\n        bool isPrime73 = false;\n        bool isPrime77 =
    false;\n        bool isPrime81 = false;\n        bool isPrime85 = false;\n        bool
    isPrime87 = false;\n        bool isPrime89 = false;\n        bool isPrime93 =
    false;\n        bool isPrime97 = false;\n        bool isPrime101 = false;\n        bool
    isPrime103 = false;\n        bool isPrime105 = false;\n        bool isPrime107
    = false;\n        bool isPrime109 = false;\n        bool isPrime113 = false;\n
    \       bool isPrime115 = false;\n        bool isPrime117 = false;\n        bool
    isPrime119 = false;\n        bool isPrime123 = false;\n        bool isPrime125
    = false;\n        bool isPrime127 = false;\n        bool isPrime129 = false;\n
    \       bool isPrime133 = false;\n        bool isPrime135 = false;\n        bool
    isPrime137 = false;\n        bool isPrime139 = false;\n        bool isPrime143
    = false;\n        bool isPrime145 = false;\n        bool isPrime147 = false;\n
    \       bool isPrime149 = false;\n        bool isPrime153 = false;\n        bool
    isPrime155 = false;\n        bool isPrime157 = false;\n        \n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(HexKey((\"AB\")) == (1L));\n
    \   Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\"))
    == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\"))
    == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\")) ==
    (12L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpe_dylbog.cs(21,14): warning CS0219: The variable ''result'' is assigned
    but its value is never used

    /tmp/tmpe_dylbog.cs(23,14): warning CS0168: The variable ''digit'' is declared
    but never used

    /tmp/tmpe_dylbog.cs(24,14): warning CS0219: The variable ''prime'' is assigned
    but its value is never used

    /tmp/tmpe_dylbog.cs(25,14): warning CS0168: The variable ''lastDigit'' is declared
    but never used

    /tmp/tmpe_dylbog.cs(26,14): warning CS0168: The variable ''isPrime'' is declared
    but never used

    /tmp/tmpe_dylbog.cs(27,14): warning CS0219: The variable ''isPrime2'' is assigned
    but its value is never used

    /tmp/tmpe_dylbog.cs(28,14): warning CS0219: The variable ''isPrime3'' is assigned
    but its value is never used

    /tmp/tmpe_dylbog.cs(29,14): warning CS0219: The variable ''isPrime5'' is assigned
    but its value is never used

    /tmp/tmpe_dylbog.cs(30,14): warning CS0219: The variable ''isPrime7'' is assigned
    but its value is never used

    /tmp/tmpe_dylbog.cs(31,14): warning CS0219: The variable ''isPrime11'' is assigned
    but its value is never used

    /tmp/tmpe_dylbog.cs(32,14): warning CS0219: The variable ''isPrime13'' is assigned
    but its value is never used

    /tmp/tmpe_dylbog.cs(33,14): warning CS0219: The variable ''isPrime17'' is assigned
    but its value is never used

    /tmp/tmpe_dylbog.cs(34,14): warning CS0219: The variable ''isPrime19'' is assigned
    but its value is never used

    /tmp/tmpe_dylbog.cs(35,14): warning CS0219: The variable ''isPrime23'' is assigned
    but its value is never used

    /tmp/tmpe_dylbog.cs(36,14): warning CS0219: The variable ''isPrime25'' is assigned
    but its value is never used

    /tmp/tmpe_dylbog.cs(37,14): warning CS0219: The variable ''isPrime27'' is assigned
    but its value is never used

    /tmp/tmpe_dylbog.cs(38,14): warning CS0219: The variable ''isPrime29'' is assigned
    but its value is never used

    /tmp/tmpe_dylbog.cs(39,14): warning CS0219: The variable ''isPrime33'' is assigned
    but its value is never used

    /tmp/tmpe_dylbo'
  timestamp: 1659976667
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    public
    static long HexKey(string num) {\n        long result = 0;\n        foreach (char
    c in num.ToUpper()) {\n            int digit = c - 'A';\n            if (digit
    < 0 || digit > 9) {\n                throw new ArgumentException(\"Invalid hexadecimal
    digit: \" + c);\n            }\n            result += (long)Math.Pow(16, digit);\n
    \       }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(HexKey((\"AB\")) == (1L));\n    Debug.Assert(HexKey((\"1077E\"))
    == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"2020\"))
    == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\")) == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\"))
    == (12L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f17c2333e3e244159f47ab316b450765>:0
    \n\nUnhandled Exception:\nSystem.ArgumentException: Invalid hexadecimal digit:
    1\n  at Problem.HexKey (System.String num) [0x00045] in <f17c2333e3e244159f47ab316b450765>:0
    \n  at Problem.Main (System.String[] args) [0x00015] in <f17c2333e3e244159f47ab316b450765>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentException: Invalid hexadecimal
    digit: 1\n  at Problem.HexKey (System.String num) [0x00045] in <f17c2333e3e244159f47ab316b450765>:0
    \n  at Problem.Main (System.String[] args) [0x00015] in <f17c2333e3e244159f47ab316b450765>:0
    \n"
  stdout: ''
  timestamp: 1659976667
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    public
    static long HexKey(string num) {\n        long result = 0;\n        foreach (char
    c in num) {\n            int digit = c - 'A';\n            if (digit < 0 || digit
    > 9) {\n                throw new ArgumentOutOfRangeException(\"Hex key must be
    between A and F\");\n            }\n            result *= 16;\n            result
    += digit;\n        }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(HexKey((\"AB\")) == (1L));\n    Debug.Assert(HexKey((\"1077E\"))
    == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"2020\"))
    == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\")) == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\"))
    == (12L));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Specified argument
    was out of the range of valid values.\nParameter name: Hex key must be between
    A and F\n  at Problem.HexKey (System.String num) [0x0002f] in <64b921ae034b4b51a149f9015c8527e2>:0
    \n  at Problem.Main (System.String[] args) [0x00015] in <64b921ae034b4b51a149f9015c8527e2>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Specified
    argument was out of the range of valid values.\nParameter name: Hex key must be
    between A and F\n  at Problem.HexKey (System.String num) [0x0002f] in <64b921ae034b4b51a149f9015c8527e2>:0
    \n  at Problem.Main (System.String[] args) [0x00015] in <64b921ae034b4b51a149f9015c8527e2>:0
    \n"
  stdout: ''
  timestamp: 1659976667
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    public
    static long HexKey(string num) {\n        long result = 0;\n        foreach (char
    c in num) {\n            int digit = c - 'A';\n            if (digit < 0 || digit
    > 9) {\n                throw new ArgumentOutOfRangeException(\"num\");\n            }\n
    \           result *= 16;\n            result += digit;\n        }\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HexKey((\"AB\"))
    == (1L));\n    Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\"))
    == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\"))
    == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\")) ==
    (12L));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Specified argument
    was out of the range of valid values.\nParameter name: num\n  at Problem.HexKey
    (System.String num) [0x0002f] in <c3e53d53fe6147869c800525c6a1088e>:0 \n  at Problem.Main
    (System.String[] args) [0x00015] in <c3e53d53fe6147869c800525c6a1088e>:0 \n[ERROR]
    FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Specified argument
    was out of the range of valid values.\nParameter name: num\n  at Problem.HexKey
    (System.String num) [0x0002f] in <c3e53d53fe6147869c800525c6a1088e>:0 \n  at Problem.Main
    (System.String[] args) [0x00015] in <c3e53d53fe6147869c800525c6a1088e>:0 \n"
  stdout: ''
  timestamp: 1659976667
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    public
    static long HexKey(string num) {\n        long ret = 0;\n        foreach (char
    c in num) {\n            if (c >= '0' && c <= '9') {\n                ret += c
    - '0';\n            } else if (c >= 'A' && c <= 'F') {\n                ret +=
    c - 'A' + 10;\n            } else if (c >= 'a' && c <= 'f') {\n                ret
    += c - 'a' + 10;\n            }\n        }\n        return ret;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(HexKey((\"AB\")) == (1L));\n
    \   Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\"))
    == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\"))
    == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\")) ==
    (12L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <be28e1cdbde5467a8a0a2cb197191b80>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <be28e1cdbde5467a8a0a2cb197191b80>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976667
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    public
    static long HexKey(string num) {\n        long result = 0;\n        foreach (char
    c in num.ToUpper()) {\n            int digit = c - 'A';\n            if (digit
    < 0 || digit > 9) {\n                throw new ArgumentOutOfRangeException(\"num\",
    \"Hexadecimal digits must be between 0 and 9\");\n            }\n            result
    *= 16;\n            result += digit;\n        }\n        return result;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(HexKey((\"AB\"))
    == (1L));\n    Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\"))
    == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\"))
    == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\")) ==
    (12L));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Hexadecimal
    digits must be between 0 and 9\nParameter name: num\n  at Problem.HexKey (System.String
    num) [0x00034] in <0795a66b52c44acdb9159ca22a11921c>:0 \n  at Problem.Main (System.String[]
    args) [0x00015] in <0795a66b52c44acdb9159ca22a11921c>:0 \n[ERROR] FATAL UNHANDLED
    EXCEPTION: System.ArgumentOutOfRangeException: Hexadecimal digits must be between
    0 and 9\nParameter name: num\n  at Problem.HexKey (System.String num) [0x00034]
    in <0795a66b52c44acdb9159ca22a11921c>:0 \n  at Problem.Main (System.String[] args)
    [0x00015] in <0795a66b52c44acdb9159ca22a11921c>:0 \n"
  stdout: ''
  timestamp: 1659976667
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    public
    static long HexKey(string num) {\n        long num2 = 0;\n        foreach (char
    c in num) {\n            int d = Convert.ToInt32(c);\n            if (d >= '0'
    && d <= '9') {\n                num2 += d * 10;\n            }\n        }\n        return
    num2;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HexKey((\"AB\"))
    == (1L));\n    Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\"))
    == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\"))
    == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\")) ==
    (12L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <93f4e819af5f40fc9e3f8878e4c71438>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <93f4e819af5f40fc9e3f8878e4c71438>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976667
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    public
    static long HexKey(string num) {\n        long num2 = 0;\n        long num3 =
    0;\n        long num4 = 0;\n        long num5 = 0;\n        long num6 = 0;\n        long
    num7 = 0;\n        long num8 = 0;\n        long num9 = 0;\n        long num10
    = 0;\n        long num11 = 0;\n        long num12 = 0;\n        long num13 = 0;\n
    \       long num14 = 0;\n        long num15 = 0;\n        long num16 = 0;\n        long
    num17 = 0;\n        long num18 = 0;\n        long num19 = 0;\n        long num20
    = 0;\n        long num21 = 0;\n        long num22 = 0;\n        long num23 = 0;\n
    \       long num24 = 0;\n        long num25 = 0;\n        long num26 = 0;\n        long
    num27 = 0;\n        long num28 = 0;\n        long num29 = 0;\n        long num30
    = 0;\n        long num31 = 0;\n        long num32 = 0;\n        long num33 = 0;\n
    \       long num34 = 0;\n        long num35 = 0;\n        long num36 = 0;\n        long
    num37 = 0;\n        long num38 = 0;\n        long num39 = 0;\n        long num40
    = 0;\n        long num41 = 0;\n        long num42 = 0;\n        long num43 = 0;\n
    \       long num44 = 0;\n        long num45 = 0;\n        long num46 = 0;\n        long
    num47 = 0;\n        long num48 = 0;\n        long num49 = 0;\n        long num50
    = 0;\n        long num51 = 0;\n        long num52 = 0;\n        long num53 = 0;\n
    \       long num54 = 0;\n        long num55 = 0;\n        long num56 = 0;\n        long
    num57 = 0;\n        long num58 = 0;\n        long num59 = 0;\n        long num60
    = 0;\n        long num61 = 0;\n        long num62 = 0;\n        long num63 = 0;\n
    \       long num64 = 0;\n        long num65 = 0;\n        long num66 = 0;\n        long
    num67 = 0;\n        long num68 = 0;\n        long num69 = 0;\n        long num70
    = 0;\n        long num71 = 0;\n        long num72 = 0;\n        long num73 = 0;\n
    \       long num74 = 0;\n        long num75 = 0;\n        long num76 = 0;\n        long
    num77 = 0;\n        long num78 = 0;\n        long num79 = 0;\n        long num80
    = 0;\n        long num81 = 0;\n        long num82 = 0;\n        long num83 = 0;\n
    \       long num84 = 0;\n        long num85 = 0;\n        long num86 = 0;\n        long
    num87 = 0;\n\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HexKey((\"AB\"))
    == (1L));\n    Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\"))
    == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\"))
    == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\")) ==
    (12L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpajppcu5a.cs(21,14): warning CS0219: The variable ''num2'' is assigned
    but its value is never used

    /tmp/tmpajppcu5a.cs(22,14): warning CS0219: The variable ''num3'' is assigned
    but its value is never used

    /tmp/tmpajppcu5a.cs(23,14): warning CS0219: The variable ''num4'' is assigned
    but its value is never used

    /tmp/tmpajppcu5a.cs(24,14): warning CS0219: The variable ''num5'' is assigned
    but its value is never used

    /tmp/tmpajppcu5a.cs(25,14): warning CS0219: The variable ''num6'' is assigned
    but its value is never used

    /tmp/tmpajppcu5a.cs(26,14): warning CS0219: The variable ''num7'' is assigned
    but its value is never used

    /tmp/tmpajppcu5a.cs(27,14): warning CS0219: The variable ''num8'' is assigned
    but its value is never used

    /tmp/tmpajppcu5a.cs(28,14): warning CS0219: The variable ''num9'' is assigned
    but its value is never used

    /tmp/tmpajppcu5a.cs(29,14): warning CS0219: The variable ''num10'' is assigned
    but its value is never used

    /tmp/tmpajppcu5a.cs(30,14): warning CS0219: The variable ''num11'' is assigned
    but its value is never used

    /tmp/tmpajppcu5a.cs(31,14): warning CS0219: The variable ''num12'' is assigned
    but its value is never used

    /tmp/tmpajppcu5a.cs(32,14): warning CS0219: The variable ''num13'' is assigned
    but its value is never used

    /tmp/tmpajppcu5a.cs(33,14): warning CS0219: The variable ''num14'' is assigned
    but its value is never used

    /tmp/tmpajppcu5a.cs(34,14): warning CS0219: The variable ''num15'' is assigned
    but its value is never used

    /tmp/tmpajppcu5a.cs(35,14): warning CS0219: The variable ''num16'' is assigned
    but its value is never used

    /tmp/tmpajppcu5a.cs(36,14): warning CS0219: The variable ''num17'' is assigned
    but its value is never used

    /tmp/tmpajppcu5a.cs(37,14): warning CS0219: The variable ''num18'' is assigned
    but its value is never used

    /tmp/tmpajppcu5a.cs(38,14): warning CS0219: The variable ''num19'' is assigned
    but its value is never used

    /tmp/tmpajppcu5a.cs(39,14): warning CS0'
  timestamp: 1659976665
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    public
    static long HexKey(string num) {\n        long num2 = 0;\n        long num3 =
    0;\n        long num4 = 0;\n        long num5 = 0;\n        long num6 = 0;\n        long
    num7 = 0;\n        long num8 = 0;\n        long num9 = 0;\n        long num10
    = 0;\n        long num11 = 0;\n        long num12 = 0;\n        long num13 = 0;\n
    \       long num14 = 0;\n        long num15 = 0;\n        long num16 = 0;\n        long
    num17 = 0;\n        long num18 = 0;\n        long num19 = 0;\n        long num20
    = 0;\n        long num21 = 0;\n        long num22 = 0;\n        long num23 = 0;\n
    \       long num24 = 0;\n        long num25 = 0;\n        long num26 = 0;\n        long
    num27 = 0;\n        long num28 = 0;\n        long num29 = 0;\n        long num30
    = 0;\n        long num31 = 0;\n        long num32 = 0;\n        long num33 = 0;\n
    \       long num34 = 0;\n        long num35 = 0;\n        long num36 = 0;\n        long
    num37 = 0;\n        long num38 = 0;\n        long num39 = 0;\n        long num40
    = 0;\n        long num41 = 0;\n        long num42 = 0;\n        long num43 = 0;\n
    \       long num44 = 0;\n        long num45 = 0;\n        long num46 = 0;\n        long
    num47 = 0;\n        long num48 = 0;\n        long num49 = 0;\n        long num50
    = 0;\n        long num51 = 0;\n        long num52 = 0;\n        long num53 = 0;\n
    \       long num54 = 0;\n        long num55 = 0;\n        long num56 = 0;\n        long
    num57 = 0;\n        long num58 = 0;\n        long num59 = 0;\n        long num60
    = 0;\n        long num61 = 0;\n        long num62 = 0;\n        long num63 = 0;\n
    \       long num64 = 0;\n        long num65 = 0;\n        long num66 = 0;\n        long
    num67 = 0;\n        long num68 = 0;\n        long num69 = 0;\n        long num70
    = 0;\n        long num71 = 0;\n        long num72 = 0;\n        long num73 = 0;\n
    \       long num74 = 0;\n        long num75 = 0;\n        long num76 = 0;\n        long
    num77 = 0;\n        long num78 = 0;\n        long num79 = 0;\n        long num80
    = 0;\n        long num81 = 0;\n        long num82 = 0;\n        long num83 = 0;\n
    \       long num84 = 0;\n        long num85 = 0;\n        long num86 = 0;\n        long
    num87 = 0;\n\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HexKey((\"AB\"))
    == (1L));\n    Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\"))
    == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\"))
    == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\")) ==
    (12L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpajppcu5a.cs(21,14): warning CS0219: The variable ''num2'' is assigned
    but its value is never used

    /tmp/tmpajppcu5a.cs(22,14): warning CS0219: The variable ''num3'' is assigned
    but its value is never used

    /tmp/tmpajppcu5a.cs(23,14): warning CS0219: The variable ''num4'' is assigned
    but its value is never used

    /tmp/tmpajppcu5a.cs(24,14): warning CS0219: The variable ''num5'' is assigned
    but its value is never used

    /tmp/tmpajppcu5a.cs(25,14): warning CS0219: The variable ''num6'' is assigned
    but its value is never used

    /tmp/tmpajppcu5a.cs(26,14): warning CS0219: The variable ''num7'' is assigned
    but its value is never used

    /tmp/tmpajppcu5a.cs(27,14): warning CS0219: The variable ''num8'' is assigned
    but its value is never used

    /tmp/tmpajppcu5a.cs(28,14): warning CS0219: The variable ''num9'' is assigned
    but its value is never used

    /tmp/tmpajppcu5a.cs(29,14): warning CS0219: The variable ''num10'' is assigned
    but its value is never used

    /tmp/tmpajppcu5a.cs(30,14): warning CS0219: The variable ''num11'' is assigned
    but its value is never used

    /tmp/tmpajppcu5a.cs(31,14): warning CS0219: The variable ''num12'' is assigned
    but its value is never used

    /tmp/tmpajppcu5a.cs(32,14): warning CS0219: The variable ''num13'' is assigned
    but its value is never used

    /tmp/tmpajppcu5a.cs(33,14): warning CS0219: The variable ''num14'' is assigned
    but its value is never used

    /tmp/tmpajppcu5a.cs(34,14): warning CS0219: The variable ''num15'' is assigned
    but its value is never used

    /tmp/tmpajppcu5a.cs(35,14): warning CS0219: The variable ''num16'' is assigned
    but its value is never used

    /tmp/tmpajppcu5a.cs(36,14): warning CS0219: The variable ''num17'' is assigned
    but its value is never used

    /tmp/tmpajppcu5a.cs(37,14): warning CS0219: The variable ''num18'' is assigned
    but its value is never used

    /tmp/tmpajppcu5a.cs(38,14): warning CS0219: The variable ''num19'' is assigned
    but its value is never used

    /tmp/tmpajppcu5a.cs(39,14): warning CS0'
  timestamp: 1659976665
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    public
    static long HexKey(string num) {\n        long result = 0;\n        foreach (char
    c in num.ToCharArray()) {\n            int digit = c - '0';\n            if (digit
    >= 2 && digit <= 9) {\n                result += digit * digit;\n            }\n
    \       }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(HexKey((\"AB\")) == (1L));\n    Debug.Assert(HexKey((\"1077E\"))
    == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"2020\"))
    == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\")) == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\"))
    == (12L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <0c932ffd5bda4bcaa6d6cedd92ee3665>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <0c932ffd5bda4bcaa6d6cedd92ee3665>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976667
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    public
    static long HexKey(string num) {\n        long num2 = 0;\n        long num3 =
    0;\n        long num4 = 0;\n        long num5 = 0;\n        long num6 = 0;\n        long
    num7 = 0;\n        long num8 = 0;\n        long num9 = 0;\n        long num10
    = 0;\n        long num11 = 0;\n        long num12 = 0;\n        long num13 = 0;\n
    \       long num14 = 0;\n        long num15 = 0;\n        long num16 = 0;\n        long
    num17 = 0;\n        long num18 = 0;\n        long num19 = 0;\n        long num20
    = 0;\n        long num21 = 0;\n        long num22 = 0;\n        long num23 = 0;\n
    \       long num24 = 0;\n        long num25 = 0;\n        long num26 = 0;\n        long
    num27 = 0;\n        long num28 = 0;\n        long num29 = 0;\n        long num30
    = 0;\n        long num31 = 0;\n        long num32 = 0;\n        long num33 = 0;\n
    \       long num34 = 0;\n        long num35 = 0;\n        long num36 = 0;\n        long
    num37 = 0;\n        long num38 = 0;\n        long num39 = 0;\n        long num40
    = 0;\n        long num41 = 0;\n        long num42 = 0;\n        long num43 = 0;\n
    \       long num44 = 0;\n        long num45 = 0;\n        long num46 = 0;\n        long
    num47 = 0;\n        long num48 = 0;\n        long num49 = 0;\n        long num50
    = 0;\n        long num51 = 0;\n        long num52 = 0;\n        long num53 = 0;\n
    \       long num54 = 0;\n        long num55 = 0;\n        long num56 = 0;\n        long
    num57 = 0;\n        long num58 = 0;\n        long num59 = 0;\n        long num60
    = 0;\n        long num61 = 0;\n        long num62 = 0;\n        long num63 = 0;\n
    \       long num64 = 0;\n        long num65 = 0;\n        long num66 = 0;\n        long
    num67 = 0;\n        long num68 = 0;\n        long num69 = 0;\n        long num70
    = 0;\n        long num71 = 0;\n        long num72 = 0;\n        long num73 = 0;\n
    \       long num74 = 0;\n        long num75 = 0;\n        long num76 = 0;\n        long
    num77 = 0;\n        long num78 = 0;\n        long num79 = 0;\n        long num80
    = 0;\n        long num81 = 0;\n        long num82 = 0;\n        long num83 = 0;\n
    \       long num84 = 0;\n        long num85 = 0;\n        long num86 = 0;\n        long
    num87 = 0;\n\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HexKey((\"AB\"))
    == (1L));\n    Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\"))
    == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\"))
    == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\")) ==
    (12L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpajppcu5a.cs(21,14): warning CS0219: The variable ''num2'' is assigned
    but its value is never used

    /tmp/tmpajppcu5a.cs(22,14): warning CS0219: The variable ''num3'' is assigned
    but its value is never used

    /tmp/tmpajppcu5a.cs(23,14): warning CS0219: The variable ''num4'' is assigned
    but its value is never used

    /tmp/tmpajppcu5a.cs(24,14): warning CS0219: The variable ''num5'' is assigned
    but its value is never used

    /tmp/tmpajppcu5a.cs(25,14): warning CS0219: The variable ''num6'' is assigned
    but its value is never used

    /tmp/tmpajppcu5a.cs(26,14): warning CS0219: The variable ''num7'' is assigned
    but its value is never used

    /tmp/tmpajppcu5a.cs(27,14): warning CS0219: The variable ''num8'' is assigned
    but its value is never used

    /tmp/tmpajppcu5a.cs(28,14): warning CS0219: The variable ''num9'' is assigned
    but its value is never used

    /tmp/tmpajppcu5a.cs(29,14): warning CS0219: The variable ''num10'' is assigned
    but its value is never used

    /tmp/tmpajppcu5a.cs(30,14): warning CS0219: The variable ''num11'' is assigned
    but its value is never used

    /tmp/tmpajppcu5a.cs(31,14): warning CS0219: The variable ''num12'' is assigned
    but its value is never used

    /tmp/tmpajppcu5a.cs(32,14): warning CS0219: The variable ''num13'' is assigned
    but its value is never used

    /tmp/tmpajppcu5a.cs(33,14): warning CS0219: The variable ''num14'' is assigned
    but its value is never used

    /tmp/tmpajppcu5a.cs(34,14): warning CS0219: The variable ''num15'' is assigned
    but its value is never used

    /tmp/tmpajppcu5a.cs(35,14): warning CS0219: The variable ''num16'' is assigned
    but its value is never used

    /tmp/tmpajppcu5a.cs(36,14): warning CS0219: The variable ''num17'' is assigned
    but its value is never used

    /tmp/tmpajppcu5a.cs(37,14): warning CS0219: The variable ''num18'' is assigned
    but its value is never used

    /tmp/tmpajppcu5a.cs(38,14): warning CS0219: The variable ''num19'' is assigned
    but its value is never used

    /tmp/tmpajppcu5a.cs(39,14): warning CS0'
  timestamp: 1659976665
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    public
    static long HexKey(string num) {\n        long sum = 0;\n        long num2 = 0;\n
    \       long num3 = 0;\n        long num4 = 0;\n        long num5 = 0;\n        long
    num6 = 0;\n        long num7 = 0;\n        long num8 = 0;\n        long num9 =
    0;\n        long num10 = 0;\n        long num11 = 0;\n        long num12 = 0;\n
    \       long num13 = 0;\n        long num14 = 0;\n        long num15 = 0;\n        long
    num16 = 0;\n        long num17 = 0;\n        long num18 = 0;\n        long num19
    = 0;\n        long num20 = 0;\n        long num21 = 0;\n        long num22 = 0;\n
    \       long num23 = 0;\n        long num24 = 0;\n        long num25 = 0;\n        long
    num26 = 0;\n        long num27 = 0;\n        long num28 = 0;\n        long num29
    = 0;\n        long num30 = 0;\n        long num31 = 0;\n        long num32 = 0;\n
    \       long num33 = 0;\n        long num34 = 0;\n        long num35 = 0;\n        long
    num36 = 0;\n        long num37 = 0;\n        long num38 = 0;\n        long num39
    = 0;\n        long num40 = 0;\n        long num41 = 0;\n        long num42 = 0;\n
    \       long num43 = 0;\n        long num44 = 0;\n        long num45 = 0;\n        long
    num46 = 0;\n        long num47 = 0;\n        long num48 = 0;\n        long num49
    = 0;\n        long num50 = 0;\n        long num51 = 0;\n        long num52 = 0;\n
    \       long num53 = 0;\n        long num54 = 0;\n        long num55 = 0;\n        long
    num56 = 0;\n        long num57 = 0;\n        long num58 = 0;\n        long num59
    = 0;\n        long num60 = 0;\n        long num61 = 0;\n        long num62 = 0;\n
    \       long num63 = 0;\n        long num64 = 0;\n        long num65 = 0;\n        long
    num66 = 0;\n        long num67 = 0;\n        long num68 = 0;\n        long num69
    = 0;\n        long num70 = 0;\n        long num71 = 0;\n        long num72 = 0;\n
    \       long num73 = 0;\n        long num74 = 0;\n        long num75 = 0;\n        long
    num76 = 0;\n        long num77 = 0;\n        long num78 = 0;\n        long num79
    = 0;\n        long num80 = 0;\n        long num81 = 0;\n        long num82 = 0;\n
    \       long num83 = 0;\n        long num84 = 0;\n        long num85 = 0;\n        long
    num86 = 0;\n        \n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HexKey((\"AB\"))
    == (1L));\n    Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\"))
    == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\"))
    == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\")) ==
    (12L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpa7rxt6c8.cs(21,14): warning CS0219: The variable ''sum'' is assigned but
    its value is never used

    /tmp/tmpa7rxt6c8.cs(22,14): warning CS0219: The variable ''num2'' is assigned
    but its value is never used

    /tmp/tmpa7rxt6c8.cs(23,14): warning CS0219: The variable ''num3'' is assigned
    but its value is never used

    /tmp/tmpa7rxt6c8.cs(24,14): warning CS0219: The variable ''num4'' is assigned
    but its value is never used

    /tmp/tmpa7rxt6c8.cs(25,14): warning CS0219: The variable ''num5'' is assigned
    but its value is never used

    /tmp/tmpa7rxt6c8.cs(26,14): warning CS0219: The variable ''num6'' is assigned
    but its value is never used

    /tmp/tmpa7rxt6c8.cs(27,14): warning CS0219: The variable ''num7'' is assigned
    but its value is never used

    /tmp/tmpa7rxt6c8.cs(28,14): warning CS0219: The variable ''num8'' is assigned
    but its value is never used

    /tmp/tmpa7rxt6c8.cs(29,14): warning CS0219: The variable ''num9'' is assigned
    but its value is never used

    /tmp/tmpa7rxt6c8.cs(30,14): warning CS0219: The variable ''num10'' is assigned
    but its value is never used

    /tmp/tmpa7rxt6c8.cs(31,14): warning CS0219: The variable ''num11'' is assigned
    but its value is never used

    /tmp/tmpa7rxt6c8.cs(32,14): warning CS0219: The variable ''num12'' is assigned
    but its value is never used

    /tmp/tmpa7rxt6c8.cs(33,14): warning CS0219: The variable ''num13'' is assigned
    but its value is never used

    /tmp/tmpa7rxt6c8.cs(34,14): warning CS0219: The variable ''num14'' is assigned
    but its value is never used

    /tmp/tmpa7rxt6c8.cs(35,14): warning CS0219: The variable ''num15'' is assigned
    but its value is never used

    /tmp/tmpa7rxt6c8.cs(36,14): warning CS0219: The variable ''num16'' is assigned
    but its value is never used

    /tmp/tmpa7rxt6c8.cs(37,14): warning CS0219: The variable ''num17'' is assigned
    but its value is never used

    /tmp/tmpa7rxt6c8.cs(38,14): warning CS0219: The variable ''num18'' is assigned
    but its value is never used

    /tmp/tmpa7rxt6c8.cs(39,14): warning CS021'
  timestamp: 1659976667
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    public
    static long HexKey(string num) {\n        long result = 0;\n        long hexDigit
    = 0;\n        long hexKey = 0;\n        bool isPrime = true;\n        bool isHexDigit
    = false;\n        bool isHexKey = false;\n        bool isHexKeyDigit = false;\n
    \       bool isHexKeyDigit2 = false;\n        bool isHexKeyDigit3 = false;\n        bool
    isHexKeyDigit4 = false;\n        bool isHexKeyDigit5 = false;\n        bool isHexKeyDigit6
    = false;\n        bool isHexKeyDigit7 = false;\n        bool isHexKeyDigit8 =
    false;\n        bool isHexKeyDigit9 = false;\n        bool isHexKeyDigit10 = false;\n
    \       bool isHexKeyDigit11 = false;\n        bool isHexKeyDigit12 = false;\n
    \       bool isHexKeyDigit13 = false;\n        bool isHexKeyDigit14 = false;\n
    \       bool isHexKeyDigit15 = false;\n        bool isHexKeyDigit16 = false;\n
    \       bool isHexKeyDigit17 = false;\n        bool isHexKeyDigit18 = false;\n
    \       bool isHexKeyDigit19 = false;\n        bool isHexKeyDigit20 = false;\n
    \       bool isHexKeyDigit21 = false;\n        bool isHexKeyDigit22 = false;\n
    \       bool isHexKeyDigit23 = false;\n        bool isHexKeyDigit24 = false;\n
    \       bool isHexKeyDigit25 = false;\n        bool isHexKeyDigit26 = false;\n
    \       bool isHexKeyDigit27 = false;\n        bool isHexKeyDigit28 = false;\n
    \       bool isHexKeyDigit29 = false;\n        bool isHexKeyDigit30 = false;\n
    \       bool isHexKeyDigit31 = false;\n        bool isHexKeyDigit32 = false;\n
    \       bool isHexKeyDigit33 = false;\n        bool isHexKeyDigit34 = false;\n
    \       bool isHexKeyDigit35 = false;\n        bool isHexKeyDigit36 = false;\n
    \       bool isHexKeyDigit37 = false;\n        bool isHexKeyDigit38 = false;\n
    \       bool isHexKeyDigit39 = false;\n        bool isHexKeyDigit40 = false;\n
    \       bool isHexKeyDigit41 = false;\n        bool isHexKeyDigit42 = false;\n
    \       bool isHexKeyDigit43 = false;\n        bool isHexKeyDigit44 = false;\n
    \       bool isHexKeyDigit45 = false;\n        bool isHexKeyDigit46 = false;\n
    \       bool isHexKeyDigit47 = false;\n        bool isHexKeyDigit48 = false;\n
    \       bool isHexKeyDigit49 = false;\n        bool isHexKeyDigit50 = false;\n
    \       bool isHexKeyDigit51 = false;\n        bool isHexKeyDigit52 = false;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(HexKey((\"AB\"))
    == (1L));\n    Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\"))
    == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\"))
    == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\")) ==
    (12L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpjpci_fbw.cs(21,14): warning CS0219: The variable ''result'' is assigned
    but its value is never used

    /tmp/tmpjpci_fbw.cs(22,14): warning CS0219: The variable ''hexDigit'' is assigned
    but its value is never used

    /tmp/tmpjpci_fbw.cs(23,14): warning CS0219: The variable ''hexKey'' is assigned
    but its value is never used

    /tmp/tmpjpci_fbw.cs(24,14): warning CS0219: The variable ''isPrime'' is assigned
    but its value is never used

    /tmp/tmpjpci_fbw.cs(25,14): warning CS0219: The variable ''isHexDigit'' is assigned
    but its value is never used

    /tmp/tmpjpci_fbw.cs(26,14): warning CS0219: The variable ''isHexKey'' is assigned
    but its value is never used

    /tmp/tmpjpci_fbw.cs(27,14): warning CS0219: The variable ''isHexKeyDigit'' is
    assigned but its value is never used

    /tmp/tmpjpci_fbw.cs(28,14): warning CS0219: The variable ''isHexKeyDigit2'' is
    assigned but its value is never used

    /tmp/tmpjpci_fbw.cs(29,14): warning CS0219: The variable ''isHexKeyDigit3'' is
    assigned but its value is never used

    /tmp/tmpjpci_fbw.cs(30,14): warning CS0219: The variable ''isHexKeyDigit4'' is
    assigned but its value is never used

    /tmp/tmpjpci_fbw.cs(31,14): warning CS0219: The variable ''isHexKeyDigit5'' is
    assigned but its value is never used

    /tmp/tmpjpci_fbw.cs(32,14): warning CS0219: The variable ''isHexKeyDigit6'' is
    assigned but its value is never used

    /tmp/tmpjpci_fbw.cs(33,14): warning CS0219: The variable ''isHexKeyDigit7'' is
    assigned but its value is never used

    /tmp/tmpjpci_fbw.cs(34,14): warning CS0219: The variable ''isHexKeyDigit8'' is
    assigned but its value is never used

    /tmp/tmpjpci_fbw.cs(35,14): warning CS0219: The variable ''isHexKeyDigit9'' is
    assigned but its value is never used

    /tmp/tmpjpci_fbw.cs(36,14): warning CS0219: The variable ''isHexKeyDigit10'' is
    assigned but its value is never used

    /tmp/tmpjpci_fbw.cs(37,14): warning CS0219: The variable ''isHexKeyDigit11'' is
    assigned but its value is never used

    /tmp/tmpjpci_fbw.cs(3'
  timestamp: 1659976667
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    public
    static long HexKey(string num) {\n        long result = 0;\n        foreach (char
    c in num) {\n            int digit = c - '0';\n            if (digit >= 2 && digit
    <= 9) {\n                result += (digit * digit);\n            }\n        }\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(HexKey((\"AB\")) == (1L));\n    Debug.Assert(HexKey((\"1077E\"))
    == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"2020\"))
    == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\")) == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\"))
    == (12L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <341a845210aa47f2b161e2edaa87c29a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <341a845210aa47f2b161e2edaa87c29a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976667
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    public
    static long HexKey(string num) {\n        long result = 0;\n        foreach (char
    c in num) {\n            int digit = c - '0';\n            if (digit < 0 || digit
    > 9) {\n                throw new ArgumentOutOfRangeException(\"num\");\n            }\n
    \           result += (digit * Math.Pow(16, digit));\n        }\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HexKey((\"AB\"))
    == (1L));\n    Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\"))
    == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\"))
    == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\")) ==
    (12L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpbg60nh37.cs(27,13): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659976667
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    public
    static long HexKey(string num) {\n        long sum = 0;\n        foreach (char
    c in num.ToUpper()) {\n            int digit = c - 'A' + 10;\n            if (digit
    < 0 || digit > 9) {\n                throw new ArgumentOutOfRangeException(\"Invalid
    hexadecimal digit.\");\n            }\n            sum += digit;\n        }\n
    \       return sum;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HexKey((\"AB\"))
    == (1L));\n    Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\"))
    == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\"))
    == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\")) ==
    (12L));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Specified argument
    was out of the range of valid values.\nParameter name: Invalid hexadecimal digit.\n
    \ at Problem.HexKey (System.String num) [0x00037] in <dc15a9b55b65461fa2dc671b2675447b>:0
    \n  at Problem.Main (System.String[] args) [0x00001] in <dc15a9b55b65461fa2dc671b2675447b>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Specified
    argument was out of the range of valid values.\nParameter name: Invalid hexadecimal
    digit.\n  at Problem.HexKey (System.String num) [0x00037] in <dc15a9b55b65461fa2dc671b2675447b>:0
    \n  at Problem.Main (System.String[] args) [0x00001] in <dc15a9b55b65461fa2dc671b2675447b>:0
    \n"
  stdout: ''
  timestamp: 1659976667
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    public
    static long HexKey(string num) {\n        long result = 0;\n        foreach (char
    c in num) {\n            result += (long)Char.GetNumericValue(c);\n        }\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(HexKey((\"AB\")) == (1L));\n    Debug.Assert(HexKey((\"1077E\"))
    == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"2020\"))
    == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\")) == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\"))
    == (12L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a885c2c6e8f94f75ada59c1bce9e53c6>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a885c2c6e8f94f75ada59c1bce9e53c6>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976667
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    public
    static long HexKey(string num) {\n        long result = 0;\n        string hex
    = num.ToUpper();\n        foreach (char c in hex) {\n            int digit = c
    - 'A';\n            if (digit < 0 || digit > 9) {\n                throw new ArgumentException(\"Invalid
    hexadecimal digit.\");\n            }\n            result += (long)Math.Pow(16,
    digit);\n        }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(HexKey((\"AB\")) == (1L));\n    Debug.Assert(HexKey((\"1077E\"))
    == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"2020\"))
    == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\")) == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\"))
    == (12L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <fcd82f90f2d54088a6556396736adbe4>:0
    \n\nUnhandled Exception:\nSystem.ArgumentException: Invalid hexadecimal digit.\n
    \ at Problem.HexKey (System.String num) [0x00038] in <fcd82f90f2d54088a6556396736adbe4>:0
    \n  at Problem.Main (System.String[] args) [0x00015] in <fcd82f90f2d54088a6556396736adbe4>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentException: Invalid hexadecimal
    digit.\n  at Problem.HexKey (System.String num) [0x00038] in <fcd82f90f2d54088a6556396736adbe4>:0
    \n  at Problem.Main (System.String[] args) [0x00015] in <fcd82f90f2d54088a6556396736adbe4>:0
    \n"
  stdout: ''
  timestamp: 1659976667
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    public
    static long HexKey(string num) {\n        long result = 0;\n        string hex
    = num.ToUpper();\n        foreach (char c in hex) {\n            int digit = c
    - '0';\n            if (digit < 0 || digit > 9) {\n                throw new ArgumentOutOfRangeException(\"Hexadecimal
    number contains invalid digit: \" + c);\n            }\n            result +=
    (digit * 16L);\n        }\n        return result;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(HexKey((\"AB\")) == (1L));\n    Debug.Assert(HexKey((\"1077E\"))
    == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"2020\"))
    == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\")) == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\"))
    == (12L));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Specified argument
    was out of the range of valid values.\nParameter name: Hexadecimal number contains
    invalid digit: A\n  at Problem.HexKey (System.String num) [0x00049] in <3a5725a55e6447e39e5a482e184a8a23>:0
    \n  at Problem.Main (System.String[] args) [0x00001] in <3a5725a55e6447e39e5a482e184a8a23>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Specified
    argument was out of the range of valid values.\nParameter name: Hexadecimal number
    contains invalid digit: A\n  at Problem.HexKey (System.String num) [0x00049] in
    <3a5725a55e6447e39e5a482e184a8a23>:0 \n  at Problem.Main (System.String[] args)
    [0x00001] in <3a5725a55e6447e39e5a482e184a8a23>:0 \n"
  stdout: ''
  timestamp: 1659976667
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    public
    static long HexKey(string num) {\n        long num2 = 0;\n        long num3 =
    0;\n        long num4 = 0;\n        long num5 = 0;\n        long num6 = 0;\n        long
    num7 = 0;\n        long num8 = 0;\n        long num9 = 0;\n        long num10
    = 0;\n        long num11 = 0;\n        long num12 = 0;\n        long num13 = 0;\n
    \       long num14 = 0;\n        long num15 = 0;\n        long num16 = 0;\n        long
    num17 = 0;\n        long num18 = 0;\n        long num19 = 0;\n        long num20
    = 0;\n        long num21 = 0;\n        long num22 = 0;\n        long num23 = 0;\n
    \       long num24 = 0;\n        long num25 = 0;\n        long num26 = 0;\n        long
    num27 = 0;\n        long num28 = 0;\n        long num29 = 0;\n        long num30
    = 0;\n        long num31 = 0;\n        long num32 = 0;\n        long num33 = 0;\n
    \       long num34 = 0;\n        long num35 = 0;\n        long num36 = 0;\n        long
    num37 = 0;\n        long num38 = 0;\n        long num39 = 0;\n        long num40
    = 0;\n        long num41 = 0;\n        long num42 = 0;\n        long num43 = 0;\n
    \       long num44 = 0;\n        long num45 = 0;\n        long num46 = 0;\n        long
    num47 = 0;\n        long num48 = 0;\n        long num49 = 0;\n        long num50
    = 0;\n        long num51 = 0;\n        long num52 = 0;\n        long num53 = 0;\n
    \       long num54 = 0;\n        long num55 = 0;\n        long num56 = 0;\n        long
    num57 = 0;\n        long num58 = 0;\n        long num59 = 0;\n        long num60
    = 0;\n        long num61 = 0;\n        long num62 = 0;\n        long num63 = 0;\n
    \       long num64 = 0;\n        long num65 = 0;\n        long num66 = 0;\n        long
    num67 = 0;\n        long num68 = 0;\n        long num69 = 0;\n        long num70
    = 0;\n        long num71 = 0;\n        long num72 = 0;\n        long num73 = 0;\n
    \       long num74 = 0;\n        long num75 = 0;\n        long num76 = 0;\n        long
    num77 = 0;\n        long num78 = 0;\n        long num79 = 0;\n        long num80
    = 0;\n        long num81 = 0;\n        long num82 = 0;\n        long num83 = 0;\n
    \       long num84 = 0;\n        long num85 = 0;\n        long num86 = 0;\n        long
    num87 = 0;\n\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HexKey((\"AB\"))
    == (1L));\n    Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\"))
    == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\"))
    == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\")) ==
    (12L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpajppcu5a.cs(21,14): warning CS0219: The variable ''num2'' is assigned
    but its value is never used

    /tmp/tmpajppcu5a.cs(22,14): warning CS0219: The variable ''num3'' is assigned
    but its value is never used

    /tmp/tmpajppcu5a.cs(23,14): warning CS0219: The variable ''num4'' is assigned
    but its value is never used

    /tmp/tmpajppcu5a.cs(24,14): warning CS0219: The variable ''num5'' is assigned
    but its value is never used

    /tmp/tmpajppcu5a.cs(25,14): warning CS0219: The variable ''num6'' is assigned
    but its value is never used

    /tmp/tmpajppcu5a.cs(26,14): warning CS0219: The variable ''num7'' is assigned
    but its value is never used

    /tmp/tmpajppcu5a.cs(27,14): warning CS0219: The variable ''num8'' is assigned
    but its value is never used

    /tmp/tmpajppcu5a.cs(28,14): warning CS0219: The variable ''num9'' is assigned
    but its value is never used

    /tmp/tmpajppcu5a.cs(29,14): warning CS0219: The variable ''num10'' is assigned
    but its value is never used

    /tmp/tmpajppcu5a.cs(30,14): warning CS0219: The variable ''num11'' is assigned
    but its value is never used

    /tmp/tmpajppcu5a.cs(31,14): warning CS0219: The variable ''num12'' is assigned
    but its value is never used

    /tmp/tmpajppcu5a.cs(32,14): warning CS0219: The variable ''num13'' is assigned
    but its value is never used

    /tmp/tmpajppcu5a.cs(33,14): warning CS0219: The variable ''num14'' is assigned
    but its value is never used

    /tmp/tmpajppcu5a.cs(34,14): warning CS0219: The variable ''num15'' is assigned
    but its value is never used

    /tmp/tmpajppcu5a.cs(35,14): warning CS0219: The variable ''num16'' is assigned
    but its value is never used

    /tmp/tmpajppcu5a.cs(36,14): warning CS0219: The variable ''num17'' is assigned
    but its value is never used

    /tmp/tmpajppcu5a.cs(37,14): warning CS0219: The variable ''num18'' is assigned
    but its value is never used

    /tmp/tmpajppcu5a.cs(38,14): warning CS0219: The variable ''num19'' is assigned
    but its value is never used

    /tmp/tmpajppcu5a.cs(39,14): warning CS0'
  timestamp: 1659976665
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    public
    static long HexKey(string num) {\n        long result = 0;\n        foreach (char
    c in num.ToUpper()) {\n            int d = (int)c;\n            if (d >= 'A' &&
    d <= 'F') {\n                d = d - 'A' + 10;\n            }\n            result
    += (d << 4);\n        }\n        return result;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(HexKey((\"AB\")) == (1L));\n    Debug.Assert(HexKey((\"1077E\"))
    == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"2020\"))
    == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\")) == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\"))
    == (12L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <754f56ec378a4b5391515895fc022a43>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <754f56ec378a4b5391515895fc022a43>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976667
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    public
    static long HexKey(string num) {\n        long result = 0;\n        long digit
    = 0;\n        long pow = 1;\n        bool isPrime = true;\n        foreach (char
    c in num.ToUpper()) {\n            digit = Convert.ToInt32(c);\n            pow
    *= digit;\n            if (isPrime) {\n                isPrime = IsPrime(pow);\n
    \           }\n            if (isPrime) {\n                result += pow;\n            }\n
    \       }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(HexKey((\"AB\")) == (1L));\n    Debug.Assert(HexKey((\"1077E\"))
    == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"2020\"))
    == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\")) == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\"))
    == (12L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpjgtu3338.cs(29,27): error CS0103: The name ''IsPrime'' does not exist
    in the current context

    '
  timestamp: 1659976667
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    public
    static long HexKey(string num) {\n        long num2 = 0;\n        foreach (char
    c in num) {\n            int d = (int)c;\n            if (d >= '0' && d <= '9')
    {\n                num2 += d * 16;\n            }\n        }\n        return num2;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(HexKey((\"AB\"))
    == (1L));\n    Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\"))
    == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\"))
    == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\")) ==
    (12L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d98a57e97e74417a95ab55d8b98558a3>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d98a57e97e74417a95ab55d8b98558a3>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976667
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    public
    static long HexKey(string num) {\n        long sum = 0;\n        long digit;\n
    \       foreach (char c in num) {\n            digit = Convert.ToInt64(c);\n            sum
    += digit % 10;\n        }\n        return sum;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(HexKey((\"AB\")) == (1L));\n    Debug.Assert(HexKey((\"1077E\"))
    == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"2020\"))
    == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\")) == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\"))
    == (12L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <806593470d514652a8c6f3e176c8c78d>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <806593470d514652a8c6f3e176c8c78d>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976667
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    public
    static long HexKey(string num) {\n        long numDigits = 0;\n        long numPrimes
    = 0;\n        long numPrimeDigits = 0;\n        long numPrimePrimes = 0;\n        long
    numPrimePrimeDigits = 0;\n        long numPrimePrimePrimes = 0;\n        long
    numPrimePrimePrimeDigits = 0;\n        long numPrimePrimePrimePrimes = 0;\n        long
    numPrimePrimePrimePrimeDigits = 0;\n        long numPrimePrimePrimePrimePrimes
    = 0;\n        long numPrimePrimePrimePrimePrimePrimes = 0;\n        long numPrimePrimePrimePrimePrimePrimeDigits
    = 0;\n        long numPrimePrimePrimePrimePrimePrimePrimes = 0;\n        long
    numPrimePrimePrimePrimePrimePrimeDigits = 0;\n        long numPrimePrimePrimePrimePrimePrimePrimes
    = 0;\n        long numPrimePrimePrimePrimePrimePrimePrimePrimes = 0;\n        long
    numPrimePrimePrimePrimePrimePrimePrimePrimeDigits = 0;\n        long numPrimePrimePrimePrimePrimePrimePrimePrimePrimes
    = 0;\n        long numPrimePrimePrimePrimePrimePrimePrimePrimePrimeDigits = 0;\n
    \       long numPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimes = 0;\n        long
    numPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimeDigits = 0;\n        long
    numPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimes = 0;\n        long
    numPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimeDigits = 0;\n        long
    numPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimes = 0;\n        long
    numPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimeDigits = 0;\n        long
    numPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimes = 0;\n        long
    numPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimeDigits = 0;\n        long
    numPrimePrimePrimePrimePrimePri\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(HexKey((\"AB\")) == (1L));\n    Debug.Assert(HexKey((\"1077E\"))
    == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"2020\"))
    == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\")) == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\"))
    == (12L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpjzs5fcth.cs(48,45): error CS1002: ; expected

    '
  timestamp: 1659976667
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    public
    static long HexKey(string num) {\n        long result = 0;\n        foreach (char
    c in num) {\n            int digit = c - '0';\n            result += (digit ==
    0 || digit == 1) ? digit * digit : digit;\n        }\n        return result;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(HexKey((\"AB\"))
    == (1L));\n    Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\"))
    == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\"))
    == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\")) ==
    (12L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <b1ba2b6080a849f987338aa02d38e717>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <b1ba2b6080a849f987338aa02d38e717>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976667
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    public
    static long HexKey(string num) {\n        long result = 0;\n        long digit
    = 0;\n        long power = 0;\n        bool isPrime = true;\n        foreach (char
    c in num.ToUpper()) {\n            digit = Convert.ToInt64(c);\n            power
    = Convert.ToInt64(Math.Pow(digit, 2));\n            if (isPrime) {\n                if
    (power > result) {\n                    result = power;\n                }\n            }\n
    \           else {\n                if (power < result) {\n                    result
    = power;\n                }\n            }\n            isPrime = !isPrime;\n
    \       }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(HexKey((\"AB\")) == (1L));\n    Debug.Assert(HexKey((\"1077E\"))
    == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"2020\"))
    == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\")) == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\"))
    == (12L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a112ef2eb3854421b7169ebebb17ea3f>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a112ef2eb3854421b7169ebebb17ea3f>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976668
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    public
    static long HexKey(string num) {\n        long result = 0;\n        foreach (char
    c in num.ToUpper()) {\n            int d = (int)c;\n            if (d >= 'A' &&
    d <= 'F') {\n                d -= 'A' - 10;\n            }\n            if (d
    >= '0' && d <= '9') {\n                d -= '0';\n            }\n            result
    += d;\n        }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(HexKey((\"AB\")) == (1L));\n    Debug.Assert(HexKey((\"1077E\"))
    == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"2020\"))
    == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\")) == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\"))
    == (12L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <1a0d8be535f14b1cb3afb2117797178a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <1a0d8be535f14b1cb3afb2117797178a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976668
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    public
    static long HexKey(string num) {\n        long result = 0;\n        foreach (char
    c in num) {\n            int digit = c - '0';\n            if (digit >= 2 && digit
    <= 9) {\n                result += (digit * digit);\n            }\n        }\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(HexKey((\"AB\")) == (1L));\n    Debug.Assert(HexKey((\"1077E\"))
    == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"2020\"))
    == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\")) == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\"))
    == (12L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <341a845210aa47f2b161e2edaa87c29a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <341a845210aa47f2b161e2edaa87c29a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976667
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    public
    static long HexKey(string num) {\n        long sum = 0;\n        long digit;\n
    \       bool isPrime;\n        string hexDigits = \"0123456789ABCDEF\";\n        foreach
    (char c in num) {\n            digit = Convert.ToInt64(hexDigits.Substring((int)c,
    1));\n            isPrime = true;\n            for (int i = 2; i <= digit / 2;
    i++) {\n                if (digit % i == 0) {\n                    isPrime = false;\n
    \                   break;\n                }\n            }\n            if (isPrime)
    {\n                sum += digit;\n            }\n        }\n        return sum;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(HexKey((\"AB\"))
    == (1L));\n    Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\"))
    == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\"))
    == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\")) ==
    (12L));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: startIndex
    cannot be larger than length of string.\nParameter name: startIndex\n  at System.String.Substring
    (System.Int32 startIndex, System.Int32 length) [0x0001d] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at Problem.HexKey (System.String num) [0x0001f] in <2f368f03b528426bbdbf63e93ec9821a>:0
    \n  at Problem.Main (System.String[] args) [0x00001] in <2f368f03b528426bbdbf63e93ec9821a>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: startIndex
    cannot be larger than length of string.\nParameter name: startIndex\n  at System.String.Substring
    (System.Int32 startIndex, System.Int32 length) [0x0001d] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at Problem.HexKey (System.String num) [0x0001f] in <2f368f03b528426bbdbf63e93ec9821a>:0
    \n  at Problem.Main (System.String[] args) [0x00001] in <2f368f03b528426bbdbf63e93ec9821a>:0
    \n"
  stdout: ''
  timestamp: 1659976668
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    public
    static long HexKey(string num) {\n        long result = 0;\n        long digit
    = 0;\n        long prime = 0;\n        long hexDigit = 0;\n        long hexDigit2
    = 0;\n        bool isPrime = false;\n        bool isPrime2 = false;\n        bool
    isPrime3 = false;\n        bool isPrime5 = false;\n        bool isPrime7 = false;\n
    \       bool isPrime11 = false;\n        bool isPrime13 = false;\n        bool
    isPrime17 = false;\n        bool isPrime19 = false;\n        bool isPrime23 =
    false;\n        bool isPrime25 = false;\n        bool isPrime27 = false;\n        bool
    isPrime29 = false;\n        bool isPrime31 = false;\n        bool isPrime33 =
    false;\n        bool isPrime35 = false;\n        bool isPrime37 = false;\n        bool
    isPrime39 = false;\n        bool isPrime41 = false;\n        bool isPrime43 =
    false;\n        bool isPrime45 = false;\n        bool isPrime47 = false;\n        bool
    isPrime49 = false;\n        bool isPrime51 = false;\n        bool isPrime53 =
    false;\n        bool isPrime55 = false;\n        bool isPrime57 = false;\n        bool
    isPrime59 = false;\n        bool isPrime61 = false;\n        bool isPrime63 =
    false;\n        bool isPrime65 = false;\n        bool isPrime67 = false;\n        bool
    isPrime69 = false;\n        bool isPrime71 = false;\n        bool isPrime73 =
    false;\n        bool isPrime75 = false;\n        bool isPrime77 = false;\n        bool
    isPrime79 = false;\n        bool isPrime81 = false;\n        bool isPrime83 =
    false;\n        bool isPrime85 = false;\n        bool isPrime87 = false;\n        bool
    isPrime89 = false;\n        bool isPrime91 = false;\n        bool isPrime93 =
    false;\n        bool isPrime95 = false;\n        bool isPrime97 = false;\n        bool
    isPrime99 = false;\n        bool isPrime101 = false;\n        bool isPrime103
    = false;\n        bool isPrime105 = false;\n        bool isPrime107 = false;\n
    \       bool isPrime109 = false;\n        bool isPrime111 = false;\n        bool
    isPrime113 = false;\n        bool isPrime115 = false;\n        bool isPrime117
    = false;\n        bool isPrime119 = false;\n        bool isPri\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(HexKey((\"AB\")) == (1L));\n
    \   Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\"))
    == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\"))
    == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\")) ==
    (12L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpon9vz4wg.cs(84,19): error CS1002: ; expected

    '
  timestamp: 1659976667
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    public
    static long HexKey(string num) {\n        long result = 0;\n        foreach (char
    c in num) {\n            int digit = c - '0';\n            if (digit >= 2 && digit
    <= 9) {\n                result += digit * digit;\n            }\n        }\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(HexKey((\"AB\")) == (1L));\n    Debug.Assert(HexKey((\"1077E\"))
    == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"2020\"))
    == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\")) == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\"))
    == (12L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <987a1270fcfe474a9d19109ff9313ade>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <987a1270fcfe474a9d19109ff9313ade>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976668
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    public
    static long HexKey(string num) {\n        long result = 0;\n        foreach (char
    c in num.ToUpper()) {\n            int digit = c - 'A';\n            result +=
    (digit * digit);\n        }\n        return result;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(HexKey((\"AB\")) == (1L));\n    Debug.Assert(HexKey((\"1077E\"))
    == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"2020\"))
    == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\")) == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\"))
    == (12L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <0a67c966834f439693c67180ca789443>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <0a67c966834f439693c67180ca789443>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976666
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    public
    static long HexKey(string num) {\n        long sum = 0;\n        long digit =
    0;\n        long numDigits = num.Length;\n        bool isPrime = true;\n        bool
    isPrime2 = true;\n        bool isPrime3 = true;\n        bool isPrime5 = true;\n
    \       bool isPrime7 = true;\n        bool isPrime11 = true;\n        bool isPrime13
    = true;\n        bool isPrime17 = true;\n        bool isPrime19 = true;\n        bool
    isPrime23 = true;\n        bool isPrime25 = true;\n        bool isPrime27 = true;\n
    \       bool isPrime29 = true;\n        bool isPrime31 = true;\n        bool isPrime33
    = true;\n        bool isPrime35 = true;\n        bool isPrime37 = true;\n        bool
    isPrime39 = true;\n        bool isPrime41 = true;\n        bool isPrime43 = true;\n
    \       bool isPrime45 = true;\n        bool isPrime47 = true;\n        bool isPrime49
    = true;\n        bool isPrime51 = true;\n        bool isPrime53 = true;\n        bool
    isPrime55 = true;\n        bool isPrime57 = true;\n        bool isPrime59 = true;\n
    \       bool isPrime61 = true;\n        bool isPrime63 = true;\n        bool isPrime65
    = true;\n        bool isPrime67 = true;\n        bool isPrime69 = true;\n        bool
    isPrime71 = true;\n        bool isPrime73 = true;\n        bool isPrime75 = true;\n
    \       bool isPrime77 = true;\n        bool isPrime79 = true;\n        bool isPrime81
    = true;\n        bool isPrime83 = true;\n        bool isPrime85 = true;\n        bool
    isPrime87 = true;\n        bool isPrime89 = true;\n        bool isPrime91 = true;\n
    \       bool isPrime93 = true;\n        bool isPrime95 = true;\n        bool isPrime97
    = true;\n        bool isPrime99 = true;\n        bool isPrime101 = true;\n        bool
    isPrime103 = true;\n        bool isPrime105 = true;\n        bool isPrime107 =
    true;\n        bool isPrime109 = true;\n        bool isPrime111 = true;\n        bool
    isPrime113 = true;\n        bool isPrime115 = true;\n        bool isPrime117 =
    true;\n        bool isPrime119 = true;\n        bool isPrime121 = true;\n        bool
    is\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HexKey((\"AB\"))
    == (1L));\n    Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\"))
    == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\"))
    == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\")) ==
    (12L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpqld0csp7.cs(83,14): error CS1001: Identifier expected

    /tmp/tmpqld0csp7.cs(83,14): error CS1002: ; expected

    /tmp/tmpqld0csp7.cs(83,14): error CS1525: Invalid expression term ''is''

    /tmp/tmpqld0csp7.cs(83,16): error CS1031: Type expected

    /tmp/tmpqld0csp7.cs(83,16): error CS1002: ; expected

    '
  timestamp: 1659976667
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    public
    static long HexKey(string num) {\n        long sum = 0;\n        foreach (char
    c in num) {\n            if (c >= '0' && c <= '9') {\n                sum += c
    - '0';\n            } else if (c >= 'A' && c <= 'F') {\n                sum +=
    c - 'A' + 10;\n            } else if (c >= 'a' && c <= 'f') {\n                sum
    += c - 'a' + 10;\n            }\n        }\n        return sum;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(HexKey((\"AB\")) == (1L));\n
    \   Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\"))
    == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\"))
    == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\")) ==
    (12L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <0d0508e3ef954279bea76aced5fb907d>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <0d0508e3ef954279bea76aced5fb907d>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976668
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    public
    static long HexKey(string num) {\n        long result = 0;\n        foreach (char
    c in num.ToUpper()) {\n            int digit = c - 'A' + 1;\n            if (digit
    < 0 || digit > 9) {\n                throw new ArgumentOutOfRangeException(\"num\",
    \"Hexadecimal digit must be between 0 and 9\");\n            }\n            result
    *= 16;\n            result += digit;\n        }\n        return result;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(HexKey((\"AB\"))
    == (1L));\n    Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\"))
    == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\"))
    == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\")) ==
    (12L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <702fda7395ee42c7b7b76673841f2db9>:0
    \n\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Hexadecimal digit
    must be between 0 and 9\nParameter name: num\n  at Problem.HexKey (System.String
    num) [0x00036] in <702fda7395ee42c7b7b76673841f2db9>:0 \n  at Problem.Main (System.String[]
    args) [0x00015] in <702fda7395ee42c7b7b76673841f2db9>:0 \n[ERROR] FATAL UNHANDLED
    EXCEPTION: System.ArgumentOutOfRangeException: Hexadecimal digit must be between
    0 and 9\nParameter name: num\n  at Problem.HexKey (System.String num) [0x00036]
    in <702fda7395ee42c7b7b76673841f2db9>:0 \n  at Problem.Main (System.String[] args)
    [0x00015] in <702fda7395ee42c7b7b76673841f2db9>:0 \n"
  stdout: ''
  timestamp: 1659976668
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    public
    static long HexKey(string num) {\n        long sum = 0;\n        foreach (char
    c in num) {\n            int d = (int)c;\n            if (d >= '0' && d <= '9')
    {\n                sum += d * d;\n            }\n        }\n        return sum;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(HexKey((\"AB\"))
    == (1L));\n    Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\"))
    == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\"))
    == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\")) ==
    (12L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <bffc43240d124c1ab8037fb9186d7d40>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <bffc43240d124c1ab8037fb9186d7d40>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976668
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    public
    static long HexKey(string num) {\n        long sum = 0;\n        foreach (char
    c in num) {\n            int digit = c - '0';\n            sum += digit * Math.Pow(16,
    digit);\n        }\n        return sum;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(HexKey((\"AB\")) == (1L));\n    Debug.Assert(HexKey((\"1077E\"))
    == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"2020\"))
    == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\")) == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\"))
    == (12L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpfei47pjq.cs(24,13): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659976668
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    public
    static long HexKey(string num) {\n        long sum = 0;\n        long numDigits
    = num.Length;\n        long digit;\n        long prime = 2;\n        bool isPrime
    = true;\n        bool isDigit;\n        long digitCount = 0;\n        long digitSum
    = 0;\n        long digitSum2 = 0;\n        long digitSum3 = 0;\n        long digitSum4
    = 0;\n        long digitSum5 = 0;\n        long digitSum6 = 0;\n        long digitSum7
    = 0;\n        long digitSum8 = 0;\n        long digitSum9 = 0;\n        long digitSum10
    = 0;\n        long digitSum11 = 0;\n        long digitSum12 = 0;\n        long
    digitSum13 = 0;\n        long digitSum14 = 0;\n        long digitSum15 = 0;\n
    \       long digitSum16 = 0;\n        long digitSum17 = 0;\n        long digitSum18
    = 0;\n        long digitSum19 = 0;\n        long digitSum20 = 0;\n        long
    digitSum21 = 0;\n        long digitSum22 = 0;\n        long digitSum23 = 0;\n
    \       long digitSum24 = 0;\n        long digitSum25 = 0;\n        long digitSum26
    = 0;\n        long digitSum27 = 0;\n        long digitSum28 = 0;\n        long
    digitSum29 = 0;\n        long digitSum30 = 0;\n        long digitSum31 = 0;\n
    \       long digitSum32 = 0;\n        long digitSum33 = 0;\n        long digitSum34
    = 0;\n        long digitSum35 = 0;\n        long digitSum36 = 0;\n        long
    digitSum37 = 0;\n        long digitSum38 = 0;\n        long digitSum39 = 0;\n
    \       long digitSum40 = 0;\n        long digitSum41 = 0;\n        long digitSum42
    = 0;\n        long digitSum43 = 0;\n        long digitSum44 = 0;\n        long
    digitSum45 = 0;\n        long digitSum46 = 0;\n        long digitSum47 = 0;\n
    \       long digitSum48 = 0;\n        long digitSum49 = 0;\n        long digitSum50
    = 0;\n        long digitSum51 = 0;\n        long digitSum52 = 0;\n        long
    digitSum53 = 0;\n        long digitSum54 = 0;\n        long digitSum55 = 0;\n
    \       long digitSum56 = 0;\n        long digitSum57 = 0;\n        long digitSum58
    = 0;\n        long digitSum59 = 0;\n        long digitSum60 = 0;\n        long
    digitSum61 = 0;\n        long digitSum62 = 0;\n        long digitSum63 = 0;\n
    \       long digitSum64 = 0;\n        long digitSum65 = 0;\n        long digitSum66
    = 0;\n        long digitSum67 = 0;\n        long digitSum\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(HexKey((\"AB\")) == (1L));\n    Debug.Assert(HexKey((\"1077E\"))
    == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"2020\"))
    == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\")) == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\"))
    == (12L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpfy0melbn.cs(95,22): error CS1002: ; expected

    '
  timestamp: 1659976667
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    public
    static long HexKey(string num) {\n        long result = 0;\n        long digit
    = 0;\n        bool isPrime = true;\n        foreach (char c in num) {\n            digit
    = Convert.ToInt64(c);\n            if (digit < 0 || digit > 15) {\n                throw
    new ArgumentOutOfRangeException(\"num\", \"Hexadecimal number must be between
    0 and 15\");\n            }\n            isPrime = isPrime && IsPrime(digit);\n
    \           if (isPrime) {\n                result += digit;\n            }\n
    \       }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(HexKey((\"AB\")) == (1L));\n    Debug.Assert(HexKey((\"1077E\"))
    == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"2020\"))
    == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\")) == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\"))
    == (12L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp5aa_lx5p.cs(29,34): error CS0103: The name ''IsPrime'' does not exist
    in the current context

    '
  timestamp: 1659976668
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    public
    static long HexKey(string num) {\n        long num2 = 0;\n        long num3 =
    0;\n        long num4 = 0;\n        long num5 = 0;\n        long num6 = 0;\n        long
    num7 = 0;\n        long num8 = 0;\n        long num9 = 0;\n        long num10
    = 0;\n        long num11 = 0;\n        long num12 = 0;\n        long num13 = 0;\n
    \       long num14 = 0;\n        long num15 = 0;\n        long num16 = 0;\n        long
    num17 = 0;\n        long num18 = 0;\n        long num19 = 0;\n        long num20
    = 0;\n        long num21 = 0;\n        long num22 = 0;\n        long num23 = 0;\n
    \       long num24 = 0;\n        long num25 = 0;\n        long num26 = 0;\n        long
    num27 = 0;\n        long num28 = 0;\n        long num29 = 0;\n        long num30
    = 0;\n        long num31 = 0;\n        long num32 = 0;\n        long num33 = 0;\n
    \       long num34 = 0;\n        long num35 = 0;\n        long num36 = 0;\n        long
    num37 = 0;\n        long num38 = 0;\n        long num39 = 0;\n        long num40
    = 0;\n        long num41 = 0;\n        long num42 = 0;\n        long num43 = 0;\n
    \       long num44 = 0;\n        long num45 = 0;\n        long num46 = 0;\n        long
    num47 = 0;\n        long num48 = 0;\n        long num49 = 0;\n        long num50
    = 0;\n        long num51 = 0;\n        long num52 = 0;\n        long num53 = 0;\n
    \       long num54 = 0;\n        long num55 = 0;\n        long num56 = 0;\n        long
    num57 = 0;\n        long num58 = 0;\n        long num59 = 0;\n        long num60
    = 0;\n        long num61 = 0;\n        long num62 = 0;\n        long num63 = 0;\n
    \       long num64 = 0;\n        long num65 = 0;\n        long num66 = 0;\n        long
    num67 = 0;\n        long num68 = 0;\n        long num69 = 0;\n        long num70
    = 0;\n        long num71 = 0;\n        long num72 = 0;\n        long num73 = 0;\n
    \       long num74 = 0;\n        long num75 = 0;\n        long num76 = 0;\n        long
    num77 = 0;\n        long num78 = 0;\n        long num79 = 0;\n        long num80
    = 0;\n        long num81 = 0;\n        long num82 = 0;\n        long num83 = 0;\n
    \       long num84 = 0;\n        long num85 = 0;\n        long num86 = 0;\n        long
    num87 = 0;\n\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HexKey((\"AB\"))
    == (1L));\n    Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\"))
    == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\"))
    == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\")) ==
    (12L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpajppcu5a.cs(21,14): warning CS0219: The variable ''num2'' is assigned
    but its value is never used

    /tmp/tmpajppcu5a.cs(22,14): warning CS0219: The variable ''num3'' is assigned
    but its value is never used

    /tmp/tmpajppcu5a.cs(23,14): warning CS0219: The variable ''num4'' is assigned
    but its value is never used

    /tmp/tmpajppcu5a.cs(24,14): warning CS0219: The variable ''num5'' is assigned
    but its value is never used

    /tmp/tmpajppcu5a.cs(25,14): warning CS0219: The variable ''num6'' is assigned
    but its value is never used

    /tmp/tmpajppcu5a.cs(26,14): warning CS0219: The variable ''num7'' is assigned
    but its value is never used

    /tmp/tmpajppcu5a.cs(27,14): warning CS0219: The variable ''num8'' is assigned
    but its value is never used

    /tmp/tmpajppcu5a.cs(28,14): warning CS0219: The variable ''num9'' is assigned
    but its value is never used

    /tmp/tmpajppcu5a.cs(29,14): warning CS0219: The variable ''num10'' is assigned
    but its value is never used

    /tmp/tmpajppcu5a.cs(30,14): warning CS0219: The variable ''num11'' is assigned
    but its value is never used

    /tmp/tmpajppcu5a.cs(31,14): warning CS0219: The variable ''num12'' is assigned
    but its value is never used

    /tmp/tmpajppcu5a.cs(32,14): warning CS0219: The variable ''num13'' is assigned
    but its value is never used

    /tmp/tmpajppcu5a.cs(33,14): warning CS0219: The variable ''num14'' is assigned
    but its value is never used

    /tmp/tmpajppcu5a.cs(34,14): warning CS0219: The variable ''num15'' is assigned
    but its value is never used

    /tmp/tmpajppcu5a.cs(35,14): warning CS0219: The variable ''num16'' is assigned
    but its value is never used

    /tmp/tmpajppcu5a.cs(36,14): warning CS0219: The variable ''num17'' is assigned
    but its value is never used

    /tmp/tmpajppcu5a.cs(37,14): warning CS0219: The variable ''num18'' is assigned
    but its value is never used

    /tmp/tmpajppcu5a.cs(38,14): warning CS0219: The variable ''num19'' is assigned
    but its value is never used

    /tmp/tmpajppcu5a.cs(39,14): warning CS0'
  timestamp: 1659976665
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    public
    static long HexKey(string num) {\n        long result = 0;\n        string hex
    = num.ToUpper();\n        foreach (char c in hex) {\n            int digit = c
    - '0';\n            if (digit < 0 || digit > 9) {\n                throw new ArgumentOutOfRangeException(\"Hexadecimal
    digit must be between 0 and 9\");\n            }\n            result += (long)Math.Pow(16,
    digit);\n        }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(HexKey((\"AB\")) == (1L));\n    Debug.Assert(HexKey((\"1077E\"))
    == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"2020\"))
    == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\")) == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\"))
    == (12L));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Specified argument
    was out of the range of valid values.\nParameter name: Hexadecimal digit must
    be between 0 and 9\n  at Problem.HexKey (System.String num) [0x00038] in <874bd294ba4f4145a1216859e133dbb4>:0
    \n  at Problem.Main (System.String[] args) [0x00001] in <874bd294ba4f4145a1216859e133dbb4>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Specified
    argument was out of the range of valid values.\nParameter name: Hexadecimal digit
    must be between 0 and 9\n  at Problem.HexKey (System.String num) [0x00038] in
    <874bd294ba4f4145a1216859e133dbb4>:0 \n  at Problem.Main (System.String[] args)
    [0x00001] in <874bd294ba4f4145a1216859e133dbb4>:0 \n"
  stdout: ''
  timestamp: 1659976665
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    public
    static long HexKey(string num) {\n        long result = 0;\n        foreach (char
    c in num) {\n            int digit = c - '0';\n            if (digit < 0 || digit
    > 9) {\n                throw new ArgumentException(\"Invalid hexadecimal digit:
    \" + c);\n            }\n            result *= 16;\n            result += digit;\n
    \       }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(HexKey((\"AB\")) == (1L));\n    Debug.Assert(HexKey((\"1077E\"))
    == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"2020\"))
    == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\")) == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\"))
    == (12L));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentException: Invalid hexadecimal digit:
    A\n  at Problem.HexKey (System.String num) [0x00040] in <13765f2501414199b7e5a0b230f771a7>:0
    \n  at Problem.Main (System.String[] args) [0x00001] in <13765f2501414199b7e5a0b230f771a7>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentException: Invalid hexadecimal
    digit: A\n  at Problem.HexKey (System.String num) [0x00040] in <13765f2501414199b7e5a0b230f771a7>:0
    \n  at Problem.Main (System.String[] args) [0x00001] in <13765f2501414199b7e5a0b230f771a7>:0
    \n"
  stdout: ''
  timestamp: 1659976668
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    public
    static long HexKey(string num) {\n        long ret = 0;\n        foreach (char
    c in num.ToUpper()) {\n            int val = (int)c;\n            if (val < 'A'
    || val > 'F') {\n                throw new ArgumentException(\"Invalid hexadecimal
    digit: \" + c);\n            }\n            ret += val - 'A' + 10;\n        }\n
    \       return ret;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HexKey((\"AB\"))
    == (1L));\n    Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\"))
    == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\"))
    == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\")) ==
    (12L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <e95bdda9b4c34c31b651e4ce65ac1407>:0
    \n\nUnhandled Exception:\nSystem.ArgumentException: Invalid hexadecimal digit:
    1\n  at Problem.HexKey (System.String num) [0x00043] in <e95bdda9b4c34c31b651e4ce65ac1407>:0
    \n  at Problem.Main (System.String[] args) [0x00015] in <e95bdda9b4c34c31b651e4ce65ac1407>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentException: Invalid hexadecimal
    digit: 1\n  at Problem.HexKey (System.String num) [0x00043] in <e95bdda9b4c34c31b651e4ce65ac1407>:0
    \n  at Problem.Main (System.String[] args) [0x00015] in <e95bdda9b4c34c31b651e4ce65ac1407>:0
    \n"
  stdout: ''
  timestamp: 1659976668
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    public
    static long HexKey(string num) {\n        long ret = 0;\n        foreach (char
    c in num) {\n            if (c == 'A' || c == 'B' || c == 'C' || c == 'D' || c
    == 'E' || c == 'F') {\n                ret += 10;\n            }\n            ret
    += (c - '0');\n        }\n        return ret;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(HexKey((\"AB\")) == (1L));\n    Debug.Assert(HexKey((\"1077E\"))
    == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"2020\"))
    == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\")) == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\"))
    == (12L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <97013134ddd94a7293da12f8c1d24b0f>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <97013134ddd94a7293da12f8c1d24b0f>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976668
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    public
    static long HexKey(string num) {\n        long result = 0;\n        foreach (char
    c in num) {\n            int digit = c - '0';\n            if (digit >= 2 && digit
    <= 9) {\n                result += (digit * digit);\n            }\n        }\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(HexKey((\"AB\")) == (1L));\n    Debug.Assert(HexKey((\"1077E\"))
    == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"2020\"))
    == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\")) == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\"))
    == (12L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <341a845210aa47f2b161e2edaa87c29a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <341a845210aa47f2b161e2edaa87c29a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976667
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    public
    static long HexKey(string num) {\n        long result = 0;\n        long digit
    = 0;\n        bool isPrime = true;\n        foreach (char c in num) {\n            digit
    = Convert.ToInt64(c);\n            if (digit == 0) {\n                isPrime
    = false;\n                break;\n            }\n            if (isPrime) {\n
    \               result += (digit % 2 == 0 ? 1 : 0);\n            }\n        }\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(HexKey((\"AB\")) == (1L));\n    Debug.Assert(HexKey((\"1077E\"))
    == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"2020\"))
    == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\")) == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\"))
    == (12L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7f375d6529ea4fd3837496b017597d74>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7f375d6529ea4fd3837496b017597d74>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976668
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    public
    static long HexKey(string num) {\n        long result = 0;\n        foreach (char
    c in num) {\n            int digit = c - '0';\n            if (digit >= 2 && digit
    <= 9) {\n                result += (digit * digit);\n            }\n        }\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(HexKey((\"AB\")) == (1L));\n    Debug.Assert(HexKey((\"1077E\"))
    == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"2020\"))
    == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\")) == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\"))
    == (12L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <341a845210aa47f2b161e2edaa87c29a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <341a845210aa47f2b161e2edaa87c29a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976667
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    public
    static long HexKey(string num) {\n        long sum = 0;\n        long digit =
    0;\n        long prime = 0;\n        long num2 = 1;\n        long num3 = 1;\n
    \       long num4 = 1;\n        long num5 = 1;\n        long num6 = 1;\n        long
    num7 = 1;\n        long num8 = 1;\n        long num9 = 1;\n        long num10
    = 1;\n        long num11 = 1;\n        long num12 = 1;\n        long num13 = 1;\n
    \       long num14 = 1;\n        long num15 = 1;\n        long num16 = 1;\n        long
    num17 = 1;\n        long num18 = 1;\n        long num19 = 1;\n        long num20
    = 1;\n        long num21 = 1;\n        long num22 = 1;\n        long num23 = 1;\n
    \       long num24 = 1;\n        long num25 = 1;\n        long num26 = 1;\n        long
    num27 = 1;\n        long num28 = 1;\n        long num29 = 1;\n        long num30
    = 1;\n        long num31 = 1;\n        long num32 = 1;\n        long num33 = 1;\n
    \       long num34 = 1;\n        long num35 = 1;\n        long num36 = 1;\n        long
    num37 = 1;\n        long num38 = 1;\n        long num39 = 1;\n        long num40
    = 1;\n        long num41 = 1;\n        long num42 = 1;\n        long num43 = 1;\n
    \       long num44 = 1;\n        long num45 = 1;\n        long num46 = 1;\n        long
    num47 = 1;\n        long num48 = 1;\n        long num49 = 1;\n        long num50
    = 1;\n        long num51 = 1;\n        long num52 = 1;\n        long num53 = 1;\n
    \       long num54 = 1;\n        long num55 = 1;\n        long num56 = 1;\n        long
    num57 = 1;\n        long num58 = 1;\n        long num59 = 1;\n        long num60
    = 1;\n        long num61 = 1;\n        long num62 = 1;\n        long num63 = 1;\n
    \       long num64 = 1;\n        long num65 = 1;\n        long num66 = 1;\n        long
    num67 = 1;\n        long num68 = 1;\n        long num69 = 1;\n        long num70
    = 1;\n        long num71 = 1;\n        long num72 = 1;\n        long num73 = 1;\n
    \       long num74 = 1;\n        long num75 = 1;\n        long num76 = 1;\n        long
    num77 = 1;\n        long num78 = 1;\n        long num79 = 1;\n        long num80
    = 1;\n        long num81 = 1;\n        long num82 = 1;\n        long num8\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(HexKey((\"AB\"))
    == (1L));\n    Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\"))
    == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\"))
    == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\")) ==
    (12L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmphl2c8h3j.cs(105,18): error CS1002: ; expected

    '
  timestamp: 1659976667
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    public
    static long HexKey(string num) {\n        long result = 0;\n        long numDigits
    = num.Length;\n        long digit;\n        long factor = 2;\n        bool isPrime
    = true;\n        long prime = 2;\n        long primeFactor = 2;\n        long
    primeFactor2 = 2;\n        long primeFactor3 = 1;\n        long primeFactor4 =
    1;\n        long primeFactor5 = 1;\n        long primeFactor6 = 1;\n        long
    primeFactor7 = 1;\n        long primeFactor8 = 1;\n        long primeFactor9 =
    1;\n        long primeFactor10 = 1;\n        long primeFactor11 = 1;\n        long
    primeFactor12 = 1;\n        long primeFactor13 = 1;\n        long primeFactor14
    = 1;\n        long primeFactor15 = 1;\n        long primeFactor16 = 1;\n        long
    primeFactor17 = 1;\n        long primeFactor18 = 1;\n        long primeFactor19
    = 1;\n        long primeFactor20 = 1;\n        long primeFactor21 = 1;\n        long
    primeFactor22 = 1;\n        long primeFactor23 = 1;\n        long primeFactor24
    = 1;\n        long primeFactor25 = 1;\n        long primeFactor26 = 1;\n        long
    primeFactor27 = 1;\n        long primeFactor28 = 1;\n        long primeFactor29
    = 1;\n        long primeFactor30 = 1;\n        long primeFactor31 = 1;\n        long
    primeFactor32 = 1;\n        long primeFactor33 = 1;\n        long primeFactor34
    = 1;\n        long primeFactor35 = 1;\n        long primeFactor36 = 1;\n        long
    primeFactor37 = 1;\n        long primeFactor38 = 1;\n        long primeFactor39
    = 1;\n        long primeFactor40 = 1;\n        long primeFactor41 = 1;\n        long
    primeFactor42 = 1;\n        long primeFactor43 = 1;\n        long primeFactor44
    = 1;\n        long primeFactor45 = 1;\n        long primeFactor46 = 1;\n        long
    primeFactor47 = 1;\n        long primeFactor48 = 1;\n        long primeFactor49
    = 1;\n        long primeFactor50 = 1;\n        long primeFactor51 = 1;\n        long
    primeFactor52 = 1;\n        long primeFactor53 = 1;\n        long primeFactor54
    = 1;\n        long primeFactor55 = 1;\n        long primeFactor56 = 1;\n        long
    primeFactor57 = 1;\n        long primeFactor58 = 1;\n        long primeFactor59
    = 1;\n        long primeFactor60 = 1;\n        long primeFactor61 = 1;\n        long
    primeFactor62 = 1;\n        long primeFactor63 = 1;\n        long primeFactor64
    = 1;\n        long primeFactor65 = 1;\n        long primeFactor66 = 1;\n        long
    primeFactor67 = 1;\n        long prime\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(HexKey((\"AB\")) == (1L));\n    Debug.Assert(HexKey((\"1077E\"))
    == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"2020\"))
    == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\")) == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\"))
    == (12L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp4dvt1b4o.cs(94,19): error CS1002: ; expected

    '
  timestamp: 1659976667
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    public
    static long HexKey(string num) {\n        long result = 0;\n        string hex
    = num.ToUpper();\n        foreach (char c in hex) {\n            int d = Convert.ToInt32(c);\n
    \           result += (d >= '0' && d <= '9') ? d : -1;\n        }\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HexKey((\"AB\"))
    == (1L));\n    Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\"))
    == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\"))
    == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\")) ==
    (12L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c1585d42788d4e1081e45231e1df7c5c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c1585d42788d4e1081e45231e1df7c5c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976668
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    public
    static long HexKey(string num) {\n        long num2 = 0;\n        long num3 =
    0;\n        long num4 = 0;\n        long num5 = 0;\n        long num6 = 0;\n        long
    num7 = 0;\n        long num8 = 0;\n        long num9 = 0;\n        long num10
    = 0;\n        long num11 = 0;\n        long num12 = 0;\n        long num13 = 0;\n
    \       long num14 = 0;\n        long num15 = 0;\n        long num16 = 0;\n        long
    num17 = 0;\n        long num18 = 0;\n        long num19 = 0;\n        long num20
    = 0;\n        long num21 = 0;\n        long num22 = 0;\n        long num23 = 0;\n
    \       long num24 = 0;\n        long num25 = 0;\n        long num26 = 0;\n        long
    num27 = 0;\n        long num28 = 0;\n        long num29 = 0;\n        long num30
    = 0;\n        long num31 = 0;\n        long num32 = 0;\n        long num33 = 0;\n
    \       long num34 = 0;\n        long num35 = 0;\n        long num36 = 0;\n        long
    num37 = 0;\n        long num38 = 0;\n        long num39 = 0;\n        long num40
    = 0;\n        long num41 = 0;\n        long num42 = 0;\n        long num43 = 0;\n
    \       long num44 = 0;\n        long num45 = 0;\n        long num46 = 0;\n        long
    num47 = 0;\n        long num48 = 0;\n        long num49 = 0;\n        long num50
    = 0;\n        long num51 = 0;\n        long num52 = 0;\n        long num53 = 0;\n
    \       long num54 = 0;\n        long num55 = 0;\n        long num56 = 0;\n        long
    num57 = 0;\n        long num58 = 0;\n        long num59 = 0;\n        long num60
    = 0;\n        long num61 = 0;\n        long num62 = 0;\n        long num63 = 0;\n
    \       long num64 = 0;\n        long num65 = 0;\n        long num66 = 0;\n        long
    num67 = 0;\n        long num68 = 0;\n        long num69 = 0;\n        long num70
    = 0;\n        long num71 = 0;\n        long num72 = 0;\n        long num73 = 0;\n
    \       long num74 = 0;\n        long num75 = 0;\n        long num76 = 0;\n        long
    num77 = 0;\n        long num78 = 0;\n        long num79 = 0;\n        long num80
    = 0;\n        long num81 = 0;\n        long num82 = 0;\n        long num83 = 0;\n
    \       long num84 = 0;\n        long num85 = 0;\n        long num86 = 0;\n        long
    num87 = 0;\n\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HexKey((\"AB\"))
    == (1L));\n    Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\"))
    == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\"))
    == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\")) ==
    (12L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpajppcu5a.cs(21,14): warning CS0219: The variable ''num2'' is assigned
    but its value is never used

    /tmp/tmpajppcu5a.cs(22,14): warning CS0219: The variable ''num3'' is assigned
    but its value is never used

    /tmp/tmpajppcu5a.cs(23,14): warning CS0219: The variable ''num4'' is assigned
    but its value is never used

    /tmp/tmpajppcu5a.cs(24,14): warning CS0219: The variable ''num5'' is assigned
    but its value is never used

    /tmp/tmpajppcu5a.cs(25,14): warning CS0219: The variable ''num6'' is assigned
    but its value is never used

    /tmp/tmpajppcu5a.cs(26,14): warning CS0219: The variable ''num7'' is assigned
    but its value is never used

    /tmp/tmpajppcu5a.cs(27,14): warning CS0219: The variable ''num8'' is assigned
    but its value is never used

    /tmp/tmpajppcu5a.cs(28,14): warning CS0219: The variable ''num9'' is assigned
    but its value is never used

    /tmp/tmpajppcu5a.cs(29,14): warning CS0219: The variable ''num10'' is assigned
    but its value is never used

    /tmp/tmpajppcu5a.cs(30,14): warning CS0219: The variable ''num11'' is assigned
    but its value is never used

    /tmp/tmpajppcu5a.cs(31,14): warning CS0219: The variable ''num12'' is assigned
    but its value is never used

    /tmp/tmpajppcu5a.cs(32,14): warning CS0219: The variable ''num13'' is assigned
    but its value is never used

    /tmp/tmpajppcu5a.cs(33,14): warning CS0219: The variable ''num14'' is assigned
    but its value is never used

    /tmp/tmpajppcu5a.cs(34,14): warning CS0219: The variable ''num15'' is assigned
    but its value is never used

    /tmp/tmpajppcu5a.cs(35,14): warning CS0219: The variable ''num16'' is assigned
    but its value is never used

    /tmp/tmpajppcu5a.cs(36,14): warning CS0219: The variable ''num17'' is assigned
    but its value is never used

    /tmp/tmpajppcu5a.cs(37,14): warning CS0219: The variable ''num18'' is assigned
    but its value is never used

    /tmp/tmpajppcu5a.cs(38,14): warning CS0219: The variable ''num19'' is assigned
    but its value is never used

    /tmp/tmpajppcu5a.cs(39,14): warning CS0'
  timestamp: 1659976665
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    public
    static long HexKey(string num) {\n        long sum = 0;\n        long key = 0;\n
    \       string hex = num.ToUpper();\n        foreach (char c in hex) {\n            int
    digit = c - 'A';\n            key += digit * Math.Pow(16, hex.Length - 1 - c);\n
    \           sum += digit;\n        }\n        return sum;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(HexKey((\"AB\")) == (1L));\n    Debug.Assert(HexKey((\"1077E\"))
    == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"2020\"))
    == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\")) == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\"))
    == (12L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpbjq25iwj.cs(26,13): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659976668
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    public
    static long HexKey(string num) {\n        long result = 0;\n        string hex
    = num.ToUpper();\n        foreach (char c in hex) {\n            int d = (int)c;\n
    \           if (d >= '0' && d <= '9') {\n                result += (long)Math.Pow(16,
    d);\n            }\n        }\n        return result;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(HexKey((\"AB\")) == (1L));\n    Debug.Assert(HexKey((\"1077E\"))
    == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"2020\"))
    == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\")) == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\"))
    == (12L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <0808bbd541e3403392c68b1f8c7d9488>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <0808bbd541e3403392c68b1f8c7d9488>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976668
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    public
    static long HexKey(string num) {\n        long sum = 0;\n        long digit;\n
    \       bool isPrime = true;\n        foreach (char c in num) {\n            digit
    = Convert.ToInt64(c);\n            if (digit < 0 || digit > 15) {\n                throw
    new ArgumentOutOfRangeException(\"num\");\n            }\n            sum += digit;\n
    \       }\n        long key = 0;\n        long key2 = 0;\n        long key3 =
    0;\n        long key4 = 0;\n        long key5 = 0;\n        long key6 = 0;\n        long
    key7 = 0;\n        long key8 = 0;\n        long key9 = 0;\n        long keyA =
    0;\n        long keyB = 0;\n        long keyC = 0;\n        long keyD = 0;\n        long
    keyE = 0;\n        long keyF = 0;\n        long keyG = 0;\n        long keyH =
    0;\n        long keyI = 0;\n        long keyJ = 0;\n        long keyK = 0;\n        long
    keyL = 0;\n        long keyM = 0;\n        long keyN = 0;\n        long keyO =
    0;\n        long keyP = 0;\n        long keyQ = 0;\n        long keyR = 0;\n        long
    keyS = 0;\n        long keyT = 0;\n        long keyU = 0;\n        long keyV =
    0;\n        long keyW = 0;\n        long keyX = 0;\n        long keyY = 0;\n        long
    keyZ = 0;\n        long key0 = 0;\n        long key1 = 0;\n        long key2 =
    0;\n        long key3 = 0;\n        long key4 = 0;\n        long key5 = 0;\n        long
    key6 = 0;\n        long key7 = 0;\n        long key8 = 0;\n        long key9 =
    0;\n        long keyA = 0;\n        long keyB = 0;\n        long keyC = 0;\n        long
    keyD = 0;\n        long keyE = 0;\n        long keyF = 0;\n        long keyG =
    0;\n        long keyH = 0;\n        long keyI = 0;\n        long keyJ = 0;\n        long
    keyK = 0;\n        long keyL = 0;\n        long keyM = 0;\n        long keyN =
    0;\n        long keyO = 0;\n        long keyP = 0;\n        long keyQ = 0;\n        long
    keyR = 0;\n        long keyS = 0;\n        long keyT = 0;\n        long keyU =
    0;\n        long keyV = 0;\n        long keyW = 0;\n        long keyX = 0;\n        long
    keyY = 0;\n        long keyZ = 0;\n        long key0 = 0;\n        long key1 =
    0;\n        long key2 = 0;\n        long key3 = 0;\n        long key4 = 0;\n        long
    key5 = 0;\n        long key\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(HexKey((\"AB\")) == (1L));\n    Debug.Assert(HexKey((\"1077E\"))
    == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"2020\"))
    == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\")) == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\"))
    == (12L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp_yw6kvw4.cs(108,17): error CS1002: ; expected

    '
  timestamp: 1659976668
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    public
    static long HexKey(string num) {\n        long result = 0;\n        string hex
    = num.ToUpper();\n        foreach (char c in hex) {\n            int d = Convert.ToInt32(c);\n
    \           if (d >= '0' && d <= '9') {\n                result += (d - (int)'0');\n
    \           }\n        }\n        return result;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(HexKey((\"AB\")) == (1L));\n    Debug.Assert(HexKey((\"1077E\"))
    == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"2020\"))
    == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\")) == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\"))
    == (12L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <b47bc71546424991a7a74a2d47d2c60f>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <b47bc71546424991a7a74a2d47d2c60f>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976668
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    public
    static long HexKey(string num) {\n        long result = 0;\n        foreach (char
    c in num) {\n            int digit = c - '0';\n            if (digit < 0 || digit
    > 9) {\n                throw new ArgumentException(\"Hex digits must be between
    0 and 9\");\n            }\n            result *= 16;\n            result += digit;\n
    \       }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(HexKey((\"AB\")) == (1L));\n    Debug.Assert(HexKey((\"1077E\"))
    == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"2020\"))
    == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\")) == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\"))
    == (12L));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentException: Hex digits must be between
    0 and 9\n  at Problem.HexKey (System.String num) [0x0002f] in <cf88e4f9103a4985b23cc6432c61c4d7>:0
    \n  at Problem.Main (System.String[] args) [0x00001] in <cf88e4f9103a4985b23cc6432c61c4d7>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentException: Hex digits must
    be between 0 and 9\n  at Problem.HexKey (System.String num) [0x0002f] in <cf88e4f9103a4985b23cc6432c61c4d7>:0
    \n  at Problem.Main (System.String[] args) [0x00001] in <cf88e4f9103a4985b23cc6432c61c4d7>:0
    \n"
  stdout: ''
  timestamp: 1659976668
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    public
    static long HexKey(string num) {\n        long result = 0;\n        long sum =
    0;\n        long pow = 1;\n        foreach (char c in num.ToUpper()) {\n            sum
    += (long)Math.Pow(16, (int)c - 'A');\n            pow *= 16;\n        }\n        long
    num2 = sum;\n        long num3 = num2;\n        long num4 = num3;\n        long
    num5 = num4;\n        long num6 = num5;\n        long num7 = num6;\n        long
    num8 = num7;\n        long num9 = num8;\n        long num10 = num9;\n        long
    num11 = num10;\n        long num12 = num11;\n        long num13 = num12;\n        long
    num14 = num13;\n        long num15 = num14;\n        long num16 = num15;\n        long
    num17 = num16;\n        long num18 = num17;\n        long num19 = num18;\n        long
    num20 = num19;\n        long num21 = num20;\n        long num22 = num21;\n        long
    num23 = num22;\n        long num24 = num23;\n        long num25 = num24;\n        long
    num26 = num25;\n        long num27 = num26;\n        long num28 = num27;\n        long
    num29 = num28;\n        long num30 = num29;\n        long num31 = num30;\n        long
    num32 = num31;\n        long num33 = num32;\n        long num34 = num33;\n        long
    num35 = num34;\n        long num36 = num35;\n        long num37 = num36;\n        long
    num38 = num37;\n        long num39 = num38;\n        long num40 = num39;\n        long
    num41 = num40;\n        long num42 = num41;\n        long num43 = num42;\n        long
    num44 = num43;\n        long num45 = num44;\n        long num46 = num45;\n        long
    num47 = num46;\n        long num48 = num47;\n        long num49 = num48;\n        long
    num50 = num49;\n        long num51 = num50;\n        long num52 = num51;\n        long
    num53 = num52;\n        long num54 = num53;\n        long num55 = num54;\n        long
    num56 = num55;\n        \n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(HexKey((\"AB\")) == (1L));\n    Debug.Assert(HexKey((\"1077E\"))
    == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"2020\"))
    == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\")) == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\"))
    == (12L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpg74x7xog.cs(21,14): warning CS0219: The variable ''result'' is assigned
    but its value is never used

    /tmp/tmpg74x7xog.cs(20,24): error CS0161: ''Problem.HexKey(string)'': not all
    code paths return a value

    '
  timestamp: 1659976668
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    public
    static long HexKey(string num) {\n        long result = 0;\n        foreach (char
    c in num) {\n            int digit = c - '0';\n            if (digit < 0 || digit
    > 9) {\n                throw new ArgumentOutOfRangeException(\"Hex key must be
    between 0 and 9\");\n            }\n            result += (long)Math.Pow(16, digit);\n
    \       }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(HexKey((\"AB\")) == (1L));\n    Debug.Assert(HexKey((\"1077E\"))
    == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"2020\"))
    == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\")) == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\"))
    == (12L));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Specified argument
    was out of the range of valid values.\nParameter name: Hex key must be between
    0 and 9\n  at Problem.HexKey (System.String num) [0x0002f] in <0164c1173fa8444b84e8049442730daa>:0
    \n  at Problem.Main (System.String[] args) [0x00001] in <0164c1173fa8444b84e8049442730daa>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Specified
    argument was out of the range of valid values.\nParameter name: Hex key must be
    between 0 and 9\n  at Problem.HexKey (System.String num) [0x0002f] in <0164c1173fa8444b84e8049442730daa>:0
    \n  at Problem.Main (System.String[] args) [0x00001] in <0164c1173fa8444b84e8049442730daa>:0
    \n"
  stdout: ''
  timestamp: 1659976668
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    public
    static long HexKey(string num) {\n        long result = 0;\n        string hex
    = num.ToUpper();\n        foreach (char c in hex) {\n            int digit = c
    - 'A';\n            result += (digit * digit);\n        }\n        return result;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(HexKey((\"AB\"))
    == (1L));\n    Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\"))
    == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\"))
    == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\")) ==
    (12L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c84f66ffdad9434a8313dc644af10dcf>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c84f66ffdad9434a8313dc644af10dcf>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976666
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    public
    static long HexKey(string num) {\n        long result = 0;\n        foreach (char
    c in num) {\n            int digit = c - '0';\n            if (digit < 0 || digit
    > 9) {\n                throw new ArgumentException(\"Invalid hexadecimal digit:
    \" + c);\n            }\n            result *= 16;\n            result += digit;\n
    \       }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(HexKey((\"AB\")) == (1L));\n    Debug.Assert(HexKey((\"1077E\"))
    == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"2020\"))
    == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\")) == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\"))
    == (12L));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentException: Invalid hexadecimal digit:
    A\n  at Problem.HexKey (System.String num) [0x00040] in <13765f2501414199b7e5a0b230f771a7>:0
    \n  at Problem.Main (System.String[] args) [0x00001] in <13765f2501414199b7e5a0b230f771a7>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentException: Invalid hexadecimal
    digit: A\n  at Problem.HexKey (System.String num) [0x00040] in <13765f2501414199b7e5a0b230f771a7>:0
    \n  at Problem.Main (System.String[] args) [0x00001] in <13765f2501414199b7e5a0b230f771a7>:0
    \n"
  stdout: ''
  timestamp: 1659976668
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    public
    static long HexKey(string num) {\n        long result = 0;\n        long digits
    = 0;\n        long primes = 0;\n        long hexDigits = 0;\n        long hexPrimes
    = 0;\n        long hexPrimeDigits = 0;\n        long hexPrimePrimes = 0;\n        long
    hexPrimePrimeDigits = 0;\n        long hexPrimePrimePrimes = 0;\n        long
    hexPrimePrimePrimePrimes = 0;\n        long hexPrimePrimePrimePrimePrimes = 0;\n
    \       long hexPrimePrimePrimePrimePrimePrimes = 0;\n        long hexPrimePrimePrimePrimePrimePrimePrimes
    = 0;\n        long hexPrimePrimePrimePrimePrimePrimePrimePrimes = 0;\n        long
    hexPrimePrimePrimePrimePrimePrimePrimePrimes = 0;\n        long hexPrimePrimePrimePrimePrimePrimePrimePrimePrimes
    = 0;\n        long hexPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimes = 0;\n
    \       long hexPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimes = 0;\n        long
    hexPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimes = 0;\n        long
    hexPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimes = 0;\n        long
    hexPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimes = 0;\n        long
    hexPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimes = 0;\n        long
    hexPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimes = 0;\n        long
    hexPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimes = 0;\n        long
    hexPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimes = 0;\n        long
    hexPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimes = 0;\n        long
    hexPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimes = 0;\n        long
    hexPrimePrimePrimePri\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HexKey((\"AB\"))
    == (1L));\n    Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\"))
    == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\"))
    == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\")) ==
    (12L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp9h7pp3s0.cs(48,35): error CS1002: ; expected

    '
  timestamp: 1659976668
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    public
    static long HexKey(string num) {\n        long result = 0;\n        long pow =
    1;\n        foreach (char c in num) {\n            long digit = Convert.ToInt64(c);\n
    \           result += (digit * pow);\n            pow *= 16;\n        }\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HexKey((\"AB\"))
    == (1L));\n    Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\"))
    == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\"))
    == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\")) ==
    (12L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <b2d19600ea27413d8a69200815ef0768>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <b2d19600ea27413d8a69200815ef0768>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976668
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    public
    static long HexKey(string num) {\n        long num2 = 0;\n        long num3 =
    0;\n        long num4 = 0;\n        long num5 = 0;\n        long num6 = 0;\n        long
    num7 = 0;\n        long num8 = 0;\n        long num9 = 0;\n        long num10
    = 0;\n        long num11 = 0;\n        long num12 = 0;\n        long num13 = 0;\n
    \       long num14 = 0;\n        long num15 = 0;\n        long num16 = 0;\n        long
    num17 = 0;\n        long num18 = 0;\n        long num19 = 0;\n        long num20
    = 0;\n        long num21 = 0;\n        long num22 = 0;\n        long num23 = 0;\n
    \       long num24 = 0;\n        long num25 = 0;\n        long num26 = 0;\n        long
    num27 = 0;\n        long num28 = 0;\n        long num29 = 0;\n        long num30
    = 0;\n        long num31 = 0;\n        long num32 = 0;\n        long num33 = 0;\n
    \       long num34 = 0;\n        long num35 = 0;\n        long num36 = 0;\n        long
    num37 = 0;\n        long num38 = 0;\n        long num39 = 0;\n        long num40
    = 0;\n        long num41 = 0;\n        long num42 = 0;\n        long num43 = 0;\n
    \       long num44 = 0;\n        long num45 = 0;\n        long num46 = 0;\n        long
    num47 = 0;\n        long num48 = 0;\n        long num49 = 0;\n        long num50
    = 0;\n        long num51 = 0;\n        long num52 = 0;\n        long num53 = 0;\n
    \       long num54 = 0;\n        long num55 = 0;\n        long num56 = 0;\n        long
    num57 = 0;\n        long num58 = 0;\n        long num59 = 0;\n        long num60
    = 0;\n        long num61 = 0;\n        long num62 = 0;\n        long num63 = 0;\n
    \       long num64 = 0;\n        long num65 = 0;\n        long num66 = 0;\n        long
    num67 = 0;\n        long num68 = 0;\n        long num69 = 0;\n        long num70
    = 0;\n        long num71 = 0;\n        long num72 = 0;\n        long num73 = 0;\n
    \       long num74 = 0;\n        long num75 = 0;\n        long num76 = 0;\n        long
    num77 = 0;\n        long num78 = 0;\n        long num79 = 0;\n        long num80
    = 0;\n        long num81 = 0;\n        long num82 = 0;\n        long num83 = 0;\n
    \       long num84 = 0;\n        long num85 = 0;\n        long num86 = 0;\n        long
    num87 = 0;\n\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HexKey((\"AB\"))
    == (1L));\n    Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\"))
    == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\"))
    == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\")) ==
    (12L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpajppcu5a.cs(21,14): warning CS0219: The variable ''num2'' is assigned
    but its value is never used

    /tmp/tmpajppcu5a.cs(22,14): warning CS0219: The variable ''num3'' is assigned
    but its value is never used

    /tmp/tmpajppcu5a.cs(23,14): warning CS0219: The variable ''num4'' is assigned
    but its value is never used

    /tmp/tmpajppcu5a.cs(24,14): warning CS0219: The variable ''num5'' is assigned
    but its value is never used

    /tmp/tmpajppcu5a.cs(25,14): warning CS0219: The variable ''num6'' is assigned
    but its value is never used

    /tmp/tmpajppcu5a.cs(26,14): warning CS0219: The variable ''num7'' is assigned
    but its value is never used

    /tmp/tmpajppcu5a.cs(27,14): warning CS0219: The variable ''num8'' is assigned
    but its value is never used

    /tmp/tmpajppcu5a.cs(28,14): warning CS0219: The variable ''num9'' is assigned
    but its value is never used

    /tmp/tmpajppcu5a.cs(29,14): warning CS0219: The variable ''num10'' is assigned
    but its value is never used

    /tmp/tmpajppcu5a.cs(30,14): warning CS0219: The variable ''num11'' is assigned
    but its value is never used

    /tmp/tmpajppcu5a.cs(31,14): warning CS0219: The variable ''num12'' is assigned
    but its value is never used

    /tmp/tmpajppcu5a.cs(32,14): warning CS0219: The variable ''num13'' is assigned
    but its value is never used

    /tmp/tmpajppcu5a.cs(33,14): warning CS0219: The variable ''num14'' is assigned
    but its value is never used

    /tmp/tmpajppcu5a.cs(34,14): warning CS0219: The variable ''num15'' is assigned
    but its value is never used

    /tmp/tmpajppcu5a.cs(35,14): warning CS0219: The variable ''num16'' is assigned
    but its value is never used

    /tmp/tmpajppcu5a.cs(36,14): warning CS0219: The variable ''num17'' is assigned
    but its value is never used

    /tmp/tmpajppcu5a.cs(37,14): warning CS0219: The variable ''num18'' is assigned
    but its value is never used

    /tmp/tmpajppcu5a.cs(38,14): warning CS0219: The variable ''num19'' is assigned
    but its value is never used

    /tmp/tmpajppcu5a.cs(39,14): warning CS0'
  timestamp: 1659976665
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    public
    static long HexKey(string num) {\n        long result = 0;\n        foreach (char
    c in num.ToUpper()) {\n            int digit = c - 'A';\n            if (digit
    < 0 || digit > 9) {\n                throw new ArgumentOutOfRangeException(\"Hexadecimal
    digit must be between 0 and 9\");\n            }\n            result *= 16;\n
    \           result += digit;\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(HexKey((\"AB\")) == (1L));\n
    \   Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\"))
    == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\"))
    == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\")) ==
    (12L));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Specified argument
    was out of the range of valid values.\nParameter name: Hexadecimal digit must
    be between 0 and 9\n  at Problem.HexKey (System.String num) [0x00034] in <72d0146e875e456bbccdb10cbd2697a7>:0
    \n  at Problem.Main (System.String[] args) [0x00015] in <72d0146e875e456bbccdb10cbd2697a7>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Specified
    argument was out of the range of valid values.\nParameter name: Hexadecimal digit
    must be between 0 and 9\n  at Problem.HexKey (System.String num) [0x00034] in
    <72d0146e875e456bbccdb10cbd2697a7>:0 \n  at Problem.Main (System.String[] args)
    [0x00015] in <72d0146e875e456bbccdb10cbd2697a7>:0 \n"
  stdout: ''
  timestamp: 1659976665
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    public
    static long HexKey(string num) {\n        long result = 0;\n        foreach (char
    c in num.ToUpper()) {\n            int d = (int)c;\n            if (d >= '0' &&
    d <= '9') {\n                result += (long)Math.Pow(16, d);\n            }\n
    \       }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(HexKey((\"AB\")) == (1L));\n    Debug.Assert(HexKey((\"1077E\"))
    == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"2020\"))
    == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\")) == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\"))
    == (12L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f1e0cb649fd54704bc15bf37a7d84776>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f1e0cb649fd54704bc15bf37a7d84776>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976666
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    public
    static long HexKey(string num) {\n        long num2 = 0;\n        long num3 =
    0;\n        long num4 = 0;\n        long num5 = 0;\n        long num6 = 0;\n        long
    num7 = 0;\n        long num8 = 0;\n        long num9 = 0;\n        long num10
    = 0;\n        long num11 = 0;\n        long num12 = 0;\n        long num13 = 0;\n
    \       long num14 = 0;\n        long num15 = 0;\n        long num16 = 0;\n        long
    num17 = 0;\n        long num18 = 0;\n        long num19 = 0;\n        long num20
    = 0;\n        long num21 = 0;\n        long num22 = 0;\n        long num23 = 0;\n
    \       long num24 = 0;\n        long num25 = 0;\n        long num26 = 0;\n        long
    num27 = 0;\n        long num28 = 0;\n        long num29 = 0;\n        long num30
    = 0;\n        long num31 = 0;\n        long num32 = 0;\n        long num33 = 0;\n
    \       long num34 = 0;\n        long num35 = 0;\n        long num36 = 0;\n        long
    num37 = 0;\n        long num38 = 0;\n        long num39 = 0;\n        long num40
    = 0;\n        long num41 = 0;\n        long num42 = 0;\n        long num43 = 0;\n
    \       long num44 = 0;\n        long num45 = 0;\n        long num46 = 0;\n        long
    num47 = 0;\n        long num48 = 0;\n        long num49 = 0;\n        long num50
    = 0;\n        long num51 = 0;\n        long num52 = 0;\n        long num53 = 0;\n
    \       long num54 = 0;\n        long num55 = 0;\n        long num56 = 0;\n        long
    num57 = 0;\n        long num58 = 0;\n        long num59 = 0;\n        long num60
    = 0;\n        long num61 = 0;\n        long num62 = 0;\n        long num63 = 0;\n
    \       long num64 = 0;\n        long num65 = 0;\n        long num66 = 0;\n        long
    num67 = 0;\n        long num68 = 0;\n        long num69 = 0;\n        long num70
    = 0;\n        long num71 = 0;\n        long num72 = 0;\n        long num73 = 0;\n
    \       long num74 = 0;\n        long num75 = 0;\n        long num76 = 0;\n        long
    num77 = 0;\n        long num78 = 0;\n        long num79 = 0;\n        long num80
    = 0;\n        long num81 = 0;\n        long num82 = 0;\n        long num83 = 0;\n
    \       long num84 = 0;\n        long num85 = 0;\n        long num86 = 0;\n        long
    num87 = 0;\n\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HexKey((\"AB\"))
    == (1L));\n    Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\"))
    == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\"))
    == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\")) ==
    (12L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpajppcu5a.cs(21,14): warning CS0219: The variable ''num2'' is assigned
    but its value is never used

    /tmp/tmpajppcu5a.cs(22,14): warning CS0219: The variable ''num3'' is assigned
    but its value is never used

    /tmp/tmpajppcu5a.cs(23,14): warning CS0219: The variable ''num4'' is assigned
    but its value is never used

    /tmp/tmpajppcu5a.cs(24,14): warning CS0219: The variable ''num5'' is assigned
    but its value is never used

    /tmp/tmpajppcu5a.cs(25,14): warning CS0219: The variable ''num6'' is assigned
    but its value is never used

    /tmp/tmpajppcu5a.cs(26,14): warning CS0219: The variable ''num7'' is assigned
    but its value is never used

    /tmp/tmpajppcu5a.cs(27,14): warning CS0219: The variable ''num8'' is assigned
    but its value is never used

    /tmp/tmpajppcu5a.cs(28,14): warning CS0219: The variable ''num9'' is assigned
    but its value is never used

    /tmp/tmpajppcu5a.cs(29,14): warning CS0219: The variable ''num10'' is assigned
    but its value is never used

    /tmp/tmpajppcu5a.cs(30,14): warning CS0219: The variable ''num11'' is assigned
    but its value is never used

    /tmp/tmpajppcu5a.cs(31,14): warning CS0219: The variable ''num12'' is assigned
    but its value is never used

    /tmp/tmpajppcu5a.cs(32,14): warning CS0219: The variable ''num13'' is assigned
    but its value is never used

    /tmp/tmpajppcu5a.cs(33,14): warning CS0219: The variable ''num14'' is assigned
    but its value is never used

    /tmp/tmpajppcu5a.cs(34,14): warning CS0219: The variable ''num15'' is assigned
    but its value is never used

    /tmp/tmpajppcu5a.cs(35,14): warning CS0219: The variable ''num16'' is assigned
    but its value is never used

    /tmp/tmpajppcu5a.cs(36,14): warning CS0219: The variable ''num17'' is assigned
    but its value is never used

    /tmp/tmpajppcu5a.cs(37,14): warning CS0219: The variable ''num18'' is assigned
    but its value is never used

    /tmp/tmpajppcu5a.cs(38,14): warning CS0219: The variable ''num19'' is assigned
    but its value is never used

    /tmp/tmpajppcu5a.cs(39,14): warning CS0'
  timestamp: 1659976665
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    public
    static long HexKey(string num) {\n        long result = 0;\n        string hex
    = num.ToUpper();\n        foreach (char c in hex) {\n            int digit = c
    - 'A';\n            if (digit < 0 || digit > 9) {\n                throw new ArgumentOutOfRangeException(\"Hexadecimal
    digit must be between 0 and 9\");\n            }\n            result += (long)Math.Pow(16,
    digit);\n        }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(HexKey((\"AB\")) == (1L));\n    Debug.Assert(HexKey((\"1077E\"))
    == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"2020\"))
    == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\")) == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\"))
    == (12L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <cf4ffee9f337431487b674948d589a5b>:0
    \n\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Specified argument
    was out of the range of valid values.\nParameter name: Hexadecimal digit must
    be between 0 and 9\n  at Problem.HexKey (System.String num) [0x00038] in <cf4ffee9f337431487b674948d589a5b>:0
    \n  at Problem.Main (System.String[] args) [0x00015] in <cf4ffee9f337431487b674948d589a5b>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Specified
    argument was out of the range of valid values.\nParameter name: Hexadecimal digit
    must be between 0 and 9\n  at Problem.HexKey (System.String num) [0x00038] in
    <cf4ffee9f337431487b674948d589a5b>:0 \n  at Problem.Main (System.String[] args)
    [0x00015] in <cf4ffee9f337431487b674948d589a5b>:0 \n"
  stdout: ''
  timestamp: 1659976668
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    public
    static long HexKey(string num) {\n        long result = 0;\n        foreach (char
    c in num.ToUpper()) {\n            int d = (int)c;\n            if (d >= 'A' &&
    d <= 'F') {\n                d -= 'A' - 10;\n            }\n            if (d
    >= '0' && d <= '9') {\n                d -= '0';\n            }\n            result
    += d;\n        }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(HexKey((\"AB\")) == (1L));\n    Debug.Assert(HexKey((\"1077E\"))
    == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"2020\"))
    == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\")) == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\"))
    == (12L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <1a0d8be535f14b1cb3afb2117797178a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <1a0d8be535f14b1cb3afb2117797178a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976668
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    public
    static long HexKey(string num) {\n        long num2 = 0;\n        long num3 =
    0;\n        long num4 = 0;\n        long num5 = 0;\n        long num6 = 0;\n        long
    num7 = 0;\n        long num8 = 0;\n        long num9 = 0;\n        long num10
    = 0;\n        long num11 = 0;\n        long num12 = 0;\n        long num13 = 0;\n
    \       long num14 = 0;\n        long num15 = 0;\n        long num16 = 0;\n        long
    num17 = 0;\n        long num18 = 0;\n        long num19 = 0;\n        long num20
    = 0;\n        long num21 = 0;\n        long num22 = 0;\n        long num23 = 0;\n
    \       long num24 = 0;\n        long num25 = 0;\n        long num26 = 0;\n        long
    num27 = 0;\n        long num28 = 0;\n        long num29 = 0;\n        long num30
    = 0;\n        long num31 = 0;\n        long num32 = 0;\n        long num33 = 0;\n
    \       long num34 = 0;\n        long num35 = 0;\n        long num36 = 0;\n        long
    num37 = 0;\n        long num38 = 0;\n        long num39 = 0;\n        long num40
    = 0;\n        long num41 = 0;\n        long num42 = 0;\n        long num43 = 0;\n
    \       long num44 = 0;\n        long num45 = 0;\n        long num46 = 0;\n        long
    num47 = 0;\n        long num48 = 0;\n        long num49 = 0;\n        long num50
    = 0;\n        long num51 = 0;\n        long num52 = 0;\n        long num53 = 0;\n
    \       long num54 = 0;\n        long num55 = 0;\n        long num56 = 0;\n        long
    num57 = 0;\n        long num58 = 0;\n        long num59 = 0;\n        long num60
    = 0;\n        long num61 = 0;\n        long num62 = 0;\n        long num63 = 0;\n
    \       long num64 = 0;\n        long num65 = 0;\n        long num66 = 0;\n        long
    num67 = 0;\n        long num68 = 0;\n        long num69 = 0;\n        long num70
    = 0;\n        long num71 = 0;\n        long num72 = 0;\n        long num73 = 0;\n
    \       long num74 = 0;\n        long num75 = 0;\n        long num76 = 0;\n        long
    num77 = 0;\n        long num78 = 0;\n        long num79 = 0;\n        long num80
    = 0;\n        long num81 = 0;\n        long num82 = 0;\n        long num83 = 0;\n
    \       long num84 = 0;\n        long num85 = 0;\n        long num86 = 0;\n        long
    num87 = 0;\n\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HexKey((\"AB\"))
    == (1L));\n    Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\"))
    == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\"))
    == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\")) ==
    (12L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpajppcu5a.cs(21,14): warning CS0219: The variable ''num2'' is assigned
    but its value is never used

    /tmp/tmpajppcu5a.cs(22,14): warning CS0219: The variable ''num3'' is assigned
    but its value is never used

    /tmp/tmpajppcu5a.cs(23,14): warning CS0219: The variable ''num4'' is assigned
    but its value is never used

    /tmp/tmpajppcu5a.cs(24,14): warning CS0219: The variable ''num5'' is assigned
    but its value is never used

    /tmp/tmpajppcu5a.cs(25,14): warning CS0219: The variable ''num6'' is assigned
    but its value is never used

    /tmp/tmpajppcu5a.cs(26,14): warning CS0219: The variable ''num7'' is assigned
    but its value is never used

    /tmp/tmpajppcu5a.cs(27,14): warning CS0219: The variable ''num8'' is assigned
    but its value is never used

    /tmp/tmpajppcu5a.cs(28,14): warning CS0219: The variable ''num9'' is assigned
    but its value is never used

    /tmp/tmpajppcu5a.cs(29,14): warning CS0219: The variable ''num10'' is assigned
    but its value is never used

    /tmp/tmpajppcu5a.cs(30,14): warning CS0219: The variable ''num11'' is assigned
    but its value is never used

    /tmp/tmpajppcu5a.cs(31,14): warning CS0219: The variable ''num12'' is assigned
    but its value is never used

    /tmp/tmpajppcu5a.cs(32,14): warning CS0219: The variable ''num13'' is assigned
    but its value is never used

    /tmp/tmpajppcu5a.cs(33,14): warning CS0219: The variable ''num14'' is assigned
    but its value is never used

    /tmp/tmpajppcu5a.cs(34,14): warning CS0219: The variable ''num15'' is assigned
    but its value is never used

    /tmp/tmpajppcu5a.cs(35,14): warning CS0219: The variable ''num16'' is assigned
    but its value is never used

    /tmp/tmpajppcu5a.cs(36,14): warning CS0219: The variable ''num17'' is assigned
    but its value is never used

    /tmp/tmpajppcu5a.cs(37,14): warning CS0219: The variable ''num18'' is assigned
    but its value is never used

    /tmp/tmpajppcu5a.cs(38,14): warning CS0219: The variable ''num19'' is assigned
    but its value is never used

    /tmp/tmpajppcu5a.cs(39,14): warning CS0'
  timestamp: 1659976665
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    public
    static long HexKey(string num) {\n        long ret = 0;\n        foreach (char
    c in num) {\n            int d = (int)c;\n            if (d >= '0' && d <= '9')
    {\n                ret += d * 0x30;\n            } else if (d >= 'A' && d <= 'F')
    {\n                ret += 0x3A + (d - 'A');\n            } else {\n                throw
    new Exception(\"Invalid hexadecimal digit: \" + d);\n            }\n        }\n
    \       return ret;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HexKey((\"AB\"))
    == (1L));\n    Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\"))
    == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\"))
    == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\")) ==
    (12L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <34dd7adc335f4d87a4441830d3789423>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <34dd7adc335f4d87a4441830d3789423>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976668
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    public
    static long HexKey(string num) {\n        long result = 0;\n        long hexDigit
    = 0;\n        long hexDigit2 = 0;\n        long hexDigit3 = 0;\n        long hexDigit4
    = 0;\n        long hexDigit5 = 0;\n        long hexDigit6 = 0;\n        long hexDigit7
    = 0;\n        long hexDigit8 = 0;\n        long hexDigit9 = 0;\n        long hexDigit10
    = 0;\n        long hexDigit11 = 0;\n        long hexDigit12 = 0;\n        long
    hexDigit13 = 0;\n        long hexDigit14 = 0;\n        long hexDigit15 = 0;\n
    \       long hexDigit16 = 0;\n        long hexDigit17 = 0;\n        long hexDigit18
    = 0;\n        long hexDigit19 = 0;\n        long hexDigit20 = 0;\n        long
    hexDigit21 = 0;\n        long hexDigit22 = 0;\n        long hexDigit23 = 0;\n
    \       long hexDigit24 = 0;\n        long hexDigit25 = 0;\n        long hexDigit26
    = 0;\n        long hexDigit27 = 0;\n        long hexDigit28 = 0;\n        long
    hexDigit29 = 0;\n        long hexDigit30 = 0;\n        long hexDigit31 = 0;\n
    \       long hexDigit32 = 0;\n        long hexDigit33 = 0;\n        long hexDigit34
    = 0;\n        long hexDigit35 = 0;\n        long hexDigit36 = 0;\n        long
    hexDigit37 = 0;\n        long hexDigit38 = 0;\n        long hexDigit39 = 0;\n
    \       long hexDigit40 = 0;\n        long hexDigit41 = 0;\n        long hexDigit42
    = 0;\n        long hexDigit43 = 0;\n        long hexDigit44 = 0;\n        long
    hexDigit45 = 0;\n        long hexDigit46 = 0;\n        long hexDigit47 = 0;\n
    \       long hexDigit48 = 0;\n        long hexDigit49 = 0;\n        long hexDigit50
    = 0;\n        long hexDigit51 = 0;\n        long hexDigit52 = 0;\n        long
    hexDigit53 = 0;\n        long hexDigit54 = 0;\n        long hexDigit55 = 0;\n
    \       long hexDigit56 = 0;\n        long hexDigit57 = 0;\n        long hexDigit58
    = 0;\n        long hexDigit59 = 0;\n        long hexDigit60 = 0;\n        long
    hexDigit61 = 0;\n        long hexDigit62 = 0;\n        long hexDigit63 = 0;\n
    \       long hexDigit64 = 0;\n        long hexDigit65 = 0;\n        long hexDigit66
    = 0;\n        long hexDigit67 = 0;\n        long hexDigit68 = 0;\n        long
    hexDigit69 = 0;\n        long hexDigit70 = 0;\n        long hexDigit71 = 0;\n
    \       long hexDigit72 = 0;\n        long hexDigit73 = 0;\n        \n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(HexKey((\"AB\"))
    == (1L));\n    Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\"))
    == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\"))
    == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\")) ==
    (12L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpwcq3moq8.cs(21,14): warning CS0219: The variable ''result'' is assigned
    but its value is never used

    /tmp/tmpwcq3moq8.cs(22,14): warning CS0219: The variable ''hexDigit'' is assigned
    but its value is never used

    /tmp/tmpwcq3moq8.cs(23,14): warning CS0219: The variable ''hexDigit2'' is assigned
    but its value is never used

    /tmp/tmpwcq3moq8.cs(24,14): warning CS0219: The variable ''hexDigit3'' is assigned
    but its value is never used

    /tmp/tmpwcq3moq8.cs(25,14): warning CS0219: The variable ''hexDigit4'' is assigned
    but its value is never used

    /tmp/tmpwcq3moq8.cs(26,14): warning CS0219: The variable ''hexDigit5'' is assigned
    but its value is never used

    /tmp/tmpwcq3moq8.cs(27,14): warning CS0219: The variable ''hexDigit6'' is assigned
    but its value is never used

    /tmp/tmpwcq3moq8.cs(28,14): warning CS0219: The variable ''hexDigit7'' is assigned
    but its value is never used

    /tmp/tmpwcq3moq8.cs(29,14): warning CS0219: The variable ''hexDigit8'' is assigned
    but its value is never used

    /tmp/tmpwcq3moq8.cs(30,14): warning CS0219: The variable ''hexDigit9'' is assigned
    but its value is never used

    /tmp/tmpwcq3moq8.cs(31,14): warning CS0219: The variable ''hexDigit10'' is assigned
    but its value is never used

    /tmp/tmpwcq3moq8.cs(32,14): warning CS0219: The variable ''hexDigit11'' is assigned
    but its value is never used

    /tmp/tmpwcq3moq8.cs(33,14): warning CS0219: The variable ''hexDigit12'' is assigned
    but its value is never used

    /tmp/tmpwcq3moq8.cs(34,14): warning CS0219: The variable ''hexDigit13'' is assigned
    but its value is never used

    /tmp/tmpwcq3moq8.cs(35,14): warning CS0219: The variable ''hexDigit14'' is assigned
    but its value is never used

    /tmp/tmpwcq3moq8.cs(36,14): warning CS0219: The variable ''hexDigit15'' is assigned
    but its value is never used

    /tmp/tmpwcq3moq8.cs(37,14): warning CS0219: The variable ''hexDigit16'' is assigned
    but its value is never used

    /tmp/tmpwcq3moq8.cs(38,14): warning CS0219: The variable ''hexDigi'
  timestamp: 1659976668
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    public
    static long HexKey(string num) {\n        long num2 = 0;\n        long num3 =
    0;\n        long num4 = 0;\n        long num5 = 0;\n        long num6 = 0;\n        long
    num7 = 0;\n        long num8 = 0;\n        long num9 = 0;\n        long num10
    = 0;\n        long num11 = 0;\n        long num12 = 0;\n        long num13 = 0;\n
    \       long num14 = 0;\n        long num15 = 0;\n        long num16 = 0;\n        long
    num17 = 0;\n        long num18 = 0;\n        long num19 = 0;\n        long num20
    = 0;\n        long num21 = 0;\n        long num22 = 0;\n        long num23 = 0;\n
    \       long num24 = 0;\n        long num25 = 0;\n        long num26 = 0;\n        long
    num27 = 0;\n        long num28 = 0;\n        long num29 = 0;\n        long num30
    = 0;\n        long num31 = 0;\n        long num32 = 0;\n        long num33 = 0;\n
    \       long num34 = 0;\n        long num35 = 0;\n        long num36 = 0;\n        long
    num37 = 0;\n        long num38 = 0;\n        long num39 = 0;\n        long num40
    = 0;\n        long num41 = 0;\n        long num42 = 0;\n        long num43 = 0;\n
    \       long num44 = 0;\n        long num45 = 0;\n        long num46 = 0;\n        long
    num47 = 0;\n        long num48 = 0;\n        long num49 = 0;\n        long num50
    = 0;\n        long num51 = 0;\n        long num52 = 0;\n        long num53 = 0;\n
    \       long num54 = 0;\n        long num55 = 0;\n        long num56 = 0;\n        long
    num57 = 0;\n        long num58 = 0;\n        long num59 = 0;\n        long num60
    = 0;\n        long num61 = 0;\n        long num62 = 0;\n        long num63 = 0;\n
    \       long num64 = 0;\n        long num65 = 0;\n        long num66 = 0;\n        long
    num67 = 0;\n        long num68 = 0;\n        long num69 = 0;\n        long num70
    = 0;\n        long num71 = 0;\n        long num72 = 0;\n        long num73 = 0;\n
    \       long num74 = 0;\n        long num75 = 0;\n        long num76 = 0;\n        long
    num77 = 0;\n        long num78 = 0;\n        long num79 = 0;\n        long num80
    = 0;\n        long num81 = 0;\n        long num82 = 0;\n        long num83 = 0;\n
    \       long num84 = 0;\n        long num85 = 0;\n        long num86 = 0;\n        long
    num87 = 0;\n\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HexKey((\"AB\"))
    == (1L));\n    Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\"))
    == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\"))
    == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\")) ==
    (12L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpajppcu5a.cs(21,14): warning CS0219: The variable ''num2'' is assigned
    but its value is never used

    /tmp/tmpajppcu5a.cs(22,14): warning CS0219: The variable ''num3'' is assigned
    but its value is never used

    /tmp/tmpajppcu5a.cs(23,14): warning CS0219: The variable ''num4'' is assigned
    but its value is never used

    /tmp/tmpajppcu5a.cs(24,14): warning CS0219: The variable ''num5'' is assigned
    but its value is never used

    /tmp/tmpajppcu5a.cs(25,14): warning CS0219: The variable ''num6'' is assigned
    but its value is never used

    /tmp/tmpajppcu5a.cs(26,14): warning CS0219: The variable ''num7'' is assigned
    but its value is never used

    /tmp/tmpajppcu5a.cs(27,14): warning CS0219: The variable ''num8'' is assigned
    but its value is never used

    /tmp/tmpajppcu5a.cs(28,14): warning CS0219: The variable ''num9'' is assigned
    but its value is never used

    /tmp/tmpajppcu5a.cs(29,14): warning CS0219: The variable ''num10'' is assigned
    but its value is never used

    /tmp/tmpajppcu5a.cs(30,14): warning CS0219: The variable ''num11'' is assigned
    but its value is never used

    /tmp/tmpajppcu5a.cs(31,14): warning CS0219: The variable ''num12'' is assigned
    but its value is never used

    /tmp/tmpajppcu5a.cs(32,14): warning CS0219: The variable ''num13'' is assigned
    but its value is never used

    /tmp/tmpajppcu5a.cs(33,14): warning CS0219: The variable ''num14'' is assigned
    but its value is never used

    /tmp/tmpajppcu5a.cs(34,14): warning CS0219: The variable ''num15'' is assigned
    but its value is never used

    /tmp/tmpajppcu5a.cs(35,14): warning CS0219: The variable ''num16'' is assigned
    but its value is never used

    /tmp/tmpajppcu5a.cs(36,14): warning CS0219: The variable ''num17'' is assigned
    but its value is never used

    /tmp/tmpajppcu5a.cs(37,14): warning CS0219: The variable ''num18'' is assigned
    but its value is never used

    /tmp/tmpajppcu5a.cs(38,14): warning CS0219: The variable ''num19'' is assigned
    but its value is never used

    /tmp/tmpajppcu5a.cs(39,14): warning CS0'
  timestamp: 1659976665
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    public
    static long HexKey(string num) {\n        long result = 0;\n        long digit
    = 0;\n        bool isPrime = true;\n        foreach (char c in num) {\n            digit
    = Convert.ToInt64(c);\n            if (isPrime) {\n                isPrime = IsPrime(digit);\n
    \           }\n            if (isPrime) {\n                result += digit;\n
    \           }\n        }\n        return result;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(HexKey((\"AB\")) == (1L));\n    Debug.Assert(HexKey((\"1077E\"))
    == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"2020\"))
    == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\")) == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\"))
    == (12L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpy4d515mo.cs(27,27): error CS0103: The name ''IsPrime'' does not exist
    in the current context

    '
  timestamp: 1659976668
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    public
    static long HexKey(string num) {\n        long result = 0;\n        long digit
    = 0;\n        long prime = 2;\n        bool isPrime = true;\n        foreach (char
    c in num) {\n            digit = Convert.ToInt64(c);\n            if (digit ==
    0) {\n                return result;\n            }\n            isPrime = IsPrime(digit);\n
    \           if (isPrime) {\n                result += digit;\n            }\n
    \       }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(HexKey((\"AB\")) == (1L));\n    Debug.Assert(HexKey((\"1077E\"))
    == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"2020\"))
    == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\")) == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\"))
    == (12L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpv7v58p7f.cs(30,23): error CS0103: The name ''IsPrime'' does not exist
    in the current context

    /tmp/tmpv7v58p7f.cs(23,14): warning CS0219: The variable ''prime'' is assigned
    but its value is never used

    '
  timestamp: 1659976668
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    public
    static long HexKey(string num) {\n        long result = 0;\n        string hex
    = num.ToUpper();\n        foreach (char c in hex) {\n            int digit = c
    - '0';\n            if (digit >= 2 && digit <= 9) {\n                result +=
    (digit * digit);\n            }\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(HexKey((\"AB\")) == (1L));\n
    \   Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\"))
    == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\"))
    == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\")) ==
    (12L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <99e91d692ff848e3a3b75d11a0a059d0>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <99e91d692ff848e3a3b75d11a0a059d0>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976669
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    public
    static long HexKey(string num) {\n        long ret = 0;\n        foreach (char
    c in num) {\n            int d = (int)c;\n            if (d >= '0' && d <= '9')
    {\n                ret += (long)Math.Pow(16, (int)c - '0');\n            }\n        }\n
    \       return ret;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HexKey((\"AB\"))
    == (1L));\n    Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\"))
    == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\"))
    == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\")) ==
    (12L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a218741b504948df960b818d76c606dc>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a218741b504948df960b818d76c606dc>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976669
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    public
    static long HexKey(string num) {\n        long result = 0;\n        foreach (char
    c in num.ToUpper()) {\n            int digit = c - 'A';\n            if (digit
    < 0 || digit > 9) {\n                throw new ArgumentException(\"Invalid hexadecimal
    digit: \" + c);\n            }\n            result += (long)Math.Pow(16, digit);\n
    \       }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(HexKey((\"AB\")) == (1L));\n    Debug.Assert(HexKey((\"1077E\"))
    == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"2020\"))
    == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\")) == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\"))
    == (12L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f17c2333e3e244159f47ab316b450765>:0
    \n\nUnhandled Exception:\nSystem.ArgumentException: Invalid hexadecimal digit:
    1\n  at Problem.HexKey (System.String num) [0x00045] in <f17c2333e3e244159f47ab316b450765>:0
    \n  at Problem.Main (System.String[] args) [0x00015] in <f17c2333e3e244159f47ab316b450765>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentException: Invalid hexadecimal
    digit: 1\n  at Problem.HexKey (System.String num) [0x00045] in <f17c2333e3e244159f47ab316b450765>:0
    \n  at Problem.Main (System.String[] args) [0x00015] in <f17c2333e3e244159f47ab316b450765>:0
    \n"
  stdout: ''
  timestamp: 1659976667
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    public
    static long HexKey(string num) {\n        long result = 0;\n        foreach (char
    c in num) {\n            if (c >= '0' && c <= '9') {\n                result +=
    (c - '0') * (long)Math.Pow(16, num.Length - 1);\n            }\n            else
    if (c >= 'A' && c <= 'F') {\n                result += (c - 'A') * (long)Math.Pow(16,
    num.Length - 1);\n            }\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(HexKey((\"AB\")) == (1L));\n
    \   Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\"))
    == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\"))
    == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\")) ==
    (12L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <457b879a79234a85ae6cda65d13e927c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <457b879a79234a85ae6cda65d13e927c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976669
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    public
    static long HexKey(string num) {\n        long result = 0;\n        foreach (char
    c in num) {\n            int digit = c - '0';\n            if (digit < 0 || digit
    > 9) {\n                throw new ArgumentOutOfRangeException(\"num\");\n            }\n
    \           result *= 16;\n            result += digit;\n        }\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HexKey((\"AB\"))
    == (1L));\n    Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\"))
    == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\"))
    == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\")) ==
    (12L));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Specified argument
    was out of the range of valid values.\nParameter name: num\n  at Problem.HexKey
    (System.String num) [0x0002f] in <df4978dc0bd94550bf932796903b4321>:0 \n  at Problem.Main
    (System.String[] args) [0x00001] in <df4978dc0bd94550bf932796903b4321>:0 \n[ERROR]
    FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Specified argument
    was out of the range of valid values.\nParameter name: num\n  at Problem.HexKey
    (System.String num) [0x0002f] in <df4978dc0bd94550bf932796903b4321>:0 \n  at Problem.Main
    (System.String[] args) [0x00001] in <df4978dc0bd94550bf932796903b4321>:0 \n"
  stdout: ''
  timestamp: 1659976668
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    public
    static long HexKey(string num) {\n        long ret = 0;\n        foreach (char
    c in num) {\n            int val = (int)c;\n            if (val < '0' || val >
    '9') {\n                throw new Exception(\"Invalid hexadecimal digit\");\n
    \           }\n            int digit = val - '0';\n            int prime = digit
    % 2 == 0 ? 2 : 3;\n            int a = prime * prime;\n            int b = prime
    * prime + 1;\n            int c = prime * prime + 2;\n            int d = prime
    * prime + 3;\n            int e = prime * prime + 4;\n            int f = prime
    * prime + 5;\n            int g = prime * prime + 6;\n            int h = prime
    * prime + 7;\n            int i = prime * prime + 8;\n            int j = prime
    * prime + 9;\n            int k = prime * prime + 10;\n            int l = prime
    * prime + 11;\n            int m = prime * prime + 12;\n            int n = prime
    * prime + 13;\n            int o = prime * prime + 14;\n            int p = prime
    * prime + 15;\n            int q = prime * prime + 16;\n            int r = prime
    * prime + 17;\n            int s = prime * prime + 18;\n            int t = prime
    * prime + 19;\n            int u = prime * prime + 20;\n            int v = prime
    * prime + 21;\n            int w = prime * prime + 22;\n            int x = prime
    * prime + 23;\n            int y = prime * prime + 24;\n            int z = prime
    * prime + 25;\n            int A = prime * prime + 26;\n            int B = prime
    * prime + 27;\n            int C = prime * prime + 28;\n            int D = prime
    * prime + 29;\n            int E = prime * prime + 30;\n            int F = prime
    * prime + 31;\n            int G = prime * prime + 32;\n            int H = prime
    * prime + 33;\n            int I = prime * prime + 34;\n            int J = prime
    * prime + 35;\n            int K = prime * prime + 36;\n            int L = prime
    * prime + 37;\n            int M = prime * prime + 38;\n            int N = prime
    * prime + 39;\n            int O = prime * prime + 40;\n            int P = prime
    * prime + 41;\n            int Q = prime * prime + 42;\n            int R = prime
    * prime + 43;\n            int S = prime * prime + 44;\n            int T = prime
    * prime + 45;\n            int \n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(HexKey((\"AB\")) == (1L));\n    Debug.Assert(HexKey((\"1077E\"))
    == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"2020\"))
    == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\")) == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\"))
    == (12L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpb_9wu_ye.cs(75,16): error CS1001: Identifier expected

    /tmp/tmpb_9wu_ye.cs(75,16): error CS1002: ; expected

    /tmp/tmpb_9wu_ye.cs(77,5): error CS0106: The modifier ''public'' is not valid
    for this item

    /tmp/tmpb_9wu_ye.cs(86,2): error CS1513: } expected

    '
  timestamp: 1659976668
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    public
    static long HexKey(string num) {\n        long result = 0;\n        foreach (char
    c in num) {\n            int digit = c - 'A';\n            if (digit < 0 || digit
    > 9) {\n                throw new ArgumentOutOfRangeException(\"Hexadecimal digit
    must be between 0 and 9\");\n            }\n            result *= 16;\n            result
    += digit;\n        }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(HexKey((\"AB\")) == (1L));\n    Debug.Assert(HexKey((\"1077E\"))
    == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"2020\"))
    == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\")) == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\"))
    == (12L));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Specified argument
    was out of the range of valid values.\nParameter name: Hexadecimal digit must
    be between 0 and 9\n  at Problem.HexKey (System.String num) [0x0002f] in <43a98fd664ea4e5aa380df229e876f83>:0
    \n  at Problem.Main (System.String[] args) [0x00015] in <43a98fd664ea4e5aa380df229e876f83>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Specified
    argument was out of the range of valid values.\nParameter name: Hexadecimal digit
    must be between 0 and 9\n  at Problem.HexKey (System.String num) [0x0002f] in
    <43a98fd664ea4e5aa380df229e876f83>:0 \n  at Problem.Main (System.String[] args)
    [0x00015] in <43a98fd664ea4e5aa380df229e876f83>:0 \n"
  stdout: ''
  timestamp: 1659976665
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    public
    static long HexKey(string num) {\n        long result = 0;\n        foreach (char
    c in num.ToUpper()) {\n            int digit = c - 'A';\n            if (digit
    < 0 || digit > 9) {\n                throw new ArgumentException(\"Invalid hexadecimal
    digit.\");\n            }\n            result += (digit << 4) + digit;\n        }\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(HexKey((\"AB\")) == (1L));\n    Debug.Assert(HexKey((\"1077E\"))
    == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"2020\"))
    == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\")) == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\"))
    == (12L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c25f468cdf0344e9a73ad0b155077885>:0
    \n\nUnhandled Exception:\nSystem.ArgumentException: Invalid hexadecimal digit.\n
    \ at Problem.HexKey (System.String num) [0x00034] in <c25f468cdf0344e9a73ad0b155077885>:0
    \n  at Problem.Main (System.String[] args) [0x00015] in <c25f468cdf0344e9a73ad0b155077885>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentException: Invalid hexadecimal
    digit.\n  at Problem.HexKey (System.String num) [0x00034] in <c25f468cdf0344e9a73ad0b155077885>:0
    \n  at Problem.Main (System.String[] args) [0x00015] in <c25f468cdf0344e9a73ad0b155077885>:0
    \n"
  stdout: ''
  timestamp: 1659976669
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    public
    static long HexKey(string num) {\n        long num2 = 0;\n        long num3 =
    0;\n        long num4 = 0;\n        long num5 = 0;\n        long num6 = 0;\n        long
    num7 = 0;\n        long num8 = 0;\n        long num9 = 0;\n        long num10
    = 0;\n        long num11 = 0;\n        long num12 = 0;\n        long num13 = 0;\n
    \       long num14 = 0;\n        long num15 = 0;\n        long num16 = 0;\n        long
    num17 = 0;\n        long num18 = 0;\n        long num19 = 0;\n        long num20
    = 0;\n        long num21 = 0;\n        long num22 = 0;\n        long num23 = 0;\n
    \       long num24 = 0;\n        long num25 = 0;\n        long num26 = 0;\n        long
    num27 = 0;\n        long num28 = 0;\n        long num29 = 0;\n        long num30
    = 0;\n        long num31 = 0;\n        long num32 = 0;\n        long num33 = 0;\n
    \       long num34 = 0;\n        long num35 = 0;\n        long num36 = 0;\n        long
    num37 = 0;\n        long num38 = 0;\n        long num39 = 0;\n        long num40
    = 0;\n        long num41 = 0;\n        long num42 = 0;\n        long num43 = 0;\n
    \       long num44 = 0;\n        long num45 = 0;\n        long num46 = 0;\n        long
    num47 = 0;\n        long num48 = 0;\n        long num49 = 0;\n        long num50
    = 0;\n        long num51 = 0;\n        long num52 = 0;\n        long num53 = 0;\n
    \       long num54 = 0;\n        long num55 = 0;\n        long num56 = 0;\n        long
    num57 = 0;\n        long num58 = 0;\n        long num59 = 0;\n        long num60
    = 0;\n        long num61 = 0;\n        long num62 = 0;\n        long num63 = 0;\n
    \       long num64 = 0;\n        long num65 = 0;\n        long num66 = 0;\n        long
    num67 = 0;\n        long num68 = 0;\n        long num69 = 0;\n        long num70
    = 0;\n        long num71 = 0;\n        long num72 = 0;\n        long num73 = 0;\n
    \       long num74 = 0;\n        long num75 = 0;\n        long num76 = 0;\n        long
    num77 = 0;\n        long num78 = 0;\n        long num79 = 0;\n        long num80
    = 0;\n        long num81 = 0;\n        long num82 = 0;\n        long num83 = 0;\n
    \       long num84 = 0;\n        long num85 = 0;\n        long num86 = 0;\n        long
    num87 = 0;\n\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HexKey((\"AB\"))
    == (1L));\n    Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\"))
    == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\"))
    == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\")) ==
    (12L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpajppcu5a.cs(21,14): warning CS0219: The variable ''num2'' is assigned
    but its value is never used

    /tmp/tmpajppcu5a.cs(22,14): warning CS0219: The variable ''num3'' is assigned
    but its value is never used

    /tmp/tmpajppcu5a.cs(23,14): warning CS0219: The variable ''num4'' is assigned
    but its value is never used

    /tmp/tmpajppcu5a.cs(24,14): warning CS0219: The variable ''num5'' is assigned
    but its value is never used

    /tmp/tmpajppcu5a.cs(25,14): warning CS0219: The variable ''num6'' is assigned
    but its value is never used

    /tmp/tmpajppcu5a.cs(26,14): warning CS0219: The variable ''num7'' is assigned
    but its value is never used

    /tmp/tmpajppcu5a.cs(27,14): warning CS0219: The variable ''num8'' is assigned
    but its value is never used

    /tmp/tmpajppcu5a.cs(28,14): warning CS0219: The variable ''num9'' is assigned
    but its value is never used

    /tmp/tmpajppcu5a.cs(29,14): warning CS0219: The variable ''num10'' is assigned
    but its value is never used

    /tmp/tmpajppcu5a.cs(30,14): warning CS0219: The variable ''num11'' is assigned
    but its value is never used

    /tmp/tmpajppcu5a.cs(31,14): warning CS0219: The variable ''num12'' is assigned
    but its value is never used

    /tmp/tmpajppcu5a.cs(32,14): warning CS0219: The variable ''num13'' is assigned
    but its value is never used

    /tmp/tmpajppcu5a.cs(33,14): warning CS0219: The variable ''num14'' is assigned
    but its value is never used

    /tmp/tmpajppcu5a.cs(34,14): warning CS0219: The variable ''num15'' is assigned
    but its value is never used

    /tmp/tmpajppcu5a.cs(35,14): warning CS0219: The variable ''num16'' is assigned
    but its value is never used

    /tmp/tmpajppcu5a.cs(36,14): warning CS0219: The variable ''num17'' is assigned
    but its value is never used

    /tmp/tmpajppcu5a.cs(37,14): warning CS0219: The variable ''num18'' is assigned
    but its value is never used

    /tmp/tmpajppcu5a.cs(38,14): warning CS0219: The variable ''num19'' is assigned
    but its value is never used

    /tmp/tmpajppcu5a.cs(39,14): warning CS0'
  timestamp: 1659976665
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    public
    static long HexKey(string num) {\n        long result = 0;\n        foreach (char
    c in num) {\n            int digit = c - '0';\n            if (digit < 0 || digit
    > 9) {\n                throw new ArgumentOutOfRangeException(\"num\", \"Hexadecimal
    number must be between 0-9\");\n            }\n            result += (digit *
    digit);\n        }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(HexKey((\"AB\")) == (1L));\n    Debug.Assert(HexKey((\"1077E\"))
    == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"2020\"))
    == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\")) == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\"))
    == (12L));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Hexadecimal
    number must be between 0-9\nParameter name: num\n  at Problem.HexKey (System.String
    num) [0x0002f] in <d2df540f34104a8dabbb6fb3832aca20>:0 \n  at Problem.Main (System.String[]
    args) [0x00001] in <d2df540f34104a8dabbb6fb3832aca20>:0 \n[ERROR] FATAL UNHANDLED
    EXCEPTION: System.ArgumentOutOfRangeException: Hexadecimal number must be between
    0-9\nParameter name: num\n  at Problem.HexKey (System.String num) [0x0002f] in
    <d2df540f34104a8dabbb6fb3832aca20>:0 \n  at Problem.Main (System.String[] args)
    [0x00001] in <d2df540f34104a8dabbb6fb3832aca20>:0 \n"
  stdout: ''
  timestamp: 1659976669
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    public
    static long HexKey(string num) {\n        long result = 0;\n        long hexDigit
    = 0;\n        long hexDigit2 = 0;\n        long hexDigit3 = 0;\n        long hexDigit4
    = 0;\n        long hexDigit5 = 0;\n        long hexDigit6 = 0;\n        long hexDigit7
    = 0;\n        long hexDigit8 = 0;\n        long hexDigit9 = 0;\n        long hexDigit10
    = 0;\n        long hexDigit11 = 0;\n        long hexDigit12 = 0;\n        long
    hexDigit13 = 0;\n        long hexDigit14 = 0;\n        long hexDigit15 = 0;\n
    \       long hexDigit16 = 0;\n        long hexDigit17 = 0;\n        long hexDigit18
    = 0;\n        long hexDigit19 = 0;\n        long hexDigit20 = 0;\n        long
    hexDigit21 = 0;\n        long hexDigit22 = 0;\n        long hexDigit23 = 0;\n
    \       long hexDigit24 = 0;\n        long hexDigit25 = 0;\n        long hexDigit26
    = 0;\n        long hexDigit27 = 0;\n        long hexDigit28 = 0;\n        long
    hexDigit29 = 0;\n        long hexDigit30 = 0;\n        long hexDigit31 = 0;\n
    \       long hexDigit32 = 0;\n        long hexDigit33 = 0;\n        long hexDigit34
    = 0;\n        long hexDigit35 = 0;\n        long hexDigit36 = 0;\n        long
    hexDigit37 = 0;\n        long hexDigit38 = 0;\n        long hexDigit39 = 0;\n
    \       long hexDigit40 = 0;\n        long hexDigit41 = 0;\n        long hexDigit42
    = 0;\n        long hexDigit43 = 0;\n        long hexDigit44 = 0;\n        long
    hexDigit45 = 0;\n        long hexDigit46 = 0;\n        long hexDigit47 = 0;\n
    \       long hexDigit48 = 0;\n        long hexDigit49 = 0;\n        long hexDigit50
    = 0;\n        long hexDigit51 = 0;\n        long hexDigit52 = 0;\n        long
    hexDigit53 = 0;\n        long hexDigit54 = 0;\n        long hexDigit55 = 0;\n
    \       long hexDigit56 = 0;\n        long hexDigit57 = 0;\n        long hexDigit58
    = 0;\n        long hexDigit59 = 0;\n        long hexDigit60 = 0;\n        long
    hexDigit61 = 0;\n        long hexDigit62 = 0;\n        long hexDigit63 = 0;\n
    \       long hexDigit64 = 0;\n        long hexDigit65 = 0;\n        long hexDigit66
    = 0;\n        long hexDigit67 = 0;\n        long hexDigit68 = 0;\n        long
    hexDigit69 = 0;\n        long hexDigit70 = 0;\n        long hexDigit71 = 0;\n
    \       long hexDigit72 = 0;\n        long hexDigit73 = 0;\n        \n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(HexKey((\"AB\"))
    == (1L));\n    Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\"))
    == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\"))
    == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\")) ==
    (12L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpwcq3moq8.cs(21,14): warning CS0219: The variable ''result'' is assigned
    but its value is never used

    /tmp/tmpwcq3moq8.cs(22,14): warning CS0219: The variable ''hexDigit'' is assigned
    but its value is never used

    /tmp/tmpwcq3moq8.cs(23,14): warning CS0219: The variable ''hexDigit2'' is assigned
    but its value is never used

    /tmp/tmpwcq3moq8.cs(24,14): warning CS0219: The variable ''hexDigit3'' is assigned
    but its value is never used

    /tmp/tmpwcq3moq8.cs(25,14): warning CS0219: The variable ''hexDigit4'' is assigned
    but its value is never used

    /tmp/tmpwcq3moq8.cs(26,14): warning CS0219: The variable ''hexDigit5'' is assigned
    but its value is never used

    /tmp/tmpwcq3moq8.cs(27,14): warning CS0219: The variable ''hexDigit6'' is assigned
    but its value is never used

    /tmp/tmpwcq3moq8.cs(28,14): warning CS0219: The variable ''hexDigit7'' is assigned
    but its value is never used

    /tmp/tmpwcq3moq8.cs(29,14): warning CS0219: The variable ''hexDigit8'' is assigned
    but its value is never used

    /tmp/tmpwcq3moq8.cs(30,14): warning CS0219: The variable ''hexDigit9'' is assigned
    but its value is never used

    /tmp/tmpwcq3moq8.cs(31,14): warning CS0219: The variable ''hexDigit10'' is assigned
    but its value is never used

    /tmp/tmpwcq3moq8.cs(32,14): warning CS0219: The variable ''hexDigit11'' is assigned
    but its value is never used

    /tmp/tmpwcq3moq8.cs(33,14): warning CS0219: The variable ''hexDigit12'' is assigned
    but its value is never used

    /tmp/tmpwcq3moq8.cs(34,14): warning CS0219: The variable ''hexDigit13'' is assigned
    but its value is never used

    /tmp/tmpwcq3moq8.cs(35,14): warning CS0219: The variable ''hexDigit14'' is assigned
    but its value is never used

    /tmp/tmpwcq3moq8.cs(36,14): warning CS0219: The variable ''hexDigit15'' is assigned
    but its value is never used

    /tmp/tmpwcq3moq8.cs(37,14): warning CS0219: The variable ''hexDigit16'' is assigned
    but its value is never used

    /tmp/tmpwcq3moq8.cs(38,14): warning CS0219: The variable ''hexDigi'
  timestamp: 1659976668
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    public
    static long HexKey(string num) {\n        long result = 0;\n        foreach (char
    c in num) {\n            int digit = c - '0';\n            if (digit < 0 || digit
    > 9) {\n                throw new ArgumentOutOfRangeException(\"Invalid hexadecimal
    digit: \" + c);\n            }\n            result += (long)Math.Pow(16, digit);\n
    \       }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(HexKey((\"AB\")) == (1L));\n    Debug.Assert(HexKey((\"1077E\"))
    == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"2020\"))
    == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\")) == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\"))
    == (12L));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Specified argument
    was out of the range of valid values.\nParameter name: Invalid hexadecimal digit:
    A\n  at Problem.HexKey (System.String num) [0x00040] in <569700039508433cb2c7d73f95780f39>:0
    \n  at Problem.Main (System.String[] args) [0x00001] in <569700039508433cb2c7d73f95780f39>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Specified
    argument was out of the range of valid values.\nParameter name: Invalid hexadecimal
    digit: A\n  at Problem.HexKey (System.String num) [0x00040] in <569700039508433cb2c7d73f95780f39>:0
    \n  at Problem.Main (System.String[] args) [0x00001] in <569700039508433cb2c7d73f95780f39>:0
    \n"
  stdout: ''
  timestamp: 1659976669
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    public
    static long HexKey(string num) {\n        long num2 = 0;\n        foreach (char
    c in num) {\n            int d = (int)c;\n            if (d >= '0' && d <= '9')
    {\n                num2 += d * 16;\n            }\n        }\n        return num2;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(HexKey((\"AB\"))
    == (1L));\n    Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\"))
    == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\"))
    == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\")) ==
    (12L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d98a57e97e74417a95ab55d8b98558a3>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d98a57e97e74417a95ab55d8b98558a3>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976667
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    public
    static long HexKey(string num) {\n        long sum = 0;\n        long digit;\n
    \       long key = 0;\n        bool isPrime = true;\n        foreach (char c in
    num) {\n            digit = Convert.ToInt64(c);\n            if (digit < 0 ||
    digit > 15) {\n                throw new ArgumentOutOfRangeException(\"Hexadecimal
    digit must be between 0 and 15\");\n            }\n            if (isPrime) {\n
    \               key += digit * digit;\n            }\n            else {\n                key
    += digit * digit * digit;\n            }\n            isPrime = IsPrime(key);\n
    \       }\n        return key;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(HexKey((\"AB\")) == (1L));\n    Debug.Assert(HexKey((\"1077E\"))
    == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"2020\"))
    == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\")) == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\"))
    == (12L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp79c95pzi.cs(36,23): error CS0103: The name ''IsPrime'' does not exist
    in the current context

    /tmp/tmp79c95pzi.cs(21,14): warning CS0219: The variable ''sum'' is assigned but
    its value is never used

    '
  timestamp: 1659976669
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    public
    static long HexKey(string num) {\n        long result = 0;\n        string hex
    = num.ToUpper();\n        foreach (char c in hex) {\n            int digit = c
    - '0';\n            if (digit >= 2 && digit <= 9) {\n                result +=
    (digit * digit);\n            }\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(HexKey((\"AB\")) == (1L));\n
    \   Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\"))
    == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\"))
    == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\")) ==
    (12L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <99e91d692ff848e3a3b75d11a0a059d0>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <99e91d692ff848e3a3b75d11a0a059d0>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976669
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    public
    static long HexKey(string num) {\n        long ret = 0;\n        long num2 = 0;\n
    \       long num3 = 0;\n        long num4 = 0;\n        long num5 = 0;\n        long
    num6 = 0;\n        long num7 = 0;\n        long num8 = 0;\n        long num9 =
    0;\n        long num10 = 0;\n        long num11 = 0;\n        long num12 = 0;\n
    \       long num13 = 0;\n        long num14 = 0;\n        long num15 = 0;\n        long
    num16 = 0;\n        long num17 = 0;\n        long num18 = 0;\n        long num19
    = 0;\n        long num20 = 0;\n        long num21 = 0;\n        long num22 = 0;\n
    \       long num23 = 0;\n        long num24 = 0;\n        long num25 = 0;\n        long
    num26 = 0;\n        long num27 = 0;\n        long num28 = 0;\n        long num29
    = 0;\n        long num30 = 0;\n        long num31 = 0;\n        long num32 = 0;\n
    \       long num33 = 0;\n        long num34 = 0;\n        long num35 = 0;\n        long
    num36 = 0;\n        long num37 = 0;\n        long num38 = 0;\n        long num39
    = 0;\n        long num40 = 0;\n        long num41 = 0;\n        long num42 = 0;\n
    \       long num43 = 0;\n        long num44 = 0;\n        long num45 = 0;\n        long
    num46 = 0;\n        long num47 = 0;\n        long num48 = 0;\n        long num49
    = 0;\n        long num50 = 0;\n        long num51 = 0;\n        long num52 = 0;\n
    \       long num53 = 0;\n        long num54 = 0;\n        long num55 = 0;\n        long
    num56 = 0;\n        long num57 = 0;\n        long num58 = 0;\n        long num59
    = 0;\n        long num60 = 0;\n        long num61 = 0;\n        long num62 = 0;\n
    \       long num63 = 0;\n        long num64 = 0;\n        long num65 = 0;\n        long
    num66 = 0;\n        long num67 = 0;\n        long num68 = 0;\n        long num69
    = 0;\n        long num70 = 0;\n        long num71 = 0;\n        long num72 = 0;\n
    \       long num73 = 0;\n        long num74 = 0;\n        long num75 = 0;\n        long
    num76 = 0;\n        long num77 = 0;\n        long num78 = 0;\n        long num79
    = 0;\n        long num80 = 0;\n        long num81 = 0;\n        long num82 = 0;\n
    \       long num83 = 0;\n        long num84 = 0;\n        long num85 = 0;\n        long
    num86 = 0;\n        \n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HexKey((\"AB\"))
    == (1L));\n    Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\"))
    == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\"))
    == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\")) ==
    (12L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpyj64em0v.cs(21,14): warning CS0219: The variable ''ret'' is assigned but
    its value is never used

    /tmp/tmpyj64em0v.cs(22,14): warning CS0219: The variable ''num2'' is assigned
    but its value is never used

    /tmp/tmpyj64em0v.cs(23,14): warning CS0219: The variable ''num3'' is assigned
    but its value is never used

    /tmp/tmpyj64em0v.cs(24,14): warning CS0219: The variable ''num4'' is assigned
    but its value is never used

    /tmp/tmpyj64em0v.cs(25,14): warning CS0219: The variable ''num5'' is assigned
    but its value is never used

    /tmp/tmpyj64em0v.cs(26,14): warning CS0219: The variable ''num6'' is assigned
    but its value is never used

    /tmp/tmpyj64em0v.cs(27,14): warning CS0219: The variable ''num7'' is assigned
    but its value is never used

    /tmp/tmpyj64em0v.cs(28,14): warning CS0219: The variable ''num8'' is assigned
    but its value is never used

    /tmp/tmpyj64em0v.cs(29,14): warning CS0219: The variable ''num9'' is assigned
    but its value is never used

    /tmp/tmpyj64em0v.cs(30,14): warning CS0219: The variable ''num10'' is assigned
    but its value is never used

    /tmp/tmpyj64em0v.cs(31,14): warning CS0219: The variable ''num11'' is assigned
    but its value is never used

    /tmp/tmpyj64em0v.cs(32,14): warning CS0219: The variable ''num12'' is assigned
    but its value is never used

    /tmp/tmpyj64em0v.cs(33,14): warning CS0219: The variable ''num13'' is assigned
    but its value is never used

    /tmp/tmpyj64em0v.cs(34,14): warning CS0219: The variable ''num14'' is assigned
    but its value is never used

    /tmp/tmpyj64em0v.cs(35,14): warning CS0219: The variable ''num15'' is assigned
    but its value is never used

    /tmp/tmpyj64em0v.cs(36,14): warning CS0219: The variable ''num16'' is assigned
    but its value is never used

    /tmp/tmpyj64em0v.cs(37,14): warning CS0219: The variable ''num17'' is assigned
    but its value is never used

    /tmp/tmpyj64em0v.cs(38,14): warning CS0219: The variable ''num18'' is assigned
    but its value is never used

    /tmp/tmpyj64em0v.cs(39,14): warning CS021'
  timestamp: 1659976669
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    public
    static long HexKey(string num) {\n        long result = 0;\n        long digit;\n
    \       string hex = num.ToUpper();\n        foreach (char c in hex) {\n            digit
    = Convert.ToInt64(c);\n            if (digit == 11 || digit == 13) {\n                result
    += 2;\n            } else if (digit == 17) {\n                result += 3;\n            }
    else {\n                result += digit % 10;\n            }\n        }\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HexKey((\"AB\"))
    == (1L));\n    Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\"))
    == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\"))
    == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\")) ==
    (12L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <07db32a3366c449299820847a3601722>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <07db32a3366c449299820847a3601722>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976669
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    public
    static long HexKey(string num) {\n        long sum = 0;\n        long digit =
    0;\n        bool isPrime = true;\n        foreach (char c in num) {\n            digit
    = Convert.ToInt64(c);\n            if (digit == 0)\n                throw new
    ArgumentException(\"Invalid hexadecimal number\");\n            if (digit > 9)\n
    \               throw new ArgumentException(\"Invalid hexadecimal number\");\n
    \           sum += digit;\n            if (isPrime) {\n                isPrime
    = IsPrime(digit);\n            }\n        }\n        return sum;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(HexKey((\"AB\")) == (1L));\n
    \   Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\"))
    == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\"))
    == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\")) ==
    (12L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpwo04gxhk.cs(32,27): error CS0103: The name ''IsPrime'' does not exist
    in the current context

    '
  timestamp: 1659976669
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    public
    static long HexKey(string num) {\n        long result = 0;\n        long digit
    = 0;\n        long power = 1;\n        bool isPrime = true;\n        foreach (char
    c in num) {\n            digit = Convert.ToInt64(c);\n            isPrime = IsPrime(digit);\n
    \           if (isPrime) {\n                result += (digit * power);\n                power
    *= digit;\n            }\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(HexKey((\"AB\")) == (1L));\n
    \   Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\"))
    == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\"))
    == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\")) ==
    (12L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp01vguy19.cs(27,23): error CS0103: The name ''IsPrime'' does not exist
    in the current context

    '
  timestamp: 1659976669
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    public
    static long HexKey(string num) {\n        long num2 = 0;\n        long num3 =
    0;\n        long num4 = 0;\n        long num5 = 0;\n        long num6 = 0;\n        long
    num7 = 0;\n        long num8 = 0;\n        long num9 = 0;\n        long num10
    = 0;\n        long num11 = 0;\n        long num12 = 0;\n        long num13 = 0;\n
    \       long num14 = 0;\n        long num15 = 0;\n        long num16 = 0;\n        long
    num17 = 0;\n        long num18 = 0;\n        long num19 = 0;\n        long num20
    = 0;\n        long num21 = 0;\n        long num22 = 0;\n        long num23 = 0;\n
    \       long num24 = 0;\n        long num25 = 0;\n        long num26 = 0;\n        long
    num27 = 0;\n        long num28 = 0;\n        long num29 = 0;\n        long num30
    = 0;\n        long num31 = 0;\n        long num32 = 0;\n        long num33 = 0;\n
    \       long num34 = 0;\n        long num35 = 0;\n        long num36 = 0;\n        long
    num37 = 0;\n        long num38 = 0;\n        long num39 = 0;\n        long num40
    = 0;\n        long num41 = 0;\n        long num42 = 0;\n        long num43 = 0;\n
    \       long num44 = 0;\n        long num45 = 0;\n        long num46 = 0;\n        long
    num47 = 0;\n        long num48 = 0;\n        long num49 = 0;\n        long num50
    = 0;\n        long num51 = 0;\n        long num52 = 0;\n        long num53 = 0;\n
    \       long num54 = 0;\n        long num55 = 0;\n        long num56 = 0;\n        long
    num57 = 0;\n        long num58 = 0;\n        long num59 = 0;\n        long num60
    = 0;\n        long num61 = 0;\n        long num62 = 0;\n        long num63 = 0;\n
    \       long num64 = 0;\n        long num65 = 0;\n        long num66 = 0;\n        long
    num67 = 0;\n        long num68 = 0;\n        long num69 = 0;\n        long num70
    = 0;\n        long num71 = 0;\n        long num72 = 0;\n        long num73 = 0;\n
    \       long num74 = 0;\n        long num75 = 0;\n        long num76 = 0;\n        long
    num77 = 0;\n        long num78 = 0;\n        long num79 = 0;\n        long num80
    = 0;\n        long num81 = 0;\n        long num82 = 0;\n        long num83 = 0;\n
    \       long num84 = 0;\n        long num85 = 0;\n        long num86 = 0;\n        long
    num87 = 0;\n\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HexKey((\"AB\"))
    == (1L));\n    Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\"))
    == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\"))
    == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\")) ==
    (12L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpajppcu5a.cs(21,14): warning CS0219: The variable ''num2'' is assigned
    but its value is never used

    /tmp/tmpajppcu5a.cs(22,14): warning CS0219: The variable ''num3'' is assigned
    but its value is never used

    /tmp/tmpajppcu5a.cs(23,14): warning CS0219: The variable ''num4'' is assigned
    but its value is never used

    /tmp/tmpajppcu5a.cs(24,14): warning CS0219: The variable ''num5'' is assigned
    but its value is never used

    /tmp/tmpajppcu5a.cs(25,14): warning CS0219: The variable ''num6'' is assigned
    but its value is never used

    /tmp/tmpajppcu5a.cs(26,14): warning CS0219: The variable ''num7'' is assigned
    but its value is never used

    /tmp/tmpajppcu5a.cs(27,14): warning CS0219: The variable ''num8'' is assigned
    but its value is never used

    /tmp/tmpajppcu5a.cs(28,14): warning CS0219: The variable ''num9'' is assigned
    but its value is never used

    /tmp/tmpajppcu5a.cs(29,14): warning CS0219: The variable ''num10'' is assigned
    but its value is never used

    /tmp/tmpajppcu5a.cs(30,14): warning CS0219: The variable ''num11'' is assigned
    but its value is never used

    /tmp/tmpajppcu5a.cs(31,14): warning CS0219: The variable ''num12'' is assigned
    but its value is never used

    /tmp/tmpajppcu5a.cs(32,14): warning CS0219: The variable ''num13'' is assigned
    but its value is never used

    /tmp/tmpajppcu5a.cs(33,14): warning CS0219: The variable ''num14'' is assigned
    but its value is never used

    /tmp/tmpajppcu5a.cs(34,14): warning CS0219: The variable ''num15'' is assigned
    but its value is never used

    /tmp/tmpajppcu5a.cs(35,14): warning CS0219: The variable ''num16'' is assigned
    but its value is never used

    /tmp/tmpajppcu5a.cs(36,14): warning CS0219: The variable ''num17'' is assigned
    but its value is never used

    /tmp/tmpajppcu5a.cs(37,14): warning CS0219: The variable ''num18'' is assigned
    but its value is never used

    /tmp/tmpajppcu5a.cs(38,14): warning CS0219: The variable ''num19'' is assigned
    but its value is never used

    /tmp/tmpajppcu5a.cs(39,14): warning CS0'
  timestamp: 1659976665
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    public
    static long HexKey(string num) {\n        long result = 0;\n        string hex
    = num.ToUpper();\n        char[] hexChars = hex.ToCharArray();\n        foreach
    (char hexChar in hexChars) {\n            int hexValue = Convert.ToInt32(hexChar);\n
    \           result += (hexValue % 10) * Math.Pow(16, hexChars.Length - 1);\n        }\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(HexKey((\"AB\")) == (1L));\n    Debug.Assert(HexKey((\"1077E\"))
    == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"2020\"))
    == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\")) == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\"))
    == (12L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp44qyp_8t.cs(26,13): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659976669
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    public
    static long HexKey(string num) {\n        long result = 0;\n        foreach (char
    c in num.ToUpper()) {\n            int digit = c - 'A';\n            if (digit
    < 0 || digit > 9) {\n                throw new ArgumentOutOfRangeException(\"num\");\n
    \           }\n            result += (long)Math.Pow(16, digit);\n        }\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HexKey((\"AB\"))
    == (1L));\n    Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\"))
    == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\"))
    == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\")) ==
    (12L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c0efd9b318db44a2bbb29acc24015db6>:0
    \n\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Specified argument
    was out of the range of valid values.\nParameter name: num\n  at Problem.HexKey
    (System.String num) [0x00034] in <c0efd9b318db44a2bbb29acc24015db6>:0 \n  at Problem.Main
    (System.String[] args) [0x00015] in <c0efd9b318db44a2bbb29acc24015db6>:0 \n[ERROR]
    FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Specified argument
    was out of the range of valid values.\nParameter name: num\n  at Problem.HexKey
    (System.String num) [0x00034] in <c0efd9b318db44a2bbb29acc24015db6>:0 \n  at Problem.Main
    (System.String[] args) [0x00015] in <c0efd9b318db44a2bbb29acc24015db6>:0 \n"
  stdout: ''
  timestamp: 1659976669
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    public
    static long HexKey(string num) {\n        long result = 0;\n        foreach (char
    c in num.ToUpper()) {\n            int digit = c - 'A';\n            if (digit
    < 0 || digit > 9) {\n                throw new ArgumentOutOfRangeException(\"Hexadecimal
    digit must be between 0 and 9\");\n            }\n            result *= 16;\n
    \           result += digit;\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(HexKey((\"AB\")) == (1L));\n
    \   Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\"))
    == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\"))
    == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\")) ==
    (12L));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Specified argument
    was out of the range of valid values.\nParameter name: Hexadecimal digit must
    be between 0 and 9\n  at Problem.HexKey (System.String num) [0x00034] in <72d0146e875e456bbccdb10cbd2697a7>:0
    \n  at Problem.Main (System.String[] args) [0x00015] in <72d0146e875e456bbccdb10cbd2697a7>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Specified
    argument was out of the range of valid values.\nParameter name: Hexadecimal digit
    must be between 0 and 9\n  at Problem.HexKey (System.String num) [0x00034] in
    <72d0146e875e456bbccdb10cbd2697a7>:0 \n  at Problem.Main (System.String[] args)
    [0x00015] in <72d0146e875e456bbccdb10cbd2697a7>:0 \n"
  stdout: ''
  timestamp: 1659976665
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    public
    static long HexKey(string num) {\n        long result = 0;\n        foreach (char
    c in num) {\n            int digit = c - '0';\n            if (digit >= 2 && digit
    <= 9) {\n                result += digit * digit;\n            }\n        }\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(HexKey((\"AB\")) == (1L));\n    Debug.Assert(HexKey((\"1077E\"))
    == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"2020\"))
    == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\")) == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\"))
    == (12L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <987a1270fcfe474a9d19109ff9313ade>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <987a1270fcfe474a9d19109ff9313ade>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976668
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    public
    static long HexKey(string num) {\n        long result = 0;\n        foreach (char
    c in num.ToUpper()) {\n            int digit = c - 'A';\n            if (digit
    < 0 || digit > 9) {\n                throw new ArgumentOutOfRangeException(\"Hex
    key must be between A and F.\");\n            }\n            result += digit *
    Math.Pow(16, num.Length - 1 - c.Length);\n        }\n        return result;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(HexKey((\"AB\"))
    == (1L));\n    Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\"))
    == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\"))
    == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\")) ==
    (12L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp4mg240pl.cs(27,63): error CS1061: ''char'' does not contain a definition
    for ''Length'' and no accessible extension method ''Length'' accepting a first
    argument of type ''char'' could be found (are you missing a using directive or
    an assembly reference?)

    '
  timestamp: 1659976669
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    public
    static long HexKey(string num) {\n        long result = 0;\n        foreach (char
    c in num.ToUpper()) {\n            int digit = c - 'A';\n            if (digit
    < 0 || digit > 9) {\n                throw new ArgumentOutOfRangeException(\"Hexadecimal
    digit must be between 0 and 9\");\n            }\n            result *= 16;\n
    \           result += digit;\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(HexKey((\"AB\")) == (1L));\n
    \   Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\"))
    == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\"))
    == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\")) ==
    (12L));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Specified argument
    was out of the range of valid values.\nParameter name: Hexadecimal digit must
    be between 0 and 9\n  at Problem.HexKey (System.String num) [0x00034] in <72d0146e875e456bbccdb10cbd2697a7>:0
    \n  at Problem.Main (System.String[] args) [0x00015] in <72d0146e875e456bbccdb10cbd2697a7>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Specified
    argument was out of the range of valid values.\nParameter name: Hexadecimal digit
    must be between 0 and 9\n  at Problem.HexKey (System.String num) [0x00034] in
    <72d0146e875e456bbccdb10cbd2697a7>:0 \n  at Problem.Main (System.String[] args)
    [0x00015] in <72d0146e875e456bbccdb10cbd2697a7>:0 \n"
  stdout: ''
  timestamp: 1659976665
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    public
    static long HexKey(string num) {\n        long sum = 0;\n        foreach (char
    c in num.ToUpper()) {\n            int digit = c - 'A' + 10;\n            if (digit
    < 0 || digit > 9) {\n                throw new ArgumentOutOfRangeException(\"Invalid
    hexadecimal digit.\");\n            }\n            sum += digit;\n        }\n
    \       return sum;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HexKey((\"AB\"))
    == (1L));\n    Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\"))
    == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\"))
    == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\")) ==
    (12L));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Specified argument
    was out of the range of valid values.\nParameter name: Invalid hexadecimal digit.\n
    \ at Problem.HexKey (System.String num) [0x00037] in <dc15a9b55b65461fa2dc671b2675447b>:0
    \n  at Problem.Main (System.String[] args) [0x00001] in <dc15a9b55b65461fa2dc671b2675447b>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Specified
    argument was out of the range of valid values.\nParameter name: Invalid hexadecimal
    digit.\n  at Problem.HexKey (System.String num) [0x00037] in <dc15a9b55b65461fa2dc671b2675447b>:0
    \n  at Problem.Main (System.String[] args) [0x00001] in <dc15a9b55b65461fa2dc671b2675447b>:0
    \n"
  stdout: ''
  timestamp: 1659976667
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    public
    static long HexKey(string num) {\n        long result = 0;\n        foreach (char
    c in num) {\n            int digit = c - '0';\n            if (digit >= 2 && digit
    <= 9) {\n                result += digit * digit;\n            }\n        }\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(HexKey((\"AB\")) == (1L));\n    Debug.Assert(HexKey((\"1077E\"))
    == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"2020\"))
    == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\")) == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\"))
    == (12L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <987a1270fcfe474a9d19109ff9313ade>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <987a1270fcfe474a9d19109ff9313ade>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976668
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    public
    static long HexKey(string num) {\n        long result = 0;\n        foreach (char
    c in num) {\n            int digit = c - '0';\n            if (digit < 0 || digit
    > 9) {\n                throw new ArgumentOutOfRangeException(\"Hex digit must
    be between 0 and 9\");\n            }\n            result += (long)Math.Pow(16,
    digit);\n        }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(HexKey((\"AB\")) == (1L));\n    Debug.Assert(HexKey((\"1077E\"))
    == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"2020\"))
    == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\")) == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\"))
    == (12L));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Specified argument
    was out of the range of valid values.\nParameter name: Hex digit must be between
    0 and 9\n  at Problem.HexKey (System.String num) [0x0002f] in <66d3dd5f69824471a5bbac6b8c10e96b>:0
    \n  at Problem.Main (System.String[] args) [0x00001] in <66d3dd5f69824471a5bbac6b8c10e96b>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Specified
    argument was out of the range of valid values.\nParameter name: Hex digit must
    be between 0 and 9\n  at Problem.HexKey (System.String num) [0x0002f] in <66d3dd5f69824471a5bbac6b8c10e96b>:0
    \n  at Problem.Main (System.String[] args) [0x00001] in <66d3dd5f69824471a5bbac6b8c10e96b>:0
    \n"
  stdout: ''
  timestamp: 1659976669
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    public
    static long HexKey(string num) {\n        long result = 0;\n        long hexDigits
    = 0;\n        long hexKey = 0;\n        long hexKey2 = 0;\n        long hexKey3
    = 0;\n        long hexKey4 = 0;\n        long hexKey5 = 0;\n        long hexKey6
    = 0;\n        long hexKey7 = 0;\n        long hexKey8 = 0;\n        long hexKey9
    = 0;\n        long hexKeyA = 0;\n        long hexKeyB = 0;\n        long hexKeyC
    = 0;\n        long hexKeyD = 0;\n        long hexKeyE = 0;\n        long hexKeyF
    = 0;\n        long hexKeyG = 0;\n        long hexKeyH = 0;\n        long hexKeyI
    = 0;\n        long hexKeyJ = 0;\n        long hexKeyK = 0;\n        long hexKeyL
    = 0;\n        long hexKeyM = 0;\n        long hexKeyN = 0;\n        long hexKeyO
    = 0;\n        long hexKeyP = 0;\n        long hexKeyQ = 0;\n        long hexKeyR
    = 0;\n        long hexKeyS = 0;\n        long hexKeyT = 0;\n        long hexKeyU
    = 0;\n        long hexKeyV = 0;\n        long hexKeyW = 0;\n        long hexKeyX
    = 0;\n        long hexKeyY = 0;\n        long hexKeyZ = 0;\n        long hexKey0
    = 0;\n        long hexKey1 = 0;\n        long hexKey2 = 0;\n        long hexKey3
    = 0;\n        long hexKey4 = 0;\n        long hexKey5 = 0;\n        long hexKey6
    = 0;\n        long hexKey7 = 0;\n        long hexKey8 = 0;\n        long hexKey9
    = 0;\n        long hexKeyA = 0;\n        long hexKeyB = 0;\n        long hexKeyC
    = 0;\n        long hexKeyD = 0;\n        long hexKeyE = 0;\n        long hexKeyF
    = 0;\n        long hexKeyG = 0;\n        long hexKeyH = 0;\n        long hexKeyI
    = 0;\n        long hexKeyJ = 0;\n        long hexKeyK = 0;\n        long hexKeyL
    = 0;\n        long hexKeyM = 0;\n        long hexKeyN = 0;\n        long hexKeyO
    = 0;\n        long hexKeyP = 0;\n        long hexKeyQ = 0;\n        long hexKeyR
    = 0;\n        long hexKeyS = 0;\n        long hexKeyT = 0;\n        long hexKeyU
    = 0;\n        long hexKeyV = 0;\n        long hexKeyW = 0;\n        long hexKeyX
    = 0;\n        long hexKeyY = 0;\n        long hexKeyZ = 0;\n        long hexKey0
    = 0;\n        long hexKey1 = 0;\n        \n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(HexKey((\"AB\")) == (1L));\n    Debug.Assert(HexKey((\"1077E\"))
    == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"2020\"))
    == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\")) == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\"))
    == (12L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmplwg6l9bg.cs(60,14): error CS0128: A local variable or function named ''hexKey2''
    is already defined in this scope

    /tmp/tmplwg6l9bg.cs(61,14): error CS0128: A local variable or function named ''hexKey3''
    is already defined in this scope

    /tmp/tmplwg6l9bg.cs(62,14): error CS0128: A local variable or function named ''hexKey4''
    is already defined in this scope

    /tmp/tmplwg6l9bg.cs(63,14): error CS0128: A local variable or function named ''hexKey5''
    is already defined in this scope

    /tmp/tmplwg6l9bg.cs(64,14): error CS0128: A local variable or function named ''hexKey6''
    is already defined in this scope

    /tmp/tmplwg6l9bg.cs(65,14): error CS0128: A local variable or function named ''hexKey7''
    is already defined in this scope

    /tmp/tmplwg6l9bg.cs(66,14): error CS0128: A local variable or function named ''hexKey8''
    is already defined in this scope

    /tmp/tmplwg6l9bg.cs(67,14): error CS0128: A local variable or function named ''hexKey9''
    is already defined in this scope

    /tmp/tmplwg6l9bg.cs(68,14): error CS0128: A local variable or function named ''hexKeyA''
    is already defined in this scope

    /tmp/tmplwg6l9bg.cs(69,14): error CS0128: A local variable or function named ''hexKeyB''
    is already defined in this scope

    /tmp/tmplwg6l9bg.cs(70,14): error CS0128: A local variable or function named ''hexKeyC''
    is already defined in this scope

    /tmp/tmplwg6l9bg.cs(71,14): error CS0128: A local variable or function named ''hexKeyD''
    is already defined in this scope

    /tmp/tmplwg6l9bg.cs(72,14): error CS0128: A local variable or function named ''hexKeyE''
    is already defined in this scope

    /tmp/tmplwg6l9bg.cs(73,14): error CS0128: A local variable or function named ''hexKeyF''
    is already defined in this scope

    /tmp/tmplwg6l9bg.cs(74,14): error CS0128: A local variable or function named ''hexKeyG''
    is already defined in this scope

    /tmp/tmplwg6l9bg.cs(75,14): error CS0128: A local variable or function named ''hexKeyH''
    is already defined in this scope

    /'
  timestamp: 1659976669
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    public
    static long HexKey(string num) {\n        long num2 = 0;\n        long num3 =
    0;\n        long num4 = 0;\n        long num5 = 0;\n        long num6 = 0;\n        long
    num7 = 0;\n        long num8 = 0;\n        long num9 = 0;\n        long num10
    = 0;\n        long num11 = 0;\n        long num12 = 0;\n        long num13 = 0;\n
    \       long num14 = 0;\n        long num15 = 0;\n        long num16 = 0;\n        long
    num17 = 0;\n        long num18 = 0;\n        long num19 = 0;\n        long num20
    = 0;\n        long num21 = 0;\n        long num22 = 0;\n        long num23 = 0;\n
    \       long num24 = 0;\n        long num25 = 0;\n        long num26 = 0;\n        long
    num27 = 0;\n        long num28 = 0;\n        long num29 = 0;\n        long num30
    = 0;\n        long num31 = 0;\n        long num32 = 0;\n        long num33 = 0;\n
    \       long num34 = 0;\n        long num35 = 0;\n        long num36 = 0;\n        long
    num37 = 0;\n        long num38 = 0;\n        long num39 = 0;\n        long num40
    = 0;\n        long num41 = 0;\n        long num42 = 0;\n        long num43 = 0;\n
    \       long num44 = 0;\n        long num45 = 0;\n        long num46 = 0;\n        long
    num47 = 0;\n        long num48 = 0;\n        long num49 = 0;\n        long num50
    = 0;\n        long num51 = 0;\n        long num52 = 0;\n        long num53 = 0;\n
    \       long num54 = 0;\n        long num55 = 0;\n        long num56 = 0;\n        long
    num57 = 0;\n        long num58 = 0;\n        long num59 = 0;\n        long num60
    = 0;\n        long num61 = 0;\n        long num62 = 0;\n        long num63 = 0;\n
    \       long num64 = 0;\n        long num65 = 0;\n        long num66 = 0;\n        long
    num67 = 0;\n        long num68 = 0;\n        long num69 = 0;\n        long num70
    = 0;\n        long num71 = 0;\n        long num72 = 0;\n        long num73 = 0;\n
    \       long num74 = 0;\n        long num75 = 0;\n        long num76 = 0;\n        long
    num77 = 0;\n        long num78 = 0;\n        long num79 = 0;\n        long num80
    = 0;\n        long num81 = 0;\n        long num82 = 0;\n        long num83 = 0;\n
    \       long num84 = 0;\n        long num85 = 0;\n        long num86 = 0;\n        long
    num87 = 0;\n\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HexKey((\"AB\"))
    == (1L));\n    Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\"))
    == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\"))
    == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\")) ==
    (12L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpajppcu5a.cs(21,14): warning CS0219: The variable ''num2'' is assigned
    but its value is never used

    /tmp/tmpajppcu5a.cs(22,14): warning CS0219: The variable ''num3'' is assigned
    but its value is never used

    /tmp/tmpajppcu5a.cs(23,14): warning CS0219: The variable ''num4'' is assigned
    but its value is never used

    /tmp/tmpajppcu5a.cs(24,14): warning CS0219: The variable ''num5'' is assigned
    but its value is never used

    /tmp/tmpajppcu5a.cs(25,14): warning CS0219: The variable ''num6'' is assigned
    but its value is never used

    /tmp/tmpajppcu5a.cs(26,14): warning CS0219: The variable ''num7'' is assigned
    but its value is never used

    /tmp/tmpajppcu5a.cs(27,14): warning CS0219: The variable ''num8'' is assigned
    but its value is never used

    /tmp/tmpajppcu5a.cs(28,14): warning CS0219: The variable ''num9'' is assigned
    but its value is never used

    /tmp/tmpajppcu5a.cs(29,14): warning CS0219: The variable ''num10'' is assigned
    but its value is never used

    /tmp/tmpajppcu5a.cs(30,14): warning CS0219: The variable ''num11'' is assigned
    but its value is never used

    /tmp/tmpajppcu5a.cs(31,14): warning CS0219: The variable ''num12'' is assigned
    but its value is never used

    /tmp/tmpajppcu5a.cs(32,14): warning CS0219: The variable ''num13'' is assigned
    but its value is never used

    /tmp/tmpajppcu5a.cs(33,14): warning CS0219: The variable ''num14'' is assigned
    but its value is never used

    /tmp/tmpajppcu5a.cs(34,14): warning CS0219: The variable ''num15'' is assigned
    but its value is never used

    /tmp/tmpajppcu5a.cs(35,14): warning CS0219: The variable ''num16'' is assigned
    but its value is never used

    /tmp/tmpajppcu5a.cs(36,14): warning CS0219: The variable ''num17'' is assigned
    but its value is never used

    /tmp/tmpajppcu5a.cs(37,14): warning CS0219: The variable ''num18'' is assigned
    but its value is never used

    /tmp/tmpajppcu5a.cs(38,14): warning CS0219: The variable ''num19'' is assigned
    but its value is never used

    /tmp/tmpajppcu5a.cs(39,14): warning CS0'
  timestamp: 1659976665
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    public
    static long HexKey(string num) {\n        long ret = 0;\n        foreach (char
    c in num.ToUpper()) {\n            int d = (int)c;\n            if (d >= '0' &&
    d <= '9') {\n                ret += d * 0x10;\n            }\n        }\n        return
    ret;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HexKey((\"AB\"))
    == (1L));\n    Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\"))
    == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\"))
    == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\")) ==
    (12L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <26f193b64a784606b9c4e4baac4c0dc0>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <26f193b64a784606b9c4e4baac4c0dc0>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976669
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You have been tasked to write a function that receives \n    //
    a hexadecimal number as a string and counts the number of hexadecimal \n    //
    digits that are primes (prime number, or a prime, is a natural number \n    //
    greater than 1 that is not a product of two smaller natural numbers).\n    //
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    //
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine
    a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal
    13).\n    // Note: you may assume the input is always correct or empty string,
    \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    public
    static long HexKey(string num) {\n        long result = 0;\n        long digit
    = 0;\n        bool isPrime = true;\n        foreach (char c in num) {\n            digit
    = Convert.ToInt64(c);\n            if (digit > 9) {\n                digit = digit
    - 10;\n            }\n            if (isPrime) {\n                isPrime = IsPrime(digit);\n
    \           }\n            if (isPrime) {\n                result += digit;\n
    \           }\n        }\n        return result;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(HexKey((\"AB\")) == (1L));\n    Debug.Assert(HexKey((\"1077E\"))
    == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"2020\"))
    == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\")) == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\"))
    == (12L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp8kdqmrjw.cs(30,27): error CS0103: The name ''IsPrime'' does not exist
    in the current context

    '
  timestamp: 1659976669
