name: HumanEval_3_below_zero
language: cs
prompt: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\n\
  using System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass\
  \ Problem {\n    // You're given a list of deposit and withdrawal operations on\
  \ a bank account that starts with\n    // zero balance. Your task is to detect if\
  \ at any point the balance of account fallls below zero, and\n    // at that point\
  \ function should return True. Otherwise it should return False.\n    public static\
  \ bool BelowZero(List<long> operations) {\n"
tests: "    }\n    public static void Main(string[] args) {\n    Debug.Assert(BelowZero((new\
  \ List<long>())) == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
  \ (long)2L, (long)-3L, (long)1L, (long)2L, (long)-3L}))) == (false));\n    Debug.Assert(BelowZero((new\
  \ List<long>(new long[]{(long)1L, (long)2L, (long)-4L, (long)5L, (long)6L}))) ==\
  \ (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)-1L,\
  \ (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L}))) == (false));\n\
  \    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)-1L, (long)2L,\
  \ (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-5L}))) == (true));\n    Debug.Assert(BelowZero((new\
  \ List<long>(new long[]{(long)1L, (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L,\
  \ (long)4L, (long)-4L}))) == (true));\n    }\n\n}\n"
completions: ['        // Your code here', "        long balance = 0;\n        foreach\
    \ (var operation in operations) {\n            long amount = operation;\n    \
    \        if (amount < 0) {\n                balance = balance - amount;\n    \
    \        } else {\n                balance = balance + amount;\n            }\n\
    \        }\n        return balance < 0;", "        long balance = 0;\n       \
    \ foreach (var operation in operations) {\n            long deposit = operation[0];\n\
    \            long withdrawal = operation[1];\n            if (deposit > withdrawal)\
    \ {\n                balance += deposit;\n            } else {\n             \
    \   balance -= withdrawal;\n            }\n        }\n        return balance <\
    \ 0;", "        long balance = 0;\n        foreach (var operation in operations)\
    \ {\n            switch (operation) {\n                case Deposit:\n       \
    \             balance += 1;\n                    break;\n                case\
    \ Withdraw:\n                    balance -= 1;\n                    break;\n \
    \           }\n        }\n        return balance < 0;", "        // Your code\
    \ goes here\n        long balance = 0;\n        foreach (var operation in operations)\
    \ {\n            if (operation == Deposit) {\n                balance += operations[operations.Count\
    \ - 1];\n            }\n            else if (operation == Withdraw) {\n      \
    \          balance -= operations[operations.Count - 1];\n            }\n     \
    \   }\n        return balance < 0;", "        // Your code here\n        long\
    \ balance = 0;\n        foreach (var operation in operations) {\n            if\
    \ (operation == 1) {\n                balance += operation;\n            }\n \
    \           else if (operation == -1) {\n                balance -= operation;\n\
    \            }\n            else if (operation == 0) {\n                if (balance\
    \ < 0) {\n                    return true;\n                }\n              \
    \  else {\n                    return false;\n                }\n            }\n\
    \        }\n        return false;", "        long balance = 0;\n        foreach\
    \ (var operation in operations) {\n            if (operation == Deposit) {\n \
    \               balance += operation.Amount;\n            } else if (operation\
    \ == Withdraw) {\n                balance -= operation.Amount;\n            }\n\
    \        }\n        return balance < 0;", "        // Your code here\n       \
    \ long balance = 0;\n        foreach (var operation in operations) {\n       \
    \     if (operation.Operation == Operation.Deposit) {\n                balance\
    \ += operation.Amount;\n            } else if (operation.Operation == Operation.Withdraw)\
    \ {\n                balance -= operation.Amount;\n            }\n        }\n\
    \        return balance < 0;", "        long balance = 0;\n        foreach (var\
    \ operation in operations) {\n            if (operation == Deposit) {\n      \
    \          balance += operation.Amount;\n            } else if (operation == Withdraw)\
    \ {\n                balance -= operation.Amount;\n            }\n        }\n\
    \        return balance < 0;", "        long balance = operations.First();\n \
    \       foreach (var operation in operations.Skip(1)) {\n            if (balance\
    \ < 0)\n                return true;\n            balance += operation;\n    \
    \    }\n        return false;", "        // Your code goes here\n        long\
    \ balance = 0;\n        foreach (var operation in operations) {\n            if\
    \ (operation == Deposit) {\n                balance += operation.Amount;\n   \
    \         } else if (operation == Withdraw) {\n                balance -= operation.Amount;\n\
    \            }\n        }\n        return balance < 0;", "        long balance\
    \ = operations.Sum();\n        if (balance < 0) {\n            return true;\n\
    \        }\n        return false;", "        long balance = operations.Sum();\n\
    \        if (balance < 0) {\n            return true;\n        }\n        return\
    \ false;", "        long balance = 0;\n        foreach (var operation in operations)\
    \ {\n            balance = balance + operation;\n            if (balance < 0)\
    \ {\n                return true;\n            }\n        }\n        return false;",
  "        long balance = 0;\n        foreach (var operation in operations) {\n  \
    \          if (operation.OperationType == OperationType.Deposit) {\n         \
    \       balance += operation.Amount;\n            } else if (operation.OperationType\
    \ == OperationType.Withdraw) {\n                balance -= operation.Amount;\n\
    \            }\n        }\n        return balance < 0;", "        // Your code\
    \ here\n        long balance = 0;\n        foreach (var operation in operations)\
    \ {\n            long amount = operation;\n            if (amount > 0) {\n   \
    \             balance += amount;\n            }\n            else if (amount <\
    \ 0) {\n                balance -= amount;\n            }\n        }\n       \
    \ return balance < 0;", "        // Your code here\n        long balance = 0;\n\
    \        foreach (var operation in operations) {\n            if (operation.Operation.Equals(\"\
    deposit\")) {\n                balance += operation.Amount;\n            }\n \
    \           else if (operation.Operation.Equals(\"withdraw\")) {\n           \
    \     balance -= operation.Amount;\n            }\n        }\n        return balance\
    \ < 0;", "        // Your code here\n        long balance = operations.Sum(x =>\
    \ x);\n        return balance < 0;", "        long balance = 0;\n        foreach\
    \ (var operation in operations) {\n            long amount = operation;\n    \
    \        if (amount < 0) {\n                balance = balance - amount;\n    \
    \        } else {\n                balance = balance + amount;\n            }\n\
    \        }\n        return balance < 0;", "        long balance = 0;\n       \
    \ foreach (var op in operations) {\n            balance = balance + op;\n    \
    \        if (balance < 0) {\n                return true;\n            }\n   \
    \     }\n        return false;", "        long balance = 0;\n        foreach (long\
    \ operation in operations) {\n            if (operation < 0)\n               \
    \ return false;\n            balance += operation;\n        }\n        return\
    \ balance < 0;", "        long balance = operations.Sum();\n        return balance\
    \ < 0;", "        long balance = 0;\n        foreach (long operation in operations)\
    \ {\n            balance = balance + operation;\n            if (balance < 0)\
    \ {\n                return true;\n            }\n        }\n        return false;",
  "        long balance = 0;\n        foreach (var operation in operations) {\n  \
    \          if (operation == Deposit) {\n                balance += 1;\n      \
    \      } else if (operation == Withdraw) {\n                balance -= 1;\n  \
    \          }\n        }\n        return balance < 0;", "        long balance =\
    \ 0;\n        foreach (var operation in operations) {\n            if (operation\
    \ == Deposit) {\n                balance += 1;\n            } else if (operation\
    \ == Withdraw) {\n                balance -= 1;\n            }\n        }\n  \
    \      return balance < 0;", "        long balance = 0;\n        foreach (var\
    \ operation in operations) {\n            switch (operation) {\n             \
    \   case Deposit:\n                    balance += 1;\n                    break;\n\
    \                case Withdraw:\n                    balance -= 1;\n         \
    \           break;\n            }\n        }\n        return balance < 0;", " \
    \       long balance = 0;\n        foreach (var operation in operations) {\n \
    \           if (operation == Deposit) {\n                balance += 1;\n     \
    \       } else if (operation == Withdraw) {\n                balance -= 1;\n \
    \           }\n        }\n        return balance < 0;", "        long balance\
    \ = 0;\n        foreach (var operation in operations) {\n            if (operation.Operation.Equals(\"\
    deposit\")) {\n                balance += operation.Amount;\n            }\n \
    \           else if (operation.Operation.Equals(\"withdraw\")) {\n           \
    \     balance -= operation.Amount;\n            }\n        }\n        return balance\
    \ < 0;", "        long balance = 0;\n        foreach (var op in operations) {\n\
    \            if (op == Deposit) {\n                balance += opAmount;\n    \
    \        } else if (op == Withdraw) {\n                balance -= opAmount;\n\
    \            }\n        }\n        return balance < 0;", "        // Your code\
    \ here\n        long balance = 0;\n        foreach (var operation in operations)\
    \ {\n            if (operation.OperationType == OperationType.Deposit) {\n   \
    \             balance += operation.Amount;\n            } else if (operation.OperationType\
    \ == OperationType.Withdraw) {\n                balance -= operation.Amount;\n\
    \            }\n        }\n        return balance < 0;", "        long balance\
    \ = operations.First();\n        foreach (long operation in operations.Skip(1))\n\
    \        {\n            if (operation < 0)\n            {\n                return\
    \ false;\n            }\n            balance += operation;\n        }\n      \
    \  return balance < 0;", "        long balance = 0;\n        foreach (var operation\
    \ in operations) {\n            if (operation == Deposit) {\n                balance\
    \ += 1;\n            } else if (operation == Withdraw) {\n                balance\
    \ -= 1;\n            }\n        }\n        return balance < 0;", "        // Your\
    \ code goes here\n        long sum = 0;\n        foreach (var item in operations)\
    \ {\n            sum += item;\n        }\n        if (sum < 0)\n            return\
    \ true;\n        else\n            return false;", "        // Your code goes\
    \ here\n        long balance = 0;\n        foreach (var operation in operations)\
    \ {\n            long amount = operation;\n            if (amount < 0) {\n   \
    \             balance = balance - amount;\n            } else {\n            \
    \    balance = balance + amount;\n            }\n        }\n        return balance\
    \ < 0;", "        long balance = 0;\n        foreach (var operation in operations)\
    \ {\n            switch (operation) {\n                case Deposit:\n       \
    \             balance += 1;\n                    break;\n                case\
    \ Withdraw:\n                    balance -= 1;\n                    break;\n \
    \           }\n        }\n        return balance < 0;", "        long balance\
    \ = 0;\n        foreach (var operation in operations) {\n            switch (operation)\
    \ {\n                case Deposit:\n                    balance += operation.Amount;\n\
    \                    break;\n                case Withdraw:\n                \
    \    balance -= operation.Amount;\n                    break;\n            }\n\
    \        }\n        return balance < 0;", "        // Your code here\n       \
    \ long balance = operations.Sum();\n        if (balance < 0)\n            return\
    \ true;\n        else\n            return false;", "        long balance = 0;\n\
    \        foreach (var operation in operations) {\n            long amount = operation;\n\
    \            if (amount < 0) {\n                throw new ArgumentException(\"\
    Negative amount is not allowed\");\n            }\n            balance = balance\
    \ + amount;\n        }\n        return balance < 0;", "        // Your code here\n\
    \        long balance = 0;\n        foreach (var operation in operations) {\n\
    \            if (operation == Deposit) {\n                balance += operation.Amount;\n\
    \            } else if (operation == Withdraw) {\n                balance -= operation.Amount;\n\
    \            }\n        }\n        return balance < 0;", "        long balance\
    \ = 0;\n        foreach (var operation in operations) {\n            if (operation.Operation.Equals(\"\
    deposit\")) {\n                balance += operation.Amount;\n            } else\
    \ if (operation.Operation.Equals(\"withdraw\")) {\n                balance -=\
    \ operation.Amount;\n            }\n        }\n        return balance < 0;", " \
    \       // Your code here\n        long balance = 0;\n        foreach (var operation\
    \ in operations) {\n            if (operation.OperationType == OperationType.Deposit)\
    \ {\n                balance += operation.Amount;\n            }\n           \
    \ else if (operation.OperationType == OperationType.Withdraw) {\n            \
    \    balance -= operation.Amount;\n            }\n        }\n        return balance\
    \ < 0;", "        long balance = operations.Sum();\n        if (balance < 0)\n\
    \            return true;\n        else\n            return false;", "       \
    \ long balance = operations.First();\n        foreach (var operation in operations.Skip(1))\n\
    \        {\n            if (operation == Deposit)\n            {\n           \
    \     balance += operation;\n            }\n            else if (operation ==\
    \ Withdraw)\n            {\n                balance -= operation;\n          \
    \  }\n            else\n            {\n                throw new ArgumentException(\"\
    Operation not recognized\");\n            }\n            if (balance < 0)\n  \
    \          {\n                return true;\n            }\n        }\n       \
    \ return false;", "        // Your code here\n        long balance = 0;\n    \
    \    foreach (var operation in operations) {\n            if (operation.Operator\
    \ == Operator.Deposit) {\n                balance += operation.Amount;\n     \
    \       }\n            else if (operation.Operator == Operator.Withdraw) {\n \
    \               balance -= operation.Amount;\n            }\n        }\n     \
    \   return balance < 0;", "        long balance = 0;\n        foreach (var op\
    \ in operations) {\n            long amount = op.Amount;\n            long deposit\
    \ = op.Deposit;\n            long withdrawal = op.Withdrawal;\n            balance\
    \ = balance + amount;\n            if (balance < 0) {\n                return\
    \ true;\n            }\n            if (balance > 0) {\n                balance\
    \ = balance - withdrawal;\n            }\n        }\n        return false;", '        //
    Your code here', "        long balance = 0;\n        foreach (var operation in\
    \ operations) {\n            if (operation.Operation.Equals(\"deposit\")) {\n\
    \                balance += operation.Amount;\n            } else if (operation.Operation.Equals(\"\
    withdraw\")) {\n                balance -= operation.Amount;\n            }\n\
    \        }\n        return balance < 0;", '        // Your code here', "     \
    \   // Your code here\n        long balance = 0;\n        foreach (var operation\
    \ in operations) {\n            if (operation == 1) {\n                balance\
    \ += operation;\n            }\n            else if (operation == -1) {\n    \
    \            balance -= operation;\n            }\n        }\n        return balance\
    \ < 0;", "        // Your code here\n        long balance = operations.Sum(x =>\
    \ x);\n        return balance < 0;", "        // Your code here\n        long\
    \ balance = 0;\n        foreach (var operation in operations) {\n            balance\
    \ = balance + operation;\n            if (balance < 0) {\n                return\
    \ true;\n            }\n        }\n        return false;", "        long balance\
    \ = operations.Sum();\n        if (balance < 0) {\n            return true;\n\
    \        }\n        return false;", "        long balance = 0;\n        foreach\
    \ (var operation in operations) {\n            long amount = operation;\n    \
    \        balance = balance + amount;\n            if (balance < 0) {\n       \
    \         return true;\n            }\n        }\n        return false;", "  \
    \      long balance = 0;\n        foreach (var operation in operations) {\n  \
    \          long amount = operation;\n            if (amount < 0) {\n         \
    \       balance -= amount;\n            } else {\n                balance += amount;\n\
    \            }\n        }\n        return balance < 0;", "        long balance\
    \ = operations.Sum();\n        return balance < 0;", "        long balance = 0;\n\
    \        foreach (long operation in operations) {\n            if (operation <\
    \ 0) {\n                balance -= operation;\n            }\n            else\
    \ if (operation > 0) {\n                balance += operation;\n            }\n\
    \            else {\n                throw new ArgumentException(\"Operation cannot\
    \ be both positive and negative\");\n            }\n        }\n        return\
    \ balance < 0;", "        long balance = operations.Sum();\n        return balance\
    \ < 0;", "        // Your code here\n        long balance = operations.Sum();\n\
    \        if (balance < 0)\n        {\n            return true;\n        }\n  \
    \      else\n        {\n            return false;\n        }", "        // Your\
    \ code goes here\n        long balance = 0;\n        foreach (var operation in\
    \ operations) {\n            if (operation == Deposit) {\n                balance\
    \ += operations.ElementAt(operations.Count - 1);\n            }\n            else\
    \ if (operation == Withdraw) {\n                balance -= operations.ElementAt(operations.Count\
    \ - 1);\n            }\n        }\n        return balance < 0;", "        // Your\
    \ code here\n        long balance = 0;\n        foreach (var operation in operations)\
    \ {\n            if (operation.Operation.Equals(\"deposit\")) {\n            \
    \    balance += operation.Amount;\n            }\n            else if (operation.Operation.Equals(\"\
    withdraw\")) {\n                balance -= operation.Amount;\n            }\n\
    \        }\n        return balance < 0;", "        long balance = 0;\n       \
    \ foreach (var operation in operations) {\n            if (operation.Operation\
    \ == Operation.Deposit) {\n                balance += operation.Amount;\n    \
    \        } else if (operation.Operation == Operation.Withdraw) {\n           \
    \     balance -= operation.Amount;\n            }\n        }\n        return balance\
    \ < 0;", "        // Your code goes here\n        long balance = 0;\n        foreach\
    \ (var operation in operations) {\n            long amount = operation;\n    \
    \        if (amount < 0) {\n                amount = 0;\n            }\n     \
    \       balance += amount;\n        }\n        return balance < 0;", "       \
    \ long balance = operations.First();\n        foreach (var operation in operations.Skip(1))\n\
    \        {\n            if (balance < 0)\n            {\n                return\
    \ true;\n            }\n            balance = balance - operation;\n        }\n\
    \        return false;", "        // Your code goes here\n        long balance\
    \ = operations.Sum();\n        if (balance < 0) {\n            return true;\n\
    \        }\n        return false;", "        // Your code goes here\n        long\
    \ balance = 0;\n        foreach (var operation in operations) {\n            if\
    \ (operation == 1) {\n                balance += operation;\n            }\n \
    \           else if (operation == -1) {\n                balance -= operation;\n\
    \            }\n        }\n        return balance < 0;", "        long balance\
    \ = operations.First();\n        foreach (long operation in operations.Skip(1))\n\
    \        {\n            if (operation < 0)\n            {\n                balance\
    \ = balance - operation;\n            }\n            else\n            {\n   \
    \             balance = balance + operation;\n            }\n            if (balance\
    \ < 0)\n            {\n                return true;\n            }\n        }\n\
    \        return false;", "        long balance = 0;\n        foreach (var operation\
    \ in operations) {\n            switch (operation) {\n                case Deposit:\n\
    \                    balance += 1;\n                    break;\n             \
    \   case Withdraw:\n                    balance -= 1;\n                    break;\n\
    \            }\n        }\n        return balance < 0;", "        long balance\
    \ = 0;\n        foreach (var operation in operations) {\n            switch (operation)\
    \ {\n                case 1:\n                    balance += 1;\n            \
    \        break;\n                case 2:\n                    balance -= 1;\n\
    \                    break;\n                case 3:\n                    balance\
    \ *= 2;\n                    break;\n                case 4:\n               \
    \     balance /= 2;\n                    break;\n            }\n        }\n  \
    \      return balance < 0;", "        // Your code here\n        long balance\
    \ = 0;\n        foreach (var operation in operations) {\n            if (operation\
    \ == Deposit) {\n                balance += operation.Amount;\n            } else\
    \ if (operation == Withdraw) {\n                balance -= operation.Amount;\n\
    \            }\n        }\n        return balance < 0;", "        long balance\
    \ = operations.Sum();\n        return balance < 0;", "        long balance = 0;\n\
    \        foreach (var operation in operations) {\n            switch (operation)\
    \ {\n                case Deposit:\n                    balance += 1;\n      \
    \              break;\n                case Withdraw:\n                    balance\
    \ -= 1;\n                    break;\n            }\n        }\n        return\
    \ balance < 0;", "        long balance = operations.Sum();\n        return balance\
    \ < 0;", "        long balance = operations.Sum();\n        if (balance < 0) {\n\
    \            return true;\n        }\n        return false;", "        long balance\
    \ = operations.First();\n        foreach (var operation in operations.Skip(1))\n\
    \        {\n            if (balance < 0)\n            {\n                return\
    \ true;\n            }\n            balance = balance - operation;\n        }\n\
    \        return false;", "        // Your code here\n        long balance = 0;\n\
    \        foreach (var operation in operations) {\n            if (operation ==\
    \ Deposit) {\n                balance += operations.ElementAt(operations.Count\
    \ - 1);\n            }\n            if (operation == Withdraw) {\n           \
    \     balance -= operations.ElementAt(operations.Count - 1);\n            }\n\
    \        }\n        return balance < 0;", "        // Your code here\n       \
    \ long sum = 0;\n        foreach (var item in operations) {\n            sum +=\
    \ item;\n        }\n        if (sum < 0)\n            return true;\n        else\n\
    \            return false;", "        long balance = 0;\n        foreach (long\
    \ operation in operations) {\n            balance = balance + operation;\n   \
    \         if (balance < 0) {\n                return true;\n            }\n  \
    \      }\n        return false;", '        // Your code here', "        long balance\
    \ = operations.Sum();\n        if (balance < 0)\n            return true;\n  \
    \      return false;", "        long balance = operations.Sum();\n        return\
    \ balance < 0;", "        long balance = 0;\n        foreach (var operation in\
    \ operations) {\n            if (operation.Operation == Operation.Deposit) {\n\
    \                balance += operation.Amount;\n            } else if (operation.Operation\
    \ == Operation.Withdraw) {\n                balance -= operation.Amount;\n   \
    \         }\n        }\n        return balance < 0;", "        long balance =\
    \ 0;\n        foreach (long operation in operations) {\n            balance =\
    \ balance + operation;\n            if (balance < 0) {\n                return\
    \ true;\n            }\n        }\n        return false;", "        long balance\
    \ = 0;\n        foreach (var operation in operations) {\n            long operationAmount\
    \ = operation;\n            switch (operation) {\n                case 1:\n  \
    \                  balance += operationAmount;\n                    break;\n \
    \               case 2:\n                    balance -= operationAmount;\n   \
    \                 break;\n                case 3:\n                    balance\
    \ *= operationAmount;\n                    break;\n                case 4:\n \
    \                   balance /= operationAmount;\n                    break;\n\
    \            }\n        }\n        return balance < 0;", "        // Your code\
    \ here\n        long balance = 0;\n        foreach (var operation in operations)\
    \ {\n            if (operation.Operator == Operation.Deposit) {\n            \
    \    balance += operation.Amount;\n            } else if (operation.Operator ==\
    \ Operation.Withdraw) {\n                balance -= operation.Amount;\n      \
    \      }\n        }\n        return balance < 0;", "        long balance = 0;\n\
    \        foreach (var operation in operations) {\n            long operationAmount\
    \ = operation;\n            if (operationAmount < 0) {\n                operationAmount\
    \ = -operationAmount;\n            }\n            balance += operationAmount;\n\
    \        }\n        return balance < 0;", "        long balance = 0;\n       \
    \ foreach (var operation in operations) {\n            if (operation.Operation.Equals(\"\
    deposit\")) {\n                balance += operation.Amount;\n            } else\
    \ if (operation.Operation.Equals(\"withdraw\")) {\n                balance -=\
    \ operation.Amount;\n            }\n        }\n        return balance < 0;", " \
    \       long balance = operations.Sum();\n        return balance < 0;", "    \
    \    long balance = 0;\n        foreach (var operation in operations) {\n    \
    \        switch (operation) {\n                case Deposit:\n               \
    \     balance += operation.Amount;\n                    break;\n             \
    \   case Withdraw:\n                    balance -= operation.Amount;\n       \
    \             break;\n            }\n        }\n        return balance < 0;",
  "        long balance = 0;\n        foreach (var op in operations) {\n         \
    \   balance = balance + op;\n            if (balance < 0) {\n                return\
    \ true;\n            }\n        }\n        return false;", "        long balance\
    \ = 0;\n        foreach (long operation in operations) {\n            if (operation\
    \ > 0)\n                balance += operation;\n            else if (operation\
    \ < 0)\n                balance -= operation;\n            else\n            \
    \    return true;\n        }\n        return balance < 0;", "        // Your code\
    \ goes here\n        long balance = 0;\n        foreach (var operation in operations)\
    \ {\n            if (operation == Deposit) {\n                balance += operation.Amount;\n\
    \            } else if (operation == Withdraw) {\n                balance -= operation.Amount;\n\
    \            }\n        }\n        return balance < 0;", "        // Your code\
    \ here\n        long sum = 0;\n        foreach (var operation in operations) {\n\
    \            sum += operation;\n        }\n        return sum < 0;", "       \
    \ long balance = operations.Sum();\n        return balance < 0;", "        long\
    \ balance = 0;\n        foreach (var operation in operations) {\n            if\
    \ (operation == Deposit) {\n                balance += operations[operations.IndexOf(operation)];\n\
    \            } else if (operation == Withdraw) {\n                balance -= operations[operations.IndexOf(operation)];\n\
    \            }\n        }\n        return balance < 0;", "        long balance\
    \ = 0;\n        foreach (var operation in operations) {\n            if (operation\
    \ == Deposit) {\n                balance += operation.Amount;\n            } else\
    \ if (operation == Withdraw) {\n                balance -= operation.Amount;\n\
    \            }\n        }\n        return balance < 0;", "        // Your code\
    \ goes here\n        long balance = operations.Sum();\n        return balance\
    \ < 0;", "        // Your code here\n        long balance = operations.Sum();\n\
    \        if (balance < 0) {\n            return true;\n        }\n        return\
    \ false;", "        long balance = 0;\n        foreach (var operation in operations)\
    \ {\n            if (operation == Deposit) {\n                balance += 1;\n\
    \            } else if (operation == Withdraw) {\n                balance -= 1;\n\
    \            }\n        }\n        return balance < 0;", "        long balance\
    \ = 0;\n        foreach (var operation in operations) {\n            if (operation\
    \ == Deposit) {\n                balance += 1;\n            } else if (operation\
    \ == Withdraw) {\n                balance -= 1;\n            }\n        }\n  \
    \      return balance < 0;", "        long balance = 0;\n        foreach (var\
    \ operation in operations) {\n            if (operation == Deposit) {\n      \
    \          balance += 1;\n            } else if (operation == Withdraw) {\n  \
    \              balance -= 1;\n            }\n        }\n        return balance\
    \ < 0;", "        long balance = operations.Sum();\n        return balance < 0;",
  "        long balance = 0;\n        foreach (var operation in operations) {\n  \
    \          if (operation == Deposit) {\n                balance += operations[operations.IndexOf(operation)];\n\
    \            } else if (operation == Withdraw) {\n                balance -= operations[operations.IndexOf(operation)];\n\
    \            }\n        }\n        return balance < 0;", "        // Your code\
    \ goes here\n        long balance = 0;\n        foreach (var operation in operations)\
    \ {\n            long amount = operation;\n            if (amount < 0) {\n   \
    \             balance -= amount;\n            } else {\n                balance\
    \ += amount;\n            }\n        }\n        return balance < 0;", "      \
    \  // Your code here\n        long balance = 0;\n        foreach (var operation\
    \ in operations) {\n            long amount = operation;\n            if (amount\
    \ < 0) {\n                amount = 0;\n            }\n            balance += amount;\n\
    \        }\n        return balance < 0;", "        // Your code here\n       \
    \ long balance = operations.Sum();\n        if (balance < 0)\n            return\
    \ true;\n        else\n            return false;", "        long balance = 0;\n\
    \        foreach (var operation in operations) {\n            switch (operation)\
    \ {\n                case Deposit:\n                    balance += 1;\n      \
    \              break;\n                case Withdraw:\n                    balance\
    \ -= 1;\n                    break;\n            }\n        }\n        return\
    \ balance < 0;", "        // Your code goes here\n        long balance = 0;\n\
    \        foreach (var operation in operations) {\n            balance = balance\
    \ + operation;\n            if (balance < 0) {\n                return true;\n\
    \            }\n        }\n        return false;", "        long balance = 0;\n\
    \        foreach (long operation in operations) {\n            balance = balance\
    \ + operation;\n            if (balance < 0) {\n                return true;\n\
    \            }\n        }\n        return false;", "        long balance = 0;\n\
    \        foreach (var operation in operations) {\n            if (operation.Operation.Equals(\"\
    deposit\")) {\n                balance += operation.Amount;\n            }\n \
    \           else if (operation.Operation.Equals(\"withdraw\")) {\n           \
    \     balance -= operation.Amount;\n            }\n        }\n        return balance\
    \ < 0;", "        // Your code here\n        long balance = operations.Sum(x =>\
    \ x);\n        return balance < 0;", "        long balance = 0;\n        foreach\
    \ (var operation in operations) {\n            long amount = operation;\n    \
    \        if (amount < 0) {\n                balance -= amount;\n            }\
    \ else {\n                balance += amount;\n            }\n        }\n     \
    \   return balance < 0;", "        long balance = 0;\n        foreach (long operation\
    \ in operations) {\n            if (operation == Deposit) {\n                balance\
    \ += 1;\n            } else if (operation == Withdraw) {\n                balance\
    \ -= 1;\n            }\n        }\n        return balance < 0;", "        long\
    \ balance = 0;\n        foreach (var operation in operations) {\n            long\
    \ amount = operation;\n            if (amount < 0) {\n                balance\
    \ -= amount;\n            } else {\n                balance += amount;\n     \
    \       }\n        }\n        return balance < 0;", "        long balance = operations.Sum();\n\
    \        return balance < 0;", "        long balance = 0;\n        foreach (var\
    \ operation in operations) {\n            if (operation == Deposit) {\n      \
    \          balance += operations[operations.IndexOf(operation)];\n           \
    \ } else if (operation == Withdraw) {\n                balance -= operations[operations.IndexOf(operation)];\n\
    \            }\n        }\n        return balance < 0;", "        // Your code\
    \ goes here\n        long sum = 0;\n        foreach (var item in operations) {\n\
    \            sum += item;\n        }\n        if (sum < 0)\n            return\
    \ true;\n        else\n            return false;", "        long balance = 0;\n\
    \        foreach (var operation in operations) {\n            switch (operation)\
    \ {\n                case Deposit:\n                    balance += 1;\n      \
    \              break;\n                case Withdraw:\n                    balance\
    \ -= 1;\n                    break;\n            }\n        }\n        return\
    \ balance < 0;", "        long balance = 0;\n        foreach (var operation in\
    \ operations) {\n            switch (operation) {\n                case 1:\n \
    \                   balance += 1;\n                    break;\n              \
    \  case 2:\n                    balance -= 1;\n                    break;\n  \
    \              case 3:\n                    balance *= 2;\n                  \
    \  break;\n                case 4:\n                    balance /= 2;\n      \
    \              break;\n            }\n        }\n        return balance < 0;",
  "        // Your code here\n        long balance = 0;\n        foreach (var operation\
    \ in operations) {\n            if (operation == 1) {\n                balance\
    \ += operation;\n            }\n            else if (operation == -1) {\n    \
    \            balance -= operation;\n            }\n            else {\n      \
    \          throw new ArgumentException(\"Operation should be 1 or -1\");\n   \
    \         }\n        }\n        return balance < 0;", "        long balance =\
    \ operations.Sum();\n        if (balance < 0) {\n            return true;\n  \
    \      }\n        return false;", "        // Your code here\n        long balance\
    \ = operations.Sum();\n        return balance < 0;", "        // Your code here\n\
    \        long balance = operations.Sum();\n        if (balance < 0) {\n      \
    \      return true;\n        }\n        return false;", "        long balance\
    \ = operations.Sum();\n        if (balance < 0)\n            return true;\n  \
    \      else\n            return false;", "        // Your code here\n        long\
    \ balance = operations.Sum();\n        if (balance < 0)\n            return true;\n\
    \        else\n            return false;", '        // Your code here', "    \
    \    // Your code goes here\n        long balance = 0;\n        foreach (var operation\
    \ in operations) {\n            if (operation.Operation.Equals(\"deposit\")) {\n\
    \                balance += operation.Amount;\n            }\n            else\
    \ if (operation.Operation.Equals(\"withdraw\")) {\n                balance -=\
    \ operation.Amount;\n            }\n        }\n        return balance < 0;", " \
    \       long balance = 0;\n        foreach (var operation in operations) {\n \
    \           if (operation == Deposit) {\n                balance += operation.Amount;\n\
    \            } else if (operation == Withdraw) {\n                balance -= operation.Amount;\n\
    \            }\n        }\n        return balance < 0;", "        // Your code\
    \ here\n        long balance = operations.Sum();\n        if (balance < 0) {\n\
    \            return true;\n        }\n        return false;", "        // Your\
    \ code here\n        long balance = 0;\n        foreach (var operation in operations)\
    \ {\n            long deposit = operation.Deposit;\n            long withdraw\
    \ = operation.Withdraw;\n            balance = balance + deposit - withdraw;\n\
    \        }\n        return balance < 0;", "        long balance = 0;\n       \
    \ foreach (var operation in operations) {\n            switch (operation) {\n\
    \                case Deposit:\n                    balance += operation.Amount;\n\
    \                    break;\n                case Withdraw:\n                \
    \    balance -= operation.Amount;\n                    break;\n            }\n\
    \        }\n        return balance < 0;", "        long balance = 0;\n       \
    \ foreach (long operation in operations) {\n            if (operation < 0) {\n\
    \                balance -= operation;\n            } else {\n               \
    \ balance += operation;\n            }\n            if (balance < 0) {\n     \
    \           return true;\n            }\n        }\n        return false;", " \
    \       long balance = 0;\n        foreach (var operation in operations) {\n \
    \           switch (operation) {\n                case Deposit:\n            \
    \        balance += 1;\n                    break;\n                case Withdraw:\n\
    \                    balance -= 1;\n                    break;\n            }\n\
    \        }\n        return balance < 0;", "        long balance = 0;\n       \
    \ foreach (long op in operations) {\n            if (op == 1) {\n            \
    \    balance += 1;\n            } else if (op == -1) {\n                balance\
    \ -= 1;\n            }\n        }\n        return balance < 0;", '        // Your
    code here', "        long balance = 0;\n        foreach (var operation in operations)\
    \ {\n            if (operation == Deposit) {\n                balance += 1;\n\
    \            } else if (operation == Withdraw) {\n                balance -= 1;\n\
    \            }\n        }\n        return balance < 0;", "        long balance\
    \ = operations.Sum();\n        return balance < 0;", "        long balance = operations.Sum();\n\
    \        return balance < 0;", "        long balance = operations.Sum();\n   \
    \     return balance < 0;", "        // Your code here\n        long balance =\
    \ 0;\n        foreach (var operation in operations) {\n            if (operation.Operation.Equals(\"\
    deposit\")) {\n                balance += operation.Amount;\n            }\n \
    \           else if (operation.Operation.Equals(\"withdraw\")) {\n           \
    \     balance -= operation.Amount;\n            }\n        }\n        return balance\
    \ < 0;", "        // Your code here\n        long balance = 0;\n        foreach\
    \ (var operation in operations) {\n            long amount = operation;\n    \
    \        balance = balance + amount;\n        }\n        if (balance < 0) {\n\
    \            return true;\n        }\n        return false;", "        // Your\
    \ code here\n        long balance = 0;\n        foreach (var op in operations)\
    \ {\n            long deposit = op.Deposit;\n            long withdrawal = op.Withdrawal;\n\
    \            balance = balance + deposit - withdrawal;\n        }\n        return\
    \ balance < 0;", "        // Your code goes here\n        long sum = 0;\n    \
    \    foreach (var item in operations) {\n            sum += item;\n        }\n\
    \        if (sum < 0)\n            return true;\n        else\n            return\
    \ false;", "        long balance = 0;\n        foreach (var operation in operations)\
    \ {\n            if (operation == Deposit) {\n                balance += operation.Amount;\n\
    \            } else if (operation == Withdraw) {\n                balance -= operation.Amount;\n\
    \            }\n        }\n        return balance < 0;", "        // Your code\
    \ here\n        long balance = 0;\n        foreach (var operation in operations)\
    \ {\n            if (operation == 1) {\n                balance += operation;\n\
    \            }\n            else if (operation == -1) {\n                balance\
    \ -= operation;\n            }\n        }\n        return balance < 0;", "   \
    \     long balance = operations.First();\n        foreach (var operation in operations.Skip(1))\n\
    \        {\n            if (balance < 0)\n            {\n                return\
    \ true;\n            }\n            balance = balance - operation;\n        }\n\
    \        return false;", "        long balance = 0;\n        foreach (var operation\
    \ in operations) {\n            if (operation == Deposit) {\n                balance\
    \ += 1;\n            } else if (operation == Withdraw) {\n                balance\
    \ -= 1;\n            }\n        }\n        return balance < 0;", "        // Your\
    \ code goes here\n        long balance = 0;\n        foreach (var operation in\
    \ operations) {\n            long amount = operation;\n            if (amount\
    \ < 0) {\n                balance = balance - amount;\n            } else {\n\
    \                balance = balance + amount;\n            }\n        }\n     \
    \   return balance < 0;", "        long balance = 0;\n        foreach (var operation\
    \ in operations) {\n            switch (operation) {\n                case Deposit:\n\
    \                    balance += operation.Amount;\n                    break;\n\
    \                case Withdraw:\n                    balance -= operation.Amount;\n\
    \                    break;\n            }\n        }\n        return balance\
    \ < 0;", "        // Your code here\n        long balance = operations.Sum();\n\
    \        if (balance < 0)\n            return true;\n        else\n          \
    \  return false;", "        // Your code here\n        long sum = 0;\n       \
    \ foreach (var item in operations)\n        {\n            sum += item;\n    \
    \    }\n        if (sum < 0)\n        {\n            return true;\n        }\n\
    \        else\n        {\n            return false;\n        }", "        long\
    \ balance = 0;\n        foreach (var operation in operations) {\n            if\
    \ (operation == Deposit) {\n                balance += 1;\n            } else\
    \ if (operation == Withdraw) {\n                balance -= 1;\n            }\n\
    \        }\n        return balance < 0;", "        // Your code here\n       \
    \ long balance = 0;\n        foreach (var operation in operations) {\n       \
    \     if (operation == 1) {\n                balance += operation;\n         \
    \   } else if (operation == -1) {\n                balance -= operation;\n   \
    \         }\n        }\n        return balance < 0;", "        long balance =\
    \ 0;\n        foreach (var operation in operations) {\n            if (operation\
    \ == Deposit) {\n                balance += 1;\n            } else if (operation\
    \ == Withdraw) {\n                balance -= 1;\n            }\n        }\n  \
    \      return balance < 0;", "        // Your code goes here\n        long balance\
    \ = 0;\n        foreach (var operation in operations) {\n            if (operation\
    \ == Deposit) {\n                balance += operation.Amount;\n            } else\
    \ if (operation == Withdraw) {\n                balance -= operation.Amount;\n\
    \            }\n        }\n        return balance < 0;", "        long balance\
    \ = operations.First();\n        foreach (var operation in operations.Skip(1))\n\
    \        {\n            if (operation == Deposit)\n            {\n           \
    \     balance += operation;\n            }\n            else if (operation ==\
    \ Withdraw)\n            {\n                balance -= operation;\n          \
    \  }\n            else\n            {\n                throw new ArgumentException(\"\
    Invalid operation\");\n            }\n            if (balance < 0)\n         \
    \   {\n                return true;\n            }\n        }\n        return\
    \ false;", "        long balance = 0;\n        foreach (var operation in operations)\
    \ {\n            if (operation.Operation.Equals(\"deposit\")) {\n            \
    \    balance += operation.Amount;\n            }\n            else if (operation.Operation.Equals(\"\
    withdraw\")) {\n                balance -= operation.Amount;\n            }\n\
    \        }\n        return balance < 0;", "        // Your code here\n       \
    \ long balance = operations.Sum();\n        if (balance < 0) {\n            return\
    \ true;\n        }\n        return false;", "        // Your code goes here\n\
    \        long balance = 0;\n        foreach (var operation in operations) {\n\
    \            long amount = operation;\n            if (amount < 0) {\n       \
    \         amount = 0;\n            }\n            balance = balance + amount;\n\
    \        }\n        return balance < 0;", "        // Your code here\n       \
    \ long balance = operations.Sum();\n        if (balance < 0) {\n            return\
    \ true;\n        }\n        return false;", "        // Your code here\n     \
    \   long balance = 0;\n        foreach (var operation in operations) {\n     \
    \       long deposit = operation[0];\n            long withdrawal = operation[1];\n\
    \            balance = balance + deposit - withdrawal;\n        }\n        if\
    \ (balance < 0) {\n            return true;\n        }\n        return false;",
  "        // Your code here\n        long balance = operations.Sum();\n        if\
    \ (balance < 0) {\n            return true;\n        }\n        return false;",
  "        long balance = 0;\n        foreach (var operation in operations) {\n  \
    \          switch (operation) {\n                case 1:\n                   \
    \ balance += 1;\n                    break;\n                case 2:\n       \
    \             balance -= 1;\n                    break;\n                case\
    \ 3:\n                    balance *= 2;\n                    break;\n        \
    \        case 4:\n                    balance /= 2;\n                    break;\n\
    \            }\n        }\n        return balance < 0;", "        // Your code\
    \ here\n        long balance = 0;\n        foreach (var operation in operations)\
    \ {\n            if (operation == 1) {\n                balance += operation;\n\
    \            }\n            else if (operation == -1) {\n                balance\
    \ -= operation;\n            }\n        }\n        return balance < 0;", "   \
    \     long balance = 0;\n        foreach (var operation in operations) {\n   \
    \         if (operation == Deposit) {\n                balance += operations[operations.IndexOf(operation)];\n\
    \            } else if (operation == Withdraw) {\n                balance -= operations[operations.IndexOf(operation)];\n\
    \            }\n        }\n        return balance < 0;", "        // Your code\
    \ here\n        long balance = operations.Sum();\n        if (balance < 0)\n \
    \           return true;\n        else\n            return false;", "        long\
    \ balance = 0;\n        foreach (var operation in operations) {\n            if\
    \ (operation == Deposit) {\n                balance += 1;\n            } else\
    \ if (operation == Withdraw) {\n                balance -= 1;\n            }\n\
    \        }\n        return balance < 0;", "        // Your code here\n       \
    \ long balance = 0;\n        foreach (var operation in operations) {\n       \
    \     if (operation.Operator == Operation.Deposit) {\n                balance\
    \ += operation.Amount;\n            } else if (operation.Operator == Operation.Withdraw)\
    \ {\n                balance -= operation.Amount;\n            }\n        }\n\
    \        return balance < 0;", "        long balance = 0;\n        foreach (var\
    \ operation in operations) {\n            switch (operation) {\n             \
    \   case Deposit:\n                    balance += operation.Amount;\n        \
    \            break;\n                case Withdraw:\n                    balance\
    \ -= operation.Amount;\n                    break;\n            }\n        }\n\
    \        return balance < 0;", "        long balance = 0;\n        foreach (var\
    \ operation in operations) {\n            if (operation.Operator == Operator.Deposit)\
    \ {\n                balance += operation.Amount;\n            } else if (operation.Operator\
    \ == Operator.Withdraw) {\n                balance -= operation.Amount;\n    \
    \        }\n        }\n        return balance < 0;", "        long balance = 0;\n\
    \        foreach (var operation in operations) {\n            if (operation ==\
    \ Deposit) {\n                balance += 1;\n            } else if (operation\
    \ == Withdraw) {\n                balance -= 1;\n            }\n        }\n  \
    \      return balance < 0;", '        // Your code here', "        long balance\
    \ = 0;\n        foreach (var operation in operations) {\n            if (operation\
    \ == Deposit) {\n                balance += 1;\n            } else if (operation\
    \ == Withdraw) {\n                balance -= 1;\n            }\n        }\n  \
    \      return balance < 0;", "        // Your code goes here\n        long sum\
    \ = 0;\n        foreach (var item in operations) {\n            sum += item;\n\
    \        }\n        if (sum < 0)\n            return true;\n        else\n   \
    \         return false;", "        // Your code here\n        long balance = 0;\n\
    \        foreach (var operation in operations) {\n            long amount = operation;\n\
    \            if (amount < 0) {\n                balance = balance - amount;\n\
    \            }\n            else {\n                balance = balance + amount;\n\
    \            }\n        }\n        return balance < 0;", "        // Your code\
    \ here\n        long balance = 0;\n        foreach (var operation in operations)\
    \ {\n            long amount = operation;\n            if (amount < 0) {\n   \
    \             balance -= amount;\n            } else {\n                balance\
    \ += amount;\n            }\n        }\n        return balance < 0;", "      \
    \  long balance = 0;\n        foreach (var operation in operations) {\n      \
    \      long amount = operation;\n            if (amount < 0) {\n             \
    \   amount = -amount;\n            }\n            balance = balance + amount;\n\
    \        }\n        return balance < 0;", "        // Your code here\n       \
    \ long balance = operations.Sum();\n        if (balance < 0) {\n            return\
    \ true;\n        }\n        return false;", "        long balance = 0;\n     \
    \   foreach (var operation in operations) {\n            long amount = operation;\n\
    \            if (amount < 0) {\n                balance -= amount;\n         \
    \   } else {\n                balance += amount;\n            }\n        }\n \
    \       return balance < 0;", "        // Your code here\n        long sum = 0;\n\
    \        foreach (var item in operations) {\n            sum += item;\n      \
    \  }\n        if (sum < 0)\n            return true;\n        else\n         \
    \   return false;", "        long balance = 0;\n        foreach (var operation\
    \ in operations) {\n            long amount = operation;\n            if (amount\
    \ < 0) {\n                balance -= amount;\n            } else {\n         \
    \       balance += amount;\n            }\n        }\n        return balance <\
    \ 0;", "        // Your code here\n        long balance = operations.Sum();\n\
    \        if (balance < 0)\n            return true;\n        else\n          \
    \  return false;", "        // Your code here\n        long balance = 0;\n   \
    \     foreach (var operation in operations) {\n            long amount = operation;\n\
    \            balance = balance + amount;\n        }\n        if (balance < 0)\
    \ {\n            return true;\n        }\n        return false;", "        long\
    \ balance = 0;\n        foreach (var operation in operations) {\n            long\
    \ amount = operation;\n            balance = balance + amount;\n        }\n  \
    \      if (balance < 0) {\n            return true;\n        }\n        return\
    \ false;", "        long balance = 0;\n        foreach (var operation in operations)\
    \ {\n            long deposit = operation[0];\n            long withdrawal = operation[1];\n\
    \            balance = balance + deposit - withdrawal;\n        }\n        return\
    \ balance < 0;", "        // Your code here\n        long balance = operations.Sum();\n\
    \        if (balance < 0) {\n            return true;\n        }\n        return\
    \ false;", "        // Your code here\n        long sum = 0;\n        foreach\
    \ (var item in operations) {\n            sum += item;\n        }\n        if\
    \ (sum < 0)\n            return true;\n        else\n            return false;",
  "        // Your code goes here\n        long balance = 0;\n        foreach (var\
    \ operation in operations) {\n            if (operation == Deposit) {\n      \
    \          balance += operation.Amount;\n            } else if (operation == Withdraw)\
    \ {\n                balance -= operation.Amount;\n            }\n        }\n\
    \        return balance < 0;", "        // Your code here\n        long sum =\
    \ 0;\n        foreach (var item in operations) {\n            sum += item;\n \
    \       }\n        if (sum < 0)\n            return true;\n        return false;",
  "        long balance = 0;\n        foreach (var operation in operations) {\n  \
    \          if (operation == Deposit) {\n                balance += operation.Amount;\n\
    \            } else if (operation == Withdraw) {\n                balance -= operation.Amount;\n\
    \            }\n        }\n        return balance < 0;", "        long balance\
    \ = 0;\n        foreach (var operation in operations) {\n            if (operation\
    \ == Deposit) {\n                balance += 1;\n            } else if (operation\
    \ == Withdraw) {\n                balance -= 1;\n            }\n        }\n  \
    \      return balance < 0;", "        long balance = 0;\n        foreach (var\
    \ operation in operations) {\n            switch(operation) {\n              \
    \  case Deposit:\n                    balance += operation.Amount;\n         \
    \           break;\n                case Withdraw:\n                    balance\
    \ -= operation.Amount;\n                    break;\n            }\n        }\n\
    \        return balance < 0;", "        long balance = 0;\n        foreach (var\
    \ operation in operations) {\n            if (operation == Deposit) {\n      \
    \          balance += operations[operations.IndexOf(operation)];\n           \
    \ } else if (operation == Withdraw) {\n                balance -= operations[operations.IndexOf(operation)];\n\
    \            }\n        }\n        return balance < 0;", "        long balance\
    \ = 0;\n        foreach (long operation in operations) {\n            if (operation\
    \ == Deposit) {\n                balance += operations[operations.Count - 1];\n\
    \            } else if (operation == Withdraw) {\n                balance -= operations[operations.Count\
    \ - 1];\n            }\n        }\n        return balance < 0;", "        // Your\
    \ code goes here\n        long sum = 0;\n        foreach (var item in operations)\
    \ {\n            sum += item;\n        }\n        if (sum < 0)\n            return\
    \ true;\n        else\n            return false;", "        // Your code here\n\
    \        long balance = operations.Sum();\n        return balance < 0;", "   \
    \     long balance = operations.Sum();\n        if (balance < 0) {\n         \
    \   return true;\n        }\n        return false;", "        long balance = operations.First();\n\
    \        foreach (long op in operations.Skip(1)) {\n            if (op > balance)\
    \ {\n                return true;\n            }\n            balance -= op;\n\
    \        }\n        return false;", "        long balance = 0;\n        foreach\
    \ (var operation in operations) {\n            switch (operation) {\n        \
    \        case Deposit:\n                    balance += 1;\n                  \
    \  break;\n                case Withdraw:\n                    balance -= 1;\n\
    \                    break;\n            }\n        }\n        return balance\
    \ < 0;", "        // Your code goes here\n        long balance = 0;\n        foreach\
    \ (var operation in operations) {\n            if (operation == Deposit) {\n \
    \               balance += operation.Amount;\n            } else if (operation\
    \ == Withdraw) {\n                balance -= operation.Amount;\n            }\n\
    \        }\n        return balance < 0;", "        // Your code goes here\n  \
    \      long sum = 0;\n        foreach (var item in operations) {\n           \
    \ sum += item;\n        }\n        if (sum < 0)\n            return true;\n  \
    \      return false;"]
stop_tokens:
- "\n    }\n"
