name: HumanEval_116_sort_array
language: cs
prompt: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\n\
  using System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass\
  \ Problem {\n    // In this Kata, you have to sort an array of non-negative integers\
  \ according to\n    // number of ones in their binary representation in ascending\
  \ order.\n    // For similar number of ones, sort based on decimal value.\n    //\
  \ It must be implemented like this:\n    public static List<long> SortArray(List<long>\
  \ arr) {\n"
tests: "    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortArray((new\
  \ List<long>(new long[]{(long)1L, (long)5L, (long)2L, (long)3L, (long)4L}))).Equals((new\
  \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L}))));\n\
  \    Debug.Assert(SortArray((new List<long>(new long[]{(long)-2L, (long)-3L, (long)-4L,\
  \ (long)-5L, (long)-6L}))).Equals((new List<long>(new long[]{(long)-4L, (long)-2L,\
  \ (long)-6L, (long)-5L, (long)-3L}))));\n    Debug.Assert(SortArray((new List<long>(new\
  \ long[]{(long)1L, (long)0L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new\
  \ long[]{(long)0L, (long)1L, (long)2L, (long)4L, (long)3L}))));\n    Debug.Assert(SortArray((new\
  \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(SortArray((new List<long>(new\
  \ long[]{(long)2L, (long)5L, (long)77L, (long)4L, (long)5L, (long)3L, (long)5L,\
  \ (long)7L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L,\
  \ (long)2L, (long)4L, (long)4L, (long)3L, (long)3L, (long)5L, (long)5L, (long)5L,\
  \ (long)7L, (long)77L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)3L,\
  \ (long)6L, (long)44L, (long)12L, (long)32L, (long)5L}))).Equals((new List<long>(new\
  \ long[]{(long)32L, (long)3L, (long)5L, (long)6L, (long)12L, (long)44L}))));\n \
  \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)8L,\
  \ (long)16L, (long)32L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,\
  \ (long)8L, (long)16L, (long)32L}))));\n    Debug.Assert(SortArray((new List<long>(new\
  \ long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))).Equals((new List<long>(new\
  \ long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))));\n    }\n\n}\n"
completions: ["        long ones = arr.Sum(x => x & 1);\n        long tens = arr.Sum(x\
    \ => x >> 1);\n        long hundreds = arr.Sum(x => x >> 2);\n        long thousands\
    \ = arr.Sum(x => x >> 3);\n        long tenThousands = arr.Sum(x => x >> 4);\n\
    \        long oneHundred = arr.Sum(x => x >> 5);\n        long oneThousand = arr.Sum(x\
    \ => x >> 6);\n        long oneTenThousand = arr.Sum(x => x >> 7);\n        long\
    \ oneHundredThousand = arr.Sum(x => x >> 8);\n        long oneHundredThousandThousand\
    \ = arr.Sum(x => x >> 9);\n        long oneHundredThousandThousandThousand = arr.Sum(x\
    \ => x >> 10);\n        long oneHundredThousandThousandThousandThousand = arr.Sum(x\
    \ => x >> 11);\n        long oneHundredThousandThousandThousandThousandThousand\
    \ = arr.Sum(x => x >> 12);\n        long oneHundredThousandThousandThousandThousandThousandThousand\
    \ = arr.Sum(x => x >> 13);\n        long oneHundredThousandThousandThousandThousandThousandThousandThousand\
    \ = arr.Sum(x => x >> 14);\n        long oneHundredThousandThousandThousandThousandThousandThousandThousandThousand\
    \ = arr.Sum(x => x >> 15);\n        long oneHundredThousandThousandThousandThousandThousandThousandThousandThousand\
    \ = arr.Sum(x => x >> 16);\n        long oneHundredThousandThousandThousandThousandThousandThousandThousandThousandThousand\
    \ = arr.Sum(x => x >> 17);\n        long oneHundredThousandThousandThousandThousandThousandThousandThousandThousandThousandThousand\
    \ = arr.Sum(x => x >> 18);\n        long oneHundredThousandThousandThousandThousandThousandThousandThousand",
  "        long ones = 0;\n        long zeros = 0;\n        long max = 0;\n      \
    \  long min = 0;\n        foreach (long i in arr) {\n            if (i == 1) {\n\
    \                ones++;\n            }\n            if (i == 0) {\n         \
    \       zeros++;\n            }\n            if (i > max) {\n                max\
    \ = i;\n            }\n            if (i < min) {\n                min = i;\n\
    \            }\n        }\n        List<long> result = new List<long>();\n   \
    \     if (ones > zeros) {\n            result.Add(min);\n            result.AddRange(arr.Where(i\
    \ => i == 1).OrderBy(i => i).Take(ones).ToList());\n            result.AddRange(arr.Where(i\
    \ => i == 0).OrderBy(i => i).Take(zeros).ToList());\n        }\n        if (zeros\
    \ > ones) {\n            result.AddRange(arr.Where(i => i == 1).OrderBy(i => i).Take(zeros).ToList());\n\
    \            result.Add(max);\n            result.AddRange(arr.Where(i => i ==\
    \ 0).OrderBy(i => i).Take(ones).ToList());\n        }\n        return result;",
  "        long ones = 0;\n        long zeros = 0;\n        long max = 0;\n      \
    \  foreach (long i in arr) {\n            ones += i;\n            zeros -= i;\n\
    \            if (ones > max) {\n                max = ones;\n            }\n \
    \           if (zeros > max) {\n                max = zeros;\n            }\n\
    \        }\n        long onesCount = 0;\n        long zerosCount = 0;\n      \
    \  long maxCount = 0;\n        foreach (long i in arr) {\n            if (i ==\
    \ 1) {\n                onesCount++;\n            } else {\n                zerosCount++;\n\
    \            }\n            if (onesCount > maxCount) {\n                maxCount\
    \ = onesCount;\n            }\n            if (zerosCount > maxCount) {\n    \
    \            maxCount = zerosCount;\n            }\n        }\n        List<long>\
    \ result = new List<long>();\n        foreach (long i in arr) {\n            if\
    \ (i == 1) {\n                result.Add(i);\n            } else {\n         \
    \       result.Add(maxCount - zerosCount - onesCount);\n            }\n      \
    \  }\n        return result;", "        long ones = 0;\n        long zeros = 0;\n\
    \        long maxOnes = 0;\n        long maxZeros = 0;\n        long maxOnesCount\
    \ = 0;\n        long maxZerosCount = 0;\n        long maxOnesCount2 = 0;\n   \
    \     long maxZerosCount2 = 0;\n        long maxOnesCount3 = 0;\n        long\
    \ maxZerosCount3 = 0;\n        long maxOnesCount4 = 0;\n        long maxZerosCount4\
    \ = 0;\n        long maxOnesCount5 = 0;\n        long maxZerosCount5 = 0;\n  \
    \      long maxOnesCount6 = 0;\n        long maxZerosCount6 = 0;\n        long\
    \ maxOnesCount7 = 0;\n        long maxZerosCount7 = 0;\n        long maxOnesCount8\
    \ = 0;\n        long maxZerosCount8 = 0;\n        long maxOnesCount9 = 0;\n  \
    \      long maxZerosCount9 = 0;\n        long maxOnesCount10 = 0;\n        long\
    \ maxZerosCount10 = 0;\n        long maxOnesCount11 = 0;\n        long maxZerosCount11\
    \ = 0;\n        long maxOnesCount12 = 0;\n        long maxZerosCount12 = 0;\n\
    \        long maxOnesCount13 = 0;\n        long maxZerosCount13 = 0;\n       \
    \ long maxOnesCount14 = 0;\n        long maxZerosCount14 = 0;\n        long maxOnesCount15\
    \ = 0;\n        long maxZerosCount15 = 0;\n        long maxOnesCount16 = 0;\n\
    \        long maxZerosCount16 = 0;\n        long maxOnesCount17 = 0;\n       \
    \ long maxZerosCount17 = 0;\n        long maxOnesCount18 = 0;\n        long maxZerosCount18\
    \ = 0;\n        long maxOnesCount19 = 0;\n        long maxZerosCount19 = 0;\n\
    \        long maxOnesCount20 = 0;\n        long maxZerosCount20 = 0;\n       \
    \ long maxOnesCount21 = 0;\n        long maxZerosCount21 = 0;\n        long maxOnesCount22\
    \ = 0;\n        long maxZerosCount22 = 0;\n        long maxOnesCount23 = 0;\n\
    \        long maxZerosCount23 = 0;\n        long maxOnesCount24 = 0;\n       \
    \ long maxZerosCount24 = 0;\n        long maxOnesCount25 = 0;\n        long maxZerosCount25\
    \ = 0;\n        long maxOnesCount26 = 0;\n        long maxZerosCount26 = 0;\n\
    \        long maxOnesCount", '        // Your code here', "        long ones =\
    \ 0;\n        long zeros = 0;\n        long max = 0;\n        long min = 0;\n\
    \        foreach (long i in arr) {\n            if (i == 1) ones++;\n        \
    \    else if (i == 0) zeros++;\n            else {\n                if (ones >\
    \ zeros) {\n                    max = i;\n                } else if (ones < zeros)\
    \ {\n                    min = i;\n                }\n            }\n        }\n\
    \        long onesCount = 0;\n        long zerosCount = 0;\n        long maxCount\
    \ = 0;\n        long minCount = 0;\n        foreach (long i in arr) {\n      \
    \      if (i == 1) onesCount++;\n            else if (i == 0) zerosCount++;\n\
    \            else {\n                if (onesCount > zerosCount) {\n         \
    \           maxCount = i;\n                } else if (onesCount < zerosCount)\
    \ {\n                    minCount = i;\n                }\n            }\n   \
    \     }\n        long onesDecimal = 0;\n        long zerosDecimal = 0;\n     \
    \   long maxDecimal = 0;\n        long minDecimal = 0;\n        foreach (long\
    \ i in arr) {\n            if (i == 1) onesDecimal++;\n            else if (i\
    \ == 0) zerosDecimal++;\n            else {\n                if (onesDecimal >\
    \ zerosDecimal) {\n                    maxDecimal = i;\n                } else\
    \ if (onesDecimal < zerosDecimal) {\n                    minDecimal = i;\n   \
    \             }\n            }\n        }\n        long onesDecimalCount = 0;\n\
    \        long zerosDecimalCount = 0;\n        long maxDecimalCount = 0;\n    \
    \    long minDecimalCount = 0;\n        foreach (long i in arr) {\n          \
    \  if (i == 1) onesDecimalCount++;\n            else if (i == 0) zerosDecimalCount++;\n\
    \            else {\n                if (onesDecimalCount > zerosDecimalCount)\
    \ {\n                    maxDecimalCount = i;\n                } else if (onesDecimalCount\
    \ < zerosDecimalCount) {\n                    minDecimalCount = i;\n         \
    \       }\n            }\n        }\n        long onesDecimalDecimal = 0;\n  \
    \      long zerosDecimalDecimal = 0;\n        long maxDecimalDecimal = 0;\n  \
    \      long minDecimalDecimal = 0;\n        foreach (long i in arr) {\n      \
    \      if (i == 1) onesDecimalDecimal++;\n            else if (i == 0) zerosDecimalDecimal++;\n\
    \            else {\n                if (onesDecimalDecimal > zerosDecimalDecimal)\
    \ {\n                    maxDecimalDecimal = i;\n                } else if (onesDecimalDecimal\
    \ < zerosDecimalDecimal) {\n                    minDecimalDecimal = i;\n     \
    \           }\n            }\n        }\n        long onesDecimalDecimalCount\
    \ = 0;\n        long zerosDecimalDecimalCount = 0;\n        long maxDecimalDecimalCount\
    \ = 0;\n        long minDecimalDecimalCount = 0;\n        foreach (long i in arr)\
    \ {\n            if (i == 1) onesDecimalDecimalCount++;\n            else if (i\
    \ == 0) zerosDecimalDecimalCount++;\n            else {\n", "        long ones\
    \ = 0;\n        long zeros = 0;\n        long max = 0;\n        foreach (long\
    \ i in arr) {\n            ones += i;\n            zeros -= i;\n            if\
    \ (ones > max) {\n                max = ones;\n            }\n            if (zeros\
    \ > max) {\n                max = zeros;\n            }\n        }\n        List<long>\
    \ result = new List<long>();\n        foreach (long i in arr) {\n            if\
    \ (i == 1) {\n                result.Add(i);\n            }\n        }\n     \
    \   foreach (long i in arr) {\n            if (i == 0) {\n                result.Add(i);\n\
    \            }\n        }\n        long onesCount = 0;\n        long zerosCount\
    \ = 0;\n        long maxCount = 0;\n        foreach (long i in result) {\n   \
    \         onesCount += i;\n            zerosCount -= i;\n            if (onesCount\
    \ > maxCount) {\n                maxCount = onesCount;\n            }\n      \
    \      if (zerosCount > maxCount) {\n                maxCount = zerosCount;\n\
    \            }\n        }\n        long onesCount2 = 0;\n        long zerosCount2\
    \ = 0;\n        long maxCount2 = 0;\n        foreach (long i in result) {\n  \
    \          onesCount2 += i;\n            zerosCount2 -= i;\n            if (onesCount2\
    \ > maxCount2) {\n                maxCount2 = onesCount2;\n            }\n   \
    \         if (zerosCount2 > maxCount2) {\n                maxCount2 = zerosCount2;\n\
    \            }\n        }\n        long onesCount3 = 0;\n        long zerosCount3\
    \ = 0;\n        long maxCount3 = 0;\n        foreach (long i in result) {\n  \
    \          onesCount3 += i;\n            zerosCount3 -= i;\n            if (onesCount3\
    \ > maxCount3) {\n                maxCount3 = onesCount3;\n            }\n   \
    \         if (zerosCount3 > maxCount3) {\n                maxCount3 = zerosCount3;\n\
    \            }\n        }\n        long onesCount4 = 0;\n        long zerosCount4\
    \ = 0;\n        long maxCount4 = 0;\n        foreach (long i in result) {\n  \
    \          onesCount4 += i;\n            zerosCount4 -= i;\n            if (onesCount4\
    \ > maxCount4) {\n                maxCount4 = onesCount4;\n            }\n   \
    \         if (zerosCount4 > maxCount4) {\n                maxCount4 = zerosCount4;\n\
    \            }\n        }\n        long onesCount5 = 0;\n        long zerosCount5\
    \ = 0;\n        long maxCount5 = 0;\n        foreach (long i in result) {\n  \
    \          onesCount5 += i;\n            zerosCount5 -= i;\n            if (onesCount5\
    \ > maxCount5) {\n                maxCount5 = onesCount5;\n            }\n   \
    \         if (zerosCount5 > maxCount5) {\n                maxCount5 = zeros",
  "        // Your code here\n        long ones = 0;\n        long zeros = 0;\n  \
    \      long max = 0;\n        long min = 0;\n        foreach (long i in arr) {\n\
    \            if (i == 1) {\n                ones++;\n            }\n         \
    \   if (i == 0) {\n                zeros++;\n            }\n            if (i\
    \ > max) {\n                max = i;\n            }\n            if (i < min)\
    \ {\n                min = i;\n            }\n        }\n        long onesMax\
    \ = Convert.ToInt64(Math.Pow(2, ones));\n        long zerosMax = Convert.ToInt64(Math.Pow(2,\
    \ zeros));\n        long maxOnes = Convert.ToInt64(Math.Pow(2, max));\n      \
    \  long minOnes = Convert.ToInt64(Math.Pow(2, min));\n        long maxZeros =\
    \ Convert.ToInt64(Math.Pow(2, maxZeros));\n        long minZeros = Convert.ToInt64(Math.Pow(2,\
    \ minZeros));\n        long maxOnesMinZeros = Convert.ToInt64(Math.Pow(2, maxOnes\
    \ - minZeros));\n        long minOnesMaxZeros = Convert.ToInt64(Math.Pow(2, minOnes\
    \ - maxZeros));\n        long maxOnesMinOnes = Convert.ToInt64(Math.Pow(2, maxOnes\
    \ - minOnes));\n        long minOnesMaxOnes = Convert.ToInt64(Math.Pow(2, minOnes\
    \ - maxOnes));\n        long maxOnesMinOnesMaxZeros = Convert.ToInt64(Math.Pow(2,\
    \ maxOnes - minOnes - maxZeros));\n        long minOnesMaxOnesMaxOnes = Convert.ToInt64(Math.Pow(2,\
    \ minOnes - maxOnes - maxOnes));\n        long maxOnesMinOnesMaxOnesMaxZeros =\
    \ Convert.ToInt64(Math.Pow(2, maxOnes - minOnes - maxOnes - maxZeros));\n    \
    \    long minOnesMaxOnesMaxOnesMaxOnes = Convert.ToInt64(Math.Pow(2, minOnes -\
    \ maxOnes - maxOnes - maxOnes));\n        long maxOnesMinOnesMaxOnesMaxOnesMaxZeros\
    \ = Convert.ToInt64(Math.Pow(2, maxOnes - minOnes - maxOnes - maxOnes - maxZeros));\n\
    \        long minOnesMaxOnesMaxOnesMaxOnesMaxOnes = Convert.ToInt64(Math.Pow(2,\
    \ minOnes - maxOnes - maxOnes - maxOnes - maxOnes));\n        long maxOnesMinOnesMaxOnesMaxOnesMaxOnesMaxZeros\
    \ = Convert.ToInt64(Math.Pow(2, maxOnes - minOnes - ", "        List<long> result\
    \ = new List<long>();\n        long ones = 0;\n        long zeros = 0;\n     \
    \   foreach (long i in arr) {\n            if (i == 1) {\n                ones++;\n\
    \            } else {\n                zeros++;\n            }\n        }\n  \
    \      if (ones > zeros) {\n            result.Add(ones);\n            result.AddRange(arr.Where(i\
    \ => i != 1).OrderBy(i => i).ToList());\n        } else {\n            result.Add(zeros);\n\
    \            result.AddRange(arr.Where(i => i == 0).OrderBy(i => i).ToList());\n\
    \        }\n        return result;", "        long ones = 0;\n        long zeros\
    \ = 0;\n        long maxOnes = 0;\n        long maxZeros = 0;\n        long maxOnesCount\
    \ = 0;\n        long maxZerosCount = 0;\n        long maxOnesCount2 = 0;\n   \
    \     long maxZerosCount2 = 0;\n        long maxOnesCount3 = 0;\n        long\
    \ maxZerosCount3 = 0;\n        long maxOnesCount4 = 0;\n        long maxZerosCount4\
    \ = 0;\n        long maxOnesCount5 = 0;\n        long maxZerosCount5 = 0;\n  \
    \      long maxOnesCount6 = 0;\n        long maxZerosCount6 = 0;\n        long\
    \ maxOnesCount7 = 0;\n        long maxZerosCount7 = 0;\n        long maxOnesCount8\
    \ = 0;\n        long maxZerosCount8 = 0;\n        long maxOnesCount9 = 0;\n  \
    \      long maxZerosCount9 = 0;\n        long maxOnesCount10 = 0;\n        long\
    \ maxZerosCount10 = 0;\n        long maxOnesCount11 = 0;\n        long maxZerosCount11\
    \ = 0;\n        long maxOnesCount12 = 0;\n        long maxZerosCount12 = 0;\n\
    \        long maxOnesCount13 = 0;\n        long maxZerosCount13 = 0;\n       \
    \ long maxOnesCount14 = 0;\n        long maxZerosCount14 = 0;\n        long maxOnesCount15\
    \ = 0;\n        long maxZerosCount15 = 0;\n        long maxOnesCount16 = 0;\n\
    \        long maxZerosCount16 = 0;\n        long maxOnesCount17 = 0;\n       \
    \ long maxZerosCount17 = 0;\n        long maxOnesCount18 = 0;\n        long maxZerosCount18\
    \ = 0;\n        long maxOnesCount19 = 0;\n        long maxZerosCount19 = 0;\n\
    \        long maxOnesCount20 = 0;\n        long maxZerosCount20 = 0;\n       \
    \ long maxOnesCount21 = 0;\n        long maxZerosCount21 = 0;\n        long maxOnesCount22\
    \ = 0;\n        long maxZerosCount22 = 0;\n        long maxOnesCount23 = 0;\n\
    \        long maxZerosCount23 = 0;\n        long maxOnesCount24 = 0;\n       \
    \ long maxZerosCount24 = 0;\n        long maxOnesCount25 = 0;\n        long maxZerosCount25\
    \ = 0;\n        long maxOnesCount26 = 0;\n        long maxZerosCount26 = 0;\n\
    \        long maxOnesCount", "        long ones = 0;\n        long zeros = 0;\n\
    \        long max = 0;\n        long min = 0;\n        foreach (long i in arr)\
    \ {\n            if (i == 1) ones++;\n            else if (i == 0) zeros++;\n\
    \            else {\n                max = Math.Max(max, i);\n               \
    \ min = Math.Min(min, i);\n            }\n        }\n        long onesCount =\
    \ 0;\n        long zerosCount = 0;\n        long maxCount = 0;\n        long minCount\
    \ = 0;\n        foreach (long i in arr) {\n            if (i == 1) onesCount++;\n\
    \            else if (i == 0) zerosCount++;\n            else {\n            \
    \    maxCount = Math.Max(maxCount, i);\n                minCount = Math.Min(minCount,\
    \ i);\n            }\n        }\n        long onesDecimal = 0;\n        long zerosDecimal\
    \ = 0;\n        long maxDecimal = 0;\n        long minDecimal = 0;\n        foreach\
    \ (long i in arr) {\n            if (i == 1) onesDecimal++;\n            else\
    \ if (i == 0) zerosDecimal++;\n            else {\n                maxDecimal\
    \ = Math.Max(maxDecimal, i);\n                minDecimal = Math.Min(minDecimal,\
    \ i);\n            }\n        }\n        long onesDecimalCount = 0;\n        long\
    \ zerosDecimalCount = 0;\n        long maxDecimalCount = 0;\n        long minDecimalCount\
    \ = 0;\n        foreach (long i in arr) {\n            if (i == 1) onesDecimalCount++;\n\
    \            else if (i == 0) zerosDecimalCount++;\n            else {\n     \
    \           maxDecimalCount = Math.Max(maxDecimalCount, i);\n                minDecimalCount\
    \ = Math.Min(minDecimalCount, i);\n            }\n        }\n        long onesDecimalDecimal\
    \ = 0;\n        long zerosDecimalDecimal = 0;\n        long maxDecimalDecimal\
    \ = 0;\n        long minDecimalDecimal = 0;\n        foreach (long i in arr) {\n\
    \            if (i == 1) onesDecimalDecimal++;\n            else if (i == 0) zerosDecimalDecimal++;\n\
    \            else {\n                maxDecimalDecimal = Math.Max(maxDecimalDecimal,\
    \ i);\n                minDecimalDecimal = Math.Min(minDecimalDecimal, i);\n \
    \           }\n        }\n        long onesDecimalDecimalCount = 0;\n        long\
    \ zerosDecimalDecimalCount = 0;\n        long maxDecimalDecimalCount = 0;\n  \
    \      long minDecimalDecimalCount = 0;\n        foreach (long i in arr) {\n \
    \           if (i == 1) onesDecimalDecimalCount++;\n            else if (i ==\
    \ 0) zerosDecimalDecimalCount++;\n            else {\n                maxDecimalDecimalCount\
    \ = Math.Max(maxDecimalDecimalCount, i);\n                minDecimalDecimalCount\
    \ = Math.Min(minDecimalDecimalCount, i);\n            }\n        }\n        long\
    \ onesDecimalDecimalDecimal = 0;\n        long zerosDecimalDecimalDecimal = 0;\n\
    \        long maxDecimalDecimalDecimal = 0;\n        long minDecimalDecimalDecimal\
    \ = 0;\n        ", "        long ones = arr.Sum(x => x & 1L);\n        long tens\
    \ = arr.Sum(x => x >> 1);\n        long hundreds = arr.Sum(x => x >> 2);\n   \
    \     long thousands = arr.Sum(x => x >> 3);\n        long tenThousands = arr.Sum(x\
    \ => x >> 4);\n        long oneThousands = arr.Sum(x => x >> 5);\n        long\
    \ oneHundreds = arr.Sum(x => x >> 6);\n        long oneThousandHundreds = arr.Sum(x\
    \ => x >> 7);\n        long oneThousandThousands = arr.Sum(x => x >> 8);\n   \
    \     long oneThousandThousandHundreds = arr.Sum(x => x >> 9);\n        long oneThousandThousandThousands\
    \ = arr.Sum(x => x >> 10);\n        long oneThousandThousandThousandHundreds =\
    \ arr.Sum(x => x >> 11);\n        long oneThousandThousandThousandThousands =\
    \ arr.Sum(x => x >> 12);\n        long oneThousandThousandThousandThousandHundreds\
    \ = arr.Sum(x => x >> 13);\n        long oneThousandThousandThousandThousandThousands\
    \ = arr.Sum(x => x >> 14);\n        long oneThousandThousandThousandThousandThousandHundreds\
    \ = arr.Sum(x => x >> 15);\n        long oneThousandThousandThousandThousandThousandThousands\
    \ = arr.Sum(x => x >> 16);\n        long oneThousandThousandThousandThousandThousandThousands\
    \ = arr.Sum(x => x >> 17);\n        long oneThousandThousandThousandThousandThousandThousandHundreds\
    \ = arr.Sum(x => x >> 18);\n        long oneThousandThousandThousandThousandThousandThousandThousands\
    \ = arr.Sum(x => x >> 19);\n        long oneThousandThousandThousandThousandThousandThousandThousandHundreds\
    \ = arr.Sum(x => x >> 20);\n        long oneThousandThousandThousandThousandThousandThous",
  "        long ones = 0;\n        long zeros = 0;\n        long maxOnes = 0;\n  \
    \      long maxZeros = 0;\n        long maxOnesCount = 0;\n        long maxZerosCount\
    \ = 0;\n        long maxOnesCount2 = 0;\n        long maxZerosCount2 = 0;\n  \
    \      long maxOnesCount3 = 0;\n        long maxZerosCount3 = 0;\n        long\
    \ maxOnesCount4 = 0;\n        long maxZerosCount4 = 0;\n        long maxOnesCount5\
    \ = 0;\n        long maxZerosCount5 = 0;\n        long maxOnesCount6 = 0;\n  \
    \      long maxZerosCount6 = 0;\n        long maxOnesCount7 = 0;\n        long\
    \ maxZerosCount7 = 0;\n        long maxOnesCount8 = 0;\n        long maxZerosCount8\
    \ = 0;\n        long maxOnesCount9 = 0;\n        long maxZerosCount9 = 0;\n  \
    \      long maxOnesCount10 = 0;\n        long maxZerosCount10 = 0;\n        long\
    \ maxOnesCount11 = 0;\n        long maxZerosCount11 = 0;\n        long maxOnesCount12\
    \ = 0;\n        long maxZerosCount12 = 0;\n        long maxOnesCount13 = 0;\n\
    \        long maxZerosCount13 = 0;\n        long maxOnesCount14 = 0;\n       \
    \ long maxZerosCount14 = 0;\n        long maxOnesCount15 = 0;\n        long maxZerosCount15\
    \ = 0;\n        long maxOnesCount16 = 0;\n        long maxZerosCount16 = 0;\n\
    \        long maxOnesCount17 = 0;\n        long maxZerosCount17 = 0;\n       \
    \ long maxOnesCount18 = 0;\n        long maxZerosCount18 = 0;\n        long maxOnesCount19\
    \ = 0;\n        long maxZerosCount19 = 0;\n        long maxOnesCount20 = 0;\n\
    \        long maxZerosCount20 = 0;\n        long maxOnesCount21 = 0;\n       \
    \ long maxZerosCount21 = 0;\n        long maxOnesCount22 = 0;\n        long maxZerosCount22\
    \ = 0;\n        long maxOnesCount23 = 0;\n        long maxZerosCount23 = 0;\n\
    \        long maxOnesCount24 = 0;\n        long maxZerosCount24 = 0;\n       \
    \ long maxOnesCount25 = 0;\n        long maxZerosCount25 = 0;\n        long maxOnesCount26\
    \ = 0;\n        long maxZerosCount26 = 0;\n        long maxOnesCount", "     \
    \   // Your code goes here\n        long ones = 0;\n        long zeros = 0;\n\
    \        long decimal = 0;\n        long max = 0;\n        foreach (long i in\
    \ arr) {\n            if (i == 1) {\n                ones++;\n            }\n\
    \            if (i == 0) {\n                zeros++;\n            }\n        \
    \    if (i == -1) {\n                decimal++;\n            }\n            if\
    \ (i > max) {\n                max = i;\n            }\n        }\n        List<long>\
    \ result = new List<long>();\n        long onesCount = 0;\n        long zerosCount\
    \ = 0;\n        long decimalCount = 0;\n        long maxCount = 0;\n        long\
    \ onesMax = 0;\n        long zerosMax = 0;\n        long decimalMax = 0;\n   \
    \     long maxMax = 0;\n        long onesMin = 0;\n        long zerosMin = 0;\n\
    \        long decimalMin = 0;\n        long maxMin = 0;\n        long onesAvg\
    \ = 0;\n        long zerosAvg = 0;\n        long decimalAvg = 0;\n        long\
    \ maxAvg = 0;\n        long onesMinAvg = 0;\n        long zerosMinAvg = 0;\n \
    \       long decimalMinAvg = 0;\n        long maxMinAvg = 0;\n        long onesMaxAvg\
    \ = 0;\n        long zerosMaxAvg = 0;\n        long decimalMaxAvg = 0;\n     \
    \   long maxMaxAvg = 0;\n        long onesCountAvg = 0;\n        long zerosCountAvg\
    \ = 0;\n        long decimalCountAvg = 0;\n        long maxCountAvg = 0;\n   \
    \     long onesMaxAvg = 0;\n        long zerosMaxAvg = 0;\n        long decimalMaxAvg\
    \ = 0;\n        long maxMaxAvg = 0;\n        long onesMinAvg = 0;\n        long\
    \ zerosMinAvg = 0;\n        long decimalMinAvg = 0;\n        long maxMinAvg =\
    \ 0;\n        long onesAvgAvg = 0;\n        long zerosAvgAvg = 0;\n        long\
    \ decimalAvgAvg = 0;\n        long maxAvgAvg = 0;\n        long onesMinAvgAvg\
    \ = 0;\n        long zerosMinAvgAvg = 0;\n        long decimalMinAvgAvg = 0;\n\
    \        long maxMinAvgAvg = 0;\n        long onesMaxAvgAvg = 0;\n        long\
    \ zerosMaxAvgAvg = 0;\n        long decimalMaxAvgAvg = 0;\n        long maxMaxAvgAvg\
    \ = 0;\n        long onesCountAvgAvg = 0;\n        long zerosCountAvgAvg = 0;\n\
    \        long decimalCountAvgAvg = 0;\n        long maxCountAvgAvg = 0;\n    \
    \    long onesMaxAvgAvg = 0;\n        long zerosMaxAvgAvg = 0;\n        long decimalMaxAvgAvg\
    \ = 0;\n        long maxMaxAvgAvg = 0;\n        long onesMinAvgAvg = 0;\n    \
    \    long zerosMinAvgAvg = 0;\n        long ", "        // Your code goes here\n\
    \        long ones = 0;\n        long zeros = 0;\n        long max = 0;\n    \
    \    foreach (long i in arr) {\n            if (i == 1) {\n                ones++;\n\
    \            }\n            if (i == 0) {\n                zeros++;\n        \
    \    }\n            if (i == max) {\n                max = i;\n            }\n\
    \        }\n        long onesMax = ones;\n        long zerosMax = zeros;\n   \
    \     long maxMax = max;\n        long onesMin = ones;\n        long zerosMin\
    \ = zeros;\n        long maxMin = max;\n        long onesMaxMin = onesMax;\n \
    \       long zerosMaxMin = zerosMax;\n        long maxMaxMin = maxMax;\n     \
    \   long onesMinMin = onesMin;\n        long zerosMinMin = zerosMin;\n       \
    \ long maxMinMin = maxMin;\n        long onesMaxMinMin = onesMaxMin;\n       \
    \ long zerosMaxMinMin = zerosMaxMin;\n        long maxMaxMinMin = maxMaxMin;\n\
    \        long onesMinMinMin = onesMinMin;\n        long zerosMinMinMin = zerosMinMin;\n\
    \        long maxMinMinMin = maxMinMinMin;\n        long onesMaxMinMinMin = onesMaxMinMin;\n\
    \        long zerosMaxMinMinMin = zerosMaxMinMin;\n        long maxMaxMinMinMin\
    \ = maxMaxMinMinMin;\n        long onesMinMinMinMin = onesMinMinMin;\n       \
    \ long zerosMinMinMinMin = zerosMinMinMin;\n        long maxMinMinMinMin = maxMinMinMinMin;\n\
    \        long onesMaxMinMinMin = onesMaxMinMinMin;\n        long zerosMaxMinMinMin\
    \ = zerosMaxMinMinMin;\n        long maxMaxMinMinMin = maxMaxMinMinMin;\n    \
    \    long onesMinMinMinMin = onesMinMinMin;\n        long zerosMinMinMinMin =\
    \ zerosMinMinMinMin;\n        long maxMinMinMinMin = maxMinMinMinMin;\n      \
    \  long onesMaxMinMinMin = onesMaxMinMinMin;\n        long zerosMaxMinMinMin =\
    \ zerosMaxMinMinMin;\n        long maxMaxMinMinMin = maxMaxMinMinMin;\n      \
    \  long onesMinMinMinMin = onesMinMinMin;\n        long zerosMinMinMinMin = zerosMinMinMinMin",
  "        List<long> result = new List<long>();\n        long ones = 0;\n       \
    \ long tens = 0;\n        long hundreds = 0;\n        long thousands = 0;\n  \
    \      long tenThousands = 0;\n        long oneThousands = 0;\n        long oneHundreds\
    \ = 0;\n        long oneThousandHundreds = 0;\n        long oneHundredThousands\
    \ = 0;\n        long oneThousandHundredThousands = 0;\n        long oneHundredThousandHundredThousands\
    \ = 0;\n        long oneHundredThousandHundredThousandHundreds = 0;\n        long\
    \ oneHundredThousandHundredThousandHundredThousands = 0;\n        long oneHundredThousandHundredThousandHundredThousandHundreds\
    \ = 0;\n        long oneHundredThousandHundredThousandHundredThousandHundredThousands\
    \ = 0;\n        long oneHundredThousandHundredThousandHundredThousandHundredThousandHundreds\
    \ = 0;\n        long oneHundredThousandHundredThousandHundredThousandHundredThousandHundredThousands\
    \ = 0;\n        long oneHundredThousandHundredThousandHundredThousandHundredThousandHundredThousandHundreds\
    \ = 0;\n        long oneHundredThousandHundredThousandHundredThousandHundredThousandHundredThousandHundredThousands\
    \ = 0;\n        long oneHundredThousandHundredThousandHundredThousandHundredThousandHundredThousandHundredThousandHundreds\
    \ = 0;\n        long oneHundredThousandHundredThousandHundredThousandHundredThousandHundredThousandHundredThousandHundredThousands\
    \ = 0;\n        long oneHundredThousandHundredThousandHundredThousandHundredThousandHundredThousandHundredThousandHundredThousandHundreds\
    \ = 0;\n        long oneHundredThousandHundredThousandHundred", "        long\
    \ ones = 0;\n        long zeros = 0;\n        long max = 0;\n        foreach (long\
    \ i in arr) {\n            if (i == 1) {\n                ones++;\n          \
    \  }\n            if (i == 0) {\n                zeros++;\n            }\n   \
    \         if (i > max) {\n                max = i;\n            }\n        }\n\
    \        List<long> result = new List<long>();\n        long onesCount = 0;\n\
    \        long zerosCount = 0;\n        long maxCount = 0;\n        long maxOnes\
    \ = 0;\n        long maxZeros = 0;\n        long maxMax = 0;\n        long maxOnesCount\
    \ = 0;\n        long maxZerosCount = 0;\n        long maxMaxCount = 0;\n     \
    \   long maxOnesMax = 0;\n        long maxZerosMax = 0;\n        long maxMaxMax\
    \ = 0;\n        long maxOnesMaxCount = 0;\n        long maxZerosMaxCount = 0;\n\
    \        long maxMaxMax = 0;\n        foreach (long i in arr) {\n            if\
    \ (i == 1) {\n                onesCount++;\n            }\n            if (i ==\
    \ 0) {\n                zerosCount++;\n            }\n            if (i > max)\
    \ {\n                maxCount++;\n            }\n            if (i == max) {\n\
    \                if (i == 1) {\n                    maxOnes++;\n             \
    \   }\n                if (i == 0) {\n                    maxZeros++;\n      \
    \          }\n                if (i == max) {\n                    maxMax++;\n\
    \                }\n                if (i == maxOnes) {\n                    maxOnesCount++;\n\
    \                }\n                if (i == maxZeros) {\n                   \
    \ maxZerosCount++;\n                }\n                if (i == maxMax) {\n  \
    \                  maxMaxCount++;\n                }\n                if (i ==\
    \ maxOnesMax) {\n                    maxOnesMaxCount++;\n                }\n \
    \               if (i == maxZerosMax) {\n                    maxZerosMaxCount++;\n\
    \                }\n                if (i == maxMaxMax) {\n                  \
    \  maxMaxMaxCount++;\n                }\n                if (i == maxOnesMax)\
    \ {\n                    maxOnesMaxMax++;\n                }\n               \
    \ if (i == maxZerosMax) {\n                    maxZerosMaxMax++;\n           \
    \     }\n                if (i == maxMaxMax) {\n                    maxMaxMaxMax++;\n\
    \                }\n            }\n        }\n        if (onesCount > maxOnesCount)\
    \ {\n            result.Add(maxOnes);\n            result.Add(maxOnesCount);\n\
    \            result.Add(maxOnesMax);\n            result.Add(maxOnesMaxCount);\n\
    \            result.Add(maxOnesMaxMax);\n        }\n        if (zerosCount > maxZerosCount)\
    \ {\n            result.Add(maxZeros);\n            result.Add(maxZerosCount);\n\
    \            result.Add(maxZerosMax);\n            result.Add(maxZ", "       \
    \ // Your code goes here\n        long ones = 0;\n        long zeros = 0;\n  \
    \      long max = 0;\n        long min = 0;\n        foreach (long i in arr) {\n\
    \            if (i == 1) {\n                ones++;\n            }\n         \
    \   if (i == 0) {\n                zeros++;\n            }\n            if (i\
    \ > max) {\n                max = i;\n            }\n            if (i < min)\
    \ {\n                min = i;\n            }\n        }\n        List<long> result\
    \ = new List<long>();\n        long temp = 0;\n        long temp2 = 0;\n     \
    \   long temp3 = 0;\n        long temp4 = 0;\n        long temp5 = 0;\n      \
    \  long temp6 = 0;\n        long temp7 = 0;\n        long temp8 = 0;\n       \
    \ long temp9 = 0;\n        long temp10 = 0;\n        long temp11 = 0;\n      \
    \  long temp12 = 0;\n        long temp13 = 0;\n        long temp14 = 0;\n    \
    \    long temp15 = 0;\n        long temp16 = 0;\n        long temp17 = 0;\n  \
    \      long temp18 = 0;\n        long temp19 = 0;\n        long temp20 = 0;\n\
    \        long temp21 = 0;\n        long temp22 = 0;\n        long temp23 = 0;\n\
    \        long temp24 = 0;\n        long temp25 = 0;\n        long temp26 = 0;\n\
    \        long temp27 = 0;\n        long temp28 = 0;\n        long temp29 = 0;\n\
    \        long temp30 = 0;\n        long temp31 = 0;\n        long temp32 = 0;\n\
    \        long temp33 = 0;\n        long temp34 = 0;\n        long temp35 = 0;\n\
    \        long temp36 = 0;\n        long temp37 = 0;\n        long temp38 = 0;\n\
    \        long temp39 = 0;\n        long temp40 = 0;\n        long temp41 = 0;\n\
    \        long temp42 = 0;\n        long temp43 = 0;\n        long temp44 = 0;\n\
    \        long temp45 = 0;\n        long temp46 = 0;\n        long temp47 = 0;\n\
    \        long temp48 = 0;\n        long temp49 = 0;\n        long temp50 = 0;\n\
    \        long temp51 = 0;\n        long temp52 = 0;\n        long temp53 = 0;\n\
    \        long temp54 = 0;\n        long temp55 = 0;\n        long temp56 = 0;\n\
    \        long temp57 = 0;\n        long temp58 = 0;\n        long temp59 = 0;\n\
    \        long temp60 = 0;\n        long temp61 = 0;\n        long temp62 = 0;\n\
    \        long temp63 = 0;\n        long temp64 = 0;\n        long temp65 = 0;\n\
    \        long temp66 = 0;\n        long temp67 = 0;\n        long temp68 = 0;\n\
    \        long temp69 = 0;\n        long temp70 = 0;\n        long temp71 = 0;\n\
    \        long temp", "        // TODO: Implement this method\n        return null;",
  "        long ones = 0;\n        long zeros = 0;\n        long max = 0;\n      \
    \  foreach (long i in arr) {\n            if (i == 1) {\n                ones++;\n\
    \            } else {\n                zeros++;\n            }\n            if\
    \ (ones > zeros) {\n                max = i;\n            }\n        }\n     \
    \   List<long> result = new List<long>();\n        foreach (long i in arr) {\n\
    \            if (i == 1) {\n                result.Add(i);\n            } else\
    \ if (i == 0) {\n                result.Add(max);\n            } else {\n    \
    \            result.Add(zeros);\n            }\n        }\n        return result;",
  "        List<long> result = new List<long>();\n        long ones = 0;\n       \
    \ long zeros = 0;\n        long max = 0;\n        foreach (long i in arr) {\n\
    \            ones += i;\n            zeros -= i;\n            if (ones > max)\
    \ {\n                max = ones;\n            }\n            if (zeros > max)\
    \ {\n                max = zeros;\n            }\n        }\n        long onesCount\
    \ = 0;\n        long zerosCount = 0;\n        long maxCount = 0;\n        foreach\
    \ (long i in arr) {\n            onesCount += i;\n            zerosCount -= i;\n\
    \            if (onesCount > maxCount) {\n                maxCount = onesCount;\n\
    \            }\n            if (zerosCount > maxCount) {\n                maxCount\
    \ = zerosCount;\n            }\n        }\n        long onesCount2 = 0;\n    \
    \    long zerosCount2 = 0;\n        long maxCount2 = 0;\n        foreach (long\
    \ i in arr) {\n            onesCount2 += i;\n            zerosCount2 -= i;\n \
    \           if (onesCount2 > maxCount2) {\n                maxCount2 = onesCount2;\n\
    \            }\n            if (zerosCount2 > maxCount2) {\n                maxCount2\
    \ = zerosCount2;\n            }\n        }\n        long onesCount3 = 0;\n   \
    \     long zerosCount3 = 0;\n        long maxCount3 = 0;\n        foreach (long\
    \ i in arr) {\n            onesCount3 += i;\n            zerosCount3 -= i;\n \
    \           if (onesCount3 > maxCount3) {\n                maxCount3 = onesCount3;\n\
    \            }\n            if (zerosCount3 > maxCount3) {\n                maxCount3\
    \ = zerosCount3;\n            }\n        }\n        long onesCount4 = 0;\n   \
    \     long zerosCount4 = 0;\n        long maxCount4 = 0;\n        foreach (long\
    \ i in arr) {\n            onesCount4 += i;\n            zerosCount4 -= i;\n \
    \           if (onesCount4 > maxCount4) {\n                maxCount4 = onesCount4;\n\
    \            }\n            if (zerosCount4 > maxCount4) {\n                maxCount4\
    \ = zerosCount4;\n            }\n        }\n        long onesCount5 = 0;\n   \
    \     long zerosCount5 = 0;\n        long maxCount5 = 0;\n        foreach (long\
    \ i in arr) {\n            onesCount5 += i;\n            zerosCount5 -= i;\n \
    \           if (onesCount5 > maxCount5) {\n                maxCount5 = onesCount5;\n\
    \            }\n            if (zerosCount5 > maxCount5) {\n                maxCount5\
    \ = zerosCount5;\n            }\n        }\n        long onesCount6 = 0;\n   \
    \     long zerosCount6 = 0;\n        long maxCount6 = 0;\n        foreach (long\
    \ i in arr) {", '        // Your code here', '        // Your code here', "  \
    \      long ones = 0;\n        long zeros = 0;\n        long max = 0;\n      \
    \  foreach (long i in arr) {\n            if (i == 1) {\n                ones++;\n\
    \            }\n            if (i == 0) {\n                zeros++;\n        \
    \    }\n            if (i > max) {\n                max = i;\n            }\n\
    \        }\n        long onesMax = ones;\n        long zerosMax = zeros;\n   \
    \     long maxMax = max;\n        long onesMin = ones;\n        long zerosMin\
    \ = zeros;\n        long maxMin = max;\n        long onesMaxMin = ones;\n    \
    \    long zerosMaxMin = zeros;\n        long maxMaxMin = max;\n        long onesMinMax\
    \ = ones;\n        long zerosMinMax = zeros;\n        long maxMinMax = max;\n\
    \        long onesMaxMinMax = ones;\n        long zerosMaxMinMax = zeros;\n  \
    \      long maxMaxMinMax = max;\n        long onesMinMaxMax = ones;\n        long\
    \ zerosMinMaxMax = zeros;\n        long maxMinMaxMax = max;\n        long onesMaxMinMaxMax\
    \ = ones;\n        long zerosMaxMinMaxMax = zeros;\n        long maxMaxMinMaxMax\
    \ = max;\n        long onesMinMaxMaxMax = ones;\n        long zerosMinMaxMaxMax\
    \ = zeros;\n        long maxMinMaxMaxMax = max;\n        long onesMaxMinMaxMax\
    \ = ones;\n        long zerosMinMaxMaxMax = zeros;\n        long maxMinMaxMaxMax\
    \ = max;\n        long onesMaxMinMaxMax = ones;\n        long zerosMinMaxMaxMax\
    \ = zeros;\n        long maxMinMaxMaxMax = max;\n        long onesMaxMinMaxMax\
    \ = ones;\n        long zerosMinMaxMaxMax = zeros;\n        long maxMinMaxMaxMax\
    \ = max;\n        long onesMaxMinMaxMax = ones;\n        long zerosMinMaxMaxMax\
    \ = zeros;\n        long maxMinMaxMaxMax = max;\n        long onesMaxMinMaxMax\
    \ = ones;\n        long zerosMinMaxMaxMax = zeros;\n        long maxMinMaxMaxMax\
    \ = max;\n        long onesMaxMinMaxMax = ones;\n        long zerosMinMaxMaxMax\
    \ = zeros;\n        long maxMinMaxMaxMax = max;\n        long onesMaxMinMaxMax\
    \ = ones;\n        long zerosMin", "        long ones = 0;\n        long zeros\
    \ = 0;\n        long max = 0;\n        long min = 0;\n        foreach (long i\
    \ in arr) {\n            if (i == 1) {\n                ones++;\n            }\n\
    \            if (i == 0) {\n                zeros++;\n            }\n        \
    \    if (i > max) {\n                max = i;\n            }\n            if (i\
    \ < min) {\n                min = i;\n            }\n        }\n        long onesMax\
    \ = ones * max;\n        long zerosMax = zeros * max;\n        long onesMin =\
    \ ones * min;\n        long zerosMin = zeros * min;\n        long onesDiff = onesMax\
    \ - onesMin;\n        long zerosDiff = zerosMax - zerosMin;\n        long onesDiffAbs\
    \ = Math.Abs(onesDiff);\n        long zerosDiffAbs = Math.Abs(zerosDiff);\n  \
    \      long onesDiffAbsMul = onesDiffAbs * onesDiff;\n        long zerosDiffAbsMul\
    \ = zerosDiffAbs * zerosDiff;\n        long onesDiffAbsMulAbs = onesDiffAbsMul\
    \ * onesDiffAbs;\n        long zerosDiffAbsMulAbs = zerosDiffAbsMul * zerosDiffAbs;\n\
    \        long onesDiffAbsMulAbsMul = onesDiffAbsMulAbs * onesDiffAbsMul;\n   \
    \     long zerosDiffAbsMulAbsMul = zerosDiffAbsMulAbs * zerosDiffAbsMul;\n   \
    \     long onesDiffAbsMulAbsMulAbs = onesDiffAbsMulAbsMul * onesDiffAbsMulAbs;\n\
    \        long zerosDiffAbsMulAbsMulAbs = zerosDiffAbsMulAbsMul * zerosDiffAbsMulAbs;\n\
    \        long onesDiffAbsMulAbsMulAbsMul = onesDiffAbsMulAbsMulAbs * onesDiffAbsMulAbsMul;\n\
    \        long zerosDiffAbsMulAbsMulAbsMul = zerosDiffAbsMulAbsMulAbs * zerosDiffAbsMulAbsMul;\n\
    \        long onesDiffAbsMulAbsMulAbsMulAbs = onesDiffAbsMulAbsMulAbsMul * onesDiffAbsMulAbsMulAbs;\n\
    \        long zerosDiffAbsMulAbsMulAbsMulAbs = zerosDiffAbsMulAbsMulAbsMul * zerosDiffAbsMulAbsMulAbsMul;",
  "        long ones = 0;\n        long zeros = 0;\n        long max = 0;\n      \
    \  long min = 0;\n        foreach (long i in arr) {\n            if (i == 1) {\n\
    \                ones++;\n            }\n            if (i == 0) {\n         \
    \       zeros++;\n            }\n            if (i > max) {\n                max\
    \ = i;\n            }\n            if (i < min) {\n                min = i;\n\
    \            }\n        }\n        List<long> result = new List<long>();\n   \
    \     long onesMax = Convert.ToInt64(Math.Pow(2, ones));\n        long zerosMax\
    \ = Convert.ToInt64(Math.Pow(2, zeros));\n        long onesMin = Convert.ToInt64(Math.Pow(2,\
    \ ones - 1));\n        long zerosMin = Convert.ToInt64(Math.Pow(2, zeros - 1));\n\
    \        long onesMax2 = Convert.ToInt64(Math.Pow(2, ones - 2));\n        long\
    \ zerosMax2 = Convert.ToInt64(Math.Pow(2, zeros - 2));\n        long onesMin2\
    \ = Convert.ToInt64(Math.Pow(2, ones - 3));\n        long zerosMin2 = Convert.ToInt64(Math.Pow(2,\
    \ zeros - 3));\n        long onesMax3 = Convert.ToInt64(Math.Pow(2, ones - 4));\n\
    \        long zerosMax3 = Convert.ToInt64(Math.Pow(2, zeros - 4));\n        long\
    \ onesMin3 = Convert.ToInt64(Math.Pow(2, ones - 5));\n        long zerosMin3 =\
    \ Convert.ToInt64(Math.Pow(2, zeros - 5));\n        long onesMax4 = Convert.ToInt64(Math.Pow(2,\
    \ ones - 6));\n        long zerosMax4 = Convert.ToInt64(Math.Pow(2, zeros - 6));\n\
    \        long onesMin4 = Convert.ToInt64(Math.Pow(2, ones - 7));\n        long\
    \ zerosMin4 = Convert.ToInt64(Math.Pow(2, zeros - 7));\n        long onesMax5\
    \ = Convert.ToInt64(Math.Pow(2, ones - 8));\n        long zerosMax5 = Convert.ToInt64(Math.Pow(2,\
    \ zeros - 8));\n        long onesMin5 = Convert.ToInt64(Math.Pow(2, ones - 9));\n\
    \        long zerosMin5 = Convert.ToInt64(Math.Pow(2, zeros - 9));\n        long\
    \ onesMax6 = Convert.ToInt64(Math.Pow(2, ones - 10));\n        long zerosMax6\
    \ = Convert.ToInt64(Math.Pow(2, zeros - 10));\n        long onesMin6 = Convert.ToInt64(Math.Pow(2,\
    \ ones - 11));\n        long zerosMin6 = Convert.ToInt64(Math.Pow", "        long\
    \ ones = 0;\n        long zeros = 0;\n        long max = 0;\n        foreach (long\
    \ i in arr) {\n            if (i == 1) {\n                ones++;\n          \
    \  }\n            if (i == 0) {\n                zeros++;\n            }\n   \
    \         if (i > max) {\n                max = i;\n            }\n        }\n\
    \        long onesMax = ones > zeros ? ones : zeros;\n        long zerosMax =\
    \ zeros > ones ? zeros : ones;\n        long maxMax = max > onesMax ? max : onesMax;\n\
    \        long maxMin = max < zerosMax ? max : zerosMax;\n        long minMax =\
    \ max > maxMax ? max : maxMax;\n        long minMin = max < minMax ? max : minMax;\n\
    \        long minMinMin = min < minMin ? min : minMin;\n        long minMinMinMin\
    \ = min < minMinMin ? min : minMinMin;\n        long minMinMinMinMin = min < minMinMinMinMin\
    \ ? min : minMinMinMinMin;\n        long minMinMinMinMinMin = min < minMinMinMinMinMin\
    \ ? min : minMinMinMinMinMin;\n        long minMinMinMinMinMin = min < minMinMinMinMinMin\
    \ ? min : minMinMinMinMinMin;\n        long minMinMinMinMinMin = min < minMinMinMinMinMin\
    \ ? min : minMinMinMinMinMin;\n        long minMinMinMinMinMinMin = min < minMinMinMinMinMinMin\
    \ ? min : minMinMinMinMinMinMin;\n        long minMinMinMinMinMinMin = min < minMinMinMinMinMinMin\
    \ ? min : minMinMinMinMinMinMin;\n        long minMinMinMinMinMinMin = min < minMinMinMinMinMinMin\
    \ ? min : minMinMinMinMinMinMin;\n        long minMinMinMinMinMinMin = min < minMinMinMinMinMinMin\
    \ ? min : minMinMinMinMinMinMin;\n        long minMinMinMinMinMinMin = min < minMinMinMinMinMinMin\
    \ ? min : minMinMinMinMinMinMin;\n        long minMinMinMinMinMinMin = min < minMinMinMinMinMinMin\
    \ ? min : minMinMinMinMinMinMin;\n        long minMinMinMinMinMinMin = min < minMinMinMinMinMinMin\
    \ ? min : minMinMinMinMinMinMin", '        // Your code here', "        long ones\
    \ = arr.Sum(x => x & 1);\n        long zeros = arr.Sum(x => ~x);\n        long\
    \ maxOnes = arr.Max(x => x & 1);\n        long maxZeros = arr.Max(x => ~x);\n\
    \        long maxOnesZeros = maxOnes - maxZeros;\n        long maxOnesOnes = maxOnes\
    \ - ones;\n        long maxOnesOnesZeros = maxOnesOnes - maxZeros;\n        long\
    \ maxOnesOnesOnes = maxOnesOnes - ones;\n        long maxOnesOnesOnesZeros = maxOnesOnesOnes\
    \ - maxZeros;\n        long maxOnesOnesOnesOnes = maxOnesOnesOnes - ones;\n  \
    \      long maxOnesOnesOnesOnesZeros = maxOnesOnesOnesOnes - maxZeros;\n     \
    \   long maxOnesOnesOnesOnesOnes = maxOnesOnesOnesOnes - ones;\n        long maxOnesOnesOnesOnesOnesZeros\
    \ = maxOnesOnesOnesOnesZeros - maxZeros;\n        long maxOnesOnesOnesOnesOnesOnes\
    \ = maxOnesOnesOnesOnesOnes - ones;\n        long maxOnesOnesOnesOnesOnesOnesZeros\
    \ = maxOnesOnesOnesOnesOnesZeros - maxZeros;\n        long maxOnesOnesOnesOnesOnesOnesOnes\
    \ = maxOnesOnesOnesOnesOnesOnes - ones;\n        long maxOnesOnesOnesOnesOnesOnesZeros\
    \ = maxOnesOnesOnesOnesOnesZeros - maxZeros;\n        long maxOnesOnesOnesOnesOnesOnesOnes\
    \ = maxOnesOnesOnesOnesOnesOnes - ones;\n        long maxOnesOnesOnesOnesOnesOnesOnesZeros\
    \ = maxOnesOnesOnesOnesOnesOnesZeros - maxZeros;\n        long maxOnesOnesOnesOnesOnesOnesOnesOnes\
    \ = maxOnesOnesOnesOnesOnesOnesOnes - ones;\n        long maxOnesOnesOnesOnesOnesOnesOnesZeros\
    \ = max", "        // TODO: Implement this method\n        throw new NotImplementedException();",
  "        // Your code here\n        long ones = 0;\n        long zeros = 0;\n  \
    \      long max = 0;\n        foreach (long i in arr) {\n            if (i ==\
    \ 1) {\n                ones++;\n            }\n            else if (i == 0) {\n\
    \                zeros++;\n            }\n            else {\n               \
    \ if (ones > zeros) {\n                    max = i;\n                }\n     \
    \           else {\n                    max = zeros;\n                }\n    \
    \        }\n        }\n        List<long> result = new List<long>();\n       \
    \ long onesMax = 0;\n        long zerosMax = 0;\n        long maxIndex = 0;\n\
    \        long maxIndex2 = 0;\n        long maxIndex3 = 0;\n        long maxIndex4\
    \ = 0;\n        long maxIndex5 = 0;\n        long maxIndex6 = 0;\n        long\
    \ maxIndex7 = 0;\n        long maxIndex8 = 0;\n        long maxIndex9 = 0;\n \
    \       long maxIndex10 = 0;\n        long maxIndex11 = 0;\n        long maxIndex12\
    \ = 0;\n        long maxIndex13 = 0;\n        long maxIndex14 = 0;\n        long\
    \ maxIndex15 = 0;\n        long maxIndex16 = 0;\n        long maxIndex17 = 0;\n\
    \        long maxIndex18 = 0;\n        long maxIndex19 = 0;\n        long maxIndex20\
    \ = 0;\n        long maxIndex21 = 0;\n        long maxIndex22 = 0;\n        long\
    \ maxIndex23 = 0;\n        long maxIndex24 = 0;\n        long maxIndex25 = 0;\n\
    \        long maxIndex26 = 0;\n        long maxIndex27 = 0;\n        long maxIndex28\
    \ = 0;\n        long maxIndex29 = 0;\n        long maxIndex30 = 0;\n        long\
    \ maxIndex31 = 0;\n        long maxIndex32 = 0;\n        long maxIndex33 = 0;\n\
    \        long maxIndex34 = 0;\n        long maxIndex35 = 0;\n        long maxIndex36\
    \ = 0;\n        long maxIndex37 = 0;\n        long maxIndex38 = 0;\n        long\
    \ maxIndex39 = 0;\n        long maxIndex40 = 0;\n        long maxIndex41 = 0;\n\
    \        long maxIndex42 = 0;\n        long maxIndex43 = 0;\n        long maxIndex44\
    \ = 0;\n        long maxIndex45 = 0;\n        long maxIndex46 = 0;\n        long\
    \ maxIndex47 = 0;\n        long maxIndex48 = 0;\n        long maxIndex49 = 0;\n\
    \        long maxIndex50 = 0;\n        long maxIndex51 = 0;\n        long maxIndex52\
    \ = 0;\n        long maxIndex53 = 0;\n        long maxIndex54 = 0;\n        long\
    \ maxIndex55 = 0;\n        long maxIndex56 = 0;\n        long maxIndex57 = 0;\n\
    \        long maxIndex58 = 0;\n        long maxIndex59 = 0;\n        long maxIndex",
  "        List<long> result = new List<long>();\n        long ones = 0;\n       \
    \ long tens = 0;\n        long hundreds = 0;\n        long thousands = 0;\n  \
    \      foreach (long n in arr) {\n            ones += n;\n            tens +=\
    \ n / 10;\n            hundreds += n / 100;\n            thousands += n / 1000;\n\
    \        }\n        long onesCount = ones;\n        long tensCount = tens;\n \
    \       long hundredsCount = hundreds;\n        long thousandsCount = thousands;\n\
    \        long onesCount2 = onesCount * onesCount;\n        long tensCount2 = tensCount\
    \ * tensCount;\n        long hundredsCount2 = hundredsCount * hundredsCount;\n\
    \        long thousandsCount2 = thousandsCount * thousandsCount;\n        long\
    \ onesCount3 = onesCount2 * onesCount;\n        long tensCount3 = tensCount2 *\
    \ tensCount;\n        long hundredsCount3 = hundredsCount2 * hundredsCount;\n\
    \        long thousandsCount3 = thousandsCount2 * thousandsCount;\n        long\
    \ onesCount4 = onesCount3 * onesCount;\n        long tensCount4 = tensCount3 *\
    \ tensCount;\n        long hundredsCount4 = hundredsCount3 * hundredsCount;\n\
    \        long thousandsCount4 = thousandsCount3 * thousandsCount;\n        long\
    \ onesCount5 = onesCount4 * onesCount;\n        long tensCount5 = tensCount4 *\
    \ tensCount;\n        long hundredsCount5 = hundredsCount4 * hundredsCount;\n\
    \        long thousandsCount5 = thousandsCount4 * thousandsCount;\n        long\
    \ onesCount6 = onesCount5 * onesCount;\n        long tensCount6 = tensCount5 *\
    \ tensCount;\n        long hundredsCount6 = hundredsCount5 * hundredsCount;\n\
    \        long thousandsCount6 = thousandsCount5 * thousandsCount;\n        long\
    \ onesCount7 = onesCount6 * onesCount;\n        long tensCount7 = tensCount6 *\
    \ tensCount;\n        long hundredsCount7 = hundredsCount6 * hundredsCount;\n\
    \        long thousandsCount7 = thousandsCount6 * thousandsCount;\n        long\
    \ onesCount8 = onesCount7", '        // Your code here', "        long ones =\
    \ 0;\n        long zeros = 0;\n        long max = 0;\n        foreach (long i\
    \ in arr) {\n            if (i == 1) {\n                ones++;\n            }\
    \ else {\n                zeros++;\n            }\n            if (ones > zeros)\
    \ {\n                max = i;\n            }\n        }\n        List<long> result\
    \ = new List<long>();\n        foreach (long i in arr) {\n            if (i ==\
    \ 1) {\n                result.Add(i);\n            } else {\n               \
    \ if (max != 0) {\n                    result.Add(max);\n                }\n \
    \               result.Add(i);\n            }\n        }\n        return result;",
  "        long ones = 0;\n        long zeros = 0;\n        long max = 0;\n      \
    \  foreach (long i in arr) {\n            if (i == 1) {\n                ones++;\n\
    \            }\n            if (i == 0) {\n                zeros++;\n        \
    \    }\n            if (i > max) {\n                max = i;\n            }\n\
    \        }\n        long onesMax = ones * max;\n        long zerosMax = zeros\
    \ * max;\n        long onesMin = ones * min - 1;\n        long zerosMin = zeros\
    \ * min - 1;\n        long onesMaxMin = onesMax * min;\n        long zerosMaxMin\
    \ = zerosMax * min;\n        long onesMaxMinMin = onesMaxMin * min;\n        long\
    \ zerosMaxMinMin = zerosMaxMin * min;\n        long onesMaxMinMinMin = onesMaxMinMin\
    \ * min;\n        long zerosMaxMinMinMin = zerosMaxMinMin * min;\n        long\
    \ onesMaxMinMinMinMin = onesMaxMinMinMin * min;\n        long zerosMaxMinMinMinMin\
    \ = zerosMaxMinMinMin * min;\n        long onesMaxMinMinMinMinMin = onesMaxMinMinMinMin\
    \ * min;\n        long zerosMaxMinMinMinMin = zerosMaxMinMinMinMin * min;\n  \
    \      long onesMaxMinMinMinMinMin = onesMaxMinMinMinMinMin * min;\n        long\
    \ zerosMaxMinMinMinMinMin = zerosMaxMinMinMinMinMin * min;\n        long onesMaxMinMinMinMinMinMin\
    \ = onesMaxMinMinMinMinMinMin * min;\n        long zerosMaxMinMinMinMinMin = zerosMaxMinMinMinMinMinMin\
    \ * min;\n        long onesMaxMinMinMinMinMinMin = onesMaxMinMinMinMinMinMin *\
    \ min;\n        long zerosMaxMinMinMinMinMinMin = zerosMaxMinMinMinMinMinMin *\
    \ min;\n        long onesMaxMinMinMinMinMinMinMin = onesMaxMinMinMinMinMinMinMin\
    \ * min;\n        long zerosMaxMinMinMinMinMinMin = zerosMaxMinMinMinMinMinMinMin\
    \ * min;\n        long onesMaxMinMinMinMinMinMinMin = onesMaxMinMinMinMinMinMinMin\
    \ * min;\n        long zerosMaxMinMinMinMinMinMin = zerosMaxMinMinMinMinMinMinMin\
    \ * min;\n        long ", "        // Your code goes here\n        long ones =\
    \ 0;\n        long zeros = 0;\n        long max = 0;\n        long min = 0;\n\
    \        foreach (long i in arr) {\n            if (i == 1) {\n              \
    \  ones++;\n            }\n            if (i == 0) {\n                zeros++;\n\
    \            }\n            if (i > max) {\n                max = i;\n       \
    \     }\n            if (i < min) {\n                min = i;\n            }\n\
    \        }\n        List<long> result = new List<long>();\n        long temp =\
    \ 0;\n        long temp2 = 0;\n        long temp3 = 0;\n        long temp4 = 0;\n\
    \        long temp5 = 0;\n        long temp6 = 0;\n        long temp7 = 0;\n \
    \       long temp8 = 0;\n        long temp9 = 0;\n        long temp10 = 0;\n \
    \       long temp11 = 0;\n        long temp12 = 0;\n        long temp13 = 0;\n\
    \        long temp14 = 0;\n        long temp15 = 0;\n        long temp16 = 0;\n\
    \        long temp17 = 0;\n        long temp18 = 0;\n        long temp19 = 0;\n\
    \        long temp20 = 0;\n        long temp21 = 0;\n        long temp22 = 0;\n\
    \        long temp23 = 0;\n        long temp24 = 0;\n        long temp25 = 0;\n\
    \        long temp26 = 0;\n        long temp27 = 0;\n        long temp28 = 0;\n\
    \        long temp29 = 0;\n        long temp30 = 0;\n        long temp31 = 0;\n\
    \        long temp32 = 0;\n        long temp33 = 0;\n        long temp34 = 0;\n\
    \        long temp35 = 0;\n        long temp36 = 0;\n        long temp37 = 0;\n\
    \        long temp38 = 0;\n        long temp39 = 0;\n        long temp40 = 0;\n\
    \        long temp41 = 0;\n        long temp42 = 0;\n        long temp43 = 0;\n\
    \        long temp44 = 0;\n        long temp45 = 0;\n        long temp46 = 0;\n\
    \        long temp47 = 0;\n        long temp48 = 0;\n        long temp49 = 0;\n\
    \        long temp50 = 0;\n        long temp51 = 0;\n        long temp52 = 0;\n\
    \        long temp53 = 0;\n        long temp54 = 0;\n        long temp55 = 0;\n\
    \        long temp56 = 0;\n        long temp57 = 0;\n        long temp58 = 0;\n\
    \        long temp59 = 0;\n        long temp60 = 0;\n        long temp61 = 0;\n\
    \        long temp62 = 0;\n        long temp63 = 0;\n        long temp64 = 0;\n\
    \        long temp65 = 0;\n        long temp66 = 0;\n        long temp67 = 0;\n\
    \        long temp68 = 0;\n        long temp69 = 0;\n        long temp70 = 0;\n\
    \        long temp71 = 0;\n        long temp", '        // Your code here', " \
    \       // TODO: Implement this function\n        long ones = 0;\n        long\
    \ zeros = 0;\n        long max = 0;\n        foreach (long i in arr) {\n     \
    \       if (i == 1) {\n                ones++;\n            }\n            if\
    \ (i == 0) {\n                zeros++;\n            }\n            if (i > max)\
    \ {\n                max = i;\n            }\n        }\n        List<long> result\
    \ = new List<long>();\n        long temp = 0;\n        long temp2 = 0;\n     \
    \   long temp3 = 0;\n        long temp4 = 0;\n        long temp5 = 0;\n      \
    \  long temp6 = 0;\n        long temp7 = 0;\n        long temp8 = 0;\n       \
    \ long temp9 = 0;\n        long temp10 = 0;\n        long temp11 = 0;\n      \
    \  long temp12 = 0;\n        long temp13 = 0;\n        long temp14 = 0;\n    \
    \    long temp15 = 0;\n        long temp16 = 0;\n        long temp17 = 0;\n  \
    \      long temp18 = 0;\n        long temp19 = 0;\n        long temp20 = 0;\n\
    \        long temp21 = 0;\n        long temp22 = 0;\n        long temp23 = 0;\n\
    \        long temp24 = 0;\n        long temp25 = 0;\n        long temp26 = 0;\n\
    \        long temp27 = 0;\n        long temp28 = 0;\n        long temp29 = 0;\n\
    \        long temp30 = 0;\n        long temp31 = 0;\n        long temp32 = 0;\n\
    \        long temp33 = 0;\n        long temp34 = 0;\n        long temp35 = 0;\n\
    \        long temp36 = 0;\n        long temp37 = 0;\n        long temp38 = 0;\n\
    \        long temp39 = 0;\n        long temp40 = 0;\n        long temp41 = 0;\n\
    \        long temp42 = 0;\n        long temp43 = 0;\n        long temp44 = 0;\n\
    \        long temp45 = 0;\n        long temp46 = 0;\n        long temp47 = 0;\n\
    \        long temp48 = 0;\n        long temp49 = 0;\n        long temp50 = 0;\n\
    \        long temp51 = 0;\n        long temp52 = 0;\n        long temp53 = 0;\n\
    \        long temp54 = 0;\n        long temp55 = 0;\n        long temp56 = 0;\n\
    \        long temp57 = 0;\n        long temp58 = 0;\n        long temp59 = 0;\n\
    \        long temp60 = 0;\n        long temp61 = 0;\n        long temp62 = 0;\n\
    \        long temp63 = 0;\n        long temp64 = 0;\n        long temp65 = 0;\n\
    \        long temp66 = 0;\n        long temp67 = 0;\n        long temp68 = 0;\n\
    \        long temp69 = 0;\n        long temp70 = 0;\n        long temp71 = 0;\n\
    \        long temp72 = 0;\n        long temp73 = 0;\n        long temp74 = 0;\n\
    \        ", "        // Your code here\n        long ones = 0;\n        long zeros\
    \ = 0;\n        long max = 0;\n        long min = 0;\n        foreach (long i\
    \ in arr) {\n            if (i == 1) {\n                ones++;\n            }\n\
    \            if (i == 0) {\n                zeros++;\n            }\n        \
    \    if (i == max) {\n                max = i;\n            }\n            if\
    \ (i == min) {\n                min = i;\n            }\n        }\n        long\
    \ onesMax = ones * max;\n        long onesMin = ones * min;\n        long zerosMax\
    \ = zeros * max;\n        long zerosMin = zeros * min;\n        long onesMinMax\
    \ = onesMin * max;\n        long onesMaxMin = onesMax * min;\n        long zerosMinMax\
    \ = zerosMin * max;\n        long zerosMaxMin = zerosMax * min;\n        long\
    \ onesMaxMinMax = onesMaxMin * max;\n        long onesMinMaxMin = onesMinMax *\
    \ min;\n        long zerosMinMaxMin = zerosMinMax * min;\n        long zerosMaxMinMin\
    \ = zerosMaxMin * min;\n        long onesMaxMinMaxMin = onesMaxMinMax * min;\n\
    \        long onesMinMaxMinMin = onesMinMaxMin * min;\n        long zerosMinMaxMin\
    \ = zerosMinMaxMin * min;\n        long zerosMaxMinMin = zerosMaxMinMin * min;\n\
    \        long onesMaxMinMaxMin = onesMaxMinMaxMin * min;\n        long onesMinMaxMinMin\
    \ = onesMinMaxMinMin * min;\n        long zerosMinMaxMin = zerosMinMaxMin * min;\n\
    \        long zerosMaxMinMin = zerosMaxMinMin * min;\n        long onesMaxMinMaxMin\
    \ = onesMaxMinMaxMin * min;\n        long onesMinMaxMinMin = onesMinMaxMinMin\
    \ * min;\n        long zerosMinMaxMin = zerosMinMaxMin * min;\n        long zerosMaxMinMin\
    \ = zerosMaxMinMin * min;\n        long onesMaxMinMaxMin = onesMaxMinMaxMin *\
    \ min;\n        long onesMinMaxMinMin = onesMinMaxMinMin * min;\n        long\
    \ zerosMinMaxMin = zerosMinMaxMin * min;\n        long zerosMaxMinMin = zerosMaxMinMin\
    \ * min;\n        long onesMaxMinMaxMin = ones", "        long ones = 0;\n   \
    \     long zeros = 0;\n        long max = 0;\n        foreach (long i in arr)\
    \ {\n            if (i == 1) {\n                ones++;\n            } else {\n\
    \                zeros++;\n            }\n            if (ones > zeros) {\n  \
    \              max = i;\n            }\n        }\n        List<long> result =\
    \ new List<long>();\n        foreach (long i in arr) {\n            if (i == 1)\
    \ {\n                result.Add(i);\n            } else if (i == 0) {\n      \
    \          result.Add(max);\n            } else {\n                result.Add(zeros);\n\
    \            }\n        }\n        return result;", '        // Your code here',
  '        // Your code here', "        List<long> result = new List<long>();\n  \
    \      long ones = 0;\n        long zeros = 0;\n        long max = 0;\n      \
    \  foreach (long i in arr) {\n            if (i == 1) {\n                ones++;\n\
    \            }\n            else if (i == 0) {\n                zeros++;\n   \
    \         }\n            else {\n                if (ones > zeros) {\n       \
    \             result.Add(i);\n                }\n                else {\n    \
    \                result.Add(0);\n                }\n            }\n          \
    \  if (ones > max) {\n                max = ones;\n            }\n           \
    \ if (zeros > max) {\n                max = zeros;\n            }\n        }\n\
    \        if (ones > zeros) {\n            result.Add(max);\n        }\n      \
    \  else {\n            result.Add(0);\n        }\n        long sum = 0;\n    \
    \    foreach (long i in result) {\n            sum += i;\n        }\n        long\
    \ maxSum = 0;\n        foreach (long i in result) {\n            if (maxSum <\
    \ sum) {\n                maxSum = sum;\n            }\n            sum += i;\n\
    \        }\n        long sum2 = 0;\n        foreach (long i in result) {\n   \
    \         sum2 += i;\n        }\n        long maxSum2 = 0;\n        foreach (long\
    \ i in result) {\n            if (maxSum2 < sum2) {\n                maxSum2 =\
    \ sum2;\n            }\n            sum2 += i;\n        }\n        List<long>\
    \ sortedResult = new List<long>();\n        long temp = 0;\n        foreach (long\
    \ i in result) {\n            if (i == 0) {\n                temp = maxSum;\n\
    \            }\n            else if (i == maxSum) {\n                temp = maxSum2;\n\
    \            }\n            else {\n                temp = sum;\n            }\n\
    \            sortedResult.Add(temp);\n        }\n        return sortedResult;",
  "        List<long> result = new List<long>();\n        long ones = 0;\n       \
    \ long zeros = 0;\n        long max = 0;\n        foreach (long i in arr) {\n\
    \            ones += i;\n            zeros -= i;\n            if (ones > max)\
    \ {\n                max = ones;\n            }\n            if (zeros > max)\
    \ {\n                max = zeros;\n            }\n        }\n        long onesCount\
    \ = 0;\n        long zerosCount = 0;\n        long maxCount = 0;\n        foreach\
    \ (long i in arr) {\n            onesCount += i;\n            zerosCount -= i;\n\
    \            if (onesCount > maxCount) {\n                maxCount = onesCount;\n\
    \            }\n            if (zerosCount > maxCount) {\n                maxCount\
    \ = zerosCount;\n            }\n        }\n        long maxOnes = 0;\n       \
    \ long maxZeros = 0;\n        long maxCountOnes = 0;\n        long maxCountZeros\
    \ = 0;\n        foreach (long i in arr) {\n            if (i == 1) {\n       \
    \         maxOnes += i;\n                maxCountOnes += i;\n            }\n \
    \           if (i == 0) {\n                maxZeros += i;\n                maxCountZeros\
    \ += i;\n            }\n        }\n        long maxOnesCount = 0;\n        long\
    \ maxZerosCount = 0;\n        long maxCountOnesCount = 0;\n        long maxCountZerosCount\
    \ = 0;\n        foreach (long i in arr) {\n            if (i == 1) {\n       \
    \         maxOnesCount += i;\n                maxCountOnesCount += i;\n      \
    \      }\n            if (i == 0) {\n                maxZerosCount += i;\n   \
    \             maxCountZerosCount += i;\n            }\n        }\n        long\
    \ maxOnesCountOnes = 0;\n        long maxZerosCountOnes = 0;\n        long maxCountOnesCountOnes\
    \ = 0;\n        long maxCountZerosCountOnes = 0;\n        foreach (long i in arr)\
    \ {\n            if (i == 1) {\n                maxOnesCountOnes += i;\n     \
    \           maxCountOnesCountOnes += i;\n            }\n            if (i == 0)\
    \ {\n                maxZerosCountOnes += i;\n                maxCountZerosCountOnes\
    \ += i;\n            }\n        }\n        long maxOnesCountZeros = 0;\n     \
    \   long maxZerosCountZeros = 0;\n        long maxCountOnesCountZeros = 0;\n \
    \       long maxCountZerosCountZeros = 0;\n        foreach (long i in arr) {\n\
    \            if (i == 1) {\n                maxOnesCountZeros += i;\n        \
    \        maxCountOnesCountZeros += i;\n            }\n            if (i == 0)\
    \ {\n                maxZerosCountZeros += i;\n                maxCountZerosCountZeros\
    \ += i;\n", "        // TODO: Your code here\n        long ones = 0;\n       \
    \ long zeros = 0;\n        long max = 0;\n        long min = 0;\n        long\
    \ sum = 0;\n        foreach (long i in arr) {\n            if (i == 1) {\n   \
    \             ones++;\n            }\n            else if (i == 0) {\n       \
    \         zeros++;\n            }\n            else {\n                sum +=\
    \ i;\n            }\n            if (i > max) {\n                max = i;\n  \
    \          }\n            if (i < min) {\n                min = i;\n         \
    \   }\n        }\n        long onesSum = ones * sum;\n        long zerosSum =\
    \ zeros * sum;\n        long maxSum = max * sum;\n        long minSum = min *\
    \ sum;\n        long maxOnes = ones * max;\n        long maxZeros = zeros * max;\n\
    \        long maxSumOnes = onesSum * max;\n        long maxSumZeros = zerosSum\
    \ * max;\n        long maxOnesZeros = ones * zeros;\n        long maxOnesSum =\
    \ onesSum * ones;\n        long maxZerosSum = zerosSum * zeros;\n        long\
    \ maxOnesZerosSum = onesSum * zeros;\n        long maxZerosOnes = zerosSum * ones;\n\
    \        long maxZerosSumOnes = zerosSum * sum;\n        long maxZerosOnesSum\
    \ = zerosSum * ones;\n        long maxOnesZerosOnesSum = onesSum * ones;\n   \
    \     long maxOnesZerosSumOnes = onesSum * sum;\n        long maxZerosOnesOnesSum\
    \ = zerosSum * ones;\n        long maxZerosOnesSumOnes = zerosSum * sum;\n   \
    \     long maxOnesZerosOnesOnesSum = onesSum * ones;\n        long maxOnesZerosSumOnesOnesSum\
    \ = onesSum * sum;\n        long maxZerosOnesOnesOnesSum = zerosSum * ones;\n\
    \        long maxZerosOnesSumOnesOnesSum = zerosSum * sum;\n        long maxOnesZerosOnesOnesOnesSum\
    \ = onesSum * ones;\n        long maxOnesZerosSumOnesOnesOnesSum = onesSum * sum;\n\
    \        long maxZerosOnesOnesOnesOnesSum = zerosSum * ones;\n        long maxZerosOne",
  "        List<long> result = new List<long>();\n        long ones = 0;\n       \
    \ long zeros = 0;\n        long max = 0;\n        foreach (long i in arr) {\n\
    \            if (i == 1) {\n                ones++;\n            }\n         \
    \   else if (i == 0) {\n                zeros++;\n            }\n            else\
    \ {\n                max = Math.Max(max, Math.Max(ones, zeros));\n           \
    \     ones = 0;\n                zeros = 0;\n            }\n        }\n      \
    \  max = Math.Max(max, Math.Max(ones, zeros));\n        foreach (long i in arr)\
    \ {\n            if (i == 1) {\n                ones++;\n            }\n     \
    \       else if (i == 0) {\n                zeros++;\n            }\n        \
    \    else {\n                result.Add(i);\n            }\n        }\n      \
    \  max = Math.Max(max, Math.Max(ones, zeros));\n        foreach (long i in arr)\
    \ {\n            if (i == 1) {\n                ones++;\n            }\n     \
    \       else if (i == 0) {\n                zeros++;\n            }\n        \
    \    else {\n                result.Add(i);\n            }\n        }\n      \
    \  max = Math.Max(max, Math.Max(ones, zeros));\n        foreach (long i in arr)\
    \ {\n            if (i == 1) {\n                ones++;\n            }\n     \
    \       else if (i == 0) {\n                zeros++;\n            }\n        \
    \    else {\n                result.Add(i);\n            }\n        }\n      \
    \  max = Math.Max(max, Math.Max(ones, zeros));\n        foreach (long i in arr)\
    \ {\n            if (i == 1) {\n                ones++;\n            }\n     \
    \       else if (i == 0) {\n                zeros++;\n            }\n        \
    \    else {\n                result.Add(i);\n            }\n        }\n      \
    \  max = Math.Max(max, Math.Max(ones, zeros));\n        foreach (long i in arr)\
    \ {\n            if (i == 1) {\n                ones++;\n            }\n     \
    \       else if (i == 0) {\n                zeros++;\n            }\n        \
    \    else {\n                result.Add(i);\n            }\n        }\n      \
    \  max = Math.Max(max, Math.Max(ones, zeros));\n        foreach (long i in arr)\
    \ {\n            if (i == 1) {\n                ones++;\n            }\n     \
    \       else if (i == 0) {\n                zeros++;\n            }\n        \
    \    else {\n                result.Add(i);\n            }\n        }\n      \
    \  max = Math.Max(max, Math.Max(ones, zeros));\n        foreach (long i in arr)\
    \ {\n            if (i == 1) {\n                ones++;\n            }\n     \
    \       else if (i == 0) {\n                zeros++;\n            }\n        \
    \    else {\n                result.Add(i);\n            }\n        }\n      \
    \  max = Math.Max(max, Math.Max(ones, zeros));\n        foreach (long i in arr)\
    \ {\n            if (i == 1) {\n                ones++;\n            }\n     \
    \       else if (i == 0) {\n                zeros++;\n            }\n        \
    \    else {\n                result.Add(i);\n            }\n", "        List<long>\
    \ result = new List<long>();\n        long ones = 0;\n        long zeros = 0;\n\
    \        long max = 0;\n        foreach (long i in arr) {\n            ones +=\
    \ i;\n            zeros -= i;\n            if (ones > max) {\n               \
    \ max = ones;\n            }\n            if (zeros > max) {\n               \
    \ max = zeros;\n            }\n        }\n        long onesCount = 0;\n      \
    \  long zerosCount = 0;\n        long maxCount = 0;\n        foreach (long i in\
    \ arr) {\n            onesCount += i;\n            zerosCount -= i;\n        \
    \    if (onesCount > maxCount) {\n                maxCount = onesCount;\n    \
    \        }\n            if (zerosCount > maxCount) {\n                maxCount\
    \ = zerosCount;\n            }\n        }\n        long onesDecimal = 0;\n   \
    \     long zerosDecimal = 0;\n        long maxDecimal = 0;\n        foreach (long\
    \ i in arr) {\n            onesDecimal += i;\n            zerosDecimal -= i;\n\
    \            if (onesDecimal > maxDecimal) {\n                maxDecimal = onesDecimal;\n\
    \            }\n            if (zerosDecimal > maxDecimal) {\n               \
    \ maxDecimal = zerosDecimal;\n            }\n        }\n        long onesDecimalCount\
    \ = 0;\n        long zerosDecimalCount = 0;\n        long maxDecimalCount = 0;\n\
    \        foreach (long i in arr) {\n            onesDecimalCount += i;\n     \
    \       zerosDecimalCount -= i;\n            if (onesDecimalCount > maxDecimalCount)\
    \ {\n                maxDecimalCount = onesDecimalCount;\n            }\n    \
    \        if (zerosDecimalCount > maxDecimalCount) {\n                maxDecimalCount\
    \ = zerosDecimalCount;\n            }\n        }\n        long onesDecimalCountDecimal\
    \ = 0;\n        long zerosDecimalCountDecimal = 0;\n        long maxDecimalCountDecimal\
    \ = 0;\n        foreach (long i in arr) {\n            onesDecimalCountDecimal\
    \ += i;\n            zerosDecimalCountDecimal -= i;\n            if (onesDecimalCountDecimal\
    \ > maxDecimalCountDecimal) {\n                maxDecimalCountDecimal = onesDecimalCountDecimal;\n\
    \            }\n            if (zerosDecimalCountDecimal > maxDecimalCountDecimal)\
    \ {\n                maxDecimalCountDecimal = zerosDecimalCountDecimal;\n    \
    \        }\n        }\n        long onesDecimalCountDecimalCount = 0;\n      \
    \  long zerosDecimalCountDecimalCount = 0;\n        long maxDecimalCountDecimalCount\
    \ = 0;\n        foreach (long i in arr) {\n            onesDecimalCountDecimalCount\
    \ += i;\n            zerosDecimalCountDecimalCount -= i;\n            if (onesDecimalCountDecimalCount\
    \ > maxDecimalCountDecimal", "        // TODO: Implement this method.\n      \
    \  throw new NotImplementedException();", "        long ones = 0;\n        long\
    \ zeros = 0;\n        long max = 0;\n        long min = 0;\n        foreach (long\
    \ i in arr) {\n            if (i == 1) {\n                ones++;\n          \
    \  } else {\n                zeros++;\n            }\n            if (ones > zeros)\
    \ {\n                max = i;\n            } else if (ones < zeros) {\n      \
    \          min = i;\n            }\n        }\n        List<long> result = new\
    \ List<long>();\n        if (ones == 0) {\n            foreach (long i in arr)\
    \ {\n                if (i == 1) {\n                    result.Add(i);\n     \
    \           }\n            }\n            return result;\n        }\n        long\
    \ onesCount = 0;\n        long zerosCount = 0;\n        long maxCount = 0;\n \
    \       long minCount = 0;\n        foreach (long i in arr) {\n            if\
    \ (i == 1) {\n                onesCount++;\n            } else {\n           \
    \     zerosCount++;\n            }\n            if (onesCount > zerosCount) {\n\
    \                maxCount = i;\n            } else if (onesCount < zerosCount)\
    \ {\n                minCount = i;\n            }\n        }\n        long onesCount2\
    \ = 0;\n        long zerosCount2 = 0;\n        long maxCount2 = 0;\n        long\
    \ minCount2 = 0;\n        foreach (long i in arr) {\n            if (i == 1) {\n\
    \                onesCount2++;\n            } else {\n                zerosCount2++;\n\
    \            }\n            if (onesCount2 > zerosCount2) {\n                maxCount2\
    \ = i;\n            } else if (onesCount2 < zerosCount2) {\n                minCount2\
    \ = i;\n            }\n        }\n        long onesCount3 = 0;\n        long zerosCount3\
    \ = 0;\n        long maxCount3 = 0;\n        long minCount3 = 0;\n        foreach\
    \ (long i in arr) {\n            if (i == 1) {\n                onesCount3++;\n\
    \            } else {\n                zerosCount3++;\n            }\n       \
    \     if (onesCount3 > zerosCount3) {\n                maxCount3 = i;\n      \
    \      } else if (onesCount3 < zerosCount3) {\n                minCount3 = i;\n\
    \            }\n        }\n        long onesCount4 = 0;\n        long zerosCount4\
    \ = 0;\n        long maxCount4 = 0;\n        long minCount4 = 0;\n        foreach\
    \ (long i in arr) {\n            if (i == 1) {\n                onesCount4++;\n\
    \            } else {\n                zerosCount4++;\n            }\n       \
    \     if (onesCount4 > zerosCount4) {\n                maxCount4 = i;\n      \
    \      } else if (onesCount4 < zerosCount4) {\n                minCount4 = i;\n\
    \            }\n        }\n        long onesCount5 = 0;\n        long zerosCount5\
    \ = 0;\n        long maxCount5 = 0;\n        long minCount5 = 0;\n        foreach\
    \ (long i in arr) {\n            if (i == 1) {\n                onesCount5++;\n\
    \            } else {\n                zerosCount5++;\n            }\n       \
    \     if (", "        long ones = 0;\n        long zeros = 0;\n        long max\
    \ = 0;\n        long min = 0;\n        foreach (long i in arr) {\n           \
    \ if (i == 1) {\n                ones++;\n            } else {\n             \
    \   zeros++;\n            }\n            if (ones > zeros) {\n               \
    \ max = i;\n            } else if (zeros > ones) {\n                min = i;\n\
    \            }\n        }\n        List<long> result = new List<long>();\n   \
    \     long temp = 0;\n        long temp2 = 0;\n        long temp3 = 0;\n     \
    \   long temp4 = 0;\n        long temp5 = 0;\n        long temp6 = 0;\n      \
    \  long temp7 = 0;\n        long temp8 = 0;\n        long temp9 = 0;\n       \
    \ long temp10 = 0;\n        long temp11 = 0;\n        long temp12 = 0;\n     \
    \   long temp13 = 0;\n        long temp14 = 0;\n        long temp15 = 0;\n   \
    \     long temp16 = 0;\n        long temp17 = 0;\n        long temp18 = 0;\n \
    \       long temp19 = 0;\n        long temp20 = 0;\n        long temp21 = 0;\n\
    \        long temp22 = 0;\n        long temp23 = 0;\n        long temp24 = 0;\n\
    \        long temp25 = 0;\n        long temp26 = 0;\n        long temp27 = 0;\n\
    \        long temp28 = 0;\n        long temp29 = 0;\n        long temp30 = 0;\n\
    \        long temp31 = 0;\n        long temp32 = 0;\n        long temp33 = 0;\n\
    \        long temp34 = 0;\n        long temp35 = 0;\n        long temp36 = 0;\n\
    \        long temp37 = 0;\n        long temp38 = 0;\n        long temp39 = 0;\n\
    \        long temp40 = 0;\n        long temp41 = 0;\n        long temp42 = 0;\n\
    \        long temp43 = 0;\n        long temp44 = 0;\n        long temp45 = 0;\n\
    \        long temp46 = 0;\n        long temp47 = 0;\n        long temp48 = 0;\n\
    \        long temp49 = 0;\n        long temp50 = 0;\n        long temp51 = 0;\n\
    \        long temp52 = 0;\n        long temp53 = 0;\n        long temp54 = 0;\n\
    \        long temp55 = 0;\n        long temp56 = 0;\n        long temp57 = 0;\n\
    \        long temp58 = 0;\n        long temp59 = 0;\n        long temp60 = 0;\n\
    \        long temp61 = 0;\n        long temp62 = 0;\n        long temp63 = 0;\n\
    \        long temp64 = 0;\n        long temp65 = 0;\n        long temp66 = 0;\n\
    \        long temp67 = 0;\n        long temp68 = 0;\n        long temp69 = 0;\n\
    \        long temp70 = 0;\n        long temp71 = 0;\n        long temp72 = 0;\n\
    \        long temp73 = 0;\n        ", '        // Your code here', '        //
    Your code here', "        long ones = arr.Sum(x => x & 1);\n        long zeros\
    \ = arr.Sum(x => x & 2);\n        long maxOnes = arr.Max(x => x & 1);\n      \
    \  long maxZeros = arr.Max(x => x & 2);\n        long maxOnesZeros = arr.Max(x\
    \ => x & 3);\n        long maxOnesOnes = arr.Max(x => x & 4);\n        long maxOnesTwos\
    \ = arr.Max(x => x & 5);\n        long maxOnesThrees = arr.Max(x => x & 6);\n\
    \        long maxOnesFours = arr.Max(x => x & 7);\n        long maxOnesFives =\
    \ arr.Max(x => x & 8);\n        long maxOnesSixes = arr.Max(x => x & 9);\n   \
    \     long maxOnesSevens = arr.Max(x => x & 10);\n        long maxOnesEights =\
    \ arr.Max(x => x & 11);\n        long maxOnesNines = arr.Max(x => x & 12);\n \
    \       long maxOnesTens = arr.Max(x => x & 13);\n        long maxOnesElevens\
    \ = arr.Max(x => x & 14);\n        long maxOnesTwelves = arr.Max(x => x & 15);\n\
    \        long maxOnesThirteens = arr.Max(x => x & 16);\n        long maxOnesFourteens\
    \ = arr.Max(x => x & 17);\n        long maxOnesFifteens = arr.Max(x => x & 18);\n\
    \        long maxOnesSixteens = arr.Max(x => x & 19);\n        long maxOnesSeventeens\
    \ = arr.Max(x => x & 20);\n        long maxOnesEighteens = arr.Max(x => x & 21);\n\
    \        long maxOnesNineteens = arr.Max(x => x & 22);\n        long maxOnesTwenty\
    \ = arr.Max(x => x & 23);\n        long maxOnesTwentyOnes = arr.Max(x => x & 24);\n\
    \        long maxOnesTwentyTwos = arr.Max(x => x & 25);\n        long maxOnesTwentyThrees\
    \ = arr.Max(x => x & 26);\n        long maxOnesTwentyFours = arr.Max(x => x &\
    \ 27);\n        long maxOnesTwentyFives = arr.Max(x => ", "        // TODO: Implement\
    \ this method\n        return null;", '        // Your code here', "        long\
    \ ones = 0;\n        long zeros = 0;\n        long max = 0;\n        foreach (long\
    \ i in arr) {\n            if (i == 1) {\n                ones++;\n          \
    \  }\n            if (i == 0) {\n                zeros++;\n            }\n   \
    \         if (i == max) {\n                max = i;\n            }\n        }\n\
    \        List<long> result = new List<long>();\n        if (ones > zeros) {\n\
    \            result.Add(max);\n            result.AddRange(arr.Where(i => i ==\
    \ max).OrderBy(i => i).Take(ones));\n        } else {\n            result.AddRange(arr.Where(i\
    \ => i == max).OrderBy(i => i).Take(zeros));\n            result.Add(max);\n \
    \       }\n        return result;", "        long ones = 0;\n        long zeros\
    \ = 0;\n        long max = 0;\n        long min = 0;\n        foreach (long i\
    \ in arr) {\n            if (i == 1) {\n                ones++;\n            }\n\
    \            if (i == 0) {\n                zeros++;\n            }\n        \
    \    if (i > max) {\n                max = i;\n            }\n            if (i\
    \ < min) {\n                min = i;\n            }\n        }\n        List<long>\
    \ result = new List<long>();\n        long onesMax = Convert.ToInt64(Math.Pow(2,\
    \ Math.Log10(ones)));\n        long zerosMax = Convert.ToInt64(Math.Pow(2, Math.Log10(zeros)));\n\
    \        long onesMin = Convert.ToInt64(Math.Pow(2, Math.Log10(onesMax)));\n \
    \       long zerosMin = Convert.ToInt64(Math.Pow(2, Math.Log10(zerosMax)));\n\
    \        long onesMax2 = Convert.ToInt64(Math.Pow(2, Math.Log10(onesMax)));\n\
    \        long zerosMax2 = Convert.ToInt64(Math.Pow(2, Math.Log10(zerosMax)));\n\
    \        long onesMin2 = Convert.ToInt64(Math.Pow(2, Math.Log10(onesMin)));\n\
    \        long zerosMin2 = Convert.ToInt64(Math.Pow(2, Math.Log10(zerosMin)));\n\
    \        long onesMax3 = Convert.ToInt64(Math.Pow(2, Math.Log10(onesMax2)));\n\
    \        long zerosMax3 = Convert.ToInt64(Math.Pow(2, Math.Log10(zerosMax2)));\n\
    \        long onesMin3 = Convert.ToInt64(Math.Pow(2, Math.Log10(onesMin2)));\n\
    \        long zerosMin3 = Convert.ToInt64(Math.Pow(2, Math.Log10(zerosMin2)));\n\
    \        long onesMax4 = Convert.ToInt64(Math.Pow(2, Math.Log10(onesMax3)));\n\
    \        long zerosMax4 = Convert.ToInt64(Math.Pow(2, Math.Log10(zerosMax3)));\n\
    \        long onesMin4 = Convert.ToInt64(Math.Pow(2, Math.Log10(onesMin3)));\n\
    \        long zerosMin4 = Convert.ToInt64(Math.Pow(2, Math.Log10(zerosMin3)));\n\
    \        long onesMax5 = Convert.ToInt64(Math.Pow(2, Math.Log10(onesMax4)));\n\
    \        long zerosMax5 = Convert.ToInt64(Math.Pow(2, Math.Log10(zerosMax4)));\n\
    \        long onesMin5 = Convert.ToInt64(Math.Pow(2, Math.Log10(onesMin4)));\n\
    \        ", "        long ones = 0;\n        long zeros = 0;\n        long max\
    \ = 0;\n        foreach (long i in arr) {\n            if (i == 1) {\n       \
    \         ones++;\n            } else {\n                zeros++;\n          \
    \  }\n            if (ones > zeros) {\n                max = i;\n            }\n\
    \        }\n        List<long> result = new List<long>();\n        foreach (long\
    \ i in arr) {\n            if (i == 1) {\n                result.Add(i);\n   \
    \         } else if (i == 0) {\n                result.Add(max);\n           \
    \ } else {\n                result.Add(zeros);\n            }\n        }\n   \
    \     return result;", "        long ones = 0;\n        long zeros = 0;\n    \
    \    long max = 0;\n        foreach (long i in arr) {\n            if (i == 1)\
    \ {\n                ones++;\n            }\n            if (i == 0) {\n     \
    \           zeros++;\n            }\n            if (i == max) {\n           \
    \     max = i;\n            }\n        }\n        List<long> result = new List<long>();\n\
    \        long onesCount = 0;\n        long zerosCount = 0;\n        long maxCount\
    \ = 0;\n        long maxOnes = 0;\n        long maxZeros = 0;\n        long maxOnesCount\
    \ = 0;\n        long maxZerosCount = 0;\n        foreach (long i in arr) {\n \
    \           if (i == 1) {\n                onesCount++;\n            }\n     \
    \       if (i == 0) {\n                zerosCount++;\n            }\n        \
    \    if (i == max) {\n                maxCount++;\n            }\n           \
    \ if (i == max) {\n                maxOnes = i;\n                maxOnesCount\
    \ = onesCount;\n            }\n            if (i == max) {\n                maxZeros\
    \ = i;\n                maxZerosCount = zerosCount;\n            }\n        }\n\
    \        long onesCount2 = onesCount - maxOnesCount;\n        long zerosCount2\
    \ = zerosCount - maxZerosCount;\n        long maxCount2 = maxCount - maxOnesCount\
    \ + maxZerosCount;\n        long maxCount3 = maxCount2 + onesCount2;\n       \
    \ long maxCount4 = maxCount3 + zerosCount2;\n        long maxCount5 = maxCount4\
    \ + onesCount2;\n        long maxCount6 = maxCount5 + zerosCount2;\n        long\
    \ maxCount7 = maxCount6 + onesCount2;\n        long maxCount8 = maxCount7 + zerosCount2;\n\
    \        long maxCount9 = maxCount8 + onesCount2;\n        long maxCount10 = maxCount9\
    \ + zerosCount2;\n        long maxCount11 = maxCount10 + onesCount2;\n       \
    \ long maxCount12 = maxCount11 + zerosCount2;\n        long maxCount13 = maxCount12\
    \ + onesCount2;\n        long maxCount14 = maxCount13 + zerosCount2;\n       \
    \ long maxCount15 = maxCount14 + onesCount2;\n        long maxCount16 = maxCount15\
    \ + zerosCount2;\n        long maxCount17 = maxCount16 + onesCount2;\n       \
    \ long maxCount18 = maxCount17 + zerosCount2;\n        long maxCount19 = maxCount18\
    \ + onesCount2;\n        long maxCount20 = maxCount19 + zerosCount2;\n       \
    \ long maxCount21 = maxCount20", "        long ones = 0;\n        long zeros =\
    \ 0;\n        long max = 0;\n        foreach (long i in arr) {\n            ones\
    \ += i;\n            zeros -= i;\n            if (ones > zeros) {\n          \
    \      max = ones;\n            } else {\n                max = zeros;\n     \
    \       }\n        }\n        List<long> result = new List<long>();\n        foreach\
    \ (long i in arr) {\n            if (i == 1) {\n                result.Add(i);\n\
    \            } else if (i == 0) {\n                result.Add(max);\n        \
    \    } else {\n                result.Add(max * 10 + i);\n            }\n    \
    \    }\n        return result;", "        long ones = 0;\n        long zeros =\
    \ 0;\n        long max = 0;\n        foreach (long i in arr) {\n            if\
    \ (i == 1) {\n                ones++;\n            } else {\n                zeros++;\n\
    \            }\n            if (ones > zeros) {\n                max = i;\n  \
    \          }\n        }\n        List<long> result = new List<long>();\n     \
    \   foreach (long i in arr) {\n            if (i == 1) {\n                result.Add(i);\n\
    \            } else if (i == 0) {\n                result.Add(0);\n          \
    \  } else if (i == max) {\n                result.Add(max);\n            } else\
    \ {\n                result.Add(i);\n            }\n        }\n        return\
    \ result;", '        // Your code here', "        long ones = 0;\n        long\
    \ zeros = 0;\n        long max = 0;\n        foreach (long i in arr) {\n     \
    \       if (i == 1) {\n                ones++;\n            }\n            if\
    \ (i == 0) {\n                zeros++;\n            }\n            if (i > max)\
    \ {\n                max = i;\n            }\n        }\n        long onesMax\
    \ = ones * max;\n        long zerosMax = zeros * max;\n        long onesMin =\
    \ ones * max;\n        long zerosMin = zeros * max;\n        long onesMaxMin =\
    \ onesMax * max;\n        long zerosMaxMin = zerosMax * max;\n        long onesMinMin\
    \ = onesMin * max;\n        long zerosMinMin = zerosMin * max;\n        long onesMaxMinMin\
    \ = onesMaxMin * max;\n        long zerosMaxMinMin = zerosMaxMin * max;\n    \
    \    long onesMinMinMin = onesMinMin * max;\n        long zerosMinMinMin = zerosMinMin\
    \ * max;\n        long onesMaxMinMinMin = onesMaxMinMin * max;\n        long zerosMaxMinMinMin\
    \ = zerosMaxMinMin * max;\n        long onesMinMinMinMin = onesMinMinMin * max;\n\
    \        long zerosMinMinMinMin = zerosMinMinMin * max;\n        long onesMaxMinMinMin\
    \ = onesMaxMinMinMin * max;\n        long zerosMaxMinMinMin = zerosMaxMinMinMin\
    \ * max;\n        long onesMinMinMinMin = onesMinMinMinMin * max;\n        long\
    \ zerosMinMinMinMin = zerosMinMinMinMin * max;\n        long onesMaxMinMinMin\
    \ = onesMaxMinMinMin * max;\n        long zerosMaxMinMinMin = zerosMaxMinMinMin\
    \ * max;\n        long onesMinMinMinMin = onesMinMinMinMin * max;\n        long\
    \ zerosMinMinMinMin = zerosMinMinMinMin * max;\n        long onesMaxMinMinMin\
    \ = onesMaxMinMinMin * max;\n        long zerosMaxMinMinMin = zerosMaxMinMinMin\
    \ * max;\n        long onesMinMinMinMin = onesMinMinMinMin * max;\n        long\
    \ zerosMinMinMinMin = zerosMinMinMinMin * max;\n        long onesMaxMinMinMin\
    \ = onesMaxMinMinMin * max;", "        long ones = 0;\n        long zeros = 0;\n\
    \        long max = 0;\n        foreach (long i in arr) {\n            if (i ==\
    \ 1) {\n                ones++;\n            } else {\n                zeros++;\n\
    \            }\n            if (ones > zeros) {\n                max = i;\n  \
    \          }\n        }\n        List<long> result = new List<long>();\n     \
    \   foreach (long i in arr) {\n            if (i == 1) {\n                result.Add(i);\n\
    \            } else if (i == 0) {\n                result.Add(max);\n        \
    \    } else {\n                result.Add(zeros);\n            }\n        }\n\
    \        return result;", "        long ones = 0;\n        long zeros = 0;\n \
    \       long max = 0;\n        foreach (long n in arr) {\n            if (n ==\
    \ 1)\n                ones++;\n            else\n                zeros++;\n  \
    \          if (ones > zeros)\n                max = n;\n        }\n        List<long>\
    \ result = new List<long>();\n        foreach (long n in arr) {\n            if\
    \ (n == 1)\n                result.Add(n);\n            else\n               \
    \ result.Add(n - max);\n        }\n        return result;", "        long ones\
    \ = 0;\n        long zeros = 0;\n        long maxOnes = 0;\n        long maxZeros\
    \ = 0;\n        long maxOnesCount = 0;\n        long maxZerosCount = 0;\n    \
    \    long maxOnesCount2 = 0;\n        long maxZerosCount2 = 0;\n        long maxOnesCount3\
    \ = 0;\n        long maxZerosCount3 = 0;\n        long maxOnesCount4 = 0;\n  \
    \      long maxZerosCount4 = 0;\n        long maxOnesCount5 = 0;\n        long\
    \ maxZerosCount5 = 0;\n        long maxOnesCount6 = 0;\n        long maxZerosCount6\
    \ = 0;\n        long maxOnesCount7 = 0;\n        long maxZerosCount7 = 0;\n  \
    \      long maxOnesCount8 = 0;\n        long maxZerosCount8 = 0;\n        long\
    \ maxOnesCount9 = 0;\n        long maxZerosCount9 = 0;\n        long maxOnesCount10\
    \ = 0;\n        long maxZerosCount10 = 0;\n        long maxOnesCount11 = 0;\n\
    \        long maxZerosCount11 = 0;\n        long maxOnesCount12 = 0;\n       \
    \ long maxZerosCount12 = 0;\n        long maxOnesCount13 = 0;\n        long maxZerosCount13\
    \ = 0;\n        long maxOnesCount14 = 0;\n        long maxZerosCount14 = 0;\n\
    \        long maxOnesCount15 = 0;\n        long maxZerosCount15 = 0;\n       \
    \ long maxOnesCount16 = 0;\n        long maxZerosCount16 = 0;\n        long maxOnesCount17\
    \ = 0;\n        long maxZerosCount17 = 0;\n        long maxOnesCount18 = 0;\n\
    \        long maxZerosCount18 = 0;\n        long maxOnesCount19 = 0;\n       \
    \ long maxZerosCount19 = 0;\n        long maxOnesCount20 = 0;\n        long maxZerosCount20\
    \ = 0;\n        long maxOnesCount21 = 0;\n        long maxZerosCount21 = 0;\n\
    \        long maxOnesCount22 = 0;\n        long maxZerosCount22 = 0;\n       \
    \ long maxOnesCount23 = 0;\n        long maxZerosCount23 = 0;\n        long maxOnesCount24\
    \ = 0;\n        long maxZerosCount24 = 0;\n        long maxOnesCount25 = 0;\n\
    \        long maxZerosCount25 = 0;\n        long maxOnesCount26 = 0;\n       \
    \ long maxZerosCount26 = 0;\n        long maxOnesCount", "        List<long> result\
    \ = new List<long>();\n        long ones = 0;\n        long tens = 0;\n      \
    \  long hundreds = 0;\n        long thousands = 0;\n        long tenThousands\
    \ = 0;\n        long oneThousands = 0;\n        long oneHundreds = 0;\n      \
    \  long oneThousandHundreds = 0;\n        long oneHundredThousands = 0;\n    \
    \    long oneThousandHundredThousands = 0;\n        long oneHundredThousandHundredThousands\
    \ = 0;\n        long oneHundredThousandHundredThousands++;\n        long oneHundredThousandHundredThousands++;\n\
    \        long oneHundredThousandHundredThousands++;\n        long oneHundredThousandHundredThousands++;\n\
    \        long oneHundredThousandHundredThousands++;\n        long oneHundredThousandHundredThousands++;\n\
    \        long oneHundredThousandHundredThousands++;\n        long oneHundredThousandHundredThousands++;\n\
    \        long oneHundredThousandHundredThousands++;\n        long oneHundredThousandHundredThousands++;\n\
    \        long oneHundredThousandHundredThousands++;\n        long oneHundredThousandHundredThousands++;\n\
    \        long oneHundredThousandHundredThousands++;\n        long oneHundredThousandHundredThousands++;\n\
    \        long oneHundredThousandHundredThousands++;\n        long oneHundredThousandHundredThousands++;\n\
    \        long oneHundredThousandHundredThousands++;\n        long oneHundredThousandHundredThousands++;\n\
    \        long oneHundredThousandHundredThousands++;\n        long oneHundredThousandHundredThousands++;\n\
    \        long oneHundredThousandHundredThousands++;\n        long oneHundredThousandHundredThousands++;\n\
    \        long oneHundredTh", "        long ones = 0;\n        long zeros = 0;\n\
    \        long max = 0;\n        long min = long.MaxValue;\n        foreach (long\
    \ i in arr) {\n            if (i == 1) {\n                ones++;\n          \
    \  } else {\n                zeros++;\n            }\n            if (ones > zeros)\
    \ {\n                max = i;\n            }\n            if (ones < zeros) {\n\
    \                min = i;\n            }\n        }\n        long onesCount =\
    \ 0;\n        long zerosCount = 0;\n        long maxCount = 0;\n        long minCount\
    \ = 0;\n        foreach (long i in arr) {\n            if (i == 1) {\n       \
    \         onesCount++;\n            } else {\n                zerosCount++;\n\
    \            }\n            if (onesCount > zerosCount) {\n                maxCount\
    \ = i;\n            }\n            if (onesCount < zerosCount) {\n           \
    \     minCount = i;\n            }\n        }\n        long onesDecimal = 0;\n\
    \        long zerosDecimal = 0;\n        long maxDecimal = 0;\n        long minDecimal\
    \ = 0;\n        foreach (long i in arr) {\n            if (i == 1) {\n       \
    \         onesDecimal++;\n            } else {\n                zerosDecimal++;\n\
    \            }\n            if (onesDecimal > zerosDecimal) {\n              \
    \  maxDecimal = i;\n            }\n            if (onesDecimal < zerosDecimal)\
    \ {\n                minDecimal = i;\n            }\n        }\n        List<long>\
    \ result = new List<long>();\n        long onesCountDecimal = 0;\n        long\
    \ zerosCountDecimal = 0;\n        long maxCountDecimal = 0;\n        long minCountDecimal\
    \ = 0;\n        long onesDecimalDecimal = 0;\n        long zerosDecimalDecimal\
    \ = 0;\n        long maxDecimalDecimal = 0;\n        long minDecimalDecimal =\
    \ 0;\n        long onesDecimalDecimalDecimal = 0;\n        long zerosDecimalDecimalDecimal\
    \ = 0;\n        long maxDecimalDecimalDecimal = 0;\n        long minDecimalDecimalDecimal\
    \ = 0;\n        long onesDecimalDecimalDecimalDecimal = 0;\n        long zerosDecimalDecimalDecimalDecimal\
    \ = 0;\n        long maxDecimalDecimalDecimalDecimal = 0;\n        long minDecimalDecimalDecimal\
    \ = 0;\n        long onesDecimalDecimalDecimalDecimal = 0;\n        long zerosDecimalDecimalDecimalDecimal\
    \ = 0;\n        long maxDecimalDecimalDecimalDecimal = 0;\n        long minDecimalDecimalDecimal\
    \ = 0;\n        long onesDecimalDecimalDecimalDecimal = 0;\n        long zerosDecimalDecimalDecimalDecimal\
    \ = 0;\n        long maxDecimalDecimalDecimalDecimal = 0;\n        long minDecimalDecimalDecimal\
    \ = 0;\n        long onesDecimalDecimalDecimalDecimal = 0;\n        long zerosDecimalDecimalDecimalDecimal\
    \ = 0;\n        long maxDecimalDecimalDecimalDecimal = 0;\n        long minDecimalDecimalDecimal\
    \ = 0;\n        long onesDecimalDecimalDecimalDecimal = 0;\n        long zerosDecimalDecimalDecimal",
  "        long ones = 0;\n        long zeros = 0;\n        long max = 0;\n      \
    \  foreach (long i in arr) {\n            ones += i;\n            zeros -= i;\n\
    \            if (ones > max) {\n                max = ones;\n            }\n \
    \           if (zeros > max) {\n                max = zeros;\n            }\n\
    \        }\n        List<long> result = new List<long>();\n        foreach (long\
    \ i in arr) {\n            if (i == 1) {\n                result.Add(i);\n   \
    \         }\n        }\n        foreach (long i in arr) {\n            if (i ==\
    \ 0) {\n                result.Add(i);\n            }\n        }\n        long\
    \ onesCount = 0;\n        long zerosCount = 0;\n        foreach (long i in result)\
    \ {\n            onesCount += i;\n            zerosCount -= i;\n        }\n  \
    \      long onesCount2 = onesCount / max;\n        long zerosCount2 = zerosCount\
    \ / max;\n        long onesCount3 = onesCount % max;\n        long zerosCount3\
    \ = zerosCount % max;\n        long onesCount4 = onesCount2 / max;\n        long\
    \ zerosCount4 = zerosCount2 / max;\n        long onesCount5 = onesCount3 / max;\n\
    \        long zerosCount5 = zerosCount3 / max;\n        long onesCount6 = onesCount4\
    \ / max;\n        long zerosCount6 = zerosCount4 / max;\n        long onesCount7\
    \ = onesCount5 / max;\n        long zerosCount7 = zerosCount5 / max;\n       \
    \ long onesCount8 = onesCount6 / max;\n        long zerosCount8 = zerosCount6\
    \ / max;\n        long onesCount9 = onesCount7 / max;\n        long zerosCount9\
    \ = zerosCount7 / max;\n        long onesCount10 = onesCount8 / max;\n       \
    \ long zerosCount10 = zerosCount8 / max;\n        long onesCount11 = onesCount9\
    \ / max;\n        long zerosCount11 = zerosCount9 / max;\n        long onesCount12\
    \ = onesCount10 / max;\n        long zerosCount12 = zerosCount10 / max;\n    \
    \    long onesCount13 = onesCount11 / max;\n        long zerosCount13 = zerosCount11\
    \ / max;\n        long onesCount14 = onesCount12 / max;\n        long zerosCount14\
    \ = zerosCount12 / max;\n        long onesCount15 = onesCount13 / max;\n     \
    \   long zerosCount15 = zerosCount13 / max;\n        long one", "        // Write\
    \ your code here\n        long ones = 0;\n        long zeros = 0;\n        long\
    \ max = 0;\n        foreach (long i in arr) {\n            if (i == 1) {\n   \
    \             ones++;\n            }\n            if (i == 0) {\n            \
    \    zeros++;\n            }\n            if (i == max) {\n                max\
    \ = i;\n            }\n        }\n        long onesMax = ones;\n        long zerosMax\
    \ = zeros;\n        long maxMax = max;\n        long onesMin = ones;\n       \
    \ long zerosMin = zeros;\n        long maxMin = max;\n        long onesMaxMin\
    \ = ones;\n        long zerosMaxMin = zeros;\n        long maxMaxMin = max;\n\
    \        long onesMinMax = ones;\n        long zerosMinMax = zeros;\n        long\
    \ maxMinMax = max;\n        long onesMaxMinMax = ones;\n        long zerosMaxMinMax\
    \ = zeros;\n        long maxMaxMinMax = max;\n        long onesMinMaxMax = ones;\n\
    \        long zerosMinMaxMax = zeros;\n        long maxMinMaxMax = max;\n    \
    \    long onesMaxMinMaxMax = ones;\n        long zerosMaxMinMaxMax = zeros;\n\
    \        long maxMaxMinMaxMax = max;\n        long onesMinMaxMaxMax = ones;\n\
    \        long zerosMinMaxMaxMax = zeros;\n        long maxMinMaxMaxMax = max;\n\
    \        long onesMaxMinMaxMax = ones;\n        long zerosMinMaxMaxMax = zeros;\n\
    \        long maxMinMaxMaxMax = max;\n        long onesMaxMinMaxMax = ones;\n\
    \        long zerosMinMaxMaxMax = zeros;\n        long maxMinMaxMaxMax = max;\n\
    \        long onesMaxMinMaxMax = ones;\n        long zerosMinMaxMaxMax = zeros;\n\
    \        long maxMinMaxMaxMax = max;\n        long onesMaxMinMaxMax = ones;\n\
    \        long zerosMinMaxMaxMax = zeros;\n        long maxMinMaxMaxMax = max;\n\
    \        long onesMaxMinMaxMax = ones;\n        long zerosMinMaxMaxMax = zeros;\n\
    \        long maxMinMaxMaxMax = max;\n        long onesMaxMinMaxMax = ones;\n\
    \        long zerosMinMaxMaxMax = zeros;\n        long maxMinMaxMaxMax = max;\n\
    \        long onesMaxMinMaxMax = ones;", "        long ones = 0;\n        long\
    \ zeros = 0;\n        long max = 0;\n        foreach (long i in arr) {\n     \
    \       if (i == 1) {\n                ones++;\n            }\n            if\
    \ (i == 0) {\n                zeros++;\n            }\n            if (i > max)\
    \ {\n                max = i;\n            }\n        }\n        long onesMax\
    \ = ones * max;\n        long zerosMax = zeros * max;\n        long onesMin =\
    \ ones * max;\n        long zerosMin = zeros * max;\n        long onesMaxMin =\
    \ onesMax * max;\n        long zerosMaxMin = zerosMax * max;\n        long onesMinMin\
    \ = onesMin * max;\n        long zerosMinMin = zerosMin * max;\n        long onesMaxMinMin\
    \ = onesMaxMin * max;\n        long zerosMaxMinMin = zerosMaxMin * max;\n    \
    \    long onesMinMinMin = onesMinMin * max;\n        long zerosMinMinMin = zerosMinMin\
    \ * max;\n        long onesMaxMinMinMin = onesMaxMinMin * max;\n        long zerosMaxMinMinMin\
    \ = zerosMaxMinMin * max;\n        long onesMinMinMinMin = onesMinMinMin * max;\n\
    \        long zerosMinMinMinMin = zerosMinMinMin * max;\n        long onesMaxMinMinMin\
    \ = onesMaxMinMinMin * max;\n        long zerosMaxMinMinMin = zerosMaxMinMinMin\
    \ * max;\n        long onesMinMinMinMin = onesMinMinMinMin * max;\n        long\
    \ zerosMinMinMinMin = zerosMinMinMinMin * max;\n        long onesMaxMinMinMin\
    \ = onesMaxMinMinMin * max;\n        long zerosMaxMinMinMin = zerosMaxMinMinMin\
    \ * max;\n        long onesMinMinMinMin = onesMinMinMinMin * max;\n        long\
    \ zerosMinMinMinMin = zerosMinMinMinMin * max;\n        long onesMaxMinMinMin\
    \ = onesMaxMinMinMin * max;\n        long zerosMaxMinMinMin = zerosMaxMinMinMin\
    \ * max;\n        long onesMinMinMinMin = onesMinMinMinMin * max;\n        long\
    \ zerosMinMinMinMin = zerosMinMinMinMin * max;\n        long onesMaxMinMinMin\
    \ = onesMaxMinMinMin * max;", "        long ones = 0;\n        long zeros = 0;\n\
    \        long max = 0;\n        foreach (long i in arr) {\n            if (i ==\
    \ 1) {\n                ones++;\n            }\n            if (i == 0) {\n  \
    \              zeros++;\n            }\n            if (i > max) {\n         \
    \       max = i;\n            }\n        }\n        long onesMax = ones * max;\n\
    \        long zerosMax = zeros * max;\n        long onesMaxDecimal = onesMax *\
    \ Math.Pow(10, max);\n        long zerosMaxDecimal = zerosMax * Math.Pow(10, max);\n\
    \        long onesMaxDecimalDecimal = onesMaxDecimal * Math.Pow(10, max);\n  \
    \      long zerosMaxDecimalDecimal = zerosMaxDecimal * Math.Pow(10, max);\n  \
    \      long onesMaxDecimalDecimalDecimal = onesMaxDecimalDecimal * Math.Pow(10,\
    \ max);\n        long zerosMaxDecimalDecimalDecimal = zerosMaxDecimalDecimal *\
    \ Math.Pow(10, max);\n        long onesMaxDecimalDecimalDecimalDecimal = onesMaxDecimalDecimalDecimal\
    \ * Math.Pow(10, max);\n        long zerosMaxDecimalDecimalDecimalDecimal = zerosMaxDecimalDecimalDecimal\
    \ * Math.Pow(10, max);\n        long onesMaxDecimalDecimalDecimalDecimalDecimal\
    \ = onesMaxDecimalDecimalDecimalDecimal * Math.Pow(10, max);\n        long zerosMaxDecimalDecimalDecimalDecimalDecimal\
    \ = zerosMaxDecimalDecimalDecimalDecimal * Math.Pow(10, max);\n        long onesMaxDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesMaxDecimalDecimalDecimalDecimalDecimal * Math.Pow(10, max);\n        long\
    \ zerosMaxDecimalDecimalDecimalDecimalDecimalDecimal = zerosMaxDecimalDecimalDecimalDecimalDecimal\
    \ * Math.Pow(10, max);\n        long onesMaxDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesMaxDecimalDecimalDecimalDecimalDecimalDecimal * Math.Pow(10, max);\n \
    \       long zerosMaxDecimalDecimalDecimalDecimalDecimalDecimalDecimal = zerosMaxDecimalDecimalDecimalDecimalDecimalDecimal\
    \ * Math.Pow(10, max);\n        long onesMaxDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesMaxDecimalDecimalDecimalDecimalDecimalDecimalDecimal * Math.Pow(10, max);\n\
    \        long zerosMaxDecimalDecimalDecimalDecimalDecimalDecimalDecimal = zerosMaxDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ * Math.Pow(10, max);\n        long onesMaxDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesMaxDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal * Math.Pow(10,\
    \ max);\n        long zerosMaxDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = zerosMaxDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal * Math.Pow(10,\
    \ max);\n        long onesMaxDecimal", "        // Your code goes here\n     \
    \   long ones = 0;\n        long tens = 0;\n        long hundreds = 0;\n     \
    \   long thousands = 0;\n        long tenThousands = 0;\n        long oneThousands\
    \ = 0;\n        long oneHundreds = 0;\n        long oneThousandHundreds = 0;\n\
    \        long oneHundredThousands = 0;\n        long oneHundredThousandHundreds\
    \ = 0;\n        long oneHundredThousandHundredThousands = 0;\n        long oneHundredThousandHundredThousandHundreds\
    \ = 0;\n        long oneHundredThousandHundredThousandHundredThousands = 0;\n\
    \        long oneHundredThousandHundredThousandHundredThousandHundreds = 0;\n\
    \        long oneHundredThousandHundredThousandHundredThousandHundredThousands\
    \ = 0;\n        long oneHundredThousandHundredThousandHundredThousandHundredThousandHundreds\
    \ = 0;\n        long oneHundredThousandHundredThousandHundredThousandHundredThousandHundredThousands\
    \ = 0;\n        long oneHundredThousandHundredThousandHundredThousandHundredThousandHundredThousandHundreds\
    \ = 0;\n        long oneHundredThousandHundredThousandHundredThousandHundredThousandHundredThousandHundredThousands\
    \ = 0;\n        long oneHundredThousandHundredThousandHundredThousandHundredThousandHundredThousandHundredThousandHundreds\
    \ = 0;\n        long oneHundredThousandHundredThousandHundredThousandHundredThousandHundredThousandHundredThousandHundredThousands\
    \ = 0;\n        long oneHundredThousandHundredThousandHundredThousandHundredThousandHundredThousandHundredThousandHundredThousandHundreds\
    \ = 0;\n        long oneHundredThousandHundredThousandHundredThousandH", "   \
    \     long ones = 0;\n        long zeros = 0;\n        long max = 0;\n       \
    \ foreach (long i in arr) {\n            if (i == 1) {\n                ones++;\n\
    \            }\n            if (i == 0) {\n                zeros++;\n        \
    \    }\n            if (i > max) {\n                max = i;\n            }\n\
    \        }\n        List<long> result = new List<long>();\n        long onesCount\
    \ = 0;\n        long zerosCount = 0;\n        long maxCount = 0;\n        foreach\
    \ (long i in arr) {\n            if (i == 1) {\n                onesCount++;\n\
    \            }\n            if (i == 0) {\n                zerosCount++;\n   \
    \         }\n            if (i > maxCount) {\n                maxCount = i;\n\
    \            }\n        }\n        if (onesCount > zerosCount) {\n           \
    \ result.Add(max);\n            result.AddRange(arr.Where(i => i == 1).OrderBy(i\
    \ => i).ToList());\n            result.AddRange(arr.Where(i => i == 0).OrderByDescending(i\
    \ => i).ToList());\n        }\n        else if (zerosCount > onesCount) {\n  \
    \          result.AddRange(arr.Where(i => i == 1).OrderBy(i => i).ToList());\n\
    \            result.Add(max);\n            result.AddRange(arr.Where(i => i ==\
    \ 0).OrderByDescending(i => i).ToList());\n        }\n        else {\n       \
    \     result.AddRange(arr.Where(i => i == 1).OrderBy(i => i).ToList());\n    \
    \        result.AddRange(arr.Where(i => i == 0).OrderByDescending(i => i).ToList());\n\
    \            result.Add(max);\n        }\n        return result;", "        long\
    \ ones = 0;\n        long zeros = 0;\n        long max = 0;\n        foreach (long\
    \ i in arr) {\n            if (i == 1) {\n                ones++;\n          \
    \  }\n            if (i == 0) {\n                zeros++;\n            }\n   \
    \         if (i > max) {\n                max = i;\n            }\n        }\n\
    \        List<long> result = new List<long>();\n        long onesCount = 0;\n\
    \        long zerosCount = 0;\n        long maxCount = 0;\n        long maxValue\
    \ = 0;\n        foreach (long i in arr) {\n            if (i == 1) {\n       \
    \         onesCount++;\n            }\n            if (i == 0) {\n           \
    \     zerosCount++;\n            }\n            if (i > maxValue) {\n        \
    \        maxValue = i;\n            }\n        }\n        long onesCountMax =\
    \ 0;\n        long zerosCountMax = 0;\n        long maxCountMax = 0;\n       \
    \ long maxValueMax = 0;\n        long maxValueOnes = 0;\n        long maxValueZeros\
    \ = 0;\n        long maxValueMaxOnes = 0;\n        long maxValueMaxZeros = 0;\n\
    \        long maxValueOnesMax = 0;\n        long maxValueZerosMax = 0;\n     \
    \   long maxValueMaxOnesMax = 0;\n        long maxValueMaxZerosMax = 0;\n    \
    \    long maxValueOnesMaxCount = 0;\n        long maxValueZerosMaxCount = 0;\n\
    \        long maxValueMaxOnesMaxCount = 0;\n        long maxValueMaxZerosMaxCount\
    \ = 0;\n        long maxValueOnesMaxCountMax = 0;\n        long maxValueZerosMaxCountMax\
    \ = 0;\n        long maxValueMaxOnesMaxCountMax = 0;\n        long maxValueMaxZerosMaxCountMax\
    \ = 0;\n        long maxValueOnesMaxCountMaxOnes = 0;\n        long maxValueZerosMaxCountMaxOnes\
    \ = 0;\n        long maxValueMaxOnesMaxCountMaxOnes = 0;\n        long maxValueMaxZerosMaxCountMaxOnes\
    \ = 0;\n        long maxValueOnesMaxCountMaxZeros = 0;\n        long maxValueZerosMaxCountMaxZeros\
    \ = 0;\n        long maxValueMaxOnesMaxCountMaxZeros = 0;\n        long maxValueMaxZerosMaxCountMaxZeros\
    \ = 0;\n        long maxValueOnesMaxCountMaxOnesMax = 0;\n        long maxValueZerosMaxCountMaxOnesMax\
    \ = 0;\n        long maxValueMaxOnesMaxCountMaxOnesMax = 0;\n        long maxValueMaxZerosMaxCountMaxOnesMax\
    \ = 0;\n        long maxValueOnesMaxCountMaxZerosMax = 0;\n        long maxValueZeros",
  "        long ones = 0;\n        long zeros = 0;\n        long max = 0;\n      \
    \  foreach (long i in arr) {\n            if (i == 1) {\n                ones++;\n\
    \            }\n            if (i == 0) {\n                zeros++;\n        \
    \    }\n            if (i > max) {\n                max = i;\n            }\n\
    \        }\n        long onesMax = ones * max;\n        long zerosMax = zeros\
    \ * max;\n        long maxOnes = ones * max;\n        long maxZeros = zeros *\
    \ max;\n        long maxOnesMax = onesMax * max;\n        long maxZerosMax = zerosMax\
    \ * max;\n        long maxOnesMaxOnes = onesMax * max * max;\n        long maxZerosMaxZeros\
    \ = zerosMax * max * max;\n        long maxOnesMaxZerosOnes = onesMax * max *\
    \ max * max;\n        long maxZerosMaxZerosZeros = zerosMax * max * max * max;\n\
    \        long maxOnesMaxZerosOnesZeros = onesMax * max * max * max * max;\n  \
    \      long maxZerosMaxZerosOnesZeros = zerosMax * max * max * max * max;\n  \
    \      long maxOnesMaxZerosOnesZerosZeros = onesMax * max * max * max * max *\
    \ max;\n        long maxZerosMaxZerosOnesZerosZeros = zerosMax * max * max * max\
    \ * max * max;\n        long maxOnesMaxZerosOnesZerosZerosZeros = onesMax * max\
    \ * max * max * max * max * max;\n        long maxZerosMaxZerosOnesZerosZerosZeros\
    \ = zerosMax * max * max * max * max * max * max;\n        long maxOnesMaxZerosOnesZerosZerosZerosZeros\
    \ = onesMax * max * max * max * max * max * max * max;\n        long maxZerosMaxZerosOnesZerosZerosZerosZeros\
    \ = zerosMax * max * max * max * max * max * max * max;\n        long maxOnesMaxZerosOnesZerosZerosZerosZerosZeros\
    \ = onesMax * max * max * max * max * max * max * ", "        List<long> result\
    \ = new List<long>();\n        long ones = 0;\n        long zeros = 0;\n     \
    \   long max = 0;\n        foreach (long i in arr) {\n            if (i == 1)\
    \ {\n                ones++;\n            }\n            if (i == 0) {\n     \
    \           zeros++;\n            }\n            if (i > max) {\n            \
    \    max = i;\n            }\n        }\n        long onesMax = ones * max;\n\
    \        long zerosMax = zeros * max;\n        long onesMin = ones * max - max;\n\
    \        long zerosMin = zeros * max - max;\n        long onesMaxMin = onesMax\
    \ * min;\n        long zerosMaxMin = zerosMax * min;\n        long onesMinMin\
    \ = onesMin * min;\n        long zerosMinMin = zerosMin * min;\n        long onesMaxMinMin\
    \ = onesMaxMin * min;\n        long zerosMaxMinMin = zerosMaxMin * min;\n    \
    \    long onesMinMinMin = onesMinMin * min;\n        long zerosMinMinMin = zerosMinMin\
    \ * min;\n        long onesMaxMinMinMin = onesMaxMinMin * min;\n        long zerosMaxMinMinMin\
    \ = zerosMaxMinMin * min;\n        long onesMinMinMinMin = onesMinMinMin * min;\n\
    \        long zerosMinMinMinMin = zerosMinMinMin * min;\n        long onesMaxMinMinMin\
    \ = onesMaxMinMinMin * min;\n        long zerosMaxMinMinMin = zerosMaxMinMinMin\
    \ * min;\n        long onesMinMinMinMin = onesMinMinMinMin * min;\n        long\
    \ zerosMinMinMinMin = zerosMinMinMinMin * min;\n        long onesMaxMinMinMin\
    \ = onesMaxMinMinMin * min;\n        long zerosMaxMinMinMin = zerosMaxMinMinMin\
    \ * min;\n        long onesMinMinMinMin = onesMinMinMinMin * min;\n        long\
    \ zerosMinMinMinMin = zerosMinMinMinMin * min;\n        long onesMaxMinMinMin\
    \ = onesMaxMinMinMin * min;\n        long zerosMaxMinMinMin = zerosMaxMinMinMin\
    \ * min;\n        long onesMinMinMinMin = onesMinMinMinMin * min;\n        long\
    \ zerosMinMinMinMin = zerosMinMinMinMin * min;\n        long onesMaxMin", "  \
    \      // Write your code here\n        long ones = 0;\n        long zeros = 0;\n\
    \        long max = 0;\n        long min = 0;\n        foreach (long i in arr)\
    \ {\n            if (i == 1) {\n                ones++;\n            }\n     \
    \       if (i == 0) {\n                zeros++;\n            }\n            if\
    \ (i > max) {\n                max = i;\n            }\n            if (i < min)\
    \ {\n                min = i;\n            }\n        }\n        List<long> result\
    \ = new List<long>();\n        if (ones > zeros) {\n            foreach (long\
    \ i in arr) {\n                if (i == 1) {\n                    result.Add(i);\n\
    \                }\n            }\n            foreach (long i in arr) {\n   \
    \             if (i == 0) {\n                    result.Add(i);\n            \
    \    }\n            }\n            foreach (long i in arr) {\n               \
    \ if (i > max) {\n                    result.Add(i);\n                }\n    \
    \        }\n            foreach (long i in arr) {\n                if (i < min)\
    \ {\n                    result.Add(i);\n                }\n            }\n  \
    \      }\n        if (ones < zeros) {\n            foreach (long i in arr) {\n\
    \                if (i == 1) {\n                    result.Add(i);\n         \
    \       }\n            }\n            foreach (long i in arr) {\n            \
    \    if (i == 0) {\n                    result.Add(i);\n                }\n  \
    \          }\n            foreach (long i in arr) {\n                if (i < min)\
    \ {\n                    result.Add(i);\n                }\n            }\n  \
    \          foreach (long i in arr) {\n                if (i > max) {\n       \
    \             result.Add(i);\n                }\n            }\n        }\n  \
    \      if (ones == zeros) {\n            foreach (long i in arr) {\n         \
    \       if (i == 1) {\n                    result.Add(i);\n                }\n\
    \            }\n            foreach (long i in arr) {\n                if (i ==\
    \ 0) {\n                    result.Add(i);\n                }\n            }\n\
    \            foreach (long i in arr) {\n                if (i < min) {\n     \
    \               result.Add(i);\n                }\n            }\n           \
    \ foreach (long i in arr) {\n                if (i > max) {\n                \
    \    result.Add(i);\n                }\n            }\n        }\n        return\
    \ result;", "        long ones = 0;\n        long zeros = 0;\n        long maxOnes\
    \ = 0;\n        long maxZeros = 0;\n        long maxOnesCount = 0;\n        long\
    \ maxZerosCount = 0;\n        long maxOnesCount2 = 0;\n        long maxZerosCount2\
    \ = 0;\n        long maxOnesCount3 = 0;\n        long maxZerosCount3 = 0;\n  \
    \      long maxOnesCount4 = 0;\n        long maxZerosCount4 = 0;\n        long\
    \ maxOnesCount5 = 0;\n        long maxZerosCount5 = 0;\n        long maxOnesCount6\
    \ = 0;\n        long maxZerosCount6 = 0;\n        long maxOnesCount7 = 0;\n  \
    \      long maxZerosCount7 = 0;\n        long maxOnesCount8 = 0;\n        long\
    \ maxZerosCount8 = 0;\n        long maxOnesCount9 = 0;\n        long maxZerosCount9\
    \ = 0;\n        long maxOnesCount10 = 0;\n        long maxZerosCount10 = 0;\n\
    \        long maxOnesCount11 = 0;\n        long maxZerosCount11 = 0;\n       \
    \ long maxOnesCount12 = 0;\n        long maxZerosCount12 = 0;\n        long maxOnesCount13\
    \ = 0;\n        long maxZerosCount13 = 0;\n        long maxOnesCount14 = 0;\n\
    \        long maxZerosCount14 = 0;\n        long maxOnesCount15 = 0;\n       \
    \ long maxZerosCount15 = 0;\n        long maxOnesCount16 = 0;\n        long maxZerosCount16\
    \ = 0;\n        long maxOnesCount17 = 0;\n        long maxZerosCount17 = 0;\n\
    \        long maxOnesCount18 = 0;\n        long maxZerosCount18 = 0;\n       \
    \ long maxOnesCount19 = 0;\n        long maxZerosCount19 = 0;\n        long maxOnesCount20\
    \ = 0;\n        long maxZerosCount20 = 0;\n        long maxOnesCount21 = 0;\n\
    \        long maxZerosCount21 = 0;\n        long maxOnesCount22 = 0;\n       \
    \ long maxZerosCount22 = 0;\n        long maxOnesCount23 = 0;\n        long maxZerosCount23\
    \ = 0;\n        long maxOnesCount24 = 0;\n        long maxZerosCount24 = 0;\n\
    \        long maxOnesCount25 = 0;\n        long maxZerosCount25 = 0;\n       \
    \ long maxOnesCount26 = 0;\n        long maxZerosCount26 = 0;\n        long maxOnesCount",
  '        // Your code here', "        long ones = 0;\n        long zeros = 0;\n\
    \        long max = 0;\n        foreach (long i in arr) {\n            if (i ==\
    \ 1) {\n                ones++;\n            }\n            if (i == 0) {\n  \
    \              zeros++;\n            }\n            if (i > max) {\n         \
    \       max = i;\n            }\n        }\n        List<long> result = new List<long>();\n\
    \        long onesMax = Convert.ToInt64(Math.Pow(2, Convert.ToInt32(Math.Log(max,\
    \ 2))) + 1);\n        long zeroMax = Convert.ToInt64(Math.Pow(2, Convert.ToInt32(Math.Log(max,\
    \ 2))) - 1);\n        long onesMin = Convert.ToInt64(Math.Pow(2, Convert.ToInt32(Math.Log(max,\
    \ 2)) - 1) + 1);\n        long zerosMin = Convert.ToInt64(Math.Pow(2, Convert.ToInt32(Math.Log(max,\
    \ 2)) - 1));\n        long onesMax2 = Convert.ToInt64(Math.Pow(2, Convert.ToInt32(Math.Log(max,\
    \ 2)) + 1));\n        long zeroMax2 = Convert.ToInt64(Math.Pow(2, Convert.ToInt32(Math.Log(max,\
    \ 2)) - 1));\n        long onesMin2 = Convert.ToInt64(Math.Pow(2, Convert.ToInt32(Math.Log(max,\
    \ 2)) + 1));\n        long zerosMin2 = Convert.ToInt64(Math.Pow(2, Convert.ToInt32(Math.Log(max,\
    \ 2)) - 1));\n        long onesMax3 = Convert.ToInt64(Math.Pow(2, Convert.ToInt32(Math.Log(max,\
    \ 2)) + 1));\n        long zeroMax3 = Convert.ToInt64(Math.Pow(2, Convert.ToInt32(Math.Log(max,\
    \ 2)) - 1));\n        long onesMin3 = Convert.ToInt64(Math.Pow(2, Convert.ToInt32(Math.Log(max,\
    \ 2)) - 1));\n        long zerosMin3 = Convert.ToInt64(Math.Pow(2, Convert.ToInt32(Math.Log(max,\
    \ 2)) + 1));\n        long onesMax4 = Convert.ToInt64(Math.Pow(2, Convert.ToInt32(Math.Log(max,\
    \ 2)) + 1));\n        long zeroMax4 = Convert.ToInt64(Math.Pow(2, Convert.ToInt32(Math.Log(max,\
    \ 2)) - 1));\n        long onesMin4 = Convert.ToInt64(Math.Pow(2, Convert.ToInt32(Math.Log(max,\
    \ 2)) - 1));\n        long zerosMin4 = Convert.ToInt64(Math.Pow(2, Convert.ToInt32(Math.Log(max,\
    \ 2)) + 1));\n        long onesMax5 = Convert.ToInt64(Math.Pow(2, Convert.ToInt32(Math.Log(max,\
    \ 2)) + 1));\n        long zeroMax5 = Convert.ToInt64(Math.", "        List<long>\
    \ result = new List<long>();\n        long ones = 0;\n        long zeros = 0;\n\
    \        long max = 0;\n        foreach (long i in arr) {\n            if (i ==\
    \ 1) {\n                ones++;\n            }\n            if (i == 0) {\n  \
    \              zeros++;\n            }\n            if (ones > zeros) {\n    \
    \            result.Add(i);\n            }\n            if (ones < zeros) {\n\
    \                result.Add(-i);\n            }\n            if (ones == zeros)\
    \ {\n                max = Math.Max(max, i);\n            }\n        }\n     \
    \   if (ones > zeros) {\n            result.Add(max);\n        }\n        if (ones\
    \ < zeros) {\n            result.Add(-max);\n        }\n        return result;",
  "        long ones = 0;\n        long zeros = 0;\n        long max = 0;\n      \
    \  foreach (long i in arr) {\n            if (i == 1) ones++;\n            else\
    \ if (i == 0) zeros++;\n            else if (i > max) max = i;\n        }\n  \
    \      long onesMax = ones > zeros ? ones : zeros;\n        long zerosMax = zeros\
    \ > ones ? zeros : ones;\n        long maxMax = max > onesMax ? max : onesMax;\n\
    \        long maxMin = max < zerosMax ? max : zerosMax;\n        List<long> result\
    \ = new List<long>();\n        long onesSum = 0;\n        long zerosSum = 0;\n\
    \        long maxSum = 0;\n        long maxMinSum = 0;\n        long maxSumMin\
    \ = 0;\n        long maxSumMax = 0;\n        long maxMinSumMax = 0;\n        long\
    \ maxMinSumMin = 0;\n        long maxMinSumMaxMin = 0;\n        long maxMinSumMaxMinMin\
    \ = 0;\n        long maxMinSumMaxMinMinMin = 0;\n        long maxMinSumMaxMinMinMin\
    \ = 0;\n        long maxMinSumMaxMinMinMin = 0;\n        long maxMinSumMaxMinMinMin\
    \ = 0;\n        long maxMinSumMaxMinMinMin = 0;\n        long maxMinSumMaxMinMinMin\
    \ = 0;\n        long maxMinSumMaxMinMinMin = 0;\n        long maxMinSumMaxMinMinMin\
    \ = 0;\n        long maxMinSumMaxMinMinMin = 0;\n        long maxMinSumMaxMinMinMin\
    \ = 0;\n        long maxMinSumMaxMinMinMin = 0;\n        long maxMinSumMaxMinMinMin\
    \ = 0;\n        long maxMinSumMaxMinMinMin = 0;\n        long maxMinSumMaxMinMinMin\
    \ = 0;\n        long maxMinSumMaxMinMinMin = 0;\n        long maxMinSumMaxMinMinMin\
    \ = 0;\n        long maxMinSumMaxMinMinMin = 0;\n        long maxMinSumMaxMinMinMin\
    \ = 0;\n        long maxMinSumMaxMinMinMin = 0;\n        long maxMinSumMaxMinMinMin\
    \ = 0;\n        long maxMinSumMaxMinMinMin = 0;\n        long maxMinSumMaxMinMinMin\
    \ = 0;\n        long maxMinSumMaxMinMinMin = 0;\n        long maxMinSumMaxMinMinMin\
    \ = 0;\n        long maxMinSumMaxMinMinMin = 0;\n        long maxMinSumMaxMinMinMin\
    \ = 0;\n        long maxMinSumMaxMinMinMin = 0;\n        long maxMinSumMaxMinMinMin\
    \ = 0;\n        long maxMinSumMaxMinMinMin = 0;", "        long ones = 0;\n  \
    \      long zeros = 0;\n        long max = 0;\n        foreach (long n in arr)\
    \ {\n            if (n == 1) ones++;\n            else if (n == 0) zeros++;\n\
    \            else if (n > max) max = n;\n        }\n        List<long> result\
    \ = new List<long>();\n        long onesMax = ones;\n        long zerosMax = zeros;\n\
    \        long maxMax = max;\n        long onesMin = ones;\n        long zerosMin\
    \ = zeros;\n        long maxMin = max;\n        long onesCur = 0;\n        long\
    \ zerosCur = 0;\n        long maxCur = max;\n        long onesPrev = ones;\n \
    \       long zerosPrev = zeros;\n        long maxPrev = max;\n        long onesNext\
    \ = ones;\n        long zerosNext = zeros;\n        long maxNext = max;\n    \
    \    long onesCurNext = ones;\n        long zerosCurNext = zeros;\n        long\
    \ maxCurNext = max;\n        long onesCurPrev = ones;\n        long zerosCurPrev\
    \ = zeros;\n        long maxCurPrev = max;\n        long onesCurNextPrev = ones;\n\
    \        long zerosCurNextPrev = zeros;\n        long maxCurNextPrev = max;\n\
    \        long onesCurPrevPrev = ones;\n        long zerosCurPrevPrev = zeros;\n\
    \        long maxCurPrevPrev = max;\n        long onesCurNextNext = ones;\n  \
    \      long zerosCurNextNext = zeros;\n        long maxCurNextNext = max;\n  \
    \      long onesCurPrevNext = ones;\n        long zerosCurPrevNext = zeros;\n\
    \        long maxCurPrevNext = max;\n        long onesCurNextPrev = ones;\n  \
    \      long zerosCurNextPrev = zeros;\n        long maxCurNextPrev = max;\n  \
    \      long onesCurPrevPrev = ones;\n        long zerosCurPrevPrev = zeros;\n\
    \        long maxCurPrevPrev = max;\n        long onesCurNextNextPrev = ones;\n\
    \        long zerosCurNextNextPrev = zeros;\n        long maxCurNextNextPrev =\
    \ max;\n        long onesCurPrevNextPrev = ones;\n        long zerosCurPrevNextPrev\
    \ = zeros;\n        long maxCurPrevNextPrev = max;\n        long onesCurNextPrevPrev\
    \ = ones;\n        long zerosCurNextPrevPrev = zeros;\n        long ", "     \
    \   long ones = 0;\n        long zeros = 0;\n        long maxOnes = 0;\n     \
    \   long maxZeros = 0;\n        long max = 0;\n        foreach (long i in arr)\
    \ {\n            if (i == 1) {\n                ones++;\n                if (ones\
    \ > maxOnes) {\n                    maxOnes = ones;\n                }\n     \
    \       } else {\n                zeros++;\n                if (zeros > maxZeros)\
    \ {\n                    maxZeros = zeros;\n                }\n            }\n\
    \        }\n        max = Math.Max(maxOnes, maxZeros);\n        List<long> result\
    \ = new List<long>();\n        foreach (long i in arr) {\n            if (i ==\
    \ 1) {\n                result.Add(i);\n            } else {\n               \
    \ long onesCount = 0;\n                long zerosCount = 0;\n                long\
    \ maxOnesCount = 0;\n                long maxZerosCount = 0;\n               \
    \ long maxCount = 0;\n                long onesSum = 0;\n                long\
    \ zerosSum = 0;\n                long maxOnesSum = 0;\n                long maxZerosSum\
    \ = 0;\n                long maxSum = 0;\n                long onesAvg = 0;\n\
    \                long zerosAvg = 0;\n                long maxOnesAvg = 0;\n  \
    \              long maxZerosAvg = 0;\n                long maxAvg = 0;\n     \
    \           long onesSumSquare = 0;\n                long zerosSumSquare = 0;\n\
    \                long maxOnesSumSquare = 0;\n                long maxZerosSumSquare\
    \ = 0;\n                long maxSumSquare = 0;\n                long onesAvgSquare\
    \ = 0;\n                long zerosAvgSquare = 0;\n                long maxOnesAvgSquare\
    \ = 0;\n                long maxZerosAvgSquare = 0;\n                long maxAvgSquare\
    \ = 0;\n                long onesSumSquareSum = 0;\n                long zerosSumSquareSum\
    \ = 0;\n                long maxOnesSumSquareSum = 0;\n                long maxZerosSumSquareSum\
    \ = 0;\n                long maxSumSquareSum = 0;\n                long onesAvgSquareSum\
    \ = 0;\n                long zerosAvgSquareSum = 0;\n                long maxOnesAvgSquareSum\
    \ = 0;\n                long maxZerosAvgSquareSum = 0;\n                long maxAvgSquareSum\
    \ = 0;\n                long onesSumSquareAvg = 0;\n                long zerosSumSquareAvg\
    \ = 0;\n                long maxOnesSumSquareAvg = 0;\n                long maxZerosSumSquareAvg\
    \ = 0;\n                long maxSumSquareAvg = 0;\n                long onesAvgSquareAvg\
    \ = 0;\n                long zerosAvgSquareAvg = 0;\n                long maxOnesAvgSquareAvg\
    \ = 0;\n                long maxZerosAvgSquareAvg = 0;\n                long maxAvgSquareAvg\
    \ = 0;\n                long onesSumSquareSumSquare = 0;\n                ", '        //
    Your code here', "        long ones = 0;\n        long zeros = 0;\n        long\
    \ max = 0;\n        foreach (long i in arr) {\n            ones += i;\n      \
    \      zeros -= i;\n            if (ones > max) {\n                max = ones;\n\
    \            }\n            if (zeros > max) {\n                max = zeros;\n\
    \            }\n        }\n        long onesCount = 0;\n        long zerosCount\
    \ = 0;\n        long maxCount = 0;\n        foreach (long i in arr) {\n      \
    \      onesCount += i;\n            zerosCount -= i;\n            if (onesCount\
    \ > maxCount) {\n                maxCount = onesCount;\n            }\n      \
    \      if (zerosCount > maxCount) {\n                maxCount = zerosCount;\n\
    \            }\n        }\n        long onesCount2 = 0;\n        long zerosCount2\
    \ = 0;\n        long maxCount2 = 0;\n        foreach (long i in arr) {\n     \
    \       onesCount2 += i;\n            zerosCount2 -= i;\n            if (onesCount2\
    \ > maxCount2) {\n                maxCount2 = onesCount2;\n            }\n   \
    \         if (zerosCount2 > maxCount2) {\n                maxCount2 = zerosCount2;\n\
    \            }\n        }\n        long onesCount3 = 0;\n        long zerosCount3\
    \ = 0;\n        long maxCount3 = 0;\n        foreach (long i in arr) {\n     \
    \       onesCount3 += i;\n            zerosCount3 -= i;\n            if (onesCount3\
    \ > maxCount3) {\n                maxCount3 = onesCount3;\n            }\n   \
    \         if (zerosCount3 > maxCount3) {\n                maxCount3 = zerosCount3;\n\
    \            }\n        }\n        long onesCount4 = 0;\n        long zerosCount4\
    \ = 0;\n        long maxCount4 = 0;\n        foreach (long i in arr) {\n     \
    \       onesCount4 += i;\n            zerosCount4 -= i;\n            if (onesCount4\
    \ > maxCount4) {\n                maxCount4 = onesCount4;\n            }\n   \
    \         if (zerosCount4 > maxCount4) {\n                maxCount4 = zerosCount4;\n\
    \            }\n        }\n        long onesCount5 = 0;\n        long zerosCount5\
    \ = 0;\n        long maxCount5 = 0;\n        foreach (long i in arr) {\n     \
    \       onesCount5 += i;\n            zerosCount5 -= i;\n            if (onesCount5\
    \ > maxCount5) {\n                maxCount5 = onesCount5;\n            }\n   \
    \         if (zerosCount5 > maxCount5) {\n                maxCount5 = zerosCount5;\n\
    \            }\n        }\n        long onesCount6 = 0;\n        long zerosCount6\
    \ = 0;\n        long maxCount6 = 0;\n        foreach (long i in arr) {\n     \
    \       onesCount6 += i;\n            ", "        long ones = arr.Sum(x => x &\
    \ 1);\n        long zeros = arr.Sum(x => x & 2);\n        long max = Math.Max(ones,\
    \ zeros);\n        long min = Math.Min(ones, zeros);\n        long mid = max /\
    \ 2;\n        long mid2 = min / 2;\n        long mid3 = mid / 3;\n        long\
    \ mid4 = mid3 / 4;\n        long mid5 = mid4 / 5;\n        long mid6 = mid5 /\
    \ 6;\n        long mid7 = mid6 / 7;\n        long mid8 = mid7 / 8;\n        long\
    \ mid9 = mid8 / 9;\n        long mid10 = mid9 / 10;\n        long mid11 = mid10\
    \ / 11;\n        long mid12 = mid11 / 12;\n        long mid13 = mid12 / 13;\n\
    \        long mid14 = mid13 / 14;\n        long mid15 = mid14 / 15;\n        long\
    \ mid16 = mid15 / 16;\n        long mid17 = mid16 / 17;\n        long mid18 =\
    \ mid17 / 18;\n        long mid19 = mid18 / 19;\n        long mid20 = mid19 /\
    \ 20;\n        long mid21 = mid20 / 21;\n        long mid22 = mid21 / 22;\n  \
    \      long mid23 = mid22 / 23;\n        long mid24 = mid23 / 24;\n        long\
    \ mid25 = mid24 / 25;\n        long mid26 = mid25 / 26;\n        long mid27 =\
    \ mid26 / 27;\n        long mid28 = mid27 / 28;\n        long mid29 = mid28 /\
    \ 29;\n        long mid30 = mid29 / 30;\n        long mid31 = mid30 / 31;\n  \
    \      long mid32 = mid31 / 32;\n        long mid33 = mid32 / 33;\n        long\
    \ mid34 = mid33 / 34;\n        long mid35 = mid34 / 35;\n        long mid36 =\
    \ mid35 / 36;\n        long mid37 = mid36 / 37;\n        long mid38 = mid37 /\
    \ 38;\n        long mid39 = mid38 / 39;\n        long mid40 = mid39 / 40;\n  \
    \      long mid41 = mid40 / 41;\n        long mid42 = mid41 / 42;\n        long\
    \ mid43 = mid42 / 43;\n        long mid44 = mid43 / 44;\n        long mid45 =\
    \ mid44 / 45;\n        ", "        // TODO: Implement this method\n        long\
    \ ones = 0;\n        long zeros = 0;\n        long max = 0;\n        foreach (long\
    \ i in arr) {\n            if (i == 1) {\n                ones++;\n          \
    \  }\n            if (i == 0) {\n                zeros++;\n            }\n   \
    \         if (i > max) {\n                max = i;\n            }\n        }\n\
    \        List<long> result = new List<long>();\n        long onesCount = 0;\n\
    \        long zerosCount = 0;\n        long maxCount = 0;\n        foreach (long\
    \ i in arr) {\n            if (i == 1) {\n                onesCount++;\n     \
    \       }\n            if (i == 0) {\n                zerosCount++;\n        \
    \    }\n            if (i > max) {\n                maxCount = i;\n          \
    \  }\n        }\n        long onesCount2 = onesCount * ones;\n        long zerosCount2\
    \ = zerosCount * zeros;\n        long maxCount2 = maxCount * max;\n        long\
    \ onesCount3 = onesCount2 * ones;\n        long zerosCount3 = zerosCount2 * zeros;\n\
    \        long maxCount3 = maxCount2 * max;\n        long onesCount4 = onesCount3\
    \ * ones;\n        long zerosCount4 = zerosCount3 * zeros;\n        long maxCount4\
    \ = maxCount3 * max;\n        long onesCount5 = onesCount4 * ones;\n        long\
    \ zerosCount5 = zerosCount4 * zeros;\n        long maxCount5 = maxCount4 * max;\n\
    \        long onesCount6 = onesCount5 * ones;\n        long zerosCount6 = zerosCount5\
    \ * zeros;\n        long maxCount6 = maxCount5 * max;\n        long onesCount7\
    \ = onesCount6 * ones;\n        long zerosCount7 = zerosCount6 * zeros;\n    \
    \    long maxCount7 = maxCount6 * max;\n        long onesCount8 = onesCount7 *\
    \ ones;\n        long zerosCount8 = zerosCount7 * zeros;\n        long maxCount8\
    \ = maxCount7 * max;\n        long onesCount9 = onesCount8 * ones;\n        long\
    \ zerosCount9 = zerosCount8 * zeros;\n        long maxCount9 = maxCount8 * max;\n\
    \        long onesCount10 = onesCount9 * ones;\n        long zerosCount10 = zerosCount9\
    \ * zeros;\n        long maxCount10 = maxCount9 * max;\n        long onesCount11\
    \ = onesCount10 * ones;\n        long zerosCount11 = zerosCount10 * zeros;\n \
    \       long maxCount11 = maxCount10 * max;\n        long onesCount12 = onesCount11\
    \ * ones;\n        long zerosCount", '        // Your code here', "        long\
    \ ones = 0;\n        long zeros = 0;\n        long max = 0;\n        foreach (long\
    \ i in arr) {\n            if (i == 1) {\n                ones++;\n          \
    \  }\n            if (i == 0) {\n                zeros++;\n            }\n   \
    \         if (i > max) {\n                max = i;\n            }\n        }\n\
    \        List<long> result = new List<long>();\n        if (ones > zeros) {\n\
    \            result.Add(max);\n            result.AddRange(arr.Where(i => i ==\
    \ max).OrderBy(i => i).Take(ones - zeros));\n        }\n        if (zeros > ones)\
    \ {\n            result.AddRange(arr.Where(i => i == max).OrderBy(i => i).Take(zeros\
    \ - ones));\n        }\n        return result;", "        long ones = arr.Sum(x\
    \ => x & 1);\n        long zeros = arr.Sum(x => x & 2);\n        long maxOnes\
    \ = arr.Max(x => x & 1);\n        long maxZeros = arr.Max(x => x & 2);\n     \
    \   long maxOnesZeros = maxOnes - maxZeros;\n        long maxOnesOnes = maxOnes\
    \ - ones;\n        long maxOnesTwos = maxOnes - twos;\n        long maxOnesThrees\
    \ = maxOnes - threes;\n        long maxOnesFours = maxOnes - fours;\n        long\
    \ maxOnesFives = maxOnes - fives;\n        long maxOnesSixes = maxOnes - sixes;\n\
    \        long maxOnesSevens = maxOnes - sevens;\n        long maxOnesEights =\
    \ maxOnes - eights;\n        long maxOnesNines = maxOnes - nines;\n        long\
    \ maxOnesTens = maxOnes - tens;\n        long maxOnesElevens = maxOnes - elevens;\n\
    \        long maxOnesTwelves = maxOnes - twelves;\n        long maxOnesThirteens\
    \ = maxOnes - thirteens;\n        long maxOnesFourteens = maxOnes - fourteens;\n\
    \        long maxOnesFifteens = maxOnes - fifteens;\n        long maxOnesSixteens\
    \ = maxOnes - sixteens;\n        long maxOnesSeventeens = maxOnes - seventeens;\n\
    \        long maxOnesEighteens = maxOnes - eighteens;\n        long maxOnesNineteens\
    \ = maxOnes - nineteens;\n        long maxOnesTwenty = maxOnes - twenty;\n   \
    \     long maxOnesTwentyOnes = maxOnes - twentyOnes;\n        long maxOnesTwentyTwos\
    \ = maxOnes - twentyTwos;\n        long maxOnesTwentyThrees = maxOnes - twentyThrees;\n\
    \        long maxOnesTwentyFours = maxOnes - twentyFours;\n        long maxOnesTwentyFives\
    \ = maxOnes - twentyFives;\n        long maxOnesTwentySixes = maxOnes - twentySixes;\n\
    \        long maxOnesTwentySevens = maxOnes - twentySevens;\n        long ", '        //
    Your code here', "        long ones = 0;\n        long zeros = 0;\n        long\
    \ max = 0;\n        foreach (long i in arr) {\n            if (i == 1) {\n   \
    \             ones++;\n            }\n            else if (i == 0) {\n       \
    \         zeros++;\n            }\n            else {\n                if (ones\
    \ > zeros) {\n                    max = i;\n                }\n              \
    \  else {\n                    max = zeros;\n                }\n            }\n\
    \        }\n        List<long> result = new List<long>();\n        foreach (long\
    \ i in arr) {\n            if (i == 1) {\n                result.Add(i);\n   \
    \         }\n            else if (i == 0) {\n                result.Add(zeros);\n\
    \            }\n            else {\n                if (ones > zeros) {\n    \
    \                result.Add(max);\n                }\n                else {\n\
    \                    result.Add(ones);\n                }\n            }\n   \
    \     }\n        return result;", '        // Your code here', "        // TODO:\
    \ Implement this function\n        return null;", "        // Your code goes here\n\
    \        long ones = 0;\n        long zeros = 0;\n        long max = 0;\n    \
    \    long min = 0;\n        long sum = 0;\n        long count = 0;\n        foreach\
    \ (long i in arr) {\n            if (i == 1) {\n                ones++;\n    \
    \        }\n            if (i == 0) {\n                zeros++;\n            }\n\
    \            if (i > max) {\n                max = i;\n            }\n       \
    \     if (i < min) {\n                min = i;\n            }\n            sum\
    \ += i;\n            count++;\n        }\n        List<long> result = new List<long>();\n\
    \        long temp = 0;\n        long temp2 = 0;\n        long temp3 = 0;\n  \
    \      long temp4 = 0;\n        long temp5 = 0;\n        long temp6 = 0;\n   \
    \     long temp7 = 0;\n        long temp8 = 0;\n        long temp9 = 0;\n    \
    \    long temp10 = 0;\n        long temp11 = 0;\n        long temp12 = 0;\n  \
    \      long temp13 = 0;\n        long temp14 = 0;\n        long temp15 = 0;\n\
    \        long temp16 = 0;\n        long temp17 = 0;\n        long temp18 = 0;\n\
    \        long temp19 = 0;\n        long temp20 = 0;\n        long temp21 = 0;\n\
    \        long temp22 = 0;\n        long temp23 = 0;\n        long temp24 = 0;\n\
    \        long temp25 = 0;\n        long temp26 = 0;\n        long temp27 = 0;\n\
    \        long temp28 = 0;\n        long temp29 = 0;\n        long temp30 = 0;\n\
    \        long temp31 = 0;\n        long temp32 = 0;\n        long temp33 = 0;\n\
    \        long temp34 = 0;\n        long temp35 = 0;\n        long temp36 = 0;\n\
    \        long temp37 = 0;\n        long temp38 = 0;\n        long temp39 = 0;\n\
    \        long temp40 = 0;\n        long temp41 = 0;\n        long temp42 = 0;\n\
    \        long temp43 = 0;\n        long temp44 = 0;\n        long temp45 = 0;\n\
    \        long temp46 = 0;\n        long temp47 = 0;\n        long temp48 = 0;\n\
    \        long temp49 = 0;\n        long temp50 = 0;\n        long temp51 = 0;\n\
    \        long temp52 = 0;\n        long temp53 = 0;\n        long temp54 = 0;\n\
    \        long temp55 = 0;\n        long temp56 = 0;\n        long temp57 = 0;\n\
    \        long temp58 = 0;\n        long temp59 = 0;\n        long temp60 = 0;\n\
    \        long temp61 = 0;\n        long temp62 = 0;\n        long temp63 = 0;\n\
    \        long temp64 = 0;\n        long temp65 = 0;\n        long temp66 = 0;\n\
    \        long temp67 = 0;\n        long temp68 = 0;\n        long temp69", " \
    \       // Your code goes here\n        long ones = 0;\n        long zeros = 0;\n\
    \        long total = 0;\n        List<long> result = new List<long>();\n    \
    \    foreach (long i in arr) {\n            if (i == 1) {\n                ones++;\n\
    \            }\n            if (i == 0) {\n                zeros++;\n        \
    \    }\n            total += i;\n        }\n        long onesTotal = ones * total;\n\
    \        long zerosTotal = zeros * total;\n        long onesZeros = ones * zeros;\n\
    \        long onesOnes = ones * ones;\n        long zeroOnes = zeros * ones;\n\
    \        long zeroZeros = zeros * zeros;\n        long onesZeroOnes = ones * zeros\
    \ * ones;\n        long onesOneZeros = ones * ones * zeros;\n        long onesOneOnes\
    \ = ones * ones * ones;\n        long zerosZeroOnes = zeros * zeros * ones;\n\
    \        long zerosOneZeros = zeros * ones * zeros;\n        long zerosOneOnes\
    \ = zeros * ones * ones;\n        long onesZeroZeros = ones * zeros * zeros;\n\
    \        long onesZeroOnes = ones * zeros * ones;\n        long onesOneZeros =\
    \ ones * ones * zeros;\n        long onesOneOnes = ones * ones * ones;\n     \
    \   long zerosZeroZeros = zeros * zeros * zeros;\n        long zerosZeroOnes =\
    \ zeros * zeros * ones;\n        long zerosZeroOnes = zeros * ones * zeros;\n\
    \        long zerosOneZeros = zeros * ones * zeros;\n        long zerosOneOnes\
    \ = zeros * ones * ones;\n        long onesZeroZeroOnes = ones * zeros * zeros\
    \ * ones;\n        long onesZeroOneZeros = ones * zeros * ones * zeros;\n    \
    \    long onesZeroOneOnes = ones * zeros * ones * ones;\n        long onesOneZeroZeros\
    \ = ones * ones * zeros * zeros;\n        long onesOneOneZeros = ones * ones *\
    \ ones * zeros;\n        long onesOneOneOnes = ones * ones * ones * ones;\n  \
    \      long zerosZeroZeroOnes = zeros * zeros * zeros * ones;\n        long zerosZeroOneZeros\
    \ = zeros * zeros * ones * zeros;\n        long zerosZeroOneOnes = zeros * zeros\
    \ * ones * ones;\n        long zerosOneZeroZeros = zeros * ones * zeros * zeros;\n\
    \        long zerosOneOneZeros = zeros * ones * ones * zeros;", "        List<long>\
    \ result = new List<long>();\n        long ones = 0;\n        long zeros = 0;\n\
    \        foreach (long i in arr) {\n            if (i == 1) {\n              \
    \  ones++;\n            } else {\n                zeros++;\n            }\n  \
    \      }\n        if (ones > zeros) {\n            foreach (long i in arr) {\n\
    \                if (i == 1) {\n                    result.Add(i);\n         \
    \       }\n            }\n            foreach (long i in arr) {\n            \
    \    if (i == 0) {\n                    result.Add(i);\n                }\n  \
    \          }\n        } else {\n            foreach (long i in arr) {\n      \
    \          if (i == 0) {\n                    result.Add(i);\n               \
    \ }\n            }\n            foreach (long i in arr) {\n                if\
    \ (i == 1) {\n                    result.Add(i);\n                }\n        \
    \    }\n        }\n        return result;", "        // TODO: Implement this method.\n\
    \        return null;", "        long ones = 0;\n        long zeros = 0;\n   \
    \     long max = 0;\n        foreach (long i in arr) {\n            if (i == 1)\
    \ {\n                ones++;\n            }\n            else if (i == 0) {\n\
    \                zeros++;\n            }\n            else {\n               \
    \ if (ones > zeros) {\n                    max = i;\n                }\n     \
    \           else {\n                    max = zeros;\n                }\n    \
    \        }\n        }\n        List<long> result = new List<long>();\n       \
    \ foreach (long i in arr) {\n            if (i == 1) {\n                result.Add(ones);\n\
    \            }\n            else if (i == 0) {\n                result.Add(zeros);\n\
    \            }\n            else {\n                if (ones > zeros) {\n    \
    \                result.Add(i);\n                }\n                else {\n \
    \                   result.Add(zeros);\n                }\n            }\n   \
    \     }\n        return result;", '        // Your code goes here', "        long\
    \ ones = 0;\n        long zeros = 0;\n        long max = 0;\n        foreach (long\
    \ i in arr) {\n            if (i == 1) ones++;\n            else if (i == 0) zeros++;\n\
    \            else if (i > max) max = i;\n        }\n        List<long> result\
    \ = new List<long>();\n        long onesCount = 0;\n        long zerosCount =\
    \ 0;\n        long maxCount = 0;\n        foreach (long i in arr) {\n        \
    \    if (i == 1) onesCount++;\n            else if (i == 0) zerosCount++;\n  \
    \          else if (i > maxCount) maxCount = i;\n        }\n        long onesCount2\
    \ = onesCount * ones;\n        long zerosCount2 = zerosCount * zeros;\n      \
    \  long maxCount2 = maxCount * max;\n        long onesCount3 = onesCount2 * ones;\n\
    \        long zerosCount3 = zerosCount2 * zeros;\n        long maxCount3 = maxCount2\
    \ * max;\n        long onesCount4 = onesCount3 * ones;\n        long zerosCount4\
    \ = zerosCount3 * zeros;\n        long maxCount4 = maxCount3 * max;\n        long\
    \ onesCount5 = onesCount4 * ones;\n        long zerosCount5 = zerosCount4 * zeros;\n\
    \        long maxCount5 = maxCount4 * max;\n        long onesCount6 = onesCount5\
    \ * ones;\n        long zerosCount6 = zerosCount5 * zeros;\n        long maxCount6\
    \ = maxCount5 * max;\n        long onesCount7 = onesCount6 * ones;\n        long\
    \ zerosCount7 = zerosCount6 * zeros;\n        long maxCount7 = maxCount6 * max;\n\
    \        long onesCount8 = onesCount7 * ones;\n        long zerosCount8 = zerosCount7\
    \ * zeros;\n        long maxCount8 = maxCount7 * max;\n        long onesCount9\
    \ = onesCount8 * ones;\n        long zerosCount9 = zerosCount8 * zeros;\n    \
    \    long maxCount9 = maxCount8 * max;\n        long onesCount10 = onesCount9\
    \ * ones;\n        long zerosCount10 = zerosCount9 * zeros;\n        long maxCount10\
    \ = maxCount9 * max;\n        long onesCount11 = onesCount10 * ones;\n       \
    \ long zerosCount11 = zerosCount10 * zeros;\n        long maxCount11 = maxCount10\
    \ * max;\n        long onesCount12 = onesCount11 * ones;\n        long zerosCount12\
    \ = zerosCount11 * zeros;\n        long maxCount12 = maxCount11 * max;\n     \
    \   long onesCount", "        List<long> result = new List<long>();\n        long\
    \ ones = 0;\n        long zeros = 0;\n        foreach (long num in arr) {\n  \
    \          if (num == 1) ones++;\n            else if (num == 0) zeros++;\n  \
    \          else {\n                long temp = ones;\n                ones = zeros;\n\
    \                zeros = temp;\n                result.Add(num);\n           \
    \ }\n        }\n        long onesCount = ones;\n        long zerosCount = zeros;\n\
    \        long maxOnesCount = onesCount;\n        long maxZerosCount = zerosCount;\n\
    \        long maxCount = maxOnesCount + maxZerosCount;\n        long maxOnesCountDiff\
    \ = maxOnesCount - maxCount;\n        long maxZerosCountDiff = maxZerosCount -\
    \ maxCount;\n        long maxCountDiff = maxCount - maxOnesCount + maxZerosCount;\n\
    \        long maxOnesCountDiff2 = maxOnesCount - maxCount;\n        long maxZerosCountDiff2\
    \ = maxZerosCount - maxCount;\n        long maxCountDiff2 = maxCount - maxOnesCount\
    \ + maxZerosCount;\n        long maxOnesCountDiff3 = maxOnesCount - maxCount;\n\
    \        long maxZerosCountDiff3 = maxZerosCount - maxCount;\n        long maxCountDiff3\
    \ = maxCount - maxOnesCount + maxZerosCount;\n        long maxOnesCountDiff4 =\
    \ maxOnesCount - maxCount;\n        long maxZerosCountDiff4 = maxZerosCount -\
    \ maxCount;\n        long maxCountDiff4 = maxCount - maxOnesCount + maxZerosCount;\n\
    \        long maxOnesCountDiff5 = maxOnesCount - maxCount;\n        long maxZerosCountDiff5\
    \ = maxZerosCount - maxCount;\n        long maxCountDiff5 = maxCount - maxOnesCount\
    \ + maxZerosCount;\n        long maxOnesCountDiff6 = maxOnesCount - maxCount;\n\
    \        long maxZerosCountDiff6 = maxZerosCount - maxCount;\n        long maxCountDiff6\
    \ = maxCount - maxOnesCount + maxZerosCount;\n        long maxOnesCountDiff7 =\
    \ maxOnesCount - maxCount;\n        long maxZerosCountDiff7 = maxZerosCount -\
    \ maxCount;\n        long maxCountDiff7 = max", "        long ones = arr.Sum(x\
    \ => x & 1L);\n        long zeros = arr.Sum(x => x >> 1);\n        long maxOnes\
    \ = arr.Max(x => x & 1L);\n        long maxZeros = arr.Max(x => x >> 1);\n   \
    \     long maxOnesDecimal = Convert.ToInt64(Math.Pow(2, maxOnes));\n        long\
    \ maxZerosDecimal = Convert.ToInt64(Math.Pow(2, maxZeros));\n        long maxOnesDecimalDecimal\
    \ = Convert.ToInt64(Math.Pow(2, maxOnesDecimal));\n        long maxZerosDecimalDecimal\
    \ = Convert.ToInt64(Math.Pow(2, maxZerosDecimal));\n        long maxOnesDecimalDecimalDecimal\
    \ = Convert.ToInt64(Math.Pow(2, maxOnesDecimalDecimal));\n        long maxZerosDecimalDecimalDecimal\
    \ = Convert.ToInt64(Math.Pow(2, maxZerosDecimalDecimal));\n        long maxOnesDecimalDecimalDecimalDecimal\
    \ = Convert.ToInt64(Math.Pow(2, maxOnesDecimalDecimalDecimal));\n        long\
    \ maxZerosDecimalDecimalDecimalDecimal = Convert.ToInt64(Math.Pow(2, maxZerosDecimalDecimalDecimal));\n\
    \        long maxOnesDecimalDecimalDecimalDecimalDecimal = Convert.ToInt64(Math.Pow(2,\
    \ maxOnesDecimalDecimalDecimalDecimal));\n        long maxZerosDecimalDecimalDecimalDecimalDecimal\
    \ = Convert.ToInt64(Math.Pow(2, maxZerosDecimalDecimalDecimalDecimalDecimal));\n\
    \        long maxOnesDecimalDecimalDecimalDecimalDecimalDecimal = Convert.ToInt64(Math.Pow(2,\
    \ maxOnesDecimalDecimalDecimalDecimalDecimalDecimal));\n        long maxZerosDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = Convert.ToInt64(Math.Pow(2, maxZerosDecimalDecimalDecimalDecimalDecimalDecimal));\n\
    \        long maxOnesDecimalDecimalDecimalDecimalDecimalDecimalDecimal = Convert.ToInt64(Math.Pow(2,\
    \ maxOnesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal));\n       \
    \ long maxZerosDecimalDecimalDecimalDecimalDecimalDecimal = Convert.ToInt64(Math.Pow(2,\
    \ maxZerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal));\n      \
    \  long maxOnesDecimalDecimalDecimalDecimalDecimalDecimalDecimal = Convert.ToInt64(Math.Pow(2,\
    \ maxOnesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal));\n\
    \        long maxZerosDecimalDecimalDecimalDecimalDecimalDecimalDecimal = Convert.ToInt64(Math.Pow(2,\
    \ maxZerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal));\n\
    \        ", "        long ones = 0;\n        long zeros = 0;\n        long max\
    \ = 0;\n        foreach (long i in arr) {\n            if (i == 1) {\n       \
    \         ones++;\n            }\n            if (i == 0) {\n                zeros++;\n\
    \            }\n            if (i > max) {\n                max = i;\n       \
    \     }\n        }\n        long onesMax = ones * max;\n        long zerosMax\
    \ = zeros * max;\n        long maxOnes = ones * max;\n        long maxZeros =\
    \ zeros * max;\n        long maxOnesMax = onesMax * max;\n        long maxZerosMax\
    \ = zerosMax * max;\n        long maxOnesMaxOnes = onesMax * max * max;\n    \
    \    long maxZerosMaxZeros = zerosMax * max * max;\n        long maxOnesMaxOnesZeros\
    \ = onesMax * max * max * max;\n        long maxZerosMaxZerosZeros = zerosMax\
    \ * max * max * max;\n        long maxOnesMaxOnesZerosZeros = onesMax * max *\
    \ max * max * max;\n        long maxZerosMaxZerosZerosZeros = zerosMax * max *\
    \ max * max * max;\n        long maxOnesMaxOnesZerosZerosZeros = onesMax * max\
    \ * max * max * max * max;\n        long maxZerosMaxZerosZerosZerosZeros = zerosMax\
    \ * max * max * max * max * max;\n        long maxOnesMaxOnesZerosZerosZerosZeros\
    \ = onesMax * max * max * max * max * max * max;\n        long maxZerosMaxZerosZerosZerosZerosZeros\
    \ = zerosMax * max * max * max * max * max * max * max;\n        long maxOnesMaxOnesZerosZerosZerosZerosZeros\
    \ = onesMax * max * max * max * max * max * max * max * max;\n        long maxZerosMaxZerosZerosZerosZerosZerosZeros\
    \ = zerosMax * max * max * max * max * max * max * max * max * max;\n        long\
    \ maxOnesMaxOnesZerosZerosZerosZerosZerosZerosZeros = ones", '        // Your
    code goes here', "        long ones = 0;\n        long zeros = 0;\n        long\
    \ max = 0;\n        foreach (long i in arr) {\n            if (i == 1) {\n   \
    \             ones++;\n            }\n            if (i == 0) {\n            \
    \    zeros++;\n            }\n            if (i > max) {\n                max\
    \ = i;\n            }\n        }\n        long onesMax = ones * max;\n       \
    \ long zerosMax = zeros * max;\n        long onesMin = ones * max - max;\n   \
    \     long zerosMin = zeros * max - max;\n        long onesMaxMin = onesMax *\
    \ max;\n        long zerosMaxMin = zerosMax * max;\n        long onesMinMin =\
    \ onesMin * max;\n        long zerosMinMin = zerosMin * max;\n        long onesMaxMinMin\
    \ = onesMaxMin * max;\n        long zerosMaxMinMin = zerosMaxMin * max;\n    \
    \    long onesMinMinMin = onesMinMin * max;\n        long zerosMinMinMin = zerosMinMin\
    \ * max;\n        long onesMaxMinMinMin = onesMaxMinMin * max;\n        long zerosMaxMinMinMin\
    \ = zerosMaxMinMin * max;\n        long onesMinMinMinMin = onesMinMinMin * max;\n\
    \        long zerosMinMinMinMin = zerosMinMinMin * max;\n        long onesMaxMinMinMin\
    \ = onesMaxMinMinMin * max;\n        long zerosMaxMinMinMin = zerosMaxMinMinMin\
    \ * max;\n        long onesMinMinMinMin = onesMinMinMinMin * max;\n        long\
    \ zerosMinMinMinMin = zerosMinMinMinMin * max;\n        long onesMaxMinMinMin\
    \ = onesMaxMinMinMin * max;\n        long zerosMaxMinMinMin = zerosMaxMinMinMin\
    \ * max;\n        long onesMinMinMinMin = onesMinMinMinMin * max;\n        long\
    \ zerosMinMinMinMin = zerosMinMinMinMin * max;\n        long onesMaxMinMinMin\
    \ = onesMaxMinMinMin * max;\n        long zerosMaxMinMinMin = zerosMaxMinMinMin\
    \ * max;\n        long onesMinMinMinMin = onesMinMinMinMin * max;\n        long\
    \ zerosMinMinMinMin = zerosMinMinMinMin * max;\n        long onesMaxMinMinMin\
    \ = onesMaxMinMinMin * ", "        long ones = 0;\n        long zeros = 0;\n \
    \       long max = 0;\n        foreach (long i in arr) {\n            if (i ==\
    \ 1) {\n                ones++;\n            }\n            if (i == 0) {\n  \
    \              zeros++;\n            }\n            if (i > max) {\n         \
    \       max = i;\n            }\n        }\n        long onesMax = ones * max;\n\
    \        long zerosMax = zeros * max;\n        long onesMin = ones * min / max;\n\
    \        long zerosMin = zeros * min / max;\n        long onesMaxMin = onesMax\
    \ * min;\n        long zerosMaxMin = zerosMax * min;\n        long onesMinMin\
    \ = onesMin * min;\n        long zerosMinMin = zerosMin * min;\n        long onesMaxMinMin\
    \ = onesMaxMin * min;\n        long zerosMaxMinMin = zerosMaxMin * min;\n    \
    \    long onesMinMinMin = onesMinMin * min;\n        long zerosMinMinMin = zerosMinMin\
    \ * min;\n        long onesMaxMinMinMin = onesMaxMinMin * min;\n        long zerosMaxMinMinMin\
    \ = zerosMaxMinMin * min;\n        long onesMinMinMinMin = onesMinMinMin * min;\n\
    \        long zerosMinMinMinMin = zerosMinMinMin * min;\n        long onesMaxMinMinMin\
    \ = onesMaxMinMinMin * min;\n        long zerosMaxMinMinMin = zerosMaxMinMinMin\
    \ * min;\n        long onesMinMinMinMin = onesMinMinMinMin * min;\n        long\
    \ zerosMinMinMinMin = zerosMinMinMinMin * min;\n        long onesMaxMinMinMin\
    \ = onesMaxMinMinMin * min;\n        long zerosMaxMinMinMin = zerosMaxMinMinMin\
    \ * min;\n        long onesMinMinMinMin = onesMinMinMinMin * min;\n        long\
    \ zerosMinMinMinMin = zerosMinMinMinMin * min;\n        long onesMaxMinMinMin\
    \ = onesMaxMinMinMin * min;\n        long zerosMaxMinMinMin = zerosMaxMinMinMin\
    \ * min;\n        long onesMinMinMinMin = onesMinMinMinMin * min;\n        long\
    \ zerosMinMinMinMin = zerosMinMinMinMin * min;\n        long onesMaxMinMinMin\
    \ = onesMaxMinMin", "        // Your code goes here\n        long ones = 0;\n\
    \        long zeros = 0;\n        long max = 0;\n        long min = 0;\n     \
    \   foreach (long i in arr) {\n            if (i == 1) {\n                ones++;\n\
    \            }\n            if (i == 0) {\n                zeros++;\n        \
    \    }\n            if (i > max) {\n                max = i;\n            }\n\
    \            if (i < min) {\n                min = i;\n            }\n       \
    \ }\n        long onesMax = Convert.ToInt64(Math.Pow(2, Convert.ToInt32(Math.Log(max,\
    \ 2))) - 1);\n        long zerosMax = Convert.ToInt64(Math.Pow(2, Convert.ToInt32(Math.Log(max,\
    \ 2))) - 1);\n        long onesMin = Convert.ToInt64(Math.Pow(2, Convert.ToInt32(Math.Log(min,2)))\
    \ - 1);\n        long zerosMin = Convert.ToInt64(Math.Pow(2, Convert.ToInt32(Math.Log(min,2)))\
    \ - 1);\n        long onesMax2 = Convert.ToInt64(Math.Pow(2, Convert.ToInt32(Math.Log(onesMax,\
    \ 2))) - 1);\n        long zerosMax2 = Convert.ToInt64(Math.Pow(2, Convert.ToInt32(Math.Log(zerosMax,\
    \ 2))) - 1);\n        long onesMin2 = Convert.ToInt64(Math.Pow(2, Convert.ToInt32(Math.Log(onesMin,\
    \ 2))) - 1);\n        long zerosMin2 = Convert.ToInt64(Math.Pow(2, Convert.ToInt32(Math.Log(zerosMin,\
    \ 2))) - 1);\n        long onesMax3 = Convert.ToInt64(Math.Pow(2, Convert.ToInt32(Math.Log(onesMax2,\
    \ 2))) - 1);\n        long zerosMax3 = Convert.ToInt64(Math.Pow(2, Convert.ToInt32(Math.Log(zerosMax2,\
    \ 2))) - 1);\n        long onesMin3 = Convert.ToInt64(Math.Pow(2, Convert.ToInt32(Math.Log(onesMin2,\
    \ 2))) - 1);\n        long zerosMin3 = Convert.ToInt64(Math.Pow(2, Convert.ToInt32(Math.Log(zerosMin2,\
    \ 2))) - 1);\n        long onesMax4 = Convert.ToInt64(Math.Pow(2, Convert.ToInt32(Math.Log(onesMax3,\
    \ 2))) - 1);\n        long zerosMax4 = Convert.ToInt64(Math.Pow(2, Convert.ToInt32(Math.Log(zerosMax3,\
    \ 2))) - 1);\n        long onesMin4 = Convert.ToInt64(Math.Pow(2, Convert.ToInt32(Math.Log(onesMin3,\
    \ 2))) - 1);\n        long zerosMin4 = Convert.ToInt64(Math.Pow(2, Convert.ToInt32(Math.Log(zeros",
  "        List<long> result = new List<long>();\n        long ones = 0;\n       \
    \ long zeros = 0;\n        long max = 0;\n        long min = 0;\n        foreach\
    \ (long i in arr) {\n            if (i == 1) {\n                ones++;\n    \
    \        }\n            else if (i == 0) {\n                zeros++;\n       \
    \     }\n            else {\n                max = Math.Max(max, i);\n       \
    \         min = Math.Min(min, i);\n            }\n        }\n        long onesCount\
    \ = ones;\n        long zerosCount = zeros;\n        long maxCount = max;\n  \
    \      long minCount = min;\n        long onesCount2 = onesCount * onesCount;\n\
    \        long zerosCount2 = zerosCount * zerosCount;\n        long maxCount2 =\
    \ maxCount * maxCount;\n        long minCount2 = minCount * minCount;\n      \
    \  long onesCount3 = onesCount2 * onesCount;\n        long zerosCount3 = zerosCount2\
    \ * zerosCount;\n        long maxCount3 = maxCount2 * maxCount;\n        long\
    \ minCount3 = minCount2 * minCount;\n        long onesCount4 = onesCount3 * onesCount;\n\
    \        long zerosCount4 = zerosCount3 * zerosCount;\n        long maxCount4\
    \ = maxCount3 * maxCount;\n        long minCount4 = minCount3 * minCount;\n  \
    \      long onesCount5 = onesCount4 * onesCount;\n        long zerosCount5 = zerosCount4\
    \ * zerosCount;\n        long maxCount5 = maxCount4 * maxCount;\n        long\
    \ minCount5 = minCount4 * minCount;\n        long onesCount6 = onesCount5 * onesCount;\n\
    \        long zerosCount6 = zerosCount5 * zerosCount;\n        long maxCount6\
    \ = maxCount5 * maxCount;\n        long minCount6 = minCount5 * minCount;\n  \
    \      long onesCount7 = onesCount6 * onesCount;\n        long zerosCount7 = zerosCount6\
    \ * zerosCount;\n        long maxCount7 = maxCount6 * maxCount;\n        long\
    \ minCount7 = minCount6 * minCount;\n        long onesCount8 = onesCount7 * onesCount;\n\
    \        long zerosCount8 = zerosCount7 * zerosCount;\n        long maxCount8\
    \ = maxCount7 * maxCount;\n        long minCount8 = minCount7 * minCount;\n  \
    \      long onesCount9 = onesCount8 * onesCount;\n        long zerosCount9 = zerosCount8\
    \ * zerosCount;\n        long maxCount9 = maxCount8 * maxCount;\n        long ",
  "        long ones = 0;\n        long zeros = 0;\n        long maxOnes = 0;\n  \
    \      long maxZeros = 0;\n        long max = 0;\n        foreach (long i in arr)\
    \ {\n            if (i == 1) {\n                ones++;\n                if (ones\
    \ > maxOnes) maxOnes = ones;\n            } else {\n                zeros++;\n\
    \                if (zeros > maxZeros) maxZeros = zeros;\n            }\n    \
    \    }\n        max = maxOnes + maxZeros;\n        long onesCount = 0;\n     \
    \   long zerosCount = 0;\n        long maxOnesCount = 0;\n        long maxZerosCount\
    \ = 0;\n        long maxCount = 0;\n        long onesSum = 0;\n        long zerosSum\
    \ = 0;\n        long maxOnesSum = 0;\n        long maxZerosSum = 0;\n        long\
    \ maxSum = 0;\n        long onesSum2 = 0;\n        long zerosSum2 = 0;\n     \
    \   long maxOnesSum2 = 0;\n        long maxZerosSum2 = 0;\n        long maxSum2\
    \ = 0;\n        long onesSum3 = 0;\n        long zerosSum3 = 0;\n        long\
    \ maxOnesSum3 = 0;\n        long maxZerosSum3 = 0;\n        long maxSum3 = 0;\n\
    \        long onesSum4 = 0;\n        long zerosSum4 = 0;\n        long maxOnesSum4\
    \ = 0;\n        long maxZerosSum4 = 0;\n        long maxSum4 = 0;\n        long\
    \ onesSum5 = 0;\n        long zerosSum5 = 0;\n        long maxOnesSum5 = 0;\n\
    \        long maxZerosSum5 = 0;\n        long maxSum5 = 0;\n        long onesSum6\
    \ = 0;\n        long zerosSum6 = 0;\n        long maxOnesSum6 = 0;\n        long\
    \ maxZerosSum6 = 0;\n        long maxSum6 = 0;\n        long onesSum7 = 0;\n \
    \       long zerosSum7 = 0;\n        long maxOnesSum7 = 0;\n        long maxZerosSum7\
    \ = 0;\n        long maxSum7 = 0;\n        long onesSum8 = 0;\n        long zerosSum8\
    \ = 0;\n        long maxOnesSum8 = 0;\n        long maxZerosSum8 = 0;\n      \
    \  long maxSum8 = 0;\n        long onesSum9 = 0;\n        long zerosSum9 = 0;\n\
    \        long maxOnesSum9 = 0;\n        long maxZerosSum9 = 0;\n        long maxSum9\
    \ = 0;\n        long onesSum10 = 0;\n        long zerosSum10 = 0;\n        long\
    \ maxOnesSum10 = 0;\n        long maxZerosSum10 = 0;\n        long maxSum10 =\
    \ 0;\n        ", "        long ones = 0;\n        long zeros = 0;\n        long\
    \ max = 0;\n        foreach (long n in arr) {\n            ones += n;\n      \
    \      zeros -= n;\n            if (ones > max) {\n                max = ones;\n\
    \            }\n            if (zeros > max) {\n                max = zeros;\n\
    \            }\n        }\n        List<long> result = new List<long>();\n   \
    \     foreach (long n in arr) {\n            if (n > 0) {\n                result.Add(n);\n\
    \            }\n        }\n        long onesCount = 0;\n        long zerosCount\
    \ = 0;\n        foreach (long n in result) {\n            if (n > 0) {\n     \
    \           onesCount += n;\n            }\n            if (n < 0) {\n       \
    \         zerosCount -= n;\n            }\n        }\n        long maxOnes = max;\n\
    \        long maxZeros = max;\n        if (onesCount > maxOnes) {\n          \
    \  maxOnes = onesCount;\n        }\n        if (zerosCount > maxZeros) {\n   \
    \         maxZeros = zerosCount;\n        }\n        long maxOnesCount = 0;\n\
    \        long maxZerosCount = 0;\n        foreach (long n in result) {\n     \
    \       if (n > 0) {\n                maxOnesCount += n;\n            }\n    \
    \        if (n < 0) {\n                maxZerosCount -= n;\n            }\n  \
    \      }\n        long maxOnesCountZeros = maxOnesCount - maxZerosCount;\n   \
    \     long maxZerosCountOnes = maxZerosCount - maxOnesCount;\n        long maxOnesCountOnes\
    \ = maxOnesCount - maxOnesCountZeros;\n        long maxZerosCountZeros = maxZerosCount\
    \ - maxZerosCountOnes;\n        long maxOnesCountOnesZeros = maxOnesCountOnes\
    \ - maxZerosCountZeros;\n        long maxZerosCountOnesZeros = maxZerosCountOnes\
    \ - maxOnesCountZeros;\n        long maxOnesCountOnesOnes = maxOnesCountOnes -\
    \ maxOnesCountOnesZeros;\n        long maxZerosCountOnesOnes = maxZerosCountOnesOnes\
    \ - maxOnesCountOnesZeros;\n        long maxOnesCountOnesOnesZeros = maxOnesCountOnesOnes\
    \ - maxZerosCountOnesZeros;\n        long maxZerosCountOnesOnesZeros = maxZerosCountOnesOnesZeros\
    \ - maxOnesCountOnesOnesZeros;\n        long max", "        long ones = 0;\n \
    \       long zeros = 0;\n        long max = 0;\n        foreach (long i in arr)\
    \ {\n            if (i == 1) {\n                ones++;\n            }\n     \
    \       if (i == 0) {\n                zeros++;\n            }\n            if\
    \ (i > max) {\n                max = i;\n            }\n        }\n        long\
    \ onesMax = ones * max;\n        long zerosMax = zeros * max;\n        long maxOnes\
    \ = ones * max;\n        long maxZeros = zeros * max;\n        long maxOnesMax\
    \ = onesMax * max;\n        long maxZerosMax = zerosMax * max;\n        long maxOnesMaxMinusOnes\
    \ = onesMax * max - 1;\n        long maxZerosMaxMinusOnes = zerosMax * max - 1;\n\
    \        long maxOnesMaxMinusOnesMinusOnes = onesMax * max - 1 - 1;\n        long\
    \ maxZerosMaxMinusOnesMinusOnes = zerosMax * max - 1 - 1;\n        long maxOnesMaxMinusOnesMinusOnesMinusOnes\
    \ = onesMax * max - 1 - 1 - 1;\n        long maxZerosMaxMinusOnesMinusOnesMinusOnes\
    \ = zerosMax * max - 1 - 1 - 1;\n        long maxOnesMaxMinusOnesMinusOnesMinusOnesMinusOnes\
    \ = onesMax * max - 1 - 1 - 1 - 1;\n        long maxZerosMaxMinusOnesMinusOnesMinusOnesMinusOnes\
    \ = zerosMax * max - 1 - 1 - 1 - 1 - 1;\n        long maxOnesMaxMinusOnesMinusOnesMinusOnesMinusOnesMinusOnes\
    \ = onesMax * max - 1 - 1 - 1 - 1 - 1 - 1;\n        long maxZerosMaxMinusOnesMinusOnesMinusOnesMinusOnesMinusOnes\
    \ = zerosMax * max - 1 - 1 - 1 - 1 - 1 - 1 - 1;\n        long maxOnesMaxMinusOnesMinusOnesMinusOnesMinusOnesMinusOnesMinusOnes\
    \ = onesMax * max - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1;\n        long maxZerosMaxMinusOnesMinusOnesMinusOnesMinusOnesMinusOnesMinusOnesMinusOnes\
    \ = zerosMax * max - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1;\n        long maxOnesMaxMinusOnesMinusOnesMinusOnesMinus",
  "        // Your code here\n        long ones = 0;\n        long zeros = 0;\n  \
    \      long max = 0;\n        foreach (long i in arr) {\n            if (i ==\
    \ 1)\n                ones++;\n            else\n                zeros++;\n  \
    \          if (ones > zeros)\n                max = i;\n        }\n        List<long>\
    \ result = new List<long>();\n        long onesCount = 0;\n        long zerosCount\
    \ = 0;\n        long maxCount = 0;\n        foreach (long i in arr) {\n      \
    \      if (i == 1)\n                onesCount++;\n            else\n         \
    \       zerosCount++;\n            if (onesCount > zerosCount)\n             \
    \   maxCount = i;\n        }\n        long onesDecimal = Convert.ToInt64(Math.Pow(2,\
    \ onesCount));\n        long zerosDecimal = Convert.ToInt64(Math.Pow(2, zerosCount));\n\
    \        long maxDecimal = Convert.ToInt64(Math.Pow(2, maxCount));\n        long\
    \ maxDecimalOnes = Convert.ToInt64(Math.Pow(2, maxCount - onesCount));\n     \
    \   long maxDecimalZeros = Convert.ToInt64(Math.Pow(2, maxCount - zerosCount));\n\
    \        long maxDecimalMax = Convert.ToInt64(Math.Pow(2, maxCount - maxCount));\n\
    \        long maxDecimalOnesDecimal = Convert.ToInt64(Math.Pow(2, maxCount - onesCount\
    \ - onesCount));\n        long maxDecimalZerosDecimal = Convert.ToInt64(Math.Pow(2,\
    \ maxCount - zerosCount - zerosCount));\n        long maxDecimalMaxDecimal = Convert.ToInt64(Math.Pow(2,\
    \ maxCount - maxCount - maxCount));\n        long maxDecimalOnesZeros = Convert.ToInt64(Math.Pow(2,\
    \ maxCount - onesCount - zerosCount));\n        long maxDecimalZerosZeros = Convert.ToInt64(Math.Pow(2,\
    \ maxCount - zerosCount - zerosCount));\n        long maxDecimalMaxZeros = Convert.ToInt64(Math.Pow(2,\
    \ maxCount - maxCount - zerosCount));\n        long maxDecimalOnesMax = Convert.ToInt64(Math.Pow(2,\
    \ maxCount - onesCount - maxCount));\n        long maxDecimalZerosMax = Convert.ToInt64(Math.Pow(2,\
    \ maxCount - zerosCount - maxCount));\n        long maxDecimalMaxMax = Convert.ToInt64(Math.Pow(2,\
    \ maxCount - maxCount - maxCount));\n        long maxDecimalOnesOnes = Convert.ToInt64(Math.Pow(2,\
    \ maxCount - onesCount - onesCount));\n        long maxDecimal", "        long\
    \ ones = arr.Sum(x => x & 1);\n        long zeros = arr.Sum(x => ~x & 1);\n  \
    \      long max = Math.Max(ones, zeros);\n        long min = Math.Min(ones, zeros);\n\
    \        long mid = max / 2;\n        long mid2 = min / 2;\n        long mid3\
    \ = mid / 2;\n        long mid4 = mid3 / 2;\n        long mid5 = mid4 / 2;\n \
    \       long mid6 = mid5 / 2;\n        long mid7 = mid6 / 2;\n        long mid8\
    \ = mid7 / 2;\n        long mid9 = mid8 / 2;\n        long mid10 = mid9 / 2;\n\
    \        long mid11 = mid10 / 2;\n        long mid12 = mid11 / 2;\n        long\
    \ mid13 = mid12 / 2;\n        long mid14 = mid13 / 2;\n        long mid15 = mid14\
    \ / 2;\n        long mid16 = mid15 / 2;\n        long mid17 = mid16 / 2;\n   \
    \     long mid18 = mid17 / 2;\n        long mid19 = mid18 / 2;\n        long mid20\
    \ = mid19 / 2;\n        long mid21 = mid20 / 2;\n        long mid22 = mid21 /\
    \ 2;\n        long mid23 = mid22 / 2;\n        long mid24 = mid23 / 2;\n     \
    \   long mid25 = mid24 / 2;\n        long mid26 = mid25 / 2;\n        long mid27\
    \ = mid26 / 2;\n        long mid28 = mid27 / 2;\n        long mid29 = mid28 /\
    \ 2;\n        long mid30 = mid29 / 2;\n        long mid31 = mid30 / 2;\n     \
    \   long mid32 = mid31 / 2;\n        long mid33 = mid32 / 2;\n        long mid34\
    \ = mid33 / 2;\n        long mid35 = mid34 / 2;\n        long mid36 = mid35 /\
    \ 2;\n        long mid37 = mid36 / 2;\n        long mid38 = mid37 / 2;\n     \
    \   long mid39 = mid38 / 2;\n        long mid40 = mid39 / 2;\n        long mid41\
    \ = mid40 / 2;\n        long mid42 = mid41 / 2;\n        long mid43 = mid42 /\
    \ 2;\n        long mid44 = mid43 / 2;\n        long mid45 = mid44 / 2;\n     \
    \   long mid46 = mid45 / 2;\n        long mid47 = mid46 / 2;\n        long mid48\
    \ = mid", '        // Your code here', "        long ones = 0;\n        long zeros\
    \ = 0;\n        long max = 0;\n        foreach (long i in arr) {\n           \
    \ if (i == 1) {\n                ones++;\n            }\n            if (i ==\
    \ 0) {\n                zeros++;\n            }\n            if (i > max) {\n\
    \                max = i;\n            }\n        }\n        long onesCount =\
    \ 0;\n        long zerosCount = 0;\n        long maxCount = 0;\n        foreach\
    \ (long i in arr) {\n            if (i == 1) {\n                onesCount++;\n\
    \            }\n            if (i == 0) {\n                zerosCount++;\n   \
    \         }\n            if (i > maxCount) {\n                maxCount = i;\n\
    \            }\n        }\n        long onesDecimal = ones / onesCount;\n    \
    \    long zerosDecimal = zeros / zerosCount;\n        long maxDecimal = max /\
    \ maxCount;\n        List<long> result = new List<long>();\n        foreach (long\
    \ i in arr) {\n            if (i == 1) {\n                result.Add(onesDecimal);\n\
    \            }\n            if (i == 0) {\n                result.Add(zerosDecimal);\n\
    \            }\n            if (i > maxDecimal) {\n                result.Add(maxDecimal);\n\
    \            }\n        }\n        return result;", "        long ones = 0;\n\
    \        long zeros = 0;\n        long max = 0;\n        foreach (long n in arr)\
    \ {\n            ones += n;\n            zeros -= n;\n            if (ones > max)\
    \ {\n                max = ones;\n            }\n            if (zeros > max)\
    \ {\n                max = zeros;\n            }\n        }\n        List<long>\
    \ result = new List<long>();\n        foreach (long n in arr) {\n            if\
    \ (n > 0) {\n                result.Add(n);\n            }\n        }\n      \
    \  long onesCount = 0;\n        long zerosCount = 0;\n        foreach (long n\
    \ in result) {\n            onesCount += n;\n            zerosCount -= n;\n  \
    \          if (onesCount > max) {\n                result.Remove(n);\n       \
    \         result.Add(n);\n            }\n            if (zerosCount > max) {\n\
    \                result.Remove(n);\n                result.Add(n);\n         \
    \   }\n        }\n        return result;", "        long ones = 0;\n        long\
    \ zeros = 0;\n        long max = 0;\n        foreach (long i in arr) {\n     \
    \       if (i == 1) {\n                ones++;\n            }\n            else\
    \ if (i == 0) {\n                zeros++;\n            }\n            else {\n\
    \                max = Math.Max(max, i);\n            }\n        }\n        List<long>\
    \ result = new List<long>();\n        if (ones > zeros) {\n            foreach\
    \ (long i in arr) {\n                if (i == 1) {\n                    result.Add(i);\n\
    \                }\n            }\n        }\n        else {\n            foreach\
    \ (long i in arr) {\n                if (i == 0) {\n                    result.Add(i);\n\
    \                }\n            }\n        }\n        Array.Sort(result);\n  \
    \      return result;", "        long ones = arr.Sum(x => x & 1);\n        long\
    \ tens = arr.Sum(x => x >> 1);\n        long tensOnes = arr.Sum(x => x >> 2);\n\
    \        long hundreds = arr.Sum(x => x >> 3);\n        long hundredsOnes = arr.Sum(x\
    \ => x >> 4);\n        long thousands = arr.Sum(x => x >> 5);\n        long thousandsOnes\
    \ = arr.Sum(x => x >> 6);\n        long millions = arr.Sum(x => x >> 7);\n   \
    \     long millionsOnes = arr.Sum(x => x >> 8);\n        long billions = arr.Sum(x\
    \ => x >> 9);\n        long billionsOnes = arr.Sum(x => x >> 10);\n        long\
    \ trillions = arr.Sum(x => x >> 11);\n        long trillionsOnes = arr.Sum(x =>\
    \ x >> 12);\n        long quadrillions = arr.Sum(x => x >> 13);\n        long\
    \ quadrillionsOnes = arr.Sum(x => x >> 14);\n        long quintillions = arr.Sum(x\
    \ => x >> 15);\n        long quintillionsOnes = arr.Sum(x => x >> 16);\n     \
    \   long sextillions = arr.Sum(x => x >> 17);\n        long sextillionsOnes =\
    \ arr.Sum(x => x >> 18);\n        long septillions = arr.Sum(x => x >> 19);\n\
    \        long septillionsOnes = arr.Sum(x => x >> 20);\n        long octillions\
    \ = arr.Sum(x => x >> 21);\n        long octillionsOnes = arr.Sum(x => x >> 22);\n\
    \        long nonillions = arr.Sum(x => x >> 23);\n        long nonillionsOnes\
    \ = arr.Sum(x => x >> 24);\n        long decillions = arr.Sum(x => x >> 25);\n\
    \        long decillionsOnes = arr.Sum(x => x >> 26);\n        long undecillions\
    \ = arr.Sum(x => x >> 27);\n        long undecillionsOnes = arr.Sum(x => x >>\
    \ 28);\n        long duodecillions = arr.Sum(x => x >> 29);\n        long duodecillionsOnes\
    \ = arr.Sum(x => x >> 30);", "        // TODO: Implement this function\n     \
    \   List<long> result = new List<long>();\n        long ones = 0;\n        long\
    \ tens = 0;\n        long hundreds = 0;\n        long thousands = 0;\n       \
    \ long tenThousands = 0;\n        long oneThousands = 0;\n        long oneHundredThousands\
    \ = 0;\n        long oneThousandHundreds = 0;\n        long oneHundredThousandHundreds\
    \ = 0;\n        long oneThousandHundredThousands = 0;\n        long oneHundredThousandHundredThousands\
    \ = 0;\n        long oneThousandHundredThousandHundreds = 0;\n        long oneHundredThousandHundredThousandHundreds\
    \ = 0;\n        long oneThousandHundredThousandHundredThousands = 0;\n       \
    \ long oneHundredThousandHundredThousandHundredThousands = 0;\n        long oneThousandHundredThousandHundredThousandHundreds\
    \ = 0;\n        long oneHundredThousandHundredThousandHundredThousandHundreds\
    \ = 0;\n        long oneThousandHundredThousandHundredThousandHundredThousands\
    \ = 0;\n        long oneHundredThousandHundredThousandHundredThousandHundredThousands\
    \ = 0;\n        long oneThousandHundredThousandHundredThousandHundredThousandHundreds\
    \ = 0;\n        long oneHundredThousandHundredThousandHundredThousandHundredThousandHundreds\
    \ = 0;\n        long oneThousandHundredThousandHundredThousandHundredThousandHundredThousands\
    \ = 0;\n        long oneHundredThousandHundredThousandHundredThousandHundredThousandHundredThousands\
    \ = 0;\n        long oneThousandHundredThousandHundredThousandHundredThousandHundredThousandHundreds\
    \ = 0;\n        long oneHundredThousandHundredThousandHundredThousandHundredThousandHundredThousandHundredThousands\
    \ = 0;\n        long one", "        long ones = arr.Sum(x => x & 1);\n       \
    \ long zeros = arr.Sum(x => x & 2);\n        long max = Math.Max(ones, zeros);\n\
    \        long min = Math.Min(ones, zeros);\n        long maxOnes = ones - max;\n\
    \        long maxZeros = zeros - max;\n        long minOnes = min - ones;\n  \
    \      long minZeros = min - zeros;\n        long maxOnesZeros = maxOnes - maxZeros;\n\
    \        long maxZerosOnes = maxZeros - maxOnes;\n        long minOnesZeros =\
    \ minOnes - minZeros;\n        long minZerosOnes = minZeros - minOnes;\n     \
    \   long maxOnesZerosOnes = maxOnesZeros - maxZerosOnes;\n        long maxZerosOnesOnes\
    \ = maxZerosOnes - minOnesZeros;\n        long minOnesZerosOnes = minOnesZeros\
    \ - minZerosOnes;\n        long minZerosOnesOnes = minZerosOnes - maxOnesZeros;\n\
    \        long maxOnesZerosOnesOnes = maxOnesZerosOnes - minOnesZerosOnes;\n  \
    \      long maxZerosOnesOnesOnes = maxZerosOnesOnes - maxOnesZerosOnesOnes;\n\
    \        long minOnesZerosOnesOnes = minOnesZerosOnes - minZerosOnesOnes;\n  \
    \      long minZerosOnesOnesOnes = minZerosOnesOnes - maxOnesZerosOnesOnes;\n\
    \        long maxOnesZerosOnesOnesOnes = maxOnesZerosOnesOnesOnes - minOnesZerosOnesOnesOnes;\n\
    \        long minOnesZerosOnesOnesOnes = minOnesZerosOnesOnesOnes - minZerosOnesOnesOnesOnes;\n\
    \        long minZerosOnesOnesOnesOnes = minZerosOnesOnesOnesOnes - maxOnesZerosOnesOnesOnesOnes;\n\
    \        long maxOnesZerosOnesOnesOnesOnes = maxOnesZerosOnesOnesOnesOnes - min",
  "        long ones = 0;\n        long zeros = 0;\n        long max = 0;\n      \
    \  foreach (long i in arr) {\n            if (i == 1) {\n                ones++;\n\
    \            } else {\n                zeros++;\n            }\n            if\
    \ (ones > zeros) {\n                max = i;\n            }\n        }\n     \
    \   List<long> result = new List<long>();\n        long temp = 0;\n        foreach\
    \ (long i in arr) {\n            if (i == 1) {\n                result.Add(i);\n\
    \            } else {\n                temp = i;\n                while (temp\
    \ > 0) {\n                    temp = temp / 10;\n                }\n         \
    \       result.Add(temp);\n            }\n        }\n        Array.Sort(result);\n\
    \        List<long> result = new List<long>();\n        long temp = 0;\n     \
    \   foreach (long i in arr) {\n            if (i == 1) {\n                result.Add(i);\n\
    \            } else {\n                temp = i;\n                while (temp\
    \ > 0) {\n                    temp = temp / 10;\n                }\n         \
    \       result.Add(temp);\n            }\n        }\n        Array.Sort(result);\n\
    \        return result;", "        // Write your code here\n        long ones\
    \ = 0;\n        long zeros = 0;\n        long max = 0;\n        foreach (long\
    \ i in arr) {\n            if (i == 1) {\n                ones++;\n          \
    \  }\n            else if (i == 0) {\n                zeros++;\n            }\n\
    \            else {\n                if (ones > zeros) {\n                   \
    \ max = i;\n                }\n                else {\n                    max\
    \ = zeros;\n                }\n            }\n        }\n        List<long> result\
    \ = new List<long>();\n        foreach (long i in arr) {\n            if (i ==\
    \ 1) {\n                result.Add(i);\n            }\n            else if (i\
    \ == 0) {\n                result.Add(zeros);\n            }\n            else\
    \ {\n                if (i == max) {\n                    result.Add(i);\n   \
    \             }\n                else {\n                    result.Add(zeros);\n\
    \                }\n            }\n        }\n        return result;", "     \
    \   long ones = arr.Sum(x => x & 1);\n        if (ones == 0) return arr;\n   \
    \     long maxOnes = arr.Max(x => x & 1);\n        long maxOnesIndex = arr.FindIndex(x\
    \ => x == maxOnes);\n        long maxOnesIndex2 = arr.FindIndex(x => x == maxOnes\
    \ + 1);\n        long maxOnesIndex3 = arr.FindIndex(x => x == maxOnes + 2);\n\
    \        long maxOnesIndex4 = arr.FindIndex(x => x == maxOnes + 3);\n        long\
    \ maxOnesIndex5 = arr.FindIndex(x => x == maxOnes + 4);\n        long maxOnesIndex6\
    \ = arr.FindIndex(x => x == maxOnes + 5);\n        long maxOnesIndex7 = arr.FindIndex(x\
    \ => x == maxOnes + 6);\n        long maxOnesIndex8 = arr.FindIndex(x => x ==\
    \ maxOnes + 7);\n        long maxOnesIndex9 = arr.FindIndex(x => x == maxOnes\
    \ + 8);\n        long maxOnesIndex10 = arr.FindIndex(x => x == maxOnes + 9);\n\
    \        long maxOnesIndex11 = arr.FindIndex(x => x == maxOnes + 10);\n      \
    \  long maxOnesIndex12 = arr.FindIndex(x => x == maxOnes + 11);\n        long\
    \ maxOnesIndex13 = arr.FindIndex(x => x == maxOnes + 12);\n        long maxOnesIndex14\
    \ = arr.FindIndex(x => x == maxOnes + 13);\n        long maxOnesIndex15 = arr.FindIndex(x\
    \ => x == maxOnes + 14);\n        long maxOnesIndex16 = arr.FindIndex(x => x ==\
    \ maxOnes + 15);\n        long maxOnesIndex17 = arr.FindIndex(x => x == maxOnes\
    \ + 16);\n        long maxOnesIndex18 = arr.FindIndex(x => x == maxOnes + 17);\n\
    \        long maxOnesIndex19 = arr.FindIndex(x => x == maxOnes + 18);\n      \
    \  long maxOnesIndex20 = arr.FindIndex(x => x == maxOnes + 19);\n        long\
    \ maxOnesIndex21 = arr.FindIndex(x => x == maxOnes + 20);\n        long maxOnesIndex22\
    \ = arr.FindIndex(x => x == maxOnes + 21);\n        long maxOnesIndex23 = arr.FindIndex(x\
    \ => x == maxOnes + 22);\n        long maxOnesIndex24 = arr.FindIndex(x => x ==\
    \ maxOnes + 23);\n        long maxOnesIndex25 = arr.FindIndex(x => x == maxOnes\
    \ + 24);\n        long maxOnesIndex26 = arr.Find", "        long ones = arr.Sum(x\
    \ => x & 1L);\n        long zeros = arr.Sum(x => x >> 1);\n        long maxOnes\
    \ = arr.Max(x => x & 1L);\n        long maxZeros = arr.Max(x => x >> 1);\n   \
    \     long maxOnesDecimal = Convert.ToInt64(Math.Pow(2, Convert.ToInt32(Math.Log10(maxOnes))));\n\
    \        long maxZerosDecimal = Convert.ToInt64(Math.Pow(2, Convert.ToInt32(Math.Log10(maxZeros))));\n\
    \        long maxDecimal = maxOnesDecimal > maxZerosDecimal ? maxOnesDecimal :\
    \ maxZerosDecimal;\n        long maxDecimalDecimal = Convert.ToInt64(Math.Pow(2,\
    \ Convert.ToInt32(Math.Log10(maxDecimal))));\n        long maxDecimalDecimalDecimal\
    \ = Convert.ToInt64(Math.Pow(2, Convert.ToInt32(Math.Log10(maxDecimalDecimal))));\n\
    \        long maxDecimalDecimalDecimalDecimal = Convert.ToInt64(Math.Pow(2, Convert.ToInt32(Math.Log10(maxDecimalDecimalDecimal))));\n\
    \        long maxDecimalDecimalDecimalDecimalDecimal = Convert.ToInt64(Math.Pow(2,\
    \ Convert.ToInt32(Math.Log10(maxDecimalDecimalDecimalDecimal))));\n        long\
    \ maxDecimalDecimalDecimalDecimalDecimalDecimal = Convert.ToInt64(Math.Pow(2,\
    \ Convert.ToInt32(Math.Log10(maxDecimalDecimalDecimalDecimalDecimalDecimal))));\n\
    \        long maxDecimalDecimalDecimalDecimalDecimalDecimalDecimal = Convert.ToInt64(Math.Pow(2,\
    \ Convert.ToInt32(Math.Log10(maxDecimalDecimalDecimalDecimalDecimalDecimalDecimal))));\n\
    \        long maxDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal = Convert.ToInt64(Math.Pow(2,\
    \ Convert.ToInt32(Math.Log10(maxDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal))));\n\
    \        long maxDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal = Convert.ToInt64(Math.Pow(2,\
    \ Convert.ToInt32(Math.Log10(maxDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal))));\n\
    \        long maxDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = Convert.ToInt64(Math.Pow(2, Convert.ToInt32(Math.Log10(maxDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal))));\n\
    \        long maxDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = Convert.ToInt64(Math.Pow(2, Convert.ToInt32(Math.Log10", "        long ones\
    \ = 0;\n        long zeros = 0;\n        long max = 0;\n        long min = 0;\n\
    \        foreach (long i in arr) {\n            ones += i;\n            zeros\
    \ -= i;\n            if (ones > max) {\n                max = ones;\n        \
    \    }\n            if (zeros > min) {\n                min = zeros;\n       \
    \     }\n        }\n        long onesCount = 0;\n        long zerosCount = 0;\n\
    \        long maxCount = 0;\n        long minCount = 0;\n        foreach (long\
    \ i in arr) {\n            onesCount += i;\n            zerosCount -= i;\n   \
    \         if (onesCount > maxCount) {\n                maxCount = onesCount;\n\
    \            }\n            if (zerosCount > minCount) {\n                minCount\
    \ = zerosCount;\n            }\n        }\n        long onesSum = 0;\n       \
    \ long zerosSum = 0;\n        long maxSum = 0;\n        long minSum = 0;\n   \
    \     foreach (long i in arr) {\n            onesSum += i;\n            zerosSum\
    \ -= i;\n            if (onesSum > maxSum) {\n                maxSum = onesSum;\n\
    \            }\n            if (zerosSum > minSum) {\n                minSum =\
    \ zerosSum;\n            }\n        }\n        long onesAvg = 0;\n        long\
    \ zerosAvg = 0;\n        long maxAvg = 0;\n        long minAvg = 0;\n        foreach\
    \ (long i in arr) {\n            onesAvg += i;\n            zerosAvg -= i;\n \
    \           if (onesAvg > maxAvg) {\n                maxAvg = onesAvg;\n     \
    \       }\n            if (zerosAvg > minAvg) {\n                minAvg = zerosAvg;\n\
    \            }\n        }\n        long onesMax = 0;\n        long zerosMax =\
    \ 0;\n        long maxMax = 0;\n        long minMax = 0;\n        foreach (long\
    \ i in arr) {\n            onesMax += i;\n            zerosMax -= i;\n       \
    \     if (onesMax < maxMax) {\n                maxMax = onesMax;\n           \
    \ }\n            if (zerosMax < minMax) {\n                minMax = zerosMax;\n\
    \            }\n        }\n        long onesMin = 0;\n        long zerosMin =\
    \ 0;\n        long maxMin = 0;\n        long minMin = 0;\n        foreach (long\
    \ i in arr) {\n            onesMin += i;\n            zerosMin -= i;\n       \
    \     if (onesMin < maxMin) {\n                maxMin = onesMin;\n           \
    \ }\n            if (zerosMin < minMin) {\n                minMin = zerosMin;\n\
    \            }\n        }\n        long onesAvgMax = 0;\n        long zerosAvgMax\
    \ = 0;\n        long maxAvgMax = 0;", "        long ones = 0;\n        long zeros\
    \ = 0;\n        long max = 0;\n        foreach (long i in arr) {\n           \
    \ if (i == 1) {\n                ones++;\n            }\n            if (i ==\
    \ 0) {\n                zeros++;\n            }\n            if (i > max) {\n\
    \                max = i;\n            }\n        }\n        long onesMax = ones\
    \ * max;\n        long zerosMax = zeros * max;\n        long maxOnesMax = onesMax\
    \ * max;\n        long maxZerosMax = zerosMax * max;\n        long maxOnesMax2\
    \ = maxOnesMax * max;\n        long maxZerosMax2 = maxZerosMax * max;\n      \
    \  long maxOnesMax3 = maxOnesMax2 * max;\n        long maxZerosMax3 = maxZerosMax2\
    \ * max;\n        long maxOnesMax4 = maxOnesMax3 * max;\n        long maxZerosMax4\
    \ = maxZerosMax3 * max;\n        long maxOnesMax5 = maxOnesMax4 * max;\n     \
    \   long maxZerosMax5 = maxZerosMax4 * max;\n        long maxOnesMax6 = maxOnesMax5\
    \ * max;\n        long maxZerosMax6 = maxZerosMax5 * max;\n        long maxOnesMax7\
    \ = maxOnesMax6 * max;\n        long maxZerosMax7 = maxZerosMax6 * max;\n    \
    \    long maxOnesMax8 = maxOnesMax7 * max;\n        long maxZerosMax8 = maxZerosMax7\
    \ * max;\n        long maxOnesMax9 = maxOnesMax8 * max;\n        long maxZerosMax9\
    \ = maxZerosMax8 * max;\n        long maxOnesMax10 = maxOnesMax9 * max;\n    \
    \    long maxZerosMax10 = maxZerosMax9 * max;\n        long maxOnesMax11 = maxOnesMax10\
    \ * max;\n        long maxZerosMax11 = maxZerosMax10 * max;\n        long maxOnesMax12\
    \ = maxOnesMax11 * max;\n        long maxZerosMax12 = maxZerosMax11 * max;\n \
    \       long maxOnesMax13 = maxOnesMax12 * max;\n        long maxZerosMax13 =\
    \ maxZerosMax12 * max;\n        long maxOnesMax14 = maxOnes", '        // Your
    code here', "        long ones = 0;\n        long zeros = 0;\n        long max\
    \ = 0;\n        long min = 0;\n        foreach (long i in arr) {\n           \
    \ if (i == 1) {\n                ones++;\n            }\n            if (i ==\
    \ 0) {\n                zeros++;\n            }\n            if (i > max) {\n\
    \                max = i;\n            }\n            if (i < min) {\n       \
    \         min = i;\n            }\n        }\n        long onesMax = ones * max;\n\
    \        long zerosMax = zeros * max;\n        long onesMin = ones * min;\n  \
    \      long zerosMin = zeros * min;\n        long onesAvg = ones * ones / arr.Count;\n\
    \        long zerosAvg = zeros * ones / arr.Count;\n        long onesDev = Math.Sqrt(onesAvg\
    \ * onesAvg - onesAvg * onesAvg * onesAvg);\n        long zerosDev = Math.Sqrt(zerosAvg\
    \ * zerosAvg - zerosAvg * zerosAvg * zerosAvg);\n        long onesDeviation =\
    \ onesDev / onesMax;\n        long zerosDeviation = zerosDev / zerosMax;\n   \
    \     long onesDeviationDeviation = Math.Sqrt(onesDeviation * onesDeviation -\
    \ onesDeviation * onesDeviation * onesDeviation);\n        long zerosDeviationDeviation\
    \ = Math.Sqrt(zerosDeviation * zerosDeviation - zerosDeviation * zerosDeviation\
    \ * zerosDeviation);\n        long onesDeviationDeviationDeviation = Math.Sqrt(onesDeviationDeviation\
    \ * onesDeviationDeviation - onesDeviationDeviation * onesDeviationDeviation *\
    \ onesDeviationDeviation);\n        long zerosDeviationDeviationDeviation = Math.Sqrt(zerosDeviationDeviation\
    \ * zerosDeviationDeviation - zerosDeviationDeviation * zerosDeviationDeviation\
    \ * zerosDeviationDeviation);\n        long onesDeviationDeviationDeviationDeviation\
    \ = Math.Sqrt(onesDeviationDeviationDeviation * onesDeviationDeviationDeviation\
    \ - onesDeviationDeviationDeviation * onesDeviationDeviationDeviation * onesDeviationDeviationDeviation);\n\
    \        ", '        // Your code here', "        long ones = arr.Count(x => x\
    \ == 1);\n        long zeros = arr.Count(x => x == 0);\n        long maxOnes =\
    \ arr.Max(x => x == 1);\n        long maxZeros = arr.Max(x => x == 0);\n     \
    \   long maxOnesDecimal = maxOnes / Math.Pow(10.0, (int)Math.Log10(maxOnes));\n\
    \        long maxZerosDecimal = maxZeros / Math.Pow(10.0, (int)Math.Log10(maxZeros));\n\
    \        long maxOnesDecimalDecimal = maxOnesDecimal / Math.Pow(10.0, (int)Math.Log10(maxOnesDecimal));\n\
    \        long maxZerosDecimalDecimal = maxZerosDecimal / Math.Pow(10.0, (int)Math.Log10(maxZerosDecimal));\n\
    \        long maxOnesDecimalDecimalDecimal = maxOnesDecimalDecimal / Math.Pow(10.0,\
    \ (int)Math.Log10(maxOnesDecimalDecimal));\n        long maxZerosDecimalDecimalDecimal\
    \ = maxZerosDecimalDecimal / Math.Pow(10.0, (int)Math.Log10(maxZerosDecimalDecimal));\n\
    \        long maxOnesDecimalDecimalDecimalDecimal = maxOnesDecimalDecimalDecimal\
    \ / Math.Pow(10.0, (int)Math.Log10(maxOnesDecimalDecimalDecimal));\n        long\
    \ maxZerosDecimalDecimalDecimalDecimal = maxZerosDecimalDecimalDecimal / Math.Pow(10.0,\
    \ (int)Math.Log10(maxZerosDecimalDecimalDecimal));\n        long maxOnesDecimalDecimalDecimalDecimalDecimal\
    \ = maxOnesDecimalDecimalDecimalDecimal / Math.Pow(10.0, (int)Math.Log10(maxOnesDecimalDecimalDecimalDecimal));\n\
    \        long maxZerosDecimalDecimalDecimalDecimalDecimal = maxZerosDecimalDecimalDecimalDecimal\
    \ / Math.Pow(10.0, (int)Math.Log10(maxZerosDecimalDecimalDecimalDecimal));\n \
    \       long maxOnesDecimalDecimalDecimalDecimalDecimalDecimal = maxOnesDecimalDecimalDecimalDecimalDecimal\
    \ / Math.Pow(10.0, (int)Math.Log10(maxOnesDecimalDecimalDecimalDecimalDecimal));\n\
    \        long maxZerosDecimalDecimalDecimalDecimalDecimalDecimal = maxZerosDecimalDecimalDecimalDecimalDecimal\
    \ / Math.Pow(10.0, (int)Math.Log10(maxZerosDecimalDecimalDecimalDecimalDecimal));\n\
    \        long maxOnesDecimalDecimalDecimalDecimalDecimalDecimalDecimal = maxOnesDecimalDecimalDecimalDecimal",
  "        long ones = 0;\n        long zeros = 0;\n        long maxOnes = 0;\n  \
    \      long maxZeros = 0;\n        long maxOnesCount = 0;\n        long maxZerosCount\
    \ = 0;\n        foreach (long i in arr) {\n            if (i == 1) {\n       \
    \         ones++;\n                if (ones > maxOnes) {\n                   \
    \ maxOnes = ones;\n                    maxOnesCount = 1;\n                }\n\
    \                if (ones == maxOnes) {\n                    maxOnesCount++;\n\
    \                }\n            } else {\n                zeros++;\n         \
    \       if (zeros > maxZeros) {\n                    maxZeros = zeros;\n     \
    \               maxZerosCount = 1;\n                }\n                if (zeros\
    \ == maxZeros) {\n                    maxZerosCount++;\n                }\n  \
    \          }\n        }\n        List<long> result = new List<long>();\n     \
    \   long onesCount = 0;\n        long zerosCount = 0;\n        foreach (long i\
    \ in arr) {\n            if (i == 1) {\n                onesCount++;\n       \
    \         if (onesCount > maxOnesCount) {\n                    maxOnesCount =\
    \ onesCount;\n                }\n                if (onesCount == maxOnesCount)\
    \ {\n                    result.Add(maxOnes);\n                }\n           \
    \ } else {\n                zerosCount++;\n                if (zerosCount > maxZerosCount)\
    \ {\n                    maxZerosCount = zerosCount;\n                }\n    \
    \            if (zerosCount == maxZerosCount) {\n                    result.Add(maxZeros);\n\
    \                }\n            }\n        }\n        return result;", "     \
    \   long ones = 0;\n        long zeros = 0;\n        long max = 0;\n        foreach\
    \ (long i in arr) {\n            if (i == 1) {\n                ones++;\n    \
    \        } else {\n                zeros++;\n            }\n            if (ones\
    \ > zeros) {\n                max = i;\n            }\n        }\n        List<long>\
    \ result = new List<long>();\n        foreach (long i in arr) {\n            if\
    \ (i == 1) {\n                result.Add(i);\n            } else if (i == 0) {\n\
    \                result.Add(max);\n            } else {\n                result.Add(i\
    \ - 1);\n            }\n        }\n        return result;", "        long ones\
    \ = 0;\n        long zeros = 0;\n        long max = 0;\n        long min = 0;\n\
    \        foreach (long i in arr) {\n            if (i == 1) {\n              \
    \  ones++;\n            }\n            if (i == 0) {\n                zeros++;\n\
    \            }\n            if (i > max) {\n                max = i;\n       \
    \     }\n            if (i < min) {\n                min = i;\n            }\n\
    \        }\n        long onesMax = ones * max;\n        long onesMin = ones *\
    \ min;\n        long zerosMax = zeros * max;\n        long zerosMin = zeros *\
    \ min;\n        long maxOnes = ones * max;\n        long maxZeros = zeros * max;\n\
    \        long minOnes = ones * min;\n        long minZeros = zeros * min;\n  \
    \      long maxOnesMin = onesMin * max;\n        long maxOnesMax = onesMax * max;\n\
    \        long maxZerosMin = zerosMin * max;\n        long maxZerosMax = zerosMax\
    \ * max;\n        long minOnesMin = onesMin * min;\n        long minOnesMax =\
    \ onesMax * min;\n        long minZerosMin = zerosMin * min;\n        long minZerosMax\
    \ = zerosMax * min;\n        long maxOnesMinMin = onesMin * min;\n        long\
    \ maxOnesMaxMin = onesMax * min;\n        long maxZerosMinMin = zerosMin * min;\n\
    \        long maxZerosMaxMin = zerosMax * min;\n        long minOnesMinMin = onesMin\
    \ * min;\n        long minOnesMaxMin = onesMax * min;\n        long minZerosMinMin\
    \ = zerosMin * min;\n        long minZerosMaxMin = zerosMax * min;\n        long\
    \ maxOnesMinMax = onesMin * max;\n        long maxOnesMaxMax = onesMax * max;\n\
    \        long maxZerosMinMax = zerosMin * max;\n        long maxZerosMaxMax =\
    \ zerosMax * max;\n        long minOnesMinMax = onesMin * max;\n        long minOnesMaxMax\
    \ = onesMax * max;\n        long minZerosMinMax = zerosMin * max;\n        long\
    \ minZerosMaxMax = zerosMax * max;\n        long maxOnesMin", "        long ones\
    \ = 0;\n        long zeros = 0;\n        long max = 0;\n        foreach (long\
    \ i in arr) {\n            if (i == 1) {\n                ones++;\n          \
    \  }\n            if (i == 0) {\n                zeros++;\n            }\n   \
    \         if (i > max) {\n                max = i;\n            }\n        }\n\
    \        List<long> result = new List<long>();\n        if (ones > zeros) {\n\
    \            long onesMax = Convert.ToInt64(Math.Pow(2, ones));\n            long\
    \ zerosMax = Convert.ToInt64(Math.Pow(2, zeros));\n            long onesMin =\
    \ Convert.ToInt64(Math.Pow(2, ones - 1));\n            long zerosMin = Convert.ToInt64(Math.Pow(2,\
    \ zeros - 1));\n            long onesMaxMin = Convert.ToInt64(Math.Pow(2, ones\
    \ - 1));\n            long zerosMaxMin = Convert.ToInt64(Math.Pow(2, zeros - 1));\n\
    \            long onesMaxMinMin = Convert.ToInt64(Math.Pow(2, ones - 1));\n  \
    \          long zerosMaxMinMin = Convert.ToInt64(Math.Pow(2, zeros - 1));\n  \
    \          long onesMaxMinMinMin = Convert.ToInt64(Math.Pow(2, ones - 1));\n \
    \           long zerosMaxMinMinMin = Convert.ToInt64(Math.Pow(2, zeros - 1));\n\
    \            long onesMaxMinMinMinMin = Convert.ToInt64(Math.Pow(2, ones - 1));\n\
    \            long zerosMaxMinMinMin = Convert.ToInt64(Math.Pow(2, zeros - 1));\n\
    \            long onesMaxMinMinMinMin = Convert.ToInt64(Math.Pow(2, ones - 1));\n\
    \            long zerosMaxMinMinMin = Convert.ToInt64(Math.Pow(2, zeros - 1));\n\
    \            long onesMaxMinMinMinMin = Convert.ToInt64(Math.Pow(2, ones - 1));\n\
    \            long zerosMaxMinMinMinMin = Convert.ToInt64(Math.Pow(2, zeros - 1));\n\
    \            long onesMaxMinMinMinMin = Convert.ToInt64(Math.Pow(2, ones - 1));\n\
    \            long zerosMaxMinMinMinMin = Convert.ToInt64(Math.Pow(2, zeros - 1));\n\
    \            long onesMaxMinMinMinMin = Convert.ToInt64(Math.Pow(2, ones - 1));\n\
    \            long zerosMaxMinMinMinMin = Convert.ToInt64(Math.Pow(2, zeros - 1));\n\
    \            long onesMaxMinMinMinMin = Convert.ToInt64(Math.Pow(2, ones - 1));\n\
    \            long zerosMaxMinMinMinMin = Convert.ToInt64(Math.Pow(2, zeros - 1));",
  "        // TODO: Implement this method.\n        throw new NotImplementedException();",
  "        List<long> result = new List<long>();\n        long ones = 0;\n       \
    \ long zeros = 0;\n        long max = 0;\n        long min = 0;\n        foreach\
    \ (long i in arr) {\n            if (i == 1) {\n                ones++;\n    \
    \        }\n            else if (i == 0) {\n                zeros++;\n       \
    \     }\n            else {\n                max = Math.Max(max, i);\n       \
    \         min = Math.Min(min, i);\n            }\n        }\n        long onesMax\
    \ = Convert.ToInt64(Math.Pow(2, ones));\n        long zerosMax = Convert.ToInt64(Math.Pow(2,\
    \ zeros));\n        long maxMin = Convert.ToInt64(Math.Pow(2, max));\n       \
    \ long minMax = Convert.ToInt64(Math.Pow(2, min));\n        long onesMin = Convert.ToInt64(Math.Pow(2,\
    \ ones - 1));\n        long zerosMin = Convert.ToInt64(Math.Pow(2, zeros - 1));\n\
    \        long maxMinMin = Convert.ToInt64(Math.Pow(2, max - min));\n        long\
    \ minMaxMin = Convert.ToInt64(Math.Pow(2, min - max));\n        long onesMinMin\
    \ = Convert.ToInt64(Math.Pow(2, ones - 1));\n        long zerosMinMin = Convert.ToInt64(Math.Pow(2,\
    \ zeros - 1));\n        long maxMinMinMin = Convert.ToInt64(Math.Pow(2, max -\
    \ min));\n        long minMaxMinMin = Convert.ToInt64(Math.Pow(2, min - max));\n\
    \        long onesMinMinMin = Convert.ToInt64(Math.Pow(2, ones - 1));\n      \
    \  long zerosMinMinMin = Convert.ToInt64(Math.Pow(2, zeros - 1));\n        long\
    \ maxMinMinMinMin = Convert.ToInt64(Math.Pow(2, max - min));\n        long minMaxMinMinMin\
    \ = Convert.ToInt64(Math.Pow(2, min - max));\n        long onesMinMinMinMin =\
    \ Convert.ToInt64(Math.Pow(2, ones - 1));\n        long zerosMinMinMinMin = Convert.ToInt64(Math.Pow(2,\
    \ zeros - 1));\n        long maxMinMinMinMin = Convert.ToInt64(Math.Pow(2, max\
    \ - min));\n        long minMaxMinMinMin = Convert.ToInt64(Math.Pow(2, min - max));\n\
    \        long onesMinMinMinMin = Convert.ToInt64(Math.Pow(2, ones - 1));\n   \
    \     long zerosMinMinMinMin = Convert.ToInt64(Math.Pow(2, zeros - 1));\n    \
    \    long maxMinMinMinMin = Convert.ToInt64(Math.Pow", "        long ones = 0;\n\
    \        long zeros = 0;\n        long max = 0;\n        foreach (long i in arr)\
    \ {\n            if (i == 1) {\n                ones++;\n            } else {\n\
    \                zeros++;\n            }\n            if (ones > zeros) {\n  \
    \              max = i;\n            }\n        }\n        List<long> result =\
    \ new List<long>();\n        foreach (long i in arr) {\n            if (i == 1)\
    \ {\n                result.Add(i);\n            } else if (i == 0) {\n      \
    \          result.Add(zeros);\n            } else if (i == max) {\n          \
    \      result.Add(ones);\n            } else {\n                result.Add(0);\n\
    \            }\n        }\n        return result;", "        // Your code goes\
    \ here\n        long ones = 0;\n        long tens = 0;\n        long hundreds\
    \ = 0;\n        long thousands = 0;\n        long tenThousands = 0;\n        long\
    \ oneThousands = 0;\n        long oneHundreds = 0;\n        long oneThousandHundreds\
    \ = 0;\n        long oneHundredThousands = 0;\n        long oneHundredThousandHundreds\
    \ = 0;\n        long oneHundredThousandHundredThousands = 0;\n        long oneHundredThousandHundredThousandHundreds\
    \ = 0;\n        long oneHundredThousandHundredThousandHundredThousands = 0;\n\
    \        long oneHundredThousandHundredThousandHundredThousandHundreds = 0;\n\
    \        long oneHundredThousandHundredThousandHundredThousandHundredThousands\
    \ = 0;\n        long oneHundredThousandHundredThousandHundredThousandHundredThousandHundreds\
    \ = 0;\n        long oneHundredThousandHundredThousandHundredThousandHundredThousandHundredThousands\
    \ = 0;\n        long oneHundredThousandHundredThousandHundredThousandHundredThousandHundredThousandHundreds\
    \ = 0;\n        long oneHundredThousandHundredThousandHundredThousandHundredThousandHundredThousandHundredThousands\
    \ = 0;\n        long oneHundredThousandHundredThousandHundredThousandHundredThousandHundredThousandHundredThousandHundreds\
    \ = 0;\n        long oneHundredThousandHundredThousandHundredThousandHundredThousandHundredThousandHundredThousandHundredThousands\
    \ = 0;\n        long oneHundredThousandHundredThousandHundredThousandHundredThousandHundredThousandHundredThousandHundredThousandHundreds\
    \ = 0;\n        long oneHundredThousandHundredThousandHundredThousandH", "   \
    \     long ones = 0;\n        long zeros = 0;\n        long max = 0;\n       \
    \ foreach (long i in arr) {\n            if (i == 1) ones++;\n            else\
    \ if (i == 0) zeros++;\n            else {\n                max = Math.Max(max,\
    \ Math.Max(ones, zeros));\n                ones = 0;\n                zeros =\
    \ 0;\n            }\n        }\n        max = Math.Max(max, Math.Max(ones, zeros));\n\
    \        List<long> result = new List<long>();\n        long one = 0;\n      \
    \  long zero = 0;\n        long maxOne = 0;\n        long maxZero = 0;\n     \
    \   foreach (long i in arr) {\n            if (i == 1) one++;\n            else\
    \ if (i == 0) zero++;\n            else {\n                maxOne = Math.Max(maxOne,\
    \ one);\n                maxZero = Math.Max(maxZero, zero);\n                one\
    \ = 0;\n                zero = 0;\n            }\n        }\n        maxOne =\
    \ Math.Max(maxOne, one);\n        maxZero = Math.Max(maxZero, zero);\n       \
    \ long ones = 0;\n        long zeros = 0;\n        long maxOnes = 0;\n       \
    \ long maxZeros = 0;\n        foreach (long i in arr) {\n            if (i ==\
    \ 1) ones++;\n            else if (i == 0) zeros++;\n            else {\n    \
    \            maxOnes = Math.Max(maxOnes, ones);\n                maxZeros = Math.Max(maxZeros,\
    \ zeros);\n                ones = 0;\n                zeros = 0;\n           \
    \ }\n        }\n        maxOnes = Math.Max(maxOnes, ones);\n        maxZeros =\
    \ Math.Max(maxZeros, zeros);\n        long one = 0;\n        long zero = 0;\n\
    \        long maxOne = 0;\n        long maxZero = 0;\n        foreach (long i\
    \ in arr) {\n            if (i == 1) one++;\n            else if (i == 0) zero++;\n\
    \            else {\n                maxOne = Math.Max(maxOne, one);\n       \
    \         maxZero = Math.Max(maxZero, zero);\n                one = 0;\n     \
    \           zero = 0;\n            }\n        }\n        maxOne = Math.Max(maxOne,\
    \ one);\n        maxZero = Math.Max(maxZero, zero);\n        long ones = 0;\n\
    \        long zeros = 0;\n        long maxOnes = 0;\n        long maxZeros = 0;\n\
    \        foreach (long i in arr) {\n            if (i == 1) ones++;\n        \
    \    else if (i == 0) zeros++;\n            else {\n                maxOnes =\
    \ Math.Max(maxOnes, ones);\n                maxZeros = Math.Max(maxZeros, zeros);\n\
    \                ones = 0;\n                zeros = 0;\n            }\n      \
    \  }\n        maxOnes = Math.Max(maxOnes, ones);\n        maxZeros = Math.Max(maxZeros,\
    \ zeros);\n        long one = 0;\n        ", "        long ones = 0;\n       \
    \ long zeros = 0;\n        long max = 0;\n        foreach (long i in arr) {\n\
    \            if (i == 1) {\n                ones++;\n            }\n         \
    \   if (i == 0) {\n                zeros++;\n            }\n            if (i\
    \ > max) {\n                max = i;\n            }\n        }\n        long onesMax\
    \ = ones * max;\n        long zerosMax = zeros * max;\n        long onesMin =\
    \ ones * max;\n        long zerosMin = zeros * max;\n        long onesMaxMin =\
    \ onesMax * max;\n        long zerosMaxMin = zerosMax * max;\n        long onesMinMin\
    \ = onesMin * max;\n        long zerosMinMin = zerosMin * max;\n        long onesMaxMinMin\
    \ = onesMaxMin * max;\n        long zerosMaxMinMin = zerosMaxMin * max;\n    \
    \    long onesMinMinMin = onesMinMin * max;\n        long zerosMinMinMin = zerosMinMin\
    \ * max;\n        long onesMaxMinMinMin = onesMaxMinMin * max;\n        long zerosMaxMinMinMin\
    \ = zerosMaxMinMin * max;\n        long onesMinMinMinMin = onesMinMinMin * max;\n\
    \        long zerosMinMinMinMin = zerosMinMinMin * max;\n        long onesMaxMinMinMin\
    \ = onesMaxMinMinMin * max;\n        long zerosMaxMinMinMin = zerosMaxMinMinMin\
    \ * max;\n        long onesMinMinMinMin = onesMinMinMinMin * max;\n        long\
    \ zerosMinMinMinMin = zerosMinMinMinMin * max;\n        long onesMaxMinMinMin\
    \ = onesMaxMinMinMin * max;\n        long zerosMaxMinMinMin = zerosMaxMinMinMin\
    \ * max;\n        long onesMinMinMinMin = onesMinMinMinMin * max;\n        long\
    \ zerosMinMinMinMin = zerosMinMinMinMin * max;\n        long onesMaxMinMinMin\
    \ = onesMaxMinMinMin * max;\n        long zerosMaxMinMinMin = zerosMaxMinMinMin\
    \ * max;\n        long onesMinMinMinMin = onesMinMinMinMin * max;\n        long\
    \ zerosMinMinMinMin = zerosMinMinMinMin * max;\n        long onesMaxMinMinMin\
    \ = onesMaxMinMinMin * max;", "        long ones = 0;\n        long zeros = 0;\n\
    \        long max = 0;\n        foreach (long i in arr) {\n            if (i ==\
    \ 1) {\n                ones++;\n            } else {\n                zeros++;\n\
    \            }\n            if (ones > zeros) {\n                max = i;\n  \
    \          }\n        }\n        List<long> result = new List<long>();\n     \
    \   long temp = 0;\n        foreach (long i in arr) {\n            if (i == 1)\
    \ {\n                result.Add(i);\n            } else {\n                temp\
    \ = i;\n                while (temp != 0) {\n                    if (temp % 2\
    \ == 1) {\n                        result.Add(temp);\n                       \
    \ break;\n                    }\n                    temp /= 2;\n            \
    \    }\n            }\n        }\n        long temp2 = 0;\n        foreach (long\
    \ i in result) {\n            temp2 = i;\n            while (temp2 != 0) {\n \
    \               if (temp2 % 2 == 1) {\n                    result.Insert(0, temp2);\n\
    \                    break;\n                }\n                temp2 /= 2;\n\
    \            }\n        }\n        long temp3 = 0;\n        foreach (long i in\
    \ result) {\n            temp3 = i;\n            while (temp3 != 0) {\n      \
    \          if (temp3 % 2 == 0) {\n                    result.Insert(0, temp3);\n\
    \                    break;\n                }\n                temp3 /= 2;\n\
    \            }\n        }\n        long temp4 = 0;\n        foreach (long i in\
    \ result) {\n            temp4 = i;\n            while (temp4 != 0) {\n      \
    \          if (temp4 % 2 == 0) {\n                    result.Insert(0, temp4);\n\
    \                    break;\n                }\n                temp4 /= 2;\n\
    \            }\n        }\n        long temp5 = 0;\n        foreach (long i in\
    \ result) {\n            temp5 = i;\n            while (temp5 != 0) {\n      \
    \          if (temp5 % 2 == 0) {\n                    result.Insert(0, temp5);\n\
    \                    break;\n                }\n                temp5 /= 2;\n\
    \            }\n        }\n        long temp6 = 0;\n        foreach (long i in\
    \ result) {\n            temp6 = i;\n            while (temp6 != 0) {\n      \
    \          if (temp6 % 2 == 0) {\n                    result.Insert(0, temp6);\n\
    \                    break;\n                }\n                temp6 /= 2;\n\
    \            }\n        }\n        long temp7 = 0;\n        foreach (long i in\
    \ result) {\n            temp7 = i;\n            while (temp7 != 0) {\n      \
    \          if (temp7 % 2 == 0) {\n                    result.Insert(0, temp7);\n\
    \                    break;\n                }\n                temp7 /= 2;\n\
    \            }\n        }\n        long temp8 = 0;\n        foreach (long i in\
    \ result) {\n            temp8 = i;\n            while (temp8 != 0) {\n      \
    \          if (temp8 % 2 == 0) {\n                    result.Insert(0, temp8);\n\
    \                    break;\n                }\n                temp8 /= 2;\n\
    \            }\n        }\n        long temp9 = 0;\n        foreach (long i in\
    \ result) {\n            temp9 = i;\n            while (temp9 != 0) {\n      \
    \          if (temp9 % 2 == ", "        long ones = 0;\n        long zeros = 0;\n\
    \        long max = 0;\n        foreach (long i in arr) {\n            if (i ==\
    \ 1) {\n                ones++;\n            }\n            if (i == 0) {\n  \
    \              zeros++;\n            }\n            if (i > max) {\n         \
    \       max = i;\n            }\n        }\n        long onesMax = ones * max;\n\
    \        long zerosMax = zeros * max;\n        long onesMax2 = onesMax * onesMax;\n\
    \        long zerosMax2 = zerosMax * zerosMax;\n        long onesMax3 = onesMax2\
    \ * onesMax;\n        long zerosMax3 = zerosMax2 * zerosMax;\n        long onesMax4\
    \ = onesMax3 * onesMax;\n        long zerosMax4 = zerosMax3 * zerosMax;\n    \
    \    long onesMax5 = onesMax4 * onesMax;\n        long zerosMax5 = zerosMax4 *\
    \ zerosMax;\n        long onesMax6 = onesMax5 * onesMax;\n        long zerosMax6\
    \ = zerosMax5 * zerosMax;\n        long onesMax7 = onesMax6 * onesMax;\n     \
    \   long zerosMax7 = zerosMax6 * zerosMax;\n        long onesMax8 = onesMax7 *\
    \ onesMax;\n        long zerosMax8 = zerosMax7 * zerosMax;\n        long onesMax9\
    \ = onesMax8 * onesMax;\n        long zerosMax9 = zerosMax8 * zerosMax;\n    \
    \    long onesMax10 = onesMax9 * onesMax;\n        long zerosMax10 = zerosMax9\
    \ * zerosMax;\n        long onesMax11 = onesMax10 * onesMax;\n        long zerosMax11\
    \ = zerosMax10 * zerosMax;\n        long onesMax12 = onesMax11 * onesMax;\n  \
    \      long zerosMax12 = zerosMax11 * zerosMax;\n        long onesMax13 = onesMax12\
    \ * onesMax;\n        long zerosMax13 = zerosMax12 * zerosMax;\n        long onesMax14\
    \ = onesMax13 * onesMax;\n        long zerosMax14 = zerosMax13 * zerosMax;\n \
    \       long onesMax15 = onesMax14 * onesMax;\n        long zerosMax15 = zerosMax14\
    \ * zerosMax;\n        long onesMax16 = onesMax15 * onesMax;\n        long zerosMax16\
    \ = zerosMax15 * zerosMax;\n        long onesMax17", "        long ones = 0;\n\
    \        long zeros = 0;\n        long max = 0;\n        foreach (long i in arr)\
    \ {\n            if (i == 1) {\n                ones++;\n            } else {\n\
    \                zeros++;\n            }\n            if (ones > zeros) {\n  \
    \              max = i;\n            }\n        }\n        List<long> result =\
    \ new List<long>();\n        foreach (long i in arr) {\n            if (i == 1)\
    \ {\n                result.Add(i);\n            } else if (i == 0) {\n      \
    \          result.Add(0);\n            } else if (i == max) {\n              \
    \  result.Add(max);\n            } else {\n                result.Add(i);\n  \
    \          }\n        }\n        return result;", "        // Your code goes here\n\
    \        long ones = 0;\n        long zeros = 0;\n        long decimal = 0;\n\
    \        long max = 0;\n        foreach (long i in arr) {\n            if (i ==\
    \ 1)\n                ones++;\n            else\n                zeros++;\n  \
    \          if (ones > zeros) {\n                decimal += i;\n              \
    \  if (decimal > max)\n                    max = decimal;\n            }\n   \
    \     }\n        List<long> result = new List<long>();\n        foreach (long\
    \ i in arr) {\n            if (i == 1)\n                result.Add(i);\n     \
    \       else\n                result.Add(zeros + i);\n        }\n        Array.Sort(result);\n\
    \        return result;", "        long ones = 0;\n        long zeros = 0;\n \
    \       long max = 0;\n        foreach (long i in arr) {\n            if (i ==\
    \ 1) {\n                ones++;\n            }\n            if (i == 0) {\n  \
    \              zeros++;\n            }\n            if (i > max) {\n         \
    \       max = i;\n            }\n        }\n        List<long> result = new List<long>();\n\
    \        if (ones > zeros) {\n            result.Add(max);\n            result.AddRange(arr.Where(i\
    \ => i == max).OrderBy(i => i).Take(ones));\n        }\n        if (zeros > ones)\
    \ {\n            result.AddRange(arr.Where(i => i == max).OrderBy(i => i).Take(zeros));\n\
    \        }\n        return result;", "        long ones = 0;\n        long zeros\
    \ = 0;\n        long max = 0;\n        foreach (long n in arr) {\n           \
    \ if (n == 1) ones++;\n            else if (n == 0) zeros++;\n            max\
    \ = Math.Max(max, Math.Max(ones, zeros));\n        }\n        List<long> result\
    \ = new List<long>();\n        long onesCount = 0;\n        long zerosCount =\
    \ 0;\n        long maxCount = 0;\n        foreach (long n in arr) {\n        \
    \    if (n == 1) onesCount++;\n            else if (n == 0) zerosCount++;\n  \
    \          else if (n == max) maxCount++;\n            else if (n == maxCount)\
    \ result.Add(n);\n        }\n        return result;", "        long ones = arr.Sum(x\
    \ => x & 1L);\n        long zeros = arr.Sum(x => x >> 1);\n        if (ones ==\
    \ zeros) {\n            return arr.OrderBy(x => x).ToList();\n        }\n    \
    \    long maxOnes = arr.Max(x => x & 1L);\n        long maxZeros = arr.Max(x =>\
    \ x >> 1);\n        if (maxOnes == maxZeros) {\n            return arr.OrderBy(x\
    \ => x).ToList();\n        }\n        long maxOnesMaxZeros = arr.Max(x => x &\
    \ 1L) + arr.Max(x => x >> 1);\n        if (maxOnesMaxZeros == ones + zeros) {\n\
    \            return arr.OrderBy(x => x).ToList();\n        }\n        long maxOnesMaxZerosMinOnes\
    \ = arr.Max(x => x & 1L) + arr.Max(x => x >> 1) + arr.Min(x => x & 1L);\n    \
    \    if (maxOnesMaxZerosMinOnes == ones + zeros + maxOnes) {\n            return\
    \ arr.OrderBy(x => x).ToList();\n        }\n        long maxOnesMaxZerosMinOnesMaxZeros\
    \ = arr.Max(x => x & 1L) + arr.Max(x => x >> 1) + arr.Min(x => x & 1L) + arr.Max(x\
    \ => x >> 1);\n        if (maxOnesMaxZerosMinOnesMaxZeros == ones + zeros + maxOnes\
    \ + maxZeros) {\n            return arr.OrderBy(x => x).ToList();\n        }\n\
    \        throw new Exception(\"No solution\");", "        List<long> result =\
    \ new List<long>();\n        long ones = 0;\n        long zeros = 0;\n       \
    \ long max = 0;\n        foreach (long i in arr) {\n            if (i == 1) {\n\
    \                ones++;\n            }\n            else if (i == 0) {\n    \
    \            zeros++;\n            }\n            else {\n                if (ones\
    \ > zeros) {\n                    result.Add(i);\n                }\n        \
    \        else {\n                    result.Add(zeros);\n                }\n \
    \           }\n            if (ones > max) {\n                max = ones;\n  \
    \          }\n            if (zeros > max) {\n                max = zeros;\n \
    \           }\n        }\n        if (ones > zeros) {\n            result.Add(max);\n\
    \        }\n        else {\n            result.Add(zeros);\n        }\n      \
    \  return result.OrderBy(i => i).ToList();", "        long ones = 0;\n       \
    \ long zeros = 0;\n        long max = 0;\n        foreach (long i in arr) {\n\
    \            if (i == 1) {\n                ones++;\n            }\n         \
    \   if (i == 0) {\n                zeros++;\n            }\n            if (i\
    \ > max) {\n                max = i;\n            }\n        }\n        long onesMax\
    \ = ones * max;\n        long zerosMax = zeros * max;\n        long onesMin =\
    \ ones * max;\n        long zerosMin = zeros * max;\n        long onesMaxMin =\
    \ onesMax * max;\n        long zerosMaxMin = zerosMax * max;\n        long onesMinMin\
    \ = onesMin * max;\n        long zerosMinMin = zerosMin * max;\n        long onesMaxMinMin\
    \ = onesMaxMin * max;\n        long zerosMaxMinMin = zerosMaxMin * max;\n    \
    \    long onesMinMinMin = onesMinMin * max;\n        long zerosMinMinMin = zerosMinMin\
    \ * max;\n        long onesMaxMinMinMin = onesMaxMinMin * max;\n        long zerosMaxMinMinMin\
    \ = zerosMaxMinMin * max;\n        long onesMinMinMinMin = onesMinMinMin * max;\n\
    \        long zerosMinMinMinMin = zerosMinMinMin * max;\n        long onesMaxMinMinMin\
    \ = onesMaxMinMinMin * max;\n        long zerosMaxMinMinMin = zerosMaxMinMinMin\
    \ * max;\n        long onesMinMinMinMin = onesMinMinMinMin * max;\n        long\
    \ zerosMinMinMinMin = zerosMinMinMinMin * max;\n        long onesMaxMinMinMin\
    \ = onesMaxMinMinMin * max;\n        long zerosMaxMinMinMin = zerosMaxMinMinMin\
    \ * max;\n        long onesMinMinMinMin = onesMinMinMinMin * max;\n        long\
    \ zerosMinMinMinMin = zerosMinMinMinMin * max;\n        long onesMaxMinMinMin\
    \ = onesMaxMinMinMin * max;\n        long zerosMaxMinMinMin = zerosMaxMinMinMin\
    \ * max;\n        long onesMinMinMinMin = onesMinMinMinMin * max;\n        long\
    \ zerosMinMinMinMin = zerosMinMinMinMin * max;\n        long onesMaxMinMinMin\
    \ = onesMaxMinMinMin * max;", "        // Your code here\n        long ones =\
    \ 0;\n        long zeros = 0;\n        long total = 0;\n        foreach (long\
    \ i in arr) {\n            if (i == 1) {\n                ones++;\n          \
    \  }\n            else if (i == 0) {\n                zeros++;\n            }\n\
    \            else {\n                total += i;\n            }\n        }\n \
    \       long onesDecimal = ones / total;\n        long zerosDecimal = zeros /\
    \ total;\n        long onesDecimalDecimal = onesDecimal / total;\n        long\
    \ zerosDecimalDecimal = zerosDecimal / total;\n        long onesDecimalDecimalDecimal\
    \ = onesDecimalDecimal / total;\n        long zerosDecimalDecimalDecimal = zerosDecimalDecimal\
    \ / total;\n        long onesDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimal\
    \ / total;\n        long zerosDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimal\
    \ / total;\n        long onesDecimalDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimal\
    \ / total;\n        long zerosDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimal\
    \ / total;\n        long onesDecimalDecimalDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimalDecimalDecimal\
    \ / total;\n        long zerosDecimalDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimal\
    \ / total;\n        long onesDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimal / total;\n        long\
    \ zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / total;\n        long onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal / total;\n\
    \        long zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal =\
    \ zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal / total;\n\
    \        long onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / total;\n        long zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / total;\n        long onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / total;\n        long zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = zeros", "        // TODO: implement this method\n        throw new NotImplementedException();",
  "        // Your code here\n        long ones = 0;\n        long zeros = 0;\n  \
    \      long total = 0;\n        foreach (long i in arr) {\n            if (i ==\
    \ 1)\n                ones++;\n            else\n                zeros++;\n  \
    \          total += i;\n        }\n        long onesDecimal = ones / total;\n\
    \        long zerosDecimal = zeros / total;\n        List<long> result = new List<long>();\n\
    \        foreach (long i in arr) {\n            if (i == 1)\n                result.Add(i);\n\
    \            else\n                result.Add(zerosDecimal * i);\n        }\n\
    \        foreach (long i in result)\n            Console.WriteLine(i);\n     \
    \   return result;", '        // Your code here', "        // TODO: Implement\
    \ this function\n        return null;", "        long ones = 0;\n        long\
    \ zeros = 0;\n        long max = 0;\n        foreach (long i in arr) {\n     \
    \       if (i == 1) {\n                ones++;\n            }\n            if\
    \ (i == 0) {\n                zeros++;\n            }\n            if (i > max)\
    \ {\n                max = i;\n            }\n        }\n        long onesMax\
    \ = ones;\n        long zerosMax = zeros;\n        long maxOnes = 0;\n       \
    \ long maxZeros = 0;\n        long maxOnesMax = 0;\n        long maxZerosMax =\
    \ 0;\n        long maxOnesMaxZeros = 0;\n        long maxZerosMaxOnes = 0;\n \
    \       long maxOnesMaxZerosMax = 0;\n        long maxZerosMaxOnesMax = 0;\n \
    \       long maxOnesMaxZerosMaxZeros = 0;\n        long maxZerosMaxOnesMaxZerosMax\
    \ = 0;\n        long maxOnesMaxZerosMaxZerosMax = 0;\n        long maxZerosMaxOnesMaxZerosMaxZeros\
    \ = 0;\n        long maxOnesMaxZerosMaxZerosMaxZerosMax = 0;\n        long maxZerosMaxOnesMaxZerosMaxZerosMax\
    \ = 0;\n        long maxOnesMaxZerosMaxZerosMaxZerosMax = 0;\n        long maxZerosMaxOnesMaxZerosMaxZerosMaxZeros\
    \ = 0;\n        long maxOnesMaxZerosMaxZerosMaxZerosMaxZerosMax = 0;\n       \
    \ long maxZerosMaxOnesMaxZerosMaxZerosMaxZerosMax = 0;\n        long maxOnesMaxZerosMaxZerosMaxZerosMaxZerosMax\
    \ = 0;\n        long maxZerosMaxOnesMaxZerosMaxZerosMaxZerosMaxZeros = 0;\n  \
    \      long maxOnesMaxZerosMaxZerosMaxZerosMaxZerosMaxZerosMax = 0;\n        long\
    \ maxZerosMaxOnesMaxZerosMaxZerosMaxZerosMaxZerosMax = 0;\n        long maxOnesMaxZerosMaxZerosMaxZerosMaxZerosMaxZerosMax\
    \ = 0;\n        long maxZerosMaxOnesMaxZerosMaxZerosMaxZerosMaxZerosMaxZeros =\
    \ 0;\n        long maxOnesMaxZerosMaxZerosMax", "        long ones = 0;\n    \
    \    long zeros = 0;\n        long max = 0;\n        foreach (long i in arr) {\n\
    \            if (i == 1) {\n                ones++;\n            }\n         \
    \   else if (i == 0) {\n                zeros++;\n            }\n            else\
    \ {\n                if (ones > zeros) {\n                    max = i;\n     \
    \           }\n                else {\n                    max = zeros;\n    \
    \            }\n            }\n        }\n        List<long> result = new List<long>();\n\
    \        foreach (long i in arr) {\n            if (i == 1) {\n              \
    \  result.Add(i);\n            }\n            else if (i == 0) {\n           \
    \     result.Add(zeros);\n            }\n            else {\n                if\
    \ (ones > zeros) {\n                    result.Add(i);\n                }\n  \
    \              else {\n                    result.Add(zeros);\n              \
    \  }\n            }\n        }\n        return result;", "        long ones =\
    \ 0;\n        long zeros = 0;\n        long max = 0;\n        foreach (long i\
    \ in arr) {\n            if (i == 1) {\n                ones++;\n            }\n\
    \            else {\n                zeros++;\n            }\n            if (ones\
    \ > zeros) {\n                max = i;\n            }\n        }\n        List<long>\
    \ result = new List<long>();\n        long onesCount = 0;\n        long zerosCount\
    \ = 0;\n        long maxCount = 0;\n        foreach (long i in arr) {\n      \
    \      if (i == 1) {\n                onesCount++;\n            }\n          \
    \  else {\n                zerosCount++;\n            }\n            if (onesCount\
    \ > zerosCount) {\n                maxCount = i;\n            }\n        }\n \
    \       long onesCount2 = 0;\n        long zerosCount2 = 0;\n        long maxCount2\
    \ = 0;\n        foreach (long i in arr) {\n            if (i == 1) {\n       \
    \         onesCount2++;\n            }\n            else {\n                zerosCount2++;\n\
    \            }\n            if (onesCount2 > zerosCount2) {\n                maxCount2\
    \ = i;\n            }\n        }\n        long onesCount3 = 0;\n        long zerosCount3\
    \ = 0;\n        long maxCount3 = 0;\n        foreach (long i in arr) {\n     \
    \       if (i == 1) {\n                onesCount3++;\n            }\n        \
    \    else {\n                zerosCount3++;\n            }\n            if (onesCount3\
    \ > zerosCount3) {\n                maxCount3 = i;\n            }\n        }\n\
    \        long onesCount4 = 0;\n        long zerosCount4 = 0;\n        long maxCount4\
    \ = 0;\n        foreach (long i in arr) {\n            if (i == 1) {\n       \
    \         onesCount4++;\n            }\n            else {\n                zerosCount4++;\n\
    \            }\n            if (onesCount4 > zerosCount4) {\n                maxCount4\
    \ = i;\n            }\n        }\n        long onesCount5 = 0;\n        long zerosCount5\
    \ = 0;\n        long maxCount5 = 0;\n        foreach (long i in arr) {\n     \
    \       if (i == 1) {\n                onesCount5++;\n            }\n        \
    \    else {\n                zerosCount5++;\n            }\n            if (onesCount5\
    \ > zerosCount5) {\n                maxCount5 = i;\n            }\n        }\n\
    \        long onesCount6 = 0;\n        long zerosCount6 = 0;\n        long maxCount6\
    \ = 0;\n        foreach (long i in arr) {\n            if (i == 1) {\n       \
    \         onesCount6++;\n            }\n            else {\n                zerosCount6++;\n\
    \            }\n            if (onesCount6 > zerosCount6) {\n                maxCount6\
    \ = i;\n            }\n        }\n        long onesCount7 = 0;\n        long zerosCount7\
    \ = 0;\n        long maxCount7 = 0;\n        foreach (long i in arr) {\n     \
    \       if (i == ", "        List<long> result = new List<long>();\n        long\
    \ ones = 0;\n        long zeros = 0;\n        foreach (long i in arr) {\n    \
    \        if (i == 1) {\n                ones++;\n            } else {\n      \
    \          zeros++;\n            }\n        }\n        long onesDecimal = ones\
    \ / Math.Pow(2, arr.Count);\n        long zerosDecimal = zeros / Math.Pow(2, arr.Count);\n\
    \        long onesDecimalDecimal = onesDecimal / Math.Pow(10, arr.Count);\n  \
    \      long zerosDecimalDecimal = zerosDecimal / Math.Pow(10, arr.Count);\n  \
    \      long onesDecimalDecimalDecimal = onesDecimalDecimal / Math.Pow(100, arr.Count);\n\
    \        long zerosDecimalDecimalDecimal = zerosDecimalDecimal / Math.Pow(100,\
    \ arr.Count);\n        long onesDecimalDecimalDecimalDecimal = onesDecimalDecimalDecimal\
    \ / Math.Pow(1000, arr.Count);\n        long zerosDecimalDecimalDecimalDecimal\
    \ = zerosDecimalDecimalDecimal / Math.Pow(1000, arr.Count);\n        long onesDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimal / Math.Pow(10000, arr.Count);\n  \
    \      long zerosDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimal\
    \ / Math.Pow(10000, arr.Count);\n        long onesDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimal / Math.Pow(100000, arr.Count);\n\
    \        long zerosDecimalDecimalDecimalDecimalDecimalDecimal = zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / Math.Pow(100000, arr.Count);\n        long onesDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal / Math.Pow(1000000,\
    \ arr.Count);\n        long zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal / Math.Pow(1000000,\
    \ arr.Count);\n        long onesDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal / Math.Pow(10000000,\
    \ arr.Count);\n        long zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = zerosDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal / Math.Pow(10000000,\
    \ arr.Count);\n        long onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ = onesDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimalDecimal\
    \ / Math.Pow(100000000, arr.Count);\n        ", "        long ones = arr.Sum(x\
    \ => x & 1);\n        long zeros = arr.Sum(x => ~x & 1);\n        long maxOnes\
    \ = arr.Max(x => x & 1);\n        long maxZeros = arr.Max(x => ~x & 1);\n    \
    \    long maxOnesZeros = maxOnes - maxZeros;\n        long maxOnesOnes = maxOnes\
    \ - ones;\n        long maxOnesOnesZeros = maxOnesOnes - maxZeros;\n        long\
    \ maxOnesOnesOnes = maxOnesOnes - ones;\n        long maxOnesOnesOnesZeros = maxOnesOnesOnes\
    \ - maxZeros;\n        long maxOnesOnesOnesOnes = maxOnesOnesOnes - ones;\n  \
    \      long maxOnesOnesOnesOnesZeros = maxOnesOnesOnesOnes - maxZeros;\n     \
    \   long maxOnesOnesOnesOnesOnes = maxOnesOnesOnesOnes - ones;\n        long maxOnesOnesOnesOnesZeros\
    \ = maxOnesOnesOnesOnesZeros - maxZeros;\n        long maxOnesOnesOnesOnesOnes\
    \ = maxOnesOnesOnesOnesOnes - ones;\n        long maxOnesOnesOnesOnesOnesZeros\
    \ = maxOnesOnesOnesOnesOnesZeros - maxZeros;\n        long maxOnesOnesOnesOnesOnesOnes\
    \ = maxOnesOnesOnesOnesOnesOnes - ones;\n        long maxOnesOnesOnesOnesOnesZeros\
    \ = maxOnesOnesOnesOnesOnesZeros - maxZeros;\n        long maxOnesOnesOnesOnesOnesOnes\
    \ = maxOnesOnesOnesOnesOnesOnes - ones;\n        long maxOnesOnesOnesOnesOnesZeros\
    \ = maxOnesOnesOnesOnesOnesZeros - maxZeros;\n        long maxOnesOnesOnesOnesOnesOnes\
    \ = maxOnesOnesOnesOnesOnesOnes - ones;\n        long maxOnesOnesOnesOnesOnesZeros\
    \ = maxOnesOnesOnesOnesOnesZeros - maxZeros;\n        long maxOnesOne", "    \
    \    // Your code goes here\n        long ones = 0;\n        long zeros = 0;\n\
    \        long max = 0;\n        long min = 0;\n        long sum = 0;\n       \
    \ long temp = 0;\n        long temp2 = 0;\n        long temp3 = 0;\n        long\
    \ temp4 = 0;\n        long temp5 = 0;\n        long temp6 = 0;\n        long temp7\
    \ = 0;\n        long temp8 = 0;\n        long temp9 = 0;\n        long temp10\
    \ = 0;\n        long temp11 = 0;\n        long temp12 = 0;\n        long temp13\
    \ = 0;\n        long temp14 = 0;\n        long temp15 = 0;\n        long temp16\
    \ = 0;\n        long temp17 = 0;\n        long temp18 = 0;\n        long temp19\
    \ = 0;\n        long temp20 = 0;\n        long temp21 = 0;\n        long temp22\
    \ = 0;\n        long temp23 = 0;\n        long temp24 = 0;\n        long temp25\
    \ = 0;\n        long temp26 = 0;\n        long temp27 = 0;\n        long temp28\
    \ = 0;\n        long temp29 = 0;\n        long temp30 = 0;\n        long temp31\
    \ = 0;\n        long temp32 = 0;\n        long temp33 = 0;\n        long temp34\
    \ = 0;\n        long temp35 = 0;\n        long temp36 = 0;\n        long temp37\
    \ = 0;\n        long temp38 = 0;\n        long temp39 = 0;\n        long temp40\
    \ = 0;\n        long temp41 = 0;\n        long temp42 = 0;\n        long temp43\
    \ = 0;\n        long temp44 = 0;\n        long temp45 = 0;\n        long temp46\
    \ = 0;\n        long temp47 = 0;\n        long temp48 = 0;\n        long temp49\
    \ = 0;\n        long temp50 = 0;\n        long temp51 = 0;\n        long temp52\
    \ = 0;\n        long temp53 = 0;\n        long temp54 = 0;\n        long temp55\
    \ = 0;\n        long temp56 = 0;\n        long temp57 = 0;\n        long temp58\
    \ = 0;\n        long temp59 = 0;\n        long temp60 = 0;\n        long temp61\
    \ = 0;\n        long temp62 = 0;\n        long temp63 = 0;\n        long temp64\
    \ = 0;\n        long temp65 = 0;\n        long temp66 = 0;\n        long temp67\
    \ = 0;\n        long temp68 = 0;\n        long temp69 = 0;\n        long temp70\
    \ = 0;\n        long temp71 = 0;\n        long temp72 = 0;\n        long temp73\
    \ = 0;\n        long temp74 = 0;\n        long temp75 = 0;\n        long temp76\
    \ = 0;\n        long temp77 = 0;\n        long temp78 = 0;\n        long temp79\
    \ = 0;\n        long temp80 = 0;\n        long temp81 = 0;\n", "        long ones\
    \ = 0;\n        long zeros = 0;\n        long max = 0;\n        foreach (long\
    \ i in arr) {\n            if (i == 1) {\n                ones++;\n          \
    \  } else {\n                zeros++;\n            }\n            if (ones > zeros)\
    \ {\n                max = i;\n            }\n        }\n        List<long> result\
    \ = new List<long>();\n        long onesCount = 0;\n        long zerosCount =\
    \ 0;\n        long maxCount = 0;\n        foreach (long i in arr) {\n        \
    \    if (i == 1) {\n                onesCount++;\n            } else {\n     \
    \           zerosCount++;\n            }\n            if (onesCount > zerosCount)\
    \ {\n                maxCount = i;\n            }\n        }\n        long onesCount2\
    \ = 0;\n        long zerosCount2 = 0;\n        long maxCount2 = 0;\n        foreach\
    \ (long i in arr) {\n            if (i == 1) {\n                onesCount2++;\n\
    \            } else {\n                zerosCount2++;\n            }\n       \
    \     if (onesCount2 > zerosCount2) {\n                maxCount2 = i;\n      \
    \      }\n        }\n        long onesCount3 = 0;\n        long zerosCount3 =\
    \ 0;\n        long maxCount3 = 0;\n        foreach (long i in arr) {\n       \
    \     if (i == 1) {\n                onesCount3++;\n            } else {\n   \
    \             zerosCount3++;\n            }\n            if (onesCount3 > zerosCount3)\
    \ {\n                maxCount3 = i;\n            }\n        }\n        long onesCount4\
    \ = 0;\n        long zerosCount4 = 0;\n        long maxCount4 = 0;\n        foreach\
    \ (long i in arr) {\n            if (i == 1) {\n                onesCount4++;\n\
    \            } else {\n                zerosCount4++;\n            }\n       \
    \     if (onesCount4 > zerosCount4) {\n                maxCount4 = i;\n      \
    \      }\n        }\n        long onesCount5 = 0;\n        long zerosCount5 =\
    \ 0;\n        long maxCount5 = 0;\n        foreach (long i in arr) {\n       \
    \     if (i == 1) {\n                onesCount5++;\n            } else {\n   \
    \             zerosCount5++;\n            }\n            if (onesCount5 > zerosCount5)\
    \ {\n                maxCount5 = i;\n            }\n        }\n        long onesCount6\
    \ = 0;\n        long zerosCount6 = 0;\n        long maxCount6 = 0;\n        foreach\
    \ (long i in arr) {\n            if (i == 1) {\n                onesCount6++;\n\
    \            } else {\n                zerosCount6++;\n            }\n       \
    \     if (onesCount6 > zerosCount6) {\n                maxCount6 = i;\n      \
    \      }\n        }\n        long onesCount7 = 0;\n        long zerosCount7 =\
    \ 0;\n        long maxCount7 = 0;\n        foreach (long i in arr) {\n       \
    \     if (i == 1) {\n                onesCount7++;\n            } else {\n   \
    \             zerosCount", "        long ones = 0;\n        long zeros = 0;\n\
    \        long max = 0;\n        foreach (long n in arr) {\n            if (n ==\
    \ 1) ones++;\n            else if (n == 0) zeros++;\n            else {\n    \
    \            if (ones > zeros) {\n                    max = ones;\n          \
    \      }\n                else {\n                    max = zeros;\n         \
    \       }\n            }\n        }\n        List<long> result = new List<long>();\n\
    \        foreach (long n in arr) {\n            if (n == 1) result.Add(n);\n \
    \           else if (n == 0) result.Add(0);\n            else {\n            \
    \    if (ones > zeros) {\n                    result.Add(max);\n             \
    \   }\n                else {\n                    result.Add(-max);\n       \
    \         }\n            }\n        }\n        return result;", "        List<long>\
    \ result = new List<long>();\n        long ones = 0;\n        long tens = 0;\n\
    \        long hundreds = 0;\n        long thousands = 0;\n        long millions\
    \ = 0;\n        long billions = 0;\n        long trillions = 0;\n        long\
    \ quadrillions = 0;\n        long quintillions = 0;\n        long sextillions\
    \ = 0;\n        long septillions = 0;\n        long octillions = 0;\n        long\
    \ nonillions = 0;\n        long decillions = 0;\n        long undecillions = 0;\n\
    \        long duodecillions = 0;\n        long tredecillions = 0;\n        long\
    \ quattuordecillions = 0;\n        long quindecillions = 0;\n        long sexdecillions\
    \ = 0;\n        long septendecillions = 0;\n        long octodecillions = 0;\n\
    \        long novemdecillions = 0;\n        long vigintillions = 0;\n        long\
    \ unvigintillions = 0;\n        long duovigintillions = 0;\n        long trevigintillions\
    \ = 0;\n        long quattuorvigintillions = 0;\n        long quinvigintillions\
    \ = 0;\n        long sexvigintillions = 0;\n        long septenvigintillions =\
    \ 0;\n        long octovigintillions = 0;\n        long novemvigintillions = 0;\n\
    \        long quadrillion = 0;\n        long quintillion = 0;\n        long sextillion\
    \ = 0;\n        long septillion = 0;\n        long octillion = 0;\n        long\
    \ nonillion = 0;\n        long decillion = 0;\n        long undecillion = 0;\n\
    \        long duodecillion = 0;\n        long tredecillion = 0;\n        long\
    \ quattuordecillion = 0;\n        long quindecillion = 0;\n        long sexdecillion\
    \ = 0;\n        long septendecillion = 0;\n        long octodecillion = 0;\n \
    \       long novemdecillion = 0;\n        long vigintillion = 0;\n        long\
    \ unvigintillion = 0;\n        long duovigintillion = 0;\n        long trevigintillion\
    \ = 0;\n        long quattuorvigintillion = 0;\n        long quinvigintillion\
    \ = 0;\n        long sexvigintillion = 0;\n        long septenvigintillion", " \
    \       long ones = 0;\n        long zeros = 0;\n        long maxOnes = 0;\n \
    \       long maxZeros = 0;\n        long maxOnesCount = 0;\n        long maxZerosCount\
    \ = 0;\n        long maxOnesCount2 = 0;\n        long maxZerosCount2 = 0;\n  \
    \      long maxOnesCount3 = 0;\n        long maxZerosCount3 = 0;\n        long\
    \ maxOnesCount4 = 0;\n        long maxZerosCount4 = 0;\n        long maxOnesCount5\
    \ = 0;\n        long maxZerosCount5 = 0;\n        long maxOnesCount6 = 0;\n  \
    \      long maxZerosCount6 = 0;\n        long maxOnesCount7 = 0;\n        long\
    \ maxZerosCount7 = 0;\n        long maxOnesCount8 = 0;\n        long maxZerosCount8\
    \ = 0;\n        long maxOnesCount9 = 0;\n        long maxZerosCount9 = 0;\n  \
    \      long maxOnesCount10 = 0;\n        long maxZerosCount10 = 0;\n        long\
    \ maxOnesCount11 = 0;\n        long maxZerosCount11 = 0;\n        long maxOnesCount12\
    \ = 0;\n        long maxZerosCount12 = 0;\n        long maxOnesCount13 = 0;\n\
    \        long maxZerosCount13 = 0;\n        long maxOnesCount14 = 0;\n       \
    \ long maxZerosCount14 = 0;\n        long maxOnesCount15 = 0;\n        long maxZerosCount15\
    \ = 0;\n        long maxOnesCount16 = 0;\n        long maxZerosCount16 = 0;\n\
    \        long maxOnesCount17 = 0;\n        long maxZerosCount17 = 0;\n       \
    \ long maxOnesCount18 = 0;\n        long maxZerosCount18 = 0;\n        long maxOnesCount19\
    \ = 0;\n        long maxZerosCount19 = 0;\n        long maxOnesCount20 = 0;\n\
    \        long maxZerosCount20 = 0;\n        long maxOnesCount21 = 0;\n       \
    \ long maxZerosCount21 = 0;\n        long maxOnesCount22 = 0;\n        long maxZerosCount22\
    \ = 0;\n        long maxOnesCount23 = 0;\n        long maxZerosCount23 = 0;\n\
    \        long maxOnesCount24 = 0;\n        long maxZerosCount24 = 0;\n       \
    \ long maxOnesCount25 = 0;\n        long maxZerosCount25 = 0;\n        long maxOnesCount26\
    \ = 0;\n        long maxZerosCount26 = 0;\n        long maxOnesCount", "     \
    \   // TODO: Implement this function\n        throw new NotImplementedException();",
  "        // Your code goes here\n        long ones = 0;\n        long zeros = 0;\n\
    \        long max = 0;\n        foreach (var i in arr) {\n            if (i ==\
    \ 1) {\n                ones++;\n            }\n            if (i == 0) {\n  \
    \              zeros++;\n            }\n            if (i > max) {\n         \
    \       max = i;\n            }\n        }\n        long onesMax = ones;\n   \
    \     long zerosMax = zeros;\n        long maxMax = max;\n        long onesMin\
    \ = ones;\n        long zerosMin = zeros;\n        long maxMin = max;\n      \
    \  long onesMaxMin = onesMax;\n        long zerosMaxMin = zerosMax;\n        long\
    \ maxMaxMin = maxMax;\n        long onesMinMin = onesMin;\n        long zerosMinMin\
    \ = zerosMin;\n        long maxMinMin = maxMin;\n        long onesMaxMinMin =\
    \ onesMaxMin;\n        long zerosMaxMinMin = zerosMaxMin;\n        long maxMaxMinMin\
    \ = maxMaxMin;\n        long onesMinMinMin = onesMinMin;\n        long zerosMinMinMin\
    \ = zerosMinMin;\n        long maxMinMinMin = maxMinMinMin;\n        long onesMaxMinMinMin\
    \ = onesMaxMinMin;\n        long zerosMaxMinMinMin = zerosMaxMinMin;\n       \
    \ long maxMaxMinMinMin = maxMaxMinMinMin;\n        long onesMinMinMinMin = onesMinMinMin;\n\
    \        long zerosMinMinMinMin = zerosMinMinMin;\n        long maxMinMinMinMin\
    \ = maxMinMinMinMin;\n        long onesMaxMinMinMin = onesMaxMinMin;\n       \
    \ long zerosMaxMinMinMin = zerosMaxMinMin;\n        long maxMaxMinMinMin = maxMaxMinMinMin;\n\
    \        long onesMinMinMinMin = onesMinMinMin;\n        long zerosMinMinMinMin\
    \ = zerosMinMinMin;\n        long maxMinMinMinMin = maxMinMinMinMin;\n       \
    \ long onesMaxMinMinMin = onesMaxMinMin;\n        long zerosMaxMinMinMin = zerosMaxMinMin;\n\
    \        long maxMaxMinMinMin = maxMaxMinMinMin;\n        long onesMinMinMinMin\
    \ = onesMinMinMin;\n        long zerosMinMinMinMin = zerosMinMinMin;\n       \
    \ long maxMin", "        List<long> result = new List<long>();\n        long ones\
    \ = 0;\n        long zeros = 0;\n        foreach (long i in arr) {\n         \
    \   if (i == 1) {\n                ones++;\n            }\n            else if\
    \ (i == 0) {\n                zeros++;\n            }\n            else {\n  \
    \              long temp = ones + zeros;\n                if (temp > result.Count)\
    \ {\n                    result.Add(temp);\n                }\n              \
    \  result.Add(i);\n                ones = 0;\n                zeros = 0;\n   \
    \         }\n        }\n        return result;", "        long ones = 0;\n   \
    \     long zeros = 0;\n        long max = 0;\n        foreach (long i in arr)\
    \ {\n            if (i == 1) {\n                ones++;\n            }\n     \
    \       if (i == 0) {\n                zeros++;\n            }\n            if\
    \ (i > max) {\n                max = i;\n            }\n        }\n        long\
    \ onesMax = ones * max;\n        long zerosMax = zeros * max;\n        long onesMax2\
    \ = onesMax * onesMax;\n        long zerosMax2 = zerosMax * zerosMax;\n      \
    \  long onesMax3 = onesMax2 * onesMax;\n        long zerosMax3 = zerosMax2 * zerosMax;\n\
    \        long onesMax4 = onesMax3 * onesMax;\n        long zerosMax4 = zerosMax3\
    \ * zerosMax;\n        long onesMax5 = onesMax4 * onesMax;\n        long zerosMax5\
    \ = zerosMax4 * zerosMax;\n        long onesMax6 = onesMax5 * onesMax;\n     \
    \   long zerosMax6 = zerosMax5 * zerosMax;\n        long onesMax7 = onesMax6 *\
    \ onesMax;\n        long zerosMax7 = zerosMax6 * zerosMax;\n        long onesMax8\
    \ = onesMax7 * onesMax;\n        long zerosMax8 = zerosMax7 * zerosMax;\n    \
    \    long onesMax9 = onesMax8 * onesMax;\n        long zerosMax9 = zerosMax8 *\
    \ zerosMax;\n        long onesMax10 = onesMax9 * onesMax;\n        long zerosMax10\
    \ = zerosMax9 * zerosMax;\n        long onesMax11 = onesMax10 * onesMax;\n   \
    \     long zerosMax11 = zerosMax10 * zerosMax;\n        long onesMax12 = onesMax11\
    \ * onesMax;\n        long zerosMax12 = zerosMax11 * zerosMax;\n        long onesMax13\
    \ = onesMax12 * onesMax;\n        long zerosMax13 = zerosMax12 * zerosMax;\n \
    \       long onesMax14 = onesMax13 * onesMax;\n        long zerosMax14 = zerosMax13\
    \ * zerosMax;\n        long onesMax15 = onesMax14 * onesMax;\n        long zerosMax15\
    \ = zerosMax14 * zerosMax;\n        long onesMax16 = onesMax15 * onesMax;\n  \
    \      long zerosMax16 = zerosMax15 * zerosMax;\n        long onesMax17", "  \
    \      List<long> result = new List<long>();\n        long ones = 0;\n       \
    \ long zeros = 0;\n        long max = 0;\n        foreach (long i in arr) {\n\
    \            if (i == 1) {\n                ones++;\n            }\n         \
    \   if (i == 0) {\n                zeros++;\n            }\n            if (ones\
    \ > zeros) {\n                result.Add(i);\n                max = i;\n     \
    \       }\n        }\n        if (ones > zeros) {\n            long temp = 0;\n\
    \            foreach (long i in arr) {\n                if (i == 1) {\n      \
    \              temp++;\n                }\n                if (temp > max) {\n\
    \                    max = temp;\n                }\n            }\n         \
    \   result.Add(max);\n        }\n        return result;", "        long ones =\
    \ 0;\n        long zeros = 0;\n        long max = 0;\n        long min = 0;\n\
    \        foreach (long i in arr) {\n            if (i == 1) {\n              \
    \  ones++;\n            }\n            if (i == 0) {\n                zeros++;\n\
    \            }\n            if (i > max) {\n                max = i;\n       \
    \     }\n            if (i < min) {\n                min = i;\n            }\n\
    \        }\n        List<long> result = new List<long>();\n        long onesCount\
    \ = 0;\n        long zerosCount = 0;\n        long maxCount = 0;\n        long\
    \ minCount = 0;\n        foreach (long i in arr) {\n            if (i == 1) {\n\
    \                onesCount++;\n            }\n            if (i == 0) {\n    \
    \            zerosCount++;\n            }\n            if (i > maxCount) {\n \
    \               maxCount = i;\n            }\n            if (i < minCount) {\n\
    \                minCount = i;\n            }\n        }\n        long onesCount2\
    \ = onesCount * ones;\n        long zerosCount2 = zerosCount * zeros;\n      \
    \  long maxCount2 = maxCount * max;\n        long minCount2 = minCount * min;\n\
    \        long onesCount3 = onesCount2 * ones;\n        long zerosCount3 = zerosCount2\
    \ * zeros;\n        long maxCount3 = maxCount2 * max;\n        long minCount3\
    \ = minCount2 * min;\n        long onesCount4 = onesCount3 * ones;\n        long\
    \ zerosCount4 = zerosCount3 * zeros;\n        long maxCount4 = maxCount3 * max;\n\
    \        long minCount4 = minCount3 * min;\n        long onesCount5 = onesCount4\
    \ * ones;\n        long zerosCount5 = zerosCount4 * zeros;\n        long maxCount5\
    \ = maxCount4 * max;\n        long minCount5 = minCount4 * min;\n        long\
    \ onesCount6 = onesCount5 * ones;\n        long zerosCount6 = zerosCount5 * zeros;\n\
    \        long maxCount6 = maxCount5 * max;\n        long minCount6 = minCount5\
    \ * min;\n        long onesCount7 = onesCount6 * ones;\n        long zerosCount7\
    \ = zerosCount6 * zeros;\n        long maxCount7 = maxCount6 * max;\n        long\
    \ minCount7 = minCount6 * min;\n        long onesCount8 = onesCount7 * ones;\n\
    \        long zerosCount8 = zerosCount7 * zeros;\n        long maxCount8 = maxCount7\
    \ * max;\n        long minCount8 = minCount7 * min;\n        long onesCount9 =\
    \ onesCount8 * ones;\n        long zerosCount9 = zerosCount8 * ", "        List<long>\
    \ result = new List<long>();\n        long ones = 0;\n        long zeros = 0;\n\
    \        long max = 0;\n        long min = 0;\n        foreach (long i in arr)\
    \ {\n            ones += i;\n            zeros -= i;\n            if (ones > max)\
    \ {\n                max = ones;\n            }\n            if (zeros > min)\
    \ {\n                min = zeros;\n            }\n        }\n        long onesCount\
    \ = 0;\n        long zerosCount = 0;\n        long maxCount = 0;\n        long\
    \ minCount = 0;\n        foreach (long i in arr) {\n            onesCount += i;\n\
    \            zerosCount -= i;\n            if (onesCount > maxCount) {\n     \
    \           maxCount = onesCount;\n            }\n            if (zerosCount >\
    \ minCount) {\n                minCount = zerosCount;\n            }\n       \
    \ }\n        long onesCount2 = 0;\n        long zerosCount2 = 0;\n        long\
    \ maxCount2 = 0;\n        long minCount2 = 0;\n        foreach (long i in arr)\
    \ {\n            onesCount2 += i;\n            zerosCount2 -= i;\n           \
    \ if (onesCount2 > maxCount2) {\n                maxCount2 = onesCount2;\n   \
    \         }\n            if (zerosCount2 > minCount2) {\n                minCount2\
    \ = zerosCount2;\n            }\n        }\n        long onesCount3 = 0;\n   \
    \     long zerosCount3 = 0;\n        long maxCount3 = 0;\n        long minCount3\
    \ = 0;\n        foreach (long i in arr) {\n            onesCount3 += i;\n    \
    \        zerosCount3 -= i;\n            if (onesCount3 > maxCount3) {\n      \
    \          maxCount3 = onesCount3;\n            }\n            if (zerosCount3\
    \ > minCount3) {\n                minCount3 = zerosCount3;\n            }\n  \
    \      }\n        long onesCount4 = 0;\n        long zerosCount4 = 0;\n      \
    \  long maxCount4 = 0;\n        long minCount4 = 0;\n        foreach (long i in\
    \ arr) {\n            onesCount4 += i;\n            zerosCount4 -= i;\n      \
    \      if (onesCount4 > maxCount4) {\n                maxCount4 = onesCount4;\n\
    \            }\n            if (zerosCount4 > minCount4) {\n                minCount4\
    \ = zerosCount4;\n            }\n        }\n        long onesCount5 = 0;\n   \
    \     long zerosCount5 = 0;\n        long maxCount5 = 0;\n        long minCount5\
    \ = 0;\n        foreach (long i in arr) {\n            onesCount5 += i;\n    \
    \        zerosCount5 -= i;\n            if (onesCount5 > maxCount5) {\n      \
    \          maxCount5 = onesCount5;\n            }\n            if (zerosCount5\
    \ > minCount5) {\n                minCount5 = zeros", "        long ones = 0;\n\
    \        long zeros = 0;\n        long maxOnes = 0;\n        long maxZeros = 0;\n\
    \        long max = 0;\n        foreach (long i in arr) {\n            if (i ==\
    \ 1) {\n                ones++;\n                if (ones > maxOnes) maxOnes =\
    \ ones;\n            } else {\n                zeros++;\n                if (zeros\
    \ > maxZeros) maxZeros = zeros;\n            }\n        }\n        max = Math.Max(maxOnes,\
    \ maxZeros);\n        List<long> result = new List<long>();\n        foreach (long\
    \ i in arr) {\n            if (i == 1) {\n                result.Add(i);\n   \
    \         } else {\n                result.Add(zeros + ones / max);\n        \
    \    }\n        }\n        return result;", "        long ones = 0;\n        long\
    \ zeros = 0;\n        long max = 0;\n        foreach (long n in arr) {\n     \
    \       if (n == 1) ones++;\n            else if (n == 0) zeros++;\n         \
    \   max = Math.Max(max, Math.Max(ones, zeros));\n        }\n        List<long>\
    \ result = new List<long>();\n        long onesMax = ones;\n        long zerosMax\
    \ = zeros;\n        long maxMax = max;\n        long onesMin = ones;\n       \
    \ long zerosMin = zeros;\n        long maxMin = max;\n        long onesCur = ones;\n\
    \        long zerosCur = zeros;\n        long maxCur = max;\n        long onesNext\
    \ = ones;\n        long zerosNext = zeros;\n        long maxNext = max;\n    \
    \    long onesPrev = ones;\n        long zerosPrev = zeros;\n        long maxPrev\
    \ = max;\n        long onesCurNext = ones;\n        long zerosCurNext = zeros;\n\
    \        long maxCurNext = max;\n        long onesCurPrev = ones;\n        long\
    \ zerosCurPrev = zeros;\n        long maxCurPrev = max;\n        long onesCurNextPrev\
    \ = ones;\n        long zerosCurNextPrev = zeros;\n        long maxCurNextPrev\
    \ = max;\n        long onesCurPrevPrev = ones;\n        long zerosCurPrevPrev\
    \ = zeros;\n        long maxCurPrevPrev = max;\n        long onesCurNextPrevPrev\
    \ = ones;\n        long zerosCurNextPrevPrev = zeros;\n        long maxCurNextPrevPrev\
    \ = max;\n        long onesCurPrevNextPrev = ones;\n        long zerosCurPrevNextPrev\
    \ = zeros;\n        long maxCurPrevNextPrev = max;\n        long onesCurNextPrevPrev\
    \ = ones;\n        long zerosCurNextPrevPrev = zeros;\n        long maxCurNextPrevPrev\
    \ = max;\n        long onesCurPrevPrevPrev = ones;\n        long zerosCurPrevPrevPrev\
    \ = zeros;\n        long maxCurPrevPrevPrev = max;\n        long onesCurNextPrevPrev\
    \ = ones;\n        long zerosCurNextPrevPrev = zeros;\n        long maxCurNextPrevPrev\
    \ = max;\n        long onesCurPrevNextPrev = ones;\n        long zerosCurNextPrevPrev\
    \ = zeros;\n        long maxCurNextPrevPrev = max;\n        long one", "     \
    \   long ones = 0;\n        long zeros = 0;\n        long max = 0;\n        foreach\
    \ (long i in arr) {\n            ones += i;\n            zeros += (long)Math.Pow(2,\
    \ (int)Math.Log10(i));\n            if (max < ones) {\n                max = ones;\n\
    \            }\n            if (max < zeros) {\n                max = zeros;\n\
    \            }\n        }\n        long onesCount = 0;\n        long zerosCount\
    \ = 0;\n        long maxCount = 0;\n        foreach (long i in arr) {\n      \
    \      onesCount += i;\n            zerosCount += (long)Math.Pow(2, (int)Math.Log10(i));\n\
    \            if (maxCount < onesCount) {\n                maxCount = onesCount;\n\
    \            }\n            if (maxCount < zerosCount) {\n                maxCount\
    \ = zerosCount;\n            }\n        }\n        long onesCount2 = 0;\n    \
    \    long zerosCount2 = 0;\n        long maxCount2 = 0;\n        foreach (long\
    \ i in arr) {\n            onesCount2 += i;\n            zerosCount2 += (long)Math.Pow(2,\
    \ (int)Math.Log10(i));\n            if (maxCount2 < onesCount2) {\n          \
    \      maxCount2 = onesCount2;\n            }\n            if (maxCount2 < zerosCount2)\
    \ {\n                maxCount2 = zerosCount2;\n            }\n        }\n    \
    \    long onesCount3 = 0;\n        long zerosCount3 = 0;\n        long maxCount3\
    \ = 0;\n        foreach (long i in arr) {\n            onesCount3 += i;\n    \
    \        zerosCount3 += (long)Math.Pow(2, (int)Math.Log10(i));\n            if\
    \ (maxCount3 < onesCount3) {\n                maxCount3 = onesCount3;\n      \
    \      }\n            if (maxCount3 < zerosCount3) {\n                maxCount3\
    \ = zerosCount3;\n            }\n        }\n        long onesCount4 = 0;\n   \
    \     long zerosCount4 = 0;\n        long maxCount4 = 0;\n        foreach (long\
    \ i in arr) {\n            onesCount4 += i;\n            zerosCount4 += (long)Math.Pow(2,\
    \ (int)Math.Log10(i));\n            if (maxCount4 < onesCount4) {\n          \
    \      maxCount4 = onesCount4;\n            }\n            if (maxCount4 < zerosCount4)\
    \ {\n                maxCount4 = zerosCount4;\n            }\n        }\n    \
    \    long onesCount5 = 0;\n        long zerosCount5 = 0;\n        long maxCount5\
    \ = 0;\n        foreach (long i in arr) {\n            onesCount5 += i;\n    \
    \        zerosCount5 += (long)Math.Pow(2, (int)Math.Log10(i));\n            if\
    \ (maxCount5 < onesCount5) {\n                maxCount5 = onesCount5;\n      \
    \      }\n            if (maxCount5 < zerosCount5) {\n", "        long ones =\
    \ 0;\n        long zeros = 0;\n        long max = 0;\n        foreach (long i\
    \ in arr) {\n            if (i == 1) {\n                ones++;\n            }\
    \ else {\n                zeros++;\n            }\n            if (ones > zeros)\
    \ {\n                max = i;\n            }\n        }\n        List<long> result\
    \ = new List<long>();\n        foreach (long i in arr) {\n            if (i ==\
    \ 1) {\n                result.Add(i);\n            } else if (i == 0) {\n   \
    \             result.Add(max);\n            } else {\n                result.Add(i\
    \ - 1);\n            }\n        }\n        return result;", "        long ones\
    \ = 0;\n        long zeros = 0;\n        long max = 0;\n        long min = 0;\n\
    \        foreach (long i in arr) {\n            ones += i;\n            zeros\
    \ -= i;\n            max = Math.Max(max, i);\n            min = Math.Min(min,\
    \ i);\n        }\n        long onesCount = 0;\n        long zerosCount = 0;\n\
    \        long maxCount = 0;\n        long minCount = 0;\n        foreach (long\
    \ i in arr) {\n            if (i == 1) {\n                onesCount++;\n     \
    \       } else {\n                zerosCount++;\n            }\n            if\
    \ (i == 0) {\n                zerosCount++;\n            }\n            if (i\
    \ == max) {\n                maxCount++;\n            }\n            if (i ==\
    \ min) {\n                minCount++;\n            }\n        }\n        long\
    \ onesCount2 = onesCount * onesCount;\n        long zerosCount2 = zerosCount *\
    \ zerosCount;\n        long maxCount2 = maxCount * maxCount;\n        long minCount2\
    \ = minCount * minCount;\n        long onesCount3 = onesCount2 * onesCount;\n\
    \        long zerosCount3 = zerosCount2 * zerosCount;\n        long maxCount3\
    \ = maxCount2 * maxCount;\n        long minCount3 = minCount2 * minCount;\n  \
    \      long onesCount4 = onesCount3 * onesCount;\n        long zerosCount4 = zerosCount3\
    \ * zerosCount;\n        long maxCount4 = maxCount3 * maxCount;\n        long\
    \ minCount4 = minCount3 * minCount;\n        long onesCount5 = onesCount4 * onesCount;\n\
    \        long zerosCount5 = zerosCount4 * zerosCount;\n        long maxCount5\
    \ = maxCount4 * maxCount;\n        long minCount5 = minCount4 * minCount;\n  \
    \      long onesCount6 = onesCount5 * onesCount;\n        long zerosCount6 = zerosCount5\
    \ * zerosCount;\n        long maxCount6 = maxCount5 * maxCount;\n        long\
    \ minCount6 = minCount5 * minCount;\n        long onesCount7 = onesCount6 * onesCount;\n\
    \        long zerosCount7 = zerosCount6 * zerosCount;\n        long maxCount7\
    \ = maxCount6 * maxCount;\n        long minCount7 = minCount6 * minCount;\n  \
    \      long onesCount8 = onesCount7 * onesCount;\n        long zerosCount8 = zerosCount7\
    \ * zerosCount;\n        long maxCount8 = maxCount7 * maxCount;\n        long\
    \ minCount8 = minCount7 * minCount;\n        long onesCount9 = one", "       \
    \ // TODO: Implement me\n        return null;", "        // Your code here\n \
    \       long ones = 0;\n        long zeros = 0;\n        long max = 0;\n     \
    \   long min = 0;\n        long sum = 0;\n        long sum2 = 0;\n        long\
    \ sum3 = 0;\n        long sum4 = 0;\n        long sum5 = 0;\n        long sum6\
    \ = 0;\n        long sum7 = 0;\n        long sum8 = 0;\n        long sum9 = 0;\n\
    \        long sum10 = 0;\n        long sum11 = 0;\n        long sum12 = 0;\n \
    \       long sum13 = 0;\n        long sum14 = 0;\n        long sum15 = 0;\n  \
    \      long sum16 = 0;\n        long sum17 = 0;\n        long sum18 = 0;\n   \
    \     long sum19 = 0;\n        long sum20 = 0;\n        long sum21 = 0;\n    \
    \    long sum22 = 0;\n        long sum23 = 0;\n        long sum24 = 0;\n     \
    \   long sum25 = 0;\n        long sum26 = 0;\n        long sum27 = 0;\n      \
    \  long sum28 = 0;\n        long sum29 = 0;\n        long sum30 = 0;\n       \
    \ long sum31 = 0;\n        long sum32 = 0;\n        long sum33 = 0;\n        long\
    \ sum34 = 0;\n        long sum35 = 0;\n        long sum36 = 0;\n        long sum37\
    \ = 0;\n        long sum38 = 0;\n        long sum39 = 0;\n        long sum40 =\
    \ 0;\n        long sum41 = 0;\n        long sum42 = 0;\n        long sum43 = 0;\n\
    \        long sum44 = 0;\n        long sum45 = 0;\n        long sum46 = 0;\n \
    \       long sum47 = 0;\n        long sum48 = 0;\n        long sum49 = 0;\n  \
    \      long sum50 = 0;\n        long sum51 = 0;\n        long sum52 = 0;\n   \
    \     long sum53 = 0;\n        long sum54 = 0;\n        long sum55 = 0;\n    \
    \    long sum56 = 0;\n        long sum57 = 0;\n        long sum58 = 0;\n     \
    \   long sum59 = 0;\n        long sum60 = 0;\n        long sum61 = 0;\n      \
    \  long sum62 = 0;\n        long sum63 = 0;\n        long sum64 = 0;\n       \
    \ long sum65 = 0;\n        long sum66 = 0;\n        long sum67 = 0;\n        long\
    \ sum68 = 0;\n        long sum69 = 0;\n        long sum70 = 0;\n        long sum71\
    \ = 0;\n        long sum72 = 0;\n        long sum73 = 0;\n        long sum74 =\
    \ 0;\n        long sum75 = 0;\n        long sum76 = 0;\n        long sum77 = 0;\n\
    \        long sum78 = 0;\n        long sum79 = 0;\n        long sum80 = 0;\n \
    \       long sum81 = 0;\n        long sum82 = 0;\n", "        // Your code here\n\
    \        long ones = 0;\n        long zeros = 0;\n        long max = 0;\n    \
    \    long min = 0;\n        long sum = 0;\n        long temp = 0;\n        foreach\
    \ (long i in arr) {\n            if (i == 1) {\n                ones++;\n    \
    \        }\n            if (i == 0) {\n                zeros++;\n            }\n\
    \            if (i > max) {\n                max = i;\n            }\n       \
    \     if (i < min) {\n                min = i;\n            }\n            sum\
    \ += i;\n        }\n        temp = sum / ones;\n        List<long> result = new\
    \ List<long>();\n        foreach (long i in arr) {\n            if (i == 1) {\n\
    \                result.Add(i);\n            }\n            if (i == 0) {\n  \
    \              result.Add(0);\n            }\n            if (i == max) {\n  \
    \              result.Add(max);\n            }\n            if (i == min) {\n\
    \                result.Add(min);\n            }\n            if (i == temp) {\n\
    \                result.Add(temp);\n            }\n        }\n        return result;",
  "        long ones = 0;\n        long zeros = 0;\n        long max = 0;\n      \
    \  long min = 0;\n        foreach (long i in arr) {\n            if (i == 1) {\n\
    \                ones++;\n            } else {\n                zeros++;\n   \
    \         }\n            if (ones > zeros) {\n                max = i;\n     \
    \       } else if (zeros > ones) {\n                min = i;\n            }\n\
    \        }\n        List<long> result = new List<long>();\n        long temp =\
    \ 0;\n        long temp2 = 0;\n        long temp3 = 0;\n        long temp4 = 0;\n\
    \        long temp5 = 0;\n        long temp6 = 0;\n        long temp7 = 0;\n \
    \       long temp8 = 0;\n        long temp9 = 0;\n        long temp10 = 0;\n \
    \       long temp11 = 0;\n        long temp12 = 0;\n        long temp13 = 0;\n\
    \        long temp14 = 0;\n        long temp15 = 0;\n        long temp16 = 0;\n\
    \        long temp17 = 0;\n        long temp18 = 0;\n        long temp19 = 0;\n\
    \        long temp20 = 0;\n        long temp21 = 0;\n        long temp22 = 0;\n\
    \        long temp23 = 0;\n        long temp24 = 0;\n        long temp25 = 0;\n\
    \        long temp26 = 0;\n        long temp27 = 0;\n        long temp28 = 0;\n\
    \        long temp29 = 0;\n        long temp30 = 0;\n        long temp31 = 0;\n\
    \        long temp32 = 0;\n        long temp33 = 0;\n        long temp34 = 0;\n\
    \        long temp35 = 0;\n        long temp36 = 0;\n        long temp37 = 0;\n\
    \        long temp38 = 0;\n        long temp39 = 0;\n        long temp40 = 0;\n\
    \        long temp41 = 0;\n        long temp42 = 0;\n        long temp43 = 0;\n\
    \        long temp44 = 0;\n        long temp45 = 0;\n        long temp46 = 0;\n\
    \        long temp47 = 0;\n        long temp48 = 0;\n        long temp49 = 0;\n\
    \        long temp50 = 0;\n        long temp51 = 0;\n        long temp52 = 0;\n\
    \        long temp53 = 0;\n        long temp54 = 0;\n        long temp55 = 0;\n\
    \        long temp56 = 0;\n        long temp57 = 0;\n        long temp58 = 0;\n\
    \        long temp59 = 0;\n        long temp60 = 0;\n        long temp61 = 0;\n\
    \        long temp62 = 0;\n        long temp63 = 0;\n        long temp64 = 0;\n\
    \        long temp65 = 0;\n        long temp66 = 0;\n        long temp67 = 0;\n\
    \        long temp68 = 0;\n        long temp69 = 0;\n        long temp70 = 0;\n\
    \        long temp71 = 0;\n        long temp72 = 0;\n        long temp73 = 0;\n\
    \        ", "        long ones = 0;\n        long zeros = 0;\n        long max\
    \ = 0;\n        long min = 0;\n        foreach (long i in arr) {\n           \
    \ if (i == 1) ones++;\n            else if (i == 0) zeros++;\n            else\
    \ if (i > max) max = i;\n            else if (i < min) min = i;\n        }\n \
    \       long onesMax = ones * Math.Pow(2, Math.Log10(max));\n        long zerosMax\
    \ = zeros * Math.Pow(2, Math.Log10(max));\n        long onesMin = ones * Math.Pow(2,\
    \ Math.Log10(min));\n        long zerosMin = zeros * Math.Pow(2, Math.Log10(min));\n\
    \        long onesDiff = onesMax - onesMin;\n        long zerosDiff = zerosMax\
    \ - zerosMin;\n        long onesDiff2 = onesMax * onesMax;\n        long zerosDiff2\
    \ = zerosMax * zerosMax;\n        long onesDiff3 = onesMax * onesMax * onesMax;\n\
    \        long zerosDiff3 = zerosMax * zerosMax * zerosMax;\n        long onesDiff4\
    \ = onesMax * onesMax * onesMax * onesMax;\n        long zerosDiff4 = zerosMax\
    \ * zerosMax * zerosMax * zerosMax;\n        long onesDiff5 = onesMax * onesMax\
    \ * onesMax * onesMax * onesMax;\n        long zerosDiff5 = zerosMax * zerosMax\
    \ * zerosMax * zerosMax * zerosMax;\n        long onesDiff6 = onesMax * onesMax\
    \ * onesMax * onesMax * onesMax * onesMax;\n        long zerosDiff6 = zerosMax\
    \ * zerosMax * zerosMax * zerosMax * zerosMax * zerosMax;\n        long onesDiff7\
    \ = onesMax * onesMax * onesMax * onesMax * onesMax * onesMax * onesMax;\n   \
    \     long zerosDiff7 = zerosMax * zerosMax * zerosMax * zerosMax * zerosMax *\
    \ zerosMax * zerosMax;\n        long onesDiff8 = onesMax * onesMax * onesMax *\
    \ onesMax * onesMax * onesMax * onesMax * onesMax * onesMax;\n        long zerosDiff8\
    \ = zerosMax * zerosMax * zerosMax * zerosMax * zerosMax * zerosMax * zerosMax\
    \ * zerosMax * zerosMax;\n        long onesDiff9 = onesMax * onesMax * one", " \
    \       // TODO: Implement this method.\n        return null;", "        long\
    \ ones = 0;\n        long zeros = 0;\n        long max = 0;\n        foreach (long\
    \ i in arr) {\n            ones += i;\n            zeros -= i;\n            if\
    \ (ones > max) {\n                max = ones;\n            }\n            if (zeros\
    \ > max) {\n                max = zeros;\n            }\n        }\n        List<long>\
    \ result = new List<long>();\n        foreach (long i in arr) {\n            if\
    \ (i == 1) {\n                result.Add(i);\n            }\n        }\n     \
    \   foreach (long i in arr) {\n            if (i == 0) {\n                result.Add(i);\n\
    \            }\n        }\n        foreach (long i in arr) {\n            if (i\
    \ == max) {\n                result.Add(i);\n            }\n        }\n      \
    \  return result;", "        long ones = 0;\n        long zeros = 0;\n       \
    \ long max = 0;\n        foreach (long i in arr) {\n            if (i == 1) {\n\
    \                ones++;\n            }\n            if (i == 0) {\n         \
    \       zeros++;\n            }\n            if (i > max) {\n                max\
    \ = i;\n            }\n        }\n        List<long> result = new List<long>();\n\
    \        if (ones > zeros) {\n            result.Add(max);\n            result.AddRange(arr.Where(i\
    \ => i == max).OrderBy(i => i).Take(ones));\n        }\n        if (zeros > ones)\
    \ {\n            result.AddRange(arr.Where(i => i == max).OrderBy(i => i).Take(zeros));\n\
    \        }\n        return result;", "        long ones = 0;\n        long zeros\
    \ = 0;\n        long maxOnes = 0;\n        long maxZeros = 0;\n        long maxOnesCount\
    \ = 0;\n        long maxZerosCount = 0;\n        long maxOnesCount2 = 0;\n   \
    \     long maxZerosCount2 = 0;\n        long maxOnesCount3 = 0;\n        long\
    \ maxZerosCount3 = 0;\n        long maxOnesCount4 = 0;\n        long maxZerosCount4\
    \ = 0;\n        long maxOnesCount5 = 0;\n        long maxZerosCount5 = 0;\n  \
    \      long maxOnesCount6 = 0;\n        long maxZerosCount6 = 0;\n        long\
    \ maxOnesCount7 = 0;\n        long maxZerosCount7 = 0;\n        long maxOnesCount8\
    \ = 0;\n        long maxZerosCount8 = 0;\n        long maxOnesCount9 = 0;\n  \
    \      long maxZerosCount9 = 0;\n        long maxOnesCount10 = 0;\n        long\
    \ maxZerosCount10 = 0;\n        long maxOnesCount11 = 0;\n        long maxZerosCount11\
    \ = 0;\n        long maxOnesCount12 = 0;\n        long maxZerosCount12 = 0;\n\
    \        long maxOnesCount13 = 0;\n        long maxZerosCount13 = 0;\n       \
    \ long maxOnesCount14 = 0;\n        long maxZerosCount14 = 0;\n        long maxOnesCount15\
    \ = 0;\n        long maxZerosCount15 = 0;\n        long maxOnesCount16 = 0;\n\
    \        long maxZerosCount16 = 0;\n        long maxOnesCount17 = 0;\n       \
    \ long maxZerosCount17 = 0;\n        long maxOnesCount18 = 0;\n        long maxZerosCount18\
    \ = 0;\n        long maxOnesCount19 = 0;\n        long maxZerosCount19 = 0;\n\
    \        long maxOnesCount20 = 0;\n        long maxZerosCount20 = 0;\n       \
    \ long maxOnesCount21 = 0;\n        long maxZerosCount21 = 0;\n        long maxOnesCount22\
    \ = 0;\n        long maxZerosCount22 = 0;\n        long maxOnesCount23 = 0;\n\
    \        long maxZerosCount23 = 0;\n        long maxOnesCount24 = 0;\n       \
    \ long maxZerosCount24 = 0;\n        long maxOnesCount25 = 0;\n        long maxZerosCount25\
    \ = 0;\n        long maxOnesCount26 = 0;\n        long maxZerosCount26 = 0;\n\
    \        long maxOnesCount", '        // Your code here', '        // Your code
    here', "        long ones = arr.Sum(x => x & 1L);\n        long zeros = arr.Sum(x\
    \ => x >> 1);\n        long maxOnes = arr.Max(x => x & 1L);\n        long maxZeros\
    \ = arr.Max(x => x >> 1);\n        long maxOnesDecimal = Convert.ToDecimal(maxOnes).ToString(\"\
    0.00000000\");\n        long maxZerosDecimal = Convert.ToDecimal(maxZeros).ToString(\"\
    0.00000000\");\n        long maxOnesDecimalDecimal = Convert.ToDecimal(maxOnesDecimal).ToString(\"\
    0.00000000\");\n        long maxZerosDecimalDecimal = Convert.ToDecimal(maxZerosDecimal).ToString(\"\
    0.00000000\");\n        List<long> result = new List<long>();\n        if (ones\
    \ == 0) {\n            foreach (long x in arr) {\n                result.Add(x);\n\
    \            }\n            return result;\n        }\n        if (ones == maxOnes)\
    \ {\n            foreach (long x in arr) {\n                result.Add(x);\n \
    \           }\n            return result;\n        }\n        if (zeros == maxZeros)\
    \ {\n            foreach (long x in arr) {\n                result.Add(x);\n \
    \           }\n            return result;\n        }\n        if (ones == maxOnesDecimal)\
    \ {\n            foreach (long x in arr) {\n                result.Add(x);\n \
    \           }\n            return result;\n        }\n        if (zeros == maxZerosDecimal)\
    \ {\n            foreach (long x in arr) {\n                result.Add(x);\n \
    \           }\n            return result;\n        }\n        if (ones == maxOnesDecimalDecimal)\
    \ {\n            foreach (long x in arr) {\n                result.Add(x);\n \
    \           }\n            return result;\n        }\n        if (zeros == maxZerosDecimalDecimal)\
    \ {\n            foreach (long x in arr) {\n                result.Add(x);\n \
    \           }\n            return result;\n        }\n        long maxOnesDecimalDecimalDecimal\
    \ = Convert.ToDecimal(maxOnesDecimalDecimal).ToString(\"0.00000000\");\n     \
    \   long maxZerosDecimalDecimalDecimal = Convert.ToDecimal(maxZerosDecimalDecimal).ToString(\"\
    0.00000000\");\n        long maxOnesDecimalDecimalDecimalDecimal = Convert.ToDecimal(maxOnesDecimalDecimalDecimal).ToString(\"\
    0.00000000\");\n        long maxZerosDecimalDecimalDecimalDecimal = Convert.ToDecimal(maxZerosDecimalDecimalDecimal).ToString(\"\
    0.00000000\");\n        long maxOnesDecimalDecimalDecimalDecimalDecimal = Convert.ToDecimal(maxOnesDecimalDecimalDecimalDecimal).ToString(\"\
    0.00000000\");\n        long maxZerosDecimalDecimalDecimalDecimal = Convert.ToDecimal(max",
  '        // Your code here', "        long ones = 0;\n        long zeros = 0;\n\
    \        long max = 0;\n        foreach (long i in arr) {\n            if (i ==\
    \ 1) {\n                ones++;\n            }\n            if (i == 0) {\n  \
    \              zeros++;\n            }\n            if (i > max) {\n         \
    \       max = i;\n            }\n        }\n        List<long> result = new List<long>();\n\
    \        if (ones > zeros) {\n            foreach (long i in arr) {\n        \
    \        if (i == 1) {\n                    result.Add(i);\n                }\n\
    \            }\n            foreach (long i in arr) {\n                if (i ==\
    \ 0) {\n                    result.Add(i);\n                }\n            }\n\
    \            foreach (long i in arr) {\n                if (i > max) {\n     \
    \               result.Add(i);\n                }\n            }\n           \
    \ return result;\n        }\n        if (ones < zeros) {\n            foreach\
    \ (long i in arr) {\n                if (i == 1) {\n                    result.Add(i);\n\
    \                }\n            }\n            foreach (long i in arr) {\n   \
    \             if (i == 0) {\n                    result.Add(i);\n            \
    \    }\n            }\n            foreach (long i in arr) {\n               \
    \ if (i < max) {\n                    result.Add(i);\n                }\n    \
    \        }\n            return result;\n        }\n        if (ones == zeros)\
    \ {\n            foreach (long i in arr) {\n                if (i == 1) {\n  \
    \                  result.Add(i);\n                }\n            }\n        \
    \    foreach (long i in arr) {\n                if (i == 0) {\n              \
    \      result.Add(i);\n                }\n            }\n            foreach (long\
    \ i in arr) {\n                if (i > max) {\n                    result.Add(i);\n\
    \                }\n            }\n            return result;\n        }\n   \
    \     if (ones > zeros) {\n            foreach (long i in arr) {\n           \
    \     if (i == 1) {\n                    result.Add(i);\n                }\n \
    \           }\n            foreach (long i in arr) {\n                if (i ==\
    \ 0) {\n                    result.Add(i);\n                }\n            }\n\
    \            foreach (long i in arr) {\n                if (i < max) {\n     \
    \               result.Add(i);\n                }\n            }\n           \
    \ return result;\n        }\n        if (ones < zeros) {\n            foreach\
    \ (long i in arr) {\n                if (i == 1) {\n                    result.Add(i);\n\
    \                }\n            }\n            foreach (long i in arr) {\n   \
    \             if (i == 0) {\n                    result.Add(i);\n            \
    \    }\n            }\n            foreach (long i in arr) {\n               \
    \ if (i > max) {\n                    result.Add(i);\n                }\n    \
    \        }\n            return result;\n        }\n        if (ones == zeros)\
    \ {\n            foreach (long i in arr) {\n                if (i == 1) {\n  \
    \                  result.Add(i);\n                }\n            }\n        \
    \    foreach (long i in arr) {\n                if (i == 0) {\n              \
    \      result.Add(i);\n                }\n            }\n            foreach (long\
    \ i in arr) {\n                if (i < max) {\n                    result.Add(i);\n\
    \                }\n            }\n            return result;\n        }\n   \
    \     if (ones > zeros) {\n            foreach (long i in arr) {\n           \
    \     if (", "        // TODO: implement this function\n        return null;",
  "        List<long> result = new List<long>();\n        long ones = 0;\n       \
    \ long zeros = 0;\n        long max = 0;\n        foreach (long i in arr) {\n\
    \            if (i == 1) {\n                ones++;\n            }\n         \
    \   else if (i == 0) {\n                zeros++;\n            }\n            else\
    \ {\n                max = Math.Max(max, i);\n            }\n        }\n     \
    \   if (ones > zeros) {\n            long temp = ones;\n            ones = zeros;\n\
    \            zeros = temp;\n        }\n        long onesMax = ones * max;\n  \
    \      long zerosMax = zeros * max;\n        long onesMin = ones * max;\n    \
    \    long zerosMin = zeros * max;\n        long onesMaxMin = onesMax * max;\n\
    \        long zerosMaxMin = zerosMax * max;\n        long onesMinMax = onesMin\
    \ * max;\n        long zerosMinMax = zerosMin * max;\n        long onesMaxMinMax\
    \ = onesMaxMin * max;\n        long zerosMaxMinMax = zerosMaxMin * max;\n    \
    \    long onesMinMaxMinMax = onesMinMax * max;\n        long zerosMinMaxMinMax\
    \ = zerosMinMax * max;\n        long onesMaxMinMaxMinMax = onesMaxMinMax * max;\n\
    \        long zerosMaxMinMaxMinMax = zerosMaxMinMax * max;\n        long onesMinMaxMinMaxMinMax\
    \ = onesMinMaxMinMax * max;\n        long zerosMaxMinMaxMinMax = zerosMaxMinMax\
    \ * max;\n        long onesMaxMinMaxMinMaxMinMax = onesMaxMinMaxMinMax * max;\n\
    \        long zerosMaxMinMaxMinMaxMinMax = zerosMaxMinMaxMinMax * max;\n     \
    \   long onesMaxMinMaxMinMaxMinMaxMinMax = onesMaxMinMaxMinMaxMinMax * max;\n\
    \        long zerosMaxMinMaxMinMaxMinMaxMinMax = zerosMaxMinMaxMinMaxMinMax *\
    \ max;\n        long onesMaxMinMaxMinMaxMinMaxMinMaxMinMax = onesMaxMinMaxMinMaxMinMaxMinMax\
    \ * max;\n        long zerosMaxMinMaxMinMaxMinMaxMinMaxMinMax = zerosMaxMinMaxMinMaxMinMax\
    \ * max;\n        long onesMaxMinMaxMinMaxMinMaxMinMaxMinMax = onesMaxMinMaxMinMaxMinMaxMinMax\
    \ * max;\n        long zeros", '        // Your code here', "        long ones\
    \ = arr.Sum(x => x & 1);\n        long zeros = arr.Sum(x => ~x & 1);\n       \
    \ long maxOnes = arr.Max(x => x & 1);\n        long maxZeros = arr.Max(x => ~x\
    \ & 1);\n        long maxOnesZeros = maxOnes - maxZeros;\n        long maxOnesOnes\
    \ = maxZeros - maxOnes;\n        long maxOnesOnesZeros = maxOnesOnes - maxOnesZeros;\n\
    \        long maxOnesOnesOnes = maxOnesOnesZeros - maxOnesOnes;\n        long\
    \ maxOnesOnesOnesZeros = maxOnesOnesOnes - maxOnesOnesZeros;\n        long maxOnesOnesOnesOnes\
    \ = maxOnesOnesOnesZeros - maxOnesOnesOnes;\n        long maxOnesOnesOnesOnesZeros\
    \ = maxOnesOnesOnesOnes - maxOnesOnesOnesZeros;\n        long maxOnesOnesOnesOnesOnes\
    \ = maxOnesOnesOnesOnesZeros - maxOnesOnesOnesOnes;\n        long maxOnesOnesOnesOnesOnesZeros\
    \ = maxOnesOnesOnesOnesOnes - maxOnesOnesOnesOnesZeros;\n        long maxOnesOnesOnesOnesOnesOnes\
    \ = maxOnesOnesOnesOnesOnesZeros - maxOnesOnesOnesOnesOnes;\n        long maxOnesOnesOnesOnesOnesZeros\
    \ = maxOnesOnesOnesOnesOnesOnes - maxOnesOnesOnesOnesOnesZeros;\n        long\
    \ maxOnesOnesOnesOnesOnesOnesZeros = maxOnesOnesOnesOnesOnesOnesOnes - maxOnesOnesOnesOnesOnesOnesZeros;\n\
    \        long maxOnesOnesOnesOnesOnesOnesOnes = maxOnesOnesOnesOnesOnesOnesOnesZeros\
    \ - maxOnesOnesOnesOnesOnesOnesOnes;\n        long maxOnesOnesOnesOnesOnesOnesZeros\
    \ = maxOnesOnesOnesOnesOnesOnesOnesOnes - ", "        List<long> result = new\
    \ List<long>();\n        long ones = 0;\n        long zeros = 0;\n        long\
    \ max = 0;\n        foreach (long i in arr) {\n            if (i == 1) {\n   \
    \             ones++;\n            }\n            else if (i == 0) {\n       \
    \         zeros++;\n            }\n            else {\n                if (ones\
    \ > zeros) {\n                    result.Add(i);\n                    ones--;\n\
    \                }\n                else if (zeros > ones) {\n               \
    \     result.Add(i);\n                    zeros--;\n                }\n      \
    \          else {\n                    result.Add(i);\n                }\n   \
    \         }\n            if (ones > max) {\n                max = ones;\n    \
    \        }\n            if (zeros > max) {\n                max = zeros;\n   \
    \         }\n        }\n        long onesMax = max;\n        long zerosMax = max;\n\
    \        long maxOnes = 0;\n        long maxZeros = 0;\n        foreach (long\
    \ i in arr) {\n            if (i == 1) {\n                maxOnes++;\n       \
    \     }\n            else if (i == 0) {\n                maxZeros++;\n       \
    \     }\n            else {\n                if (maxOnes > maxZeros) {\n     \
    \               result.Add(i);\n                    maxOnes--;\n             \
    \   }\n                else if (maxZeros > maxOnes) {\n                    result.Add(i);\n\
    \                    maxZeros--;\n                }\n                else {\n\
    \                    result.Add(i);\n                }\n            }\n      \
    \  }\n        long onesMax2 = maxOnes;\n        long zerosMax2 = maxZeros;\n \
    \       long maxOnesMax = 0;\n        long maxZerosMax = 0;\n        foreach (long\
    \ i in arr) {\n            if (i == 1) {\n                maxOnesMax++;\n    \
    \        }\n            else if (i == 0) {\n                maxZerosMax++;\n \
    \           }\n            else {\n                if (maxOnesMax < maxZerosMax)\
    \ {\n                    result.Add(i);\n                    maxOnesMax--;\n \
    \               }\n                else if (maxZerosMax < maxOnesMax) {\n    \
    \                result.Add(i);\n                    maxZerosMax--;\n        \
    \        }\n                else {\n                    result.Add(i);\n     \
    \           }\n            }\n        }\n        long onesMax3 = maxOnesMax;\n\
    \        long zerosMax3 = maxZerosMax;\n        long maxOnesMax2 = 0;\n      \
    \  long maxZerosMax2 = 0;\n        foreach (long i in arr) {\n            if (i\
    \ == 1) {\n                maxOnesMax2++;\n            }\n            else if\
    \ (i == 0) {\n                maxZerosMax2++;\n            }\n            else\
    \ {\n                if (maxOnesMax2 < maxZerosMax2) {\n                    result.Add(i);\n\
    \                    maxOnesMax2--;\n                }\n                else if\
    \ (maxZer", "        long ones = 0;\n        long zeros = 0;\n        long max\
    \ = 0;\n        long min = 0;\n        foreach (long i in arr) {\n           \
    \ if (i == 1) {\n                ones++;\n            }\n            else if (i\
    \ == 0) {\n                zeros++;\n            }\n            else {\n     \
    \           if (ones > zeros) {\n                    max = i;\n              \
    \  }\n                else {\n                    min = i;\n                }\n\
    \            }\n        }\n        List<long> result = new List<long>();\n   \
    \     long onesCount = 0;\n        long zerosCount = 0;\n        long maxCount\
    \ = 0;\n        long minCount = 0;\n        foreach (long i in arr) {\n      \
    \      if (i == 1) {\n                onesCount++;\n            }\n          \
    \  else if (i == 0) {\n                zerosCount++;\n            }\n        \
    \    else {\n                if (onesCount > zerosCount) {\n                 \
    \   maxCount = i;\n                }\n                else {\n               \
    \     minCount = i;\n                }\n            }\n        }\n        long\
    \ onesSum = 0;\n        long zerosSum = 0;\n        long maxSum = 0;\n       \
    \ long minSum = 0;\n        foreach (long i in arr) {\n            if (i == 1)\
    \ {\n                onesSum += i;\n            }\n            else if (i == 0)\
    \ {\n                zerosSum += i;\n            }\n            else {\n     \
    \           if (onesSum > zerosSum) {\n                    maxSum = i;\n     \
    \           }\n                else {\n                    minSum = i;\n     \
    \           }\n            }\n        }\n        long onesAvg = 0;\n        long\
    \ zerosAvg = 0;\n        long maxAvg = 0;\n        long minAvg = 0;\n        foreach\
    \ (long i in arr) {\n            if (i == 1) {\n                onesAvg += i;\n\
    \            }\n            else if (i == 0) {\n                zerosAvg += i;\n\
    \            }\n            else {\n                if (onesAvg > zerosAvg) {\n\
    \                    maxAvg = i;\n                }\n                else {\n\
    \                    minAvg = i;\n                }\n            }\n        }\n\
    \        long onesMax = 0;\n        long zerosMax = 0;\n        long maxMax =\
    \ 0;\n        long minMax = 0;\n        foreach (long i in arr) {\n          \
    \  if (i == 1) {\n                onesMax += i;\n            }\n            else\
    \ if (i == 0) {\n                zerosMax += i;\n            }\n            else\
    \ {\n                if (onesMax < zerosMax) {\n                    maxMax = i;\n\
    \                }\n                else {\n                    minMax = i;\n\
    \                }\n            }\n        }\n        long onesMin = 0;\n    \
    \    long zerosMin = 0;\n        long maxMin = 0;\n        long minMin = 0;\n\
    \        foreach (long i in arr) {\n            if (i == 1) {\n              \
    \  onesMin += i;\n            }\n            else if (i == 0) {\n            \
    \    zerosMin += i;\n            }\n            else {\n", "        long ones\
    \ = arr.Sum(x => x & 1);\n        long zeros = arr.Sum(x => x & 2);\n        long\
    \ maxOnes = arr.Max(x => x & 1);\n        long maxZeros = arr.Max(x => x & 2);\n\
    \        long maxOnesZeros = arr.Max(x => x & 3);\n        long maxOnesOnes =\
    \ arr.Max(x => x & 4);\n        long maxOnesTwos = arr.Max(x => x & 5);\n    \
    \    long maxOnesThrees = arr.Max(x => x & 6);\n        long maxOnesFours = arr.Max(x\
    \ => x & 7);\n        long maxOnesFives = arr.Max(x => x & 8);\n        long maxOnesSixes\
    \ = arr.Max(x => x & 9);\n        long maxOnesSevens = arr.Max(x => x & 10);\n\
    \        long maxOnesEights = arr.Max(x => x & 11);\n        long maxOnesNines\
    \ = arr.Max(x => x & 12);\n        long maxOnesTens = arr.Max(x => x & 13);\n\
    \        long maxOnesElevens = arr.Max(x => x & 14);\n        long maxOnesTwelves\
    \ = arr.Max(x => x & 15);\n        long maxOnesThirteens = arr.Max(x => x & 16);\n\
    \        long maxOnesFourteens = arr.Max(x => x & 17);\n        long maxOnesFifteens\
    \ = arr.Max(x => x & 18);\n        long maxOnesSixteens = arr.Max(x => x & 19);\n\
    \        long maxOnesSeventeens = arr.Max(x => x & 20);\n        long maxOnesEighteens\
    \ = arr.Max(x => x & 21);\n        long maxOnesNineteens = arr.Max(x => x & 22);\n\
    \        long maxOnesTwenty = arr.Max(x => x & 23);\n        long maxOnesTwentyOnes\
    \ = arr.Max(x => x & 24);\n        long maxOnesTwentyTwos = arr.Max(x => x & 25);\n\
    \        long maxOnesTwentyThrees = arr.Max(x => x & 26);\n        long maxOnesTwentyFours\
    \ = arr.Max(x => x & 27);\n        long maxOnesTwentyFives = arr.Max(x => "]
stop_tokens:
- "\n    }\n"
