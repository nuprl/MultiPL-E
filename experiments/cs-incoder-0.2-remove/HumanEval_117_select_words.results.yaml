language: cs
name: HumanEval_117_select_words
results:
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    public static List<string> SelectWords(string
    s, long n) {\n        List<string> result = new List<string>();\n        string
    word = \"\";\n        foreach (char c in s) {\n            if (char.IsLetter(c))
    {\n                word += c;\n            }\n        }\n        if (word.Length
    == n) {\n            result.Add(word);\n        }\n        return result;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n
    \   Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple
    white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello
    world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n
    \   Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new
    List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new
    List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"f\"}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <12eb5f66c92b48699035e7d4b06e30e1>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <12eb5f66c92b48699035e7d4b06e30e1>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977322
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    public static List<string> SelectWords(string
    s, long n) {\n        // TODO: Implement this function\n        return null;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n
    \   Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple
    white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello
    world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n
    \   Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new
    List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new
    List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"f\"}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x00020] in <d974f32105d3407ca0606953dd28a6d3>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x00020] in <d974f32105d3407ca0606953dd28a6d3>:0
    \n"
  stdout: ''
  timestamp: 1659977200
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    public static List<string> SelectWords(string
    s, long n) {\n        // TODO: Implement this function\n        List<string> result
    = new List<string>();\n        if (string.IsNullOrEmpty(s)) return result;\n        char[]
    chars = s.ToCharArray();\n        List<char> consonants = new List<char>();\n
    \       foreach (char c in chars) {\n            if (char.IsLetter(c)) {\n                consonants.Add(c);\n
    \           }\n        }\n        long count = 0;\n        foreach (char c in
    consonants) {\n            if (char.IsUpper(c)) {\n                count++;\n
    \           }\n        }\n        if (count != n) return result;\n        string
    word = string.Empty;\n        foreach (char c in chars) {\n            if (char.IsUpper(c))
    {\n                word += c;\n            }\n        }\n        result.Add(word);\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(SelectWords((\"Mary had a little lamb\"), (4L)).Equals((new List<string>(new
    string[]{(string)\"little\"}))));\n    Debug.Assert(SelectWords((\"Mary had a
    little lamb\"), (3L)).Equals((new List<string>(new string[]{(string)\"Mary\",
    (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple white space\"),
    (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello world\"),
    (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n    Debug.Assert(SelectWords((\"Uncle
    sam\"), (3L)).Equals((new List<string>(new string[]{(string)\"Uncle\"}))));\n
    \   Debug.Assert(SelectWords((\"\"), (4L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"a
    b c d e f\"), (1L)).Equals((new List<string>(new string[]{(string)\"b\", (string)\"c\",
    (string)\"d\", (string)\"f\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <1dc5fbe0bc734a9ca9190ffe8302b5f1>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <1dc5fbe0bc734a9ca9190ffe8302b5f1>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977322
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    public static List<string> SelectWords(string
    s, long n) {\n        List<string> result = new List<string>();\n        if (s.Length
    == 0) {\n            return result;\n        }\n        long count = 1;\n        foreach
    (char c in s) {\n            if (char.IsLetter(c)) {\n                count++;\n
    \           }\n        }\n        if (count != n) {\n            return result;\n
    \       }\n        string word = s;\n        string lastWord = s;\n        bool
    isFirst = true;\n        bool isLast = true;\n        bool isMiddle = true;\n
    \       bool isFirstMiddle = true;\n        bool isLastMiddle = true;\n        bool
    isFirstLast = true;\n        bool isLastFirst = true;\n        bool isMiddleMiddle
    = true;\n        bool isFirstMiddleLast = true;\n        bool isLastMiddleFirst
    = true;\n        bool isMiddleLastFirst = true;\n        bool isFirstLastMiddle
    = true;\n        bool isLastFirstMiddle = true;\n        bool isMiddleFirstLast
    = true;\n        bool isLastMiddleFirst = true;\n        bool isFirstMiddleMiddle
    = true;\n        bool isLastMiddleMiddle = true;\n        bool isFirstLastMiddle
    = true;\n        bool isMiddleFirstLast = true;\n        bool isLastFirstMiddle
    = true;\n        bool isMiddleMiddleFirst = true;\n        bool isLastMiddleMiddle
    = true;\n        bool isFirstLastMiddle = true;\n        bool isMiddleMiddleLast
    = true;\n        bool isFirstLastMiddle = true;\n        bool isMiddleLastFirst
    = true;\n        bool isLastFirstMiddle = true;\n        bool isFirstMiddleLast
    = true;\n        bool isLastMiddleFirst = true;\n        bool isMiddleFirstLast
    = true;\n        bool isLastFirstMiddle = true;\n        bool isFirstMiddleMiddle
    = true;\n        bool isLastMiddleMiddle = true;\n        bool isFirstLastMiddle
    = true;\n        bool isMiddleMiddleFirst = true;\n        bool isLastMiddleMiddle
    = true;\n        bool isFirstLastMiddle = true;\n        bool isMiddleLastFirst
    = true;\n        bool isLastFirstMiddle = true;\n        bool isFirstMiddleMiddle
    = true;\n        bool isLastMiddleMiddle = true;\n        bool isFirstLastMiddle
    = true;\n        bool isMiddleMiddleLast = true;\n        bool isFirstLastMiddle
    = true;\n        bool isMiddleLastFirst = true;\n        bool isLastFirstMiddle
    = true;\n        bool isFirstMiddleLast = true;\n        bool isLastMiddleFirst
    = true;\n        bool isFirstLastLast = true;\n        bool isMiddleMiddleLast
    = true;\n        bool isFirstLastLast = true;\n        bool isMiddleLastFirst
    = true;\n        bool isLastFirstLast = true;\n        bool isFirstMiddleMiddle
    = true;\n        bool isLastMiddleMiddle = true;\n        bool isFirstLastMiddle
    = true;\n        bool isMiddleMiddleFirst\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"), (4L)).Equals((new
    List<string>(new string[]{(string)\"little\"}))));\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (3L)).Equals((new List<string>(new string[]{(string)\"Mary\",
    (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple white space\"),
    (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello world\"),
    (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n    Debug.Assert(SelectWords((\"Uncle
    sam\"), (3L)).Equals((new List<string>(new string[]{(string)\"Uncle\"}))));\n
    \   Debug.Assert(SelectWords((\"\"), (4L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"a
    b c d e f\"), (1L)).Equals((new List<string>(new string[]{(string)\"b\", (string)\"c\",
    (string)\"d\", (string)\"f\"}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpod71b9f4.cs(87,33): error CS1002: ; expected

    '
  timestamp: 1659977321
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    public static List<string> SelectWords(string
    s, long n) {\n        List<string> result = new List<string>();\n        if (string.IsNullOrEmpty(s))
    {\n            return result;\n        }\n        string word = string.Empty;\n
    \       long count = 0;\n        foreach (char c in s) {\n            if (char.IsLetter(c))
    {\n                count++;\n                if (count == n) {\n                    result.Add(word);\n
    \                   word = string.Empty;\n                    count = 0;\n                }\n
    \               word += c;\n            }\n        }\n        if (count > 0) {\n
    \           result.Add(word);\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary had a
    little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n
    \   Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple
    white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello
    world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n
    \   Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new
    List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new
    List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"f\"}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <ffffeb6ba66c495f99e86c6a60b7bc56>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <ffffeb6ba66c495f99e86c6a60b7bc56>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977322
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    public static List<string> SelectWords(string
    s, long n) {\n        List<string> result = new List<string>();\n        if (string.IsNullOrEmpty(s))
    {\n            return result;\n        }\n        long maxWordLength = 0;\n        foreach
    (char c in s) {\n            if (char.IsLetter(c)) {\n                maxWordLength
    = Math.Max(maxWordLength, c.Length);\n            }\n        }\n        long wordCount
    = 0;\n        long currentWordLength = 0;\n        long currentWordCount = 0;\n
    \       foreach (char c in s) {\n            if (char.IsLetter(c)) {\n                currentWordLength++;\n
    \               if (currentWordLength == maxWordLength) {\n                    currentWordCount++;\n
    \               }\n            }\n            if (currentWordCount == n) {\n                result.Add(s.Substring(0,
    currentWordLength));\n                currentWordCount = 0;\n                currentWordLength
    = 0;\n            }\n        }\n        return result;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary had a little
    lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n
    \   Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple
    white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello
    world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n
    \   Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new
    List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new
    List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"f\"}))));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp3leht5u5.cs(23,59): error CS1061: ''char'' does not contain a definition
    for ''Length'' and no accessible extension method ''Length'' accepting a first
    argument of type ''char'' could be found (are you missing a using directive or
    an assembly reference?)

    /tmp/tmp3leht5u5.cs(37,43): error CS1503: Argument 2: cannot convert from ''long''
    to ''int''

    /tmp/tmp3leht5u5.cs(26,14): warning CS0219: The variable ''wordCount'' is assigned
    but its value is never used

    '
  timestamp: 1659977322
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    public static List<string> SelectWords(string
    s, long n) {\n        // TODO: Implement this function\n        List<string> result
    = new List<string>();\n        long count = 0;\n        foreach (char c in s)\n
    \       {\n            if (char.IsLetter(c))\n            {\n                count++;\n
    \           }\n        }\n        if (count == n)\n        {\n            result.Add(s);\n
    \       }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"), (4L)).Equals((new
    List<string>(new string[]{(string)\"little\"}))));\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (3L)).Equals((new List<string>(new string[]{(string)\"Mary\",
    (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple white space\"),
    (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello world\"),
    (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n    Debug.Assert(SelectWords((\"Uncle
    sam\"), (3L)).Equals((new List<string>(new string[]{(string)\"Uncle\"}))));\n
    \   Debug.Assert(SelectWords((\"\"), (4L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"a
    b c d e f\"), (1L)).Equals((new List<string>(new string[]{(string)\"b\", (string)\"c\",
    (string)\"d\", (string)\"f\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <72e6e2d399c64614ab3e722b1ead5de5>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <72e6e2d399c64614ab3e722b1ead5de5>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977322
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    public static List<string> SelectWords(string
    s, long n) {\n        List<string> result = new List<string>();\n        if (string.IsNullOrEmpty(s))
    {\n            return result;\n        }\n        string word = \"\";\n        foreach
    (char c in s) {\n            if (char.IsLetter(c)) {\n                word +=
    c;\n            }\n        }\n        List<string> words = SelectWords(word, n);\n
    \       foreach (string word in words) {\n            result.Add(word);\n        }\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(SelectWords((\"Mary had a little lamb\"), (4L)).Equals((new List<string>(new
    string[]{(string)\"little\"}))));\n    Debug.Assert(SelectWords((\"Mary had a
    little lamb\"), (3L)).Equals((new List<string>(new string[]{(string)\"Mary\",
    (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple white space\"),
    (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello world\"),
    (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n    Debug.Assert(SelectWords((\"Uncle
    sam\"), (3L)).Equals((new List<string>(new string[]{(string)\"Uncle\"}))));\n
    \   Debug.Assert(SelectWords((\"\"), (4L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"a
    b c d e f\"), (1L)).Equals((new List<string>(new string[]{(string)\"b\", (string)\"c\",
    (string)\"d\", (string)\"f\"}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpdyf9r5ay.cs(27,25): error CS0136: A local or parameter named ''word''
    cannot be declared in this scope because that name is used in an enclosing local
    scope to define a local or parameter

    '
  timestamp: 1659977322
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    public static List<string> SelectWords(string
    s, long n) {\n        List<string> result = new List<string>();\n        if (s
    == \"\") {\n            return result;\n        }\n        char[] chars = s.ToCharArray();\n
    \       List<char> consonants = new List<char>();\n        foreach (char c in
    chars) {\n            if (char.IsLower(c)) {\n                consonants.Add(c);\n
    \           }\n        }\n        long count = 0;\n        foreach (char c in
    consonants) {\n            count += 1;\n        }\n        if (count != n) {\n
    \           return result;\n        }\n        char[] chars2 = s.ToCharArray();\n
    \       List<char> vowels = new List<char>();\n        foreach (char c in chars2)
    {\n            if (char.IsUpper(c)) {\n                vowels.Add(c);\n            }\n
    \       }\n        count = 0;\n        foreach (char c in vowels) {\n            count
    += 1;\n        }\n        if (count != n) {\n            return result;\n        }\n
    \       char[] chars3 = s.ToCharArray();\n        List<char> consonants2 = new
    List<char>();\n        foreach (char c in chars3) {\n            if (char.IsLower(c))
    {\n                consonants2.Add(c);\n            }\n        }\n        count
    = 0;\n        foreach (char c in consonants2) {\n            count += 1;\n        }\n
    \       if (count != n) {\n            return result;\n        }\n        char[]
    chars4 = s.ToCharArray();\n        List<char> consonants3 = new List<char>();\n
    \       foreach (char c in chars4) {\n            if (char.IsUpper(c)) {\n                consonants3.Add(c);\n
    \           }\n        }\n        count = 0;\n        foreach (char c in consonants3)
    {\n            count += 1;\n        }\n        if (count != n) {\n            return
    result;\n        }\n        char[] chars5 = s.ToCharArray();\n        List<char>
    consonants4 = new List<char>();\n        foreach (char c in chars5) {\n            if
    (char.IsLower(c)) {\n                consonants4.Add(c);\n            }\n        }\n
    \       count = 0;\n        foreach (char c in consonants4) {\n            count
    += 1;\n        }\n        if (count != n) {\n            return result;\n        }\n
    \       char[] chars6 = s.ToCharArray();\n        List<char> consonants5 = new
    List<char>();\n        foreach (char c in chars6) {\n            if (char.IsUpper(c))
    {\n                consonants5.Add(c);\n            }\n        }\n        count
    = 0;\n        foreach (char c in consonants5) {\n            count += 1;\n        }\n
    \       if (count != n) {\n            return result;\n        }\n        char[]
    char\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n
    \   Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple
    white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello
    world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n
    \   Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new
    List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new
    List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"f\"}))));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpqikl_h17.cs(104,16): error CS1001: Identifier expected

    /tmp/tmpqikl_h17.cs(104,16): error CS1002: ; expected

    /tmp/tmpqikl_h17.cs(104,20): error CS1001: Identifier expected

    /tmp/tmpqikl_h17.cs(104,20): error CS1002: ; expected

    '
  timestamp: 1659977321
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    public static List<string> SelectWords(string
    s, long n) {\n        List<string> result = new List<string>();\n        if (string.IsNullOrEmpty(s))
    {\n            return result;\n        }\n        string word = string.Empty;\n
    \       foreach (char c in s) {\n            if (char.IsLetter(c)) {\n                word
    += c;\n            }\n        }\n        string word2 = word;\n        long count
    = 0;\n        long count2 = 0;\n        long count3 = 0;\n        long count4
    = 0;\n        long count5 = 0;\n        long count6 = 0;\n        long count7
    = 0;\n        long count8 = 0;\n        long count9 = 0;\n        long count10
    = 0;\n        long count11 = 0;\n        long count12 = 0;\n        long count13
    = 0;\n        long count14 = 0;\n        long count15 = 0;\n        long count16
    = 0;\n        long count17 = 0;\n        long count18 = 0;\n        long count19
    = 0;\n        long count20 = 0;\n        long count21 = 0;\n        long count22
    = 0;\n        long count23 = 0;\n        long count24 = 0;\n        long count25
    = 0;\n        long count26 = 0;\n        long count27 = 0;\n        long count28
    = 0;\n        long count29 = 0;\n        long count30 = 0;\n        long count31
    = 0;\n        long count32 = 0;\n        long count33 = 0;\n        long count34
    = 0;\n        long count35 = 0;\n        long count36 = 0;\n        long count37
    = 0;\n        long count38 = 0;\n        long count39 = 0;\n        long count40
    = 0;\n        long count41 = 0;\n        long count42 = 0;\n        long count43
    = 0;\n        long count44 = 0;\n        long count45 = 0;\n        long count46
    = 0;\n        long count47 = 0;\n        long count48 = 0;\n        long count49
    = 0;\n        long count50 = 0;\n        long count51 = 0;\n        long count52
    = 0;\n        long count53 = 0;\n        long count54 = 0;\n        long count55
    = 0;\n        long count56 = 0;\n        long count57 = 0;\n        long count58
    = 0;\n        long count59 = 0;\n        long count60 = 0;\n        long count61
    = 0;\n        long count62 = 0;\n        long count63 = 0;\n        long count64
    = 0;\n        long count65 = 0;\n        long count66 = 0;\n        long count67
    = 0;\n        long count68 = 0;\n        long count69 = 0;\n        long count70
    = 0;\n        long count71 = 0;\n        long count72 = 0;\n        long count73
    = 0;\n        long count74 = 0;\n        long count75 = 0;\n        long count76
    = 0;\n        \n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n
    \   Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple
    white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello
    world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n
    \   Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new
    List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new
    List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"f\"}))));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpg3g7c39x.cs(27,14): warning CS0219: The variable ''count'' is assigned
    but its value is never used

    /tmp/tmpg3g7c39x.cs(28,14): warning CS0219: The variable ''count2'' is assigned
    but its value is never used

    /tmp/tmpg3g7c39x.cs(29,14): warning CS0219: The variable ''count3'' is assigned
    but its value is never used

    /tmp/tmpg3g7c39x.cs(30,14): warning CS0219: The variable ''count4'' is assigned
    but its value is never used

    /tmp/tmpg3g7c39x.cs(31,14): warning CS0219: The variable ''count5'' is assigned
    but its value is never used

    /tmp/tmpg3g7c39x.cs(32,14): warning CS0219: The variable ''count6'' is assigned
    but its value is never used

    /tmp/tmpg3g7c39x.cs(33,14): warning CS0219: The variable ''count7'' is assigned
    but its value is never used

    /tmp/tmpg3g7c39x.cs(34,14): warning CS0219: The variable ''count8'' is assigned
    but its value is never used

    /tmp/tmpg3g7c39x.cs(35,14): warning CS0219: The variable ''count9'' is assigned
    but its value is never used

    /tmp/tmpg3g7c39x.cs(36,14): warning CS0219: The variable ''count10'' is assigned
    but its value is never used

    /tmp/tmpg3g7c39x.cs(37,14): warning CS0219: The variable ''count11'' is assigned
    but its value is never used

    /tmp/tmpg3g7c39x.cs(38,14): warning CS0219: The variable ''count12'' is assigned
    but its value is never used

    /tmp/tmpg3g7c39x.cs(39,14): warning CS0219: The variable ''count13'' is assigned
    but its value is never used

    /tmp/tmpg3g7c39x.cs(40,14): warning CS0219: The variable ''count14'' is assigned
    but its value is never used

    /tmp/tmpg3g7c39x.cs(41,14): warning CS0219: The variable ''count15'' is assigned
    but its value is never used

    /tmp/tmpg3g7c39x.cs(42,14): warning CS0219: The variable ''count16'' is assigned
    but its value is never used

    /tmp/tmpg3g7c39x.cs(43,14): warning CS0219: The variable ''count17'' is assigned
    but its value is never used

    /tmp/tmpg3g7c39x.cs(44,14): warning CS0219: The variable ''count18'' is assigned
    but its value is never used

    /tmp/'
  timestamp: 1659977322
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    public static List<string> SelectWords(string
    s, long n) {\n        List<string> result = new List<string>();\n        if (string.IsNullOrEmpty(s))\n
    \           return result;\n        long count = 0;\n        foreach (char c in
    s)\n            if (char.IsLetterOrDigit(c))\n                count++;\n        if
    (count != n)\n            return result;\n        string word = string.Empty;\n
    \       foreach (char c in s)\n            if (char.IsLetterOrDigit(c))\n                word
    += c;\n        result.Add(word);\n        return result;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary had a little
    lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n
    \   Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple
    white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello
    world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n
    \   Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new
    List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new
    List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"f\"}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f07ad34e162b4990a191f81d26ebe06e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f07ad34e162b4990a191f81d26ebe06e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977322
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    public static List<string> SelectWords(string
    s, long n) {\n        List<string> result = new List<string>();\n        if (s
    == \"\") {\n            return result;\n        }\n        char[] chars = s.ToCharArray();\n
    \       List<string> words = new List<string>();\n        foreach (char c in chars)
    {\n            if (chars.Count(x => x == c) == n) {\n                words.Add(c.ToString());\n
    \           }\n        }\n        return words;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"),
    (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (3L)).Equals((new List<string>(new string[]{(string)\"Mary\",
    (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple white space\"),
    (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello world\"),
    (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n    Debug.Assert(SelectWords((\"Uncle
    sam\"), (3L)).Equals((new List<string>(new string[]{(string)\"Uncle\"}))));\n
    \   Debug.Assert(SelectWords((\"\"), (4L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"a
    b c d e f\"), (1L)).Equals((new List<string>(new string[]{(string)\"b\", (string)\"c\",
    (string)\"d\", (string)\"f\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7f46020d14364fe081bd2a9ce8859e6d>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7f46020d14364fe081bd2a9ce8859e6d>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977322
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    public static List<string> SelectWords(string
    s, long n) {\n        // TODO: Implement this function\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary had a little
    lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n
    \   Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple
    white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello
    world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n
    \   Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new
    List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new
    List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"f\"}))));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpn533wku4.cs(15,32): error CS0161: ''Problem.SelectWords(string, long)'':
    not all code paths return a value

    '
  timestamp: 1659977322
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    public static List<string> SelectWords(string
    s, long n) {\n        // TODO: Implement this function\n        List<string> result
    = new List<string>();\n        foreach (var item in s.Split(' '))\n        {\n
    \           if (item.Length == n)\n            {\n                result.Add(item);\n
    \           }\n        }\n        return result;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"),
    (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (3L)).Equals((new List<string>(new string[]{(string)\"Mary\",
    (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple white space\"),
    (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello world\"),
    (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n    Debug.Assert(SelectWords((\"Uncle
    sam\"), (3L)).Equals((new List<string>(new string[]{(string)\"Uncle\"}))));\n
    \   Debug.Assert(SelectWords((\"\"), (4L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"a
    b c d e f\"), (1L)).Equals((new List<string>(new string[]{(string)\"b\", (string)\"c\",
    (string)\"d\", (string)\"f\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <e2940e06b93b4d529556cb0ace54a497>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <e2940e06b93b4d529556cb0ace54a497>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977322
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    public static List<string> SelectWords(string
    s, long n) {\n        List<string> result = new List<string>();\n        if (s
    == \"\") {\n            return result;\n        }\n        long count = 0;\n        foreach
    (char c in s) {\n            if (char.IsLetter(c)) {\n                count++;\n
    \           }\n        }\n        if (count != n) {\n            return result;\n
    \       }\n        string word = string.Empty;\n        foreach (char c in s)
    {\n            if (char.IsLetter(c)) {\n                word += c;\n            }\n
    \       }\n        result.Add(word);\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary had a
    little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n
    \   Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple
    white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello
    world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n
    \   Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new
    List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new
    List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"f\"}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <bbadec70ebe040838459689c688ef38e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <bbadec70ebe040838459689c688ef38e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977322
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    public static List<string> SelectWords(string
    s, long n) {\n        List<string> result = new List<string>();\n        if (s
    == \"\") {\n            return result;\n        }\n        long count = 0;\n        foreach
    (char c in s) {\n            if (Char.IsLetter(c)) {\n                count++;\n
    \           }\n        }\n        if (count != n) {\n            return result;\n
    \       }\n        List<string> words = new List<string>();\n        foreach (char
    c in s) {\n            if (Char.IsLetter(c)) {\n                words.Add(s.Substring(0,
    s.IndexOf(c)));\n            }\n        }\n        return words;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary had a
    little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n
    \   Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple
    white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello
    world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n
    \   Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new
    List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new
    List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"f\"}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <4e5eb1fb5b5f4bb392382e0385f5b4bf>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <4e5eb1fb5b5f4bb392382e0385f5b4bf>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977322
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    public static List<string> SelectWords(string
    s, long n) {\n        List<string> result = new List<string>();\n        if (string.IsNullOrEmpty(s))
    return result;\n        long maxWordLength = 0;\n        foreach (char c in s)
    {\n            if (char.IsLetter(c)) maxWordLength++;\n        }\n        long
    wordCount = 0;\n        long currentWordLength = 0;\n        foreach (char c in
    s) {\n            if (char.IsLetter(c)) {\n                currentWordLength++;\n
    \               if (currentWordLength == maxWordLength) {\n                    wordCount++;\n
    \                   currentWordLength = 0;\n                }\n            }\n
    \       }\n        if (wordCount != n) return result;\n        long startIndex
    = 0;\n        long endIndex = s.Length - 1;\n        while (startIndex <= endIndex)
    {\n            long midIndex = (startIndex + endIndex) / 2;\n            char
    c = s[midIndex];\n            if (char.IsLetter(c)) {\n                if (char.IsLetter(s[midIndex
    + 1])) {\n                    endIndex = midIndex - 1;\n                } else
    {\n                    startIndex = midIndex + 1;\n                }\n            }
    else {\n                endIndex = midIndex - 1;\n            }\n        }\n        string
    word = s.Substring(startIndex, endIndex + 1);\n        result.Add(word);\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n
    \   Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple
    white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello
    world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n
    \   Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new
    List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new
    List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"f\"}))));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpo6ppo18i.cs(38,24): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmpo6ppo18i.cs(40,37): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmpo6ppo18i.cs(49,35): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmpo6ppo18i.cs(49,47): error CS1503: Argument 2: cannot convert from ''long''
    to ''int''

    '
  timestamp: 1659977322
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    public static List<string> SelectWords(string
    s, long n) {\n        // TODO: Implement this function\n        List<string> result
    = new List<string>();\n        string temp = \"\";\n        foreach (char c in
    s)\n        {\n            if (char.IsLetter(c))\n            {\n                temp
    += c;\n            }\n        }\n        temp = temp.ToUpper();\n        char[]
    charArray = temp.ToCharArray();\n        List<string> list = new List<string>();\n
    \       foreach (char c in charArray)\n        {\n            if (char.IsLetter(c))\n
    \           {\n                list.Add(temp);\n                temp = \"\";\n
    \           }\n        }\n        foreach (string s in list)\n        {\n            char[]
    charArray2 = s.ToCharArray();\n            List<string> list2 = new List<string>();\n
    \           foreach (char c in charArray2)\n            {\n                if
    (char.IsLetter(c))\n                {\n                    list2.Add(s);\n                }\n
    \           }\n            foreach (string s in list2)\n            {\n                char[]
    charArray3 = s.ToCharArray();\n                List<string> list3 = new List<string>();\n
    \               foreach (char c in charArray3)\n                {\n                    if
    (char.IsLetter(c))\n                    {\n                        list3.Add(s);\n
    \                   }\n                }\n                foreach (string s in
    list3)\n                {\n                    char[] charArray4 = s.ToCharArray();\n
    \                   List<string> list4 = new List<string>();\n                    foreach
    (char c in charArray4)\n                    {\n                        if (char.IsLetter(c))\n
    \                       {\n                            list4.Add(s);\n                        }\n
    \                   }\n                    foreach (string s in list4)\n                    {\n
    \                       char[] charArray5 = s.ToCharArray();\n                        List<string>
    list5 = new List<string>();\n                        foreach (char c in charArray5)\n
    \                       {\n                            if (char.IsLetter(c))\n
    \                           {\n                                list5.Add(s);\n
    \                           }\n                        }\n                        foreach
    (string s in list5)\n                        {\n                            char[]
    charArray6 = s.ToCharArray();\n                            List<string> list6
    = new List<string>();\n                            foreach (char c in charArray6)\n
    \                           {\n                                if (char.IsLetter(c))\n
    \                               {\n                                    list6.Add(s);\n
    \                               }\n                            }\n                            foreach
    (string s in list6)\n                            {\n                                char[]
    charArray7 = s.ToCharArray();\n                                List<string> list7
    = new List<string>();\n                                foreach (char c in charArray7)\n
    \                               {\n                                    if (char.IsLetter(c))\n
    \                                   {\n                                        list7.Add(s);\n
    \                                   }\n                                }\n                                foreach
    (string s in list7)\n                                {\n                                    char[]
    charArray8 = \n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n
    \   Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple
    white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello
    world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n
    \   Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new
    List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new
    List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"f\"}))));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmphxrl1u7m.cs(105,56): error CS1525: Invalid expression term ''}''

    /tmp/tmphxrl1u7m.cs(105,56): error CS1002: ; expected

    /tmp/tmphxrl1u7m.cs(107,5): error CS0106: The modifier ''public'' is not valid
    for this item

    /tmp/tmphxrl1u7m.cs(117,2): error CS1513: } expected

    '
  timestamp: 1659977321
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    public static List<string> SelectWords(string
    s, long n) {\n        List<string> result = new List<string>();\n        if (string.IsNullOrEmpty(s))\n
    \           return result;\n        long count = 0;\n        foreach (char c in
    s)\n            if (char.IsLetterOrDigit(c))\n                count++;\n        if
    (count != n)\n            return result;\n        string word = string.Empty;\n
    \       foreach (char c in s)\n            if (char.IsLetterOrDigit(c))\n                word
    += c;\n        result.Add(word);\n        return result;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary had a little
    lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n
    \   Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple
    white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello
    world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n
    \   Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new
    List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new
    List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"f\"}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f07ad34e162b4990a191f81d26ebe06e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f07ad34e162b4990a191f81d26ebe06e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977322
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    public static List<string> SelectWords(string
    s, long n) {\n        // TODO: Implement this function\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary had a little
    lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n
    \   Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple
    white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello
    world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n
    \   Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new
    List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new
    List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"f\"}))));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpn533wku4.cs(15,32): error CS0161: ''Problem.SelectWords(string, long)'':
    not all code paths return a value

    '
  timestamp: 1659977322
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    public static List<string> SelectWords(string
    s, long n) {\n        List<string> result = new List<string>();\n        if (string.IsNullOrEmpty(s))
    {\n            return result;\n        }\n        long count = 0;\n        foreach
    (char c in s) {\n            if (char.IsLetter(c)) {\n                count++;\n
    \           }\n        }\n        long remain = n;\n        long start = 0;\n
    \       long end = 0;\n        long index = 0;\n        long index2 = 0;\n        long
    index3 = 0;\n        long index4 = 0;\n        long index5 = 0;\n        long
    index6 = 0;\n        long index7 = 0;\n        long index8 = 0;\n        long
    index9 = 0;\n        long index10 = 0;\n        long index11 = 0;\n        long
    index12 = 0;\n        long index13 = 0;\n        long index14 = 0;\n        long
    index15 = 0;\n        long index16 = 0;\n        long index17 = 0;\n        long
    index18 = 0;\n        long index19 = 0;\n        long index20 = 0;\n        long
    index21 = 0;\n        long index22 = 0;\n        long index23 = 0;\n        long
    index24 = 0;\n        long index25 = 0;\n        long index26 = 0;\n        long
    index27 = 0;\n        long index28 = 0;\n        long index29 = 0;\n        long
    index30 = 0;\n        long index31 = 0;\n        long index32 = 0;\n        long
    index33 = 0;\n        long index34 = 0;\n        long index35 = 0;\n        long
    index36 = 0;\n        long index37 = 0;\n        long index38 = 0;\n        long
    index39 = 0;\n        long index40 = 0;\n        long index41 = 0;\n        long
    index42 = 0;\n        long index43 = 0;\n        long index44 = 0;\n        long
    index45 = 0;\n        long index46 = 0;\n        long index47 = 0;\n        long
    index48 = 0;\n        long index49 = 0;\n        long index50 = 0;\n        long
    index51 = 0;\n        long index52 = 0;\n        long index53 = 0;\n        long
    index54 = 0;\n        long index55 = 0;\n        long index56 = 0;\n        long
    index57 = 0;\n        long index58 = 0;\n        long index59 = 0;\n        long
    index60 = 0;\n        long index61 = 0;\n        long index62 = 0;\n        long
    index63 = 0;\n        long index64 = 0;\n        long index65 = 0;\n        long
    index66 = 0;\n        long index67 = 0;\n        long index68 = 0;\n        long
    index69 = 0;\n        long index70 = 0;\n        long index71 = 0;\n        long
    index72 = 0;\n        long index73 = 0;\n        long index74 = 0;\n        long
    index75 = 0;\n        \n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(SelectWords((\"Mary had a little lamb\"), (4L)).Equals((new List<string>(new
    string[]{(string)\"little\"}))));\n    Debug.Assert(SelectWords((\"Mary had a
    little lamb\"), (3L)).Equals((new List<string>(new string[]{(string)\"Mary\",
    (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple white space\"),
    (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello world\"),
    (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n    Debug.Assert(SelectWords((\"Uncle
    sam\"), (3L)).Equals((new List<string>(new string[]{(string)\"Uncle\"}))));\n
    \   Debug.Assert(SelectWords((\"\"), (4L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"a
    b c d e f\"), (1L)).Equals((new List<string>(new string[]{(string)\"b\", (string)\"c\",
    (string)\"d\", (string)\"f\"}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpioa_ge7g.cs(27,14): warning CS0219: The variable ''start'' is assigned
    but its value is never used

    /tmp/tmpioa_ge7g.cs(28,14): warning CS0219: The variable ''end'' is assigned but
    its value is never used

    /tmp/tmpioa_ge7g.cs(29,14): warning CS0219: The variable ''index'' is assigned
    but its value is never used

    /tmp/tmpioa_ge7g.cs(30,14): warning CS0219: The variable ''index2'' is assigned
    but its value is never used

    /tmp/tmpioa_ge7g.cs(31,14): warning CS0219: The variable ''index3'' is assigned
    but its value is never used

    /tmp/tmpioa_ge7g.cs(32,14): warning CS0219: The variable ''index4'' is assigned
    but its value is never used

    /tmp/tmpioa_ge7g.cs(33,14): warning CS0219: The variable ''index5'' is assigned
    but its value is never used

    /tmp/tmpioa_ge7g.cs(34,14): warning CS0219: The variable ''index6'' is assigned
    but its value is never used

    /tmp/tmpioa_ge7g.cs(35,14): warning CS0219: The variable ''index7'' is assigned
    but its value is never used

    /tmp/tmpioa_ge7g.cs(36,14): warning CS0219: The variable ''index8'' is assigned
    but its value is never used

    /tmp/tmpioa_ge7g.cs(37,14): warning CS0219: The variable ''index9'' is assigned
    but its value is never used

    /tmp/tmpioa_ge7g.cs(38,14): warning CS0219: The variable ''index10'' is assigned
    but its value is never used

    /tmp/tmpioa_ge7g.cs(39,14): warning CS0219: The variable ''index11'' is assigned
    but its value is never used

    /tmp/tmpioa_ge7g.cs(40,14): warning CS0219: The variable ''index12'' is assigned
    but its value is never used

    /tmp/tmpioa_ge7g.cs(41,14): warning CS0219: The variable ''index13'' is assigned
    but its value is never used

    /tmp/tmpioa_ge7g.cs(42,14): warning CS0219: The variable ''index14'' is assigned
    but its value is never used

    /tmp/tmpioa_ge7g.cs(43,14): warning CS0219: The variable ''index15'' is assigned
    but its value is never used

    /tmp/tmpioa_ge7g.cs(44,14): warning CS0219: The variable ''index16'' is assigned
    but its value is never used

    /tmp/tmpioa'
  timestamp: 1659977322
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    public static List<string> SelectWords(string
    s, long n) {\n        List<string> result = new List<string>();\n        if (s
    == \"\") return result;\n        long total = 0;\n        foreach (char c in s)
    {\n            if (Char.IsLetter(c)) {\n                total += Char.GetNumericValue(c);\n
    \           }\n        }\n        long remain = total;\n        long count = 0;\n
    \       foreach (char c in s) {\n            if (Char.IsLetter(c)) {\n                count
    += Char.GetNumericValue(c);\n                if (count == n) {\n                    result.Add(s.Substring(0,
    s.IndexOf(c)));\n                    remain = total - count;\n                    count
    = 0;\n                }\n            }\n        }\n        if (remain != 0) {\n
    \           result.Add(s.Substring(0, s.IndexOf(c)));\n        }\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n
    \   Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple
    white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello
    world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n
    \   Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new
    List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new
    List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"f\"}))));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp_1864tzt.cs(21,17): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmp_1864tzt.cs(28,17): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmp_1864tzt.cs(37,49): error CS0103: The name ''c'' does not exist in the
    current context

    '
  timestamp: 1659977322
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    public static List<string> SelectWords(string
    s, long n) {\n        List<string> result = new List<string>();\n        if (string.IsNullOrEmpty(s))\n
    \           return result;\n        string str = s.ToLower();\n        char[]
    charArray = str.ToCharArray();\n        List<char> list = new List<char>();\n
    \       foreach (char c in charArray)\n        {\n            if (char.IsLetter(c))\n
    \           {\n                list.Add(c);\n            }\n        }\n        char[]
    charArray2 = list.ToArray();\n        char[] charArray3 = new char[charArray2.Length];\n
    \       Array.Copy(charArray2, charArray3, charArray2.Length);\n        char[]
    charArray4 = new char[charArray2.Length];\n        Array.Copy(charArray3, charArray4,
    charArray2.Length);\n        char[] charArray5 = new char[charArray2.Length];\n
    \       Array.Copy(charArray4, charArray5, charArray2.Length);\n        char[]
    charArray6 = new char[charArray2.Length];\n        Array.Copy(charArray5, charArray6,
    charArray2.Length);\n        char[] charArray7 = new char[charArray2.Length];\n
    \       Array.Copy(charArray6, charArray7, charArray2.Length);\n        char[]
    charArray8 = new char[charArray2.Length];\n        Array.Copy(charArray7, charArray8,
    charArray2.Length);\n        char[] charArray9 = new char[charArray2.Length];\n
    \       Array.Copy(charArray8, charArray9, charArray2.Length);\n        char[]
    charArray10 = new char[charArray2.Length];\n        Array.Copy(charArray9, charArray10,
    charArray2.Length);\n        char[] charArray11 = new char[charArray2.Length];\n
    \       Array.Copy(charArray10, charArray11, charArray2.Length);\n        char[]
    charArray12 = new char[charArray2.Length];\n        Array.Copy(charArray11, charArray12,
    charArray2.Length);\n        char[] charArray13 = new char[charArray2.Length];\n
    \       Array.Copy(charArray12, charArray13, charArray2.Length);\n        char[]
    charArray14 = new char[charArray2.Length];\n        Array.Copy(charArray13, charArray14,
    charArray2.Length);\n        char[] charArray15 = new char[charArray2.Length];\n
    \       Array.Copy(charArray14, charArray15, charArray2.Length);\n        char[]
    charArray16 = new char[charArray2.Length];\n        Array.Copy(charArray15, charArray16,
    charArray2.Length);\n        \n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"), (4L)).Equals((new
    List<string>(new string[]{(string)\"little\"}))));\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (3L)).Equals((new List<string>(new string[]{(string)\"Mary\",
    (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple white space\"),
    (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello world\"),
    (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n    Debug.Assert(SelectWords((\"Uncle
    sam\"), (3L)).Equals((new List<string>(new string[]{(string)\"Uncle\"}))));\n
    \   Debug.Assert(SelectWords((\"\"), (4L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"a
    b c d e f\"), (1L)).Equals((new List<string>(new string[]{(string)\"b\", (string)\"c\",
    (string)\"d\", (string)\"f\"}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpzaxtuh6n.cs(15,32): error CS0161: ''Problem.SelectWords(string, long)'':
    not all code paths return a value

    '
  timestamp: 1659977322
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    public static List<string> SelectWords(string
    s, long n) {\n        List<string> result = new List<string>();\n        if (string.IsNullOrEmpty(s))
    {\n            return result;\n        }\n        long num = 0;\n        foreach
    (char c in s) {\n            if (char.IsLetter(c)) {\n                num++;\n
    \           }\n        }\n        if (num != n) {\n            return result;\n
    \       }\n        long num2 = 0;\n        foreach (char c in s) {\n            if
    (char.IsLetter(c)) {\n                num2++;\n            }\n        }\n        if
    (num2 == n) {\n            foreach (char c in s) {\n                if (char.IsLetter(c))
    {\n                    result.Add(c.ToString());\n                }\n            }\n
    \       }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"), (4L)).Equals((new
    List<string>(new string[]{(string)\"little\"}))));\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (3L)).Equals((new List<string>(new string[]{(string)\"Mary\",
    (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple white space\"),
    (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello world\"),
    (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n    Debug.Assert(SelectWords((\"Uncle
    sam\"), (3L)).Equals((new List<string>(new string[]{(string)\"Uncle\"}))));\n
    \   Debug.Assert(SelectWords((\"\"), (4L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"a
    b c d e f\"), (1L)).Equals((new List<string>(new string[]{(string)\"b\", (string)\"c\",
    (string)\"d\", (string)\"f\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <88876b6d39d147588a437481b22d3493>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <88876b6d39d147588a437481b22d3493>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977322
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    public static List<string> SelectWords(string
    s, long n) {\n        List<string> result = new List<string>();\n        if (s
    == \"\") {\n            return result;\n        }\n        long n = Convert.ToInt64(n);\n
    \       long count = 0;\n        foreach (char c in s) {\n            if (char.IsLetter(c))
    {\n                count++;\n            }\n        }\n        if (count == n)
    {\n            result.Add(s);\n        }\n        foreach (char c in s) {\n            if
    (char.IsLetter(c)) {\n                count--;\n            }\n            if
    (count == 0) {\n                result.Add(s);\n            }\n        }\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n
    \   Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple
    white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello
    world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n
    \   Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new
    List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new
    List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"f\"}))));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmplp2lp2cu.cs(20,14): error CS0136: A local or parameter named ''n'' cannot
    be declared in this scope because that name is used in an enclosing local scope
    to define a local or parameter

    /tmp/tmplp2lp2cu.cs(20,34): error CS0165: Use of unassigned local variable ''n''

    '
  timestamp: 1659977322
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    public static List<string> SelectWords(string
    s, long n) {\n        List<string> result = new List<string>();\n        if (string.IsNullOrEmpty(s))
    return result;\n        \n        string vowels = \"aeiou\";\n        string consonants
    = \"bcdfghjklmnpqrstvwxyz\";\n        string consonants_lowercase = \"bcdfghjklmnpqrstvwxyz\";\n
    \       string consonants_uppercase = \"BCDFGHJKLMNPQRSTVWXYZ\";\n        string
    consonants_uppercase_lowercase = \"BCDFGHJKLMNPQRSTVWXYZ\";\n        string consonants_uppercase_lowercase_numbers
    = \"BCDFGHJKLMNPQRSTVWXYZ1234567890\";\n        string consonants_uppercase_lowercase_numbers_numbers
    = \"BCDFGHJKLMNPQRSTVWXYZ1234567890\";\n        string consonants_uppercase_lowercase_numbers_numbers_numbers
    = \"BCDFGHJKLMNPQRSTVWXYZ1234567890\";\n        string consonants_uppercase_lowercase_numbers_numbers_numbers_numbers
    = \"BCDFGHJKLMNPQRSTVWXYZ1234567890\";\n        string consonants_uppercase_lowercase_numbers_numbers_numbers_numbers_numbers
    = \"BCDFGHJKLMNPQRSTVWXYZ1234567890\";\n        string consonants_uppercase_lowercase_numbers_numbers_numbers_numbers_numbers_numbers
    = \"BCDFGHJKLMNPQRSTVWXYZ1234567890\";\n        string consonants_uppercase_lowercase_numbers_numbers_numbers_numbers_numbers_numbers_numbers
    = \"BCDFGHJKLMNPQRSTVWXYZ1234567890\";\n        string consonants_uppercase_lowercase_numbers_numbers_numbers_numbers_numbers_numbers_numbers_numbers
    = \"BCDFGHJKLMNPQRSTVWXYZ1234567890\";\n        string consonants_uppercase_lowercase_numbers_numbers_numbers_numbers_numbers_numbers_numbers_numbers_numbers
    = \"BCDFGHJKLMNPQRSTVWXYZ1234567890\";\n        string consonants_uppercase_lowercase_numbers_numbers_numbers_numbers_numbers_numbers_numbers_numbers_numbers_numbers
    = \"BCDFGHJKLMNPQRSTVWXYZ1234567890\";\n        string consonants_uppercase_lowercase_numbers_numbers_numbers_numbers_numbers_numbers_numbers_numbers_numbers_numbers_numbers
    = \"BCDFGHJKLMNPQRST\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n
    \   Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple
    white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello
    world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n
    \   Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new
    List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new
    List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"f\"}))));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpauqkj5ir.cs(34,137): error CS1010: Newline in constant

    /tmp/tmpauqkj5ir.cs(34,154): error CS1002: ; expected

    '
  timestamp: 1659977321
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    public static List<string> SelectWords(string
    s, long n) {\n        // TODO: Implement this function\n        List<string> result
    = new List<string>();\n        string temp = s;\n        string temp2 = \"\";\n
    \       long count = 0;\n        bool flag = false;\n        foreach (char c in
    temp) {\n            if (char.IsLetter(c)) {\n                temp2 = temp2 +
    c;\n                count++;\n            }\n        }\n        long count2 =
    Convert.ToInt64(temp2);\n        long count3 = Convert.ToInt64(s);\n        long
    count4 = Convert.ToInt64(temp);\n        long count5 = Convert.ToInt64(temp2);\n
    \       long count6 = Convert.ToInt64(s);\n        long count7 = Convert.ToInt64(temp);\n
    \       long count8 = Convert.ToInt64(temp2);\n        long count9 = Convert.ToInt64(s);\n
    \       long count10 = Convert.ToInt64(temp);\n        long count11 = Convert.ToInt64(temp2);\n
    \       long count12 = Convert.ToInt64(s);\n        long count13 = Convert.ToInt64(temp);\n
    \       long count14 = Convert.ToInt64(temp2);\n        long count15 = Convert.ToInt64(s);\n
    \       long count16 = Convert.ToInt64(temp);\n        long count17 = Convert.ToInt64(temp2);\n
    \       long count18 = Convert.ToInt64(s);\n        long count19 = Convert.ToInt64(temp);\n
    \       long count20 = Convert.ToInt64(temp2);\n        long count21 = Convert.ToInt64(s);\n
    \       long count22 = Convert.ToInt64(temp);\n        long count23 = Convert.ToInt64(temp2);\n
    \       long count24 = Convert.ToInt64(s);\n        long count25 = Convert.ToInt64(temp);\n
    \       long count26 = Convert.ToInt64(temp2);\n        long count27 = Convert.ToInt64(s);\n
    \       long count28 = Convert.ToInt64(temp);\n        long count29 = Convert.ToInt64(temp2);\n
    \       long count30 = Convert.ToInt64(s);\n        long count31 = Convert.ToInt64(temp);\n
    \       long count32 = Convert.ToInt64(temp2);\n        long count33 = Convert.ToInt64(s);\n
    \       long count34 = Convert.ToInt64(temp);\n        long count35 = Convert.ToInt64(temp2);\n
    \       long count36 = Convert.ToInt64(s);\n        long count37 = Convert.ToInt64(temp);\n
    \       \n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n
    \   Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple
    white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello
    world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n
    \   Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new
    List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new
    List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"f\"}))));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpypa2fu3o.cs(21,14): warning CS0219: The variable ''flag'' is assigned
    but its value is never used

    /tmp/tmpypa2fu3o.cs(15,32): error CS0161: ''Problem.SelectWords(string, long)'':
    not all code paths return a value

    '
  timestamp: 1659977322
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    public static List<string> SelectWords(string
    s, long n) {\n        List<string> result = new List<string>();\n        string
    word = \"\";\n        foreach (char c in s) {\n            if (char.IsLetter(c))
    {\n                word += c;\n            }\n        }\n        if (word.Length
    == n) {\n            result.Add(word);\n        }\n        return result;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n
    \   Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple
    white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello
    world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n
    \   Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new
    List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new
    List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"f\"}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <12eb5f66c92b48699035e7d4b06e30e1>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <12eb5f66c92b48699035e7d4b06e30e1>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977322
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    public static List<string> SelectWords(string
    s, long n) {\n        List<string> result = new List<string>();\n        if (string.IsNullOrEmpty(s))
    return result;\n        long n = Convert.ToInt64(n);\n        long maxCount =
    s.Length;\n        long currentCount = 1;\n        string currentWord = \"\";\n
    \       foreach (char c in s) {\n            if (char.IsLetter(c)) {\n                currentCount
    += 1;\n                if (currentCount > n) {\n                    result.Add(currentWord);\n
    \                   currentCount = 1;\n                    currentWord = \"\";\n
    \               }\n                currentWord += c;\n            }\n        }\n
    \       if (currentCount > n) {\n            result.Add(currentWord);\n        }\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(SelectWords((\"Mary had a little lamb\"), (4L)).Equals((new List<string>(new
    string[]{(string)\"little\"}))));\n    Debug.Assert(SelectWords((\"Mary had a
    little lamb\"), (3L)).Equals((new List<string>(new string[]{(string)\"Mary\",
    (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple white space\"),
    (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello world\"),
    (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n    Debug.Assert(SelectWords((\"Uncle
    sam\"), (3L)).Equals((new List<string>(new string[]{(string)\"Uncle\"}))));\n
    \   Debug.Assert(SelectWords((\"\"), (4L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"a
    b c d e f\"), (1L)).Equals((new List<string>(new string[]{(string)\"b\", (string)\"c\",
    (string)\"d\", (string)\"f\"}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp2y5mciqg.cs(18,14): error CS0136: A local or parameter named ''n'' cannot
    be declared in this scope because that name is used in an enclosing local scope
    to define a local or parameter

    /tmp/tmp2y5mciqg.cs(18,34): error CS0165: Use of unassigned local variable ''n''

    '
  timestamp: 1659977322
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    public static List<string> SelectWords(string
    s, long n) {\n        List<string> result = new List<string>();\n        if (s
    == \"\") {\n            return result;\n        }\n        string word = s;\n
    \       long count = 0;\n        long maxCount = 1;\n        long currentCount
    = 0;\n        bool isWord = false;\n        string lastWord = \"\";\n        string
    lastWord2 = \"\";\n        string lastWord3 = \"\";\n        string lastWord4
    = \"\";\n        string lastWord5 = \"\";\n        string lastWord6 = \"\";\n
    \       string lastWord7 = \"\";\n        string lastWord8 = \"\";\n        string
    lastWord9 = \"\";\n        string lastWord10 = \"\";\n        string lastWord11
    = \"\";\n        string lastWord12 = \"\";\n        string lastWord13 = \"\";\n
    \       string lastWord14 = \"\";\n        string lastWord15 = \"\";\n        string
    lastWord16 = \"\";\n        string lastWord17 = \"\";\n        string lastWord18
    = \"\";\n        string lastWord19 = \"\";\n        string lastWord20 = \"\";\n
    \       string lastWord21 = \"\";\n        string lastWord22 = \"\";\n        string
    lastWord23 = \"\";\n        string lastWord24 = \"\";\n        string lastWord25
    = \"\";\n        string lastWord26 = \"\";\n        string lastWord27 = \"\";\n
    \       string lastWord28 = \"\";\n        string lastWord29 = \"\";\n        string
    lastWord30 = \"\";\n        string lastWord31 = \"\";\n        string lastWord32
    = \"\";\n        string lastWord33 = \"\";\n        string lastWord34 = \"\";\n
    \       string lastWord35 = \"\";\n        string lastWord36 = \"\";\n        string
    lastWord37 = \"\";\n        string lastWord38 = \"\";\n        string lastWord39
    = \"\";\n        string lastWord40 = \"\";\n        string lastWord41 = \"\";\n
    \       string lastWord42 = \"\";\n        string lastWord43 = \"\";\n        string
    lastWord44 = \"\";\n        string lastWord45 = \"\";\n        string lastWord46
    = \"\";\n        string lastWord47 = \"\";\n        string lastWord48 = \"\";\n
    \       string lastWord49 = \"\";\n        string lastWord50 = \"\";\n        string
    lastWord51 = \"\";\n        string lastWord52 = \"\";\n        string lastWord53
    = \"\";\n        string lastWord54 = \"\";\n        string lastWord55 = \"\";\n
    \       string lastWord56 = \"\";\n        string lastWord57 = \"\";\n        string
    lastWord58 = \"\";\n        string lastWord59 = \"\";\n        string lastWord60
    = \"\";\n        string lastWord61 = \"\";\n        string lastWord62 = \"\";\n
    \       string lastWord63 = \"\";\n        string lastWord64 = \"\";\n        string
    lastWord65\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n
    \   Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple
    white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello
    world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n
    \   Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new
    List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new
    List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"f\"}))));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpcoup0bc8.cs(89,26): error CS1002: ; expected

    '
  timestamp: 1659977322
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    public static List<string> SelectWords(string
    s, long n) {\n        // TODO: implement this function\n        List<string> result
    = new List<string>();\n        foreach (string word in s.Split(' '))\n        {\n
    \           int count = 0;\n            foreach (char c in word)\n            {\n
    \               if (char.IsLetter(c))\n                {\n                    count++;\n
    \               }\n            }\n            if (count == n)\n            {\n
    \               result.Add(word);\n            }\n        }\n        return result;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n
    \   Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple
    white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello
    world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n
    \   Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new
    List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new
    List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"f\"}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a2213783c3d44eeaa92fc9ee36deeb89>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a2213783c3d44eeaa92fc9ee36deeb89>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977323
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    public static List<string> SelectWords(string
    s, long n) {\n        List<string> result = new List<string>();\n        string
    word = \"\";\n        foreach (char c in s) {\n            if (char.IsLetter(c))
    {\n                word += c;\n            }\n        }\n        if (word.Length
    == n) {\n            result.Add(word);\n        }\n        return result;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n
    \   Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple
    white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello
    world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n
    \   Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new
    List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new
    List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"f\"}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <12eb5f66c92b48699035e7d4b06e30e1>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <12eb5f66c92b48699035e7d4b06e30e1>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977322
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    public static List<string> SelectWords(string
    s, long n) {\n        List<string> result = new List<string>();\n        if (string.IsNullOrEmpty(s))
    return result;\n        long maxWordLength = 0;\n        foreach (char c in s)
    {\n            if (char.IsLetter(c)) {\n                maxWordLength = Math.Max(maxWordLength,
    c.Length);\n            }\n        }\n        long wordCount = 0;\n        long
    currentWordLength = 0;\n        long currentWordCount = 0;\n        foreach (char
    c in s) {\n            if (char.IsLetter(c)) {\n                currentWordLength++;\n
    \               if (currentWordLength == maxWordLength) {\n                    currentWordCount++;\n
    \               }\n            }\n            if (currentWordCount == n) {\n                result.Add(s.Substring(0,
    currentWordLength));\n                currentWordCount = 0;\n                currentWordLength
    = 0;\n            }\n        }\n        return result;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary had a little
    lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n
    \   Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple
    white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello
    world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n
    \   Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new
    List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new
    List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"f\"}))));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmput_u2yar.cs(21,59): error CS1061: ''char'' does not contain a definition
    for ''Length'' and no accessible extension method ''Length'' accepting a first
    argument of type ''char'' could be found (are you missing a using directive or
    an assembly reference?)

    /tmp/tmput_u2yar.cs(35,43): error CS1503: Argument 2: cannot convert from ''long''
    to ''int''

    /tmp/tmput_u2yar.cs(24,14): warning CS0219: The variable ''wordCount'' is assigned
    but its value is never used

    '
  timestamp: 1659977323
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    public static List<string> SelectWords(string
    s, long n) {\n        List<string> result = new List<string>();\n        if (s
    == \"\") {\n            return result;\n        }\n        string vowels = \"aeiou\";\n
    \       string consonants = \"bcdfghjklmnpqrstvwxyz\";\n        string vowelsAndConsonants
    = vowels + consonants;\n        string vowelsAndConsonantsWithVowels = vowelsAndConsonants
    + vowels;\n        string vowelsAndConsonantsWithVowelsAndConsonants = vowelsAndConsonantsWithVowels
    + consonants;\n        string vowelsAndConsonantsWithVowelsAndConsonantsWithVowels
    = vowelsAndConsonantsWithVowelsAndConsonants + vowels;\n        string vowelsAndConsonantsWithVowelsAndConsonantsWithVowelsAndConsonants
    = vowelsAndConsonantsWithVowelsAndConsonantsWithVowels + consonants;\n        string
    vowelsAndConsonantsWithVowelsAndConsonantsWithVowelsAndConsonantsWithVowels =
    vowelsAndConsonantsWithVowelsAndConsonantsWithVowels + consonants + vowels;\n
    \       string vowelsAndConsonantsWithVowelsAndConsonantsWithVowelsAndConsonantsWithVowelsAndConsonants
    = vowelsAndConsonantsWithVowelsAndConsonantsWithVowelsAndConsonants + consonants
    + vowels;\n        string vowelsAndConsonantsWithVowelsAndConsonantsWithVowelsAndConsonantsWithVowelsAndConsonantsWithVowels
    = vowelsAndConsonantsWithVowelsAndConsonantsWithVowelsAndConsonantsWithVowels
    + consonants + vowels + vowels;\n        string vowelsAndConsonantsWithVowelsAndConsonantsWithVowelsAndConsonantsWithVowelsAndConsonantsWithVowelsAndConsonants
    = vowelsAndConsonantsWithVowelsAndConsonantsWithVowelsAndConsonantsWithVowelsAndConsonants
    + consonants + vowels + vowels + consonants;\n        string vowelsAndConsonantsWithVowelsAndConsonantsWithVowelsAndConsonantsWithVowelsAndConsonantsWithVowelsAndConsonantsWithVowels
    = vowelsAndCon\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n
    \   Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple
    white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello
    world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n
    \   Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new
    List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new
    List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"f\"}))));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp6r3uw3z8.cs(31,152): error CS1002: ; expected

    '
  timestamp: 1659977322
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    public static List<string> SelectWords(string
    s, long n) {\n        List<string> result = new List<string>();\n        if (string.IsNullOrEmpty(s))
    return result;\n        string word = string.Empty;\n        foreach (char c in
    s) {\n            if (char.IsLetter(c)) {\n                word += c;\n            }\n
    \       }\n        if (word.Length == n) result.Add(word);\n        return result;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n
    \   Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple
    white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello
    world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n
    \   Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new
    List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new
    List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"f\"}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d926f632d4e24a309112631d448220fe>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d926f632d4e24a309112631d448220fe>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977323
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    public static List<string> SelectWords(string
    s, long n) {\n        List<string> result = new List<string>();\n        if (string.IsNullOrEmpty(s))\n
    \           return result;\n        long max = 0;\n        foreach (char c in
    s)\n            if (char.IsLetterOrDigit(c))\n                max = Math.Max(max,
    char.GetUnicodeCategory(c));\n        if (max > n)\n            return result;\n
    \       long n = Math.Abs(n);\n        long maxCount = 1;\n        foreach (char
    c in s)\n            if (char.IsLetterOrDigit(c))\n                maxCount =
    Math.Max(maxCount, char.GetUnicodeCategory(c));\n        if (maxCount > n)\n            return
    result;\n        long maxCount2 = 1;\n        foreach (char c in s)\n            if
    (char.IsLetterOrDigit(c))\n                maxCount2 = Math.Max(maxCount2, char.GetUnicodeCategory(c));\n
    \       if (maxCount2 > n)\n            return result;\n        long maxCount3
    = 1;\n        foreach (char c in s)\n            if (char.IsLetterOrDigit(c))\n
    \               maxCount3 = Math.Max(maxCount3, char.GetUnicodeCategory(c));\n
    \       if (maxCount3 > n)\n            return result;\n        long maxCount4
    = 1;\n        foreach (char c in s)\n            if (char.IsLetterOrDigit(c))\n
    \               maxCount4 = Math.Max(maxCount4, char.GetUnicodeCategory(c));\n
    \       if (maxCount4 > n)\n            return result;\n        long maxCount5
    = 1;\n        foreach (char c in s)\n            if (char.IsLetterOrDigit(c))\n
    \               maxCount5 = Math.Max(maxCount5, char.GetUnicodeCategory(c));\n
    \       if (maxCount5 > n)\n            return result;\n        long maxCount6
    = 1;\n        foreach (char c in s)\n            if (char.IsLetterOrDigit(c))\n
    \               maxCount6 = Math.Max(maxCount6, char.GetUnicodeCategory(c));\n
    \       if (maxCount6 > n)\n            return result;\n        long maxCount7
    = 1;\n        foreach (char c in s)\n            if (char.IsLetterOrDigit(c))\n
    \               maxCount7 = Math.Max(maxCount7, char.GetUnicodeCategory(c));\n
    \       if (maxCount7 > n)\n            return result;\n        long maxCount8
    = 1;\n        foreach (char c in s)\n            if (char.IsLetterOrDigit(c))\n
    \               maxCount8 = Math.Max(maxCount8, char.GetUnicodeCategory(c));\n
    \       if (maxCount8 > n)\n            return result;\n        long maxCount9
    = 1;\n        foreach (char c in s)\n            if (char.IsLetterOrDigit(c))\n
    \               maxCount9 = Math.Max(maxCount9, char.Get\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary had a little
    lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n
    \   Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple
    white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello
    world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n
    \   Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new
    List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new
    List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"f\"}))));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp0u5f6rsa.cs(77,57): error CS1026: ) expected

    /tmp/tmp0u5f6rsa.cs(77,57): error CS1002: ; expected

    '
  timestamp: 1659977322
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    public static List<string> SelectWords(string
    s, long n) {\n        List<string> result = new List<string>();\n        if (s
    == \"\") {\n            return result;\n        }\n        string word = s;\n
    \       long count = 0;\n        long index = 0;\n        bool isConsonant = false;\n
    \       bool isConsonant2 = false;\n        bool isConsonant3 = false;\n        bool
    isConsonant4 = false;\n        bool isConsonant5 = false;\n        bool isConsonant6
    = false;\n        bool isConsonant7 = false;\n        bool isConsonant8 = false;\n
    \       bool isConsonant9 = false;\n        bool isConsonant10 = false;\n        bool
    isConsonant11 = false;\n        bool isConsonant12 = false;\n        bool isConsonant13
    = false;\n        bool isConsonant14 = false;\n        bool isConsonant15 = false;\n
    \       bool isConsonant16 = false;\n        bool isConsonant17 = false;\n        bool
    isConsonant18 = false;\n        bool isConsonant19 = false;\n        bool isConsonant20
    = false;\n        bool isConsonant21 = false;\n        bool isConsonant22 = false;\n
    \       bool isConsonant23 = false;\n        bool isConsonant24 = false;\n        bool
    isConsonant25 = false;\n        bool isConsonant26 = false;\n        bool isConsonant27
    = false;\n        bool isConsonant28 = false;\n        bool isConsonant29 = false;\n
    \       bool isConsonant30 = false;\n        bool isConsonant31 = false;\n        bool
    isConsonant32 = false;\n        bool isConsonant33 = false;\n        bool isConsonant34
    = false;\n        bool isConsonant35 = false;\n        bool isConsonant36 = false;\n
    \       bool isConsonant37 = false;\n        bool isConsonant38 = false;\n        bool
    isConsonant39 = false;\n        bool isConsonant40 = false;\n        bool isConsonant41
    = false;\n        bool isConsonant42 = false;\n        bool isConsonant43 = false;\n
    \       bool isConsonant44 = false;\n        bool isConsonant45 = false;\n        bool
    isConsonant46 = false;\n        bool isConsonant47 = false;\n        bool isConsonant48
    = false;\n        bool isConsonant49 = false;\n        bool isConsonant50 = false;\n
    \       bool isConsonant51 = false;\n        bool isConsonant52 = false;\n        bool
    \n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n
    \   Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple
    white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello
    world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n
    \   Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new
    List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new
    List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"f\"}))));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp542xcex_.cs(75,13): error CS1001: Identifier expected

    /tmp/tmp542xcex_.cs(75,13): error CS1002: ; expected

    '
  timestamp: 1659977322
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    public static List<string> SelectWords(string
    s, long n) {\n        List<string> result = new List<string>();\n        if (string.IsNullOrEmpty(s))
    {\n            return result;\n        }\n        string word = string.Empty;\n
    \       bool isConsonant = false;\n        foreach (char c in s) {\n            if
    (char.IsLetter(c)) {\n                word += c;\n                if (char.IsUpper(c))
    {\n                    isConsonant = true;\n                }\n            }\n
    \       }\n        if (isConsonant) {\n            result.Add(word);\n        }\n
    \       long count = 0;\n        foreach (char c in word) {\n            if (char.IsLetter(c))
    {\n                count++;\n            }\n        }\n        if (count == n)
    {\n            result.Add(word);\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary had a
    little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n
    \   Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple
    white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello
    world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n
    \   Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new
    List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new
    List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"f\"}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <ec35d14081ea4b628770224d48069b1a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <ec35d14081ea4b628770224d48069b1a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977323
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    public static List<string> SelectWords(string
    s, long n) {\n        List<string> result = new List<string>();\n        if (string.IsNullOrEmpty(s))
    return result;\n        long n = Convert.ToInt64(n);\n        long max = (long)s.Length;\n
    \       long count = 0;\n        long start = 0;\n        long end = 0;\n        bool
    isConsonant = false;\n        long index = 0;\n        long temp = 0;\n        string
    tempString = \"\";\n        string tempString2 = \"\";\n        string tempString3
    = \"\";\n        string tempString4 = \"\";\n        string tempString5 = \"\";\n
    \       string tempString6 = \"\";\n        string tempString7 = \"\";\n        string
    tempString8 = \"\";\n        string tempString9 = \"\";\n        string tempString10
    = \"\";\n        string tempString11 = \"\";\n        string tempString12 = \"\";\n
    \       string tempString13 = \"\";\n        string tempString14 = \"\";\n        string
    tempString15 = \"\";\n        string tempString16 = \"\";\n        string tempString17
    = \"\";\n        string tempString18 = \"\";\n        string tempString19 = \"\";\n
    \       string tempString20 = \"\";\n        string tempString21 = \"\";\n        string
    tempString22 = \"\";\n        string tempString23 = \"\";\n        string tempString24
    = \"\";\n        string tempString25 = \"\";\n        string tempString26 = \"\";\n
    \       string tempString27 = \"\";\n        string tempString28 = \"\";\n        string
    tempString29 = \"\";\n        string tempString30 = \"\";\n        string tempString31
    = \"\";\n        string tempString32 = \"\";\n        string tempString33 = \"\";\n
    \       string tempString34 = \"\";\n        string tempString35 = \"\";\n        string
    tempString36 = \"\";\n        string tempString37 = \"\";\n        string tempString38
    = \"\";\n        string tempString39 = \"\";\n        string tempString40 = \"\";\n
    \       string tempString41 = \"\";\n        string tempString42 = \"\";\n        string
    tempString43 = \"\";\n        string tempString44 = \"\";\n        string tempString45
    = \"\";\n        string tempString46 = \"\";\n        string tempString47 = \"\";\n
    \       string tempString48 = \"\";\n        string tempString49 = \"\";\n        string
    tempString50 = \"\";\n        string tempString51 = \"\";\n        string tempString52
    = \"\";\n        string tempString53 = \"\";\n        string tempString54 = \"\";\n
    \       string tempString55 = \"\";\n        string tempString56 = \"\";\n        string
    tempString57 = \"\";\n        string tempString58 = \"\";\n        string tempString59
    = \"\";\n        string tempString60 = \"\";\n        string tempString61 = \"\";\n
    \       string \n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n
    \   Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple
    white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello
    world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n
    \   Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new
    List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new
    List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"f\"}))));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpb3hwho0a.cs(87,15): error CS1001: Identifier expected

    /tmp/tmpb3hwho0a.cs(87,15): error CS1002: ; expected

    '
  timestamp: 1659977322
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    public static List<string> SelectWords(string
    s, long n) {\n        // TODO: Implement this function\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary had a little
    lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n
    \   Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple
    white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello
    world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n
    \   Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new
    List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new
    List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"f\"}))));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpn533wku4.cs(15,32): error CS0161: ''Problem.SelectWords(string, long)'':
    not all code paths return a value

    '
  timestamp: 1659977322
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    public static List<string> SelectWords(string
    s, long n) {\n        List<string> result = new List<string>();\n        string
    word = string.Empty;\n        foreach (char c in s) {\n            if (char.IsLetter(c))
    {\n                word += c;\n            }\n        }\n        if (word.Length
    == n) {\n            result.Add(word);\n        }\n        return result;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n
    \   Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple
    white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello
    world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n
    \   Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new
    List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new
    List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"f\"}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <864b6168baf74945a20b10fdc2086d87>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <864b6168baf74945a20b10fdc2086d87>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977323
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    public static List<string> SelectWords(string
    s, long n) {\n        List<string> result = new List<string>();\n        string
    word = \"\";\n        foreach (char c in s) {\n            if (char.IsLetter(c))
    {\n                word += c;\n            }\n        }\n        if (word.Length
    == n) {\n            result.Add(word);\n        }\n        return result;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n
    \   Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple
    white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello
    world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n
    \   Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new
    List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new
    List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"f\"}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <12eb5f66c92b48699035e7d4b06e30e1>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <12eb5f66c92b48699035e7d4b06e30e1>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977322
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    public static List<string> SelectWords(string
    s, long n) {\n        List<string> result = new List<string>();\n        if (s.Length
    == 0) {\n            return result;\n        }\n        string word = s;\n        string
    lastWord = s;\n        long count = 0;\n        bool isConsonant = false;\n        bool
    isLastConsonant = false;\n        bool isLastWord = false;\n        bool isFirstWord
    = false;\n        bool isFirstConsonant = false;\n        bool isFirstLastWord
    = false;\n        bool isFirstLastConsonant = false;\n        bool isFirstLastConsonant2
    = false;\n        bool isFirstLastConsonant3 = false;\n        bool isFirstLastConsonant4
    = false;\n        bool isFirstLastConsonant5 = false;\n        bool isFirstLastConsonant6
    = false;\n        bool isFirstLastConsonant7 = false;\n        bool isFirstLastConsonant8
    = false;\n        bool isFirstLastConsonant9 = false;\n        bool isFirstLastConsonant10
    = false;\n        bool isFirstLastConsonant11 = false;\n        bool isFirstLastConsonant12
    = false;\n        bool isFirstLastConsonant13 = false;\n        bool isFirstLastConsonant14
    = false;\n        bool isFirstLastConsonant15 = false;\n        bool isFirstLastConsonant16
    = false;\n        bool isFirstLastConsonant17 = false;\n        bool isFirstLastConsonant18
    = false;\n        bool isFirstLastConsonant19 = false;\n        bool isFirstLastConsonant20
    = false;\n        bool isFirstLastConsonant21 = false;\n        bool isFirstLastConsonant22
    = false;\n        bool isFirstLastConsonant23 = false;\n        bool isFirstLastConsonant24
    = false;\n        bool isFirstLastConsonant25 = false;\n        bool isFirstLastConsonant26
    = false;\n        bool isFirstLastConsonant27 = false;\n        bool isFirstLastConsonant28
    = false;\n        bool isFirstLastConsonant29 = false;\n        bool isFirstLastConsonant30
    = false;\n        bool isFirstLastConsonant31 = false;\n        bool isFirstLastConsonant32
    = false;\n        bool isFirstLastConsonant33 = false;\n        bool isFirstLastConsonant34
    = false;\n        bool isFirstLastConsonant35 = false;\n        bool isFirstLastConsonant36
    = false;\n        bool isFirstLastConsonant37 = false;\n        bool isFirstLastConsonant38
    = false;\n        bool isFirstLast\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"), (4L)).Equals((new
    List<string>(new string[]{(string)\"little\"}))));\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (3L)).Equals((new List<string>(new string[]{(string)\"Mary\",
    (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple white space\"),
    (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello world\"),
    (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n    Debug.Assert(SelectWords((\"Uncle
    sam\"), (3L)).Equals((new List<string>(new string[]{(string)\"Uncle\"}))));\n
    \   Debug.Assert(SelectWords((\"\"), (4L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"a
    b c d e f\"), (1L)).Equals((new List<string>(new string[]{(string)\"b\", (string)\"c\",
    (string)\"d\", (string)\"f\"}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp_wp1amdh.cs(67,25): error CS1002: ; expected

    '
  timestamp: 1659977322
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    public static List<string> SelectWords(string
    s, long n) {\n        List<string> result = new List<string>();\n        if (string.IsNullOrEmpty(s))
    return result;\n        long n = Convert.ToInt64(n);\n        char[] chars = s.ToCharArray();\n
    \       List<char> consonants = new List<char>();\n        foreach (char c in
    chars) {\n            if (char.IsLetter(c)) {\n                consonants.Add(c);\n
    \           }\n        }\n        List<string> words = new List<string>();\n        foreach
    (char c in consonants) {\n            words.AddRange(SelectWords(s, n - 1));\n
    \       }\n        foreach (string word in words) {\n            if (word.Length
    == n) {\n                result.Add(word);\n            }\n        }\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n
    \   Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple
    white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello
    world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n
    \   Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new
    List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new
    List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"f\"}))));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpy8045qzp.cs(18,14): error CS0136: A local or parameter named ''n'' cannot
    be declared in this scope because that name is used in an enclosing local scope
    to define a local or parameter

    /tmp/tmpy8045qzp.cs(18,34): error CS0165: Use of unassigned local variable ''n''

    '
  timestamp: 1659977323
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    public static List<string> SelectWords(string
    s, long n) {\n        List<string> result = new List<string>();\n        if (s.Length
    == 0) {\n            return result;\n        }\n        long maxCount = 1;\n        string
    currentWord = \"\";\n        foreach (char c in s) {\n            if (Char.IsLetter(c))
    {\n                currentWord += c;\n                maxCount = 1;\n            }
    else {\n                if (currentWord.Length == n) {\n                    result.Add(currentWord);\n
    \                   currentWord = \"\";\n                } else {\n                    currentWord
    += c;\n                    maxCount++;\n                }\n            }\n        }\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(SelectWords((\"Mary had a little lamb\"), (4L)).Equals((new List<string>(new
    string[]{(string)\"little\"}))));\n    Debug.Assert(SelectWords((\"Mary had a
    little lamb\"), (3L)).Equals((new List<string>(new string[]{(string)\"Mary\",
    (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple white space\"),
    (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello world\"),
    (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n    Debug.Assert(SelectWords((\"Uncle
    sam\"), (3L)).Equals((new List<string>(new string[]{(string)\"Uncle\"}))));\n
    \   Debug.Assert(SelectWords((\"\"), (4L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"a
    b c d e f\"), (1L)).Equals((new List<string>(new string[]{(string)\"b\", (string)\"c\",
    (string)\"d\", (string)\"f\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <345e6edfcfd44f71b669c3540fbd64f2>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <345e6edfcfd44f71b669c3540fbd64f2>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977323
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    public static List<string> SelectWords(string
    s, long n) {\n        List<string> result = new List<string>();\n        if (s
    == \"\") {\n            return result;\n        }\n        char[] chars = s.ToCharArray();\n
    \       HashSet<string> seen = new HashSet<string>();\n        foreach (char c
    in chars) {\n            if (Char.IsLetter(c)) {\n                string word
    = s.Substring(0, s.IndexOf(c));\n                if (seen.Contains(word)) {\n
    \                   continue;\n                }\n                seen.Add(word);\n
    \               result.Add(word);\n            }\n        }\n        return result;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n
    \   Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple
    white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello
    world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n
    \   Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new
    List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new
    List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"f\"}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <e856b6c3b61644adbdd5a544cf0e94c8>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <e856b6c3b61644adbdd5a544cf0e94c8>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977323
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    public static List<string> SelectWords(string
    s, long n) {\n        List<string> result = new List<string>();\n        string
    word = \"\";\n        foreach (char c in s) {\n            if (char.IsLetter(c))
    {\n                word += c;\n            }\n        }\n        if (word.Length
    == n) {\n            result.Add(word);\n        }\n        return result;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n
    \   Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple
    white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello
    world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n
    \   Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new
    List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new
    List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"f\"}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <12eb5f66c92b48699035e7d4b06e30e1>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <12eb5f66c92b48699035e7d4b06e30e1>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977322
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    public static List<string> SelectWords(string
    s, long n) {\n        List<string> result = new List<string>();\n        if (s
    == \"\") {\n            return result;\n        }\n        string word = s;\n
    \       long count = 0;\n        bool isConsonant = false;\n        bool isWord
    = false;\n        bool isWordEnd = false;\n        bool isWordStart = false;\n
    \       bool isWordMiddle = false;\n        bool isWordEnd = false;\n        bool
    isWordStart = false;\n        bool isWordMiddle = false;\n        bool isWordEnd
    = false;\n        bool isWordStart = false;\n        bool isWordMiddle = false;\n
    \       bool isWordEnd = false;\n        bool isWordStart = false;\n        bool
    isWordMiddle = false;\n        bool isWordEnd = false;\n        bool isWordStart
    = false;\n        bool isWordMiddle = false;\n        bool isWordEnd = false;\n
    \       bool isWordStart = false;\n        bool isWordMiddle = false;\n        bool
    isWordEnd = false;\n        bool isWordStart = false;\n        bool isWordMiddle
    = false;\n        bool isWordEnd = false;\n        bool isWordStart = false;\n
    \       bool isWordMiddle = false;\n        bool isWordEnd = false;\n        bool
    isWordStart = false;\n        bool isWordMiddle = false;\n        bool isWordEnd
    = false;\n        bool isWordStart = false;\n        bool isWordMiddle = false;\n
    \       bool isWordEnd = false;\n        bool isWordStart = false;\n        bool
    isWordMiddle = false;\n        bool isWordEnd = false;\n        bool isWordStart
    = false;\n        bool isWordMiddle = false;\n        bool isWordEnd = false;\n
    \       bool isWordStart = false;\n        bool isWordMiddle = false;\n        bool
    isWordEnd = false;\n        bool isWordStart = false;\n        bool isWordMiddle
    = false;\n        bool isWordEnd = false;\n        bool isWordStart = false;\n
    \       bool isWordMiddle = false;\n        bool isWordEnd = false;\n        bool
    isWordStart = false;\n        bool isWordMiddle = false;\n        bool isWordEnd
    = false;\n        bool isWordStart = false;\n        bool isWordMiddle = false;\n
    \       bool isWordEnd = false;\n        bool isWordStart = false;\n        bool
    isWordMiddle = false;\n        bool isWordEnd = false;\n        bool isWordStart
    = false;\n        bool isWordMiddle = false;\n        bool isWordEnd = false;\n
    \       bool isWordStart = false;\n        bool isWordMiddle = false;\n        bool
    isWordEnd = false;\n        bool isWordStart = false;\n        bool isWordMiddle
    = false;\n        bool isWordEnd = false;\n        bool isWordStart = false;\n
    \       bool isWordMiddle = false;\n        bool isWordEnd = false;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary had a
    little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n
    \   Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple
    white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello
    world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n
    \   Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new
    List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new
    List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"f\"}))));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpe74f41ap.cs(27,14): error CS0128: A local variable or function named ''isWordEnd''
    is already defined in this scope

    /tmp/tmpe74f41ap.cs(28,14): error CS0128: A local variable or function named ''isWordStart''
    is already defined in this scope

    /tmp/tmpe74f41ap.cs(29,14): error CS0128: A local variable or function named ''isWordMiddle''
    is already defined in this scope

    /tmp/tmpe74f41ap.cs(30,14): error CS0128: A local variable or function named ''isWordEnd''
    is already defined in this scope

    /tmp/tmpe74f41ap.cs(31,14): error CS0128: A local variable or function named ''isWordStart''
    is already defined in this scope

    /tmp/tmpe74f41ap.cs(32,14): error CS0128: A local variable or function named ''isWordMiddle''
    is already defined in this scope

    /tmp/tmpe74f41ap.cs(33,14): error CS0128: A local variable or function named ''isWordEnd''
    is already defined in this scope

    /tmp/tmpe74f41ap.cs(34,14): error CS0128: A local variable or function named ''isWordStart''
    is already defined in this scope

    /tmp/tmpe74f41ap.cs(35,14): error CS0128: A local variable or function named ''isWordMiddle''
    is already defined in this scope

    /tmp/tmpe74f41ap.cs(36,14): error CS0128: A local variable or function named ''isWordEnd''
    is already defined in this scope

    /tmp/tmpe74f41ap.cs(37,14): error CS0128: A local variable or function named ''isWordStart''
    is already defined in this scope

    /tmp/tmpe74f41ap.cs(38,14): error CS0128: A local variable or function named ''isWordMiddle''
    is already defined in this scope

    /tmp/tmpe74f41ap.cs(39,14): error CS0128: A local variable or function named ''isWordEnd''
    is already defined in this scope

    /tmp/tmpe74f41ap.cs(40,14): error CS0128: A local variable or function named ''isWordStart''
    is already defined in this scope

    /tmp/tmpe74f41ap.cs(41,14): error CS0128: A local variable or function named ''isWordMiddle''
    is already defined in this scope

    /tmp/tmpe74f41ap.cs(42,14): error CS0128: A local variable or func'
  timestamp: 1659977323
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    public static List<string> SelectWords(string
    s, long n) {\n        List<string> result = new List<string>();\n        if (string.IsNullOrEmpty(s))
    {\n            return result;\n        }\n        long n = Convert.ToInt64(n);\n
    \       long count = 0;\n        foreach (char c in s) {\n            if (char.IsLetter(c))
    {\n                count++;\n            }\n        }\n        if (count == 0)
    {\n            return result;\n        }\n        long maxCount = 1;\n        long
    maxCountIndex = 0;\n        long minCount = 1;\n        long minCountIndex = 0;\n
    \       long maxCountIndex2 = -1;\n        long minCountIndex2 = -1;\n        long
    maxCountIndex3 = -1;\n        long minCountIndex3 = -1;\n        long maxCountIndex4
    = -1;\n        long minCountIndex4 = -1;\n        long maxCountIndex5 = -1;\n
    \       long minCountIndex5 = -1;\n        long maxCountIndex6 = -1;\n        long
    minCountIndex6 = -1;\n        long maxCountIndex7 = -1;\n        long minCountIndex7
    = -1;\n        long maxCountIndex8 = -1;\n        long minCountIndex8 = -1;\n
    \       long maxCountIndex9 = -1;\n        long minCountIndex9 = -1;\n        long
    maxCountIndex10 = -1;\n        long minCountIndex10 = -1;\n        long maxCountIndex11
    = -1;\n        long minCountIndex11 = -1;\n        long maxCountIndex12 = -1;\n
    \       long minCountIndex12 = -1;\n        long maxCountIndex13 = -1;\n        long
    minCountIndex13 = -1;\n        long maxCountIndex14 = -1;\n        long minCountIndex14
    = -1;\n        long maxCountIndex15 = -1;\n        long minCountIndex15 = -1;\n
    \       long maxCountIndex16 = -1;\n        long minCountIndex16 = -1;\n        long
    maxCountIndex17 = -1;\n        long minCountIndex17 = -1;\n        long maxCountIndex18
    = -1;\n        long minCountIndex18 = -1;\n        long maxCountIndex19 = -1;\n
    \       long minCountIndex19 = -1;\n        long maxCountIndex20 = -1;\n        long
    minCountIndex20 = -1;\n        long maxCountIndex21 = -1;\n        long minCountIndex21
    = -1;\n        long maxCountIndex22 = -1;\n        long minCountIndex22 = -1;\n
    \       long maxCountIndex23 = -1;\n        long minCountIndex23 = -1;\n        long
    maxCountIndex24 = -1;\n        long minCountIndex24 = -1;\n        long maxCountIndex25
    = -1;\n        long minCountIndex25 = -1;\n        long maxCountIndex26\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n
    \   Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple
    white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello
    world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n
    \   Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new
    List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new
    List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"f\"}))));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpvexhih95.cs(82,29): error CS1002: ; expected

    '
  timestamp: 1659977323
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    public static List<string> SelectWords(string
    s, long n) {\n        List<string> result = new List<string>();\n        if (string.IsNullOrEmpty(s))
    {\n            return result;\n        }\n        char[] chars = s.ToCharArray();\n
    \       int[] count = new int[26];\n        for (int i = 0; i < chars.Length;
    i++) {\n            count[chars[i] - 'a']++;\n        }\n        Array.Sort(count);\n
    \       int maxCount = 0;\n        for (int i = 0; i < count.Length; i++) {\n
    \           if (count[i] > maxCount) {\n                maxCount = count[i];\n
    \           }\n        }\n        for (int i = 0; i < count.Length; i++) {\n            if
    (count[i] == maxCount) {\n                result.Add(new string(chars, i, 1));\n
    \           }\n        }\n        return result;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"),
    (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (3L)).Equals((new List<string>(new string[]{(string)\"Mary\",
    (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple white space\"),
    (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello world\"),
    (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n    Debug.Assert(SelectWords((\"Uncle
    sam\"), (3L)).Equals((new List<string>(new string[]{(string)\"Uncle\"}))));\n
    \   Debug.Assert(SelectWords((\"\"), (4L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"a
    b c d e f\"), (1L)).Equals((new List<string>(new string[]{(string)\"b\", (string)\"c\",
    (string)\"d\", (string)\"f\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.IndexOutOfRangeException: Index was outside
    the bounds of the array.\n  at Problem.SelectWords (System.String s, System.Int64
    n) [0x00031] in <7f7f16a9c7a14338a4a3478add608110>:0 \n  at Problem.Main (System.String[]
    args) [0x00001] in <7f7f16a9c7a14338a4a3478add608110>:0 \n[ERROR] FATAL UNHANDLED
    EXCEPTION: System.IndexOutOfRangeException: Index was outside the bounds of the
    array.\n  at Problem.SelectWords (System.String s, System.Int64 n) [0x00031] in
    <7f7f16a9c7a14338a4a3478add608110>:0 \n  at Problem.Main (System.String[] args)
    [0x00001] in <7f7f16a9c7a14338a4a3478add608110>:0 \n"
  stdout: ''
  timestamp: 1659977323
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    public static List<string> SelectWords(string
    s, long n) {\n        // TODO: implement this function\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary had a little
    lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n
    \   Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple
    white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello
    world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n
    \   Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new
    List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new
    List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"f\"}))));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp1lhvd1_1.cs(15,32): error CS0161: ''Problem.SelectWords(string, long)'':
    not all code paths return a value

    '
  timestamp: 1659977323
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    public static List<string> SelectWords(string
    s, long n) {\n        List<string> result = new List<string>();\n        if (string.IsNullOrEmpty(s))
    {\n            return result;\n        }\n        long total = 0;\n        foreach
    (char c in s) {\n            total += (int)Char.GetNumericValue(c);\n        }\n
    \       long remaining = n;\n        string word = \"\";\n        foreach (char
    c in s) {\n            long num = Char.GetNumericValue(c);\n            if (num
    > remaining) {\n                result.Add(word);\n                word = \"\";\n
    \               remaining = num - 1;\n            } else {\n                word
    += c;\n                remaining--;\n            }\n        }\n        result.Add(word);\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(SelectWords((\"Mary had a little lamb\"), (4L)).Equals((new List<string>(new
    string[]{(string)\"little\"}))));\n    Debug.Assert(SelectWords((\"Mary had a
    little lamb\"), (3L)).Equals((new List<string>(new string[]{(string)\"Mary\",
    (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple white space\"),
    (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello world\"),
    (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n    Debug.Assert(SelectWords((\"Uncle
    sam\"), (3L)).Equals((new List<string>(new string[]{(string)\"Uncle\"}))));\n
    \   Debug.Assert(SelectWords((\"\"), (4L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"a
    b c d e f\"), (1L)).Equals((new List<string>(new string[]{(string)\"b\", (string)\"c\",
    (string)\"d\", (string)\"f\"}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpuptlm6jo.cs(27,24): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659977323
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    public static List<string> SelectWords(string
    s, long n) {\n        List<string> result = new List<string>();\n        if (string.IsNullOrEmpty(s))
    {\n            return result;\n        }\n        char[] chars = s.ToCharArray();\n
    \       int[] count = new int[26];\n        for (int i = 0; i < chars.Length;
    i++) {\n            char c = chars[i];\n            count[c - 'a']++;\n        }\n
    \       int[] count2 = new int[26];\n        for (int i = 0; i < chars.Length;
    i++) {\n            char c = chars[i];\n            count2[c - 'a']++;\n        }\n
    \       int[] count3 = new int[26];\n        for (int i = 0; i < chars.Length;
    i++) {\n            char c = chars[i];\n            count3[c - 'a']++;\n        }\n
    \       int[] count4 = new int[26];\n        for (int i = 0; i < chars.Length;
    i++) {\n            char c = chars[i];\n            count4[c - 'a']++;\n        }\n
    \       int[] count5 = new int[26];\n        for (int i = 0; i < chars.Length;
    i++) {\n            char c = chars[i];\n            count5[c - 'a']++;\n        }\n
    \       int[] count6 = new int[26];\n        for (int i = 0; i < chars.Length;
    i++) {\n            char c = chars[i];\n            count6[c - 'a']++;\n        }\n
    \       int[] count7 = new int[26];\n        for (int i = 0; i < chars.Length;
    i++) {\n            char c = chars[i];\n            count7[c - 'a']++;\n        }\n
    \       int[] count8 = new int[26];\n        for (int i = 0; i < chars.Length;
    i++) {\n            char c = chars[i];\n            count8[c - 'a']++;\n        }\n
    \       int[] count9 = new int[26];\n        for (int i = 0; i < chars.Length;
    i++) {\n            char c = chars[i];\n            count9[c - 'a']++;\n        }\n
    \       int[] count10 = new int[26];\n        for (int i = 0; i < chars.Length;
    i++) {\n            char c = chars[i];\n            count10[c - 'a']++;\n        }\n
    \       int[] count11 = new int[26];\n        for (int i = 0; i < chars.Length;
    i++) {\n            char c = chars[i];\n            count11[c - 'a']++;\n        }\n
    \       int[] count12 = new int[26];\n        for (int i = 0; i < chars.Length;
    i++) {\n            char c = chars[i];\n            count12[c - 'a']++;\n        }\n
    \       int[] count13 = new int[26];\n        for (int i = 0; i < chars.Length;
    i++) {\n            char c = chars[i];\n            count13[c - 'a']++;\n        }\n\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n
    \   Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple
    white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello
    world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n
    \   Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new
    List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new
    List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"f\"}))));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpe6qbwag8.cs(15,32): error CS0161: ''Problem.SelectWords(string, long)'':
    not all code paths return a value

    '
  timestamp: 1659977323
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    public static List<string> SelectWords(string
    s, long n) {\n        List<string> result = new List<string>();\n        if (string.IsNullOrEmpty(s))\n
    \           return result;\n        long count = 0;\n        foreach (char c in
    s)\n            if (char.IsLetter(c))\n                count++;\n        if (count
    != n)\n            return result;\n        string word = \"\";\n        foreach
    (char c in s)\n            if (char.IsLetter(c))\n                word += c;\n
    \       result.Add(word);\n        return result;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"),
    (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (3L)).Equals((new List<string>(new string[]{(string)\"Mary\",
    (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple white space\"),
    (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello world\"),
    (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n    Debug.Assert(SelectWords((\"Uncle
    sam\"), (3L)).Equals((new List<string>(new string[]{(string)\"Uncle\"}))));\n
    \   Debug.Assert(SelectWords((\"\"), (4L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"a
    b c d e f\"), (1L)).Equals((new List<string>(new string[]{(string)\"b\", (string)\"c\",
    (string)\"d\", (string)\"f\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <5aec3392057647268b4e8de993d02830>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <5aec3392057647268b4e8de993d02830>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977324
- exit_code: -1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    public static List<string> SelectWords(string
    s, long n) {\n        List<string> result = new List<string>();\n        foreach
    (var item in s.Split(' '))\n        {\n            if (item.Length > 0)\n            {\n
    \               result.AddRange(SelectWords(item, n));\n            }\n        }\n
    \       return result.Distinct().ToList();\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"), (4L)).Equals((new
    List<string>(new string[]{(string)\"little\"}))));\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (3L)).Equals((new List<string>(new string[]{(string)\"Mary\",
    (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple white space\"),
    (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello world\"),
    (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n    Debug.Assert(SelectWords((\"Uncle
    sam\"), (3L)).Equals((new List<string>(new string[]{(string)\"Uncle\"}))));\n
    \   Debug.Assert(SelectWords((\"\"), (4L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"a
    b c d e f\"), (1L)).Equals((new List<string>(new string[]{(string)\"b\", (string)\"c\",
    (string)\"d\", (string)\"f\"}))));\n    }\n\n}\n"
  status: Timeout
  stderr: ''
  stdout: None
  timestamp: 1659977328
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    public static List<string> SelectWords(string
    s, long n) {\n        // TODO: Implement this function\n        List<string> result
    = new List<string>();\n        string temp = \"\";\n        foreach (char c in
    s) {\n            if (char.IsLetter(c)) {\n                temp += c;\n            }\n
    \       }\n        if (temp.Length == n) {\n            result.Add(temp);\n        }\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(SelectWords((\"Mary had a little lamb\"), (4L)).Equals((new List<string>(new
    string[]{(string)\"little\"}))));\n    Debug.Assert(SelectWords((\"Mary had a
    little lamb\"), (3L)).Equals((new List<string>(new string[]{(string)\"Mary\",
    (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple white space\"),
    (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello world\"),
    (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n    Debug.Assert(SelectWords((\"Uncle
    sam\"), (3L)).Equals((new List<string>(new string[]{(string)\"Uncle\"}))));\n
    \   Debug.Assert(SelectWords((\"\"), (4L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"a
    b c d e f\"), (1L)).Equals((new List<string>(new string[]{(string)\"b\", (string)\"c\",
    (string)\"d\", (string)\"f\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c8ad44484cdd4bf2894cbaba7ef59bd4>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c8ad44484cdd4bf2894cbaba7ef59bd4>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977323
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    public static List<string> SelectWords(string
    s, long n) {\n        // TODO: Implement this function\n        return null;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n
    \   Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple
    white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello
    world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n
    \   Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new
    List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new
    List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"f\"}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x00020] in <d974f32105d3407ca0606953dd28a6d3>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x00020] in <d974f32105d3407ca0606953dd28a6d3>:0
    \n"
  stdout: ''
  timestamp: 1659977200
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    public static List<string> SelectWords(string
    s, long n) {\n        List<string> result = new List<string>();\n        if (s
    == \"\") return result;\n        long count = 0;\n        foreach (char c in s)
    {\n            if (char.IsLetter(c)) {\n                count++;\n            }\n
    \       }\n        if (count == n) return result;\n        long start = 0;\n        long
    end = 0;\n        long count = 0;\n        foreach (char c in s) {\n            if
    (char.IsLetter(c)) {\n                count++;\n                if (count == n)
    {\n                    end = start + count;\n                    result.Add(s.Substring(start,
    end - start));\n                    start = end;\n                    count =
    0;\n                }\n            }\n        }\n        if (count != 0) result.Add(s.Substring(start,
    s.Length - start));\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"), (4L)).Equals((new
    List<string>(new string[]{(string)\"little\"}))));\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (3L)).Equals((new List<string>(new string[]{(string)\"Mary\",
    (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple white space\"),
    (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello world\"),
    (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n    Debug.Assert(SelectWords((\"Uncle
    sam\"), (3L)).Equals((new List<string>(new string[]{(string)\"Uncle\"}))));\n
    \   Debug.Assert(SelectWords((\"\"), (4L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"a
    b c d e f\"), (1L)).Equals((new List<string>(new string[]{(string)\"b\", (string)\"c\",
    (string)\"d\", (string)\"f\"}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmphvhc63ql.cs(27,14): error CS0128: A local variable or function named ''count''
    is already defined in this scope

    /tmp/tmphvhc63ql.cs(33,44): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmphvhc63ql.cs(33,51): error CS1503: Argument 2: cannot convert from ''long''
    to ''int''

    /tmp/tmphvhc63ql.cs(39,48): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmphvhc63ql.cs(39,55): error CS1503: Argument 2: cannot convert from ''long''
    to ''int''

    /tmp/tmphvhc63ql.cs(27,14): warning CS0219: The variable ''count'' is assigned
    but its value is never used

    '
  timestamp: 1659977323
- exit_code: -1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    public static List<string> SelectWords(string
    s, long n) {\n        List<string> result = new List<string>();\n        if (s
    == \"\") {\n            return result;\n        }\n        char[] chars = s.ToCharArray();\n
    \       Array.Sort(chars);\n        List<char> consonants = new List<char>();\n
    \       foreach (char c in chars) {\n            if (char.IsLower(c)) {\n                consonants.Add(c);\n
    \           }\n        }\n        List<string> words = new List<string>();\n        foreach
    (char c in consonants) {\n            words.AddRange(SelectWords(s, n - 1));\n
    \       }\n        foreach (string word in words) {\n            if (word.Length
    == n) {\n                result.Add(word);\n            }\n        }\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n
    \   Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple
    white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello
    world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n
    \   Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new
    List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new
    List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"f\"}))));\n
    \   }\n\n}\n"
  status: Timeout
  stderr: ''
  stdout: None
  timestamp: 1659977328
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    public static List<string> SelectWords(string
    s, long n) {\n        List<string> result = new List<string>();\n        string
    word = \"\";\n        foreach (char c in s) {\n            if (char.IsLetter(c))
    {\n                word += c;\n            }\n        }\n        if (word.Length
    == n) {\n            result.Add(word);\n        }\n        return result;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n
    \   Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple
    white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello
    world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n
    \   Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new
    List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new
    List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"f\"}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <12eb5f66c92b48699035e7d4b06e30e1>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <12eb5f66c92b48699035e7d4b06e30e1>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977322
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    public static List<string> SelectWords(string
    s, long n) {\n        List<string> result = new List<string>();\n        if (string.IsNullOrEmpty(s))
    {\n            return result;\n        }\n        char[] chars = s.ToCharArray();\n
    \       Array.Sort(chars);\n        List<char> consonants = new List<char>();\n
    \       foreach (char c in chars) {\n            if (char.IsLetter(c)) {\n                consonants.Add(c);\n
    \           }\n        }\n        List<string> words = new List<string>();\n        foreach
    (char c in consonants) {\n            string word = s.Substring(0, s.IndexOf(c));\n
    \           words.Add(word);\n            s = s.Substring(word.Length);\n        }\n
    \       foreach (string word in words) {\n            long count = 0;\n            foreach
    (char c in word) {\n                if (char.IsLetter(c)) {\n                    count++;\n
    \               }\n            }\n            if (count == n) {\n                result.Add(word);\n
    \           }\n        }\n        return result;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"),
    (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (3L)).Equals((new List<string>(new string[]{(string)\"Mary\",
    (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple white space\"),
    (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello world\"),
    (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n    Debug.Assert(SelectWords((\"Uncle
    sam\"), (3L)).Equals((new List<string>(new string[]{(string)\"Uncle\"}))));\n
    \   Debug.Assert(SelectWords((\"\"), (4L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"a
    b c d e f\"), (1L)).Equals((new List<string>(new string[]{(string)\"b\", (string)\"c\",
    (string)\"d\", (string)\"f\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Length cannot
    be less than zero.\nParameter name: length\n  at System.String.Substring (System.Int32
    startIndex, System.Int32 length) [0x00031] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at Problem.SelectWords (System.String s, System.Int64 n) [0x0008d] in <1673d9ae2e2c479b88f5a0a83759c001>:0
    \n  at Problem.Main (System.String[] args) [0x00001] in <1673d9ae2e2c479b88f5a0a83759c001>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Length
    cannot be less than zero.\nParameter name: length\n  at System.String.Substring
    (System.Int32 startIndex, System.Int32 length) [0x00031] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at Problem.SelectWords (System.String s, System.Int64 n) [0x0008d] in <1673d9ae2e2c479b88f5a0a83759c001>:0
    \n  at Problem.Main (System.String[] args) [0x00001] in <1673d9ae2e2c479b88f5a0a83759c001>:0
    \n"
  stdout: ''
  timestamp: 1659977323
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    public static List<string> SelectWords(string
    s, long n) {\n        List<string> result = new List<string>();\n        if (s
    == \"\") {\n            return result;\n        }\n        long count = 0;\n        foreach
    (char c in s) {\n            if (char.IsLetter(c)) {\n                count++;\n
    \           }\n        }\n        if (count != n) {\n            return result;\n
    \       }\n        long start = 0;\n        long end = 0;\n        long cur =
    0;\n        bool isFirst = true;\n        bool isLast = true;\n        bool isMiddle
    = true;\n        bool isLastMiddle = true;\n        bool isFirstMiddle = true;\n
    \       bool isLastLast = true;\n        bool isMiddleMiddle = true;\n        bool
    isFirstLast = true;\n        bool isMiddleFirst = true;\n        bool isLastFirst
    = true;\n        bool isFirstLastMiddle = true;\n        bool isLastMiddleFirst
    = true;\n        bool isFirstMiddleLast = true;\n        bool isLastFirstMiddle
    = true;\n        bool isMiddleLastFirst = true;\n        bool isFirstLastLast
    = true;\n        bool isMiddleMiddleLast = true;\n        bool isFirstMiddleMiddle
    = true;\n        bool isLastFirstMiddle = true;\n        bool isMiddleFirstLast
    = true;\n        bool isLastMiddleFirst = true;\n        bool isFirstMiddleMiddle
    = true;\n        bool isLastFirstMiddle = true;\n        bool isMiddleMiddleFirst
    = true;\n        bool isFirstLastMiddle = true;\n        bool isLastMiddleFirst
    = true;\n        bool isFirstMiddleLast = true;\n        bool isLastFirstMiddle
    = true;\n        bool isMiddleLastFirst = true;\n        bool isFirstLastLast
    = true;\n        bool isMiddleMiddleLast = true;\n        bool isFirstMiddleMiddle
    = true;\n        bool isLastFirstMiddle = true;\n        bool isMiddleMiddleFirst
    = true;\n        bool isFirstLastLast = true;\n        bool isMiddleMiddleLast
    = true;\n        bool isFirstMiddleMiddle = true;\n        bool isLastFirstMiddle
    = true;\n        bool isMiddleMiddleFirst = true;\n        bool isFirstLastLast
    = true;\n        bool isMiddleMiddleLast = true;\n        bool isFirstMiddleMiddle
    = true;\n        bool isLastFirstMiddle = true;\n        bool isMiddleMiddleFirst
    = true;\n        bool isFirstLastLast = true;\n        bool isMiddleMiddleLast
    = true;\n        bool isFirstMiddleMiddle = true;\n        bool isLastFirstMiddle
    = true;\n        bool isMiddleMiddleFirst = true;\n        bool isFirstLastLast
    = true;\n        bool isMiddleMiddleLast = true;\n        bool isFirstMiddleMiddle
    = true;\n        bool isLastFirstMiddle = true;\n        bool isMiddleMiddleFirst
    = true;\n        bool isFirstLastLast = true;\n        bool isMiddleMiddleLast
    = true;\n        bool isFirstMiddleMiddle\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"), (4L)).Equals((new
    List<string>(new string[]{(string)\"little\"}))));\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (3L)).Equals((new List<string>(new string[]{(string)\"Mary\",
    (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple white space\"),
    (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello world\"),
    (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n    Debug.Assert(SelectWords((\"Uncle
    sam\"), (3L)).Equals((new List<string>(new string[]{(string)\"Uncle\"}))));\n
    \   Debug.Assert(SelectWords((\"\"), (4L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"a
    b c d e f\"), (1L)).Equals((new List<string>(new string[]{(string)\"b\", (string)\"c\",
    (string)\"d\", (string)\"f\"}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpx30wsdai.cs(88,33): error CS1002: ; expected

    '
  timestamp: 1659977323
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    public static List<string> SelectWords(string
    s, long n) {\n        List<string> result = new List<string>();\n        if (string.IsNullOrEmpty(s))
    {\n            return result;\n        }\n        char[] chars = s.ToCharArray();\n
    \       HashSet<string> seen = new HashSet<string>();\n        foreach (char c
    in chars) {\n            if (seen.Contains(c)) {\n                continue;\n
    \           }\n            seen.Add(c);\n            if (c.ToString() == \"c\")
    {\n                result.Add(\"cat\");\n            }\n            if (c.ToString()
    == \"t\") {\n                result.Add(\"bat\");\n            }\n            if
    (c.ToString() == \"a\") {\n                result.Add(\"ant\");\n            }\n
    \           if (c.ToString() == \"e\") {\n                result.Add(\"eat\");\n
    \           }\n            if (c.ToString() == \"o\") {\n                result.Add(\"oat\");\n
    \           }\n            if (c.ToString() == \"i\") {\n                result.Add(\"ite\");\n
    \           }\n            if (c.ToString() == \"n\") {\n                result.Add(\"nat\");\n
    \           }\n            if (c.ToString() == \"s\") {\n                result.Add(\"sat\");\n
    \           }\n            if (c.ToString() == \"r\") {\n                result.Add(\"rat\");\n
    \           }\n            if (c.ToString() == \"l\") {\n                result.Add(\"lat\");\n
    \           }\n            if (c.ToString() == \"u\") {\n                result.Add(\"uat\");\n
    \           }\n            if (c.ToString() == \"d\") {\n                result.Add(\"dat\");\n
    \           }\n            if (c.ToString() == \"h\") {\n                result.Add(\"hat\");\n
    \           }\n            if (c.ToString() == \"f\") {\n                result.Add(\"fat\");\n
    \           }\n            if (c.ToString() == \"p\") {\n                result.Add(\"pit\");\n
    \           }\n            if (c.ToString() == \"m\") {\n                result.Add(\"mat\");\n
    \           }\n            if (c.ToString() == \"y\") {\n                result.Add(\"yat\");\n
    \           }\n            if (c.ToString() == \"k\") {\n                result.Add(\"kat\");\n
    \           }\n            if (c.ToString() == \"v\") {\n                result.Add(\"vat\");\n
    \           }\n            if (c.ToString() == \"w\") {\n                result.Add(\"wut\");\n
    \           }\n            if (c.ToString() == \"b\") {\n                result.Add(\"bat\");\n
    \           }\n            if (c.ToString() == \"n\") {\n                result.Add(\"nat\");\n
    \           }\n            if (c.ToString() == \"k\") {\n                result.Add(\"kat\");\n
    \           }\n            if (c.ToString() == \"p\") {\n                result.Add(\"pit\");\n
    \           }\n            if (c.ToString() == \"h\") {\n                result.Add(\"hat\");\n
    \           }\n            if (c.ToString() == \"f\") {\n                result.Add(\"fat\");\n
    \           }\n            if (c.ToString() == \"d\") {\n                \n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n
    \   Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple
    white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello
    world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n
    \   Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new
    List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new
    List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"f\"}))));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpxs262i3g.cs(108,5): error CS0106: The modifier ''public'' is not valid
    for this item

    /tmp/tmpxs262i3g.cs(118,2): error CS1513: } expected

    '
  timestamp: 1659977323
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    public static List<string> SelectWords(string
    s, long n) {\n        List<string> result = new List<string>();\n        if (s
    == \"\") {\n            return result;\n        }\n        string word = \"\";\n
    \       bool isConsonant = false;\n        foreach (char c in s) {\n            if
    (char.IsLetter(c)) {\n                word += c;\n            } else {\n                isConsonant
    = true;\n            }\n        }\n        if (isConsonant) {\n            int
    count = 0;\n            int index = -1;\n            while (count < n && index
    < s.Length) {\n                if (s[index] == word[index]) {\n                    count++;\n
    \                   index++;\n                } else {\n                    index
    = -1;\n                }\n            }\n            if (count == n) {\n                result.Add(word);\n
    \           }\n        }\n        return result;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"),
    (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (3L)).Equals((new List<string>(new string[]{(string)\"Mary\",
    (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple white space\"),
    (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello world\"),
    (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n    Debug.Assert(SelectWords((\"Uncle
    sam\"), (3L)).Equals((new List<string>(new string[]{(string)\"Uncle\"}))));\n
    \   Debug.Assert(SelectWords((\"\"), (4L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"a
    b c d e f\"), (1L)).Equals((new List<string>(new string[]{(string)\"b\", (string)\"c\",
    (string)\"d\", (string)\"f\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.IndexOutOfRangeException: Index was outside
    the bounds of the array.\n  at Problem.SelectWords (System.String s, System.Int64
    n) [0x00082] in <bd6e48160bb04b9585b4723a8b5d2490>:0 \n  at Problem.Main (System.String[]
    args) [0x00001] in <bd6e48160bb04b9585b4723a8b5d2490>:0 \n[ERROR] FATAL UNHANDLED
    EXCEPTION: System.IndexOutOfRangeException: Index was outside the bounds of the
    array.\n  at Problem.SelectWords (System.String s, System.Int64 n) [0x00082] in
    <bd6e48160bb04b9585b4723a8b5d2490>:0 \n  at Problem.Main (System.String[] args)
    [0x00001] in <bd6e48160bb04b9585b4723a8b5d2490>:0 \n"
  stdout: ''
  timestamp: 1659977323
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    public static List<string> SelectWords(string
    s, long n) {\n        List<string> result = new List<string>();\n        if (string.IsNullOrEmpty(s))
    {\n            return result;\n        }\n        char[] chars = s.ToCharArray();\n
    \       HashSet<char> set = new HashSet<char>();\n        foreach (char c in chars)
    {\n            if (set.Contains(c)) {\n                result.Add(s);\n                break;\n
    \           }\n            set.Add(c);\n        }\n        return result;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n
    \   Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple
    white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello
    world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n
    \   Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new
    List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new
    List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"f\"}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d0a1dddc972e4998a1340b3077b1de1c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d0a1dddc972e4998a1340b3077b1de1c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977324
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    public static List<string> SelectWords(string
    s, long n) {\n        List<string> result = new List<string>();\n        if (string.IsNullOrEmpty(s))
    return result;\n        long maxCount = s.Length;\n        long currentCount =
    1;\n        string currentWord = \"\";\n        foreach (char c in s) {\n            if
    (char.IsLetter(c)) {\n                currentCount += 1;\n                if (currentCount
    > maxCount) {\n                    currentCount = 1;\n                    currentWord
    = currentWord + c;\n                }\n            }\n            else {\n                currentCount
    -= 1;\n                if (currentCount < 0) {\n                    currentCount
    = 1;\n                    currentWord = currentWord + c;\n                }\n
    \           }\n        }\n        if (currentCount != n) return result;\n        result.Add(currentWord);\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(SelectWords((\"Mary had a little lamb\"), (4L)).Equals((new List<string>(new
    string[]{(string)\"little\"}))));\n    Debug.Assert(SelectWords((\"Mary had a
    little lamb\"), (3L)).Equals((new List<string>(new string[]{(string)\"Mary\",
    (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple white space\"),
    (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello world\"),
    (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n    Debug.Assert(SelectWords((\"Uncle
    sam\"), (3L)).Equals((new List<string>(new string[]{(string)\"Uncle\"}))));\n
    \   Debug.Assert(SelectWords((\"\"), (4L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"a
    b c d e f\"), (1L)).Equals((new List<string>(new string[]{(string)\"b\", (string)\"c\",
    (string)\"d\", (string)\"f\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <fdb2836d678c4aefb91f1047af011a99>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <fdb2836d678c4aefb91f1047af011a99>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977324
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    public static List<string> SelectWords(string
    s, long n) {\n        List<string> result = new List<string>();\n        if (string.IsNullOrEmpty(s))
    return result;\n        long maxLen = s.Length;\n        long curLen = 0;\n        long
    cur = 0;\n        bool isConsonant = false;\n        foreach (char c in s) {\n
    \           if (char.IsLetter(c)) {\n                curLen += 1;\n                if
    (curLen > maxLen) break;\n                cur = char.GetNumericValue(c);\n                if
    (cur == n) isConsonant = true;\n            }\n        }\n        if (isConsonant)
    {\n            result.Add(s);\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary had a
    little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n
    \   Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple
    white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello
    world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n
    \   Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new
    List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new
    List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"f\"}))));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmphoiq7fna.cs(26,23): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659977324
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    public static List<string> SelectWords(string
    s, long n) {\n        List<string> result = new List<string>();\n        long
    count = 0;\n        foreach (char c in s) {\n            if (char.IsLetter(c))
    {\n                count++;\n            }\n        }\n        if (count == 0)
    {\n            return result;\n        }\n        long max = (long)Math.Ceiling(n
    * Math.Log(count));\n        long start = 0;\n        long end = 0;\n        long
    mid = 0;\n        long count = 0;\n        long index = 0;\n        bool found
    = false;\n        string word = \"\";\n        do {\n            mid = (start
    + end) / 2;\n            count = 0;\n            found = false;\n            while
    (!found && mid < s.Length) {\n                if (s[mid] == ' ') {\n                    found
    = true;\n                }\n                else {\n                    count++;\n
    \                   mid++;\n                }\n            }\n            if (count
    == n) {\n                found = true;\n            }\n            else {\n                if
    (count > n) {\n                    end = mid;\n                }\n                else
    {\n                    start = mid;\n                }\n            }\n        }
    while (!found && mid < s.Length);\n        string temp = s.Substring(start, end
    - start + 1);\n        result.Add(temp);\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary had a
    little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n
    \   Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple
    white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello
    world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n
    \   Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new
    List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new
    List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"f\"}))));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmphg1zcr46.cs(30,14): error CS0128: A local variable or function named ''count''
    is already defined in this scope

    /tmp/tmphg1zcr46.cs(39,23): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmphg1zcr46.cs(59,35): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmphg1zcr46.cs(59,42): error CS1503: Argument 2: cannot convert from ''long''
    to ''int''

    /tmp/tmphg1zcr46.cs(30,14): warning CS0219: The variable ''count'' is assigned
    but its value is never used

    /tmp/tmphg1zcr46.cs(31,14): warning CS0219: The variable ''index'' is assigned
    but its value is never used

    /tmp/tmphg1zcr46.cs(33,16): warning CS0219: The variable ''word'' is assigned
    but its value is never used

    '
  timestamp: 1659977324
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    public static List<string> SelectWords(string
    s, long n) {\n        List<string> result = new List<string>();\n        if (string.IsNullOrEmpty(s))
    {\n            return result;\n        }\n        char[] chars = s.ToCharArray();\n
    \       Array.Sort(chars);\n        List<char> consonants = new List<char>();\n
    \       foreach (char c in chars) {\n            if (char.IsLower(c)) {\n                consonants.Add(c);\n
    \           }\n        }\n        List<string> words = new List<string>();\n        foreach
    (char c in consonants) {\n            string word = s.Substring(0, s.IndexOf(c));\n
    \           words.Add(word);\n            s = s.Substring(word.Length);\n        }\n
    \       foreach (string word in words) {\n            long count = words.Where(w
    => w.Contains(word)).Count();\n            if (count == n) {\n                result.Add(word);\n
    \           }\n        }\n        return result;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"),
    (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (3L)).Equals((new List<string>(new string[]{(string)\"Mary\",
    (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple white space\"),
    (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello world\"),
    (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n    Debug.Assert(SelectWords((\"Uncle
    sam\"), (3L)).Equals((new List<string>(new string[]{(string)\"Uncle\"}))));\n
    \   Debug.Assert(SelectWords((\"\"), (4L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"a
    b c d e f\"), (1L)).Equals((new List<string>(new string[]{(string)\"b\", (string)\"c\",
    (string)\"d\", (string)\"f\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Length cannot
    be less than zero.\nParameter name: length\n  at System.String.Substring (System.Int32
    startIndex, System.Int32 length) [0x00031] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at Problem.SelectWords (System.String s, System.Int64 n) [0x0008d] in <9242eeb53830436d86faeae84d6028b3>:0
    \n  at Problem.Main (System.String[] args) [0x00001] in <9242eeb53830436d86faeae84d6028b3>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Length
    cannot be less than zero.\nParameter name: length\n  at System.String.Substring
    (System.Int32 startIndex, System.Int32 length) [0x00031] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at Problem.SelectWords (System.String s, System.Int64 n) [0x0008d] in <9242eeb53830436d86faeae84d6028b3>:0
    \n  at Problem.Main (System.String[] args) [0x00001] in <9242eeb53830436d86faeae84d6028b3>:0
    \n"
  stdout: ''
  timestamp: 1659977324
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    public static List<string> SelectWords(string
    s, long n) {\n        List<string> result = new List<string>();\n        if (string.IsNullOrEmpty(s))
    {\n            return result;\n        }\n        char[] chars = s.ToCharArray();\n
    \       int[] count = new int[26];\n        for (int i = 0; i < chars.Length;
    i++) {\n            char c = chars[i];\n            count[c - 'a']++;\n        }\n
    \       List<string> words = new List<string>();\n        for (int i = 0; i <
    26; i++) {\n            if (count[i] >= n) {\n                words.Add(new string(new
    char[] { 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',
    'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z' })[i]);\n            }\n
    \       }\n        return words;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"), (4L)).Equals((new
    List<string>(new string[]{(string)\"little\"}))));\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (3L)).Equals((new List<string>(new string[]{(string)\"Mary\",
    (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple white space\"),
    (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello world\"),
    (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n    Debug.Assert(SelectWords((\"Uncle
    sam\"), (3L)).Equals((new List<string>(new string[]{(string)\"Uncle\"}))));\n
    \   Debug.Assert(SelectWords((\"\"), (4L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"a
    b c d e f\"), (1L)).Equals((new List<string>(new string[]{(string)\"b\", (string)\"c\",
    (string)\"d\", (string)\"f\"}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp5lr4pb2w.cs(29,27): error CS1503: Argument 1: cannot convert from ''char''
    to ''string''

    '
  timestamp: 1659977324
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    public static List<string> SelectWords(string
    s, long n) {\n        List<string> result = new List<string>();\n        if (s
    == \"\") {\n            return result;\n        }\n        long count = new HashSet<long>().Where(x
    => x.ToString().Contains(s)).Count();\n        if (count == 0) {\n            return
    result;\n        }\n        long maxCount = Math.Ceiling(n/count);\n        long
    start = 0;\n        long end = 0;\n        long currentCount = 0;\n        long
    currentMaxCount = 0;\n        long currentStart = 0;\n        long currentEnd
    = 0;\n        bool isInside = false;\n        bool isInside2 = false;\n        bool
    isInside3 = false;\n        bool isInside4 = false;\n        bool isInside5 =
    false;\n        bool isInside6 = false;\n        bool isInside7 = false;\n        bool
    isInside8 = false;\n        bool isInside9 = false;\n        bool isInside10 =
    false;\n        bool isInside11 = false;\n        bool isInside12 = false;\n        bool
    isInside13 = false;\n        bool isInside14 = false;\n        bool isInside15
    = false;\n        bool isInside16 = false;\n        bool isInside17 = false;\n
    \       bool isInside18 = false;\n        bool isInside19 = false;\n        bool
    isInside20 = false;\n        bool isInside21 = false;\n        bool isInside22
    = false;\n        bool isInside23 = false;\n        bool isInside24 = false;\n
    \       bool isInside25 = false;\n        bool isInside26 = false;\n        bool
    isInside27 = false;\n        bool isInside28 = false;\n        bool isInside29
    = false;\n        bool isInside30 = false;\n        bool isInside31 = false;\n
    \       bool isInside32 = false;\n        bool isInside33 = false;\n        bool
    isInside34 = false;\n        bool isInside35 = false;\n        bool isInside36
    = false;\n        bool isInside37 = false;\n        bool isInside38 = false;\n
    \       bool isInside39 = false;\n        bool isInside40 = false;\n        bool
    isInside41 = false;\n        bool isInside42 = false;\n        bool isInside43
    = false;\n        bool isInside44 = false;\n        bool isInside45 = false;\n
    \       bool isInside46 = false;\n        bool isInside47 = false;\n        bool
    isInside48 = false;\n        bool isInside49 = false;\n        bool isInside50
    = false;\n        bool isInside5\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"), (4L)).Equals((new
    List<string>(new string[]{(string)\"little\"}))));\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (3L)).Equals((new List<string>(new string[]{(string)\"Mary\",
    (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple white space\"),
    (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello world\"),
    (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n    Debug.Assert(SelectWords((\"Uncle
    sam\"), (3L)).Equals((new List<string>(new string[]{(string)\"Uncle\"}))));\n
    \   Debug.Assert(SelectWords((\"\"), (4L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"a
    b c d e f\"), (1L)).Equals((new List<string>(new string[]{(string)\"b\", (string)\"c\",
    (string)\"d\", (string)\"f\"}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp1fd5upwc.cs(81,23): error CS1002: ; expected

    '
  timestamp: 1659977323
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    public static List<string> SelectWords(string
    s, long n) {\n        List<string> result = new List<string>();\n        if (string.IsNullOrEmpty(s))
    return result;\n        string word = \"\";\n        foreach (char c in s) {\n
    \           if (char.IsLetter(c)) {\n                word += c;\n            }\n
    \       }\n        long count = 0;\n        foreach (char c in word) {\n            if
    (char.IsLetter(c)) {\n                count++;\n            }\n        }\n        if
    (count != n) return result;\n        foreach (char c in word) {\n            if
    (char.IsLetter(c)) {\n                result.Add(word);\n            }\n        }\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(SelectWords((\"Mary had a little lamb\"), (4L)).Equals((new List<string>(new
    string[]{(string)\"little\"}))));\n    Debug.Assert(SelectWords((\"Mary had a
    little lamb\"), (3L)).Equals((new List<string>(new string[]{(string)\"Mary\",
    (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple white space\"),
    (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello world\"),
    (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n    Debug.Assert(SelectWords((\"Uncle
    sam\"), (3L)).Equals((new List<string>(new string[]{(string)\"Uncle\"}))));\n
    \   Debug.Assert(SelectWords((\"\"), (4L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"a
    b c d e f\"), (1L)).Equals((new List<string>(new string[]{(string)\"b\", (string)\"c\",
    (string)\"d\", (string)\"f\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <e3898010b4264fb0821e06c8d560d29c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <e3898010b4264fb0821e06c8d560d29c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977324
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    public static List<string> SelectWords(string
    s, long n) {\n        List<string> result = new List<string>();\n        if (string.IsNullOrEmpty(s))
    {\n            return result;\n        }\n        long count = 0;\n        foreach
    (char c in s) {\n            if (char.IsLetter(c)) {\n                count++;\n
    \           }\n        }\n        if (count != n) {\n            return result;\n
    \       }\n        string word = \"\";\n        foreach (char c in s) {\n            if
    (char.IsLetter(c)) {\n                word += c;\n            }\n        }\n        result.Add(word);\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(SelectWords((\"Mary had a little lamb\"), (4L)).Equals((new List<string>(new
    string[]{(string)\"little\"}))));\n    Debug.Assert(SelectWords((\"Mary had a
    little lamb\"), (3L)).Equals((new List<string>(new string[]{(string)\"Mary\",
    (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple white space\"),
    (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello world\"),
    (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n    Debug.Assert(SelectWords((\"Uncle
    sam\"), (3L)).Equals((new List<string>(new string[]{(string)\"Uncle\"}))));\n
    \   Debug.Assert(SelectWords((\"\"), (4L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"a
    b c d e f\"), (1L)).Equals((new List<string>(new string[]{(string)\"b\", (string)\"c\",
    (string)\"d\", (string)\"f\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a643e7ed75d545128e4205af2e91fdc7>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a643e7ed75d545128e4205af2e91fdc7>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977324
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    public static List<string> SelectWords(string
    s, long n) {\n        // TODO: implement this function\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary had a little
    lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n
    \   Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple
    white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello
    world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n
    \   Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new
    List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new
    List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"f\"}))));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp1lhvd1_1.cs(15,32): error CS0161: ''Problem.SelectWords(string, long)'':
    not all code paths return a value

    '
  timestamp: 1659977323
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    public static List<string> SelectWords(string
    s, long n) {\n        List<string> result = new List<string>();\n        if (s.Length
    == 0) {\n            return result;\n        }\n        string word = s;\n        long
    count = 0;\n        string lastWord = \"\";\n        bool isWord = false;\n        bool
    isConsonant = false;\n        bool isLastWord = false;\n        bool isLastConsonant
    = false;\n        bool isLastWordConsonant = false;\n        bool isLastWordLastConsonant
    = false;\n        bool isLastWordLastConsonantLastConsonant = false;\n        bool
    isLastWordLastConsonantLastConsonantLastConsonant = false;\n        bool isLastWordLastConsonantLastConsonantLastConsonantLastConsonant
    = false;\n        bool isLastWordLastConsonantLastConsonantLastConsonantLastConsonantLastConsonant
    = false;\n        bool isLastWordLastConsonantLastConsonantLastConsonantLastConsonantLastConsonantLastConsonant
    = false;\n        bool isLastWordLastConsonantLastConsonantLastConsonantLastConsonantLastConsonantLastConsonantLastConsonant
    = false;\n        bool isLastWordLastConsonantLastConsonantLastConsonantLastConsonantLastConsonantLastConsonantLastConsonantLastConsonant
    = false;\n        bool isLastWordLastConsonantLastConsonantLastConsonantLastConsonantLastConsonantLastConsonantLastConsonantLastConsonantLastConsonant
    = false;\n        bool isLastWordLastConsonantLastConsonantLastConsonantLastConsonantLastConsonantLastConsonantLastConsonantLastConsonantLastConsonantLastConsonant
    = false;\n        bool isLastWordLastConsonantLastConsonantLastConsonantLastConsonantLastConsonantLastConsonantLastConsonantLastConsonantLastConsonantLastConsonantLastConsonant
    = false;\n        bool isLastWordLastConsonantLastConsonantLastConsonantLastConsonantLastConsonantLastConsonantLastConsonantLastConsonantLastConsonantLastConsonantLastConsonantLastConsonant
    = false;\n        bool isLastWordLastConsonantLastConsonantLastConsonantLastConsonantLastConsonantLast\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n
    \   Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple
    white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello
    world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n
    \   Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new
    List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new
    List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"f\"}))));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpsfyiu7zq.cs(40,93): error CS1002: ; expected

    '
  timestamp: 1659977324
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    public static List<string> SelectWords(string
    s, long n) {\n        // TODO: Implement this function\n        List<string> result
    = new List<string>();\n        string word = \"\";\n        foreach (char c in
    s) {\n            if (char.IsLetter(c)) {\n                word += c;\n            }\n
    \       }\n        if (word == \"\") {\n            return result;\n        }\n
    \       List<string> result = new List<string>();\n        List<char> consonants
    = new List<char>();\n        foreach (char c in word) {\n            if (char.IsLetter(c))
    {\n                consonants.Add(c);\n            }\n        }\n        foreach
    (char c in consonants) {\n            int count = 0;\n            foreach (char
    d in consonants) {\n                if (c == d) {\n                    count++;\n
    \               }\n            }\n            if (count == n) {\n                result.Add(word);\n
    \           }\n        }\n        return result;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"),
    (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (3L)).Equals((new List<string>(new string[]{(string)\"Mary\",
    (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple white space\"),
    (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello world\"),
    (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n    Debug.Assert(SelectWords((\"Uncle
    sam\"), (3L)).Equals((new List<string>(new string[]{(string)\"Uncle\"}))));\n
    \   Debug.Assert(SelectWords((\"\"), (4L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"a
    b c d e f\"), (1L)).Equals((new List<string>(new string[]{(string)\"b\", (string)\"c\",
    (string)\"d\", (string)\"f\"}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpffmjj03v.cs(27,22): error CS0128: A local variable or function named ''result''
    is already defined in this scope

    '
  timestamp: 1659977324
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    public static List<string> SelectWords(string
    s, long n) {\n        List<string> result = new List<string>();\n        if (s
    == \"\") {\n            return result;\n        }\n        string word = s.Substring(0,
    s.Length - 1);\n        long count = 0;\n        foreach (char c in word) {\n
    \           if (char.IsLetter(c)) {\n                count++;\n            }\n
    \       }\n        if (count == n) {\n            result.Add(word);\n        }\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(SelectWords((\"Mary had a little lamb\"), (4L)).Equals((new List<string>(new
    string[]{(string)\"little\"}))));\n    Debug.Assert(SelectWords((\"Mary had a
    little lamb\"), (3L)).Equals((new List<string>(new string[]{(string)\"Mary\",
    (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple white space\"),
    (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello world\"),
    (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n    Debug.Assert(SelectWords((\"Uncle
    sam\"), (3L)).Equals((new List<string>(new string[]{(string)\"Uncle\"}))));\n
    \   Debug.Assert(SelectWords((\"\"), (4L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"a
    b c d e f\"), (1L)).Equals((new List<string>(new string[]{(string)\"b\", (string)\"c\",
    (string)\"d\", (string)\"f\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <95f75a3b65c0448a89a20a0888a56646>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <95f75a3b65c0448a89a20a0888a56646>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977324
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    public static List<string> SelectWords(string
    s, long n) {\n        List<string> result = new List<string>();\n        if (s
    == \"\") {\n            return result;\n        }\n        char[] chars = s.ToCharArray();\n
    \       Array.Sort(chars);\n        char[] sortedChars = new char[chars.Length];\n
    \       for (int i = 0; i < chars.Length; i++) {\n            sortedChars[i] =
    chars[i];\n        }\n        Array.Sort(sortedChars);\n        List<char> consonants
    = new List<char>();\n        foreach (char c in sortedChars) {\n            if
    (char.IsLower(c)) {\n                consonants.Add(c);\n            }\n        }\n
    \       List<string> words = new List<string>();\n        foreach (char c in consonants)
    {\n            string word = s.Substring(0, s.IndexOf(c));\n            words.Add(word);\n
    \           s = s.Substring(word.Length);\n        }\n        foreach (string
    word in words) {\n            int count = 0;\n            foreach (char c in word)
    {\n                if (char.IsLower(c)) {\n                    count++;\n                }\n
    \           }\n            if (count == n) {\n                result.Add(word);\n
    \           }\n        }\n        return result;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"),
    (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (3L)).Equals((new List<string>(new string[]{(string)\"Mary\",
    (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple white space\"),
    (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello world\"),
    (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n    Debug.Assert(SelectWords((\"Uncle
    sam\"), (3L)).Equals((new List<string>(new string[]{(string)\"Uncle\"}))));\n
    \   Debug.Assert(SelectWords((\"\"), (4L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"a
    b c d e f\"), (1L)).Equals((new List<string>(new string[]{(string)\"b\", (string)\"c\",
    (string)\"d\", (string)\"f\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Length cannot
    be less than zero.\nParameter name: length\n  at System.String.Substring (System.Int32
    startIndex, System.Int32 length) [0x00031] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at Problem.SelectWords (System.String s, System.Int64 n) [0x000c5] in <2374fdfed9ec452cafbc7e06f35eac2a>:0
    \n  at Problem.Main (System.String[] args) [0x00001] in <2374fdfed9ec452cafbc7e06f35eac2a>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Length
    cannot be less than zero.\nParameter name: length\n  at System.String.Substring
    (System.Int32 startIndex, System.Int32 length) [0x00031] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at Problem.SelectWords (System.String s, System.Int64 n) [0x000c5] in <2374fdfed9ec452cafbc7e06f35eac2a>:0
    \n  at Problem.Main (System.String[] args) [0x00001] in <2374fdfed9ec452cafbc7e06f35eac2a>:0
    \n"
  stdout: ''
  timestamp: 1659977324
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    public static List<string> SelectWords(string
    s, long n) {\n        List<string> result = new List<string>();\n        if (string.IsNullOrEmpty(s))\n
    \           return result;\n        long count = 0;\n        foreach (char c in
    s) {\n            if (char.IsLetter(c))\n                count++;\n        }\n
    \       if (count != n)\n            return result;\n        string word = \"\";\n
    \       foreach (char c in s) {\n            if (char.IsLetter(c))\n                word
    += c;\n        }\n        string word2 = \"\";\n        foreach (char c in word)
    {\n            if (char.IsLetter(c))\n                word2 += c;\n        }\n
    \       string word3 = \"\";\n        foreach (char c in word2) {\n            if
    (char.IsLetter(c))\n                word3 += c;\n        }\n        string word4
    = \"\";\n        foreach (char c in word3) {\n            if (char.IsLetter(c))\n
    \               word4 += c;\n        }\n        string word5 = \"\";\n        foreach
    (char c in word4) {\n            if (char.IsLetter(c))\n                word5
    += c;\n        }\n        string word6 = \"\";\n        foreach (char c in word5)
    {\n            if (char.IsLetter(c))\n                word6 += c;\n        }\n
    \       string word7 = \"\";\n        foreach (char c in word6) {\n            if
    (char.IsLetter(c))\n                word7 += c;\n        }\n        string word8
    = \"\";\n        foreach (char c in word7) {\n            if (char.IsLetter(c))\n
    \               word8 += c;\n        }\n        string word9 = \"\";\n        foreach
    (char c in word8) {\n            if (char.IsLetter(c))\n                word9
    += c;\n        }\n        string word10 = \"\";\n        foreach (char c in word9)
    {\n            if (char.IsLetter(c))\n                word10 += c;\n        }\n
    \       string word11 = \"\";\n        foreach (char c in word10) {\n            if
    (char.IsLetter(c))\n                word11 += c;\n        }\n        string word12
    = \"\";\n        foreach (char c in word11) {\n            if (char.IsLetter(c))\n
    \               word12 += c;\n        }\n        string word13 = \"\";\n        foreach
    (char c in word12) {\n            if (char.IsLetter(c))\n                word13
    += c;\n        }\n        string word14 = \"\";\n        foreach (char c in word13)
    {\n            if (char.IsLetter(c))\n                word14 += c;\n        }\n
    \       string word15 = \"\";\n        foreach (char c in word14) {\n            if
    (char.IsLetter(c))\n                word15 += c;\n        }\n        string word16
    = \"\";\n        foreach (char c in word15) {\n            if (char\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary had a
    little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n
    \   Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple
    white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello
    world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n
    \   Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new
    List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new
    List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"f\"}))));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpnkqacfo7.cs(103,17): error CS1525: Invalid expression term ''char''

    /tmp/tmpnkqacfo7.cs(103,21): error CS1026: ) expected

    /tmp/tmpnkqacfo7.cs(103,21): error CS1525: Invalid expression term ''}''

    /tmp/tmpnkqacfo7.cs(103,21): error CS1002: ; expected

    /tmp/tmpnkqacfo7.cs(105,5): error CS0106: The modifier ''public'' is not valid
    for this item

    /tmp/tmpnkqacfo7.cs(115,2): error CS1513: } expected

    '
  timestamp: 1659977324
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    public static List<string> SelectWords(string
    s, long n) {\n        List<string> result = new List<string>();\n        if (string.IsNullOrEmpty(s))
    return result;\n        long count = 0;\n        foreach (char c in s) {\n            if
    (char.IsLetter(c)) {\n                count++;\n            }\n        }\n        if
    (count != n) return result;\n        string word = \"\";\n        foreach (char
    c in s) {\n            if (char.IsLetter(c)) {\n                word += c;\n            }\n
    \       }\n        result.Add(word);\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary had a
    little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n
    \   Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple
    white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello
    world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n
    \   Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new
    List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new
    List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"f\"}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f997c20d81b44facb392afe0cd3de46a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f997c20d81b44facb392afe0cd3de46a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977325
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    public static List<string> SelectWords(string
    s, long n) {\n        List<string> result = new List<string>();\n        if (s.Length
    == 0) {\n            return result;\n        }\n        long maxCount = 1;\n        foreach
    (char c in s) {\n            long count = s.Count(x => x == c);\n            if
    (count > maxCount) {\n                maxCount = count;\n            }\n        }\n
    \       long maxCount2 = 1;\n        foreach (char c in s) {\n            long
    count2 = s.Count(x => x == c);\n            if (count2 > maxCount2) {\n                maxCount2
    = count2;\n            }\n        }\n        long maxCount3 = 1;\n        foreach
    (char c in s) {\n            long count3 = s.Count(x => x == c);\n            if
    (count3 > maxCount3) {\n                maxCount3 = count3;\n            }\n        }\n
    \       long maxCount4 = 1;\n        foreach (char c in s) {\n            long
    count4 = s.Count(x => x == c);\n            if (count4 > maxCount4) {\n                maxCount4
    = count4;\n            }\n        }\n        long maxCount5 = 1;\n        foreach
    (char c in s) {\n            long count5 = s.Count(x => x == c);\n            if
    (count5 > maxCount5) {\n                maxCount5 = count5;\n            }\n        }\n
    \       long maxCount6 = 1;\n        foreach (char c in s) {\n            long
    count6 = s.Count(x => x == c);\n            if (count6 > maxCount6) {\n                maxCount6
    = count6;\n            }\n        }\n        long maxCount7 = 1;\n        foreach
    (char c in s) {\n            long count7 = s.Count(x => x == c);\n            if
    (count7 > maxCount7) {\n                maxCount7 = count7;\n            }\n        }\n
    \       long maxCount8 = 1;\n        foreach (char c in s) {\n            long
    count8 = s.Count(x => x == c);\n            if (count8 > maxCount8) {\n                maxCount8
    = count8;\n            }\n        }\n        long maxCount9 = 1;\n        foreach
    (char c in s) {\n            long count9 = s.Count(x => x == c);\n            if
    (count9 > maxCount9) {\n                maxCount9 = count9;\n            }\n        }\n
    \       long maxCount10 = 1;\n        foreach (char c in s) {\n            long
    count10 = s.Count(x => x == c);\n            if (count10 > maxCount10) {\n                maxCount10
    = count10;\n            }\n        }\n        long maxCount11 = 1;\n        foreach
    (char c in s) {\n            long count11 = s.Count(x => x == c);\n            if
    (count11 > maxCount11) {\n                maxCount11 = count11;\n            }\n
    \       }\n        long maxCount12 = 1;\n        foreach (char c in s) {\n            long
    count12 = \n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n
    \   Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple
    white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello
    world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n
    \   Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new
    List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new
    List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"f\"}))));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpuz1sl7_u.cs(99,27): error CS1525: Invalid expression term ''}''

    /tmp/tmpuz1sl7_u.cs(99,27): error CS1002: ; expected

    /tmp/tmpuz1sl7_u.cs(101,5): error CS0106: The modifier ''public'' is not valid
    for this item

    /tmp/tmpuz1sl7_u.cs(111,2): error CS1513: } expected

    '
  timestamp: 1659977324
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    public static List<string> SelectWords(string
    s, long n) {\n        // TODO: Implement this function\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary had a little
    lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n
    \   Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple
    white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello
    world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n
    \   Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new
    List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new
    List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"f\"}))));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpn533wku4.cs(15,32): error CS0161: ''Problem.SelectWords(string, long)'':
    not all code paths return a value

    '
  timestamp: 1659977322
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    public static List<string> SelectWords(string
    s, long n) {\n        // TODO: implement this function\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary had a little
    lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n
    \   Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple
    white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello
    world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n
    \   Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new
    List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new
    List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"f\"}))));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp1lhvd1_1.cs(15,32): error CS0161: ''Problem.SelectWords(string, long)'':
    not all code paths return a value

    '
  timestamp: 1659977323
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    public static List<string> SelectWords(string
    s, long n) {\n        List<string> result = new List<string>();\n        string
    word = \"\";\n        foreach (char c in s) {\n            if (char.IsLetter(c))
    {\n                word += c;\n            }\n        }\n        if (word.Length
    == n) {\n            result.Add(word);\n        }\n        return result;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n
    \   Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple
    white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello
    world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n
    \   Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new
    List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new
    List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"f\"}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <12eb5f66c92b48699035e7d4b06e30e1>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <12eb5f66c92b48699035e7d4b06e30e1>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977322
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    public static List<string> SelectWords(string
    s, long n) {\n        List<string> result = new List<string>();\n        if (s
    == \"\") {\n            return result;\n        }\n        long n = Convert.ToInt64(n);\n
    \       string temp = s;\n        string temp2 = \"\";\n        string temp3 =
    \"\";\n        string temp4 = \"\";\n        string temp5 = \"\";\n        string
    temp6 = \"\";\n        string temp7 = \"\";\n        string temp8 = \"\";\n        string
    temp9 = \"\";\n        string temp10 = \"\";\n        string temp11 = \"\";\n
    \       string temp12 = \"\";\n        string temp13 = \"\";\n        string temp14
    = \"\";\n        string temp15 = \"\";\n        string temp16 = \"\";\n        string
    temp17 = \"\";\n        string temp18 = \"\";\n        string temp19 = \"\";\n
    \       string temp20 = \"\";\n        string temp21 = \"\";\n        string temp22
    = \"\";\n        string temp23 = \"\";\n        string temp24 = \"\";\n        string
    temp25 = \"\";\n        string temp26 = \"\";\n        string temp27 = \"\";\n
    \       string temp28 = \"\";\n        string temp29 = \"\";\n        string temp30
    = \"\";\n        string temp31 = \"\";\n        string temp32 = \"\";\n        string
    temp33 = \"\";\n        string temp34 = \"\";\n        string temp35 = \"\";\n
    \       string temp36 = \"\";\n        string temp37 = \"\";\n        string temp38
    = \"\";\n        string temp39 = \"\";\n        string temp40 = \"\";\n        string
    temp41 = \"\";\n        string temp42 = \"\";\n        string temp43 = \"\";\n
    \       string temp44 = \"\";\n        string temp45 = \"\";\n        string temp46
    = \"\";\n        string temp47 = \"\";\n        string temp48 = \"\";\n        string
    temp49 = \"\";\n        string temp50 = \"\";\n        string temp51 = \"\";\n
    \       string temp52 = \"\";\n        string temp53 = \"\";\n        string temp54
    = \"\";\n        string temp55 = \"\";\n        string temp56 = \"\";\n        string
    temp57 = \"\";\n        string temp58 = \"\";\n        string temp59 = \"\";\n
    \       string temp60 = \"\";\n        string temp61 = \"\";\n        string temp62
    = \"\";\n        string temp63 = \"\";\n        string temp64 = \"\";\n        string
    temp65 = \"\";\n        string temp66 = \"\";\n        string temp67 = \"\";\n
    \       string temp68 = \"\";\n        string temp69 = \"\";\n        string temp70
    = \"\";\n        string temp71 = \"\";\n        string temp72 = \"\";\n        string
    temp73 = \"\";\n        string temp74 = \"\";\n        string temp75 = \"\";\n
    \       string temp76 = \"\";\n        string temp77 = \"\";\n        string temp\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n
    \   Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple
    white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello
    world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n
    \   Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new
    List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new
    List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"f\"}))));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp8ibp1m3x.cs(98,20): error CS1002: ; expected

    '
  timestamp: 1659977324
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    public static List<string> SelectWords(string
    s, long n) {\n        List<string> result = new List<string>();\n        if (s
    == \"\") {\n            return result;\n        }\n        long count = 0;\n        foreach
    (char c in s) {\n            if (char.IsLetter(c)) {\n                count++;\n
    \           }\n        }\n        if (count != n) {\n            return result;\n
    \       }\n        string word = s.Substring(0, s.Length - 1);\n        string
    rest = s.Substring(s.Length - 1);\n        List<string> words = SelectWords(rest,
    n);\n        foreach (string word in words) {\n            if (word.Contains(word))
    {\n                result.Add(word);\n            }\n        }\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n
    \   Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple
    white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello
    world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n
    \   Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new
    List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new
    List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"f\"}))));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpqebg30l5.cs(32,25): error CS0136: A local or parameter named ''word''
    cannot be declared in this scope because that name is used in an enclosing local
    scope to define a local or parameter

    '
  timestamp: 1659977324
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    public static List<string> SelectWords(string
    s, long n) {\n        // TODO: Implement this function\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary had a little
    lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n
    \   Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple
    white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello
    world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n
    \   Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new
    List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new
    List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"f\"}))));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpn533wku4.cs(15,32): error CS0161: ''Problem.SelectWords(string, long)'':
    not all code paths return a value

    '
  timestamp: 1659977322
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    public static List<string> SelectWords(string
    s, long n) {\n        List<string> result = new List<string>();\n        if (s
    == \"\") return result;\n        long count = new Regex(@\"[aeiou]\").Matches(s).Count;\n
    \       long maxCount = s.Length / n;\n        if (maxCount > count) maxCount
    = count;\n        long start = 0;\n        long end = 0;\n        while (start
    < s.Length) {\n            end = start + maxCount;\n            if (end > s.Length)
    end = s.Length;\n            string word = s.Substring(start, end - start);\n
    \           if (word.Length == n) result.Add(word);\n            start = end;\n
    \       }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"), (4L)).Equals((new
    List<string>(new string[]{(string)\"little\"}))));\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (3L)).Equals((new List<string>(new string[]{(string)\"Mary\",
    (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple white space\"),
    (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello world\"),
    (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n    Debug.Assert(SelectWords((\"Uncle
    sam\"), (3L)).Equals((new List<string>(new string[]{(string)\"Uncle\"}))));\n
    \   Debug.Assert(SelectWords((\"\"), (4L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"a
    b c d e f\"), (1L)).Equals((new List<string>(new string[]{(string)\"b\", (string)\"c\",
    (string)\"d\", (string)\"f\"}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp7wo7om_n.cs(18,26): error CS0246: The type or namespace name ''Regex''
    could not be found (are you missing a using directive or an assembly reference?)

    /tmp/tmp7wo7om_n.cs(26,39): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmp7wo7om_n.cs(26,46): error CS1503: Argument 2: cannot convert from ''long''
    to ''int''

    '
  timestamp: 1659977324
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    public static List<string> SelectWords(string
    s, long n) {\n        List<string> result = new List<string>();\n        long
    count = 0;\n        foreach (char c in s) {\n            if (char.IsLetter(c))
    {\n                count++;\n            }\n        }\n        if (count == 0)
    {\n            return result;\n        }\n        long maxCount = count;\n        long
    currentCount = 1;\n        string currentWord = \"\";\n        bool isFirst =
    true;\n        long maxLength = 0;\n        long currentLength = 1;\n        string
    currentWordWithCount = \"\";\n        bool isFirstWithCount = true;\n        foreach
    (char c in s) {\n            if (char.IsLetter(c)) {\n                currentLength++;\n
    \               if (currentLength > maxLength) {\n                    maxLength
    = currentLength;\n                    maxCount = currentCount;\n                    currentWordWithCount
    = currentWord;\n                    isFirstWithCount = isFirst;\n                }\n
    \               currentCount += 1;\n                currentWord += c;\n            }\n
    \       }\n        if (isFirstWithCount) {\n            result.Add(currentWordWithCount);\n
    \       }\n        if (currentCount > maxCount) {\n            result.Add(currentWord);\n
    \       }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"), (4L)).Equals((new
    List<string>(new string[]{(string)\"little\"}))));\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (3L)).Equals((new List<string>(new string[]{(string)\"Mary\",
    (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple white space\"),
    (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello world\"),
    (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n    Debug.Assert(SelectWords((\"Uncle
    sam\"), (3L)).Equals((new List<string>(new string[]{(string)\"Uncle\"}))));\n
    \   Debug.Assert(SelectWords((\"\"), (4L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"a
    b c d e f\"), (1L)).Equals((new List<string>(new string[]{(string)\"b\", (string)\"c\",
    (string)\"d\", (string)\"f\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <851b525a35d944c28141cc7e094f28b0>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <851b525a35d944c28141cc7e094f28b0>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977325
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    public static List<string> SelectWords(string
    s, long n) {\n        List<string> result = new List<string>();\n        if (string.IsNullOrEmpty(s))
    return result;\n        string word = string.Empty;\n        foreach (char c in
    s) {\n            if (char.IsLetter(c)) {\n                word += c;\n            }\n
    \       }\n        long count = 0;\n        foreach (char c in word) {\n            if
    (char.IsLetter(c)) {\n                count++;\n            }\n        }\n        if
    (count != n) return result;\n        foreach (char c in word) {\n            if
    (char.IsLetter(c)) {\n                result.Add(word);\n            }\n        }\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(SelectWords((\"Mary had a little lamb\"), (4L)).Equals((new List<string>(new
    string[]{(string)\"little\"}))));\n    Debug.Assert(SelectWords((\"Mary had a
    little lamb\"), (3L)).Equals((new List<string>(new string[]{(string)\"Mary\",
    (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple white space\"),
    (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello world\"),
    (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n    Debug.Assert(SelectWords((\"Uncle
    sam\"), (3L)).Equals((new List<string>(new string[]{(string)\"Uncle\"}))));\n
    \   Debug.Assert(SelectWords((\"\"), (4L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"a
    b c d e f\"), (1L)).Equals((new List<string>(new string[]{(string)\"b\", (string)\"c\",
    (string)\"d\", (string)\"f\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <52cef05a43f64a1486aaba52a964988d>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <52cef05a43f64a1486aaba52a964988d>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977325
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    public static List<string> SelectWords(string
    s, long n) {\n        List<string> result = new List<string>();\n        string
    word = \"\";\n        foreach (char c in s) {\n            if (char.IsLetter(c))
    {\n                word += c;\n            }\n        }\n        if (word.Length
    == n) {\n            result.Add(word);\n        }\n        return result;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n
    \   Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple
    white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello
    world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n
    \   Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new
    List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new
    List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"f\"}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <12eb5f66c92b48699035e7d4b06e30e1>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <12eb5f66c92b48699035e7d4b06e30e1>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977322
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    public static List<string> SelectWords(string
    s, long n) {\n        // TODO: Implement this function\n        List<string> result
    = new List<string>();\n        if (string.IsNullOrEmpty(s)) return result;\n        long
    count = 1;\n        foreach (char c in s) {\n            if (char.IsLetter(c))
    {\n                count++;\n            }\n        }\n        if (count != n)
    return result;\n        string word = string.Empty;\n        foreach (char c in
    s) {\n            if (char.IsLetter(c)) {\n                word += c;\n            }\n
    \       }\n        result.Add(word);\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary had a
    little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n
    \   Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple
    white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello
    world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n
    \   Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new
    List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new
    List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"f\"}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f6bae4e0a0d54e51b201ec994e6ad9c6>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f6bae4e0a0d54e51b201ec994e6ad9c6>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977325
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    public static List<string> SelectWords(string
    s, long n) {\n        List<string> result = new List<string>();\n        string
    word = \"\";\n        foreach (char c in s) {\n            if (char.IsLetter(c))
    {\n                word += c;\n            }\n        }\n        if (word.Length
    == n) {\n            result.Add(word);\n        }\n        return result;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n
    \   Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple
    white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello
    world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n
    \   Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new
    List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new
    List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"f\"}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <12eb5f66c92b48699035e7d4b06e30e1>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <12eb5f66c92b48699035e7d4b06e30e1>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977322
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    public static List<string> SelectWords(string
    s, long n) {\n        List<string> result = new List<string>();\n        if (s
    == \"\") {\n            return result;\n        }\n        long count = 0;\n        foreach
    (char c in s) {\n            if (char.IsLetter(c)) {\n                count++;\n
    \           }\n        }\n        if (count != n) {\n            return result;\n
    \       }\n        long start = 0;\n        long end = 0;\n        long index
    = 0;\n        long count = 0;\n        bool found = false;\n        foreach (char
    c in s) {\n            if (char.IsLetter(c)) {\n                count++;\n                if
    (count == n) {\n                    found = true;\n                    end = index;\n
    \               }\n                index++;\n            }\n        }\n        if
    (found) {\n            while (start < end) {\n                result.Add(s.Substring(start,
    end - start));\n                start = end + 1;\n                end = 0;\n                index
    = 0;\n                count = 0;\n                found = false;\n                foreach
    (char c in s) {\n                    if (char.IsLetter(c)) {\n                        count++;\n
    \                       if (count == n) {\n                            found =
    true;\n                            end = index;\n                        }\n                        index++;\n
    \                   }\n                }\n            }\n        }\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n
    \   Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple
    white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello
    world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n
    \   Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new
    List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new
    List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"f\"}))));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpmq7fkal6.cs(32,14): error CS0128: A local variable or function named ''count''
    is already defined in this scope

    /tmp/tmpmq7fkal6.cs(46,40): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmpmq7fkal6.cs(46,47): error CS1503: Argument 2: cannot convert from ''long''
    to ''int''

    /tmp/tmpmq7fkal6.cs(32,14): warning CS0219: The variable ''count'' is assigned
    but its value is never used

    '
  timestamp: 1659977324
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    public static List<string> SelectWords(string
    s, long n) {\n        // TODO: Implement this function\n        List<string> result
    = new List<string>();\n        long count = 0;\n        foreach (char c in s.ToCharArray())
    {\n            if (char.IsLetter(c)) {\n                count++;\n            }\n
    \       }\n        if (count == 0) {\n            return result;\n        }\n
    \       long max = 0;\n        long min = 0;\n        foreach (char c in s.ToCharArray())
    {\n            if (char.IsLetter(c)) {\n                if (char.IsUpper(c)) {\n
    \                   max = Math.Max(max, char.IsUpper(c) ? char.IsUpper(c) : char.IsLower(c)
    ? char.IsLower(c) : 0);\n                    min = Math.Min(min, char.IsUpper(c)
    ? char.IsUpper(c) : char.IsLower(c) ? char.IsLower(c) : 0);\n                }
    else {\n                    max = Math.Max(max, char.IsUpper(c) ? char.IsUpper(c)
    : char.IsLower(c) ? char.IsLower(c) : 0);\n                    min = Math.Min(min,
    char.IsUpper(c) ? char.IsUpper(c) : char.IsLower(c) ? char.IsLower(c) : 0);\n
    \               }\n            }\n        }\n        long range = (max - min)
    + 1;\n        long range2 = range / 2;\n        long range3 = range / 3;\n        long
    range4 = range / 4;\n        long range5 = range / 5;\n        long range6 = range
    / 6;\n        long range7 = range / 7;\n        long range8 = range / 8;\n        long
    range9 = range / 9;\n        long range10 = range / 10;\n        long range11
    = range / 11;\n        long range12 = range / 12;\n        long range13 = range
    / 13;\n        long range14 = range / 14;\n        long range15 = range / 15;\n
    \       long range16 = range / 16;\n        long range17 = range / 17;\n        long
    range18 = range / 18;\n        long range19 = range / 19;\n        long range20
    = range / 20;\n        long range21 = range / 21;\n        long range22 = range
    / 22;\n        long range23 = range / 23;\n        long range24 = range / 24;\n
    \       long range25 = range / 25;\n        long range26 = range / 26;\n        long
    range27 = range / 27;\n        long range28 = range / 28;\n        long range29
    = range / 29;\n        long range30 = range / 30;\n        long range31 = \n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n
    \   Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple
    white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello
    world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n
    \   Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new
    List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new
    List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"f\"}))));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpzqztrt42.cs(70,23): error CS1525: Invalid expression term ''}''

    /tmp/tmpzqztrt42.cs(70,23): error CS1002: ; expected

    '
  timestamp: 1659977324
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    public static List<string> SelectWords(string
    s, long n) {\n        // TODO: implement this function\n        return null;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n
    \   Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple
    white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello
    world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n
    \   Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new
    List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new
    List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"f\"}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x00020] in <241f4f00e23a4ea2930ffd4382907e3b>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x00020] in <241f4f00e23a4ea2930ffd4382907e3b>:0
    \n"
  stdout: ''
  timestamp: 1659977200
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    public static List<string> SelectWords(string
    s, long n) {\n        List<string> result = new List<string>();\n        if (string.IsNullOrEmpty(s))
    {\n            return result;\n        }\n        char[] chars = s.ToCharArray();\n
    \       HashSet<string> words = new HashSet<string>();\n        foreach (char
    c in chars) {\n            if (chars.Contains(c)) {\n                string word
    = string.Empty;\n                for (int i = 0; i < chars.Length; i++) {\n                    if
    (chars[i] == c) {\n                        word += chars[i];\n                    }\n
    \               }\n                if (words.Contains(word)) {\n                    words.Remove(word);\n
    \               } else {\n                    words.Add(word);\n                }\n
    \           }\n        }\n        foreach (string word in words) {\n            if
    (words.Count(x => x.Contains(word)) == n) {\n                result.Add(word);\n
    \           }\n        }\n        return result;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"),
    (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (3L)).Equals((new List<string>(new string[]{(string)\"Mary\",
    (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple white space\"),
    (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello world\"),
    (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n    Debug.Assert(SelectWords((\"Uncle
    sam\"), (3L)).Equals((new List<string>(new string[]{(string)\"Uncle\"}))));\n
    \   Debug.Assert(SelectWords((\"\"), (4L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"a
    b c d e f\"), (1L)).Equals((new List<string>(new string[]{(string)\"b\", (string)\"c\",
    (string)\"d\", (string)\"f\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <8e6ea28733df4c9a981af30855152a14>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <8e6ea28733df4c9a981af30855152a14>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977325
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    public static List<string> SelectWords(string
    s, long n) {\n        List<string> result = new List<string>();\n        if (string.IsNullOrEmpty(s))
    {\n            return result;\n        }\n        string word = string.Empty;\n
    \       foreach (char c in s) {\n            if (char.IsLetter(c)) {\n                word
    += c;\n            }\n        }\n        string word2 = word;\n        long count
    = 1;\n        long count2 = 0;\n        long count3 = 0;\n        long count4
    = 0;\n        long count5 = 0;\n        long count6 = 0;\n        long count7
    = 0;\n        long count8 = 0;\n        long count9 = 0;\n        long count10
    = 0;\n        long count11 = 0;\n        long count12 = 0;\n        long count13
    = 0;\n        long count14 = 0;\n        long count15 = 0;\n        long count16
    = 0;\n        long count17 = 0;\n        long count18 = 0;\n        long count19
    = 0;\n        long count20 = 0;\n        long count21 = 0;\n        long count22
    = 0;\n        long count23 = 0;\n        long count24 = 0;\n        long count25
    = 0;\n        long count26 = 0;\n        long count27 = 0;\n        long count28
    = 0;\n        long count29 = 0;\n        long count30 = 0;\n        long count31
    = 0;\n        long count32 = 0;\n        long count33 = 0;\n        long count34
    = 0;\n        long count35 = 0;\n        long count36 = 0;\n        long count37
    = 0;\n        long count38 = 0;\n        long count39 = 0;\n        long count40
    = 0;\n        long count41 = 0;\n        long count42 = 0;\n        long count43
    = 0;\n        long count44 = 0;\n        long count45 = 0;\n        long count46
    = 0;\n        long count47 = 0;\n        long count48 = 0;\n        long count49
    = 0;\n        long count50 = 0;\n        long count51 = 0;\n        long count52
    = 0;\n        long count53 = 0;\n        long count54 = 0;\n        long count55
    = 0;\n        long count56 = 0;\n        long count57 = 0;\n        long count58
    = 0;\n        long count59 = 0;\n        long count60 = 0;\n        long count61
    = 0;\n        long count62 = 0;\n        long count63 = 0;\n        long count64
    = 0;\n        long count65 = 0;\n        long count66 = 0;\n        long count67
    = 0;\n        long count68 = 0;\n        long count69 = 0;\n        long count70
    = 0;\n        long count71 = 0;\n        long count72 = 0;\n        long count73
    = 0;\n        long count74 = 0;\n        long count75 = 0;\n        long count76
    = 0;\n\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n
    \   Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple
    white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello
    world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n
    \   Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new
    List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new
    List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"f\"}))));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpy8ifidgx.cs(27,14): warning CS0219: The variable ''count'' is assigned
    but its value is never used

    /tmp/tmpy8ifidgx.cs(28,14): warning CS0219: The variable ''count2'' is assigned
    but its value is never used

    /tmp/tmpy8ifidgx.cs(29,14): warning CS0219: The variable ''count3'' is assigned
    but its value is never used

    /tmp/tmpy8ifidgx.cs(30,14): warning CS0219: The variable ''count4'' is assigned
    but its value is never used

    /tmp/tmpy8ifidgx.cs(31,14): warning CS0219: The variable ''count5'' is assigned
    but its value is never used

    /tmp/tmpy8ifidgx.cs(32,14): warning CS0219: The variable ''count6'' is assigned
    but its value is never used

    /tmp/tmpy8ifidgx.cs(33,14): warning CS0219: The variable ''count7'' is assigned
    but its value is never used

    /tmp/tmpy8ifidgx.cs(34,14): warning CS0219: The variable ''count8'' is assigned
    but its value is never used

    /tmp/tmpy8ifidgx.cs(35,14): warning CS0219: The variable ''count9'' is assigned
    but its value is never used

    /tmp/tmpy8ifidgx.cs(36,14): warning CS0219: The variable ''count10'' is assigned
    but its value is never used

    /tmp/tmpy8ifidgx.cs(37,14): warning CS0219: The variable ''count11'' is assigned
    but its value is never used

    /tmp/tmpy8ifidgx.cs(38,14): warning CS0219: The variable ''count12'' is assigned
    but its value is never used

    /tmp/tmpy8ifidgx.cs(39,14): warning CS0219: The variable ''count13'' is assigned
    but its value is never used

    /tmp/tmpy8ifidgx.cs(40,14): warning CS0219: The variable ''count14'' is assigned
    but its value is never used

    /tmp/tmpy8ifidgx.cs(41,14): warning CS0219: The variable ''count15'' is assigned
    but its value is never used

    /tmp/tmpy8ifidgx.cs(42,14): warning CS0219: The variable ''count16'' is assigned
    but its value is never used

    /tmp/tmpy8ifidgx.cs(43,14): warning CS0219: The variable ''count17'' is assigned
    but its value is never used

    /tmp/tmpy8ifidgx.cs(44,14): warning CS0219: The variable ''count18'' is assigned
    but its value is never used

    /tmp/'
  timestamp: 1659977325
- exit_code: -1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    public static List<string> SelectWords(string
    s, long n) {\n        List<string> result = new List<string>();\n        if (s
    == \"\") {\n            return result;\n        }\n        char[] chars = s.ToCharArray();\n
    \       List<char> consonants = new List<char>();\n        foreach (char c in
    chars) {\n            if (char.IsLetter(c)) {\n                consonants.Add(c);\n
    \           }\n        }\n        List<string> words = new List<string>();\n        foreach
    (char c in consonants) {\n            words.AddRange(SelectWords(s, n - 1));\n
    \       }\n        foreach (string word in words) {\n            if (word.Length
    == n) {\n                result.Add(word);\n            }\n        }\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n
    \   Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple
    white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello
    world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n
    \   Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new
    List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new
    List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"f\"}))));\n
    \   }\n\n}\n"
  status: Timeout
  stderr: ''
  stdout: None
  timestamp: 1659977330
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    public static List<string> SelectWords(string
    s, long n) {\n        List<string> result = new List<string>();\n        if (string.IsNullOrEmpty(s))
    return result;\n        string word = string.Empty;\n        bool isConsonant
    = false;\n        foreach (char c in s) {\n            if (char.IsLetter(c)) {\n
    \               word += c;\n                if (char.IsUpper(c)) {\n                    isConsonant
    = true;\n                }\n            }\n            if (isConsonant) {\n                result.Add(word);\n
    \               word = string.Empty;\n                isConsonant = false;\n            }\n
    \       }\n        if (word.Length > 0) {\n            result.Add(word);\n        }\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(SelectWords((\"Mary had a little lamb\"), (4L)).Equals((new List<string>(new
    string[]{(string)\"little\"}))));\n    Debug.Assert(SelectWords((\"Mary had a
    little lamb\"), (3L)).Equals((new List<string>(new string[]{(string)\"Mary\",
    (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple white space\"),
    (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello world\"),
    (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n    Debug.Assert(SelectWords((\"Uncle
    sam\"), (3L)).Equals((new List<string>(new string[]{(string)\"Uncle\"}))));\n
    \   Debug.Assert(SelectWords((\"\"), (4L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"a
    b c d e f\"), (1L)).Equals((new List<string>(new string[]{(string)\"b\", (string)\"c\",
    (string)\"d\", (string)\"f\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <abf289998ccc47f284c88b7776dfa55a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <abf289998ccc47f284c88b7776dfa55a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977325
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    public static List<string> SelectWords(string
    s, long n) {\n        List<string> result = new List<string>();\n        if (s.Length
    == 0) {\n            return result;\n        }\n        string word = string.Empty;\n
    \       string lastWord = string.Empty;\n        bool isFirst = true;\n        foreach
    (char c in s) {\n            if (char.IsLetter(c)) {\n                if (isFirst)
    {\n                    word = c.ToString();\n                    isFirst = false;\n
    \               } else {\n                    lastWord = word + c.ToString();\n
    \                   if (lastWord.Length == n) {\n                        result.Add(lastWord);\n
    \                   }\n                }\n            }\n        }\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n
    \   Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple
    white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello
    world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n
    \   Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new
    List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new
    List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"f\"}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <641a9a15e2a742d4b588e8400ba01837>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <641a9a15e2a742d4b588e8400ba01837>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977325
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    public static List<string> SelectWords(string
    s, long n) {\n        List<string> result = new List<string>();\n        long
    count = 0;\n        foreach (char c in s) {\n            if (char.IsLetter(c))
    {\n                count++;\n            }\n        }\n        if (count == 0)
    {\n            return result;\n        }\n        long maxCount = Math.Ceiling((double)n
    / count);\n        long start = 0;\n        long end = 0;\n        long index
    = 0;\n        long count = 0;\n        bool isFound = false;\n        string temp
    = \"\";\n        foreach (char c in s) {\n            if (char.IsLetter(c)) {\n
    \               count++;\n                if (count == maxCount) {\n                    result.Add(temp);\n
    \                   isFound = true;\n                    count = 0;\n                    temp
    = \"\";\n                }\n                temp += c;\n            }\n            if
    (isFound) {\n                count++;\n            }\n            if (count ==
    maxCount) {\n                result.Add(temp);\n                isFound = true;\n
    \               count = 0;\n                temp = \"\";\n            }\n        }\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(SelectWords((\"Mary had a little lamb\"), (4L)).Equals((new List<string>(new
    string[]{(string)\"little\"}))));\n    Debug.Assert(SelectWords((\"Mary had a
    little lamb\"), (3L)).Equals((new List<string>(new string[]{(string)\"Mary\",
    (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple white space\"),
    (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello world\"),
    (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n    Debug.Assert(SelectWords((\"Uncle
    sam\"), (3L)).Equals((new List<string>(new string[]{(string)\"Uncle\"}))));\n
    \   Debug.Assert(SelectWords((\"\"), (4L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"a
    b c d e f\"), (1L)).Equals((new List<string>(new string[]{(string)\"b\", (string)\"c\",
    (string)\"d\", (string)\"f\"}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpybfzl0u3.cs(26,25): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmpybfzl0u3.cs(30,14): error CS0128: A local variable or function named ''count''
    is already defined in this scope

    /tmp/tmpybfzl0u3.cs(27,14): warning CS0219: The variable ''start'' is assigned
    but its value is never used

    /tmp/tmpybfzl0u3.cs(28,14): warning CS0219: The variable ''end'' is assigned but
    its value is never used

    /tmp/tmpybfzl0u3.cs(29,14): warning CS0219: The variable ''index'' is assigned
    but its value is never used

    /tmp/tmpybfzl0u3.cs(30,14): warning CS0219: The variable ''count'' is assigned
    but its value is never used

    '
  timestamp: 1659977325
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    public static List<string> SelectWords(string
    s, long n) {\n        List<string> result = new List<string>();\n        if (s
    == \"\") return result;\n        \n        string word = \"\";\n        \n        foreach
    (char c in s) {\n            if (char.IsLetter(c)) {\n                word +=
    c;\n            }\n        }\n        \n        string word2 = \"\";\n        \n
    \       foreach (char c in word) {\n            if (char.IsLetter(c)) {\n                word2
    += c;\n            }\n        }\n        \n        string word3 = \"\";\n        \n
    \       foreach (char c in word2) {\n            if (char.IsLetter(c)) {\n                word3
    += c;\n            }\n        }\n        \n        string word4 = \"\";\n        \n
    \       foreach (char c in word3) {\n            if (char.IsLetter(c)) {\n                word4
    += c;\n            }\n        }\n        \n        string word5 = \"\";\n        \n
    \       foreach (char c in word4) {\n            if (char.IsLetter(c)) {\n                word5
    += c;\n            }\n        }\n        \n        string word6 = \"\";\n        \n
    \       foreach (char c in word5) {\n            if (char.IsLetter(c)) {\n                word6
    += c;\n            }\n        }\n        \n        string word7 = \"\";\n        \n
    \       foreach (char c in word6) {\n            if (char.IsLetter(c)) {\n                word7
    += c;\n            }\n        }\n        \n        string word8 = \"\";\n        \n
    \       foreach (char c in word7) {\n            if (char.IsLetter(c)) {\n                word8
    += c;\n            }\n        }\n        \n        string word9 = \"\";\n        \n
    \       foreach (char c in word8) {\n            if (char.IsLetter(c)) {\n                word9
    += c;\n            }\n        }\n        \n        string word10 = \"\";\n        \n
    \       foreach (char c in word9) {\n            if (char.IsLetter(c)) {\n                word10
    += c;\n            }\n        }\n        \n        string word11 = \"\";\n        \n
    \       foreach (char c in word10) {\n            if (char.IsLetter(c)) {\n                word11
    += c;\n            }\n        }\n        \n        string word12 = \"\";\n        \n
    \       foreach (char c in word11) {\n            if (char.IsLetter(c)) {\n                word12
    += c;\n            }\n        }\n        \n        string word13 = \"\";\n        \n
    \       foreach (char c in word12) {\n            if (char.IsLetter(c)) {\n                word13
    += c;\n            }\n        }\n        \n        string word14 = \"\";\n        \n
    \       foreach (char c in word13) {\n            if (char.IsLetter(c)) {\n                word14
    += c;\n            }\n        }\n\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"), (4L)).Equals((new
    List<string>(new string[]{(string)\"little\"}))));\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (3L)).Equals((new List<string>(new string[]{(string)\"Mary\",
    (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple white space\"),
    (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello world\"),
    (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n    Debug.Assert(SelectWords((\"Uncle
    sam\"), (3L)).Equals((new List<string>(new string[]{(string)\"Uncle\"}))));\n
    \   Debug.Assert(SelectWords((\"\"), (4L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"a
    b c d e f\"), (1L)).Equals((new List<string>(new string[]{(string)\"b\", (string)\"c\",
    (string)\"d\", (string)\"f\"}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpdbp63mkq.cs(15,32): error CS0161: ''Problem.SelectWords(string, long)'':
    not all code paths return a value

    '
  timestamp: 1659977325
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    public static List<string> SelectWords(string
    s, long n) {\n        List<string> result = new List<string>();\n        long
    count = 0;\n        foreach (char c in s) {\n            if (char.IsLetter(c))
    {\n                count++;\n                if (count == n) {\n                    result.Add(c.ToString());\n
    \               }\n            }\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary had a
    little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n
    \   Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple
    white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello
    world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n
    \   Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new
    List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new
    List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"f\"}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <4ef3d12a313b4f4d8d62169a177816bb>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <4ef3d12a313b4f4d8d62169a177816bb>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977325
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    public static List<string> SelectWords(string
    s, long n) {\n        List<string> result = new List<string>();\n        if (string.IsNullOrEmpty(s))
    {\n            return result;\n        }\n        long n = Math.Abs(n);\n        long
    max = (long)s.Length;\n        long min = (long)Math.Abs(n);\n        long mid
    = max / 2;\n        long count = 0;\n        bool isConsonant = false;\n        bool
    isConsonant2 = false;\n        bool isConsonant3 = false;\n        bool isConsonant4
    = false;\n        bool isConsonant5 = false;\n        bool isConsonant6 = false;\n
    \       bool isConsonant7 = false;\n        bool isConsonant8 = false;\n        bool
    isConsonant9 = false;\n        bool isConsonant10 = false;\n        bool isConsonant11
    = false;\n        bool isConsonant12 = false;\n        bool isConsonant13 = false;\n
    \       bool isConsonant14 = false;\n        bool isConsonant15 = false;\n        bool
    isConsonant16 = false;\n        bool isConsonant17 = false;\n        bool isConsonant18
    = false;\n        bool isConsonant19 = false;\n        bool isConsonant20 = false;\n
    \       bool isConsonant21 = false;\n        bool isConsonant22 = false;\n        bool
    isConsonant23 = false;\n        bool isConsonant24 = false;\n        bool isConsonant25
    = false;\n        bool isConsonant26 = false;\n        bool isConsonant27 = false;\n
    \       bool isConsonant28 = false;\n        bool isConsonant29 = false;\n        bool
    isConsonant30 = false;\n        bool isConsonant31 = false;\n        bool isConsonant32
    = false;\n        bool isConsonant33 = false;\n        bool isConsonant34 = false;\n
    \       bool isConsonant35 = false;\n        bool isConsonant36 = false;\n        bool
    isConsonant37 = false;\n        bool isConsonant38 = false;\n        bool isConsonant39
    = false;\n        bool isConsonant40 = false;\n        bool isConsonant41 = false;\n
    \       bool isConsonant42 = false;\n        bool isConsonant43 = false;\n        bool
    isConsonant44 = false;\n        bool isConsonant45 = false;\n        bool isConsonant46
    = false;\n        bool isConsonant47 = false;\n        bool isConsonant48 = false;\n
    \       bool isConsonant49 = false;\n        bool \n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"),
    (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (3L)).Equals((new List<string>(new string[]{(string)\"Mary\",
    (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple white space\"),
    (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello world\"),
    (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n    Debug.Assert(SelectWords((\"Uncle
    sam\"), (3L)).Equals((new List<string>(new string[]{(string)\"Uncle\"}))));\n
    \   Debug.Assert(SelectWords((\"\"), (4L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"a
    b c d e f\"), (1L)).Equals((new List<string>(new string[]{(string)\"b\", (string)\"c\",
    (string)\"d\", (string)\"f\"}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp1rj5mv7w.cs(74,13): error CS1001: Identifier expected

    /tmp/tmp1rj5mv7w.cs(74,13): error CS1002: ; expected

    '
  timestamp: 1659977324
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    public static List<string> SelectWords(string
    s, long n) {\n        List<string> result = new List<string>();\n        if (string.IsNullOrEmpty(s))\n
    \           return result;\n        long total = 0;\n        foreach (char c in
    s)\n            total += (int)Char.GetNumericValue(c);\n        long remaining
    = n;\n        long cur = total;\n        bool found = false;\n        while (remaining
    > 0) {\n            long next = cur;\n            while (next > 0 && remaining
    > 0) {\n                next = next / 10;\n                remaining--;\n            }\n
    \           if (remaining == 0)\n                found = true;\n            if
    (found)\n                result.Add(s.Substring(0, cur));\n            cur = next;\n
    \       }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"), (4L)).Equals((new
    List<string>(new string[]{(string)\"little\"}))));\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (3L)).Equals((new List<string>(new string[]{(string)\"Mary\",
    (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple white space\"),
    (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello world\"),
    (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n    Debug.Assert(SelectWords((\"Uncle
    sam\"), (3L)).Equals((new List<string>(new string[]{(string)\"Uncle\"}))));\n
    \   Debug.Assert(SelectWords((\"\"), (4L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"a
    b c d e f\"), (1L)).Equals((new List<string>(new string[]{(string)\"b\", (string)\"c\",
    (string)\"d\", (string)\"f\"}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpv3j0698a.cs(34,43): error CS1503: Argument 2: cannot convert from ''long''
    to ''int''

    '
  timestamp: 1659977325
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    public static List<string> SelectWords(string
    s, long n) {\n        List<string> result = new List<string>();\n        if (s.Length
    == 0) {\n            return result;\n        }\n        long count = 0;\n        foreach
    (char c in s) {\n            if (char.IsLetter(c)) {\n                count++;\n
    \           }\n        }\n        if (count == n) {\n            result.Add(s);\n
    \       }\n        foreach (string word in SelectWords(s.Substring(0, s.Length
    - 1), n)) {\n            foreach (char c in word) {\n                if (char.IsLetter(c))
    {\n                    count++;\n                }\n            }\n            if
    (count == n) {\n                result.Add(word);\n            }\n        }\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(SelectWords((\"Mary had a little lamb\"), (4L)).Equals((new List<string>(new
    string[]{(string)\"little\"}))));\n    Debug.Assert(SelectWords((\"Mary had a
    little lamb\"), (3L)).Equals((new List<string>(new string[]{(string)\"Mary\",
    (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple white space\"),
    (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello world\"),
    (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n    Debug.Assert(SelectWords((\"Uncle
    sam\"), (3L)).Equals((new List<string>(new string[]{(string)\"Uncle\"}))));\n
    \   Debug.Assert(SelectWords((\"\"), (4L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"a
    b c d e f\"), (1L)).Equals((new List<string>(new string[]{(string)\"b\", (string)\"c\",
    (string)\"d\", (string)\"f\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <def61a910c3d43eea1d17c2dfc1a423a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <def61a910c3d43eea1d17c2dfc1a423a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977325
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    public static List<string> SelectWords(string
    s, long n) {\n        // TODO: Implement this function\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary had a little
    lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n
    \   Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple
    white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello
    world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n
    \   Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new
    List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new
    List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"f\"}))));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpn533wku4.cs(15,32): error CS0161: ''Problem.SelectWords(string, long)'':
    not all code paths return a value

    '
  timestamp: 1659977322
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    public static List<string> SelectWords(string
    s, long n) {\n        List<string> result = new List<string>();\n        long
    count = 0;\n        foreach (char c in s) {\n            if (char.IsLetter(c))
    {\n                count++;\n            }\n        }\n        if (count == 0)
    {\n            return result;\n        }\n        long remaining = n;\n        long
    start = 0;\n        long end = 0;\n        long index = 0;\n        long count
    = 0;\n        bool isFirst = true;\n        bool isLast = true;\n        bool
    isMiddle = true;\n        bool isLastMiddle = true;\n        bool isFirstMiddle
    = true;\n        bool isLastLast = true;\n        bool isMiddleMiddle = true;\n
    \       bool isLastMiddleLast = true;\n        bool isFirstLast = true;\n        bool
    isMiddleFirst = true;\n        bool isLastLastFirst = true;\n        bool isFirstLastMiddle
    = true;\n        bool isMiddleLastMiddle = true;\n        bool isLastFirstLast
    = true;\n        bool isFirstMiddleMiddle = true;\n        bool isMiddleMiddleFirst
    = true;\n        bool isLastMiddleLastFirst = true;\n        bool isFirstLastLast
    = true;\n        bool isMiddleFirstMiddle = true;\n        bool isLastMiddleMiddleFirst
    = true;\n        bool isFirstMiddleLastLast = true;\n        bool isMiddleMiddleFirstLast
    = true;\n        bool isLastFirstLastMiddle = true;\n        bool isFirstLastMiddleMiddle
    = true;\n        bool isMiddleLastFirstLast = true;\n        bool isFirstMiddleMiddleLast
    = true;\n        bool isMiddleMiddleFirstLast = true;\n        bool isLastFirstLastMiddle
    = true;\n        bool isFirstMiddleMiddleMiddle = true;\n        bool isMiddleLastFirstLastMiddle
    = true;\n        bool isFirstLastMiddleMiddleLast = true;\n        bool isMiddleMiddleFirstLastLast
    = true;\n        bool isLastFirstLastMiddleMiddle = true;\n        bool isFirstMiddleMiddleMiddleLast
    = true;\n        bool isMiddleLastFirstLastMiddleMiddle = true;\n        bool
    isFirstLastMiddleMiddleMiddleLast = true;\n        bool isMiddleMiddleFirstLastLastMiddleMiddle
    = true;\n        bool isLastFirstLastMiddleMiddleMiddleLast = true;\n        bool
    isFirstMiddleMiddleMiddleLastLast = true;\n        bool isMiddleMiddleFirstLastLastMiddleMiddleLast
    = true;\n        bool isLastFirstLastMiddleMiddleMiddleLastLast = true;\n        bool
    isFirstMiddleMiddleMiddleLastLast = true;\n        bool isMiddleMiddleFirstLastLastMiddleMiddleLast
    = true;\n        bool isLastFirstLastMiddleMiddleMiddleLastLast = true;\n        bool
    isFirstMiddleMiddleMiddleLastLast = true;\n        bool isMiddleMiddleFirstLastLastMiddleMiddleLast
    = true;\n        bool isLastFirstLastMiddleMiddleMiddleLastLast = true;\n        bool
    isFirst\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n
    \   Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple
    white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello
    world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n
    \   Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new
    List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new
    List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"f\"}))));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpcuoytreh.cs(78,21): error CS1002: ; expected

    '
  timestamp: 1659977325
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    public static List<string> SelectWords(string
    s, long n) {\n        // TODO: Implement this function\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary had a little
    lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n
    \   Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple
    white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello
    world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n
    \   Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new
    List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new
    List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"f\"}))));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpn533wku4.cs(15,32): error CS0161: ''Problem.SelectWords(string, long)'':
    not all code paths return a value

    '
  timestamp: 1659977322
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    public static List<string> SelectWords(string
    s, long n) {\n        List<string> result = new List<string>();\n        foreach
    (string word in SelectWords(s, n, new List<string>())) {\n            result.Add(word);\n
    \       }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"), (4L)).Equals((new
    List<string>(new string[]{(string)\"little\"}))));\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (3L)).Equals((new List<string>(new string[]{(string)\"Mary\",
    (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple white space\"),
    (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello world\"),
    (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n    Debug.Assert(SelectWords((\"Uncle
    sam\"), (3L)).Equals((new List<string>(new string[]{(string)\"Uncle\"}))));\n
    \   Debug.Assert(SelectWords((\"\"), (4L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"a
    b c d e f\"), (1L)).Equals((new List<string>(new string[]{(string)\"b\", (string)\"c\",
    (string)\"d\", (string)\"f\"}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp1vj4m1oi.cs(17,33): error CS1501: No overload for method ''SelectWords''
    takes 3 arguments

    '
  timestamp: 1659977325
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    public static List<string> SelectWords(string
    s, long n) {\n        List<string> result = new List<string>();\n        if (string.IsNullOrEmpty(s))
    {\n            return result;\n        }\n        char[] chars = s.ToCharArray();\n
    \       List<char> consonants = new List<char>();\n        foreach (char c in
    chars) {\n            if (char.IsLetterOrDigit(c)) {\n                consonants.Add(c);\n
    \           }\n        }\n        List<string> words = new List<string>();\n        foreach
    (char c in consonants) {\n            string word = s.Substring(0, s.IndexOf(c));\n
    \           words.Add(word);\n            s = s.Substring(word.Length);\n        }\n
    \       long count = 0;\n        foreach (string word in words) {\n            count
    += word.Length;\n        }\n        if (count != n) {\n            return result;\n
    \       }\n        foreach (string word in words) {\n            result.Add(word);\n
    \       }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"), (4L)).Equals((new
    List<string>(new string[]{(string)\"little\"}))));\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (3L)).Equals((new List<string>(new string[]{(string)\"Mary\",
    (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple white space\"),
    (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello world\"),
    (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n    Debug.Assert(SelectWords((\"Uncle
    sam\"), (3L)).Equals((new List<string>(new string[]{(string)\"Uncle\"}))));\n
    \   Debug.Assert(SelectWords((\"\"), (4L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"a
    b c d e f\"), (1L)).Equals((new List<string>(new string[]{(string)\"b\", (string)\"c\",
    (string)\"d\", (string)\"f\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a21812bb00d346118f22f8e80c6855fd>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a21812bb00d346118f22f8e80c6855fd>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977326
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    public static List<string> SelectWords(string
    s, long n) {\n        // TODO: implement this function\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary had a little
    lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n
    \   Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple
    white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello
    world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n
    \   Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new
    List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new
    List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"f\"}))));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp1lhvd1_1.cs(15,32): error CS0161: ''Problem.SelectWords(string, long)'':
    not all code paths return a value

    '
  timestamp: 1659977323
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    public static List<string> SelectWords(string
    s, long n) {\n        List<string> result = new List<string>();\n        if (string.IsNullOrEmpty(s))
    return result;\n        long nConsonants = n;\n        string vowels = \"aeiou\";\n
    \       string consonants = \"bcdfghjklmnpqrstvwxyz\";\n        string vowelsAndConsonants
    = vowels + consonants;\n        string vowelsAndConsonantsWithVowels = vowelsAndConsonants
    + vowels;\n        string vowelsAndConsonantsWithVowelsAndConsonants = vowelsAndConsonantsWithVowels
    + consonants;\n        string vowelsAndConsonantsWithVowelsAndConsonantsWithVowels
    = vowelsAndConsonantsWithVowelsAndConsonants + vowels;\n        string vowelsAndConsonantsWithVowelsAndConsonantsWithVowelsAndConsonants
    = vowelsAndConsonantsWithVowelsAndConsonantsWithVowels + consonants;\n        string
    vowelsAndConsonantsWithVowelsAndConsonantsWithVowelsAndConsonantsWithVowels =
    vowelsAndConsonantsWithVowelsAndConsonantsWithVowels + consonants + vowels;\n
    \       string vowelsAndConsonantsWithVowelsAndConsonantsWithVowelsAndConsonantsWithVowelsAndConsonants
    = vowelsAndConsonantsWithVowelsAndConsonantsWithVowelsAndConsonants + consonants
    + vowels;\n        string vowelsAndConsonantsWithVowelsAndConsonantsWithVowelsAndConsonantsWithVowelsAndConsonantsWithVowels
    = vowelsAndConsonantsWithVowelsAndConsonantsWithVowelsAndConsonantsWithVowels
    + consonants + vowels + vowels;\n        string vowelsAndConsonantsWithVowelsAndConsonantsWithVowelsAndConsonantsWithVowelsAndConsonantsWithVowelsAndConsonants
    = vowelsAndConsonantsWithVowelsAndConsonantsWithVowelsAndConsonantsWithVowelsAndConsonants
    + consonants + vowels + vowels + vowels;\n        string vowelsAndConsonantsWithVowelsAndConsonantsWithVowelsAndConsonantsWithVowelsAndConsonantsWithVowelsAndConsonantsWith\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n
    \   Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple
    white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello
    world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n
    \   Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new
    List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new
    List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"f\"}))));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpx2823sz2.cs(30,131): error CS1002: ; expected

    '
  timestamp: 1659977325
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    public static List<string> SelectWords(string
    s, long n) {\n        List<string> result = new List<string>();\n        string
    word = \"\";\n        foreach (char c in s) {\n            if (char.IsLetter(c))
    {\n                word += c;\n            }\n        }\n        if (word.Length
    == n) {\n            result.Add(word);\n        }\n        return result;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n
    \   Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple
    white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello
    world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n
    \   Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new
    List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new
    List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"f\"}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <12eb5f66c92b48699035e7d4b06e30e1>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <12eb5f66c92b48699035e7d4b06e30e1>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977322
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    public static List<string> SelectWords(string
    s, long n) {\n        List<string> result = new List<string>();\n        string
    word = \"\";\n        long count = 0;\n        foreach (char c in s) {\n            if
    (char.IsLetter(c)) {\n                word += c;\n                count++;\n            }\n
    \           if (count == n) {\n                result.Add(word);\n                word
    = \"\";\n                count = 0;\n            }\n        }\n        if (word
    != \"\") {\n            result.Add(word);\n        }\n        return result;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n
    \   Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple
    white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello
    world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n
    \   Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new
    List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new
    List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"f\"}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <bdea10489ba24b21882c06337d3bb96d>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <bdea10489ba24b21882c06337d3bb96d>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977326
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    public static List<string> SelectWords(string
    s, long n) {\n        List<string> result = new List<string>();\n        string
    word = string.Empty;\n        foreach (char c in s) {\n            if (char.IsLetter(c))
    {\n                word += c;\n            }\n        }\n        if (word.Length
    == n) {\n            result.Add(word);\n        }\n        return result;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n
    \   Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple
    white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello
    world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n
    \   Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new
    List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new
    List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"f\"}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <864b6168baf74945a20b10fdc2086d87>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <864b6168baf74945a20b10fdc2086d87>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977323
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    public static List<string> SelectWords(string
    s, long n) {\n        // TODO: Implement this function\n        List<string> result
    = new List<string>();\n        string temp = \"\";\n        foreach (char c in
    s) {\n            if (char.IsLetter(c)) {\n                temp = temp + c;\n
    \           }\n        }\n        char[] charArray = temp.ToCharArray();\n        Array.Sort(charArray);\n
    \       string temp2 = \"\";\n        foreach (char c in charArray) {\n            if
    (char.IsLetter(c)) {\n                temp2 = temp2 + c;\n            }\n        }\n
    \       char[] charArray2 = temp2.ToCharArray();\n        Array.Sort(charArray2);\n
    \       string temp3 = \"\";\n        foreach (char c in charArray2) {\n            if
    (char.IsLetter(c)) {\n                temp3 = temp3 + c;\n            }\n        }\n
    \       char[] charArray3 = temp3.ToCharArray();\n        Array.Sort(charArray3);\n
    \       string temp4 = \"\";\n        foreach (char c in charArray3) {\n            if
    (char.IsLetter(c)) {\n                temp4 = temp4 + c;\n            }\n        }\n
    \       char[] charArray4 = temp4.ToCharArray();\n        Array.Sort(charArray4);\n
    \       string temp5 = \"\";\n        foreach (char c in charArray4) {\n            if
    (char.IsLetter(c)) {\n                temp5 = temp5 + c;\n            }\n        }\n
    \       char[] charArray5 = temp5.ToCharArray();\n        Array.Sort(charArray5);\n
    \       string temp6 = \"\";\n        foreach (char c in charArray5) {\n            if
    (char.IsLetter(c)) {\n                temp6 = temp6 + c;\n            }\n        }\n
    \       char[] charArray6 = temp6.ToCharArray();\n        Array.Sort(charArray6);\n
    \       string temp7 = \"\";\n        foreach (char c in charArray6) {\n            if
    (char.IsLetter(c)) {\n                temp7 = temp7 + c;\n            }\n        }\n
    \       char[] charArray7 = temp7.ToCharArray();\n        Array.Sort(charArray7);\n
    \       string temp8 = \"\";\n        foreach (char c in charArray7) {\n            if
    (char.IsLetter(c)) {\n                temp8 = temp8 + c;\n            }\n        }\n
    \       char[] charArray8 = temp8.ToCharArray();\n        Array.Sort(charArray8);\n
    \       string temp9 = \"\";\n        foreach (char c in charArray8) {\n            if
    (char.IsLetter(c)) {\n                temp9 = temp9 + c;\n            }\n        }\n
    \       char[] charArray9 = temp9.ToCharArray();\n        Array.Sort(charArray9);\n
    \       string temp10 = \"\";\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"), (4L)).Equals((new
    List<string>(new string[]{(string)\"little\"}))));\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (3L)).Equals((new List<string>(new string[]{(string)\"Mary\",
    (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple white space\"),
    (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello world\"),
    (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n    Debug.Assert(SelectWords((\"Uncle
    sam\"), (3L)).Equals((new List<string>(new string[]{(string)\"Uncle\"}))));\n
    \   Debug.Assert(SelectWords((\"\"), (4L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"a
    b c d e f\"), (1L)).Equals((new List<string>(new string[]{(string)\"b\", (string)\"c\",
    (string)\"d\", (string)\"f\"}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp6nm5kr8x.cs(90,16): warning CS0219: The variable ''temp10'' is assigned
    but its value is never used

    /tmp/tmp6nm5kr8x.cs(15,32): error CS0161: ''Problem.SelectWords(string, long)'':
    not all code paths return a value

    '
  timestamp: 1659977325
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    public static List<string> SelectWords(string
    s, long n) {\n        List<string> result = new List<string>();\n        if (string.IsNullOrEmpty(s))
    return result;\n        string word = \"\";\n        long count = 0;\n        foreach
    (char c in s) {\n            if (char.IsLetter(c)) {\n                word +=
    c;\n                count++;\n                if (count == n) {\n                    result.Add(word);\n
    \                   word = \"\";\n                    count = 0;\n                }\n
    \           }\n        }\n        return result;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"),
    (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (3L)).Equals((new List<string>(new string[]{(string)\"Mary\",
    (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple white space\"),
    (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello world\"),
    (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n    Debug.Assert(SelectWords((\"Uncle
    sam\"), (3L)).Equals((new List<string>(new string[]{(string)\"Uncle\"}))));\n
    \   Debug.Assert(SelectWords((\"\"), (4L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"a
    b c d e f\"), (1L)).Equals((new List<string>(new string[]{(string)\"b\", (string)\"c\",
    (string)\"d\", (string)\"f\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <59dc6742d6074c23a43d7145e7042b55>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <59dc6742d6074c23a43d7145e7042b55>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977326
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    public static List<string> SelectWords(string
    s, long n) {\n        List<string> result = new List<string>();\n        if (string.IsNullOrEmpty(s))
    {\n            return result;\n        }\n        char[] chars = s.ToCharArray();\n
    \       Array.Sort(chars);\n        char[] vowels = new char[] { 'a', 'e', 'i',
    'o', 'u' };\n        List<string> words = new List<string>();\n        foreach
    (char c in chars) {\n            if (vowels.Contains(c)) {\n                words.Add(c.ToString());\n
    \           }\n        }\n        foreach (string word in words) {\n            int
    count = 0;\n            foreach (char c in word) {\n                if (chars.Contains(c))
    {\n                    count++;\n                }\n            }\n            if
    (count == n) {\n                result.Add(word);\n            }\n        }\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(SelectWords((\"Mary had a little lamb\"), (4L)).Equals((new List<string>(new
    string[]{(string)\"little\"}))));\n    Debug.Assert(SelectWords((\"Mary had a
    little lamb\"), (3L)).Equals((new List<string>(new string[]{(string)\"Mary\",
    (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple white space\"),
    (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello world\"),
    (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n    Debug.Assert(SelectWords((\"Uncle
    sam\"), (3L)).Equals((new List<string>(new string[]{(string)\"Uncle\"}))));\n
    \   Debug.Assert(SelectWords((\"\"), (4L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"a
    b c d e f\"), (1L)).Equals((new List<string>(new string[]{(string)\"b\", (string)\"c\",
    (string)\"d\", (string)\"f\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d2cfbc671d5b48d0a5d815dcbb5b59a0>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d2cfbc671d5b48d0a5d815dcbb5b59a0>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977326
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    public static List<string> SelectWords(string
    s, long n) {\n        // TODO: Implement this function\n        List<string> result
    = new List<string>();\n        string word = string.Empty;\n        foreach (char
    c in s) {\n            if (char.IsLetter(c)) {\n                word += c;\n            }\n
    \       }\n        if (word.Length == n) {\n            result.Add(word);\n        }\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(SelectWords((\"Mary had a little lamb\"), (4L)).Equals((new List<string>(new
    string[]{(string)\"little\"}))));\n    Debug.Assert(SelectWords((\"Mary had a
    little lamb\"), (3L)).Equals((new List<string>(new string[]{(string)\"Mary\",
    (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple white space\"),
    (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello world\"),
    (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n    Debug.Assert(SelectWords((\"Uncle
    sam\"), (3L)).Equals((new List<string>(new string[]{(string)\"Uncle\"}))));\n
    \   Debug.Assert(SelectWords((\"\"), (4L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"a
    b c d e f\"), (1L)).Equals((new List<string>(new string[]{(string)\"b\", (string)\"c\",
    (string)\"d\", (string)\"f\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <56f0052ef931415d8b2ed43710c2b630>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <56f0052ef931415d8b2ed43710c2b630>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977326
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    public static List<string> SelectWords(string
    s, long n) {\n        List<string> result = new List<string>();\n        long
    count = 0;\n        foreach (char c in s) {\n            if (char.IsLetter(c))
    {\n                count++;\n            }\n        }\n        if (count == 0)
    {\n            return result;\n        }\n        long remain = n;\n        long
    start = 0;\n        long end = 0;\n        long index = 0;\n        long count
    = 0;\n        bool isInt = false;\n        bool isLetter = false;\n        bool
    isSpace = false;\n        bool isLetterOrSpace = false;\n        bool isLetterOrSpaceOrInt
    = false;\n        bool isLetterOrSpaceOrIntOrLetter = false;\n        bool isLetterOrSpaceOrIntOrLetterOrSpace
    = false;\n        bool isLetterOrSpaceOrIntOrLetterOrSpaceOrInt = false;\n        bool
    isLetterOrSpaceOrIntOrLetterOrSpaceOrIntOrLetter = false;\n        bool isLetterOrSpaceOrIntOrLetterOrSpaceOrIntOrLetterOrSpace
    = false;\n        bool isLetterOrSpaceOrIntOrLetterOrSpaceOrIntOrLetterOrSpaceOrInt
    = false;\n        bool isLetterOrSpaceOrIntOrLetterOrSpaceOrIntOrLetterOrSpaceOrIntOrLetter
    = false;\n        bool isLetterOrSpaceOrIntOrLetterOrSpaceOrIntOrLetterOrSpaceOrIntOrLetterOrSpace
    = false;\n        bool isLetterOrSpaceOrIntOrLetterOrSpaceOrIntOrLetterOrSpaceOrIntOrLetterOrSpaceOrInt
    = false;\n        bool isLetterOrSpaceOrIntOrLetterOrSpaceOrIntOrLetterOrSpaceOrIntOrLetterOrSpaceOrIntOrLetter
    = false;\n        bool isLetterOrSpaceOrIntOrLetterOrSpaceOrIntOrLetterOrSpaceOrIntOrLetterOrSpaceOrIntOrLetterOrSpace
    = false;\n        bool isLetterOrSpaceOrIntOrLetterOrSpaceOrIntOrLetterOrSpaceOrIntOrLetterOrSpaceOrIntOrLetterOrSpaceOrInt
    = false;\n        bool isLetterOrSpaceOrIntOrLetterOrSpaceOrIntOrLetterOrSpaceOrIntOrLetterOrSpaceOrIntOrLetterOrSpaceOrIntOrLetter
    = false;\n        bool isLetterOrSpaceOrIntOrLetterOrSpaceOrIntOrLetterOrSpaceOrIntOrLetterOrSpaceOrIntOrLetterOrSpaceOrIntOrLetterOrSpace
    = false;\n        bool isLetterOrSpaceOrIntOrLetterOrSpaceOrIntOrLetterOrSpaceOrIntOrLetterOrSpaceOrIntOrLetterOrSpaceOrIntOrLetterOrSpaceOrInt
    = false;\n        bool isLetterOrSpaceOrIntOr\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"), (4L)).Equals((new
    List<string>(new string[]{(string)\"little\"}))));\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (3L)).Equals((new List<string>(new string[]{(string)\"Mary\",
    (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple white space\"),
    (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello world\"),
    (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n    Debug.Assert(SelectWords((\"Uncle
    sam\"), (3L)).Equals((new List<string>(new string[]{(string)\"Uncle\"}))));\n
    \   Debug.Assert(SelectWords((\"\"), (4L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"a
    b c d e f\"), (1L)).Equals((new List<string>(new string[]{(string)\"b\", (string)\"c\",
    (string)\"d\", (string)\"f\"}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpvpvxy4g9.cs(51,36): error CS1002: ; expected

    '
  timestamp: 1659977325
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    public static List<string> SelectWords(string
    s, long n) {\n        List<string> result = new List<string>();\n        if (string.IsNullOrEmpty(s))
    {\n            return result;\n        }\n        char[] chars = s.ToCharArray();\n
    \       HashSet<char> consonants = new HashSet<char>(new char[] { 'b', 'c', 'd',
    'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x',
    'y', 'z' });\n        HashSet<char> vowels = new HashSet<char>(new char[] { 'a',
    'e', 'i', 'o', 'u' });\n        HashSet<char> consonants2 = new HashSet<char>(new
    char[] { 'b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r',
    's', 't', 'v', 'w', 'x', 'y', 'z' });\n        HashSet<char> vowels2 = new HashSet<char>(new
    char[] { 'a', 'e', 'i', 'o', 'u' });\n        HashSet<char> consonants3 = new
    HashSet<char>(new char[] { 'b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n',
    'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z' });\n        HashSet<char> vowels3
    = new HashSet<char>(new char[] { 'a', 'e', 'i', 'o', 'u' });\n        HashSet<char>
    consonants4 = new HashSet<char>(new char[] { 'b', 'c', 'd', 'f', 'g', 'h', 'j',
    'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z' });\n        HashSet<char>
    vowels4 = new HashSet<char>(new char[] { 'a', 'e', 'i', 'o', 'u' });\n        HashSet<char>
    consonants5 = new HashSet<char>(new char[] { 'b', 'c', 'd', 'f', 'g', 'h', 'j',
    'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z' });\n        HashSet<char>
    vowels5 = new HashSet<char>(new char[] { 'a', 'e', 'i', 'o', 'u' });\n        HashSet<char>
    consonants6 = new HashSet<char>(new char[] { 'b', 'c', 'd', 'f', 'g', 'h', 'j',
    'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z' });\n        HashSet<char>
    vowels6 = new HashSet<char>(new char[] { 'a', 'e', 'i', 'o', 'u' });\n        HashSet<char>
    consonants7 = new HashSet<char>(new char[] { 'b', 'c', 'd', 'f', 'g', 'h', 'j',
    'k', 'l', '\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n
    \   Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple
    white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello
    world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n
    \   Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new
    List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new
    List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"f\"}))));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpqe_gsak4.cs(33,113): error CS1010: Newline in constant

    /tmp/tmpqe_gsak4.cs(33,113): error CS1011: Empty character literal

    /tmp/tmpqe_gsak4.cs(34,6): error CS1026: ) expected

    /tmp/tmpqe_gsak4.cs(34,6): error CS1002: ; expected

    /tmp/tmpqe_gsak4.cs(35,5): error CS0106: The modifier ''public'' is not valid
    for this item

    /tmp/tmpqe_gsak4.cs(45,2): error CS1513: } expected

    '
  timestamp: 1659977325
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    public static List<string> SelectWords(string
    s, long n) {\n        List<string> result = new List<string>();\n        if (string.IsNullOrEmpty(s))
    {\n            return result;\n        }\n        string word = string.Empty;\n
    \       long count = 0;\n        foreach (char c in s) {\n            if (char.IsLetter(c))
    {\n                word += c;\n                count++;\n            }\n        }\n
    \       if (count == n) {\n            result.Add(word);\n        }\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n
    \   Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple
    white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello
    world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n
    \   Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new
    List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new
    List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"f\"}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <ffadfdadded94db9a10672349b6ccf27>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <ffadfdadded94db9a10672349b6ccf27>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977326
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    public static List<string> SelectWords(string
    s, long n) {\n        // TODO: implement this function\n        return null;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n
    \   Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple
    white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello
    world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n
    \   Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new
    List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new
    List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"f\"}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x00020] in <241f4f00e23a4ea2930ffd4382907e3b>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x00020] in <241f4f00e23a4ea2930ffd4382907e3b>:0
    \n"
  stdout: ''
  timestamp: 1659977200
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    public static List<string> SelectWords(string
    s, long n) {\n        // TODO: Implement this function\n        List<string> result
    = new List<string>();\n        foreach (string word in s.Split(' '))\n        {\n
    \           foreach (char c in word)\n            {\n                if (c ==
    'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n                {\n                    result.Add(word);\n
    \               }\n            }\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary had a
    little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n
    \   Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple
    white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello
    world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n
    \   Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new
    List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new
    List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"f\"}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <3758eb2a5098400c99f8ce8d35da5cf4>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <3758eb2a5098400c99f8ce8d35da5cf4>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977326
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    public static List<string> SelectWords(string
    s, long n) {\n        // TODO: implement this function\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary had a little
    lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n
    \   Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple
    white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello
    world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n
    \   Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new
    List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new
    List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"f\"}))));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp1lhvd1_1.cs(15,32): error CS0161: ''Problem.SelectWords(string, long)'':
    not all code paths return a value

    '
  timestamp: 1659977323
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    public static List<string> SelectWords(string
    s, long n) {\n        List<string> result = new List<string>();\n        long
    count = 0;\n        foreach (char c in s) {\n            if (char.IsLetter(c))
    {\n                count++;\n            }\n        }\n        if (count == 0)
    {\n            return result;\n        }\n        long max = (long)Math.Pow((double)n,
    count);\n        long min = (long)Math.Pow((double)n, count - 1);\n        long
    mid = min + (max - min) / 2;\n        long sum = 0;\n        long count = 0;\n
    \       foreach (char c in s) {\n            if (char.IsLetter(c)) {\n                count++;\n
    \           }\n            if (count == mid) {\n                result.Add(s.Substring(0,
    s.Length - count));\n                count = 0;\n            }\n        }\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n
    \   Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple
    white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello
    world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n
    \   Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new
    List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new
    List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"f\"}))));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp8sk5w8v1.cs(30,14): error CS0128: A local variable or function named ''count''
    is already defined in this scope

    /tmp/tmp8sk5w8v1.cs(36,43): error CS1503: Argument 2: cannot convert from ''long''
    to ''int''

    /tmp/tmp8sk5w8v1.cs(29,14): warning CS0219: The variable ''sum'' is assigned but
    its value is never used

    /tmp/tmp8sk5w8v1.cs(30,14): warning CS0219: The variable ''count'' is assigned
    but its value is never used

    '
  timestamp: 1659977326
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    public static List<string> SelectWords(string
    s, long n) {\n        List<string> result = new List<string>();\n        if (string.IsNullOrEmpty(s))
    {\n            return result;\n        }\n        char[] chars = s.ToCharArray();\n
    \       List<char> consonants = new List<char>();\n        foreach (char c in
    chars) {\n            if (char.IsLetterOrDigit(c)) {\n                consonants.Add(c);\n
    \           }\n        }\n        List<string> words = new List<string>();\n        foreach
    (char c in consonants) {\n            string word = s.Substring(0, s.Length -
    1);\n            words.Add(word);\n            s = s.Substring(1);\n        }\n
    \       foreach (string word in words) {\n            long count = word.Count(c
    => char.IsLetterOrDigit(c));\n            if (count == n) {\n                result.Add(word);\n
    \           }\n        }\n        return result;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"),
    (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (3L)).Equals((new List<string>(new string[]{(string)\"Mary\",
    (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple white space\"),
    (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello world\"),
    (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n    Debug.Assert(SelectWords((\"Uncle
    sam\"), (3L)).Equals((new List<string>(new string[]{(string)\"Uncle\"}))));\n
    \   Debug.Assert(SelectWords((\"\"), (4L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"a
    b c d e f\"), (1L)).Equals((new List<string>(new string[]{(string)\"b\", (string)\"c\",
    (string)\"d\", (string)\"f\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <ab18c1aacede4e92bb2027b54e817e79>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <ab18c1aacede4e92bb2027b54e817e79>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977326
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    public static List<string> SelectWords(string
    s, long n) {\n        // TODO: implement this function\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary had a little
    lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n
    \   Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple
    white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello
    world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n
    \   Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new
    List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new
    List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"f\"}))));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp1lhvd1_1.cs(15,32): error CS0161: ''Problem.SelectWords(string, long)'':
    not all code paths return a value

    '
  timestamp: 1659977323
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    public static List<string> SelectWords(string
    s, long n) {\n        List<string> result = new List<string>();\n        if (string.IsNullOrEmpty(s))\n
    \           return result;\n        long count = 0;\n        foreach (char c in
    s)\n            if (char.IsLetter(c))\n                count++;\n        if (count
    != n)\n            return result;\n        string word = s;\n        string lastWord
    = s;\n        bool isFirst = true;\n        bool isLast = true;\n        bool
    isMiddle = true;\n        bool isLastMiddle = true;\n        bool isFirstMiddle
    = true;\n        bool isLastLast = true;\n        bool isFirstLast = true;\n        bool
    isMiddleMiddle = true;\n        bool isLastMiddleLast = true;\n        bool isFirstMiddleLast
    = true;\n        bool isLastLastLast = true;\n        bool isFirstLastLast = true;\n
    \       bool isMiddleMiddleLast = true;\n        bool isLastMiddleMiddleLast =
    true;\n        bool isFirstMiddleMiddleLast = true;\n        bool isLastLastMiddleLast
    = true;\n        bool isFirstLastLastLast = true;\n        bool isMiddleMiddleMiddleLast
    = true;\n        bool isLastMiddleMiddleMiddleLast = true;\n        bool isFirstMiddleMiddleMiddleLast
    = true;\n        bool isLastLastMiddleMiddleLast = true;\n        bool isFirstLastLastMiddleLast
    = true;\n        bool isMiddleMiddleMiddleLast = true;\n        bool isLastMiddleMiddleMiddleLast
    = true;\n        bool isFirstMiddleMiddleMiddleLast = true;\n        bool isLastLastMiddleMiddleLast
    = true;\n        bool isFirstLastLastMiddleLast = true;\n        bool isMiddleMiddleMiddleLast
    = true;\n        bool isLastMiddleMiddleMiddleLast = true;\n        bool isFirstMiddleMiddleMiddleLast
    = true;\n        bool isLastLastMiddleMiddleLast = true;\n        bool isFirstLastLastMiddleLast
    = true;\n        bool isMiddleMiddleMiddleLast = true;\n        bool isLastMiddleMiddleMiddleLast
    = true;\n        bool isFirstMiddleMiddleMiddleLast = true;\n        bool isLastLastMiddleMiddleLast
    = true;\n        bool isFirstLastLastMiddleLast = true;\n        bool isMiddleMiddleMiddleLast
    = true;\n        bool isLastMiddleMiddleMiddleLast = true;\n        bool isFirstMiddleMiddleMiddleLast
    = true;\n        bool isLastLastMiddleMiddleLast = true;\n        bool isFirstLastLastMiddleLast
    = true;\n        bool isMiddleMiddleMiddleLast = true;\n        bool isLastMiddleMiddleMiddleLast
    = true;\n        bool isFirstMiddleMiddleMiddleLast = true;\n        bool isLastLastMiddleMiddleLast
    = true;\n        bool isFirstLastLastMiddleLast = true;\n        bool isMiddleMiddleMiddleLast
    = true;\n        bool isLastMiddleMiddleMiddleLast = true;\n        bool isFirstMiddleMiddle\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n
    \   Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple
    white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello
    world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n
    \   Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new
    List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new
    List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"f\"}))));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpc4utxm93.cs(76,33): error CS1002: ; expected

    '
  timestamp: 1659977325
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    public static List<string> SelectWords(string
    s, long n) {\n        List<string> result = new List<string>();\n        if (string.IsNullOrEmpty(s))
    {\n            return result;\n        }\n        long count = 0;\n        foreach
    (char c in s) {\n            if (char.IsLetter(c)) {\n                count++;\n
    \           }\n        }\n        if (count != n) {\n            return result;\n
    \       }\n        string word = string.Empty;\n        foreach (char c in s)
    {\n            if (char.IsLetter(c)) {\n                word += c;\n            }\n
    \       }\n        result.Add(word);\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary had a
    little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n
    \   Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple
    white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello
    world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n
    \   Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new
    List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new
    List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"f\"}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <ba4672c571404682966ae11af45d725f>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <ba4672c571404682966ae11af45d725f>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977326
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    public static List<string> SelectWords(string
    s, long n) {\n        List<string> result = new List<string>();\n        if (string.IsNullOrEmpty(s))\n
    \           return result;\n        long count = 0;\n        foreach (char c in
    s) {\n            if (char.IsLetter(c))\n                count++;\n        }\n
    \       if (count != n)\n            return result;\n        string word = \"\";\n
    \       foreach (char c in s) {\n            if (char.IsLetter(c))\n                word
    += c;\n        }\n        foreach (char c in word) {\n            if (char.IsLetter(c))\n
    \               result.Add(word);\n        }\n        return result;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n
    \   Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple
    white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello
    world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n
    \   Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new
    List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new
    List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"f\"}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <562d1954b65a4fa1bf2bf8fde0ca563f>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <562d1954b65a4fa1bf2bf8fde0ca563f>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977326
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    public static List<string> SelectWords(string
    s, long n) {\n        List<string> result = new List<string>();\n        if (string.IsNullOrEmpty(s))
    {\n            return result;\n        }\n        char[] chars = s.ToCharArray();\n
    \       int[] count = new int[26];\n        foreach (char c in chars) {\n            count[c
    - 'a']++;\n        }\n        int[] count2 = new int[26];\n        foreach (char
    c in chars) {\n            count2[c - 'a']++;\n        }\n        int[] count3
    = new int[26];\n        foreach (char c in chars) {\n            count3[c - 'a']++;\n
    \       }\n        int[] count4 = new int[26];\n        foreach (char c in chars)
    {\n            count4[c - 'a']++;\n        }\n        int[] count5 = new int[26];\n
    \       foreach (char c in chars) {\n            count5[c - 'a']++;\n        }\n
    \       int[] count6 = new int[26];\n        foreach (char c in chars) {\n            count6[c
    - 'a']++;\n        }\n        int[] count7 = new int[26];\n        foreach (char
    c in chars) {\n            count7[c - 'a']++;\n        }\n        int[] count8
    = new int[26];\n        foreach (char c in chars) {\n            count8[c - 'a']++;\n
    \       }\n        int[] count9 = new int[26];\n        foreach (char c in chars)
    {\n            count9[c - 'a']++;\n        }\n        int[] count10 = new int[26];\n
    \       foreach (char c in chars) {\n            count10[c - 'a']++;\n        }\n
    \       int[] count11 = new int[26];\n        foreach (char c in chars) {\n            count11[c
    - 'a']++;\n        }\n        int[] count12 = new int[26];\n        foreach (char
    c in chars) {\n            count12[c - 'a']++;\n        }\n        int[] count13
    = new int[26];\n        foreach (char c in chars) {\n            count13[c - 'a']++;\n
    \       }\n        int[] count14 = new int[26];\n        foreach (char c in chars)
    {\n            count14[c - 'a']++;\n        }\n        int[] count15 = new int[26];\n
    \       foreach (char c in chars) {\n            count15[c - 'a']++;\n        }\n
    \       int[] count16 = new int[26];\n        foreach (char c in chars) {\n            count16[c
    - 'a']++;\n        }\n        \n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"), (4L)).Equals((new
    List<string>(new string[]{(string)\"little\"}))));\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (3L)).Equals((new List<string>(new string[]{(string)\"Mary\",
    (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple white space\"),
    (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello world\"),
    (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n    Debug.Assert(SelectWords((\"Uncle
    sam\"), (3L)).Equals((new List<string>(new string[]{(string)\"Uncle\"}))));\n
    \   Debug.Assert(SelectWords((\"\"), (4L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"a
    b c d e f\"), (1L)).Equals((new List<string>(new string[]{(string)\"b\", (string)\"c\",
    (string)\"d\", (string)\"f\"}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpvfggd099.cs(15,32): error CS0161: ''Problem.SelectWords(string, long)'':
    not all code paths return a value

    '
  timestamp: 1659977326
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    public static List<string> SelectWords(string
    s, long n) {\n        // TODO: Implement this function\n        List<string> result
    = new List<string>();\n        foreach (string word in s.Split(' '))\n        {\n
    \           string temp = word;\n            int count = 0;\n            while
    (temp.Length > 0)\n            {\n                if (temp.Contains(\"a\") ||
    temp.Contains(\"e\") || temp.Contains(\"i\") || temp.Contains(\"o\") || temp.Contains(\"u\"))\n
    \               {\n                    count++;\n                }\n                temp
    = temp.Remove(0, 1);\n            }\n            if (count == n)\n            {\n
    \               result.Add(word);\n            }\n        }\n        return result;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n
    \   Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple
    white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello
    world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n
    \   Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new
    List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new
    List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"f\"}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <94f02c737f0c4b4294ce845ded4432e5>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <94f02c737f0c4b4294ce845ded4432e5>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977326
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    public static List<string> SelectWords(string
    s, long n) {\n        List<string> result = new List<string>();\n        long
    num = 0;\n        foreach (char c in s) {\n            if (char.IsLetter(c)) {\n
    \               num++;\n            }\n        }\n        if (num == n) {\n            foreach
    (char c in s) {\n                if (char.IsLetter(c)) {\n                    result.Add(c.ToString());\n
    \               }\n            }\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary had a
    little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n
    \   Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple
    white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello
    world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n
    \   Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new
    List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new
    List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"f\"}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <ee3bb3b7b53e4c6ba6928e7287a83fc0>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <ee3bb3b7b53e4c6ba6928e7287a83fc0>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977326
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    public static List<string> SelectWords(string
    s, long n) {\n        List<string> result = new List<string>();\n        if (s
    == \"\") return result;\n        long n = Convert.ToInt64(n);\n        long count
    = 0;\n        foreach (char c in s) {\n            if (Char.IsLetter(c)) {\n                count++;\n
    \           }\n        }\n        if (count != n) return result;\n        string
    word = s;\n        char[] chars = word.ToCharArray();\n        Array.Sort(chars);\n
    \       string first = chars.First();\n        string last = chars.Last();\n        string
    middle = chars.Skip(1).Take(2).ToArray().Aggregate((a, b) => a + b);\n        if
    (first.Length == 1 && last.Length == 1 && middle.Length == 1) {\n            result.Add(word);\n
    \       }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"), (4L)).Equals((new
    List<string>(new string[]{(string)\"little\"}))));\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (3L)).Equals((new List<string>(new string[]{(string)\"Mary\",
    (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple white space\"),
    (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello world\"),
    (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n    Debug.Assert(SelectWords((\"Uncle
    sam\"), (3L)).Equals((new List<string>(new string[]{(string)\"Uncle\"}))));\n
    \   Debug.Assert(SelectWords((\"\"), (4L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"a
    b c d e f\"), (1L)).Equals((new List<string>(new string[]{(string)\"b\", (string)\"c\",
    (string)\"d\", (string)\"f\"}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpph8b8blr.cs(18,14): error CS0136: A local or parameter named ''n'' cannot
    be declared in this scope because that name is used in an enclosing local scope
    to define a local or parameter

    /tmp/tmpph8b8blr.cs(29,24): error CS0029: Cannot implicitly convert type ''char''
    to ''string''

    /tmp/tmpph8b8blr.cs(30,23): error CS0029: Cannot implicitly convert type ''char''
    to ''string''

    /tmp/tmpph8b8blr.cs(31,77): error CS0266: Cannot implicitly convert type ''int''
    to ''char''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmpph8b8blr.cs(31,77): error CS1662: Cannot convert lambda expression to
    intended delegate type because some of the return types in the block are not implicitly
    convertible to the delegate return type

    /tmp/tmpph8b8blr.cs(18,34): error CS0165: Use of unassigned local variable ''n''

    '
  timestamp: 1659977326
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    public static List<string> SelectWords(string
    s, long n) {\n        List<string> result = new List<string>();\n        if (s.Length
    == 0) {\n            return result;\n        }\n        List<char> chars = new
    List<char>();\n        foreach (char c in s) {\n            chars.Add(c);\n        }\n
    \       chars.Sort();\n        List<char> consonants = new List<char>();\n        foreach
    (char c in chars) {\n            if (chars.IndexOf(c) == chars.Count - 1) {\n
    \               consonants.Add(c);\n            }\n        }\n        List<char>
    vowels = new List<char>();\n        foreach (char c in chars) {\n            if
    (chars.IndexOf(c) == 0) {\n                vowels.Add(c);\n            }\n        }\n
    \       List<char> consonantsAndVowels = new List<char>();\n        foreach (char
    c in consonants) {\n            consonantsAndVowels.Add(c);\n        }\n        foreach
    (char c in vowels) {\n            consonantsAndVowels.Add(c);\n        }\n        List<char>
    consonantsAndVowelsAndConsonantsAndVowels = new List<char>();\n        foreach
    (char c in consonantsAndVowels) {\n            consonantsAndVowelsAndConsonantsAndVowels.Add(c);\n
    \       }\n        List<char> consonantsAndVowelsAndConsonantsAndVowelsAndConsonantsAndVowels
    = new List<char>();\n        foreach (char c in consonantsAndVowelsAndConsonantsAndVowels)
    {\n            consonantsAndVowelsAndConsonantsAndVowelsAndConsonantsAndVowels.Add(c);\n
    \       }\n        List<char> consonantsAndVowelsAndConsonantsAndVowelsAndConsonantsAndVowelsAndConsonantsAndVowels
    = new List<char>();\n        foreach (char c in consonantsAndVowelsAndConsonantsAndVowelsAndConsonantsAndVowelsAndConsonantsAndVowels)
    {\n            consonantsAndVowelsAndConsonantsAndVowelsAndConsonantsAndVowelsAndConsonantsAndVowelsAndConsonantsAndVowels.Add(c);\n
    \       }\n        List<char> consonantsAndVowelsAndConsonantsAndVowelsAndConsonantsAndVowelsAndConsonantsAndVowelsAndConsonantsAndVowelsAndConsonantsAndVowels
    = new List<char>();\n        \n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"), (4L)).Equals((new
    List<string>(new string[]{(string)\"little\"}))));\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (3L)).Equals((new List<string>(new string[]{(string)\"Mary\",
    (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple white space\"),
    (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello world\"),
    (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n    Debug.Assert(SelectWords((\"Uncle
    sam\"), (3L)).Equals((new List<string>(new string[]{(string)\"Uncle\"}))));\n
    \   Debug.Assert(SelectWords((\"\"), (4L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"a
    b c d e f\"), (1L)).Equals((new List<string>(new string[]{(string)\"b\", (string)\"c\",
    (string)\"d\", (string)\"f\"}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpdkeza8qo.cs(54,13): error CS0103: The name ''consonantsAndVowelsAndConsonantsAndVowelsAndConsonantsAndVowelsAndConsonantsAndVowelsAndConsonantsAndVowels''
    does not exist in the current context

    /tmp/tmpdkeza8qo.cs(15,32): error CS0161: ''Problem.SelectWords(string, long)'':
    not all code paths return a value

    '
  timestamp: 1659977326
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    public static List<string> SelectWords(string
    s, long n) {\n        List<string> result = new List<string>();\n        string
    word = \"\";\n        foreach (char c in s) {\n            if (char.IsLetter(c))
    {\n                word += c;\n            }\n        }\n        if (word.Length
    == n) {\n            result.Add(word);\n        }\n        return result;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n
    \   Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple
    white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello
    world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n
    \   Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new
    List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new
    List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"f\"}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <12eb5f66c92b48699035e7d4b06e30e1>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <12eb5f66c92b48699035e7d4b06e30e1>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977322
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    public static List<string> SelectWords(string
    s, long n) {\n        List<string> result = new List<string>();\n        if (string.IsNullOrEmpty(s))
    {\n            return result;\n        }\n        string word = \"\";\n        long
    count = 0;\n        foreach (char c in s) {\n            if (char.IsLetter(c))
    {\n                word += c;\n                count++;\n            }\n        }\n
    \       if (count == n) {\n            result.Add(word);\n        }\n        string
    word2 = \"\";\n        long count2 = 0;\n        foreach (char c in s) {\n            if
    (char.IsLetter(c)) {\n                word2 += c;\n                count2++;\n
    \           }\n        }\n        if (count2 == n) {\n            result.Add(word2);\n
    \       }\n        string word3 = \"\";\n        long count3 = 0;\n        foreach
    (char c in s) {\n            if (char.IsLetter(c)) {\n                word3 +=
    c;\n                count3++;\n            }\n        }\n        if (count3 ==
    n) {\n            result.Add(word3);\n        }\n        string word4 = \"\";\n
    \       long count4 = 0;\n        foreach (char c in s) {\n            if (char.IsLetter(c))
    {\n                word4 += c;\n                count4++;\n            }\n        }\n
    \       if (count4 == n) {\n            result.Add(word4);\n        }\n        string
    word5 = \"\";\n        long count5 = 0;\n        foreach (char c in s) {\n            if
    (char.IsLetter(c)) {\n                word5 += c;\n                count5++;\n
    \           }\n        }\n        if (count5 == n) {\n            result.Add(word5);\n
    \       }\n        string word6 = \"\";\n        long count6 = 0;\n        foreach
    (char c in s) {\n            if (char.IsLetter(c)) {\n                word6 +=
    c;\n                count6++;\n            }\n        }\n        if (count6 ==
    n) {\n            result.Add(word6);\n        }\n        string word7 = \"\";\n
    \       long count7 = 0;\n        foreach (char c in s) {\n            if (char.IsLetter(c))
    {\n                word7 += c;\n                count7++;\n            }\n        }\n
    \       if (count7 == n) {\n            result.Add(word7);\n        }\n        string
    word8 = \"\";\n        long count8 = 0;\n        foreach (char c in s) {\n            if
    (char.IsLetter(c)) {\n                word8 += c;\n                count8++;\n
    \           }\n        }\n        if (count8 == n) {\n            result.Add(word8);\n
    \       }\n        string word9 = \"\";\n        long count9 = 0;\n        foreach
    (char c in s) {\n            if (char.IsLetter(c)) {\n                word9 +=
    c;\n                count9++;\n            }\n        }\n        if (count9 ==
    n) {\n            result.Add(word9);\n        }\n        string word10 = \"\";\n
    \       long count10 = 0;\n        foreach (char \n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"),
    (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (3L)).Equals((new List<string>(new string[]{(string)\"Mary\",
    (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple white space\"),
    (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello world\"),
    (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n    Debug.Assert(SelectWords((\"Uncle
    sam\"), (3L)).Equals((new List<string>(new string[]{(string)\"Uncle\"}))));\n
    \   Debug.Assert(SelectWords((\"\"), (4L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"a
    b c d e f\"), (1L)).Equals((new List<string>(new string[]{(string)\"b\", (string)\"c\",
    (string)\"d\", (string)\"f\"}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp861l7o_3.cs(121,18): error CS1525: Invalid expression term ''char''

    /tmp/tmp861l7o_3.cs(121,22): error CS1515: ''in'' expected

    /tmp/tmp861l7o_3.cs(121,22): error CS0230: Type and identifier are both required
    in a foreach statement

    /tmp/tmp861l7o_3.cs(121,22): error CS1525: Invalid expression term ''}''

    /tmp/tmp861l7o_3.cs(121,22): error CS1026: ) expected

    /tmp/tmp861l7o_3.cs(121,22): error CS1002: ; expected

    '
  timestamp: 1659977326
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    public static List<string> SelectWords(string
    s, long n) {\n        // TODO: Implement this function\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary had a little
    lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n
    \   Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple
    white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello
    world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n
    \   Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new
    List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new
    List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"f\"}))));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpn533wku4.cs(15,32): error CS0161: ''Problem.SelectWords(string, long)'':
    not all code paths return a value

    '
  timestamp: 1659977322
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    public static List<string> SelectWords(string
    s, long n) {\n        // Your code here\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"), (4L)).Equals((new
    List<string>(new string[]{(string)\"little\"}))));\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (3L)).Equals((new List<string>(new string[]{(string)\"Mary\",
    (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple white space\"),
    (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello world\"),
    (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n    Debug.Assert(SelectWords((\"Uncle
    sam\"), (3L)).Equals((new List<string>(new string[]{(string)\"Uncle\"}))));\n
    \   Debug.Assert(SelectWords((\"\"), (4L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"a
    b c d e f\"), (1L)).Equals((new List<string>(new string[]{(string)\"b\", (string)\"c\",
    (string)\"d\", (string)\"f\"}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpf3s2_950.cs(15,32): error CS0161: ''Problem.SelectWords(string, long)'':
    not all code paths return a value

    '
  timestamp: 1659977326
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    public static List<string> SelectWords(string
    s, long n) {\n        // TODO: Implement this function\n        List<string> result
    = new List<string>();\n        string str = s;\n        long count = 0;\n        foreach
    (char c in str)\n        {\n            if (char.IsLetter(c))\n            {\n
    \               count++;\n            }\n        }\n        if (count == n)\n
    \       {\n            result.Add(s);\n        }\n        return result;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n
    \   Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple
    white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello
    world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n
    \   Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new
    List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new
    List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"f\"}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <697818c88ebf483882564ba5d6164ec8>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <697818c88ebf483882564ba5d6164ec8>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977327
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    public static List<string> SelectWords(string
    s, long n) {\n        List<string> result = new List<string>();\n        if (string.IsNullOrEmpty(s))
    {\n            return result;\n        }\n        char[] chars = s.ToCharArray();\n
    \       HashSet<char> set = new HashSet<char>();\n        foreach (char c in chars)
    {\n            if (set.Contains(c)) {\n                set.Remove(c);\n            }\n
    \           else {\n                set.Add(c);\n            }\n        }\n        List<string>
    words = new List<string>();\n        foreach (char c in chars) {\n            if
    (set.Contains(c)) {\n                words.Add(c.ToString());\n            }\n
    \       }\n        foreach (string word in words) {\n            long count =
    word.Count(c => c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u');\n            if
    (count == n) {\n                result.Add(word);\n            }\n        }\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(SelectWords((\"Mary had a little lamb\"), (4L)).Equals((new List<string>(new
    string[]{(string)\"little\"}))));\n    Debug.Assert(SelectWords((\"Mary had a
    little lamb\"), (3L)).Equals((new List<string>(new string[]{(string)\"Mary\",
    (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple white space\"),
    (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello world\"),
    (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n    Debug.Assert(SelectWords((\"Uncle
    sam\"), (3L)).Equals((new List<string>(new string[]{(string)\"Uncle\"}))));\n
    \   Debug.Assert(SelectWords((\"\"), (4L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"a
    b c d e f\"), (1L)).Equals((new List<string>(new string[]{(string)\"b\", (string)\"c\",
    (string)\"d\", (string)\"f\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <fcfc85d0441c4b2c95ca5fa61a5f331f>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <fcfc85d0441c4b2c95ca5fa61a5f331f>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977327
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    public static List<string> SelectWords(string
    s, long n) {\n        List<string> result = new List<string>();\n        if (s.Length
    == 0) {\n            return result;\n        }\n        string word = s;\n        long
    count = 0;\n        string lastWord = \"\";\n        bool isFirst = true;\n        bool
    isLast = true;\n        bool isMiddle = true;\n        bool isLastMiddle = true;\n
    \       bool isFirstMiddle = true;\n        bool isLastLast = true;\n        bool
    isFirstLast = true;\n        bool isMiddleMiddle = true;\n        bool isLastMiddleMiddle
    = true;\n        bool isFirstMiddleMiddle = true;\n        bool isLastLastMiddle
    = true;\n        bool isFirstLastLast = true;\n        bool isMiddleLast = true;\n
    \       bool isLastMiddleLast = true;\n        bool isFirstMiddleLast = true;\n
    \       bool isLastLastLast = true;\n        bool isFirstLastLast = true;\n        bool
    isMiddleMiddleLast = true;\n        bool isLastMiddleMiddleLast = true;\n        bool
    isFirstMiddleMiddleLast = true;\n        bool isLastLastMiddleLast = true;\n        bool
    isFirstLastLastLast = true;\n        bool isMiddleMiddleMiddleLast = true;\n        bool
    isLastMiddleMiddleMiddleLast = true;\n        bool isFirstMiddleMiddleMiddleLast
    = true;\n        bool isLastLastMiddleMiddleLast = true;\n        bool isFirstLastLastMiddleLast
    = true;\n        bool isMiddleMiddleMiddleMiddleLast = true;\n        bool isLastMiddleMiddleMiddleLast
    = true;\n        bool isFirstMiddleMiddleMiddleLast = true;\n        bool isLastLastMiddleMiddleLast
    = true;\n        bool isFirstLastLastMiddleLast = true;\n        bool isMiddleMiddleMiddleMiddleLast
    = true;\n        bool isLastMiddleMiddleMiddleLast = true;\n        bool isFirstMiddleMiddleMiddleLast
    = true;\n        bool isLastLastMiddleMiddleLast = true;\n        bool isFirstLastLastMiddleLast
    = true;\n        bool isMiddleMiddleMiddleMiddleLast = true;\n        bool isLastMiddleMiddleMiddleLast
    = true;\n        bool isFirstMiddleMiddleMiddleLast = true;\n        bool isLastLastMiddleMiddleLast
    = true;\n        bool isFirstLastLastMiddleLast = true;\n        bool isMiddleMiddleMiddleMiddleLast
    = true;\n        bool isLastMiddleMiddleMiddleLast = true;\n        bool isFirstMiddleMiddleMiddleLast
    = true;\n        bool isLastLastMiddleMiddleLast = true;\n        bool isFirstLastLastMiddleLast
    = true;\n        bool isMiddleMiddleMiddleMiddleLast = true;\n        bool isLastMiddleMiddleMiddleLast
    = true;\n        bool isFirstMiddleMiddleMiddleLast = true;\n        bool isLastLastMiddleMiddleLast
    = true;\n        bool isFirstLastLastMiddleLast = true;\n        bool isMiddleMiddleMiddleMiddleLast
    = true;\n\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n
    \   Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple
    white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello
    world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n
    \   Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new
    List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new
    List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"f\"}))));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpqmgrmdnu.cs(39,14): error CS0128: A local variable or function named ''isFirstLastLast''
    is already defined in this scope

    /tmp/tmpqmgrmdnu.cs(51,14): error CS0128: A local variable or function named ''isLastMiddleMiddleMiddleLast''
    is already defined in this scope

    /tmp/tmpqmgrmdnu.cs(52,14): error CS0128: A local variable or function named ''isFirstMiddleMiddleMiddleLast''
    is already defined in this scope

    /tmp/tmpqmgrmdnu.cs(53,14): error CS0128: A local variable or function named ''isLastLastMiddleMiddleLast''
    is already defined in this scope

    /tmp/tmpqmgrmdnu.cs(54,14): error CS0128: A local variable or function named ''isFirstLastLastMiddleLast''
    is already defined in this scope

    /tmp/tmpqmgrmdnu.cs(55,14): error CS0128: A local variable or function named ''isMiddleMiddleMiddleMiddleLast''
    is already defined in this scope

    /tmp/tmpqmgrmdnu.cs(56,14): error CS0128: A local variable or function named ''isLastMiddleMiddleMiddleLast''
    is already defined in this scope

    /tmp/tmpqmgrmdnu.cs(57,14): error CS0128: A local variable or function named ''isFirstMiddleMiddleMiddleLast''
    is already defined in this scope

    /tmp/tmpqmgrmdnu.cs(58,14): error CS0128: A local variable or function named ''isLastLastMiddleMiddleLast''
    is already defined in this scope

    /tmp/tmpqmgrmdnu.cs(59,14): error CS0128: A local variable or function named ''isFirstLastLastMiddleLast''
    is already defined in this scope

    /tmp/tmpqmgrmdnu.cs(60,14): error CS0128: A local variable or function named ''isMiddleMiddleMiddleMiddleLast''
    is already defined in this scope

    /tmp/tmpqmgrmdnu.cs(61,14): error CS0128: A local variable or function named ''isLastMiddleMiddleMiddleLast''
    is already defined in this scope

    /tmp/tmpqmgrmdnu.cs(62,14): error CS0128: A local variable or function named ''isFirstMiddleMiddleMiddleLast''
    is already defined in this scope

    /tmp/tmpqmgrmdnu.cs(63,14): error CS0128: A local variable or function named ''isLastLastMiddleMiddleLast'
  timestamp: 1659977326
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    public static List<string> SelectWords(string
    s, long n) {\n        List<string> result = new List<string>();\n        if (string.IsNullOrEmpty(s))
    {\n            return result;\n        }\n        char[] chars = s.ToCharArray();\n
    \       int[] count = new int[26];\n        for (int i = 0; i < chars.Length;
    i++) {\n            char c = chars[i];\n            count[c - 'a']++;\n        }\n
    \       List<string> words = new List<string>();\n        for (int i = 0; i <
    26; i++) {\n            if (count[i] == n) {\n                words.Add(string.Join(\"\",
    Enumerable.Range(0, 26).Select(x => (char)('a' + x)).ToArray()));\n            }\n
    \       }\n        return words;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"), (4L)).Equals((new
    List<string>(new string[]{(string)\"little\"}))));\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (3L)).Equals((new List<string>(new string[]{(string)\"Mary\",
    (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple white space\"),
    (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello world\"),
    (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n    Debug.Assert(SelectWords((\"Uncle
    sam\"), (3L)).Equals((new List<string>(new string[]{(string)\"Uncle\"}))));\n
    \   Debug.Assert(SelectWords((\"\"), (4L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"a
    b c d e f\"), (1L)).Equals((new List<string>(new string[]{(string)\"b\", (string)\"c\",
    (string)\"d\", (string)\"f\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.IndexOutOfRangeException: Index was outside
    the bounds of the array.\n  at Problem.SelectWords (System.String s, System.Int64
    n) [0x00037] in <d3b7054b2520441cad58639daa7e4bc2>:0 \n  at Problem.Main (System.String[]
    args) [0x00001] in <d3b7054b2520441cad58639daa7e4bc2>:0 \n[ERROR] FATAL UNHANDLED
    EXCEPTION: System.IndexOutOfRangeException: Index was outside the bounds of the
    array.\n  at Problem.SelectWords (System.String s, System.Int64 n) [0x00037] in
    <d3b7054b2520441cad58639daa7e4bc2>:0 \n  at Problem.Main (System.String[] args)
    [0x00001] in <d3b7054b2520441cad58639daa7e4bc2>:0 \n"
  stdout: ''
  timestamp: 1659977327
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    public static List<string> SelectWords(string
    s, long n) {\n        List<string> result = new List<string>();\n        long
    count = 0;\n        foreach (char c in s) {\n            if (char.IsLetter(c))
    {\n                count++;\n            }\n        }\n        if (count == 0)
    {\n            return result;\n        }\n        long max = (long)Math.Ceiling(n/count);\n
    \       long start = 0;\n        long end = 0;\n        long current = 0;\n        bool
    found = false;\n        string word = \"\";\n        foreach (char c in s) {\n
    \           if (char.IsLetter(c)) {\n                current++;\n                if
    (current == max) {\n                    result.Add(word);\n                    current
    = 0;\n                    found = true;\n                }\n            }\n            else
    {\n                current = 0;\n            }\n        }\n        if (!found)
    {\n            result.Add(word);\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary had a
    little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n
    \   Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple
    white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello
    world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n
    \   Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new
    List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new
    List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"f\"}))));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpxt_1dhxg.cs(26,31): error CS0121: The call is ambiguous between the following
    methods or properties: ''Math.Ceiling(decimal)'' and ''Math.Ceiling(double)''

    /tmp/tmpxt_1dhxg.cs(27,14): warning CS0219: The variable ''start'' is assigned
    but its value is never used

    /tmp/tmpxt_1dhxg.cs(28,14): warning CS0219: The variable ''end'' is assigned but
    its value is never used

    '
  timestamp: 1659977327
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    public static List<string> SelectWords(string
    s, long n) {\n        List<string> result = new List<string>();\n        string
    word = \"\";\n        bool isConsonant = false;\n        foreach (char c in s)
    {\n            if (char.IsLetter(c)) {\n                word += c;\n                isConsonant
    = true;\n            }\n            else if (isConsonant) {\n                if
    (word.Length == n) {\n                    result.Add(word);\n                    word
    = \"\";\n                    isConsonant = false;\n                }\n            }\n
    \       }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"), (4L)).Equals((new
    List<string>(new string[]{(string)\"little\"}))));\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (3L)).Equals((new List<string>(new string[]{(string)\"Mary\",
    (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple white space\"),
    (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello world\"),
    (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n    Debug.Assert(SelectWords((\"Uncle
    sam\"), (3L)).Equals((new List<string>(new string[]{(string)\"Uncle\"}))));\n
    \   Debug.Assert(SelectWords((\"\"), (4L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"a
    b c d e f\"), (1L)).Equals((new List<string>(new string[]{(string)\"b\", (string)\"c\",
    (string)\"d\", (string)\"f\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <b59fd589663941d5ad3500d43e13b4ea>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <b59fd589663941d5ad3500d43e13b4ea>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977327
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    public static List<string> SelectWords(string
    s, long n) {\n        List<string> result = new List<string>();\n        if (string.IsNullOrEmpty(s))
    {\n            return result;\n        }\n        long n = Math.Abs(n);\n        long
    max = (long)s.Length;\n        long count = 0;\n        long start = 0;\n        long
    end = 0;\n        long mid = 0;\n        long maxCount = 0;\n        bool isConsonant
    = false;\n        bool isConsonant2 = false;\n        bool isConsonant3 = false;\n
    \       bool isConsonant4 = false;\n        bool isConsonant5 = false;\n        bool
    isConsonant6 = false;\n        bool isConsonant7 = false;\n        bool isConsonant8
    = false;\n        bool isConsonant9 = false;\n        bool isConsonant10 = false;\n
    \       bool isConsonant11 = false;\n        bool isConsonant12 = false;\n        bool
    isConsonant13 = false;\n        bool isConsonant14 = false;\n        bool isConsonant15
    = false;\n        bool isConsonant16 = false;\n        bool isConsonant17 = false;\n
    \       bool isConsonant18 = false;\n        bool isConsonant19 = false;\n        bool
    isConsonant20 = false;\n        bool isConsonant21 = false;\n        bool isConsonant22
    = false;\n        bool isConsonant23 = false;\n        bool isConsonant24 = false;\n
    \       bool isConsonant25 = false;\n        bool isConsonant26 = false;\n        bool
    isConsonant27 = false;\n        bool isConsonant28 = false;\n        bool isConsonant29
    = false;\n        bool isConsonant30 = false;\n        bool isConsonant31 = false;\n
    \       bool isConsonant32 = false;\n        bool isConsonant33 = false;\n        bool
    isConsonant34 = false;\n        bool isConsonant35 = false;\n        bool isConsonant36
    = false;\n        bool isConsonant37 = false;\n        bool isConsonant38 = false;\n
    \       bool isConsonant39 = false;\n        bool isConsonant40 = false;\n        bool
    isConsonant41 = false;\n        bool isConsonant42 = false;\n        bool isConsonant43
    = false;\n        bool isConsonant44 = false;\n        bool isConsonant45 = false;\n
    \       bool isConsonant46 = false;\n        bool isConsonant47 = false;\n        bool
    isConsonant48 = false;\n        bool isConsonant49 = false;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary had a
    little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n
    \   Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple
    white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello
    world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n
    \   Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new
    List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new
    List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"f\"}))));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpg7k0w7ju.cs(20,14): error CS0136: A local or parameter named ''n'' cannot
    be declared in this scope because that name is used in an enclosing local scope
    to define a local or parameter

    /tmp/tmpg7k0w7ju.cs(20,27): error CS0165: Use of unassigned local variable ''n''

    /tmp/tmpg7k0w7ju.cs(22,14): warning CS0219: The variable ''count'' is assigned
    but its value is never used

    /tmp/tmpg7k0w7ju.cs(23,14): warning CS0219: The variable ''start'' is assigned
    but its value is never used

    /tmp/tmpg7k0w7ju.cs(24,14): warning CS0219: The variable ''end'' is assigned but
    its value is never used

    /tmp/tmpg7k0w7ju.cs(25,14): warning CS0219: The variable ''mid'' is assigned but
    its value is never used

    /tmp/tmpg7k0w7ju.cs(26,14): warning CS0219: The variable ''maxCount'' is assigned
    but its value is never used

    /tmp/tmpg7k0w7ju.cs(27,14): warning CS0219: The variable ''isConsonant'' is assigned
    but its value is never used

    /tmp/tmpg7k0w7ju.cs(28,14): warning CS0219: The variable ''isConsonant2'' is assigned
    but its value is never used

    /tmp/tmpg7k0w7ju.cs(29,14): warning CS0219: The variable ''isConsonant3'' is assigned
    but its value is never used

    /tmp/tmpg7k0w7ju.cs(30,14): warning CS0219: The variable ''isConsonant4'' is assigned
    but its value is never used

    /tmp/tmpg7k0w7ju.cs(31,14): warning CS0219: The variable ''isConsonant5'' is assigned
    but its value is never used

    /tmp/tmpg7k0w7ju.cs(32,14): warning CS0219: The variable ''isConsonant6'' is assigned
    but its value is never used

    /tmp/tmpg7k0w7ju.cs(33,14): warning CS0219: The variable ''isConsonant7'' is assigned
    but its value is never used

    /tmp/tmpg7k0w7ju.cs(34,14): warning CS0219: The variable ''isConsonant8'' is assigned
    but its value is never used

    /tmp/tmpg7k0w7ju.cs(35,14): warning CS0219: The variable ''isConsonant9'' is assigned
    but its value is never used

    /tmp/tmpg7k0w7ju.cs(36,14): warning CS0219: The variable ''isConsonant10'' is
    assigned but its value is never used

    /tmp/tm'
  timestamp: 1659977327
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    public static List<string> SelectWords(string
    s, long n) {\n        List<string> result = new List<string>();\n        string
    word = \"\";\n        foreach (char c in s) {\n            if (char.IsLetter(c))
    {\n                word += c;\n            }\n        }\n        if (word.Length
    == n) {\n            result.Add(word);\n        }\n        return result;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n
    \   Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple
    white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello
    world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n
    \   Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new
    List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new
    List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"f\"}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <12eb5f66c92b48699035e7d4b06e30e1>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <12eb5f66c92b48699035e7d4b06e30e1>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977322
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    public static List<string> SelectWords(string
    s, long n) {\n        List<string> result = new List<string>();\n        if (s
    == \"\") {\n            return result;\n        }\n        string word = s;\n
    \       string lastWord = \"\";\n        long lastN = 0;\n        bool isWord
    = false;\n        bool isLastWord = false;\n        bool isLastN = false;\n        bool
    isLastConsonant = false;\n        bool isLastConsonant2 = false;\n        bool
    isLastConsonant3 = false;\n        bool isLastConsonant4 = false;\n        bool
    isLastConsonant5 = false;\n        bool isLastConsonant6 = false;\n        bool
    isLastConsonant7 = false;\n        bool isLastConsonant8 = false;\n        bool
    isLastConsonant9 = false;\n        bool isLastConsonant10 = false;\n        bool
    isLastConsonant11 = false;\n        bool isLastConsonant12 = false;\n        bool
    isLastConsonant13 = false;\n        bool isLastConsonant14 = false;\n        bool
    isLastConsonant15 = false;\n        bool isLastConsonant16 = false;\n        bool
    isLastConsonant17 = false;\n        bool isLastConsonant18 = false;\n        bool
    isLastConsonant19 = false;\n        bool isLastConsonant20 = false;\n        bool
    isLastConsonant21 = false;\n        bool isLastConsonant22 = false;\n        bool
    isLastConsonant23 = false;\n        bool isLastConsonant24 = false;\n        bool
    isLastConsonant25 = false;\n        bool isLastConsonant26 = false;\n        bool
    isLastConsonant27 = false;\n        bool isLastConsonant28 = false;\n        bool
    isLastConsonant29 = false;\n        bool isLastConsonant30 = false;\n        bool
    isLastConsonant31 = false;\n        bool isLastConsonant32 = false;\n        bool
    isLastConsonant33 = false;\n        bool isLastConsonant34 = false;\n        bool
    isLastConsonant35 = false;\n        bool isLastConsonant36 = false;\n        bool
    isLastConsonant37 = false;\n        bool isLastConsonant38 = false;\n        bool
    isLastConsonant39 = false;\n        bool isLastConsonant40 = false;\n        bool
    isLastConsonant41 = false;\n        bool isLastConsonant42 = false;\n        bool
    isLastConsonant43 = false;\n        bool isLastConsonant44 = false;\n        bool
    isLastConsonant45 = false;\n\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"), (4L)).Equals((new
    List<string>(new string[]{(string)\"little\"}))));\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (3L)).Equals((new List<string>(new string[]{(string)\"Mary\",
    (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple white space\"),
    (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello world\"),
    (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n    Debug.Assert(SelectWords((\"Uncle
    sam\"), (3L)).Equals((new List<string>(new string[]{(string)\"Uncle\"}))));\n
    \   Debug.Assert(SelectWords((\"\"), (4L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"a
    b c d e f\"), (1L)).Equals((new List<string>(new string[]{(string)\"b\", (string)\"c\",
    (string)\"d\", (string)\"f\"}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpotbdvybv.cs(21,16): warning CS0219: The variable ''lastWord'' is assigned
    but its value is never used

    /tmp/tmpotbdvybv.cs(22,14): warning CS0219: The variable ''lastN'' is assigned
    but its value is never used

    /tmp/tmpotbdvybv.cs(23,14): warning CS0219: The variable ''isWord'' is assigned
    but its value is never used

    /tmp/tmpotbdvybv.cs(24,14): warning CS0219: The variable ''isLastWord'' is assigned
    but its value is never used

    /tmp/tmpotbdvybv.cs(25,14): warning CS0219: The variable ''isLastN'' is assigned
    but its value is never used

    /tmp/tmpotbdvybv.cs(26,14): warning CS0219: The variable ''isLastConsonant'' is
    assigned but its value is never used

    /tmp/tmpotbdvybv.cs(27,14): warning CS0219: The variable ''isLastConsonant2''
    is assigned but its value is never used

    /tmp/tmpotbdvybv.cs(28,14): warning CS0219: The variable ''isLastConsonant3''
    is assigned but its value is never used

    /tmp/tmpotbdvybv.cs(29,14): warning CS0219: The variable ''isLastConsonant4''
    is assigned but its value is never used

    /tmp/tmpotbdvybv.cs(30,14): warning CS0219: The variable ''isLastConsonant5''
    is assigned but its value is never used

    /tmp/tmpotbdvybv.cs(31,14): warning CS0219: The variable ''isLastConsonant6''
    is assigned but its value is never used

    /tmp/tmpotbdvybv.cs(32,14): warning CS0219: The variable ''isLastConsonant7''
    is assigned but its value is never used

    /tmp/tmpotbdvybv.cs(33,14): warning CS0219: The variable ''isLastConsonant8''
    is assigned but its value is never used

    /tmp/tmpotbdvybv.cs(34,14): warning CS0219: The variable ''isLastConsonant9''
    is assigned but its value is never used

    /tmp/tmpotbdvybv.cs(35,14): warning CS0219: The variable ''isLastConsonant10''
    is assigned but its value is never used

    /tmp/tmpotbdvybv.cs(36,14): warning CS0219: The variable ''isLastConsonant11''
    is assigned but its value is never used

    /tmp/tmpotbdvybv.cs(37,14): warning CS0219: The variable ''isLastConsonant12''
    is assigned but its value is ne'
  timestamp: 1659977327
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    public static List<string> SelectWords(string
    s, long n) {\n        List<string> result = new List<string>();\n        if (string.IsNullOrEmpty(s))\n
    \           return result;\n        char[] chars = s.ToCharArray();\n        int[]
    count = new int[26];\n        foreach (char c in chars)\n            count[c -
    'a']++;\n        List<string> words = new List<string>();\n        foreach (int
    i in count)\n            if (i == n)\n                words.Add(i.ToString());\n
    \       return words;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n
    \   Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple
    white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello
    world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n
    \   Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new
    List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new
    List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"f\"}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.IndexOutOfRangeException: Index was outside
    the bounds of the array.\n  at Problem.SelectWords (System.String s, System.Int64
    n) [0x0003a] in <081f6109fe8042ae97163362bf2919de>:0 \n  at Problem.Main (System.String[]
    args) [0x00001] in <081f6109fe8042ae97163362bf2919de>:0 \n[ERROR] FATAL UNHANDLED
    EXCEPTION: System.IndexOutOfRangeException: Index was outside the bounds of the
    array.\n  at Problem.SelectWords (System.String s, System.Int64 n) [0x0003a] in
    <081f6109fe8042ae97163362bf2919de>:0 \n  at Problem.Main (System.String[] args)
    [0x00001] in <081f6109fe8042ae97163362bf2919de>:0 \n"
  stdout: ''
  timestamp: 1659977327
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    public static List<string> SelectWords(string
    s, long n) {\n        // TODO: Implement this function\n        List<string> result
    = new List<string>();\n        string word = \"\";\n        foreach (char c in
    s) {\n            if (char.IsLetter(c)) {\n                word += c;\n            }\n
    \       }\n        string word2 = \"\";\n        foreach (char c in word) {\n
    \           if (char.IsLetter(c)) {\n                word2 += c;\n            }\n
    \       }\n        string word3 = \"\";\n        foreach (char c in word2) {\n
    \           if (char.IsLetter(c)) {\n                word3 += c;\n            }\n
    \       }\n        string word4 = \"\";\n        foreach (char c in word3) {\n
    \           if (char.IsLetter(c)) {\n                word4 += c;\n            }\n
    \       }\n        string word5 = \"\";\n        foreach (char c in word4) {\n
    \           if (char.IsLetter(c)) {\n                word5 += c;\n            }\n
    \       }\n        string word6 = \"\";\n        foreach (char c in word5) {\n
    \           if (char.IsLetter(c)) {\n                word6 += c;\n            }\n
    \       }\n        string word7 = \"\";\n        foreach (char c in word6) {\n
    \           if (char.IsLetter(c)) {\n                word7 += c;\n            }\n
    \       }\n        string word8 = \"\";\n        foreach (char c in word7) {\n
    \           if (char.IsLetter(c)) {\n                word8 += c;\n            }\n
    \       }\n        string word9 = \"\";\n        foreach (char c in word8) {\n
    \           if (char.IsLetter(c)) {\n                word9 += c;\n            }\n
    \       }\n        string word10 = \"\";\n        foreach (char c in word9) {\n
    \           if (char.IsLetter(c)) {\n                word10 += c;\n            }\n
    \       }\n        string word11 = \"\";\n        foreach (char c in word10) {\n
    \           if (char.IsLetter(c)) {\n                word11 += c;\n            }\n
    \       }\n        string word12 = \"\";\n        foreach (char c in word11) {\n
    \           if (char.IsLetter(c)) {\n                word12 += c;\n            }\n
    \       }\n        string word13 = \"\";\n        foreach (char c in word12) {\n
    \           if (char.IsLetter(c)) {\n                word13 += c;\n            }\n
    \       }\n        string word14 = \"\";\n        foreach (char c in word13) {\n
    \           if (char.IsLetter(c)) {\n                word14 += c;\n            }\n
    \       }\n        string word15 = \"\";\n        foreach (char c in word14) {\n
    \           if (char.IsLetter(c)) {\n                word15 += c;\n            }\n
    \       }\n        string word16 = \"\";\n        foreach (char c in word15) {\n
    \           if (char.IsLetter(c)) {\n                word\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary had a little
    lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n
    \   Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple
    white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello
    world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n
    \   Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new
    List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new
    List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"f\"}))));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp1xoq1_c0.cs(111,21): error CS1002: ; expected

    /tmp/tmp1xoq1_c0.cs(113,5): error CS0106: The modifier ''public'' is not valid
    for this item

    /tmp/tmp1xoq1_c0.cs(123,2): error CS1513: } expected

    '
  timestamp: 1659977326
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    public static List<string> SelectWords(string
    s, long n) {\n        List<string> result = new List<string>();\n        if (string.IsNullOrEmpty(s))
    {\n            return result;\n        }\n        char[] chars = s.ToCharArray();\n
    \       Array.Sort(chars);\n        List<char> consonants = new List<char>();\n
    \       foreach (char c in chars) {\n            if (char.IsLetterOrDigit(c))
    {\n                consonants.Add(c);\n            }\n        }\n        long
    total = 0;\n        foreach (char c in consonants) {\n            total += (int)c;\n
    \       }\n        long remaining = n;\n        List<string> words = new List<string>();\n
    \       foreach (char c in chars) {\n            if (char.IsLetterOrDigit(c))
    {\n                long num = Convert.ToInt64(c);\n                long remaining
    = num - total;\n                if (remaining == 0) {\n                    words.Add(new
    string(chars, 0, chars.Length - 1));\n                }\n                total
    += remaining;\n            }\n        }\n        return words;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary had a
    little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n
    \   Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple
    white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello
    world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n
    \   Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new
    List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new
    List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"f\"}))));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp8zmiqmvi.cs(37,22): error CS0136: A local or parameter named ''remaining''
    cannot be declared in this scope because that name is used in an enclosing local
    scope to define a local or parameter

    '
  timestamp: 1659977327
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    public static List<string> SelectWords(string
    s, long n) {\n        // TODO: Implement this function\n        List<string> result
    = new List<string>();\n        long count = 0;\n        foreach (char c in s)\n
    \       {\n            if (char.IsLetter(c))\n            {\n                count++;\n
    \           }\n        }\n        if (count == n)\n        {\n            result.Add(s);\n
    \       }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"), (4L)).Equals((new
    List<string>(new string[]{(string)\"little\"}))));\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (3L)).Equals((new List<string>(new string[]{(string)\"Mary\",
    (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple white space\"),
    (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello world\"),
    (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n    Debug.Assert(SelectWords((\"Uncle
    sam\"), (3L)).Equals((new List<string>(new string[]{(string)\"Uncle\"}))));\n
    \   Debug.Assert(SelectWords((\"\"), (4L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"a
    b c d e f\"), (1L)).Equals((new List<string>(new string[]{(string)\"b\", (string)\"c\",
    (string)\"d\", (string)\"f\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <72e6e2d399c64614ab3e722b1ead5de5>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <72e6e2d399c64614ab3e722b1ead5de5>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977322
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    public static List<string> SelectWords(string
    s, long n) {\n        List<string> result = new List<string>();\n        long
    count = 0;\n        foreach (char c in s) {\n            if (char.IsLetter(c))
    {\n                count++;\n            }\n        }\n        if (count == 0)
    {\n            return result;\n        }\n        long max = (long)Math.Ceiling((double)n
    / count);\n        long start = 0;\n        long end = 0;\n        long index
    = 0;\n        long count = 0;\n        long last = 0;\n        bool isFirst =
    true;\n        bool isLast = true;\n        bool isMiddle = true;\n        bool
    isLastMiddle = true;\n        bool isFirstMiddle = true;\n        bool isLastLast
    = true;\n        bool isFirstLast = true;\n        bool isMiddleMiddle = true;\n
    \       bool isLastMiddleLast = true;\n        bool isFirstMiddleLast = true;\n
    \       bool isLastMiddleMiddle = true;\n        bool isFirstLastLast = true;\n
    \       bool isMiddleMiddleLast = true;\n        bool isLastMiddleMiddleLast =
    true;\n        bool isFirstMiddleMiddleLast = true;\n        bool isLastMiddleMiddleMiddle
    = true;\n        bool isFirstLastMiddleMiddle = true;\n        bool isLastMiddleMiddleMiddleLast
    = true;\n        bool isFirstMiddleMiddleMiddleLast = true;\n        bool isLastMiddleMiddleMiddleLast
    = true;\n        bool isFirstMiddleMiddleMiddleLast = true;\n        bool isLastMiddleMiddleMiddleLast
    = true;\n        bool isFirstMiddleMiddleMiddleLast = true;\n        bool isLastMiddleMiddleMiddleLast
    = true;\n        bool isFirstMiddleMiddleMiddleLast = true;\n        bool isLastMiddleMiddleMiddleLast
    = true;\n        bool isFirstMiddleMiddleMiddleLast = true;\n        bool isLastMiddleMiddleMiddleLast
    = true;\n        bool isFirstMiddleMiddleMiddleLast = true;\n        bool isLastMiddleMiddleMiddleLast
    = true;\n        bool isFirstMiddleMiddleMiddleLast = true;\n        bool isLastMiddleMiddleMiddleLast
    = true;\n        bool isFirstMiddleMiddleMiddleLast = true;\n        bool isLastMiddleMiddleMiddleLast
    = true;\n        bool isFirstMiddleMiddleMiddleLast = true;\n        bool isLastMiddleMiddleMiddleLast
    = true;\n        bool isFirstMiddleMiddleMiddleLast = true;\n        bool isLastMiddleMiddleMiddleLast
    = true;\n        bool isFirstMiddleMiddleMiddleLast = true;\n        bool isLastMiddleMiddleMiddleLast
    = true;\n        bool isFirstMiddleMiddleMiddleLast = true;\n        bool isLastMiddleMiddleMiddleLast
    = true;\n        bool isFirstMiddleMiddleMiddleLast = true;\n        bool isLastMiddleMiddleMiddleLast
    = true;\n        bool isFirstMiddleMiddleMiddleLast = true;\n        bool isLastMiddleMiddleMiddleLast
    = true;\n        bool isFirstMiddleMiddleMiddle\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"),
    (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (3L)).Equals((new List<string>(new string[]{(string)\"Mary\",
    (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple white space\"),
    (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello world\"),
    (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n    Debug.Assert(SelectWords((\"Uncle
    sam\"), (3L)).Equals((new List<string>(new string[]{(string)\"Uncle\"}))));\n
    \   Debug.Assert(SelectWords((\"\"), (4L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"a
    b c d e f\"), (1L)).Equals((new List<string>(new string[]{(string)\"b\", (string)\"c\",
    (string)\"d\", (string)\"f\"}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpmtssypk5.cs(78,39): error CS1002: ; expected

    '
  timestamp: 1659977326
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    public static List<string> SelectWords(string
    s, long n) {\n        // TODO: Implement this function\n        List<string> result
    = new List<string>();\n        string temp = s;\n        string temp2 = \"\";\n
    \       long count = 0;\n        bool flag = false;\n        foreach (char c in
    temp)\n        {\n            if (char.IsLetter(c))\n            {\n                temp2
    = temp2 + c;\n                count++;\n            }\n            if (count ==
    n)\n            {\n                result.Add(temp2);\n                temp2 =
    \"\";\n                count = 0;\n            }\n        }\n        return result;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n
    \   Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple
    white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello
    world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n
    \   Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new
    List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new
    List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"f\"}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <1b13cfe2693f459c8ebfbff3881d2e19>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <1b13cfe2693f459c8ebfbff3881d2e19>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977327
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    public static List<string> SelectWords(string
    s, long n) {\n        List<string> result = new List<string>();\n        string
    word = \"\";\n        foreach (char c in s) {\n            if (char.IsLetter(c))
    {\n                word += c;\n            }\n        }\n        if (word.Length
    == n) {\n            result.Add(word);\n        }\n        return result;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n
    \   Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple
    white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello
    world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n
    \   Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new
    List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new
    List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"f\"}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <12eb5f66c92b48699035e7d4b06e30e1>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <12eb5f66c92b48699035e7d4b06e30e1>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977322
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    public static List<string> SelectWords(string
    s, long n) {\n        List<string> result = new List<string>();\n        string
    word = \"\";\n        foreach (char c in s) {\n            if (char.IsLetter(c))
    {\n                word += c;\n            }\n        }\n        if (word.Length
    == n) {\n            result.Add(word);\n        }\n        return result;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n
    \   Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple
    white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello
    world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n
    \   Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new
    List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new
    List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"f\"}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <12eb5f66c92b48699035e7d4b06e30e1>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <12eb5f66c92b48699035e7d4b06e30e1>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977322
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    public static List<string> SelectWords(string
    s, long n) {\n        List<string> result = new List<string>();\n        if (string.IsNullOrEmpty(s))\n
    \           return result;\n        char[] chars = s.ToCharArray();\n        List<char>
    consonants = new List<char>();\n        foreach (char c in chars)\n        {\n
    \           if (char.IsLower(c))\n            {\n                consonants.Add(c);\n
    \           }\n        }\n        string word = \"\";\n        foreach (char c
    in consonants)\n        {\n            word += c;\n        }\n        string word2
    = \"\";\n        foreach (char c in consonants)\n        {\n            word2
    += c;\n        }\n        string word3 = \"\";\n        foreach (char c in consonants)\n
    \       {\n            word3 += c;\n        }\n        string word4 = \"\";\n
    \       foreach (char c in consonants)\n        {\n            word4 += c;\n        }\n
    \       string word5 = \"\";\n        foreach (char c in consonants)\n        {\n
    \           word5 += c;\n        }\n        string word6 = \"\";\n        foreach
    (char c in consonants)\n        {\n            word6 += c;\n        }\n        string
    word7 = \"\";\n        foreach (char c in consonants)\n        {\n            word7
    += c;\n        }\n        string word8 = \"\";\n        foreach (char c in consonants)\n
    \       {\n            word8 += c;\n        }\n        string word9 = \"\";\n
    \       foreach (char c in consonants)\n        {\n            word9 += c;\n        }\n
    \       string word10 = \"\";\n        foreach (char c in consonants)\n        {\n
    \           word10 += c;\n        }\n        string word11 = \"\";\n        foreach
    (char c in consonants)\n        {\n            word11 += c;\n        }\n        string
    word12 = \"\";\n        foreach (char c in consonants)\n        {\n            word12
    += c;\n        }\n        string word13 = \"\";\n        foreach (char c in consonants)\n
    \       {\n            word13 += c;\n        }\n        string word14 = \"\";\n
    \       foreach (char c in consonants)\n        {\n            word14 += c;\n
    \       }\n        string word15 = \"\";\n        foreach (char c in consonants)\n
    \       {\n            word15 += c;\n        }\n        string word16 = \"\";\n
    \       foreach (char c in consonants)\n        {\n            word16 += c;\n
    \       }\n        string word17 = \"\";\n        foreach (char c in consonants)\n
    \       {\n            word17 += c;\n        }\n        string word18 = \"\";\n
    \       foreach (char c in consonant\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"), (4L)).Equals((new
    List<string>(new string[]{(string)\"little\"}))));\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (3L)).Equals((new List<string>(new string[]{(string)\"Mary\",
    (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple white space\"),
    (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello world\"),
    (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n    Debug.Assert(SelectWords((\"Uncle
    sam\"), (3L)).Equals((new List<string>(new string[]{(string)\"Uncle\"}))));\n
    \   Debug.Assert(SelectWords((\"\"), (4L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"a
    b c d e f\"), (1L)).Equals((new List<string>(new string[]{(string)\"b\", (string)\"c\",
    (string)\"d\", (string)\"f\"}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpfw4c0gej.cs(114,37): error CS1026: ) expected

    /tmp/tmpfw4c0gej.cs(114,37): error CS1525: Invalid expression term ''}''

    /tmp/tmpfw4c0gej.cs(114,37): error CS1002: ; expected

    '
  timestamp: 1659977326
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    public static List<string> SelectWords(string
    s, long n) {\n        List<string> result = new List<string>();\n        if (string.IsNullOrEmpty(s))
    {\n            return result;\n        }\n        string word = string.Empty;\n
    \       foreach (char c in s) {\n            if (char.IsLetter(c)) {\n                word
    += c;\n            }\n        }\n        string word2 = word;\n        long count
    = 1;\n        bool flag = false;\n        List<string> list = new List<string>();\n
    \       foreach (char c in word2) {\n            if (char.IsLetter(c)) {\n                list.Add(word);\n
    \               count++;\n                if (count == n) {\n                    flag
    = true;\n                    break;\n                }\n            }\n        }\n
    \       if (flag) {\n            foreach (string s in list) {\n                result.Add(s);\n
    \           }\n        }\n        return result;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"),
    (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (3L)).Equals((new List<string>(new string[]{(string)\"Mary\",
    (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple white space\"),
    (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello world\"),
    (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n    Debug.Assert(SelectWords((\"Uncle
    sam\"), (3L)).Equals((new List<string>(new string[]{(string)\"Uncle\"}))));\n
    \   Debug.Assert(SelectWords((\"\"), (4L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"a
    b c d e f\"), (1L)).Equals((new List<string>(new string[]{(string)\"b\", (string)\"c\",
    (string)\"d\", (string)\"f\"}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp1dw78s0u.cs(41,29): error CS0136: A local or parameter named ''s'' cannot
    be declared in this scope because that name is used in an enclosing local scope
    to define a local or parameter

    '
  timestamp: 1659977327
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    public static List<string> SelectWords(string
    s, long n) {\n        List<string> result = new List<string>();\n        if (string.IsNullOrEmpty(s))
    return result;\n        long count = 0;\n        foreach (char c in s) {\n            if
    (char.IsLetter(c)) {\n                count++;\n            }\n        }\n        if
    (count != n) return result;\n        string word = \"\";\n        foreach (char
    c in s) {\n            if (char.IsLetter(c)) {\n                word += c;\n            }\n
    \       }\n        result.Add(word);\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary had a
    little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n
    \   Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple
    white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello
    world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n
    \   Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new
    List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new
    List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"f\"}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f997c20d81b44facb392afe0cd3de46a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f997c20d81b44facb392afe0cd3de46a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977325
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    public static List<string> SelectWords(string
    s, long n) {\n        List<string> result = new List<string>();\n        if (s.Length
    == 0)\n            return result;\n        string word = s.Substring(0, 1);\n
    \       string rest = s.Substring(1, s.Length - 1);\n        bool isConsonant
    = true;\n        foreach (char c in word)\n            if (char.IsLetterOrDigit(c))\n
    \               isConsonant = false;\n        if (isConsonant)\n            result.Add(word);\n
    \       if (rest != \"\")\n            result.AddRange(SelectWords(rest, n));\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(SelectWords((\"Mary had a little lamb\"), (4L)).Equals((new List<string>(new
    string[]{(string)\"little\"}))));\n    Debug.Assert(SelectWords((\"Mary had a
    little lamb\"), (3L)).Equals((new List<string>(new string[]{(string)\"Mary\",
    (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple white space\"),
    (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello world\"),
    (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n    Debug.Assert(SelectWords((\"Uncle
    sam\"), (3L)).Equals((new List<string>(new string[]{(string)\"Uncle\"}))));\n
    \   Debug.Assert(SelectWords((\"\"), (4L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"a
    b c d e f\"), (1L)).Equals((new List<string>(new string[]{(string)\"b\", (string)\"c\",
    (string)\"d\", (string)\"f\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <30e950ec17094ea292aa2c24f724c0e6>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <30e950ec17094ea292aa2c24f724c0e6>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977327
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    public static List<string> SelectWords(string
    s, long n) {\n        List<string> result = new List<string>();\n        if (string.IsNullOrEmpty(s))
    {\n            return result;\n        }\n        long count = 0;\n        foreach
    (char c in s) {\n            if (char.IsLetter(c)) {\n                count++;\n
    \           }\n        }\n        if (count != n) {\n            return result;\n
    \       }\n        string word = \"\";\n        foreach (char c in s) {\n            if
    (char.IsLetter(c)) {\n                word += c;\n            }\n        }\n        string
    temp = word;\n        string temp2 = \"\";\n        List<string> temp3 = new List<string>();\n
    \       List<string> temp4 = new List<string>();\n        List<string> temp5 =
    new List<string>();\n        List<string> temp6 = new List<string>();\n        List<string>
    temp7 = new List<string>();\n        List<string> temp8 = new List<string>();\n
    \       List<string> temp9 = new List<string>();\n        List<string> temp10
    = new List<string>();\n        List<string> temp11 = new List<string>();\n        List<string>
    temp12 = new List<string>();\n        List<string> temp13 = new List<string>();\n
    \       List<string> temp14 = new List<string>();\n        List<string> temp15
    = new List<string>();\n        List<string> temp16 = new List<string>();\n        List<string>
    temp17 = new List<string>();\n        List<string> temp18 = new List<string>();\n
    \       List<string> temp19 = new List<string>();\n        List<string> temp20
    = new List<string>();\n        List<string> temp21 = new List<string>();\n        List<string>
    temp22 = new List<string>();\n        List<string> temp23 = new List<string>();\n
    \       List<string> temp24 = new List<string>();\n        List<string> temp25
    = new List<string>();\n        List<string> temp26 = new List<string>();\n        List<string>
    temp27 = new List<string>();\n        List<string> temp28 = new List<string>();\n
    \       List<string> temp29 = new List<string>();\n        List<string> temp30
    = new List<string>();\n        List<string> temp31 = new List<string>();\n        List<string>
    temp32 = new List<string>();\n        List<string> temp33 = new List<string>();\n
    \       List<string> temp34 = new List<string>();\n        List<string> temp35
    = new List<string>();\n        List<string> temp36 = new List<string>();\n        List<string>
    temp37 = new List<string>();\n        List<string> temp38 = new List<string>();\n
    \       List<string> temp39 = new List<string>();\n        List<string\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n
    \   Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple
    white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello
    world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n
    \   Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new
    List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new
    List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"f\"}))));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpt6gwhix4.cs(74,14): error CS1525: Invalid expression term ''string''

    /tmp/tmpt6gwhix4.cs(74,20): error CS1002: ; expected

    '
  timestamp: 1659977327
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    public static List<string> SelectWords(string
    s, long n) {\n        List<string> result = new List<string>();\n        if (s.Length
    == 0) {\n            return result;\n        }\n        long count = 0;\n        foreach
    (char c in s) {\n            if (char.IsLetter(c)) {\n                count++;\n
    \           }\n        }\n        if (count != n) {\n            return result;\n
    \       }\n        string word = s;\n        List<string> words = new List<string>();\n
    \       while (word != \"\") {\n            words.Add(word);\n            word
    = word.Substring(0, word.Length - 1);\n        }\n        foreach (string word
    in words) {\n            foreach (char c in word) {\n                if (char.IsLetter(c))
    {\n                    count++;\n                }\n            }\n            if
    (count == n) {\n                result.Add(word);\n            }\n        }\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(SelectWords((\"Mary had a little lamb\"), (4L)).Equals((new List<string>(new
    string[]{(string)\"little\"}))));\n    Debug.Assert(SelectWords((\"Mary had a
    little lamb\"), (3L)).Equals((new List<string>(new string[]{(string)\"Mary\",
    (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple white space\"),
    (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello world\"),
    (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n    Debug.Assert(SelectWords((\"Uncle
    sam\"), (3L)).Equals((new List<string>(new string[]{(string)\"Uncle\"}))));\n
    \   Debug.Assert(SelectWords((\"\"), (4L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"a
    b c d e f\"), (1L)).Equals((new List<string>(new string[]{(string)\"b\", (string)\"c\",
    (string)\"d\", (string)\"f\"}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpsdwb3tzs.cs(35,25): error CS0136: A local or parameter named ''word''
    cannot be declared in this scope because that name is used in an enclosing local
    scope to define a local or parameter

    '
  timestamp: 1659977327
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    public static List<string> SelectWords(string
    s, long n) {\n        List<string> result = new List<string>();\n        if (s
    == \"\") {\n            return result;\n        }\n        long count = 0;\n        foreach
    (char c in s) {\n            if (char.IsLetter(c)) {\n                count++;\n
    \           }\n        }\n        if (count != n) {\n            return result;\n
    \       }\n        string word = s;\n        string lastWord = \"\";\n        string
    lastChar = \"\";\n        bool isLastCharConsonant = false;\n        bool isLastWordConsonant
    = false;\n        bool isLastCharConsonantLastWord = false;\n        bool isLastWordConsonantLastChar
    = false;\n        bool isLastCharConsonantLastWordLastChar = false;\n        bool
    isLastWordConsonantLastCharLastWord = false;\n        bool isLastCharConsonantLastWordLastCharLastWord
    = false;\n        bool isLastWordConsonantLastCharLastWordLastChar = false;\n
    \       bool isLastCharConsonantLastWordLastCharLastWordLastChar = false;\n        bool
    isLastWordConsonantLastCharLastWordLastCharLastWord = false;\n        bool isLastCharConsonantLastWordLastCharLastWordLastChar
    = false;\n        bool isLastWordConsonantLastCharLastWordLastCharLastWord = false;\n
    \       bool isLastCharConsonantLastWordLastCharLastWordLastCharLastWord = false;\n
    \       bool isLastWordConsonantLastCharLastWordLastCharLastWordLastChar = false;\n
    \       bool isLastCharConsonantLastWordLastCharLastWordLastCharLastWord = false;\n
    \       bool isLastWordConsonantLastCharLastWordLastCharLastWordLastChar = false;\n
    \       bool isLastCharConsonantLastWordLastCharLastWordLastCharLastWord = false;\n
    \       bool isLastWordConsonantLastCharLastWordLastCharLastWordLastChar = false;\n
    \       bool isLastCharConsonantLastWordLastCharLastWordLastCharLastWord = false;\n
    \       bool isLastWordConsonantLastCharLastWordLastCharLastWordLastChar = false;\n
    \       bool isLastCharConsonantLastWordLastCharLastWordLastCharLastWord = false;\n
    \       bool isLastWordConsonantLastCharLastWordLastCharLastWordLastChar = false;\n
    \       bool isLastCharConsonantLastWordLastCharLastWordLastCharLastWord = false;\n
    \       bool isLastWordConsonantLastCharLastWordLastCharLastWordLastChar = false;\n
    \       bool isLastCharConsonantLastWordLastCharLastWordLastCharLastWord = false;\n
    \       \n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n
    \   Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple
    white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello
    world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n
    \   Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new
    List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new
    List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"f\"}))));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpx5_zgwhy.cs(42,14): error CS0128: A local variable or function named ''isLastCharConsonantLastWordLastCharLastWordLastChar''
    is already defined in this scope

    /tmp/tmpx5_zgwhy.cs(43,14): error CS0128: A local variable or function named ''isLastWordConsonantLastCharLastWordLastCharLastWord''
    is already defined in this scope

    /tmp/tmpx5_zgwhy.cs(46,14): error CS0128: A local variable or function named ''isLastCharConsonantLastWordLastCharLastWordLastCharLastWord''
    is already defined in this scope

    /tmp/tmpx5_zgwhy.cs(47,14): error CS0128: A local variable or function named ''isLastWordConsonantLastCharLastWordLastCharLastWordLastChar''
    is already defined in this scope

    /tmp/tmpx5_zgwhy.cs(48,14): error CS0128: A local variable or function named ''isLastCharConsonantLastWordLastCharLastWordLastCharLastWord''
    is already defined in this scope

    /tmp/tmpx5_zgwhy.cs(49,14): error CS0128: A local variable or function named ''isLastWordConsonantLastCharLastWordLastCharLastWordLastChar''
    is already defined in this scope

    /tmp/tmpx5_zgwhy.cs(50,14): error CS0128: A local variable or function named ''isLastCharConsonantLastWordLastCharLastWordLastCharLastWord''
    is already defined in this scope

    /tmp/tmpx5_zgwhy.cs(51,14): error CS0128: A local variable or function named ''isLastWordConsonantLastCharLastWordLastCharLastWordLastChar''
    is already defined in this scope

    /tmp/tmpx5_zgwhy.cs(52,14): error CS0128: A local variable or function named ''isLastCharConsonantLastWordLastCharLastWordLastCharLastWord''
    is already defined in this scope

    /tmp/tmpx5_zgwhy.cs(53,14): error CS0128: A local variable or function named ''isLastWordConsonantLastCharLastWordLastCharLastWordLastChar''
    is already defined in this scope

    /tmp/tmpx5_zgwhy.cs(54,14): error CS0128: A local variable or function named ''isLastCharConsonantLastWordLastCharLastWordLastCharLastWord''
    is already defined in this scope

    /tmp/tmpx5_zgwhy.cs(55,14): error CS0128: A l'
  timestamp: 1659977327
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    public static List<string> SelectWords(string
    s, long n) {\n        // TODO: implement this function\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary had a little
    lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n
    \   Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple
    white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello
    world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n
    \   Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new
    List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new
    List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"f\"}))));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp1lhvd1_1.cs(15,32): error CS0161: ''Problem.SelectWords(string, long)'':
    not all code paths return a value

    '
  timestamp: 1659977323
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    public static List<string> SelectWords(string
    s, long n) {\n        List<string> result = new List<string>();\n        if (string.IsNullOrEmpty(s))
    return result;\n        string word = string.Empty;\n        long count = 0;\n
    \       foreach (char c in s) {\n            if (char.IsLetter(c)) {\n                word
    += c;\n                count++;\n            }\n        }\n        if (count ==
    n) result.Add(word);\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"), (4L)).Equals((new
    List<string>(new string[]{(string)\"little\"}))));\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (3L)).Equals((new List<string>(new string[]{(string)\"Mary\",
    (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple white space\"),
    (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello world\"),
    (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n    Debug.Assert(SelectWords((\"Uncle
    sam\"), (3L)).Equals((new List<string>(new string[]{(string)\"Uncle\"}))));\n
    \   Debug.Assert(SelectWords((\"\"), (4L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"a
    b c d e f\"), (1L)).Equals((new List<string>(new string[]{(string)\"b\", (string)\"c\",
    (string)\"d\", (string)\"f\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c02a456a17294ae6ad77eb12b19f7919>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c02a456a17294ae6ad77eb12b19f7919>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977328
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    public static List<string> SelectWords(string
    s, long n) {\n        List<string> result = new List<string>();\n        if (string.IsNullOrEmpty(s))
    return result;\n        char[] chars = s.ToCharArray();\n        Array.Sort(chars);\n
    \       char[] sortedChars = chars.ToList().Sort();\n        List<char> consonants
    = new List<char>();\n        foreach (char c in sortedChars) {\n            if
    (char.IsLower(c)) consonants.Add(c);\n        }\n        List<string> words =
    new List<string>();\n        foreach (char c in consonants) {\n            string
    word = s.Substring(0, s.IndexOf(c));\n            if (words.Count > 0 && words.Last().Length
    == word.Length) continue;\n            words.Add(word);\n        }\n        foreach
    (string word in words) {\n            long count = 0;\n            foreach (char
    c in word) {\n                if (char.IsLower(c)) count++;\n            }\n            if
    (count == n) result.Add(word);\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary had a
    little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n
    \   Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple
    white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello
    world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n
    \   Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new
    List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new
    List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"f\"}))));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmph6upzwg5.cs(20,30): error CS0029: Cannot implicitly convert type ''void''
    to ''char[]''

    '
  timestamp: 1659977327
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    public static List<string> SelectWords(string
    s, long n) {\n        // TODO: Implement this function\n        List<string> result
    = new List<string>();\n        string word = string.Empty;\n        foreach (char
    c in s) {\n            if (char.IsLetter(c)) {\n                word += c;\n            }\n
    \       }\n        if (word.Length == n) {\n            result.Add(word);\n        }\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(SelectWords((\"Mary had a little lamb\"), (4L)).Equals((new List<string>(new
    string[]{(string)\"little\"}))));\n    Debug.Assert(SelectWords((\"Mary had a
    little lamb\"), (3L)).Equals((new List<string>(new string[]{(string)\"Mary\",
    (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple white space\"),
    (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello world\"),
    (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n    Debug.Assert(SelectWords((\"Uncle
    sam\"), (3L)).Equals((new List<string>(new string[]{(string)\"Uncle\"}))));\n
    \   Debug.Assert(SelectWords((\"\"), (4L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"a
    b c d e f\"), (1L)).Equals((new List<string>(new string[]{(string)\"b\", (string)\"c\",
    (string)\"d\", (string)\"f\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <56f0052ef931415d8b2ed43710c2b630>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <56f0052ef931415d8b2ed43710c2b630>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977326
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    public static List<string> SelectWords(string
    s, long n) {\n        List<string> result = new List<string>();\n        if (string.IsNullOrEmpty(s))
    return result;\n        string word = string.Empty;\n        foreach (char c in
    s) {\n            if (char.IsLetter(c)) {\n                word += c;\n            }\n
    \       }\n        long count = 0;\n        foreach (char c in word) {\n            if
    (char.IsLetter(c)) {\n                count++;\n            }\n        }\n        if
    (count != n) return result;\n        foreach (char c in word) {\n            if
    (char.IsLetter(c)) {\n                result.Add(word);\n            }\n        }\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(SelectWords((\"Mary had a little lamb\"), (4L)).Equals((new List<string>(new
    string[]{(string)\"little\"}))));\n    Debug.Assert(SelectWords((\"Mary had a
    little lamb\"), (3L)).Equals((new List<string>(new string[]{(string)\"Mary\",
    (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple white space\"),
    (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello world\"),
    (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n    Debug.Assert(SelectWords((\"Uncle
    sam\"), (3L)).Equals((new List<string>(new string[]{(string)\"Uncle\"}))));\n
    \   Debug.Assert(SelectWords((\"\"), (4L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"a
    b c d e f\"), (1L)).Equals((new List<string>(new string[]{(string)\"b\", (string)\"c\",
    (string)\"d\", (string)\"f\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <52cef05a43f64a1486aaba52a964988d>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <52cef05a43f64a1486aaba52a964988d>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977325
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    public static List<string> SelectWords(string
    s, long n) {\n        List<string> result = new List<string>();\n        if (s
    == \"\") {\n            return result;\n        }\n        char[] chars = s.ToCharArray();\n
    \       int[] count = new int[26];\n        for (int i = 0; i < chars.Length;
    i++) {\n            count[chars[i] - 'a']++;\n        }\n        List<string>
    words = new List<string>();\n        foreach (int c in count) {\n            if
    (c == n) {\n                words.Add(new string(chars, 0, i));\n            }\n
    \       }\n        return words;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"), (4L)).Equals((new
    List<string>(new string[]{(string)\"little\"}))));\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (3L)).Equals((new List<string>(new string[]{(string)\"Mary\",
    (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple white space\"),
    (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello world\"),
    (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n    Debug.Assert(SelectWords((\"Uncle
    sam\"), (3L)).Equals((new List<string>(new string[]{(string)\"Uncle\"}))));\n
    \   Debug.Assert(SelectWords((\"\"), (4L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"a
    b c d e f\"), (1L)).Equals((new List<string>(new string[]{(string)\"b\", (string)\"c\",
    (string)\"d\", (string)\"f\"}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpqqrbd3_0.cs(28,48): error CS0103: The name ''i'' does not exist in the
    current context

    '
  timestamp: 1659977327
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    public static List<string> SelectWords(string
    s, long n) {\n        // TODO: Implement this function\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary had a little
    lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n
    \   Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple
    white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello
    world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n
    \   Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new
    List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new
    List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"f\"}))));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpn533wku4.cs(15,32): error CS0161: ''Problem.SelectWords(string, long)'':
    not all code paths return a value

    '
  timestamp: 1659977322
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    public static List<string> SelectWords(string
    s, long n) {\n        List<string> result = new List<string>();\n        string
    word = \"\";\n        bool isWord = false;\n        foreach (char c in s) {\n
    \           if (char.IsLetter(c)) {\n                word += c;\n                isWord
    = true;\n            }\n            if (isWord) {\n                if (word.Length
    == n) {\n                    result.Add(word);\n                    word = \"\";\n
    \                   isWord = false;\n                }\n            }\n        }\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(SelectWords((\"Mary had a little lamb\"), (4L)).Equals((new List<string>(new
    string[]{(string)\"little\"}))));\n    Debug.Assert(SelectWords((\"Mary had a
    little lamb\"), (3L)).Equals((new List<string>(new string[]{(string)\"Mary\",
    (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple white space\"),
    (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello world\"),
    (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n    Debug.Assert(SelectWords((\"Uncle
    sam\"), (3L)).Equals((new List<string>(new string[]{(string)\"Uncle\"}))));\n
    \   Debug.Assert(SelectWords((\"\"), (4L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"a
    b c d e f\"), (1L)).Equals((new List<string>(new string[]{(string)\"b\", (string)\"c\",
    (string)\"d\", (string)\"f\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <00b5ee9ec80b41b8bb78d26eeda17239>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <00b5ee9ec80b41b8bb78d26eeda17239>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977328
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    public static List<string> SelectWords(string
    s, long n) {\n        List<string> result = new List<string>();\n        if (string.IsNullOrEmpty(s))
    {\n            return result;\n        }\n        long count = 0;\n        foreach
    (char c in s) {\n            if (char.IsLetter(c)) {\n                count++;\n
    \           }\n        }\n        if (count != n) {\n            return result;\n
    \       }\n        char[] chars = s.ToCharArray();\n        Array.Sort(chars);\n
    \       List<string> words = new List<string>();\n        foreach (char c in chars)
    {\n            if (char.IsLetter(c)) {\n                words.Add(c.ToString());\n
    \           }\n        }\n        return words;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"),
    (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (3L)).Equals((new List<string>(new string[]{(string)\"Mary\",
    (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple white space\"),
    (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello world\"),
    (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n    Debug.Assert(SelectWords((\"Uncle
    sam\"), (3L)).Equals((new List<string>(new string[]{(string)\"Uncle\"}))));\n
    \   Debug.Assert(SelectWords((\"\"), (4L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"a
    b c d e f\"), (1L)).Equals((new List<string>(new string[]{(string)\"b\", (string)\"c\",
    (string)\"d\", (string)\"f\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <25d8e76f0f154ad69a401d40fb7d9439>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <25d8e76f0f154ad69a401d40fb7d9439>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977328
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    public static List<string> SelectWords(string
    s, long n) {\n        // TODO: implement this function\n        List<string> result
    = new List<string>();\n        foreach (string word in s.Split(' '))\n        {\n
    \           int count = 0;\n            foreach (char c in word)\n            {\n
    \               if (char.IsLetter(c))\n                {\n                    count++;\n
    \               }\n            }\n            if (count == n)\n            {\n
    \               result.Add(word);\n            }\n        }\n        return result;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n
    \   Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple
    white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello
    world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n
    \   Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new
    List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new
    List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"f\"}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a2213783c3d44eeaa92fc9ee36deeb89>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a2213783c3d44eeaa92fc9ee36deeb89>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977323
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    public static List<string> SelectWords(string
    s, long n) {\n        List<string> result = new List<string>();\n        if (string.IsNullOrEmpty(s))
    return result;\n        char[] chars = s.ToCharArray();\n        int[] count =
    new int[26];\n        foreach (char c in chars) {\n            count[c - 'a']++;\n
    \       }\n        List<string> words = new List<string>();\n        foreach (int
    i in count) {\n            if (i == n) words.Add(i.ToString());\n        }\n        return
    words;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n
    \   Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple
    white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello
    world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n
    \   Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new
    List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new
    List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"f\"}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.IndexOutOfRangeException: Index was outside
    the bounds of the array.\n  at Problem.SelectWords (System.String s, System.Int64
    n) [0x0003b] in <2d89f5985eab4591a51fc333390983a6>:0 \n  at Problem.Main (System.String[]
    args) [0x00001] in <2d89f5985eab4591a51fc333390983a6>:0 \n[ERROR] FATAL UNHANDLED
    EXCEPTION: System.IndexOutOfRangeException: Index was outside the bounds of the
    array.\n  at Problem.SelectWords (System.String s, System.Int64 n) [0x0003b] in
    <2d89f5985eab4591a51fc333390983a6>:0 \n  at Problem.Main (System.String[] args)
    [0x00001] in <2d89f5985eab4591a51fc333390983a6>:0 \n"
  stdout: ''
  timestamp: 1659977328
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    public static List<string> SelectWords(string
    s, long n) {\n        List<string> result = new List<string>();\n        if (s
    == \"\") {\n            return result;\n        }\n        char[] chars = s.ToCharArray();\n
    \       Array.Sort(chars);\n        List<char> consonants = new List<char>();\n
    \       foreach (char c in chars) {\n            if (char.IsLower(c)) {\n                consonants.Add(c);\n
    \           }\n        }\n        List<string> words = new List<string>();\n        foreach
    (char c in consonants) {\n            words.AddRange(SelectWords(s.Substring(0,
    s.IndexOf(c)), n));\n        }\n        foreach (string word in words) {\n            if
    (words.Count(w => w.Contains(c)) >= n) {\n                result.Add(word);\n
    \           }\n        }\n        return result;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"),
    (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (3L)).Equals((new List<string>(new string[]{(string)\"Mary\",
    (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple white space\"),
    (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello world\"),
    (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n    Debug.Assert(SelectWords((\"Uncle
    sam\"), (3L)).Equals((new List<string>(new string[]{(string)\"Uncle\"}))));\n
    \   Debug.Assert(SelectWords((\"\"), (4L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"a
    b c d e f\"), (1L)).Equals((new List<string>(new string[]{(string)\"b\", (string)\"c\",
    (string)\"d\", (string)\"f\"}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp_yu07x4z.cs(33,45): error CS0103: The name ''c'' does not exist in the
    current context

    '
  timestamp: 1659977327
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    public static List<string> SelectWords(string
    s, long n) {\n        List<string> result = new List<string>();\n        if (s
    == \"\") {\n            return result;\n        }\n        char[] chars = s.ToCharArray();\n
    \       int[] count = new int[26];\n        for (int i = 0; i < chars.Length;
    i++) {\n            count[chars[i] - 'a']++;\n        }\n        Array.Sort(count);\n
    \       for (int i = 0; i < count.Length; i++) {\n            if (count[i] ==
    n) {\n                result.Add(new string(chars, i, 1));\n            }\n        }\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(SelectWords((\"Mary had a little lamb\"), (4L)).Equals((new List<string>(new
    string[]{(string)\"little\"}))));\n    Debug.Assert(SelectWords((\"Mary had a
    little lamb\"), (3L)).Equals((new List<string>(new string[]{(string)\"Mary\",
    (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple white space\"),
    (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello world\"),
    (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n    Debug.Assert(SelectWords((\"Uncle
    sam\"), (3L)).Equals((new List<string>(new string[]{(string)\"Uncle\"}))));\n
    \   Debug.Assert(SelectWords((\"\"), (4L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"a
    b c d e f\"), (1L)).Equals((new List<string>(new string[]{(string)\"b\", (string)\"c\",
    (string)\"d\", (string)\"f\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.IndexOutOfRangeException: Index was outside
    the bounds of the array.\n  at Problem.SelectWords (System.String s, System.Int64
    n) [0x00034] in <2faabb5138b84a0d902fe2da5b22b3dc>:0 \n  at Problem.Main (System.String[]
    args) [0x00001] in <2faabb5138b84a0d902fe2da5b22b3dc>:0 \n[ERROR] FATAL UNHANDLED
    EXCEPTION: System.IndexOutOfRangeException: Index was outside the bounds of the
    array.\n  at Problem.SelectWords (System.String s, System.Int64 n) [0x00034] in
    <2faabb5138b84a0d902fe2da5b22b3dc>:0 \n  at Problem.Main (System.String[] args)
    [0x00001] in <2faabb5138b84a0d902fe2da5b22b3dc>:0 \n"
  stdout: ''
  timestamp: 1659977328
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    public static List<string> SelectWords(string
    s, long n) {\n        List<string> result = new List<string>();\n        if (string.IsNullOrEmpty(s))
    {\n            return result;\n        }\n        char[] chars = s.ToCharArray();\n
    \       Array.Sort(chars);\n        long count = 0;\n        foreach (char c in
    chars) {\n            if (char.IsLetter(c)) {\n                count++;\n            }\n
    \       }\n        if (count != n) {\n            return result;\n        }\n
    \       List<string> words = new List<string>();\n        foreach (char c in chars)
    {\n            if (char.IsLetter(c)) {\n                words.Add(c.ToString());\n
    \           }\n        }\n        return words;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"),
    (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (3L)).Equals((new List<string>(new string[]{(string)\"Mary\",
    (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple white space\"),
    (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello world\"),
    (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n    Debug.Assert(SelectWords((\"Uncle
    sam\"), (3L)).Equals((new List<string>(new string[]{(string)\"Uncle\"}))));\n
    \   Debug.Assert(SelectWords((\"\"), (4L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"a
    b c d e f\"), (1L)).Equals((new List<string>(new string[]{(string)\"b\", (string)\"c\",
    (string)\"d\", (string)\"f\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a315e68abdbc4ccda9b259552af4176e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a315e68abdbc4ccda9b259552af4176e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977328
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    public static List<string> SelectWords(string
    s, long n) {\n        List<string> result = new List<string>();\n        if (s.Length
    == 0) {\n            return result;\n        }\n        long maxCount = 0;\n        foreach
    (char c in s) {\n            if (char.IsLetter(c)) {\n                maxCount
    = Math.Max(maxCount, s.Count(x => x == c));\n            }\n        }\n        long
    maxCount = Math.Max(maxCount, n);\n        long currentCount = 0;\n        foreach
    (char c in s) {\n            if (char.IsLetter(c)) {\n                currentCount
    += s.Count(x => x == c);\n                if (currentCount == maxCount) {\n                    result.Add(s.Substring(0,
    s.IndexOf(c)));\n                }\n            }\n        }\n        return result;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n
    \   Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple
    white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello
    world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n
    \   Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new
    List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new
    List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"f\"}))));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmplu3a45sh.cs(26,14): error CS0128: A local variable or function named ''maxCount''
    is already defined in this scope

    '
  timestamp: 1659977328
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    public static List<string> SelectWords(string
    s, long n) {\n        List<string> result = new List<string>();\n        if (s
    == \"\") {\n            return result;\n        }\n        List<string> words
    = s.Split(' ').ToList();\n        foreach (string word in words) {\n            List<string>
    subwords = word.Split(' ');\n            foreach (string subword in subwords)
    {\n                if (subword.Length == n) {\n                    result.Add(subword);\n
    \               }\n            }\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary had a
    little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n
    \   Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple
    white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello
    world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n
    \   Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new
    List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new
    List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"f\"}))));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp5nvxrzp8.cs(22,37): error CS0029: Cannot implicitly convert type ''string[]''
    to ''System.Collections.Generic.List<string>''

    '
  timestamp: 1659977328
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    public static List<string> SelectWords(string
    s, long n) {\n        // TODO: Implement this function\n        List<string> result
    = new List<string>();\n        foreach (string word in s.Split(' '))\n        {\n
    \           int count = 0;\n            foreach (char c in word)\n            {\n
    \               if (char.IsLetter(c))\n                {\n                    count++;\n
    \               }\n            }\n            if (count == n)\n            {\n
    \               result.Add(word);\n            }\n        }\n        return result;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n
    \   Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple
    white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello
    world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n
    \   Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new
    List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new
    List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"f\"}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <84542545929045ea84c0160afcb43c2b>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <84542545929045ea84c0160afcb43c2b>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977328
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    public static List<string> SelectWords(string
    s, long n) {\n        List<string> result = new List<string>();\n        if (string.IsNullOrEmpty(s))
    {\n            return result;\n        }\n        string word = \"\";\n        long
    count = 0;\n        foreach (char c in s) {\n            if (char.IsLetter(c))
    {\n                word += c;\n                count++;\n            }\n            if
    (count == n) {\n                result.Add(word);\n                word = \"\";\n
    \               count = 0;\n            }\n        }\n        return result;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n
    \   Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple
    white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello
    world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n
    \   Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new
    List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new
    List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"f\"}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <44bae892db3948f6bb5d8b12ffa3f3f5>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <44bae892db3948f6bb5d8b12ffa3f3f5>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977328
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    public static List<string> SelectWords(string
    s, long n) {\n        // TODO: implement this function\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary had a little
    lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n
    \   Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple
    white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello
    world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n
    \   Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new
    List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new
    List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"f\"}))));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp1lhvd1_1.cs(15,32): error CS0161: ''Problem.SelectWords(string, long)'':
    not all code paths return a value

    '
  timestamp: 1659977323
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    public static List<string> SelectWords(string
    s, long n) {\n        List<string> result = new List<string>();\n        string
    word = \"\";\n        foreach (char c in s) {\n            if (char.IsLetter(c))
    {\n                word += c;\n            }\n        }\n        long count =
    0;\n        foreach (char c in word) {\n            if (char.IsLetter(c)) {\n
    \               count++;\n            }\n        }\n        if (count == n) {\n
    \           result.Add(word);\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary had a
    little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n
    \   Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple
    white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello
    world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n
    \   Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new
    List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new
    List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"f\"}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <0a1cf96a0a63411fbbcece3f375e9f0c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <0a1cf96a0a63411fbbcece3f375e9f0c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977328
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    public static List<string> SelectWords(string
    s, long n) {\n        List<string> result = new List<string>();\n        if (s
    == \"\") {\n            return result;\n        }\n        char[] chars = s.ToCharArray();\n
    \       Array.Sort(chars);\n        string word = \"\";\n        bool isConsonant
    = false;\n        long count = 0;\n        foreach (char c in chars) {\n            if
    (char.IsLetter(c)) {\n                word += c;\n                isConsonant
    = false;\n                count++;\n            } else {\n                isConsonant
    = true;\n            }\n            if (count == n) {\n                result.Add(word);\n
    \               word = \"\";\n                count = 0;\n            }\n        }\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(SelectWords((\"Mary had a little lamb\"), (4L)).Equals((new List<string>(new
    string[]{(string)\"little\"}))));\n    Debug.Assert(SelectWords((\"Mary had a
    little lamb\"), (3L)).Equals((new List<string>(new string[]{(string)\"Mary\",
    (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple white space\"),
    (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello world\"),
    (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n    Debug.Assert(SelectWords((\"Uncle
    sam\"), (3L)).Equals((new List<string>(new string[]{(string)\"Uncle\"}))));\n
    \   Debug.Assert(SelectWords((\"\"), (4L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"a
    b c d e f\"), (1L)).Equals((new List<string>(new string[]{(string)\"b\", (string)\"c\",
    (string)\"d\", (string)\"f\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <b77a1cf9ea49428d8db99adee56649d1>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <b77a1cf9ea49428d8db99adee56649d1>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977328
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    public static List<string> SelectWords(string
    s, long n) {\n        List<string> result = new List<string>();\n        if (s.Length
    == 0) {\n            return result;\n        }\n        string word = s;\n        string
    lastWord = s;\n        long currentCount = 0;\n        long currentCount2 = 0;\n
    \       long currentCount3 = 0;\n        long currentCount4 = 0;\n        long
    currentCount5 = 0;\n        long currentCount6 = 0;\n        long currentCount7
    = 0;\n        long currentCount8 = 0;\n        long currentCount9 = 0;\n        long
    currentCount10 = 0;\n        long currentCount11 = 0;\n        long currentCount12
    = 0;\n        long currentCount13 = 0;\n        long currentCount14 = 0;\n        long
    currentCount15 = 0;\n        long currentCount16 = 0;\n        long currentCount17
    = 0;\n        long currentCount18 = 0;\n        long currentCount19 = 0;\n        long
    currentCount20 = 0;\n        long currentCount21 = 0;\n        long currentCount22
    = 0;\n        long currentCount23 = 0;\n        long currentCount24 = 0;\n        long
    currentCount25 = 0;\n        long currentCount26 = 0;\n        long currentCount27
    = 0;\n        long currentCount28 = 0;\n        long currentCount29 = 0;\n        long
    currentCount30 = 0;\n        long currentCount31 = 0;\n        long currentCount32
    = 0;\n        long currentCount33 = 0;\n        long currentCount34 = 0;\n        long
    currentCount35 = 0;\n        long currentCount36 = 0;\n        long currentCount37
    = 0;\n        long currentCount38 = 0;\n        long currentCount39 = 0;\n        long
    currentCount40 = 0;\n        long currentCount41 = 0;\n        long currentCount42
    = 0;\n        long currentCount43 = 0;\n        long currentCount44 = 0;\n        long
    currentCount45 = 0;\n        long currentCount46 = 0;\n        long currentCount47
    = 0;\n        long currentCount48 = 0;\n        long currentCount49 = 0;\n        long
    currentCount50 = 0;\n        long currentCount51 = 0;\n        long currentCount52
    = 0;\n        long currentCount53 = 0;\n        long currentCount54 = 0;\n        long
    currentCount55 = 0;\n        long currentCount56 = 0;\n        long currentCount57
    = 0;\n        long currentCount58 = 0;\n        long currentCount59 = 0;\n        long
    currentCount60 = 0;\n        long currentCount61 = 0;\n        long currentCount62
    = 0;\n        long currentCount63 = 0;\n        long currentCount64 = 0;\n        long
    currentCount65 = 0;\n        long currentCount66 = 0;\n        long currentCount67
    = 0;\n        long currentCount68 = 0;\n        long currentCount69 = 0;\n        long
    \n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n
    \   Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple
    white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello
    world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n
    \   Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new
    List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new
    List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"f\"}))));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpq3c3qw0b.cs(91,13): error CS1001: Identifier expected

    /tmp/tmpq3c3qw0b.cs(91,13): error CS1002: ; expected

    '
  timestamp: 1659977327
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    public static List<string> SelectWords(string
    s, long n) {\n        List<string> result = new List<string>();\n        if (string.IsNullOrEmpty(s))\n
    \           return result;\n        long maxWordLength = 0;\n        foreach (var
    word in s.Split(' '))\n            maxWordLength = Math.Max(maxWordLength, word.Length);\n
    \       long maxWordLengthInWord = maxWordLength / s.Length;\n        long maxWordLengthInWords
    = maxWordLength / n;\n        long maxWordLengthInWordsRemaining = maxWordLength
    % n;\n        long wordLength = 0;\n        long wordLengthInWord = 0;\n        long
    wordLengthInWords = 0;\n        long wordLengthInWordsRemaining = 0;\n        bool
    wordIsInWord = false;\n        foreach (var word in s.Split(' '))\n        {\n
    \           wordLength += word.Length;\n            wordLengthInWord = wordLength
    / s.Length;\n            wordLengthInWords = wordLength / n;\n            wordLengthInWordsRemaining
    = wordLength % n;\n            wordIsInWord = wordLengthInWord == maxWordLengthInWord;\n
    \           if (wordIsInWord)\n            {\n                result.Add(word);\n
    \           }\n            else if (wordLengthInWords == maxWordLengthInWords)\n
    \           {\n                result.Add(word);\n            }\n            else
    if (wordLengthInWordsRemaining == maxWordLengthInWordsRemaining)\n            {\n
    \               result.Add(word);\n            }\n        }\n        return result;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n
    \   Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple
    white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello
    world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n
    \   Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new
    List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new
    List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"f\"}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <63d3fc3abe3e4537b3bc506e02ee0dc3>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <63d3fc3abe3e4537b3bc506e02ee0dc3>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977328
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    public static List<string> SelectWords(string
    s, long n) {\n        List<string> result = new List<string>();\n        if (s
    == \"\") {\n            return result;\n        }\n        long num = 0;\n        foreach
    (char c in s) {\n            if (char.IsLetter(c)) {\n                num++;\n
    \           }\n        }\n        if (num != n) {\n            return result;\n
    \       }\n        long num2 = 0;\n        foreach (char c in s) {\n            if
    (char.IsLetter(c)) {\n                num2++;\n            }\n        }\n        if
    (num2 != n) {\n            return result;\n        }\n        long num3 = 0;\n
    \       foreach (char c in s) {\n            if (char.IsLetter(c)) {\n                num3++;\n
    \           }\n        }\n        if (num3 != n) {\n            return result;\n
    \       }\n        long num4 = 0;\n        foreach (char c in s) {\n            if
    (char.IsLetter(c)) {\n                num4++;\n            }\n        }\n        if
    (num4 != n) {\n            return result;\n        }\n        long num5 = 0;\n
    \       foreach (char c in s) {\n            if (char.IsLetter(c)) {\n                num5++;\n
    \           }\n        }\n        if (num5 != n) {\n            return result;\n
    \       }\n        long num6 = 0;\n        foreach (char c in s) {\n            if
    (char.IsLetter(c)) {\n                num6++;\n            }\n        }\n        if
    (num6 != n) {\n            return result;\n        }\n        long num7 = 0;\n
    \       foreach (char c in s) {\n            if (char.IsLetter(c)) {\n                num7++;\n
    \           }\n        }\n        if (num7 != n) {\n            return result;\n
    \       }\n        long num8 = 0;\n        foreach (char c in s) {\n            if
    (char.IsLetter(c)) {\n                num8++;\n            }\n        }\n        if
    (num8 != n) {\n            return result;\n        }\n        long num9 = 0;\n
    \       foreach (char c in s) {\n            if (char.IsLetter(c)) {\n                num9++;\n
    \           }\n        }\n        if (num9 != n) {\n            return result;\n
    \       }\n        long num10 = 0;\n        foreach (char c in s) {\n            if
    (char.IsLetter(c)) {\n                num10++;\n            }\n        }\n        if
    (num10 != n) {\n            return result;\n        }\n        long num11 = 0;\n
    \       foreach (char c in s) {\n            if (char.IsLetter(c)) {\n                num11++;\n
    \           }\n        }\n        if (num11 != n) {\n            return result;\n
    \       }\n        long num12 = 0;\n        foreach (char c in s) {\n            if
    (char.IsLetter(c)) {\n                num12++;\n            }\n        }\n        if
    (num12 != n) {\n            return result;\n        }\n        long num13 = 0;\n
    \       foreach (char c in s) {\n            if (char.IsLetter(c)) {\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n
    \   Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple
    white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello
    world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n
    \   Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new
    List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new
    List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"f\"}))));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp491h_1sa.cs(132,5): error CS0106: The modifier ''public'' is not valid
    for this item

    /tmp/tmp491h_1sa.cs(142,2): error CS1513: } expected

    '
  timestamp: 1659977328
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    public static List<string> SelectWords(string
    s, long n) {\n        // TODO: Implement this function\n        List<string> result
    = new List<string>();\n        foreach (char c in s.ToCharArray()) {\n            if
    (char.IsLetter(c)) {\n                result.Add(c.ToString());\n            }\n
    \       }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"), (4L)).Equals((new
    List<string>(new string[]{(string)\"little\"}))));\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (3L)).Equals((new List<string>(new string[]{(string)\"Mary\",
    (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple white space\"),
    (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello world\"),
    (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n    Debug.Assert(SelectWords((\"Uncle
    sam\"), (3L)).Equals((new List<string>(new string[]{(string)\"Uncle\"}))));\n
    \   Debug.Assert(SelectWords((\"\"), (4L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"a
    b c d e f\"), (1L)).Equals((new List<string>(new string[]{(string)\"b\", (string)\"c\",
    (string)\"d\", (string)\"f\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <14a925c8452d4b86bbecb95419b21fa7>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <14a925c8452d4b86bbecb95419b21fa7>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977328
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    public static List<string> SelectWords(string
    s, long n) {\n        // TODO: Implement this function\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary had a little
    lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n
    \   Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple
    white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello
    world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n
    \   Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new
    List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new
    List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"f\"}))));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpn533wku4.cs(15,32): error CS0161: ''Problem.SelectWords(string, long)'':
    not all code paths return a value

    '
  timestamp: 1659977322
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    public static List<string> SelectWords(string
    s, long n) {\n        List<string> result = new List<string>();\n        if (s
    == \"\") {\n            return result;\n        }\n        long n = Math.Abs(n);\n
    \       char[] chars = s.ToCharArray();\n        Array.Sort(chars);\n        string
    word = \"\";\n        long count = 0;\n        foreach (char c in chars) {\n            if
    (chars.Contains(c)) {\n                count++;\n                if (count ==
    n) {\n                    result.Add(word);\n                    word = \"\";\n
    \                   count = 0;\n                }\n                word += c;\n
    \           }\n        }\n        if (count > 0) {\n            result.Add(word);\n
    \       }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"), (4L)).Equals((new
    List<string>(new string[]{(string)\"little\"}))));\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (3L)).Equals((new List<string>(new string[]{(string)\"Mary\",
    (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple white space\"),
    (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello world\"),
    (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n    Debug.Assert(SelectWords((\"Uncle
    sam\"), (3L)).Equals((new List<string>(new string[]{(string)\"Uncle\"}))));\n
    \   Debug.Assert(SelectWords((\"\"), (4L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"a
    b c d e f\"), (1L)).Equals((new List<string>(new string[]{(string)\"b\", (string)\"c\",
    (string)\"d\", (string)\"f\"}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpglfz_644.cs(20,14): error CS0136: A local or parameter named ''n'' cannot
    be declared in this scope because that name is used in an enclosing local scope
    to define a local or parameter

    /tmp/tmpglfz_644.cs(20,27): error CS0165: Use of unassigned local variable ''n''

    '
  timestamp: 1659977328
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    public static List<string> SelectWords(string
    s, long n) {\n        // TODO: Implement this function\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary had a little
    lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n
    \   Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple
    white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello
    world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n
    \   Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new
    List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new
    List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"f\"}))));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpn533wku4.cs(15,32): error CS0161: ''Problem.SelectWords(string, long)'':
    not all code paths return a value

    '
  timestamp: 1659977322
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    public static List<string> SelectWords(string
    s, long n) {\n        List<string> result = new List<string>();\n        if (s.Length
    == 0) {\n            return result;\n        }\n        char[] chars = s.ToCharArray();\n
    \       int[] count = new int[26];\n        foreach (char c in chars) {\n            count[c
    - 'a']++;\n        }\n        List<string> words = new List<string>();\n        foreach
    (int i in count) {\n            if (i == n) {\n                words.Add(s.Substring(0,
    s.Length - i));\n            }\n        }\n        return words;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary had a
    little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n
    \   Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple
    white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello
    world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n
    \   Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new
    List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new
    List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"f\"}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.IndexOutOfRangeException: Index was outside
    the bounds of the array.\n  at Problem.SelectWords (System.String s, System.Int64
    n) [0x0003f] in <2efcc41a1b8841b98543089391189963>:0 \n  at Problem.Main (System.String[]
    args) [0x00001] in <2efcc41a1b8841b98543089391189963>:0 \n[ERROR] FATAL UNHANDLED
    EXCEPTION: System.IndexOutOfRangeException: Index was outside the bounds of the
    array.\n  at Problem.SelectWords (System.String s, System.Int64 n) [0x0003f] in
    <2efcc41a1b8841b98543089391189963>:0 \n  at Problem.Main (System.String[] args)
    [0x00001] in <2efcc41a1b8841b98543089391189963>:0 \n"
  stdout: ''
  timestamp: 1659977328
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    public static List<string> SelectWords(string
    s, long n) {\n        List<string> result = new List<string>();\n        if (string.IsNullOrEmpty(s))
    {\n            return result;\n        }\n        char[] chars = s.ToCharArray();\n
    \       HashSet<string> words = new HashSet<string>();\n        foreach (char
    c in chars) {\n            if (char.IsLetterOrDigit(c)) {\n                string
    word = c.ToString();\n                if (words.Contains(word)) {\n                    continue;\n
    \               }\n                words.Add(word);\n                result.Add(word);\n
    \           }\n        }\n        return result;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"),
    (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (3L)).Equals((new List<string>(new string[]{(string)\"Mary\",
    (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple white space\"),
    (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello world\"),
    (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n    Debug.Assert(SelectWords((\"Uncle
    sam\"), (3L)).Equals((new List<string>(new string[]{(string)\"Uncle\"}))));\n
    \   Debug.Assert(SelectWords((\"\"), (4L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"a
    b c d e f\"), (1L)).Equals((new List<string>(new string[]{(string)\"b\", (string)\"c\",
    (string)\"d\", (string)\"f\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <60babd81b70941ab9e048552738c4cf3>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <60babd81b70941ab9e048552738c4cf3>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977328
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    public static List<string> SelectWords(string
    s, long n) {\n        List<string> result = new List<string>();\n        if (string.IsNullOrEmpty(s))
    {\n            return result;\n        }\n        string word = string.Empty;\n
    \       long count = 0;\n        foreach (char c in s) {\n            if (char.IsLetterOrDigit(c))
    {\n                count++;\n                if (count == n) {\n                    result.Add(word);\n
    \                   word = string.Empty;\n                    count = 0;\n                }\n
    \               word += c;\n            }\n        }\n        if (count > 0) {\n
    \           result.Add(word);\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary had a
    little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n
    \   Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple
    white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello
    world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n
    \   Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new
    List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new
    List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"f\"}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <35aa4b74c75146ac9a4c4b2f469e9a11>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <35aa4b74c75146ac9a4c4b2f469e9a11>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977329
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    public static List<string> SelectWords(string
    s, long n) {\n        List<string> result = new List<string>();\n        if (string.IsNullOrEmpty(s))\n
    \           return result;\n        long count = 0;\n        foreach (char c in
    s)\n            if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n
    \               count++;\n        if (count == n)\n            result.Add(s);\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(SelectWords((\"Mary had a little lamb\"), (4L)).Equals((new List<string>(new
    string[]{(string)\"little\"}))));\n    Debug.Assert(SelectWords((\"Mary had a
    little lamb\"), (3L)).Equals((new List<string>(new string[]{(string)\"Mary\",
    (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple white space\"),
    (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello world\"),
    (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n    Debug.Assert(SelectWords((\"Uncle
    sam\"), (3L)).Equals((new List<string>(new string[]{(string)\"Uncle\"}))));\n
    \   Debug.Assert(SelectWords((\"\"), (4L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"a
    b c d e f\"), (1L)).Equals((new List<string>(new string[]{(string)\"b\", (string)\"c\",
    (string)\"d\", (string)\"f\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <62382a2df391424cbe5589288029cf1b>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <62382a2df391424cbe5589288029cf1b>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977329
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    public static List<string> SelectWords(string
    s, long n) {\n        List<string> result = new List<string>();\n        if (string.IsNullOrEmpty(s))
    {\n            return result;\n        }\n        long n = Convert.ToInt64(n);\n
    \       long count = 0;\n        foreach (char c in s) {\n            if (char.IsLetter(c))
    {\n                count++;\n            }\n        }\n        if (count == n)
    {\n            foreach (char c in s) {\n                if (char.IsLetter(c))
    {\n                    result.Add(c.ToString());\n                }\n            }\n
    \       }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"), (4L)).Equals((new
    List<string>(new string[]{(string)\"little\"}))));\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (3L)).Equals((new List<string>(new string[]{(string)\"Mary\",
    (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple white space\"),
    (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello world\"),
    (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n    Debug.Assert(SelectWords((\"Uncle
    sam\"), (3L)).Equals((new List<string>(new string[]{(string)\"Uncle\"}))));\n
    \   Debug.Assert(SelectWords((\"\"), (4L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"a
    b c d e f\"), (1L)).Equals((new List<string>(new string[]{(string)\"b\", (string)\"c\",
    (string)\"d\", (string)\"f\"}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpy_uemzb2.cs(20,14): error CS0136: A local or parameter named ''n'' cannot
    be declared in this scope because that name is used in an enclosing local scope
    to define a local or parameter

    /tmp/tmpy_uemzb2.cs(20,34): error CS0165: Use of unassigned local variable ''n''

    '
  timestamp: 1659977328
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    public static List<string> SelectWords(string
    s, long n) {\n        // TODO: Implement this function\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary had a little
    lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n
    \   Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple
    white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello
    world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n
    \   Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new
    List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new
    List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"f\"}))));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpn533wku4.cs(15,32): error CS0161: ''Problem.SelectWords(string, long)'':
    not all code paths return a value

    '
  timestamp: 1659977322
