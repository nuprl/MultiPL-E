name: HumanEval_90_next_smallest
language: cs
prompt: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\n\
  using System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass\
  \ Problem {\n    // You are given a list of integers.\n    // Write a function next_smallest()\
  \ that returns the 2nd smallest element of the list.\n    // Return None if there\
  \ is no such element.\n    public static Nullable<long> NextSmallest(List<long>\
  \ lst) {\n"
tests: "    }\n    public static void Main(string[] args) {\n    Debug.Assert(NextSmallest((new\
  \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))).Equals(2L));\n\
  \    Debug.Assert(NextSmallest((new List<long>(new long[]{(long)5L, (long)1L, (long)4L,\
  \ (long)3L, (long)2L}))).Equals(2L));\n    Debug.Assert(NextSmallest((new List<long>())).Equals(null));\n\
  \    Debug.Assert(NextSmallest((new List<long>(new long[]{(long)1L, (long)1L}))).Equals(null));\n\
  \    Debug.Assert(NextSmallest((new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
  \ (long)1L, (long)0L}))).Equals(1L));\n    Debug.Assert(NextSmallest((new List<long>(new\
  \ long[]{(long)1L, (long)1L}))).Equals(null));\n    Debug.Assert(NextSmallest((new\
  \ List<long>(new long[]{(long)-35L, (long)34L, (long)12L, (long)-45L}))).Equals(-35L));\n\
  \    }\n\n}\n"
completions: ["        long smallest = lst[0];\n        long secondSmallest = lst[1];\n\
    \        bool foundSmallest = false;\n        bool foundSecondSmallest = false;\n\
    \        foreach (long n in lst) {\n            if (n < smallest) {\n        \
    \        secondSmallest = smallest;\n                smallest = n;\n         \
    \       foundSmallest = true;\n            }\n            if (foundSmallest &&\
    \ n < secondSmallest) {\n                secondSmallest = n;\n               \
    \ foundSecondSmallest = true;\n            }\n        }\n        if (foundSecondSmallest)\
    \ {\n            return secondSmallest;\n        }\n        return null;", " \
    \       if (lst.Count == 0) return null;\n        long smallest = lst[0];\n  \
    \      long secondSmallest = lst[1];\n        for (int i = 2; i < lst.Count; i++)\
    \ {\n            if (lst[i] < smallest) {\n                secondSmallest = smallest;\n\
    \                smallest = lst[i];\n            } else if (lst[i] < secondSmallest)\
    \ {\n                secondSmallest = lst[i];\n            }\n        }\n    \
    \    return secondSmallest;", "        long smallest = lst[0];\n        long secondSmallest\
    \ = lst[1];\n        bool found = false;\n        for (int i = 2; i < lst.Count;\
    \ i++) {\n            if (lst[i] < smallest) {\n                secondSmallest\
    \ = smallest;\n                smallest = lst[i];\n            } else if (lst[i]\
    \ < secondSmallest) {\n                secondSmallest = lst[i];\n            }\n\
    \        }\n        if (secondSmallest == 0) {\n            return null;\n   \
    \     }\n        return secondSmallest;", "        long smallest = lst[0];\n \
    \       long secondSmallest = lst[1];\n        bool foundSmallest = false;\n \
    \       bool foundSecondSmallest = false;\n        foreach (long num in lst) {\n\
    \            if (num < smallest) {\n                secondSmallest = smallest;\n\
    \                smallest = num;\n                foundSmallest = true;\n    \
    \        }\n            else if (num < secondSmallest) {\n                secondSmallest\
    \ = num;\n                foundSecondSmallest = true;\n            }\n       \
    \ }\n        if (foundSmallest && foundSecondSmallest) {\n            return secondSmallest;\n\
    \        }\n        return null;", "        long smallest = lst.Min();\n     \
    \   long secondSmallest = lst.Min();\n        foreach (long i in lst) {\n    \
    \        if (i < smallest) {\n                secondSmallest = smallest;\n   \
    \             smallest = i;\n            } else if (i < secondSmallest) {\n  \
    \              secondSmallest = i;\n            }\n        }\n        return secondSmallest;",
  "        if (lst.Count == 0) return null;\n        long smallest = lst[0];\n   \
    \     long secondSmallest = lst[0];\n        foreach (long i in lst) {\n     \
    \       if (i < smallest) {\n                secondSmallest = smallest;\n    \
    \            smallest = i;\n            } else if (i < secondSmallest) {\n   \
    \             secondSmallest = i;\n            }\n        }\n        return secondSmallest;",
  "        if (lst.Count == 0) return null;\n        var smallest = lst[0];\n    \
    \    var smallest_index = 0;\n        for (int i = 1; i < lst.Count; i++) {\n\
    \            if (lst[i] < smallest) {\n                smallest = lst[i];\n  \
    \              smallest_index = i;\n            }\n        }\n        if (smallest_index\
    \ == lst.Count - 1) return null;\n        return lst[smallest_index + 1];", " \
    \       if (lst.Count == 0) return null;\n        long min = lst[0];\n       \
    \ long max = lst[0];\n        for (int i = 1; i < lst.Count; i++) {\n        \
    \    if (lst[i] < min) {\n                min = lst[i];\n            }\n     \
    \       if (lst[i] > max) {\n                max = lst[i];\n            }\n  \
    \      }\n        if (min == max) return null;\n        if (min > max) return\
    \ null;\n        long mid = min + (max - min) / 2;\n        if (mid == max) return\
    \ mid;\n        if (mid > max) return mid;\n        return min;", "        if\
    \ (lst.Count == 0) {\n            return null;\n        }\n        long smallest\
    \ = lst[0];\n        long secondSmallest = lst[1];\n        for (int i = 2; i\
    \ < lst.Count; i++) {\n            if (lst[i] < smallest) {\n                secondSmallest\
    \ = smallest;\n                smallest = lst[i];\n            } else if (lst[i]\
    \ < secondSmallest) {\n                secondSmallest = lst[i];\n            }\n\
    \        }\n        return secondSmallest;", "        if (lst.Count == 0) return\
    \ null;\n        long smallest = lst[0];\n        long secondSmallest = lst[1];\n\
    \        for (int i = 2; i < lst.Count; i++) {\n            if (lst[i] < smallest)\
    \ {\n                secondSmallest = smallest;\n                smallest = lst[i];\n\
    \            } else if (lst[i] < secondSmallest) {\n                secondSmallest\
    \ = lst[i];\n            }\n        }\n        return secondSmallest;", "    \
    \    if (lst.Count == 0)\n            return null;\n        var smallest = lst[0];\n\
    \        var secondSmallest = lst[1];\n        for (int i = 2; i < lst.Count;\
    \ i++) {\n            var current = lst[i];\n            if (current < smallest)\
    \ {\n                secondSmallest = smallest;\n                smallest = current;\n\
    \            } else if (current < secondSmallest) {\n                secondSmallest\
    \ = current;\n            }\n        }\n        return secondSmallest;", "   \
    \     long smallest = lst.Min();\n        long secondSmallest = lst.Min();\n \
    \       foreach (long i in lst) {\n            if (i < smallest) {\n         \
    \       secondSmallest = smallest;\n                smallest = i;\n          \
    \  } else if (i < secondSmallest) {\n                secondSmallest = i;\n   \
    \         }\n        }\n        return secondSmallest;", "        if (lst.Count\
    \ == 0) return null;\n        var min = lst[0];\n        var minIndex = 0;\n \
    \       for (int i = 1; i < lst.Count; i++) {\n            if (lst[i] < min) {\n\
    \                min = lst[i];\n                minIndex = i;\n            }\n\
    \        }\n        if (minIndex == lst.Count - 1) return null;\n        return\
    \ lst[minIndex + 1];", "        if (lst.Count == 0) return null;\n        long\
    \ smallest = lst[0];\n        long secondSmallest = lst[1];\n        for (int\
    \ i = 2; i < lst.Count; i++) {\n            if (lst[i] < smallest) {\n       \
    \         secondSmallest = smallest;\n                smallest = lst[i];\n   \
    \         } else if (lst[i] < secondSmallest) {\n                secondSmallest\
    \ = lst[i];\n            }\n        }\n        return secondSmallest;", "    \
    \    if (lst.Count == 0) return null;\n        long smallest = lst[0];\n     \
    \   long secondSmallest = lst[1];\n        for (int i = 2; i < lst.Count; i++)\
    \ {\n            if (lst[i] < smallest) {\n                secondSmallest = smallest;\n\
    \                smallest = lst[i];\n            } else if (lst[i] < secondSmallest)\
    \ {\n                secondSmallest = lst[i];\n            }\n        }\n    \
    \    return secondSmallest;", "        if (lst.Count == 0) {\n            return\
    \ null;\n        }\n        long smallest = lst[0];\n        long secondSmallest\
    \ = lst[0];\n        bool found = false;\n        for (int i = 1; i < lst.Count;\
    \ i++) {\n            if (lst[i] < smallest) {\n                secondSmallest\
    \ = smallest;\n                smallest = lst[i];\n                found = true;\n\
    \            } else if (lst[i] == smallest) {\n                secondSmallest\
    \ = lst[i];\n            }\n        }\n        if (found) {\n            return\
    \ secondSmallest;\n        } else {\n            return null;\n        }", " \
    \       if (lst.Count == 0) return null;\n        long smallest = lst[0];\n  \
    \      long secondSmallest = lst[0];\n        bool found = false;\n        for\
    \ (int i = 1; i < lst.Count; i++) {\n            if (lst[i] < smallest) {\n  \
    \              secondSmallest = smallest;\n                smallest = lst[i];\n\
    \                found = true;\n            } else if (lst[i] == smallest) {\n\
    \                secondSmallest = lst[i];\n            }\n        }\n        if\
    \ (found) return secondSmallest;\n        else return null;", "        if (lst.Count\
    \ == 0)\n            return null;\n        long min = lst[0];\n        long min2\
    \ = lst[1];\n        long min3 = lst[2];\n        long min4 = lst[3];\n      \
    \  long min5 = lst[4];\n        long min6 = lst[5];\n        long min7 = lst[6];\n\
    \        long min8 = lst[7];\n        long min9 = lst[8];\n        long min10\
    \ = lst[9];\n        long min11 = lst[10];\n        long min12 = lst[11];\n  \
    \      long min13 = lst[12];\n        long min14 = lst[13];\n        long min15\
    \ = lst[14];\n        long min16 = lst[15];\n        long min17 = lst[16];\n \
    \       long min18 = lst[17];\n        long min19 = lst[18];\n        long min20\
    \ = lst[19];\n        long min21 = lst[20];\n        long min22 = lst[21];\n \
    \       long min23 = lst[22];\n        long min24 = lst[23];\n        long min25\
    \ = lst[24];\n        long min26 = lst[25];\n        long min27 = lst[26];\n \
    \       long min28 = lst[27];\n        long min29 = lst[28];\n        long min30\
    \ = lst[29];\n        long min31 = lst[30];\n        long min32 = lst[31];\n \
    \       long min33 = lst[32];\n        long min34 = lst[33];\n        long min35\
    \ = lst[34];\n        long min36 = lst[35];\n        long min37 = lst[36];\n \
    \       long min38 = lst[37];\n        long min39 = lst[38];\n        long min40\
    \ = lst[39];\n        long min41 = lst[40];\n        long min42 = lst[41];\n \
    \       long min43 = lst[42];\n        long min44 = lst[43];\n        long min45\
    \ = lst[44];\n        long min46 = lst[45];\n        long min47 = lst[46];\n \
    \       long min48 = lst[47];\n        long min49 = lst[48];\n        long min50\
    \ = lst[49];\n        long min51 = lst[50];\n        long min52 = lst[51];\n \
    \       long min53 = lst[52];\n        long min54 = ", "        long smallest\
    \ = lst.Min();\n        long secondSmallest = lst.Min();\n        foreach (long\
    \ i in lst) {\n            if (i < smallest) {\n                secondSmallest\
    \ = smallest;\n                smallest = i;\n            }\n            else\
    \ if (i == smallest) {\n                secondSmallest = i;\n            }\n \
    \       }\n        if (secondSmallest == lst.Min()) {\n            return null;\n\
    \        }\n        return secondSmallest;", "        if (lst.Count == 0) {\n\
    \            return null;\n        }\n        long smallest = lst[0];\n      \
    \  long secondSmallest = lst[0];\n        bool found = false;\n        for (int\
    \ i = 1; i < lst.Count; i++) {\n            if (lst[i] < smallest) {\n       \
    \         secondSmallest = smallest;\n                smallest = lst[i];\n   \
    \             found = true;\n            } else if (lst[i] == smallest) {\n  \
    \              secondSmallest = lst[i];\n            }\n        }\n        if\
    \ (found) {\n            return secondSmallest;\n        } else {\n          \
    \  return null;\n        }", "        if (lst.Count == 0) return null;\n     \
    \   long smallest = lst[0];\n        long secondSmallest = lst[1];\n        bool\
    \ foundSmallest = false;\n        bool foundSecondSmallest = false;\n        foreach\
    \ (long i in lst) {\n            if (i < smallest) {\n                secondSmallest\
    \ = smallest;\n                smallest = i;\n                foundSmallest =\
    \ true;\n            }\n            if (i == smallest) {\n                foundSecondSmallest\
    \ = true;\n            }\n        }\n        if (foundSmallest) {\n          \
    \  return secondSmallest;\n        }\n        if (foundSecondSmallest) {\n   \
    \         return secondSmallest;\n        }\n        return null;", "        if\
    \ (lst.Count == 0)\n            return null;\n        long smallest = lst[0];\n\
    \        long secondSmallest = lst[1];\n        for (int i = 2; i < lst.Count;\
    \ i++) {\n            if (lst[i] < smallest) {\n                secondSmallest\
    \ = smallest;\n                smallest = lst[i];\n            } else if (lst[i]\
    \ < secondSmallest) {\n                secondSmallest = lst[i];\n            }\n\
    \        }\n        return secondSmallest;", "        long smallest = lst[0];\n\
    \        long secondSmallest = lst[1];\n        foreach (long i in lst) {\n  \
    \          if (i < smallest) {\n                secondSmallest = smallest;\n \
    \               smallest = i;\n            } else if (i < secondSmallest) {\n\
    \                secondSmallest = i;\n            }\n        }\n        return\
    \ secondSmallest;", "        long smallest = lst.Min();\n        long secondSmallest\
    \ = lst.Min();\n        foreach (long i in lst) {\n            if (i < smallest)\
    \ {\n                secondSmallest = smallest;\n                smallest = i;\n\
    \            }\n            if (i < secondSmallest) {\n                secondSmallest\
    \ = i;\n            }\n        }\n        if (secondSmallest == smallest) {\n\
    \            return null;\n        }\n        return secondSmallest;", "     \
    \   if (lst.Count == 0) return null;\n        var smallest = lst[0];\n       \
    \ var secondSmallest = lst[1];\n        for (int i = 2; i < lst.Count; i++) {\n\
    \            if (lst[i] < smallest) {\n                secondSmallest = smallest;\n\
    \                smallest = lst[i];\n            } else if (lst[i] < secondSmallest)\
    \ {\n                secondSmallest = lst[i];\n            }\n        }\n    \
    \    return secondSmallest;", "        if (lst.Count == 0) return null;\n    \
    \    long smallest = lst[0];\n        long secondSmallest = lst[1];\n        for\
    \ (int i = 2; i < lst.Count; i++) {\n            if (lst[i] < smallest) {\n  \
    \              secondSmallest = smallest;\n                smallest = lst[i];\n\
    \            } else if (lst[i] < secondSmallest) {\n                secondSmallest\
    \ = lst[i];\n            }\n        }\n        return secondSmallest;", "    \
    \    long smallest = lst[0];\n        long secondSmallest = lst[1];\n        for\
    \ (int i = 2; i < lst.Count; i++) {\n            if (lst[i] < smallest) {\n  \
    \              secondSmallest = smallest;\n                smallest = lst[i];\n\
    \            } else if (lst[i] < secondSmallest) {\n                secondSmallest\
    \ = lst[i];\n            }\n        }\n        return secondSmallest;", "    \
    \    if (lst.Count == 0) return null;\n        var smallest = lst[0];\n      \
    \  var secondSmallest = lst[1];\n        for (var i = 2; i < lst.Count; i++) {\n\
    \            if (lst[i] < smallest) {\n                secondSmallest = smallest;\n\
    \                smallest = lst[i];\n            } else if (lst[i] > secondSmallest)\
    \ {\n                secondSmallest = lst[i];\n            }\n        }\n    \
    \    return secondSmallest;", "        if (lst.Count == 0) return null;\n    \
    \    long smallest = lst[0];\n        long secondSmallest = lst[1];\n        foreach\
    \ (long i in lst) {\n            if (i < smallest) {\n                secondSmallest\
    \ = smallest;\n                smallest = i;\n            } else if (i < secondSmallest)\
    \ {\n                secondSmallest = i;\n            }\n        }\n        return\
    \ secondSmallest;", "        if (lst.Count == 0) return null;\n        long smallest\
    \ = lst[0];\n        long secondSmallest = lst[1];\n        for (int i = 2; i\
    \ < lst.Count; i++) {\n            if (lst[i] < smallest) {\n                secondSmallest\
    \ = smallest;\n                smallest = lst[i];\n            } else if (lst[i]\
    \ < secondSmallest) {\n                secondSmallest = lst[i];\n            }\n\
    \        }\n        return secondSmallest;", "        if (lst.Count == 0) return\
    \ null;\n        long smallest = lst[0];\n        long secondSmallest = lst[1];\n\
    \        bool foundSmallest = false;\n        bool foundSecondSmallest = false;\n\
    \        foreach (long i in lst) {\n            if (i < smallest) {\n        \
    \        secondSmallest = smallest;\n                smallest = i;\n         \
    \       foundSmallest = true;\n            } else if (i == smallest) {\n     \
    \           foundSmallest = true;\n            }\n            if (foundSmallest\
    \ && foundSecondSmallest) {\n                break;\n            }\n        }\n\
    \        if (foundSmallest) {\n            return secondSmallest;\n        } else\
    \ {\n            return null;\n        }", "        if (lst.Count == 0) return\
    \ null;\n        long smallest = lst[0];\n        long secondSmallest = lst[1];\n\
    \        bool foundSmallest = false;\n        bool foundSecondSmallest = false;\n\
    \        foreach (long n in lst) {\n            if (n < smallest) {\n        \
    \        secondSmallest = smallest;\n                smallest = n;\n         \
    \       foundSmallest = true;\n            }\n            else if (n < secondSmallest)\
    \ {\n                secondSmallest = n;\n                foundSecondSmallest\
    \ = true;\n            }\n        }\n        if (foundSmallest) {\n          \
    \  return secondSmallest;\n        }\n        if (foundSecondSmallest) {\n   \
    \         return secondSmallest;\n        }\n        return null;", "        if\
    \ (lst.Count == 0) return null;\n        long smallest = lst[0];\n        long\
    \ secondSmallest = lst[1];\n        for (int i = 2; i < lst.Count; i++) {\n  \
    \          if (lst[i] < smallest) {\n                secondSmallest = smallest;\n\
    \                smallest = lst[i];\n            } else if (lst[i] < secondSmallest)\
    \ {\n                secondSmallest = lst[i];\n            }\n        }\n    \
    \    return secondSmallest;", "        if (lst.Count == 0) return null;\n    \
    \    long smallest = lst[0];\n        long second = smallest;\n        foreach\
    \ (long i in lst) {\n            if (i < smallest) {\n                second =\
    \ smallest;\n                smallest = i;\n            } else if (i == smallest)\
    \ {\n                second = i;\n            }\n        }\n        return second\
    \ == smallest ? null : second;", "        if (lst.Count == 0)\n            return\
    \ null;\n        var smallest = lst[0];\n        var secondSmallest = lst[1];\n\
    \        for (var i = 2; i < lst.Count; i++) {\n            var current = lst[i];\n\
    \            if (current < smallest) {\n                secondSmallest = smallest;\n\
    \                smallest = current;\n            } else if (current < secondSmallest)\
    \ {\n                secondSmallest = current;\n            }\n        }\n   \
    \     return secondSmallest;", "        if (lst.Count == 0)\n            return\
    \ null;\n        var smallest = lst[0];\n        var smallest_index = 0;\n   \
    \     for (int i = 1; i < lst.Count; i++) {\n            if (lst[i] < smallest)\
    \ {\n                smallest = lst[i];\n                smallest_index = i;\n\
    \            }\n        }\n        if (smallest_index == 0)\n            return\
    \ null;\n        return lst[smallest_index + 1];", "        long smallest = lst[0];\n\
    \        long secondSmallest = lst[1];\n        for (int i = 2; i < lst.Count;\
    \ i++) {\n            if (lst[i] < smallest) {\n                secondSmallest\
    \ = smallest;\n                smallest = lst[i];\n            } else if (lst[i]\
    \ < secondSmallest) {\n                secondSmallest = lst[i];\n            }\n\
    \        }\n        return secondSmallest;", "        if (lst.Count == 0) return\
    \ null;\n        var smallest = lst[0];\n        var secondSmallest = lst[1];\n\
    \        for (int i = 2; i < lst.Count; i++) {\n            if (lst[i] < smallest)\
    \ {\n                secondSmallest = smallest;\n                smallest = lst[i];\n\
    \            } else if (lst[i] < secondSmallest) {\n                secondSmallest\
    \ = lst[i];\n            }\n        }\n        return secondSmallest;", "    \
    \    if (lst.Count == 0) return null;\n        var smallest = lst[0];\n      \
    \  var secondSmallest = lst[1];\n        for (int i = 2; i < lst.Count; i++) {\n\
    \            var current = lst[i];\n            if (current < smallest) {\n  \
    \              secondSmallest = smallest;\n                smallest = current;\n\
    \            } else if (current < secondSmallest) {\n                secondSmallest\
    \ = current;\n            }\n        }\n        return secondSmallest;", "   \
    \     if (lst.Count == 0)\n            return null;\n        var min = lst[0];\n\
    \        var minIndex = 0;\n        for (int i = 1; i < lst.Count; i++) {\n  \
    \          if (lst[i] < min) {\n                min = lst[i];\n              \
    \  minIndex = i;\n            }\n        }\n        if (minIndex == lst.Count\
    \ - 1)\n            return null;\n        return lst[minIndex + 1];", "      \
    \  if (lst.Count == 0) return null;\n        long smallest = lst[0];\n       \
    \ long secondSmallest = lst[1];\n        foreach (long i in lst) {\n         \
    \   if (i < smallest) {\n                secondSmallest = smallest;\n        \
    \        smallest = i;\n            } else if (i > secondSmallest) {\n       \
    \         secondSmallest = i;\n            }\n        }\n        return secondSmallest;",
  "        if (lst.Count == 0) return null;\n        long smallest = lst[0];\n   \
    \     long secondSmallest = lst[1];\n        for (int i = 2; i < lst.Count; i++)\
    \ {\n            if (lst[i] < smallest) {\n                secondSmallest = smallest;\n\
    \                smallest = lst[i];\n            } else if (lst[i] < secondSmallest)\
    \ {\n                secondSmallest = lst[i];\n            }\n        }\n    \
    \    return secondSmallest;", "        if (lst.Count == 0) return null;\n    \
    \    long smallest = lst[0];\n        long secondSmallest = lst[1];\n        for\
    \ (int i = 2; i < lst.Count; i++) {\n            if (lst[i] < smallest) {\n  \
    \              secondSmallest = smallest;\n                smallest = lst[i];\n\
    \            } else if (lst[i] < secondSmallest) {\n                secondSmallest\
    \ = lst[i];\n            }\n        }\n        return secondSmallest;", "    \
    \    long smallest = lst[0];\n        long secondSmallest = lst[1];\n        for\
    \ (int i = 2; i < lst.Count; i++) {\n            if (lst[i] < smallest) {\n  \
    \              secondSmallest = smallest;\n                smallest = lst[i];\n\
    \            } else if (lst[i] < secondSmallest) {\n                secondSmallest\
    \ = lst[i];\n            }\n        }\n        return secondSmallest;", "    \
    \    if (lst.Count == 0) return null;\n        long smallest = lst[0];\n     \
    \   long secondSmallest = lst[1];\n        for (int i = 2; i < lst.Count; i++)\
    \ {\n            if (lst[i] < smallest) {\n                secondSmallest = smallest;\n\
    \                smallest = lst[i];\n            } else if (lst[i] < secondSmallest)\
    \ {\n                secondSmallest = lst[i];\n            }\n        }\n    \
    \    return secondSmallest;", "        if (lst.Count == 0) return null;\n    \
    \    long smallest = lst[0];\n        long secondSmallest = lst[1];\n        for\
    \ (int i = 2; i < lst.Count; i++) {\n            if (lst[i] < smallest) {\n  \
    \              secondSmallest = smallest;\n                smallest = lst[i];\n\
    \            } else if (lst[i] < secondSmallest) {\n                secondSmallest\
    \ = lst[i];\n            }\n        }\n        return secondSmallest;", "    \
    \    if (lst.Count == 0) {\n            return null;\n        }\n        long\
    \ smallest = lst[0];\n        long secondSmallest = lst[0];\n        for (int\
    \ i = 1; i < lst.Count; i++) {\n            if (lst[i] < smallest) {\n       \
    \         secondSmallest = smallest;\n                smallest = lst[i];\n   \
    \         } else if (lst[i] < secondSmallest) {\n                secondSmallest\
    \ = lst[i];\n            }\n        }\n        return secondSmallest;", "    \
    \    if (lst.Count == 0) {\n            return null;\n        }\n        long\
    \ smallest = lst[0];\n        long secondSmallest = lst[0];\n        for (int\
    \ i = 1; i < lst.Count; i++) {\n            if (lst[i] < smallest) {\n       \
    \         secondSmallest = smallest;\n                smallest = lst[i];\n   \
    \         } else if (lst[i] < secondSmallest) {\n                secondSmallest\
    \ = lst[i];\n            }\n        }\n        return secondSmallest;", "    \
    \    if (lst.Count == 0) {\n            return null;\n        }\n        long\
    \ smallest = lst[0];\n        long secondSmallest = lst[1];\n        for (int\
    \ i = 2; i < lst.Count; i++) {\n            if (lst[i] < smallest) {\n       \
    \         secondSmallest = lst[i];\n                smallest = secondSmallest;\n\
    \            }\n        }\n        return secondSmallest;", "        if (lst.Count\
    \ == 0) return null;\n        long smallest = lst[0];\n        long secondSmallest\
    \ = lst[1];\n        for (int i = 2; i < lst.Count; i++) {\n            if (lst[i]\
    \ < smallest) {\n                secondSmallest = smallest;\n                smallest\
    \ = lst[i];\n            } else if (lst[i] < secondSmallest) {\n             \
    \   secondSmallest = lst[i];\n            }\n        }\n        return secondSmallest;",
  "        if (lst.Count == 0) return null;\n        var smallest = lst[0];\n    \
    \    var smallest_index = 0;\n        var smallest_value = smallest;\n       \
    \ for (int i = 1; i < lst.Count; i++) {\n            var value = lst[i];\n   \
    \         if (value < smallest) {\n                smallest = value;\n       \
    \         smallest_index = i;\n            }\n        }\n        if (smallest\
    \ == smallest_value) {\n            return smallest;\n        }\n        return\
    \ NextSmallest(lst.Skip(smallest_index).ToList());", "        if (lst.Count ==\
    \ 0) return null;\n        long min = lst[0];\n        long max = lst[0];\n  \
    \      for (int i = 1; i < lst.Count; i++) {\n            if (lst[i] < min) {\n\
    \                min = lst[i];\n            }\n            if (lst[i] > max) {\n\
    \                max = lst[i];\n            }\n        }\n        if (min == max)\
    \ return null;\n        return max;", "        long smallest = lst[0];\n     \
    \   long secondSmallest = lst[1];\n        foreach (long i in lst) {\n       \
    \     if (i < smallest) {\n                secondSmallest = smallest;\n      \
    \          smallest = i;\n            } else if (i < secondSmallest) {\n     \
    \           secondSmallest = i;\n            }\n        }\n        return secondSmallest;",
  "        if (lst.Count == 0) return null;\n        long smallest = lst[0];\n   \
    \     long secondSmallest = lst[1];\n        for (int i = 2; i < lst.Count; i++)\
    \ {\n            if (lst[i] < smallest) {\n                secondSmallest = smallest;\n\
    \                smallest = lst[i];\n            } else if (lst[i] > secondSmallest)\
    \ {\n                secondSmallest = lst[i];\n            }\n        }\n    \
    \    return secondSmallest;", "        if (lst.Count == 0) {\n            return\
    \ null;\n        }\n        long smallest = lst[0];\n        long secondSmallest\
    \ = lst[1];\n        for (int i = 2; i < lst.Count; i++) {\n            if (lst[i]\
    \ < smallest) {\n                secondSmallest = smallest;\n                smallest\
    \ = lst[i];\n            } else if (lst[i] < secondSmallest) {\n             \
    \   secondSmallest = lst[i];\n            }\n        }\n        return secondSmallest;",
  "        long smallest = lst.Min();\n        long largest = lst.Max();\n       \
    \ long middle = lst.Count / 2;\n        long middle2 = lst.Count / 2;\n      \
    \  long middle3 = lst.Count / 2;\n        long middle4 = lst.Count / 2;\n    \
    \    long middle5 = lst.Count / 2;\n        long middle6 = lst.Count / 2;\n  \
    \      long middle7 = lst.Count / 2;\n        long middle8 = lst.Count / 2;\n\
    \        long middle9 = lst.Count / 2;\n        long middle10 = lst.Count / 2;\n\
    \        long middle11 = lst.Count / 2;\n        long middle12 = lst.Count / 2;\n\
    \        long middle13 = lst.Count / 2;\n        long middle14 = lst.Count / 2;\n\
    \        long middle15 = lst.Count / 2;\n        long middle16 = lst.Count / 2;\n\
    \        long middle17 = lst.Count / 2;\n        long middle18 = lst.Count / 2;\n\
    \        long middle19 = lst.Count / 2;\n        long middle20 = lst.Count / 2;\n\
    \        long middle21 = lst.Count / 2;\n        long middle22 = lst.Count / 2;\n\
    \        long middle23 = lst.Count / 2;\n        long middle24 = lst.Count / 2;\n\
    \        long middle25 = lst.Count / 2;\n        long middle26 = lst.Count / 2;\n\
    \        long middle27 = lst.Count / 2;\n        long middle28 = lst.Count / 2;\n\
    \        long middle29 = lst.Count / 2;\n        long middle30 = lst.Count / 2;\n\
    \        long middle31 = lst.Count / 2;\n        long middle32 = lst.Count / 2;\n\
    \        long middle33 = lst.Count / 2;\n        long middle34 = lst.Count / 2;\n\
    \        long middle35 = lst.Count / 2;\n        long middle36 = lst.Count / 2;\n\
    \        long middle37 = lst.Count / 2;\n        long middle38 = lst.Count / 2;\n\
    \        long middle39 = lst.Count / 2;\n        long middle40 = lst.Count / 2;\n\
    \        long middle41 = lst.Count / 2;\n        long middle42 = lst.Count / 2;\n\
    \        long middle43 = lst.Count / 2;\n        long middle44 = lst.Count / 2;\n\
    \        long middle45 = lst.Count / 2;\n        long middle46 = lst.Count / 2;",
  "        if (lst.Count == 0)\n            return null;\n        long smallest =\
    \ lst[0];\n        long secondSmallest = lst[1];\n        for (int i = 2; i <\
    \ lst.Count; i++) {\n            if (lst[i] < smallest) {\n                secondSmallest\
    \ = smallest;\n                smallest = lst[i];\n            } else if (lst[i]\
    \ < secondSmallest) {\n                secondSmallest = lst[i];\n            }\n\
    \        }\n        return secondSmallest;", "        if (lst.Count == 0)\n  \
    \          return null;\n        long smallest = lst[0];\n        long secondSmallest\
    \ = lst[1];\n        for (int i = 2; i < lst.Count; i++) {\n            if (lst[i]\
    \ < smallest) {\n                secondSmallest = smallest;\n                smallest\
    \ = lst[i];\n            } else if (lst[i] < secondSmallest) {\n             \
    \   secondSmallest = lst[i];\n            }\n        }\n        return secondSmallest;",
  "        if (lst.Count == 0) return null;\n        long smallest = lst[0];\n   \
    \     long secondSmallest = lst[1];\n        for (int i = 2; i < lst.Count; i++)\
    \ {\n            if (lst[i] < smallest) {\n                secondSmallest = smallest;\n\
    \                smallest = lst[i];\n            } else if (lst[i] < secondSmallest)\
    \ {\n                secondSmallest = lst[i];\n            }\n        }\n    \
    \    return secondSmallest;", "        if (lst.Count == 0)\n            return\
    \ null;\n        long smallest = lst[0];\n        long secondSmallest = lst[1];\n\
    \        for (int i = 2; i < lst.Count; i++) {\n            if (lst[i] < smallest)\
    \ {\n                secondSmallest = smallest;\n                smallest = lst[i];\n\
    \            }\n            else if (lst[i] < secondSmallest) {\n            \
    \    secondSmallest = lst[i];\n            }\n        }\n        return secondSmallest;",
  "        long smallest = lst[0];\n        long secondSmallest = lst[1];\n      \
    \  foreach (long i in lst) {\n            if (i < smallest) {\n              \
    \  secondSmallest = smallest;\n                smallest = i;\n            } else\
    \ if (i < secondSmallest) {\n                secondSmallest = i;\n           \
    \ }\n        }\n        return secondSmallest;", "        if (lst.Count == 0)\
    \ return null;\n        long min = lst[0];\n        long max = lst[0];\n     \
    \   foreach (long i in lst) {\n            if (i < min) min = i;\n           \
    \ if (i > max) max = i;\n        }\n        if (min == max) return null;\n   \
    \     long mid = min + (max - min) / 2;\n        if (mid == max) return mid;\n\
    \        if (mid == min) return null;\n        if (mid < max) return mid;\n  \
    \      if (mid > min) return mid;\n        return NextSmallest(new List<long>\
    \ { min, mid });", "        long smallest = lst.Min();\n        long secondSmallest\
    \ = lst.Min();\n        foreach (long x in lst) {\n            if (x < smallest)\
    \ {\n                secondSmallest = smallest;\n                smallest = x;\n\
    \            } else if (x > secondSmallest) {\n                secondSmallest\
    \ = x;\n            }\n        }\n        return secondSmallest;", "        long\
    \ smallest = lst[0];\n        long secondSmallest = lst[1];\n        for (int\
    \ i = 2; i < lst.Count; i++) {\n            if (lst[i] < smallest) {\n       \
    \         secondSmallest = smallest;\n                smallest = lst[i];\n   \
    \         } else if (lst[i] < secondSmallest) {\n                secondSmallest\
    \ = lst[i];\n            }\n        }\n        return secondSmallest;", "    \
    \    if (lst.Count == 0) return null;\n        long smallest = lst[0];\n     \
    \   long secondSmallest = lst[1];\n        foreach (long i in lst) {\n       \
    \     if (i < smallest) {\n                secondSmallest = smallest;\n      \
    \          smallest = i;\n            } else if (i < secondSmallest) {\n     \
    \           secondSmallest = i;\n            }\n        }\n        return secondSmallest;",
  "        if (lst.Count == 0)\n            return null;\n        long smallest =\
    \ lst[0];\n        long secondSmallest = lst[1];\n        for (int i = 2; i <\
    \ lst.Count; i++) {\n            if (lst[i] < smallest) {\n                secondSmallest\
    \ = smallest;\n                smallest = lst[i];\n            } else if (lst[i]\
    \ < secondSmallest) {\n                secondSmallest = lst[i];\n            }\n\
    \        }\n        return secondSmallest;", "        if (lst.Count == 0) return\
    \ null;\n        var min = lst[0];\n        var minIndex = 0;\n        for (int\
    \ i = 1; i < lst.Count; i++) {\n            if (lst[i] < min) {\n            \
    \    min = lst[i];\n                minIndex = i;\n            }\n        }\n\
    \        if (minIndex == lst.Count - 1) return null;\n        return lst[minIndex\
    \ + 1];", "        long smallest = lst[0];\n        long secondSmallest = lst[1];\n\
    \        bool foundSmallest = false;\n        bool foundSecondSmallest = false;\n\
    \        foreach (long i in lst) {\n            if (i == smallest) {\n       \
    \         foundSmallest = true;\n            }\n            if (foundSmallest\
    \ && i == secondSmallest) {\n                foundSecondSmallest = true;\n   \
    \         }\n            if (foundSecondSmallest && i == smallest) {\n       \
    \         return secondSmallest;\n            }\n        }\n        return null;",
  "        if (lst.Count == 0) {\n            return null;\n        }\n        long\
    \ min = lst[0];\n        long min2 = lst[0];\n        long min3 = lst[0];\n  \
    \      foreach (long n in lst) {\n            if (n < min) {\n               \
    \ min2 = min;\n                min3 = min;\n                min = n;\n       \
    \     } else if (n < min2) {\n                min2 = n;\n            } else if\
    \ (n < min3) {\n                min3 = n;\n            }\n        }\n        if\
    \ (min2 == min3) {\n            return min2;\n        } else {\n            return\
    \ min3;\n        }", "        if (lst.Count == 0) return null;\n        var min\
    \ = lst.Min();\n        var max = lst.Max();\n        var min2 = lst.SkipWhile(x\
    \ => x < min).Skip(1).FirstOrDefault();\n        if (min2 == min) return min;\n\
    \        if (min2 < min) return min2;\n        return null;", "        if (lst.Count\
    \ == 0) {\n            return null;\n        }\n        long smallest = lst[0];\n\
    \        long secondSmallest = lst[0];\n        foreach (long i in lst) {\n  \
    \          if (i < smallest) {\n                secondSmallest = smallest;\n \
    \               smallest = i;\n            } else if (i > secondSmallest) {\n\
    \                secondSmallest = i;\n            }\n        }\n        return\
    \ secondSmallest;", "        if (lst.Count == 0) return null;\n        long smallest\
    \ = lst[0];\n        long secondSmallest = lst[0];\n        foreach (long i in\
    \ lst) {\n            if (i < smallest) {\n                secondSmallest = smallest;\n\
    \                smallest = i;\n            } else if (i < secondSmallest) {\n\
    \                secondSmallest = i;\n            }\n        }\n        return\
    \ secondSmallest;", "        long smallest = lst.Min();\n        long secondSmallest\
    \ = lst.Min();\n        foreach (long i in lst) {\n            if (i < smallest)\
    \ {\n                secondSmallest = smallest;\n                smallest = i;\n\
    \            }\n            else if (i == smallest) {\n                secondSmallest\
    \ = i;\n            }\n        }\n        if (secondSmallest == 0) {\n       \
    \     return null;\n        }\n        return secondSmallest;", "        if (lst.Count\
    \ == 0) {\n            return null;\n        }\n        long smallest = lst[0];\n\
    \        long secondSmallest = lst[1];\n        for (int i = 2; i < lst.Count;\
    \ i++) {\n            if (lst[i] < smallest) {\n                secondSmallest\
    \ = smallest;\n                smallest = lst[i];\n            } else if (lst[i]\
    \ < secondSmallest) {\n                secondSmallest = lst[i];\n            }\n\
    \        }\n        return secondSmallest;", "        long smallest = lst.Min();\n\
    \        long largest = lst.Max();\n        if (smallest == largest)\n       \
    \     return null;\n        if (smallest < largest)\n            return smallest;\n\
    \        long mid = (smallest + largest) / 2;\n        if (mid == lst.Min())\n\
    \            return mid;\n        if (mid == lst.Max())\n            return mid;\n\
    \        if (mid < lst.Min())\n            return mid;\n        if (mid > lst.Max())\n\
    \            return mid;\n        long mid2 = mid + 1;\n        if (mid2 == lst.Min())\n\
    \            return mid;\n        if (mid2 == lst.Max())\n            return mid;\n\
    \        if (mid2 < lst.Min())\n            return mid;\n        if (mid2 > lst.Max())\n\
    \            return mid;\n        long mid3 = mid2 + 1;\n        if (mid3 == lst.Min())\n\
    \            return mid;\n        if (mid3 == lst.Max())\n            return mid;\n\
    \        if (mid3 < lst.Min())\n            return mid;\n        if (mid3 > lst.Max())\n\
    \            return mid;\n        long mid4 = mid3 + 1;\n        if (mid4 == lst.Min())\n\
    \            return mid;\n        if (mid4 == lst.Max())\n            return mid;\n\
    \        if (mid4 < lst.Min())\n            return mid;\n        if (mid4 > lst.Max())\n\
    \            return mid;\n        long mid5 = mid4 + 1;\n        if (mid5 == lst.Min())\n\
    \            return mid;\n        if (mid5 == lst.Max())\n            return mid;\n\
    \        if (mid5 < lst.Min())\n            return mid;\n        if (mid5 > lst.Max())\n\
    \            return mid;\n        long mid6 = mid5 + 1;\n        if (mid6 == lst.Min())\n\
    \            return mid;\n        if (mid6 == lst.Max())\n            return mid;\n\
    \        if (mid6 < lst.Min())\n            return mid;\n        if (mid6 > lst.Max())\n\
    \            return mid;\n        long mid7 = mid6 + 1;\n        if (mid7 == lst.Min())\n\
    \            return mid;\n        if (mid7 == lst.Max())\n            return mid;\n\
    \        if (mid7 < lst.Min())\n            return mid;\n        if (mid7 > lst.Max())\n\
    \            return mid;\n        long mid8 = mid7 + 1;\n        if (mid8 == lst.Min())\n\
    \            return mid;\n        if (mid8 == lst.Max())\n            return mid;\n\
    \        if (mid8 < lst.Min())\n            return mid;\n        if (mid8 > lst.Max())\n",
  "        if (lst.Count == 0) return null;\n        long smallest = lst[0];\n   \
    \     long secondSmallest = lst[1];\n        for (int i = 2; i < lst.Count; i++)\
    \ {\n            if (lst[i] < smallest) {\n                secondSmallest = smallest;\n\
    \                smallest = lst[i];\n            } else if (lst[i] > secondSmallest)\
    \ {\n                secondSmallest = lst[i];\n            }\n        }\n    \
    \    return secondSmallest;", "        long smallest = lst[0];\n        long secondSmallest\
    \ = lst[1];\n        for (int i = 2; i < lst.Count; i++) {\n            if (lst[i]\
    \ < smallest) {\n                secondSmallest = smallest;\n                smallest\
    \ = lst[i];\n            } else if (lst[i] < secondSmallest) {\n             \
    \   secondSmallest = lst[i];\n            }\n        }\n        return secondSmallest;",
  "        long smallest = lst[0];\n        long secondSmallest = lst[1];\n      \
    \  bool foundSmallest = false;\n        bool foundSecondSmallest = false;\n  \
    \      foreach (long i in lst) {\n            if (i < smallest) {\n          \
    \      smallest = i;\n                foundSmallest = true;\n            }\n \
    \           if (i == smallest) {\n                if (foundSmallest) {\n     \
    \               secondSmallest = smallest;\n                    foundSecondSmallest\
    \ = true;\n                }\n            }\n        }\n        if (foundSecondSmallest)\
    \ {\n            return secondSmallest;\n        }\n        return null;", " \
    \       long smallest = lst[0];\n        long secondSmallest = lst[1];\n     \
    \   bool foundSmallest = false;\n        bool foundSecondSmallest = false;\n \
    \       foreach (long i in lst) {\n            if (i < smallest) {\n         \
    \       smallest = i;\n                foundSmallest = true;\n            }\n\
    \            if (i == smallest) {\n                if (foundSmallest) {\n    \
    \                secondSmallest = smallest;\n                    foundSecondSmallest\
    \ = true;\n                }\n            }\n        }\n        if (foundSmallest\
    \ && foundSecondSmallest) {\n            return secondSmallest;\n        }\n \
    \       return null;", "        long smallest = lst.Min();\n        long secondSmallest\
    \ = lst.Min();\n        foreach (long i in lst) {\n            if (i < smallest)\
    \ {\n                secondSmallest = smallest;\n                smallest = i;\n\
    \            }\n            else if (i == smallest) {\n                secondSmallest\
    \ = i;\n            }\n        }\n        return secondSmallest;", "        if\
    \ (lst.Count == 0) return null;\n        long smallest = lst[0];\n        long\
    \ secondSmallest = lst[1];\n        long thirdSmallest = lst[2];\n        long\
    \ fourthSmallest = lst[3];\n        long fifthSmallest = lst[4];\n        long\
    \ sixthSmallest = lst[5];\n        long seventhSmallest = lst[6];\n        long\
    \ eighthSmallest = lst[7];\n        long ninthSmallest = lst[8];\n        long\
    \ tenthSmallest = lst[9];\n        long eleventhSmallest = lst[10];\n        long\
    \ twelfthSmallest = lst[11];\n        long thirteenthSmallest = lst[12];\n   \
    \     long fourteenthSmallest = lst[13];\n        long fifteenthSmallest = lst[14];\n\
    \        long sixteenthSmallest = lst[15];\n        long seventeenthSmallest =\
    \ lst[16];\n        long eighteenthSmallest = lst[17];\n        long nineteenthSmallest\
    \ = lst[18];\n        long twentiethSmallest = lst[19];\n        long thirtiethSmallest\
    \ = lst[20];\n        long fourtiethSmallest = lst[21];\n        long fiftiethSmallest\
    \ = lst[22];\n        long sixtiethSmallest = lst[23];\n        long seventiethSmallest\
    \ = lst[24];\n        long eightiethSmallest = lst[25];\n        long ninetiethSmallest\
    \ = lst[26];\n        long twentyFirstSmallest = lst[27];\n        long thirtyFirstSmallest\
    \ = lst[28];\n        long fortyFirstSmallest = lst[29];\n        long fiftyFirstSmallest\
    \ = lst[30];\n        long sixtyFirstSmallest = lst[31];\n        long seventyFirstSmallest\
    \ = lst[32];\n        long eightyFirstSmallest = lst[33];\n        long ninetyFirstSmallest\
    \ = lst[34];\n        long twentySecondSmallest = lst[35];\n        long thirtySecondSmallest\
    \ = lst[36];\n        long fortySecondSmallest = lst[37];\n        long fiftySecondSmallest\
    \ = lst[38];\n        long sixtySecondSmallest = lst[39];\n", "        long smallest\
    \ = lst.Min();\n        long secondSmallest = lst.Min();\n        foreach (long\
    \ i in lst) {\n            if (i < smallest) {\n                secondSmallest\
    \ = smallest;\n                smallest = i;\n            }\n            else\
    \ if (i == smallest) {\n                secondSmallest = i;\n            }\n \
    \       }\n        return secondSmallest;", "        if (lst.Count == 0) return\
    \ null;\n        long smallest = lst[0];\n        long secondSmallest = lst[1];\n\
    \        for (int i = 2; i < lst.Count; i++) {\n            if (lst[i] < smallest)\
    \ {\n                secondSmallest = smallest;\n                smallest = lst[i];\n\
    \            } else if (lst[i] < secondSmallest) {\n                secondSmallest\
    \ = lst[i];\n            }\n        }\n        return secondSmallest;", "    \
    \    long smallest = lst.Min();\n        long secondSmallest = lst.Min();\n  \
    \      foreach (long i in lst) {\n            if (i < smallest) {\n          \
    \      secondSmallest = smallest;\n                smallest = i;\n           \
    \ }\n            else if (i < secondSmallest) {\n                secondSmallest\
    \ = i;\n            }\n        }\n        return secondSmallest;", "        long\
    \ smallest = lst.Min();\n        long secondSmallest = lst.Min();\n        foreach\
    \ (long i in lst) {\n            if (i < smallest) {\n                secondSmallest\
    \ = smallest;\n                smallest = i;\n            } else if (i < secondSmallest)\
    \ {\n                secondSmallest = i;\n            }\n        }\n        return\
    \ secondSmallest;", "        if (lst.Count == 0) {\n            return null;\n\
    \        }\n        long smallest = lst[0];\n        long secondSmallest = lst[0];\n\
    \        for (int i = 1; i < lst.Count; i++) {\n            if (lst[i] < smallest)\
    \ {\n                secondSmallest = smallest;\n                smallest = lst[i];\n\
    \            } else if (lst[i] > secondSmallest) {\n                secondSmallest\
    \ = lst[i];\n            }\n        }\n        return secondSmallest;", "    \
    \    if (lst.Count == 0) return null;\n        var smallest = lst[0];\n      \
    \  var secondSmallest = lst[1];\n        for (var i = 2; i < lst.Count; i++) {\n\
    \            if (lst[i] < smallest) {\n                secondSmallest = smallest;\n\
    \                smallest = lst[i];\n            } else if (lst[i] < secondSmallest)\
    \ {\n                secondSmallest = lst[i];\n            }\n        }\n    \
    \    return secondSmallest;", "        if (lst.Count == 0) return null;\n    \
    \    long smallest = lst[0];\n        long secondSmallest = lst[1];\n        for\
    \ (int i = 2; i < lst.Count; i++) {\n            if (lst[i] < smallest) {\n  \
    \              secondSmallest = smallest;\n                smallest = lst[i];\n\
    \            } else if (lst[i] < secondSmallest) {\n                secondSmallest\
    \ = lst[i];\n            }\n        }\n        return secondSmallest;", "    \
    \    if (lst.Count == 0) {\n            return null;\n        }\n        long\
    \ smallest = lst[0];\n        long secondSmallest = lst[1];\n        for (int\
    \ i = 2; i < lst.Count; i++) {\n            if (lst[i] < smallest) {\n       \
    \         secondSmallest = lst[i];\n                smallest = secondSmallest;\n\
    \            }\n        }\n        return secondSmallest;", "        if (lst.Count\
    \ == 0) return null;\n        long smallest = lst[0];\n        long secondSmallest\
    \ = lst[1];\n        for (int i = 2; i < lst.Count; i++) {\n            if (lst[i]\
    \ < smallest) {\n                secondSmallest = smallest;\n                smallest\
    \ = lst[i];\n            } else if (lst[i] < secondSmallest) {\n             \
    \   secondSmallest = lst[i];\n            }\n        }\n        return secondSmallest;",
  "        if (lst.Count == 0) return null;\n        long min = lst[0];\n        long\
    \ max = lst[0];\n        foreach (long i in lst) {\n            if (i < min) min\
    \ = i;\n            if (i > max) max = i;\n        }\n        if (min == max)\
    \ return null;\n        if (min == lst[1]) return max;\n        if (max == lst[1])\
    \ return min;\n        long mid = min + (max - min) / 2;\n        if (mid == lst[1])\
    \ return max;\n        if (mid == lst[0]) return min;\n        if (mid == lst[lst.Count\
    \ - 1]) return lst[lst.Count - 1];\n        if (mid == lst[lst.Count - 2]) return\
    \ lst[lst.Count - 2];\n        long nextSmallest = lst[lst.Count - 1];\n     \
    \   long nextLargest = lst[0];\n        foreach (long i in lst) {\n          \
    \  if (i == mid) continue;\n            if (i < mid) {\n                if (i\
    \ == nextSmallest) {\n                    nextSmallest = lst[i + 1];\n       \
    \             nextLargest = lst[i];\n                }\n            }\n      \
    \      if (i > mid) {\n                if (i == nextLargest) {\n             \
    \       nextSmallest = lst[i - 1];\n                    nextLargest = lst[i];\n\
    \                }\n            }\n        }\n        if (nextSmallest == lst[1])\
    \ return max;\n        if (nextSmallest == lst[0]) return min;\n        if (nextSmallest\
    \ == lst[lst.Count - 1]) return lst[lst.Count - 1];\n        if (nextSmallest\
    \ == lst[lst.Count - 2]) return lst[lst.Count - 2];\n        return null;", " \
    \       if (lst.Count == 0)\n            return null;\n        long smallest =\
    \ lst[0];\n        long secondSmallest = lst[1];\n        for (int i = 2; i <\
    \ lst.Count; i++) {\n            if (lst[i] < smallest) {\n                secondSmallest\
    \ = smallest;\n                smallest = lst[i];\n            } else if (lst[i]\
    \ < secondSmallest) {\n                secondSmallest = lst[i];\n            }\n\
    \        }\n        return secondSmallest;", "        long smallest = lst[0];\n\
    \        long secondSmallest = lst[1];\n        bool foundSmallest = false;\n\
    \        bool foundSecondSmallest = false;\n        foreach (long i in lst) {\n\
    \            if (smallest>i) {\n                secondSmallest = smallest;\n \
    \               smallest = i;\n                foundSmallest = true;\n       \
    \     }\n            if (secondSmallest>i) {\n                secondSmallest =\
    \ i;\n                foundSecondSmallest = true;\n            }\n        }\n\
    \        if (foundSmallest) {\n            return secondSmallest;\n        }\n\
    \        if (foundSecondSmallest) {\n            return secondSmallest;\n    \
    \    }\n        return null;", "        if (lst.Count == 0) return null;\n   \
    \     var smallest = lst[0];\n        var smallest_index = lst.IndexOf(smallest);\n\
    \        if (smallest_index == 0) return null;\n        var second_smallest =\
    \ lst[smallest_index - 1];\n        var second_smallest_index = lst.IndexOf(second_smallest);\n\
    \        if (second_smallest_index == 0) return null;\n        if (second_smallest\
    \ < smallest) {\n            return second_smallest;\n        }\n        return\
    \ smallest;", "        long smallest = lst.Min();\n        long secondSmallest\
    \ = lst.Min();\n        foreach (long i in lst) {\n            if (i < smallest)\
    \ {\n                secondSmallest = smallest;\n                smallest = i;\n\
    \            }\n            else if (i == smallest) {\n                secondSmallest\
    \ = i;\n            }\n        }\n        return secondSmallest;", "        if\
    \ (lst.Count == 0) return null;\n        var min = lst[0];\n        var min2 =\
    \ lst[1];\n        for (int i = 2; i < lst.Count; i++) {\n            if (lst[i]\
    \ < min) {\n                min = lst[i];\n                min2 = lst[i - 1];\n\
    \            }\n        }\n        return min2;", "        long smallest = lst[0];\n\
    \        long secondSmallest = lst[1];\n        bool foundSmallest = false;\n\
    \        bool foundSecondSmallest = false;\n        foreach (long n in lst) {\n\
    \            if (n < smallest) {\n                secondSmallest = smallest;\n\
    \                smallest = n;\n                foundSmallest = true;\n      \
    \      }\n            else if (n < secondSmallest) {\n                secondSmallest\
    \ = n;\n                foundSecondSmallest = true;\n            }\n        }\n\
    \        if (foundSmallest) {\n            return secondSmallest;\n        }\n\
    \        if (foundSecondSmallest) {\n            return secondSmallest;\n    \
    \    }\n        return null;", "        long smallest = lst.Min();\n        long\
    \ secondSmallest = lst.Min();\n        foreach (long num in lst) {\n         \
    \   if (num < smallest) {\n                secondSmallest = smallest;\n      \
    \          smallest = num;\n            } else if (num < secondSmallest) {\n \
    \               secondSmallest = num;\n            }\n        }\n        return\
    \ secondSmallest;", "        if (lst.Count == 0) return null;\n        long smallest\
    \ = lst[0];\n        long second = smallest;\n        foreach (long i in lst)\
    \ {\n            if (i < smallest) {\n                second = smallest;\n   \
    \             smallest = i;\n            } else if (i > smallest) {\n        \
    \        second = i;\n            }\n        }\n        return second == smallest\
    \ ? null : second;", "        long smallest = lst.Min();\n        long secondSmallest\
    \ = lst.Min();\n        foreach (long i in lst) {\n            if (i < smallest)\
    \ {\n                secondSmallest = smallest;\n                smallest = i;\n\
    \            } else if (i < secondSmallest) {\n                secondSmallest\
    \ = i;\n            }\n        }\n        return secondSmallest;", "        if\
    \ (lst.Count == 0) return null;\n        long smallest = lst[0];\n        long\
    \ secondSmallest = lst[1];\n        for (int i = 2; i < lst.Count; i++) {\n  \
    \          if (lst[i] < smallest) {\n                secondSmallest = smallest;\n\
    \                smallest = lst[i];\n            } else if (lst[i] < secondSmallest)\
    \ {\n                secondSmallest = lst[i];\n            }\n        }\n    \
    \    return secondSmallest;", "        if (lst.Count == 0) {\n            return\
    \ null;\n        }\n        long min = lst[0];\n        long max = lst[0];\n \
    \       for (int i = 1; i < lst.Count; i++) {\n            if (lst[i] < min) {\n\
    \                min = lst[i];\n            }\n            if (lst[i] > max) {\n\
    \                max = lst[i];\n            }\n        }\n        if (min == max)\
    \ {\n            return null;\n        }\n        return max;", "        if (lst.Count\
    \ == 0) return null;\n        long smallest = lst[0];\n        long secondSmallest\
    \ = lst[1];\n        for (int i = 2; i < lst.Count; i++) {\n            if (lst[i]\
    \ < smallest) {\n                secondSmallest = smallest;\n                smallest\
    \ = lst[i];\n            } else if (lst[i] < secondSmallest) {\n             \
    \   secondSmallest = lst[i];\n            }\n        }\n        return secondSmallest;",
  "        if (lst.Count == 0) {\n            return null;\n        }\n        long\
    \ smallest = lst[0];\n        long secondSmallest = lst[0];\n        bool foundSmallest\
    \ = false;\n        bool foundSecondSmallest = false;\n        foreach (long i\
    \ in lst) {\n            if (i == smallest) {\n                foundSmallest =\
    \ true;\n            }\n            if (i == secondSmallest) {\n             \
    \   foundSecondSmallest = true;\n            }\n            if (foundSmallest\
    \ && foundSecondSmallest) {\n                return secondSmallest;\n        \
    \    }\n            if (foundSmallest) {\n                secondSmallest = i;\n\
    \            }\n            if (foundSecondSmallest) {\n                smallest\
    \ = i;\n            }\n        }\n        return null;", "        long smallest\
    \ = lst[0];\n        long secondSmallest = lst[0];\n        foreach (long i in\
    \ lst) {\n            if (i < smallest) {\n                secondSmallest = smallest;\n\
    \                smallest = i;\n            } else if (i > secondSmallest) {\n\
    \                secondSmallest = i;\n            }\n        }\n        return\
    \ secondSmallest;", "        if (lst.Count == 0) return null;\n        long smallest\
    \ = lst[0];\n        long secondSmallest = lst[1];\n        for (int i = 2; i\
    \ < lst.Count; i++) {\n            if (lst[i] < smallest) {\n                secondSmallest\
    \ = smallest;\n                smallest = lst[i];\n            } else if (lst[i]\
    \ < secondSmallest) {\n                secondSmallest = lst[i];\n            }\n\
    \        }\n        return secondSmallest;", "        long smallest = lst[0];\n\
    \        long secondSmallest = lst[0];\n        foreach (long i in lst) {\n  \
    \          if (i < smallest) {\n                secondSmallest = smallest;\n \
    \               smallest = i;\n            } else if (i < secondSmallest) {\n\
    \                secondSmallest = i;\n            }\n        }\n        return\
    \ secondSmallest;", "        long smallest = lst[0];\n        long secondSmallest\
    \ = lst[0];\n        foreach (long i in lst) {\n            if (i < smallest)\
    \ {\n                secondSmallest = smallest;\n                smallest = i;\n\
    \            }\n            if (i < secondSmallest) {\n                secondSmallest\
    \ = i;\n            }\n        }\n        if (secondSmallest == smallest) {\n\
    \            return null;\n        }\n        return secondSmallest;", "     \
    \   if (lst.Count == 0) return null;\n        long smallest = lst[0];\n      \
    \  long secondSmallest = lst[1];\n        bool foundSmallest = false;\n      \
    \  bool foundSecondSmallest = false;\n        for (int i = 2; i < lst.Count; i++)\
    \ {\n            if (lst[i] < smallest) {\n                secondSmallest = smallest;\n\
    \                smallest = lst[i];\n                foundSmallest = true;\n \
    \           } else if (lst[i] == smallest) {\n                foundSmallest =\
    \ true;\n            }\n            if (lst[i] < secondSmallest) {\n         \
    \       secondSmallest = lst[i];\n                foundSecondSmallest = true;\n\
    \            } else if (lst[i] == secondSmallest) {\n                foundSecondSmallest\
    \ = true;\n            }\n        }\n        if (foundSmallest) {\n          \
    \  return secondSmallest;\n        } else if (foundSecondSmallest) {\n       \
    \     return secondSmallest;\n        } else {\n            return null;\n   \
    \     }", "        if (lst.Count == 0) return null;\n        var min = lst[0];\n\
    \        var minIndex = 0;\n        for (int i = 1; i < lst.Count; i++) {\n  \
    \          if (lst[i] < min) {\n                min = lst[i];\n              \
    \  minIndex = i;\n            }\n        }\n        if (minIndex == lst.Count\
    \ - 1) return null;\n        return lst[minIndex + 1];", "        if (lst.Count\
    \ == 0)\n            return null;\n        long smallest = lst[0];\n        long\
    \ secondSmallest = lst[1];\n        for (int i = 2; i < lst.Count; i++) {\n  \
    \          if (lst[i] < smallest) {\n                secondSmallest = smallest;\n\
    \                smallest = lst[i];\n            } else if (lst[i] < secondSmallest)\
    \ {\n                secondSmallest = lst[i];\n            }\n        }\n    \
    \    return secondSmallest;", "        long smallest = lst.Min();\n        long\
    \ secondSmallest = lst.Min();\n        foreach (long i in lst) {\n           \
    \ if (i < smallest) {\n                secondSmallest = smallest;\n          \
    \      smallest = i;\n            }\n            else if (i < secondSmallest)\
    \ {\n                secondSmallest = i;\n            }\n        }\n        return\
    \ secondSmallest;", "        if (lst.Count == 0) return null;\n        var smallest\
    \ = lst[0];\n        var smallest_index = 0;\n        for (int i = 1; i < lst.Count;\
    \ i++) {\n            if (lst[i] < smallest) {\n                smallest = lst[i];\n\
    \                smallest_index = i;\n            }\n        }\n        if (smallest_index\
    \ == 0) return null;\n        return lst[smallest_index + 1];", "        if (lst.Count\
    \ == 0)\n            return null;\n        var smallest = lst[0];\n        var\
    \ smallest_index = lst.IndexOf(smallest);\n        if (smallest_index == 0)\n\
    \            return smallest;\n        var second_smallest = lst[1];\n       \
    \ var second_smallest_index = lst.IndexOf(second_smallest);\n        if (second_smallest_index\
    \ == 0)\n            return second_smallest;\n        if (second_smallest_index\
    \ > smallest_index)\n            return second_smallest;\n        var third_smallest\
    \ = lst[2];\n        var third_smallest_index = lst.IndexOf(third_smallest);\n\
    \        if (third_smallest_index == 0)\n            return third_smallest;\n\
    \        if (third_smallest_index > second_smallest_index)\n            return\
    \ third_smallest;\n        var fourth_smallest = lst[3];\n        var fourth_smallest_index\
    \ = lst.IndexOf(fourth_smallest);\n        if (fourth_smallest_index == 0)\n \
    \           return fourth_smallest;\n        if (fourth_smallest_index > third_smallest_index)\n\
    \            return fourth_smallest;\n        var fifth_smallest = lst[4];\n \
    \       var fifth_smallest_index = lst.IndexOf(fifth_smallest);\n        if (fifth_smallest_index\
    \ == 0)\n            return fifth_smallest;\n        if (fifth_smallest_index\
    \ > fourth_smallest_index)\n            return fifth_smallest;\n        var sixth_smallest\
    \ = lst[5];\n        var sixth_smallest_index = lst.IndexOf(sixth_smallest);\n\
    \        if (sixth_smallest_index == 0)\n            return sixth_smallest;\n\
    \        if (sixth_smallest_index > fifth_smallest_index)\n            return\
    \ sixth_smallest;\n        var seventh_smallest = lst[6];\n        var seventh_smallest_index\
    \ = lst.IndexOf(seventh_smallest);\n        if (seventh_smallest_index == 0)\n\
    \            return seventh_smallest;\n        if (seventh_smallest_index > sixth_smallest_index)\n\
    \            return seventh_smallest;\n        var eighth_smallest = lst[7];\n\
    \        var eighth_smallest_index = lst.IndexOf(eighth_smallest);\n        if\
    \ (eighth_smallest_index == 0)\n            return eighth_smallest;\n        if\
    \ (eighth_smallest_index > seventh_smallest_index)\n            return eighth_smallest;\n\
    \        var ninth_smallest = lst[8];\n        var ninth_smallest_index = lst.IndexOf(ninth_smallest);\n\
    \        if (ninth_smallest_index == 0)\n            return ninth_smallest;\n\
    \        if (ninth_smalle", "        if (lst.Count == 0) return null;\n      \
    \  long smallest = lst[0];\n        long secondSmallest = lst[1];\n        for\
    \ (int i = 2; i < lst.Count; i++) {\n            if (lst[i] < smallest) {\n  \
    \              secondSmallest = smallest;\n                smallest = lst[i];\n\
    \            } else if (lst[i] < secondSmallest) {\n                secondSmallest\
    \ = lst[i];\n            }\n        }\n        return secondSmallest;", "    \
    \    long smallest = lst[0];\n        long secondSmallest = lst[1];\n        foreach\
    \ (var item in lst) {\n            if (item < smallest) {\n                secondSmallest\
    \ = smallest;\n                smallest = item;\n            } else if (item <\
    \ secondSmallest) {\n                secondSmallest = item;\n            }\n \
    \       }\n        return secondSmallest;", "        if (lst.Count == 0) return\
    \ null;\n        long min = lst[0];\n        long max = lst[0];\n        for (int\
    \ i = 1; i < lst.Count; i++) {\n            if (lst[i] < min) {\n            \
    \    min = lst[i];\n            }\n            if (lst[i] > max) {\n         \
    \       max = lst[i];\n            }\n        }\n        if (min == max) return\
    \ null;\n        return max;", "        if (lst.Count == 0) return null;\n   \
    \     long smallest = lst[0];\n        long secondSmallest = lst[1];\n       \
    \ for (int i = 2; i < lst.Count; i++) {\n            if (lst[i] < smallest) {\n\
    \                secondSmallest = smallest;\n                smallest = lst[i];\n\
    \            } else if (lst[i] < secondSmallest) {\n                secondSmallest\
    \ = lst[i];\n            }\n        }\n        return secondSmallest;", "    \
    \    long smallest = lst[0];\n        long secondSmallest = lst[1];\n        bool\
    \ found = false;\n        for (int i = 0; i < lst.Count; i++) {\n            if\
    \ (lst[i] < smallest) {\n                secondSmallest = smallest;\n        \
    \        smallest = lst[i];\n                found = true;\n            } else\
    \ if (lst[i] == smallest) {\n                secondSmallest = lst[i];\n      \
    \      }\n        }\n        if (found == false) {\n            return null;\n\
    \        }\n        return secondSmallest;", "        if (lst.Count == 0) return\
    \ null;\n        long smallest = lst[0];\n        long secondSmallest = lst[1];\n\
    \        for (int i = 2; i < lst.Count; i++) {\n            if (lst[i] < smallest)\
    \ {\n                secondSmallest = smallest;\n                smallest = lst[i];\n\
    \            } else if (lst[i] < secondSmallest) {\n                secondSmallest\
    \ = lst[i];\n            }\n        }\n        return secondSmallest;", "    \
    \    long smallest = lst[0];\n        long secondSmallest = lst[1];\n        for\
    \ (int i = 2; i < lst.Count; i++) {\n            if (lst[i] < smallest) {\n  \
    \              secondSmallest = smallest;\n                smallest = lst[i];\n\
    \            } else if (lst[i] < secondSmallest) {\n                secondSmallest\
    \ = lst[i];\n            }\n        }\n        return secondSmallest;", "    \
    \    if (lst.Count == 0) {\n            return null;\n        }\n        long\
    \ min = lst[0];\n        long max = lst[0];\n        for (int i = 1; i < lst.Count;\
    \ i++) {\n            if (lst[i] < min) {\n                min = lst[i];\n   \
    \         }\n            if (lst[i] > max) {\n                max = lst[i];\n\
    \            }\n        }\n        if (min == max) {\n            return null;\n\
    \        }\n        return max;", "        if (lst.Count == 0) return null;\n\
    \        long smallest = lst[0];\n        long secondSmallest = lst[1];\n    \
    \    for (int i = 2; i < lst.Count; i++) {\n            if (lst[i] < smallest)\
    \ {\n                secondSmallest = smallest;\n                smallest = lst[i];\n\
    \            } else if (lst[i] < secondSmallest) {\n                secondSmallest\
    \ = lst[i];\n            }\n        }\n        return secondSmallest;", "    \
    \    long smallest = lst[0];\n        long secondSmallest = lst[1];\n        foreach\
    \ (long i in lst) {\n            if (i < smallest) {\n                secondSmallest\
    \ = smallest;\n                smallest = i;\n            } else if (i < secondSmallest)\
    \ {\n                secondSmallest = i;\n            }\n        }\n        return\
    \ secondSmallest;", "        if (lst.Count == 0) return null;\n        var min\
    \ = lst[0];\n        var min2 = lst[1];\n        for (int i = 2; i < lst.Count;\
    \ i++) {\n            if (lst[i] < min) {\n                min = lst[i];\n   \
    \             min2 = lst[i - 1];\n            }\n        }\n        return min2;",
  "        if (lst.Count == 0) return null;\n        long min = lst[0];\n        long\
    \ max = lst[0];\n        foreach (long i in lst) {\n            if (i < min) {\n\
    \                min = i;\n            }\n            if (i > max) {\n       \
    \         max = i;\n            }\n        }\n        if (min == max) return null;\n\
    \        long mid = min + (max - min) / 2;\n        if (mid == max) return null;\n\
    \        if (mid < max) return new Nullable<long>(mid);\n        if (mid > min)\
    \ return new Nullable<long>(max);\n        return null;", "        if (lst.Count\
    \ == 0) return null;\n        var min = lst[0];\n        var min2 = lst[1];\n\
    \        for (var i = 2; i < lst.Count; i++) {\n            var cur = lst[i];\n\
    \            if (cur < min) {\n                min = cur;\n                min2\
    \ = lst[i - 1];\n            } else if (cur < min2) {\n                min2 =\
    \ cur;\n            }\n        }\n        return min2;", "        if (lst.Count\
    \ == 0) {\n            return null;\n        }\n        long smallest = lst[0];\n\
    \        long secondSmallest = lst[1];\n        for (int i = 2; i < lst.Count;\
    \ i++) {\n            if (lst[i] < smallest) {\n                secondSmallest\
    \ = smallest;\n                smallest = lst[i];\n            } else if (lst[i]\
    \ < secondSmallest) {\n                secondSmallest = lst[i];\n            }\n\
    \        }\n        return secondSmallest;", "        if (lst.Count == 0) {\n\
    \            return null;\n        }\n        long smallest = lst[0];\n      \
    \  long secondSmallest = lst[1];\n        for (int i = 2; i < lst.Count; i++)\
    \ {\n            if (lst[i] < smallest) {\n                secondSmallest = smallest;\n\
    \                smallest = lst[i];\n            } else if (lst[i] < secondSmallest)\
    \ {\n                secondSmallest = lst[i];\n            }\n        }\n    \
    \    return secondSmallest;", "        if (lst.Count == 0) return null;\n    \
    \    long smallest = lst[0];\n        long secondSmallest = lst[0];\n        foreach\
    \ (long i in lst) {\n            if (i < smallest) {\n                secondSmallest\
    \ = smallest;\n                smallest = i;\n            } else if (i > secondSmallest)\
    \ {\n                secondSmallest = i;\n            }\n        }\n        return\
    \ secondSmallest;", "        long smallest = lst.Min();\n        long secondSmallest\
    \ = lst.Min();\n        foreach (long i in lst) {\n            if (i < smallest)\
    \ {\n                secondSmallest = smallest;\n                smallest = i;\n\
    \            } else if (i < secondSmallest) {\n                secondSmallest\
    \ = i;\n            }\n        }\n        return secondSmallest;", "        if\
    \ (lst.Count == 0) return null;\n        long smallest = lst[0];\n        long\
    \ secondSmallest = lst[1];\n        bool found = false;\n        for (int i =\
    \ 2; i < lst.Count; i++) {\n            if (lst[i] < smallest) {\n           \
    \     secondSmallest = smallest;\n                smallest = lst[i];\n       \
    \         found = true;\n            } else if (lst[i] == smallest) {\n      \
    \          secondSmallest = lst[i];\n            }\n        }\n        return\
    \ found ? new Nullable<long>(secondSmallest) : null;", "        long smallest\
    \ = lst[0];\n        long secondSmallest = lst[0];\n        bool foundSmallest\
    \ = false;\n        bool foundSecondSmallest = false;\n        foreach (long num\
    \ in lst) {\n            if (num < smallest) {\n                secondSmallest\
    \ = smallest;\n                smallest = num;\n                foundSmallest\
    \ = true;\n            }\n            if (num < secondSmallest) {\n          \
    \      secondSmallest = num;\n                foundSecondSmallest = true;\n  \
    \          }\n        }\n        if (foundSmallest && foundSecondSmallest)\n \
    \           return secondSmallest;\n        else\n            return null;", " \
    \       long smallest = lst.Min();\n        long secondSmallest = lst.Min();\n\
    \        foreach (long i in lst) {\n            if (i < smallest) {\n        \
    \        secondSmallest = smallest;\n                smallest = i;\n         \
    \   }\n            else if (i < secondSmallest) {\n                secondSmallest\
    \ = i;\n            }\n        }\n        return secondSmallest;", "        if\
    \ (lst.Count == 0) return null;\n        long smallest = lst[0];\n        long\
    \ secondSmallest = lst[0];\n        foreach (long i in lst) {\n            if\
    \ (i < smallest) {\n                secondSmallest = smallest;\n             \
    \   smallest = i;\n            } else if (i < secondSmallest) {\n            \
    \    secondSmallest = i;\n            }\n        }\n        return secondSmallest;",
  "        long smallest = lst.Min();\n        long secondSmallest = lst.Min();\n\
    \        foreach (long i in lst) {\n            if (i < smallest) {\n        \
    \        secondSmallest = smallest;\n                smallest = i;\n         \
    \   } else if (i < secondSmallest) {\n                secondSmallest = i;\n  \
    \          }\n        }\n        return secondSmallest;", "        if (lst.Count\
    \ == 0) {\n            return null;\n        }\n        long smallest = lst[0];\n\
    \        long secondSmallest = lst[1];\n        for (int i = 2; i < lst.Count;\
    \ i++) {\n            if (lst[i] < smallest) {\n                secondSmallest\
    \ = smallest;\n                smallest = lst[i];\n            } else if (lst[i]\
    \ > secondSmallest) {\n                secondSmallest = lst[i];\n            }\n\
    \        }\n        return secondSmallest;", "        if (lst.Count == 0) return\
    \ null;\n        long smallest = lst[0];\n        long secondSmallest = lst[1];\n\
    \        for (int i = 2; i < lst.Count; i++) {\n            if (lst[i] < smallest)\
    \ {\n                secondSmallest = smallest;\n                smallest = lst[i];\n\
    \            } else if (lst[i] < secondSmallest) {\n                secondSmallest\
    \ = lst[i];\n            }\n        }\n        return secondSmallest;", "    \
    \    if (lst.Count == 0) {\n            return null;\n        }\n        long\
    \ smallest = lst[0];\n        long secondSmallest = lst[1];\n        for (int\
    \ i = 2; i < lst.Count; i++) {\n            if (lst[i] < smallest) {\n       \
    \         secondSmallest = smallest;\n                smallest = lst[i];\n   \
    \         } else if (lst[i] < secondSmallest) {\n                secondSmallest\
    \ = lst[i];\n            }\n        }\n        return secondSmallest;", "    \
    \    if (lst.Count == 0) return null;\n        long smallest = lst[0];\n     \
    \   long secondSmallest = lst[1];\n        for (int i = 2; i < lst.Count; i++)\
    \ {\n            if (lst[i] < smallest) {\n                secondSmallest = smallest;\n\
    \                smallest = lst[i];\n            } else if (lst[i] < secondSmallest)\
    \ {\n                secondSmallest = lst[i];\n            }\n        }\n    \
    \    return secondSmallest;", "        if (lst.Count == 0)\n            return\
    \ null;\n        var min = lst[0];\n        var minIndex = 0;\n        for (int\
    \ i = 1; i < lst.Count; i++) {\n            if (lst[i] < min) {\n            \
    \    min = lst[i];\n                minIndex = i;\n            }\n        }\n\
    \        if (minIndex == 0)\n            return null;\n        var min2 = lst[minIndex];\n\
    \        for (int i = minIndex + 1; i < lst.Count; i++) {\n            if (lst[i]\
    \ < min2) {\n                min2 = lst[i];\n            }\n        }\n      \
    \  return min2;", "        if (lst.Count == 0) {\n            return null;\n \
    \       }\n        long min = lst[0];\n        long max = lst[0];\n        for\
    \ (int i = 1; i < lst.Count; i++) {\n            if (lst[i] < min) {\n       \
    \         min = lst[i];\n            }\n            if (lst[i] > max) {\n    \
    \            max = lst[i];\n            }\n        }\n        if (min == max)\
    \ {\n            return null;\n        }\n        return max;", "        if (lst.Count\
    \ == 0) return null;\n        var minValue = lst[0];\n        var minIndex = 0;\n\
    \        for (int i = 1; i < lst.Count; i++) {\n            if (lst[i] < minValue)\
    \ {\n                minValue = lst[i];\n                minIndex = i;\n     \
    \       }\n        }\n        if (minIndex == lst.Count - 1) return null;\n  \
    \      return lst.ElementAt(minIndex + 1);", "        if (lst.Count == 0)\n  \
    \          return null;\n        var min = lst[0];\n        var minIndex = 0;\n\
    \        for (int i = 1; i < lst.Count; i++) {\n            if (lst[i] < min)\
    \ {\n                min = lst[i];\n                minIndex = i;\n          \
    \  }\n        }\n        if (minIndex == lst.Count - 1)\n            return null;\n\
    \        return lst[minIndex + 1];", "        if (lst.Count == 0) return null;\n\
    \        long smallest = lst[0];\n        long secondSmallest = lst[1];\n    \
    \    bool foundSmallest = false;\n        bool foundSecondSmallest = false;\n\
    \        foreach (long i in lst) {\n            if (smallest>i) {\n          \
    \      secondSmallest = smallest;\n                smallest = i;\n           \
    \     foundSmallest = true;\n            }\n            if (secondSmallest>i)\
    \ {\n                secondSmallest = i;\n                foundSecondSmallest\
    \ = true;\n            }\n        }\n        if (foundSmallest) {\n          \
    \  return secondSmallest;\n        }\n        if (foundSecondSmallest) {\n   \
    \         return secondSmallest;\n        }\n        return null;", "        if\
    \ (lst.Count == 0) return null;\n        var smallest = lst[0];\n        var secondSmallest\
    \ = lst[1];\n        for (var i = 2; i < lst.Count; i++) {\n            if (lst[i]\
    \ < smallest) {\n                secondSmallest = smallest;\n                smallest\
    \ = lst[i];\n            } else if (lst[i] > secondSmallest) {\n             \
    \   secondSmallest = lst[i];\n            }\n        }\n        return secondSmallest;",
  "        long smallest = lst[0];\n        long secondSmallest = lst[1];\n      \
    \  foreach (long i in lst) {\n            if (i < smallest) {\n              \
    \  secondSmallest = smallest;\n                smallest = i;\n            }\n\
    \            else if (i == smallest) {\n                if (secondSmallest < i)\
    \ {\n                    secondSmallest = i;\n                }\n            }\n\
    \        }\n        return secondSmallest;", "        long smallest = lst[0];\n\
    \        long secondSmallest = lst[0];\n        foreach (long i in lst) {\n  \
    \          if (i < smallest) {\n                secondSmallest = smallest;\n \
    \               smallest = i;\n            } else if (i < secondSmallest) {\n\
    \                secondSmallest = i;\n            }\n        }\n        return\
    \ secondSmallest;", "        if (lst.Count == 0) {\n            return null;\n\
    \        }\n        long smallest = lst[0];\n        long secondSmallest = lst[1];\n\
    \        for (int i = 2; i < lst.Count; i++) {\n            if (lst[i] < smallest)\
    \ {\n                secondSmallest = smallest;\n                smallest = lst[i];\n\
    \            } else if (lst[i] < secondSmallest) {\n                secondSmallest\
    \ = lst[i];\n            }\n        }\n        return secondSmallest;", "    \
    \    if (lst.Count == 0)\n            return null;\n        long smallest = lst[0];\n\
    \        long secondSmallest = lst[1];\n        for (int i = 2; i < lst.Count;\
    \ i++) {\n            if (lst[i] < smallest) {\n                secondSmallest\
    \ = smallest;\n                smallest = lst[i];\n            } else if (lst[i]\
    \ < secondSmallest) {\n                secondSmallest = lst[i];\n            }\n\
    \        }\n        return secondSmallest;", "        long smallest = lst.Min();\n\
    \        long secondSmallest = lst.Min();\n        foreach (long n in lst) {\n\
    \            if (n < smallest) {\n                secondSmallest = smallest;\n\
    \                smallest = n;\n            } else if (n < secondSmallest) {\n\
    \                secondSmallest = n;\n            }\n        }\n        return\
    \ secondSmallest;", "        if (lst.Count == 0)\n            return null;\n \
    \       long smallest = lst[0];\n        long secondSmallest = lst[1];\n     \
    \   for (int i = 2; i < lst.Count; i++) {\n            if (lst[i] < smallest)\
    \ {\n                secondSmallest = lst[i];\n                smallest = lst[i];\n\
    \            }\n        }\n        return secondSmallest;", "        if (lst.Count\
    \ == 0)\n            return null;\n        long smallest = lst[0];\n        long\
    \ secondSmallest = lst[1];\n        for (int i = 2; i < lst.Count; i++) {\n  \
    \          if (lst[i] < smallest) {\n                secondSmallest = smallest;\n\
    \                smallest = lst[i];\n            } else if (lst[i] > secondSmallest)\
    \ {\n                secondSmallest = lst[i];\n            }\n        }\n    \
    \    return secondSmallest;", "        if (lst.Count == 0) {\n            return\
    \ null;\n        }\n        long min = lst[0];\n        long max = lst[0];\n \
    \       for (int i = 1; i < lst.Count; i++) {\n            if (lst[i] < min) {\n\
    \                min = lst[i];\n            }\n            if (lst[i] > max) {\n\
    \                max = lst[i];\n            }\n        }\n        if (min == max)\
    \ {\n            return null;\n        }\n        return max;", "        if (lst.Count\
    \ == 0) return null;\n        long smallest = lst[0];\n        long secondSmallest\
    \ = lst[1];\n        foreach (long x in lst) {\n            if (x < smallest)\
    \ {\n                secondSmallest = smallest;\n                smallest = x;\n\
    \            } else if (x < secondSmallest) {\n                secondSmallest\
    \ = x;\n            }\n        }\n        return secondSmallest;", "        if\
    \ (lst.Count == 0) return null;\n        long smallest = lst[0];\n        long\
    \ secondSmallest = lst[0];\n        for (int i = 1; i < lst.Count; i++) {\n  \
    \          if (lst[i] < smallest) {\n                secondSmallest = smallest;\n\
    \                smallest = lst[i];\n            } else if (lst[i] < secondSmallest)\
    \ {\n                secondSmallest = lst[i];\n            }\n        }\n    \
    \    return secondSmallest;", "        long smallest = lst[0];\n        long secondSmallest\
    \ = lst[1];\n        long thirdSmallest = lst[2];\n        long fourthSmallest\
    \ = lst[3];\n        long fifthSmallest = lst[4];\n        long sixthSmallest\
    \ = lst[5];\n        long seventhSmallest = lst[6];\n        long eighthSmallest\
    \ = lst[7];\n        long ninthSmallest = lst[8];\n        long tenthSmallest\
    \ = lst[9];\n        long eleventhSmallest = lst[10];\n        long twelfthSmallest\
    \ = lst[11];\n        long thirteenthSmallest = lst[12];\n        long fourteenthSmallest\
    \ = lst[13];\n        long fifteenthSmallest = lst[14];\n        long sixteenthSmallest\
    \ = lst[15];\n        long seventeenthSmallest = lst[16];\n        long eighteenthSmallest\
    \ = lst[17];\n        long nineteenthSmallest = lst[18];\n        long twentiethSmallest\
    \ = lst[19];\n        long twentyFirstSmallest = lst[20];\n        long thirtyFirstSmallest\
    \ = lst[21];\n        long fortyFirstSmallest = lst[22];\n        long fiftyFirstSmallest\
    \ = lst[23];\n        long sixtyFirstSmallest = lst[24];\n        long seventyFirstSmallest\
    \ = lst[25];\n        long eightyFirstSmallest = lst[26];\n        long ninetyFirstSmallest\
    \ = lst[27];\n        long hundredthSmallest = lst[28];\n        long thousandthSmallest\
    \ = lst[29];\n        long millionthSmallest = lst[30];\n        long billionthSmallest\
    \ = lst[31];\n        long trillionthSmallest = lst[32];\n        long quadrillionthSmallest\
    \ = lst[33];\n        long quintillionthSmallest = lst[34];\n        long sextillionthSmallest\
    \ = lst[35];\n        long septillionthSmallest = lst[36];\n        long octillionthSmallest\
    \ = lst[37];\n        long nonillionthSmallest = lst[38];\n        long decillionthSmallest\
    \ = lst[39];\n        long undecillionthSmalle", "        if (lst.Count == 0)\
    \ return null;\n        long smallest = lst[0];\n        long secondSmallest =\
    \ lst[1];\n        for (int i = 2; i < lst.Count; i++) {\n            if (lst[i]\
    \ < smallest) {\n                secondSmallest = smallest;\n                smallest\
    \ = lst[i];\n            } else if (lst[i] < secondSmallest) {\n             \
    \   secondSmallest = lst[i];\n            }\n        }\n        return secondSmallest;",
  "        long smallest = lst.Min();\n        long secondSmallest = lst.Min();\n\
    \        foreach (long i in lst) {\n            if (i < smallest) {\n        \
    \        secondSmallest = smallest;\n                smallest = i;\n         \
    \   } else if (i < secondSmallest) {\n                secondSmallest = i;\n  \
    \          }\n        }\n        return secondSmallest;", "        long smallest\
    \ = lst.Min();\n        long secondSmallest = lst.Min();\n        foreach (long\
    \ n in lst) {\n            if (n < smallest) {\n                secondSmallest\
    \ = smallest;\n                smallest = n;\n            } else if (n < secondSmallest)\
    \ {\n                secondSmallest = n;\n            }\n        }\n        return\
    \ secondSmallest;", "        long smallest = lst[0];\n        long secondSmallest\
    \ = lst[0];\n        bool found = false;\n        for (int i = 1; i < lst.Count;\
    \ i++) {\n            if (lst[i] < smallest) {\n                secondSmallest\
    \ = smallest;\n                smallest = lst[i];\n                found = true;\n\
    \            }\n            else if (lst[i] == smallest) {\n                secondSmallest\
    \ = lst[i];\n            }\n        }\n        if (found) {\n            return\
    \ secondSmallest;\n        }\n        return null;", "        if (lst.Count ==\
    \ 0) return null;\n        long smallest = lst[0];\n        long secondSmallest\
    \ = lst[1];\n        for (int i = 2; i < lst.Count; i++) {\n            if (lst[i]\
    \ < smallest) {\n                secondSmallest = smallest;\n                smallest\
    \ = lst[i];\n            } else if (lst[i] > secondSmallest) {\n             \
    \   secondSmallest = lst[i];\n            }\n        }\n        return secondSmallest;",
  "        if (lst.Count == 0) return null;\n        long smallest = lst[0];\n   \
    \     long secondSmallest = lst[0];\n        for (int i = 1; i < lst.Count; i++)\
    \ {\n            if (lst[i] < smallest) {\n                secondSmallest = smallest;\n\
    \                smallest = lst[i];\n            } else if (lst[i] < secondSmallest)\
    \ {\n                secondSmallest = lst[i];\n            }\n        }\n    \
    \    return secondSmallest;", "        if (lst.Count == 0)\n            return\
    \ null;\n        var min = lst[0];\n        var minIndex = 0;\n        for (var\
    \ i = 1; i < lst.Count; i++) {\n            if (lst[i] < min) {\n            \
    \    min = lst[i];\n                minIndex = i;\n            }\n        }\n\
    \        if (minIndex == 0)\n            return null;\n        var min2 = lst[minIndex];\n\
    \        for (var i = minIndex + 1; i < lst.Count; i++) {\n            if (lst[i]\
    \ < min2) {\n                min2 = lst[i];\n            }\n        }\n      \
    \  return min2;", "        if (lst.Count == 0) return null;\n        long smallest\
    \ = lst[0];\n        long secondSmallest = lst[1];\n        bool foundSmallest\
    \ = false;\n        bool foundSecondSmallest = false;\n        foreach (long i\
    \ in lst) {\n            if (i < smallest) {\n                secondSmallest =\
    \ smallest;\n                smallest = i;\n                foundSmallest = true;\n\
    \            }\n            else if (i == smallest) {\n                foundSmallest\
    \ = true;\n            }\n            else if (foundSmallest) {\n            \
    \    if (i < secondSmallest) {\n                    secondSmallest = i;\n    \
    \                foundSecondSmallest = true;\n                }\n            }\n\
    \        }\n        if (foundSecondSmallest) return secondSmallest;\n        return\
    \ null;", "        long smallest = lst[0];\n        long secondSmallest = lst[0];\n\
    \        foreach (long i in lst) {\n            if (i < smallest) {\n        \
    \        secondSmallest = smallest;\n                smallest = i;\n         \
    \   } else if (i < secondSmallest) {\n                secondSmallest = i;\n  \
    \          }\n        }\n        return secondSmallest;", "        if (lst.Count\
    \ == 0) return null;\n        long smallest = lst[0];\n        long secondSmallest\
    \ = lst[1];\n        bool found = false;\n        for (int i = 2; i < lst.Count;\
    \ i++) {\n            if (lst[i] < smallest) {\n                secondSmallest\
    \ = smallest;\n                smallest = lst[i];\n                found = true;\n\
    \            } else if (lst[i] == smallest) {\n                secondSmallest\
    \ = lst[i];\n            }\n        }\n        if (found) return secondSmallest;\n\
    \        else return null;", "        if (lst.Count == 0) {\n            return\
    \ null;\n        }\n        long smallest = lst[0];\n        long secondSmallest\
    \ = lst[0];\n        foreach (long i in lst) {\n            if (i < smallest)\
    \ {\n                secondSmallest = smallest;\n                smallest = i;\n\
    \            } else if (i < secondSmallest) {\n                secondSmallest\
    \ = i;\n            }\n        }\n        return secondSmallest;", "        if\
    \ (lst.Count == 0)\n            return null;\n        long min = lst[0];\n   \
    \     long max = lst[0];\n        for (int i = 1; i < lst.Count; i++) {\n    \
    \        if (lst[i] < min)\n                min = lst[i];\n            if (lst[i]\
    \ > max)\n                max = lst[i];\n        }\n        if (min == max)\n\
    \            return null;\n        return max;", "        long smallest = lst[0];\n\
    \        long secondSmallest = lst[1];\n        foreach (var item in lst) {\n\
    \            if (item < smallest) {\n                secondSmallest = smallest;\n\
    \                smallest = item;\n            }\n            else if (item <\
    \ secondSmallest) {\n                secondSmallest = item;\n            }\n \
    \       }\n        return secondSmallest;", "        if (lst.Count == 0) return\
    \ null;\n        long smallest = lst[0];\n        long secondSmallest = lst[1];\n\
    \        for (int i = 2; i < lst.Count; i++) {\n            if (lst[i] < smallest)\
    \ {\n                secondSmallest = smallest;\n                smallest = lst[i];\n\
    \            } else if (lst[i] < secondSmallest) {\n                secondSmallest\
    \ = lst[i];\n            }\n        }\n        return secondSmallest;", "    \
    \    if (lst.Count == 0) return null;\n        long smallest = lst[0];\n     \
    \   long secondSmallest = lst[1];\n        for (int i = 2; i < lst.Count; i++)\
    \ {\n            if (lst[i] < smallest) {\n                secondSmallest = smallest;\n\
    \                smallest = lst[i];\n            } else if (lst[i] < secondSmallest)\
    \ {\n                secondSmallest = lst[i];\n            }\n        }\n    \
    \    return secondSmallest;", "        if (lst.Count == 0)\n            return\
    \ null;\n        var min = lst[0];\n        var minIndex = 0;\n        for (int\
    \ i = 1; i < lst.Count; i++) {\n            if (lst[i] < min) {\n            \
    \    min = lst[i];\n                minIndex = i;\n            }\n        }\n\
    \        if (minIndex == 0)\n            return null;\n        var min2 = lst[minIndex];\n\
    \        for (int i = minIndex + 1; i < lst.Count; i++) {\n            if (lst[i]\
    \ < min2) {\n                min2 = lst[i];\n            }\n        }\n      \
    \  return min2;", "        if (lst.Count == 0) {\n            return null;\n \
    \       }\n        long smallest = lst[0];\n        long secondSmallest = lst[0];\n\
    \        for (int i = 1; i < lst.Count; i++) {\n            if (lst[i] < smallest)\
    \ {\n                secondSmallest = smallest;\n                smallest = lst[i];\n\
    \            } else if (lst[i] < secondSmallest) {\n                secondSmallest\
    \ = lst[i];\n            }\n        }\n        return secondSmallest;", "    \
    \    if (lst.Count == 0)\n            return null;\n        var min = lst[0];\n\
    \        var min2 = lst[1];\n        for (int i = 2; i < lst.Count; i++) {\n \
    \           if (lst[i] < min) {\n                min = lst[i];\n             \
    \   min2 = lst[i - 1];\n            }\n        }\n        if (min2 > min)\n  \
    \          return min2;\n        return min;", "        if (lst.Count == 0) {\n\
    \            return null;\n        }\n        long smallest = lst[0];\n      \
    \  long secondSmallest = lst[0];\n        bool found = false;\n        for (int\
    \ i = 1; i < lst.Count; i++) {\n            if (lst[i] < smallest) {\n       \
    \         secondSmallest = smallest;\n                smallest = lst[i];\n   \
    \             found = true;\n            }\n            else if (lst[i] < secondSmallest)\
    \ {\n                secondSmallest = lst[i];\n            }\n        }\n    \
    \    if (found) {\n            return secondSmallest;\n        }\n        return\
    \ null;", "        if (lst.Count == 0) {\n            return null;\n        }\n\
    \        long smallest = lst[0];\n        long secondSmallest = lst[0];\n    \
    \    foreach (long num in lst) {\n            if (num < smallest) {\n        \
    \        secondSmallest = smallest;\n                smallest = num;\n       \
    \     } else if (num < secondSmallest) {\n                secondSmallest = num;\n\
    \            }\n        }\n        return secondSmallest;", "        if (lst.Count\
    \ == 0) return null;\n        long smallest = lst[0];\n        long secondSmallest\
    \ = lst[1];\n        for (int i = 2; i < lst.Count; i++) {\n            if (lst[i]\
    \ < smallest) {\n                secondSmallest = smallest;\n                smallest\
    \ = lst[i];\n            } else if (lst[i] < secondSmallest) {\n             \
    \   secondSmallest = lst[i];\n            }\n        }\n        return secondSmallest;",
  "        if (lst.Count == 0)\n            return null;\n        long smallest =\
    \ lst[0];\n        long secondSmallest = lst[1];\n        for (int i = 2; i <\
    \ lst.Count; i++) {\n            if (lst[i] < smallest) {\n                secondSmallest\
    \ = smallest;\n                smallest = lst[i];\n            } else if (lst[i]\
    \ < secondSmallest) {\n                secondSmallest = lst[i];\n            }\n\
    \        }\n        return secondSmallest;", "        long smallest = lst.Min();\n\
    \        long secondSmallest = lst.Min();\n        foreach (long i in lst) {\n\
    \            if (i < smallest) {\n                secondSmallest = smallest;\n\
    \                smallest = i;\n            } else if (i < secondSmallest) {\n\
    \                secondSmallest = i;\n            }\n        }\n        return\
    \ secondSmallest;", "        if (lst.Count == 0) return null;\n        var smallest\
    \ = lst[0];\n        var smallest_index = 0;\n        for (int i = 1; i < lst.Count;\
    \ i++) {\n            if (lst[i] < smallest) {\n                smallest = lst[i];\n\
    \                smallest_index = i;\n            }\n        }\n        if (smallest_index\
    \ == lst.Count - 1) return null;\n        return lst[smallest_index + 1];", " \
    \       if (lst.Count == 0) {\n            return null;\n        }\n        long\
    \ smallest = lst[0];\n        long secondSmallest = lst[1];\n        bool foundSmallest\
    \ = false;\n        bool foundSecondSmallest = false;\n        foreach (long i\
    \ in lst) {\n            if (smallest * 2 > i) {\n                secondSmallest\
    \ = smallest;\n                smallest = i;\n                foundSmallest =\
    \ true;\n            }\n            if (smallest * 2 < i) {\n                secondSmallest\
    \ = i;\n                foundSecondSmallest = true;\n            }\n        }\n\
    \        if (foundSmallest) {\n            return secondSmallest;\n        }\n\
    \        if (foundSecondSmallest) {\n            return secondSmallest;\n    \
    \    }\n        return null;", "        if (lst.Count == 0) return null;\n   \
    \     long smallest = lst[0];\n        long secondSmallest = lst[1];\n       \
    \ for (int i = 2; i < lst.Count; i++) {\n            if (lst[i] < smallest) {\n\
    \                secondSmallest = smallest;\n                smallest = lst[i];\n\
    \            } else if (lst[i] < secondSmallest) {\n                secondSmallest\
    \ = lst[i];\n            }\n        }\n        return secondSmallest;", "    \
    \    long smallest = lst.Min();\n        long secondSmallest = lst.Min();\n  \
    \      foreach (long i in lst) {\n            if (i < smallest) {\n          \
    \      secondSmallest = smallest;\n                smallest = i;\n           \
    \ }\n            else if (i == smallest) {\n                secondSmallest = i;\n\
    \            }\n        }\n        if (secondSmallest == lst.Min()) {\n      \
    \      return null;\n        }\n        return secondSmallest;", "        long\
    \ smallest = lst[0];\n        long secondSmallest = lst[0];\n        foreach (long\
    \ n in lst) {\n            if (n < smallest) {\n                secondSmallest\
    \ = smallest;\n                smallest = n;\n            } else if (n < secondSmallest)\
    \ {\n                secondSmallest = n;\n            }\n        }\n        return\
    \ secondSmallest;", "        if (lst.Count == 0) {\n            return null;\n\
    \        }\n        long smallest = lst[0];\n        long secondSmallest = lst[0];\n\
    \        for (int i = 1; i < lst.Count; i++) {\n            if (lst[i] < smallest)\
    \ {\n                secondSmallest = smallest;\n                smallest = lst[i];\n\
    \            } else if (lst[i] < secondSmallest) {\n                secondSmallest\
    \ = lst[i];\n            }\n        }\n        return secondSmallest;", "    \
    \    if (lst.Count == 0) return null;\n        long min = lst[0];\n        long\
    \ max = lst[0];\n        for (int i = 1; i < lst.Count; i++) {\n            if\
    \ (lst[i] < min) {\n                min = lst[i];\n            }\n           \
    \ if (lst[i] > max) {\n                max = lst[i];\n            }\n        }\n\
    \        if (min == max) return null;\n        return max;", "        if (lst.Count\
    \ == 0) {\n            return null;\n        }\n        long smallest = lst[0];\n\
    \        long secondSmallest = lst[1];\n        bool foundSmallest = false;\n\
    \        bool foundSecondSmallest = false;\n        for (int i = 2; i < lst.Count;\
    \ i++) {\n            if (lst[i] < smallest) {\n                secondSmallest\
    \ = smallest;\n                smallest = lst[i];\n                foundSmallest\
    \ = true;\n            } else if (lst[i] == smallest) {\n                foundSmallest\
    \ = true;\n            }\n            if (lst[i] < secondSmallest) {\n       \
    \         secondSmallest = lst[i];\n                foundSecondSmallest = true;\n\
    \            }\n        }\n        if (foundSmallest) {\n            return secondSmallest;\n\
    \        }\n        if (foundSecondSmallest) {\n            return secondSmallest;\n\
    \        }\n        return null;", "        if (lst.Count == 0)\n            return\
    \ null;\n        long smallest = lst[0];\n        long secondSmallest = lst[1];\n\
    \        for (int i = 2; i < lst.Count; i++) {\n            if (lst[i] < smallest)\
    \ {\n                secondSmallest = smallest;\n                smallest = lst[i];\n\
    \            } else if (lst[i] > secondSmallest) {\n                secondSmallest\
    \ = lst[i];\n            }\n        }\n        return secondSmallest;", "    \
    \    if (lst.Count == 0) {\n            return null;\n        }\n        long\
    \ smallest = lst[0];\n        long secondSmallest = lst[0];\n        for (int\
    \ i = 1; i < lst.Count; i++) {\n            if (lst[i] < smallest) {\n       \
    \         secondSmallest = smallest;\n                smallest = lst[i];\n   \
    \         } else if (lst[i] < secondSmallest) {\n                secondSmallest\
    \ = lst[i];\n            }\n        }\n        return secondSmallest;", "    \
    \    if (lst.Count == 0) return null;\n        long smallest = lst[0];\n     \
    \   long secondSmallest = lst[1];\n        for (int i = 2; i < lst.Count; i++)\
    \ {\n            if (lst[i] < smallest) {\n                secondSmallest = smallest;\n\
    \                smallest = lst[i];\n            } else if (lst[i] < secondSmallest)\
    \ {\n                secondSmallest = lst[i];\n            }\n        }\n    \
    \    return secondSmallest;", "        long smallest = lst[0];\n        long secondSmallest\
    \ = lst[1];\n        foreach (long i in lst) {\n            if (i < smallest)\
    \ {\n                secondSmallest = smallest;\n                smallest = i;\n\
    \            } else if (i > secondSmallest) {\n                secondSmallest\
    \ = i;\n            }\n        }\n        return secondSmallest;", "        if\
    \ (lst.Count == 0) return null;\n        long smallest = lst[0];\n        long\
    \ secondSmallest = lst[1];\n        bool foundSmallest = false;\n        bool\
    \ foundSecondSmallest = false;\n        foreach (long i in lst) {\n          \
    \  if (i < smallest) {\n                secondSmallest = smallest;\n         \
    \       smallest = i;\n                foundSmallest = true;\n            } else\
    \ if (i == smallest) {\n                foundSmallest = true;\n            }\n\
    \            if (foundSmallest && foundSecondSmallest) {\n                break;\n\
    \            }\n        }\n        if (foundSmallest) {\n            return secondSmallest;\n\
    \        }\n        return null;", "        if (lst.Count == 0) return null;\n\
    \        long smallest = lst[0];\n        long secondSmallest = lst[1];\n    \
    \    long thirdSmallest = lst[2];\n        long fourthSmallest = lst[3];\n   \
    \     long fifthSmallest = lst[4];\n        long sixthSmallest = lst[5];\n   \
    \     long seventhSmallest = lst[6];\n        long eighthSmallest = lst[7];\n\
    \        long ninthSmallest = lst[8];\n        long tenthSmallest = lst[9];\n\
    \        long eleventhSmallest = lst[10];\n        long twelfthSmallest = lst[11];\n\
    \        long thirteenthSmallest = lst[12];\n        long fourteenthSmallest =\
    \ lst[13];\n        long fifteenthSmallest = lst[14];\n        long sixteenthSmallest\
    \ = lst[15];\n        long seventeenthSmallest = lst[16];\n        long eighteenthSmallest\
    \ = lst[17];\n        long nineteenthSmallest = lst[18];\n        long twentiethSmallest\
    \ = lst[19];\n        long twentyFirstSmallest = lst[20];\n        long twentySecondSmallest\
    \ = lst[21];\n        long twentyThirdSmallest = lst[22];\n        long twentyFourthSmallest\
    \ = lst[23];\n        long twentyFifthSmallest = lst[24];\n        long twentySixthSmallest\
    \ = lst[25];\n        long twentySeventhSmallest = lst[26];\n        long twentyEighthSmallest\
    \ = lst[27];\n        long twentyNinthSmallest = lst[28];\n        long twentyTenthSmallest\
    \ = lst[29];\n        long twentyEleventhSmallest = lst[30];\n        long twentyTwelfthSmallest\
    \ = lst[31];\n        long twentyThirteenthSmallest = lst[32];\n        long twentyFourteenthSmallest\
    \ = lst[33];\n        long twentyFifteenthSmallest = lst[34];\n        long twentySixteenthSmallest\
    \ = lst[35];\n        long twentySeventeenthSmallest = lst[36];", "        long\
    \ smallest = lst[0];\n        long secondSmallest = lst[1];\n        for (int\
    \ i = 2; i < lst.Count; i++) {\n            if (lst[i] < smallest) {\n       \
    \         secondSmallest = smallest;\n                smallest = lst[i];\n   \
    \         } else if (lst[i] < secondSmallest) {\n                secondSmallest\
    \ = lst[i];\n            }\n        }\n        return smallest;", "        if\
    \ (lst.Count == 0)\n            return null;\n        var smallest = lst[0];\n\
    \        var secondSmallest = lst[1];\n        for (var i = 2; i < lst.Count;\
    \ i++) {\n            if (lst[i] < smallest) {\n                secondSmallest\
    \ = smallest;\n                smallest = lst[i];\n            } else if (lst[i]\
    \ < secondSmallest) {\n                secondSmallest = lst[i];\n            }\n\
    \        }\n        return secondSmallest;", "        if (lst.Count == 0)\n  \
    \          return null;\n        long smallest = lst[0];\n        long secondSmallest\
    \ = lst[1];\n        for (int i = 2; i < lst.Count; i++) {\n            if (lst[i]\
    \ < smallest) {\n                secondSmallest = smallest;\n                smallest\
    \ = lst[i];\n            } else if (lst[i] < secondSmallest) {\n             \
    \   secondSmallest = lst[i];\n            }\n        }\n        return secondSmallest;",
  "        if (lst.Count == 0) return null;\n        var min = lst[0];\n        var\
    \ minIndex = 0;\n        for (var i = 1; i < lst.Count; i++) {\n            if\
    \ (lst[i] < min) {\n                min = lst[i];\n                minIndex =\
    \ i;\n            }\n        }\n        if (minIndex == lst.Count - 1) return\
    \ null;\n        return lst[minIndex + 1];", "        long smallest = lst[0];\n\
    \        long secondSmallest = lst[0];\n        foreach (long n in lst) {\n  \
    \          if (n < smallest) {\n                secondSmallest = smallest;\n \
    \               smallest = n;\n            } else if (n < secondSmallest) {\n\
    \                secondSmallest = n;\n            }\n        }\n        return\
    \ secondSmallest;", "        if (lst.Count == 0)\n            return null;\n \
    \       long smallest = lst[0];\n        long secondSmallest = lst[1];\n     \
    \   for (int i = 2; i < lst.Count; i++) {\n            if (lst[i] < smallest)\
    \ {\n                secondSmallest = smallest;\n                smallest = lst[i];\n\
    \            } else if (lst[i] < secondSmallest) {\n                secondSmallest\
    \ = lst[i];\n            }\n        }\n        return secondSmallest;"]
stop_tokens:
- "\n    }\n"
