name: HumanEval_87_get_row
language: cs
prompt: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\n\
  using System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass\
  \ Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n   \
  \ // which is similar to matrix, however, unlike matrices,\n    // each row may\
  \ contain a different number of columns.\n    // Given lst, and integer x, find\
  \ integers x in the list,\n    // and return list of tuples, [(x1, y1), (x2, y2)\
  \ ...] such that\n    // each tuple is a coordinate - (row, columns), starting with\
  \ 0.\n    // Sort coordinates initially by rows in ascending order.\n    // Also,\
  \ sort coordinates of the row by columns in descending order.\n    // Examples:\n\
  \    public static List<Tuple<long, long>> GetRow(List<List<long>> lst, long x)\
  \ {\n"
tests: "    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetRow((new\
  \ List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L,\
  \ (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new\
  \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new\
  \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})),\
  \ (1L)).Equals((new List<Tuple<long, long>>(new Tuple<long, long>[]{(Tuple<long,\
  \ long>)Tuple.Create(0L, 0L), (Tuple<long, long>)Tuple.Create(1L, 4L), (Tuple<long,\
  \ long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 5L), (Tuple<long,\
  \ long>)Tuple.Create(2L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new\
  \ List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
  \ (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,\
  \ (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new\
  \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new\
  \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}),\
  \ (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,\
  \ (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,\
  \ (long)3L, (long)4L, (long)5L, (long)6L})})), (2L)).Equals((new List<Tuple<long,\
  \ long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 1L), (Tuple<long,\
  \ long>)Tuple.Create(1L, 1L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,\
  \ long>)Tuple.Create(3L, 1L), (Tuple<long, long>)Tuple.Create(4L, 1L), (Tuple<long,\
  \ long>)Tuple.Create(5L, 1L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new\
  \ List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
  \ (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,\
  \ (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new\
  \ long[]{(long)1L, (long)1L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new\
  \ List<long>(new long[]{(long)1L, (long)2L, (long)1L, (long)4L, (long)5L, (long)6L}),\
  \ (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L,\
  \ (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,\
  \ (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,\
  \ (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})), (1L)).Equals((new List<Tuple<long,\
  \ long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 0L), (Tuple<long,\
  \ long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,\
  \ long>)Tuple.Create(2L, 0L), (Tuple<long, long>)Tuple.Create(3L, 2L), (Tuple<long,\
  \ long>)Tuple.Create(3L, 0L), (Tuple<long, long>)Tuple.Create(4L, 3L), (Tuple<long,\
  \ long>)Tuple.Create(4L, 0L), (Tuple<long, long>)Tuple.Create(5L, 4L), (Tuple<long,\
  \ long>)Tuple.Create(5L, 0L), (Tuple<long, long>)Tuple.Create(6L, 5L), (Tuple<long,\
  \ long>)Tuple.Create(6L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>()),\
  \ (1L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new\
  \ List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L})})),\
  \ (2L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new\
  \ List<List<long>>(new List<long>[]{(List<long>)new List<long>(), (List<long>)new\
  \ List<long>(new long[]{(long)1L}), (List<long>)new List<long>(new long[]{(long)1L,\
  \ (long)2L, (long)3L})})), (3L)).Equals((new List<Tuple<long, long>>(new Tuple<long,\
  \ long>[]{(Tuple<long, long>)Tuple.Create(2L, 2L)}))));\n    }\n\n}\n"
completions: ["        List<Tuple<long, long>> result = new List<Tuple<long, long>>();\n\
    \        foreach (List<long> row in lst) {\n            foreach (long y in row)\
    \ {\n                if (y == x) {\n                    result.Add(new Tuple<long,\
    \ long>(row.IndexOf(row), row.IndexOf(row)));\n                }\n           \
    \ }\n        }\n        return result.OrderBy(x => x.Item1).ThenByDescending(x\
    \ => x.Item2).ToList();", "        List<Tuple<long, long>> result = new List<Tuple<long,\
    \ long>>();\n        foreach (List<long> row in lst) {\n            foreach (long\
    \ val in row) {\n                if (val == x) {\n                    result.Add(new\
    \ Tuple<long, long>(row.IndexOf(val), row.IndexOf(val)));\n                }\n\
    \            }\n        }\n        return result.OrderBy(x => x.Item1).ThenByDescending(x\
    \ => x.Item2).ToList();", "        List<Tuple<long, long>> result = new List<Tuple<long,\
    \ long>>();\n        foreach (List<long> row in lst) {\n            foreach (long\
    \ y in row) {\n                if (y == x) {\n                    result.Add(new\
    \ Tuple<long, long>(row.IndexOf(y), row.IndexOf(x)));\n                }\n   \
    \         }\n        }\n        return result.OrderBy(x => x.Item1).ThenByDescending(x\
    \ => x.Item2).ToList();", "        List<Tuple<long, long>> result = new List<Tuple<long,\
    \ long>>();\n        foreach (List<long> row in lst) {\n            foreach (long\
    \ col in row) {\n                if (col == x) {\n                    result.Add(new\
    \ Tuple<long, long>(row.IndexOf(row), row.IndexOf(row)));\n                }\n\
    \            }\n        }\n        return result.OrderBy(x => x.Item1).ThenByDescending(x\
    \ => x.Item2).ToList();", "        List<Tuple<long, long>> result = new List<Tuple<long,\
    \ long>>();\n        foreach (var row in lst) {\n            foreach (var col\
    \ in row.OrderByDescending(c => c)) {\n                if (col == x) {\n     \
    \               result.Add(new Tuple<long, long>(row.IndexOf(x), col.IndexOf(x)));\n\
    \                }\n            }\n        }\n        return result;", "     \
    \   List<Tuple<long, long>> result = new List<Tuple<long, long>>();\n        foreach\
    \ (List<long> row in lst) {\n            foreach (long num in row) {\n       \
    \         if (num == x) {\n                    result.Add(new Tuple<long, long>(row.IndexOf(num),\
    \ row.IndexOf(num)));\n                }\n            }\n        }\n        return\
    \ result.OrderBy(x => x.Item1).ThenByDescending(x => x.Item2).ToList();", "  \
    \      List<Tuple<long, long>> result = new List<Tuple<long, long>>();\n     \
    \   foreach (var row in lst) {\n            foreach (var item in row) {\n    \
    \            if (item == x) {\n                    result.Add(new Tuple<long,\
    \ long>(row.IndexOf(row), row.IndexOf(row)));\n                }\n           \
    \ }\n        }\n        return result.OrderBy(x => x.Item1).ThenByDescending(x\
    \ => x.Item2).ToList();", "        List<Tuple<long, long>> result = new List<Tuple<long,\
    \ long>>();\n        foreach (List<long> row in lst) {\n            foreach (long\
    \ n in row) {\n                if (n == x) {\n                    result.Add(new\
    \ Tuple<long, long>(row.IndexOf(row), row.IndexOf(row)));\n                }\n\
    \            }\n        }\n        return result.OrderBy(x => x.Item1).ThenByDescending(x\
    \ => x.Item2).ToList();", "        List<Tuple<long, long>> result = new List<Tuple<long,\
    \ long>>();\n        foreach (List<long> row in lst) {\n            foreach (long\
    \ num in row) {\n                if (num == x) {\n                    result.Add(new\
    \ Tuple<long, long>(row.IndexOf(num), row.IndexOf(x)));\n                }\n \
    \           }\n        }\n        return result.OrderBy(x => x.Item1).ThenByDescending(x\
    \ => x.Item2).ToList();", "        List<Tuple<long, long>> result = new List<Tuple<long,\
    \ long>>();\n        foreach (var row in lst) {\n            foreach (var item\
    \ in row) {\n                if (item == x) {\n                    result.Add(new\
    \ Tuple<long, long>(row.IndexOf(item), row.IndexOf(x)));\n                }\n\
    \            }\n        }\n        return result.OrderBy(x => x.Item1).ThenByDescending(x\
    \ => x.Item2).ToList();", "        List<Tuple<long, long>> result = new List<Tuple<long,\
    \ long>>();\n        foreach (var row in lst) {\n            foreach (var item\
    \ in row) {\n                if (item == x) {\n                    result.Add(new\
    \ Tuple<long, long>(row.IndexOf(row), row.IndexOf(row)));\n                  \
    \  break;\n                }\n            }\n        }\n        return result.OrderBy(x\
    \ => x.Item1).ThenByDescending(x => x.Item2).ToList();", "        List<Tuple<long,\
    \ long>> result = new List<Tuple<long, long>>();\n        foreach (var row in\
    \ lst) {\n            foreach (var col in row.OrderByDescending(c => c)) {\n \
    \               if (col == x) {\n                    result.Add(new Tuple<long,\
    \ long>(row.IndexOf(x), col.IndexOf(x)));\n                }\n            }\n\
    \        }\n        return result.OrderBy(r => r.Item1).ThenBy(r => r.Item2).ToList();",
  "        List<Tuple<long, long>> result = new List<Tuple<long, long>>();\n     \
    \   foreach (var row in lst) {\n            foreach (var col in row.OrderByDescending(x\
    \ => x)) {\n                if (col == x) {\n                    result.Add(new\
    \ Tuple<long, long>(row.IndexOf(row), col.IndexOf(col)));\n                }\n\
    \            }\n        }\n        return result.OrderBy(x => x.Item1).ThenByDescending(x\
    \ => x.Item2).ToList();", "        List<Tuple<long, long>> result = new List<Tuple<long,\
    \ long>>();\n        foreach (var row in lst) {\n            foreach (var col\
    \ in row.OrderByDescending(c => c)) {\n                if (col == x) {\n     \
    \               result.Add(new Tuple<long, long>(row.IndexOf(x), col.IndexOf(x)));\n\
    \                }\n            }\n        }\n        return result.OrderBy(r\
    \ => r.Item1).ThenBy(r => r.Item2).ToList();", "        List<Tuple<long, long>>\
    \ result = new List<Tuple<long, long>>();\n        foreach (var row in lst) {\n\
    \            foreach (var item in row) {\n                if (item == x) {\n \
    \                   result.Add(new Tuple<long, long>(row, row.IndexOf(item)+1));\n\
    \                }\n            }\n        }\n        return result.OrderBy(x\
    \ => x.Item1).ThenByDescending(x => x.Item2).ToList();", "        List<Tuple<long,\
    \ long>> result = new List<Tuple<long, long>>();\n        foreach (List<long>\
    \ row in lst) {\n            foreach (long y in row) {\n                if (y\
    \ == x) {\n                    result.Add(new Tuple<long, long>(row.IndexOf(y),\
    \ row.IndexOf(x)));\n                }\n            }\n        }\n        return\
    \ result.OrderBy(x => x.Item1).ThenByDescending(x => x.Item2).ToList();", "  \
    \      List<Tuple<long, long>> result = new List<Tuple<long, long>>();\n     \
    \   foreach (List<long> row in lst) {\n            foreach (long n in row) {\n\
    \                if (n == x) {\n                    result.Add(new Tuple<long,\
    \ long>(row.IndexOf(row), row.IndexOf(row)));\n                }\n           \
    \ }\n        }\n        return result.OrderBy(x => x.Item1).ThenByDescending(x\
    \ => x.Item2).ToList();", "        var result = new List<Tuple<long, long>>();\n\
    \        foreach (var row in lst) {\n            var rowTuple = new Tuple<long,\
    \ long>(row.Count, row.Count);\n            foreach (var item in row) {\n    \
    \            if (item == x) {\n                    result.Add(rowTuple);\n   \
    \                 break;\n                }\n            }\n        }\n      \
    \  return result;", "        List<Tuple<long, long>> result = new List<Tuple<long,\
    \ long>>();\n        foreach (List<long> row in lst) {\n            foreach (long\
    \ num in row) {\n                if (num == x) {\n                    result.Add(new\
    \ Tuple<long, long>(row.IndexOf(num), row.IndexOf(x)));\n                }\n \
    \           }\n        }\n        return result.OrderBy(x => x.Item1).ThenByDescending(x\
    \ => x.Item2).ToList();", "        var result = new List<Tuple<long, long>>();\n\
    \        foreach (var row in lst) {\n            var found = false;\n        \
    \    foreach (var item in row) {\n                if (item == x) {\n         \
    \           found = true;\n                    break;\n                }\n   \
    \         }\n            if (!found) {\n                continue;\n          \
    \  }\n            result.Add(new Tuple<long, long>(row.IndexOf(x), row.Last()));\n\
    \        }\n        return result.OrderBy(x => x.Item1).ThenByDescending(x =>\
    \ x.Item2).ToList();", "        List<Tuple<long, long>> result = new List<Tuple<long,\
    \ long>>();\n        foreach (List<long> row in lst) {\n            foreach (long\
    \ num in row) {\n                if (num == x) {\n                    result.Add(new\
    \ Tuple<long, long>(row.IndexOf(num), row.IndexOf(x)));\n                }\n \
    \           }\n        }\n        return result.OrderBy(x => x.Item1).ThenByDescending(x\
    \ => x.Item2).ToList();", "        List<Tuple<long, long>> result = new List<Tuple<long,\
    \ long>>();\n        foreach (var row in lst) {\n            foreach (var item\
    \ in row) {\n                if (item == x) {\n                    result.Add(new\
    \ Tuple<long, long>(row.IndexOf(item), row.IndexOf(x)));\n                }\n\
    \            }\n        }\n        return result.OrderBy(x => x.Item1).ThenByDescending(x\
    \ => x.Item2).ToList();", "        List<Tuple<long, long>> result = new List<Tuple<long,\
    \ long>>();\n        foreach (var row in lst) {\n            var y = row.FindIndex(i\
    \ => i == x);\n            if (y != -1) {\n                result.Add(new Tuple<long,\
    \ long>(y, row.FindIndex(i => i == x - row[y])));\n            }\n        }\n\
    \        return result.OrderBy(i => i.Item1).ThenByDescending(i => i.Item2).ToList();",
  "        List<Tuple<long, long>> result = new List<Tuple<long, long>>();\n     \
    \   foreach (List<long> row in lst) {\n            foreach (long n in row) {\n\
    \                if (n == x) {\n                    result.Add(new Tuple<long,\
    \ long>(row.IndexOf(row), row.IndexOf(row)));\n                }\n           \
    \ }\n        }\n        return result.OrderBy(x => x.Item1).ThenByDescending(x\
    \ => x.Item2).ToList();", "        List<Tuple<long, long>> result = new List<Tuple<long,\
    \ long>>();\n        foreach (List<long> row in lst) {\n            foreach (long\
    \ col in row) {\n                if (col == x) {\n                    result.Add(new\
    \ Tuple<long, long>(row.IndexOf(row), row.IndexOf(row)));\n                }\n\
    \            }\n        }\n        return result.OrderBy(x => x.Item1).ThenByDescending(x\
    \ => x.Item2).ToList();", "        List<Tuple<long, long>> result = new List<Tuple<long,\
    \ long>>();\n        foreach (List<long> row in lst) {\n            long y = row.FindIndex(x\
    \ => x == 0);\n            result.Add(new Tuple<long, long>(row.IndexOf(x), y));\n\
    \        }\n        return result.OrderBy(x => x.Item1).ThenByDescending(x =>\
    \ x.Item2).ToList();", "        List<Tuple<long, long>> result = new List<Tuple<long,\
    \ long>>();\n        foreach (List<long> row in lst) {\n            foreach (long\
    \ n in row) {\n                if (n == x) {\n                    result.Add(new\
    \ Tuple<long, long>(row.IndexOf(row), row.IndexOf(row)));\n                }\n\
    \            }\n        }\n        return result.OrderBy(x => x.Item1).ThenByDescending(x\
    \ => x.Item2).ToList();", "        List<Tuple<long, long>> result = new List<Tuple<long,\
    \ long>>();\n        foreach (List<long> row in lst) {\n            foreach (long\
    \ val in row) {\n                if (val == x) {\n                    result.Add(new\
    \ Tuple<long, long>(row.IndexOf(val), row.LastIndexOf(val)));\n              \
    \  }\n            }\n        }\n        return result.OrderBy(x => x.Item1).ThenByDescending(x\
    \ => x.Item2).ToList();", "        List<Tuple<long, long>> result = new List<Tuple<long,\
    \ long>>();\n        foreach (List<long> row in lst) {\n            foreach (long\
    \ col in row) {\n                if (col == x) {\n                    result.Add(new\
    \ Tuple<long, long>(row.IndexOf(row), row.IndexOf(row)));\n                }\n\
    \            }\n        }\n        return result.OrderBy(x => x.Item1).ThenByDescending(x\
    \ => x.Item2).ToList();", "        List<Tuple<long, long>> result = new List<Tuple<long,\
    \ long>>();\n        foreach (List<long> row in lst) {\n            foreach (long\
    \ col in row) {\n                if (col == x) {\n                    result.Add(new\
    \ Tuple<long, long>(row.IndexOf(row), row.IndexOf(row)));\n                }\n\
    \            }\n        }\n        return result.OrderBy(x => x.Item1).ThenByDescending(x\
    \ => x.Item2).ToList();", "        List<Tuple<long, long>> result = new List<Tuple<long,\
    \ long>>();\n        foreach (List<long> row in lst) {\n            foreach (long\
    \ n in row) {\n                if (n == x) {\n                    result.Add(new\
    \ Tuple<long, long>(row.IndexOf(n), row.IndexOf(n) + 1));\n                }\n\
    \            }\n        }\n        return result.OrderBy(x => x.Item1).ThenByDescending(x\
    \ => x.Item2).ToList();", "        List<Tuple<long, long>> result = new List<Tuple<long,\
    \ long>>();\n        foreach (var row in lst) {\n            foreach (var item\
    \ in row) {\n                if (item == x) {\n                    result.Add(new\
    \ Tuple<long, long>(row.IndexOf(item), row.IndexOf(x)));\n                }\n\
    \            }\n        }\n        return result.OrderBy(x => x.Item1).ThenByDescending(x\
    \ => x.Item2).ToList();", "        List<Tuple<long, long>> result = new List<Tuple<long,\
    \ long>>();\n        foreach (var row in lst) {\n            foreach (var item\
    \ in row) {\n                if (item == x) {\n                    result.Add(new\
    \ Tuple<long, long>(row, row.IndexOf(item)+1));\n                }\n         \
    \   }\n        }\n        return result.OrderBy(x => x.Item1).ThenByDescending(x\
    \ => x.Item2).ToList();", "        List<Tuple<long, long>> result = new List<Tuple<long,\
    \ long>>();\n        foreach (var row in lst) {\n            foreach (var item\
    \ in row) {\n                if (item == x) {\n                    result.Add(new\
    \ Tuple<long, long>(row.IndexOf(row), row.IndexOf(row)));\n                }\n\
    \            }\n        }\n        return result.OrderBy(x => x.Item1).ThenByDescending(x\
    \ => x.Item2).ToList();", "        List<Tuple<long, long>> result = new List<Tuple<long,\
    \ long>>();\n        foreach (var row in lst) {\n            foreach (var col\
    \ in row.OrderByDescending(c => c)) {\n                if (col == x) {\n     \
    \               result.Add(new Tuple<long, long>(row.IndexOf(x), col.IndexOf(x)));\n\
    \                }\n            }\n        }\n        return result;", "     \
    \   List<Tuple<long, long>> result = new List<Tuple<long, long>>();\n        foreach\
    \ (List<long> row in lst) {\n            foreach (long y in row) {\n         \
    \       if (y == x) {\n                    result.Add(new Tuple<long, long>(0,\
    \ row.IndexOf(y)+1));\n                }\n            }\n        }\n        return\
    \ result.OrderBy(x => x.Item1).ThenByDescending(x => x.Item2).ToList();", "  \
    \      List<Tuple<long, long>> result = new List<Tuple<long, long>>();\n     \
    \   foreach (List<long> row in lst) {\n            foreach (long y in row) {\n\
    \                if (y == x) {\n                    result.Add(new Tuple<long,\
    \ long>(row.IndexOf(row), row.IndexOf(row)));\n                }\n           \
    \ }\n        }\n        return result.OrderBy(t => t.Item1).ThenByDescending(t\
    \ => t.Item2).ToList();", "        List<Tuple<long, long>> result = new List<Tuple<long,\
    \ long>>();\n        foreach (List<long> row in lst) {\n            long y = row.FindIndex(x\
    \ => x == x);\n            if (y != -1) {\n                result.Add(new Tuple<long,\
    \ long>(y, row.IndexOf(row.FindIndex(y => y == y))));\n            }\n       \
    \ }\n        return result.OrderBy(x => x.Item1).ThenByDescending(x => x.Item2).ToList();",
  "        List<Tuple<long, long>> result = new List<Tuple<long, long>>();\n     \
    \   foreach (List<long> row in lst) {\n            foreach (long n in row) {\n\
    \                if (n == x) {\n                    result.Add(new Tuple<long,\
    \ long>(row.IndexOf(n), row.IndexOf(n) + 1));\n                }\n           \
    \ }\n        }\n        return result.OrderBy(x => x.Item1).ThenByDescending(x\
    \ => x.Item2).ToList();", "        List<Tuple<long, long>> result = new List<Tuple<long,\
    \ long>>();\n        foreach (var row in lst) {\n            foreach (var item\
    \ in row) {\n                if (item == x) {\n                    result.Add(new\
    \ Tuple<long, long>(row, row.IndexOf(item)+1));\n                }\n         \
    \   }\n        }\n        return result.OrderBy(x => x.Item1).ThenByDescending(x\
    \ => x.Item2).ToList();", "        List<Tuple<long, long>> result = new List<Tuple<long,\
    \ long>>();\n        foreach (var row in lst) {\n            foreach (var item\
    \ in row) {\n                if (item == x) {\n                    result.Add(new\
    \ Tuple<long, long>(row.IndexOf(row), row.IndexOf(row)));\n                }\n\
    \            }\n        }\n        return result.OrderBy(x => x.Item1).ThenByDescending(x\
    \ => x.Item2).ToList();", "        List<Tuple<long, long>> result = new List<Tuple<long,\
    \ long>>();\n        foreach (List<long> row in lst) {\n            foreach (long\
    \ num in row) {\n                if (num == x) {\n                    result.Add(new\
    \ Tuple<long, long>(row.IndexOf(num), row.LastIndexOf(num)));\n              \
    \  }\n            }\n        }\n        return result.OrderBy(x => x.Item1).ThenByDescending(x\
    \ => x.Item2).ToList();", "        List<Tuple<long, long>> result = new List<Tuple<long,\
    \ long>>();\n        foreach (List<long> row in lst) {\n            foreach (long\
    \ num in row) {\n                if (num == x) {\n                    result.Add(new\
    \ Tuple<long, long>(row.IndexOf(num), row.IndexOf(num)));\n                }\n\
    \            }\n        }\n        return result.OrderBy(x => x.Item1).ThenByDescending(x\
    \ => x.Item2).ToList();", "        List<Tuple<long, long>> result = new List<Tuple<long,\
    \ long>>();\n        foreach (var row in lst) {\n            foreach (var item\
    \ in row) {\n                if (item == x) {\n                    result.Add(new\
    \ Tuple<long, long>(row.IndexOf(item), row.IndexOf(x)));\n                }\n\
    \            }\n        }\n        return result.OrderBy(x => x.Item1).ThenByDescending(x\
    \ => x.Item2).ToList();", "        List<Tuple<long, long>> result = new List<Tuple<long,\
    \ long>>();\n        foreach (var row in lst) {\n            foreach (var col\
    \ in row.OrderByDescending(x => x)) {\n                if (col == x) {\n     \
    \               result.Add(new Tuple<long, long>(row.IndexOf(x), col.IndexOf(x)));\n\
    \                }\n            }\n        }\n        return result.OrderBy(x\
    \ => x.Item1).ThenByDescending(x => x.Item2).ToList();", "        List<Tuple<long,\
    \ long>> result = new List<Tuple<long, long>>();\n        foreach (List<long>\
    \ row in lst) {\n            foreach (long n in row) {\n                if (n\
    \ == x) {\n                    result.Add(new Tuple<long, long>(row.IndexOf(n),\
    \ row.IndexOf(x)));\n                }\n            }\n        }\n        return\
    \ result.OrderBy(x => x.Item1).ThenByDescending(x => x.Item2).ToList();", "  \
    \      List<Tuple<long, long>> result = new List<Tuple<long, long>>();\n     \
    \   foreach (var row in lst) {\n            foreach (var item in row) {\n    \
    \            if (item == x) {\n                    result.Add(new Tuple<long,\
    \ long>(row.IndexOf(row), row.IndexOf(row)));\n                }\n           \
    \ }\n        }\n        return result.OrderBy(x => x.Item1).ThenByDescending(x\
    \ => x.Item2).ToList();", "        List<Tuple<long, long>> result = new List<Tuple<long,\
    \ long>>();\n        foreach (List<long> row in lst) {\n            foreach (long\
    \ col in row) {\n                if (col == x) {\n                    result.Add(new\
    \ Tuple<long, long>(row.IndexOf(x), row.IndexOf(col)));\n                }\n \
    \           }\n        }\n        return result.OrderBy(x => x.Item1).ThenByDescending(x\
    \ => x.Item2).ToList();", "        List<Tuple<long, long>> result = new List<Tuple<long,\
    \ long>>();\n        foreach (var row in lst) {\n            foreach (var item\
    \ in row) {\n                if (item == x) {\n                    result.Add(new\
    \ Tuple<long, long>(row.IndexOf(row), row.IndexOf(row)));\n                }\n\
    \            }\n        }\n        return result.OrderBy(x => x.Item1).ThenByDescending(x\
    \ => x.Item2).ToList();", "        var result = new List<Tuple<long, long>>();\n\
    \        foreach (var row in lst) {\n            var found = false;\n        \
    \    foreach (var item in row) {\n                if (item == x) {\n         \
    \           found = true;\n                    break;\n                }\n   \
    \         }\n            if (!found) {\n                continue;\n          \
    \  }\n            var rowTuple = new Tuple<long, long>(row.IndexOf(x), row.LastIndexOf(x));\n\
    \            result.Add(rowTuple);\n        }\n        return result.OrderBy(x\
    \ => x.Item1).ThenByDescending(x => x.Item2).ToList();", "        List<Tuple<long,\
    \ long>> result = new List<Tuple<long, long>>();\n        foreach (var row in\
    \ lst) {\n            foreach (var col in row.OrderByDescending(y => y).TakeWhile(y\
    \ => y != x)) {\n                result.Add(new Tuple<long, long>(row, col));\n\
    \            }\n        }\n        return result.OrderBy(x => x.Item1).ThenByDescending(x\
    \ => x.Item2).ToList();", "        List<Tuple<long, long>> result = new List<Tuple<long,\
    \ long>>();\n        foreach (var row in lst) {\n            foreach (var item\
    \ in row) {\n                if (item == x) {\n                    result.Add(new\
    \ Tuple<long, long>(row.IndexOf(row), row.IndexOf(row) - 1));\n              \
    \  }\n            }\n        }\n        return result.OrderBy(x => x.Item1).ThenByDescending(x\
    \ => x.Item2).ToList();", "        List<Tuple<long, long>> result = new List<Tuple<long,\
    \ long>>();\n        foreach (List<long> row in lst) {\n            foreach (long\
    \ num in row) {\n                if (num == x) {\n                    result.Add(new\
    \ Tuple<long, long>(row.IndexOf(num), row.IndexOf(num)));\n                }\n\
    \            }\n        }\n        return result.OrderBy(x => x.Item1).ThenByDescending(x\
    \ => x.Item2).ToList();", "        List<Tuple<long, long>> result = new List<Tuple<long,\
    \ long>>();\n        foreach (var row in lst) {\n            foreach (var item\
    \ in row) {\n                if (item == x) {\n                    result.Add(new\
    \ Tuple<long, long>(row.IndexOf(item), row.IndexOf(x)));\n                }\n\
    \            }\n        }\n        return result.OrderBy(x => x.Item1).ThenByDescending(x\
    \ => x.Item2).ToList();", "        List<Tuple<long, long>> result = new List<Tuple<long,\
    \ long>>();\n        foreach (List<long> row in lst) {\n            foreach (long\
    \ val in row) {\n                if (val == x) {\n                    result.Add(new\
    \ Tuple<long, long>(row.IndexOf(val), row.LastIndexOf(val)));\n              \
    \  }\n            }\n        }\n        return result.OrderBy(x => x.Item1).ThenByDescending(x\
    \ => x.Item2).ToList();", "        var result = new List<Tuple<long, long>>();\n\
    \        foreach (var row in lst) {\n            var found = false;\n        \
    \    foreach (var item in row) {\n                if (item == x) {\n         \
    \           result.Add(new Tuple<long, long>(row.IndexOf(item), row.IndexOf(x)));\n\
    \                    found = true;\n                    break;\n             \
    \   }\n            }\n            if (!found) {\n                result.Add(new\
    \ Tuple<long, long>(0, row.IndexOf(x)));\n            }\n        }\n        return\
    \ result.OrderBy(x => x.Item1).ThenByDescending(x => x.Item2).ToList();", "  \
    \      List<Tuple<long, long>> result = new List<Tuple<long, long>>();\n     \
    \   foreach (var row in lst) {\n            foreach (var item in row) {\n    \
    \            if (item == x) {\n                    result.Add(new Tuple<long,\
    \ long>(row.IndexOf(item), row.LastIndexOf(item)));\n                }\n     \
    \       }\n        }\n        return result.OrderBy(x => x.Item1).ThenByDescending(x\
    \ => x.Item2).ToList();", "        List<Tuple<long, long>> result = new List<Tuple<long,\
    \ long>>();\n        foreach (List<long> row in lst) {\n            foreach (long\
    \ col in row) {\n                if (col == x) {\n                    result.Add(new\
    \ Tuple<long, long>(row.IndexOf(row), row.IndexOf(row)));\n                }\n\
    \            }\n        }\n        return result.OrderBy(x => x.Item1).ThenByDescending(x\
    \ => x.Item2).ToList();", "        List<Tuple<long, long>> result = new List<Tuple<long,\
    \ long>>();\n        foreach (List<long> row in lst) {\n            foreach (long\
    \ col in row) {\n                if (col == x) {\n                    result.Add(new\
    \ Tuple<long, long>(row.IndexOf(row), row.IndexOf(row)));\n                }\n\
    \            }\n        }\n        return result.OrderBy(x => x.Item1).ThenByDescending(x\
    \ => x.Item2).ToList();", "        List<Tuple<long, long>> result = new List<Tuple<long,\
    \ long>>();\n        foreach (List<long> row in lst) {\n            long y = row.FindIndex(x\
    \ => x == x);\n            result.Add(new Tuple<long, long>(row.IndexOf(x), y));\n\
    \        }\n        return result.OrderBy(x => x.Item1).ThenByDescending(x =>\
    \ x.Item2).ToList();", "        List<Tuple<long, long>> result = new List<Tuple<long,\
    \ long>>();\n        foreach (var row in lst) {\n            foreach (var item\
    \ in row) {\n                if (item == x) {\n                    result.Add(new\
    \ Tuple<long, long>(row.IndexOf(item), row.IndexOf(x)));\n                }\n\
    \            }\n        }\n        return result.OrderBy(x => x.Item1).ThenByDescending(x\
    \ => x.Item2).ToList();", "        List<Tuple<long, long>> result = new List<Tuple<long,\
    \ long>>();\n        foreach (var row in lst) {\n            foreach (var item\
    \ in row) {\n                if (item == x) {\n                    result.Add(new\
    \ Tuple<long, long>(row.IndexOf(item), row.IndexOf(x)));\n                }\n\
    \            }\n        }\n        return result.OrderBy(x => x.Item1).ThenByDescending(x\
    \ => x.Item2).ToList();", "        List<Tuple<long, long>> result = new List<Tuple<long,\
    \ long>>();\n        foreach (List<long> row in lst) {\n            long y = row.FindIndex(x\
    \ => x == 0);\n            result.Add(new Tuple<long, long>(y, row.FindIndex(x\
    \ => x == x)));\n        }\n        return result.OrderBy(x => x.Item1).ThenByDescending(x\
    \ => x.Item2).ToList();", "        List<Tuple<long, long>> result = new List<Tuple<long,\
    \ long>>();\n        foreach (List<long> row in lst) {\n            foreach (long\
    \ y in row) {\n                if (y == x) {\n                    result.Add(new\
    \ Tuple<long, long>(row.IndexOf(row), row.IndexOf(row)));\n                }\n\
    \            }\n        }\n        return result.OrderBy(x => x.Item1).ThenByDescending(x\
    \ => x.Item2).ToList();", "        List<Tuple<long, long>> result = new List<Tuple<long,\
    \ long>>();\n        foreach (var row in lst) {\n            foreach (var col\
    \ in row.OrderByDescending(y => y).ThenByDescending(y => y)) {\n             \
    \   if (col == x) {\n                    result.Add(new Tuple<long, long>(row.IndexOf(x),\
    \ col.IndexOf(x)));\n                }\n            }\n        }\n        return\
    \ result;", "        List<Tuple<long, long>> result = new List<Tuple<long, long>>();\n\
    \        foreach (List<long> row in lst) {\n            foreach (long n in row)\
    \ {\n                if (n == x) {\n                    result.Add(new Tuple<long,\
    \ long>(row.IndexOf(n), row.IndexOf(n) + 1));\n                }\n           \
    \ }\n        }\n        return result.OrderBy(x => x.Item1).ThenByDescending(x\
    \ => x.Item2).ToList();", "        List<Tuple<long, long>> result = new List<Tuple<long,\
    \ long>>();\n        foreach (List<long> row in lst) {\n            foreach (long\
    \ y in row) {\n                if (y == x) {\n                    result.Add(new\
    \ Tuple<long, long>(row.IndexOf(y), row.IndexOf(x)));\n                }\n   \
    \         }\n        }\n        return result.OrderBy(t => t.Item1).ThenByDescending(t\
    \ => t.Item2).ToList();", "        List<Tuple<long, long>> result = new List<Tuple<long,\
    \ long>>();\n        foreach (List<long> row in lst) {\n            foreach (long\
    \ n in row) {\n                if (n == x) {\n                    result.Add(new\
    \ Tuple<long, long>(row.IndexOf(n), row.IndexOf(n) + 1));\n                }\n\
    \            }\n        }\n        return result.OrderBy(x => x.Item1).ThenByDescending(x\
    \ => x.Item2).ToList();", "        List<Tuple<long, long>> result = new List<Tuple<long,\
    \ long>>();\n        foreach (List<long> row in lst) {\n            foreach (long\
    \ y in row) {\n                if (y == x) {\n                    result.Add(new\
    \ Tuple<long, long>(row.IndexOf(y), row.IndexOf(x)));\n                }\n   \
    \         }\n        }\n        return result.OrderBy(x => x.Item1).ThenByDescending(x\
    \ => x.Item2).ToList();", "        List<Tuple<long, long>> result = new List<Tuple<long,\
    \ long>>();\n        foreach (var row in lst) {\n            foreach (var col\
    \ in row.OrderByDescending(c => c)) {\n                if (col == x) {\n     \
    \               result.Add(new Tuple<long, long>(row.IndexOf(row), col.IndexOf(col)));\n\
    \                }\n            }\n        }\n        return result;", "     \
    \   List<Tuple<long, long>> result = new List<Tuple<long, long>>();\n        foreach\
    \ (List<long> row in lst) {\n            foreach (long val in row) {\n       \
    \         if (val == x) {\n                    result.Add(new Tuple<long, long>(row.IndexOf(x),\
    \ row.Last()));\n                }\n            }\n        }\n        return result.OrderBy(x\
    \ => x.Item1).ThenByDescending(x => x.Item2).ToList();", "        List<Tuple<long,\
    \ long>> result = new List<Tuple<long, long>>();\n        foreach (List<long>\
    \ row in lst) {\n            long rowSum = 0;\n            foreach (long n in\
    \ row) {\n                rowSum += n;\n            }\n            if (rowSum\
    \ == x) {\n                result.Add(new Tuple<long, long>(row.Count - 1, row.Count\
    \ - 1));\n            }\n        }\n        return result.OrderBy(x => x.Item1).ThenByDescending(x\
    \ => x.Item2).ToList();", "        List<Tuple<long, long>> result = new List<Tuple<long,\
    \ long>>();\n        foreach (List<long> row in lst) {\n            foreach (long\
    \ n in row) {\n                if (n == x) {\n                    result.Add(new\
    \ Tuple<long, long>(row.IndexOf(n), row.IndexOf(n) + 1));\n                }\n\
    \            }\n        }\n        return result.OrderBy(t => t.Item1).ThenByDescending(t\
    \ => t.Item2).ToList();", "        List<Tuple<long, long>> result = new List<Tuple<long,\
    \ long>>();\n        foreach (List<long> row in lst) {\n            foreach (long\
    \ num in row) {\n                if (num == x) {\n                    result.Add(new\
    \ Tuple<long, long>(row.IndexOf(num), row.IndexOf(x)));\n                }\n \
    \           }\n        }\n        return result.OrderBy(x => x.Item1).ThenByDescending(x\
    \ => x.Item2).ToList();", "        List<Tuple<long, long>> result = new List<Tuple<long,\
    \ long>>();\n        foreach (List<long> row in lst) {\n            long y = 0;\n\
    \            foreach (long n in row) {\n                if (n == x) {\n      \
    \              y = 1;\n                    break;\n                }\n       \
    \     }\n            result.Add(new Tuple<long, long>(row.Count, y));\n      \
    \  }\n        return result.OrderBy(x => x.Item1).ThenByDescending(x => x.Item2).ToList();",
  "        List<Tuple<long, long>> result = new List<Tuple<long, long>>();\n     \
    \   foreach (List<long> row in lst) {\n            foreach (long col in row) {\n\
    \                if (col == x) {\n                    result.Add(new Tuple<long,\
    \ long>(row.IndexOf(col), row.IndexOf(col)));\n                }\n           \
    \ }\n        }\n        return result.OrderBy(x => x.Item1).ThenByDescending(x\
    \ => x.Item2).ToList();", "        List<Tuple<long, long>> result = new List<Tuple<long,\
    \ long>>();\n        foreach (List<long> row in lst) {\n            foreach (long\
    \ n in row) {\n                if (n == x) {\n                    result.Add(new\
    \ Tuple<long, long>(row.IndexOf(n), row.IndexOf(n) + 1));\n                }\n\
    \            }\n        }\n        return result.OrderBy(x => x.Item1).ThenByDescending(x\
    \ => x.Item2).ToList();", "        List<Tuple<long, long>> result = new List<Tuple<long,\
    \ long>>();\n        foreach (List<long> row in lst) {\n            foreach (long\
    \ num in row) {\n                if (num == x) {\n                    result.Add(new\
    \ Tuple<long, long>(row.IndexOf(num), row.IndexOf(x)));\n                }\n \
    \           }\n        }\n        return result.OrderBy(x => x.Item1).ThenByDescending(x\
    \ => x.Item2).ToList();", "        List<Tuple<long, long>> result = new List<Tuple<long,\
    \ long>>();\n        foreach (List<long> row in lst) {\n            foreach (long\
    \ n in row) {\n                if (n == x) {\n                    result.Add(new\
    \ Tuple<long, long>(row.IndexOf(n), row.IndexOf(n) + 1));\n                }\n\
    \            }\n        }\n        return result.OrderBy(x => x.Item1).ThenByDescending(x\
    \ => x.Item2).ToList();", "        List<Tuple<long, long>> result = new List<Tuple<long,\
    \ long>>();\n        foreach (var row in lst) {\n            foreach (var item\
    \ in row) {\n                if (item == x) {\n                    result.Add(new\
    \ Tuple<long, long>(row.IndexOf(row), row.IndexOf(row) - 1));\n              \
    \  }\n            }\n        }\n        return result.OrderBy(x => x.Item1).ThenByDescending(x\
    \ => x.Item2).ToList();", "        List<Tuple<long, long>> result = new List<Tuple<long,\
    \ long>>();\n        foreach (var row in lst) {\n            foreach (var item\
    \ in row) {\n                if (item == x) {\n                    result.Add(new\
    \ Tuple<long, long>(row.IndexOf(item), row.IndexOf(x)));\n                }\n\
    \            }\n        }\n        return result.OrderBy(x => x.Item1).ThenByDescending(x\
    \ => x.Item2).ToList();", "        var result = new List<Tuple<long, long>>();\n\
    \        var rows = lst.Select(row => row.Count).ToArray();\n        var cols\
    \ = lst.Select(row => row.First()).ToArray();\n        var rowIndex = 0;\n   \
    \     var colIndex = 0;\n        while (colIndex < cols.Length) {\n          \
    \  var rowCount = rows[rowIndex];\n            var colCount = cols[colIndex];\n\
    \            var rowStart = rowIndex * colCount;\n            var rowEnd = rowStart\
    \ + colCount;\n            var colStart = colIndex * rowCount;\n            var\
    \ colEnd = colStart + rowCount;\n            var rowRange = Enumerable.Range(rowStart,\
    \ rowEnd - rowStart);\n            var colRange = Enumerable.Range(colStart, colEnd\
    \ - colStart);\n            var rowTuples = rowRange.Select(i => Tuple.Create(i,\
    \ lst[i - rowStart]));\n            var colTuples = colRange.Select(i => Tuple.Create(i,\
    \ lst[i - colStart]));\n            var rowTuple = rowTuples.OrderByDescending(t\
    \ => t.Item1).ThenByDescending(t => t.Item2).FirstOrDefault();\n            var\
    \ colTuple = colTuples.OrderByDescending(t => t.Item1).ThenByDescending(t => t.Item2).FirstOrDefault();\n\
    \            if (rowTuple != null && colTuple != null) {\n                var\
    \ rowTupleIndex = rowTuple.Item1;\n                var colTupleIndex = colTuple.Item1;\n\
    \                var rowTupleValue = rowTuple.Item2;\n                var colTupleValue\
    \ = colTuple.Item2;\n                if (rowTupleValue == x && colTupleValue ==\
    \ x) {\n                    result.Add(Tuple.Create(rowTupleIndex, colTupleIndex));\n\
    \                }\n            }\n            rowIndex++;\n            colIndex++;\n\
    \        }\n        return result.OrderBy(t => t.Item1).ThenBy(t => t.Item2).ToList();",
  "        List<Tuple<long, long>> result = new List<Tuple<long, long>>();\n     \
    \   foreach (var row in lst) {\n            foreach (var col in row.OrderByDescending(c\
    \ => c)) {\n                if (col == x) {\n                    result.Add(new\
    \ Tuple<long, long>(row.IndexOf(x), col.IndexOf(x)));\n                }\n   \
    \         }\n        }\n        return result;", "        List<Tuple<long, long>>\
    \ result = new List<Tuple<long, long>>();\n        foreach (var row in lst) {\n\
    \            foreach (var item in row) {\n                if (item == x) {\n \
    \                   result.Add(new Tuple<long, long>(row.IndexOf(row), row.IndexOf(row)));\n\
    \                }\n            }\n        }\n        return result.OrderBy(x\
    \ => x.Item1).ThenByDescending(x => x.Item2).ToList();", "        List<Tuple<long,\
    \ long>> result = new List<Tuple<long, long>>();\n        foreach (List<long>\
    \ row in lst) {\n            foreach (long num in row) {\n                if (num\
    \ == x) {\n                    result.Add(new Tuple<long, long>(row.IndexOf(num),\
    \ row.IndexOf(num)));\n                }\n            }\n        }\n        return\
    \ result.OrderBy(x => x.Item1).ThenByDescending(x => x.Item2).ToList();", "  \
    \      List<Tuple<long, long>> result = new List<Tuple<long, long>>();\n     \
    \   foreach (var row in lst) {\n            foreach (var item in row) {\n    \
    \            if (item == x) {\n                    result.Add(new Tuple<long,\
    \ long>(row, row.IndexOf(item)+1));\n                }\n            }\n      \
    \  }\n        return result.OrderBy(x => x.Item1).ThenByDescending(x => x.Item2).ToList();",
  "        List<Tuple<long, long>> result = new List<Tuple<long, long>>();\n     \
    \   foreach (List<long> row in lst) {\n            foreach (long num in row) {\n\
    \                if (num == x) {\n                    result.Add(new Tuple<long,\
    \ long>(row.IndexOf(num), row.IndexOf(num)));\n                }\n           \
    \ }\n        }\n        return result.OrderBy(x => x.Item1).ThenByDescending(x\
    \ => x.Item2).ToList();", "        List<Tuple<long, long>> result = new List<Tuple<long,\
    \ long>>();\n        foreach (List<long> row in lst) {\n            foreach (long\
    \ val in row) {\n                if (val == x) {\n                    result.Add(new\
    \ Tuple<long, long>(row.IndexOf(val), row.LastIndexOf(val)));\n              \
    \  }\n            }\n        }\n        return result.OrderBy(x => x.Item1).ThenByDescending(x\
    \ => x.Item2).ToList();", "        List<Tuple<long, long>> result = new List<Tuple<long,\
    \ long>>();\n        foreach (var row in lst) {\n            foreach (var col\
    \ in row.OrderByDescending(c => c)) {\n                if (col == x) {\n     \
    \               result.Add(new Tuple<long, long>(row.IndexOf(row), col.IndexOf(col)));\n\
    \                }\n            }\n        }\n        return result.OrderBy(t\
    \ => t.Item1).ThenByDescending(t => t.Item2).ToList();", "        List<Tuple<long,\
    \ long>> result = new List<Tuple<long, long>>();\n        foreach (var row in\
    \ lst) {\n            foreach (var col in row.OrderByDescending(c => c)) {\n \
    \               if (col == x) {\n                    result.Add(new Tuple<long,\
    \ long>(row.IndexOf(x), col.IndexOf(x)));\n                }\n            }\n\
    \        }\n        return result.OrderBy(r => r.Item1).ThenByDescending(r =>\
    \ r.Item2).ToList();", "        List<Tuple<long, long>> result = new List<Tuple<long,\
    \ long>>();\n        foreach (var row in lst) {\n            foreach (var col\
    \ in row.OrderByDescending(c => c)) {\n                if (col == x) {\n     \
    \               result.Add(new Tuple<long, long>(row.IndexOf(x), col.IndexOf(x)));\n\
    \                }\n            }\n        }\n        return result;", "     \
    \   List<Tuple<long, long>> result = new List<Tuple<long, long>>();\n        foreach\
    \ (List<long> row in lst) {\n            foreach (long num in row) {\n       \
    \         if (num == x) {\n                    result.Add(new Tuple<long, long>(row.IndexOf(x),\
    \ row.Last()));\n                }\n            }\n        }\n        return result.OrderBy(x\
    \ => x.Item1).ThenByDescending(x => x.Item2).ToList();", "        List<Tuple<long,\
    \ long>> result = new List<Tuple<long, long>>();\n        foreach (List<long>\
    \ row in lst) {\n            long y = row.FindIndex(x => x == row[0]);\n     \
    \       result.Add(new Tuple<long, long>(y, row.FindIndex(x => x == row[y])));\n\
    \        }\n        return result.OrderBy(x => x.Item1).ThenByDescending(x =>\
    \ x.Item2).ToList();", "        List<Tuple<long, long>> result = new List<Tuple<long,\
    \ long>>();\n        foreach (var row in lst) {\n            foreach (var item\
    \ in row) {\n                if (item == x) {\n                    result.Add(new\
    \ Tuple<long, long>(row.IndexOf(item), row.IndexOf(x)));\n                }\n\
    \            }\n        }\n        return result.OrderBy(x => x.Item1).ThenByDescending(x\
    \ => x.Item2).ToList();", "        List<Tuple<long, long>> result = new List<Tuple<long,\
    \ long>>();\n        foreach (var row in lst) {\n            foreach (var item\
    \ in row) {\n                if (item == x) {\n                    result.Add(new\
    \ Tuple<long, long>(row.IndexOf(row), row.IndexOf(row)));\n                }\n\
    \            }\n        }\n        return result.OrderBy(x => x.Item1).ThenByDescending(x\
    \ => x.Item2).ToList();", "        List<Tuple<long, long>> result = new List<Tuple<long,\
    \ long>>();\n        foreach (var row in lst) {\n            foreach (var col\
    \ in row.OrderByDescending(y => y)) {\n                if (col == x) {\n     \
    \               result.Add(new Tuple<long, long>(row, col));\n               \
    \ }\n            }\n        }\n        return result;", "        List<Tuple<long,\
    \ long>> result = new List<Tuple<long, long>>();\n        foreach (List<long>\
    \ row in lst) {\n            foreach (long n in row) {\n                if (n\
    \ == x) {\n                    result.Add(new Tuple<long, long>(row.IndexOf(n),\
    \ row.IndexOf(n) + 1));\n                }\n            }\n        }\n       \
    \ return result.OrderBy(x => x.Item1).ThenByDescending(x => x.Item2).ToList();",
  "        List<Tuple<long, long>> result = new List<Tuple<long, long>>();\n     \
    \   foreach (var row in lst) {\n            foreach (var col in row.OrderByDescending(y\
    \ => y).TakeWhile(y => y != x)) {\n                result.Add(new Tuple<long,\
    \ long>(row, col));\n            }\n        }\n        return result;", "    \
    \    List<Tuple<long, long>> result = new List<Tuple<long, long>>();\n       \
    \ foreach (var row in lst) {\n            foreach (var item in row) {\n      \
    \          if (item == x) {\n                    result.Add(new Tuple<long, long>(row.IndexOf(item),\
    \ row.IndexOf(x)));\n                }\n            }\n        }\n        return\
    \ result.OrderBy(x => x.Item1).ThenByDescending(x => x.Item2).ToList();", "  \
    \      List<Tuple<long, long>> result = new List<Tuple<long, long>>();\n     \
    \   foreach (List<long> row in lst) {\n            long y = row.FindIndex(x =>\
    \ x == x);\n            if (y != -1) {\n                result.Add(new Tuple<long,\
    \ long>(y, row.IndexOf(x)));\n            }\n        }\n        return result.OrderBy(x\
    \ => x.Item1).ThenByDescending(x => x.Item2).ToList();", "        List<Tuple<long,\
    \ long>> result = new List<Tuple<long, long>>();\n        foreach (List<long>\
    \ row in lst) {\n            foreach (long num in row) {\n                if (num\
    \ == x) {\n                    result.Add(new Tuple<long, long>(row.IndexOf(num),\
    \ row.IndexOf(num) + 1));\n                }\n            }\n        }\n     \
    \   return result.OrderBy(x => x.Item1).ThenByDescending(x => x.Item2).ToList();",
  "        List<Tuple<long, long>> result = new List<Tuple<long, long>>();\n     \
    \   foreach (var row in lst) {\n            foreach (var item in row) {\n    \
    \            if (item == x) {\n                    result.Add(new Tuple<long,\
    \ long>(row.IndexOf(item), row.IndexOf(x)));\n                }\n            }\n\
    \        }\n        return result.OrderBy(x => x.Item1).ThenByDescending(x =>\
    \ x.Item2).ToList();", "        List<Tuple<long, long>> result = new List<Tuple<long,\
    \ long>>();\n        foreach (List<long> row in lst) {\n            foreach (long\
    \ n in row) {\n                if (n == x) {\n                    result.Add(new\
    \ Tuple<long, long>(row.IndexOf(n), row.IndexOf(n) + 1));\n                }\n\
    \            }\n        }\n        return result.OrderBy(x => x.Item1).ThenByDescending(x\
    \ => x.Item2).ToList();", "        List<Tuple<long, long>> result = new List<Tuple<long,\
    \ long>>();\n        foreach (List<long> row in lst) {\n            foreach (long\
    \ val in row) {\n                if (val == x) {\n                    result.Add(new\
    \ Tuple<long, long>(row.IndexOf(val), row.IndexOf(val)));\n                }\n\
    \            }\n        }\n        return result.OrderBy(x => x.Item1).ThenByDescending(x\
    \ => x.Item2).ToList();", "        List<Tuple<long, long>> result = new List<Tuple<long,\
    \ long>>();\n        foreach (List<long> row in lst) {\n            foreach (long\
    \ num in row) {\n                if (num == x) {\n                    result.Add(new\
    \ Tuple<long, long>(row.IndexOf(x), row.IndexOf(x)));\n                }\n   \
    \         }\n        }\n        return result.OrderBy(x => x.Item1).ThenByDescending(x\
    \ => x.Item2).ToList();", "        List<Tuple<long, long>> result = new List<Tuple<long,\
    \ long>>();\n        foreach (List<long> row in lst) {\n            foreach (long\
    \ num in row) {\n                if (num == x) {\n                    result.Add(new\
    \ Tuple<long, long>(row.IndexOf(num), row.LastIndexOf(num)));\n              \
    \  }\n            }\n        }\n        return result.OrderBy(x => x.Item1).ThenByDescending(x\
    \ => x.Item2).ToList();", "        List<Tuple<long, long>> result = new List<Tuple<long,\
    \ long>>();\n        foreach (var row in lst) {\n            var y = row.FindIndex(i\
    \ => i == x);\n            if (y != -1) {\n                result.Add(new Tuple<long,\
    \ long>(y, row.FindIndex(i => i != x)));\n            }\n        }\n        return\
    \ result.OrderBy(i => i.Item1).ThenByDescending(i => i.Item2).ToList();", "  \
    \      List<Tuple<long, long>> result = new List<Tuple<long, long>>();\n     \
    \   foreach (List<long> row in lst) {\n            foreach (long n in row) {\n\
    \                if (n == x) {\n                    result.Add(new Tuple<long,\
    \ long>(row.IndexOf(n), row.IndexOf(n) + 1));\n                }\n           \
    \ }\n        }\n        return result.OrderBy(x => x.Item1).ThenByDescending(x\
    \ => x.Item2).ToList();", "        List<Tuple<long, long>> result = new List<Tuple<long,\
    \ long>>();\n        foreach (var row in lst) {\n            foreach (var item\
    \ in row) {\n                if (item == x) {\n                    result.Add(new\
    \ Tuple<long, long>(row.IndexOf(item), row.IndexOf(x)));\n                }\n\
    \            }\n        }\n        return result.OrderBy(x => x.Item1).ThenByDescending(x\
    \ => x.Item2).ToList();", "        List<Tuple<long, long>> result = new List<Tuple<long,\
    \ long>>();\n        foreach (List<long> row in lst) {\n            foreach (long\
    \ col in row) {\n                if (col == x) {\n                    result.Add(new\
    \ Tuple<long, long>(row.IndexOf(row), row.IndexOf(row)));\n                }\n\
    \            }\n        }\n        return result.OrderBy(x => x.Item1).ThenByDescending(x\
    \ => x.Item2).ToList();", "        List<Tuple<long, long>> result = new List<Tuple<long,\
    \ long>>();\n        foreach (List<long> row in lst) {\n            foreach (long\
    \ n in row) {\n                if (n == x) {\n                    result.Add(new\
    \ Tuple<long, long>(row.IndexOf(n), row.IndexOf(n) + 1));\n                }\n\
    \            }\n        }\n        return result.OrderBy(x => x.Item1).ThenByDescending(x\
    \ => x.Item2).ToList();", "        List<Tuple<long, long>> result = new List<Tuple<long,\
    \ long>>();\n        foreach (var row in lst) {\n            foreach (var item\
    \ in row) {\n                if (item == x) {\n                    result.Add(new\
    \ Tuple<long, long>(row.IndexOf(item), row.IndexOf(x)));\n                }\n\
    \            }\n        }\n        return result.OrderBy(x => x.Item1).ThenByDescending(x\
    \ => x.Item2).ToList();", "        List<Tuple<long, long>> result = new List<Tuple<long,\
    \ long>>();\n        foreach (List<long> row in lst) {\n            foreach (long\
    \ num in row) {\n                if (num == x) {\n                    result.Add(new\
    \ Tuple<long, long>(row.IndexOf(num), row.IndexOf(num)));\n                }\n\
    \            }\n        }\n        return result.OrderBy(x => x.Item1).ThenByDescending(x\
    \ => x.Item2).ToList();", "        List<Tuple<long, long>> result = new List<Tuple<long,\
    \ long>>();\n        foreach (var row in lst) {\n            foreach (var col\
    \ in row.OrderByDescending(y => y).ThenByDescending(y => y)) {\n             \
    \   if (col == x) {\n                    result.Add(new Tuple<long, long>(row.IndexOf(x),\
    \ col.IndexOf(x)));\n                }\n            }\n        }\n        return\
    \ result;", "        List<Tuple<long, long>> result = new List<Tuple<long, long>>();\n\
    \        foreach (List<long> row in lst) {\n            foreach (long n in row)\
    \ {\n                if (n == x) {\n                    result.Add(new Tuple<long,\
    \ long>(row.IndexOf(row), row.IndexOf(row)));\n                }\n           \
    \ }\n        }\n        return result.OrderBy(x => x.Item1).ThenByDescending(x\
    \ => x.Item2).ToList();", "        List<Tuple<long, long>> result = new List<Tuple<long,\
    \ long>>();\n        foreach (var row in lst) {\n            foreach (var col\
    \ in row.OrderByDescending(c => c)) {\n                if (col == x) {\n     \
    \               result.Add(new Tuple<long, long>(row.IndexOf(x), col.IndexOf(x)));\n\
    \                }\n            }\n        }\n        return result.OrderBy(r\
    \ => r.Item1).ThenBy(r => r.Item2).ToList();", "        List<Tuple<long, long>>\
    \ result = new List<Tuple<long, long>>();\n        foreach (var row in lst) {\n\
    \            foreach (var item in row) {\n                if (item == x) {\n \
    \                   result.Add(new Tuple<long, long>(row.IndexOf(row), row.IndexOf(row)\
    \ - 1));\n                }\n            }\n        }\n        return result.OrderByDescending(x\
    \ => x.Item1).ThenByDescending(x => x.Item2).ToList();", "        List<Tuple<long,\
    \ long>> result = new List<Tuple<long, long>>();\n        foreach (var row in\
    \ lst) {\n            foreach (var col in row.OrderByDescending(c => c)) {\n \
    \               if (col == x) {\n                    result.Add(new Tuple<long,\
    \ long>(row.IndexOf(row), col.IndexOf(col)));\n                }\n           \
    \ }\n        }\n        return result.OrderBy(r => r.Item1).ThenByDescending(r\
    \ => r.Item2).ToList();", "        List<Tuple<long, long>> result = new List<Tuple<long,\
    \ long>>();\n        foreach (var row in lst) {\n            foreach (var item\
    \ in row) {\n                if (item == x) {\n                    result.Add(new\
    \ Tuple<long, long>(row, row.IndexOf(item)+1));\n                }\n         \
    \   }\n        }\n        return result.OrderBy(x => x.Item1).ThenByDescending(x\
    \ => x.Item2).ToList();", "        List<Tuple<long, long>> result = new List<Tuple<long,\
    \ long>>();\n        foreach (List<long> row in lst) {\n            foreach (long\
    \ n in row) {\n                if (n == x) {\n                    result.Add(new\
    \ Tuple<long, long>(row.IndexOf(row), row.IndexOf(row)));\n                }\n\
    \            }\n        }\n        return result.OrderBy(x => x.Item1).ThenByDescending(x\
    \ => x.Item2).ToList();", "        List<Tuple<long, long>> result = new List<Tuple<long,\
    \ long>>();\n        foreach (List<long> row in lst) {\n            foreach (long\
    \ y in row) {\n                if (y == x) {\n                    result.Add(new\
    \ Tuple<long, long>(row.IndexOf(y), row.IndexOf(x)));\n                }\n   \
    \         }\n        }\n        return result.OrderBy(x => x.Item1).ThenByDescending(x\
    \ => x.Item2).ToList();", "        var result = new List<Tuple<long, long>>();\n\
    \        foreach (var row in lst) {\n            var y = row.FindIndex(y => y\
    \ == x);\n            if (y != -1) {\n                result.Add(Tuple.Create(row,\
    \ y));\n            }\n        }\n        return result.OrderBy(x => x.Item1).ThenByDescending(x\
    \ => x.Item2).ToList();", "        List<Tuple<long, long>> result = new List<Tuple<long,\
    \ long>>();\n        foreach (List<long> row in lst) {\n            foreach (long\
    \ num in row) {\n                if (num == x) {\n                    result.Add(new\
    \ Tuple<long, long>(row.IndexOf(num), row.IndexOf(num)));\n                }\n\
    \            }\n        }\n        return result.OrderBy(x => x.Item1).ThenByDescending(x\
    \ => x.Item2).ToList();", "        List<Tuple<long, long>> result = new List<Tuple<long,\
    \ long>>();\n        foreach (List<long> row in lst) {\n            foreach (long\
    \ y in row) {\n                if (y == x) {\n                    result.Add(new\
    \ Tuple<long, long>(row.IndexOf(y), row.IndexOf(x)));\n                }\n   \
    \         }\n        }\n        return result.OrderBy(x => x.Item1).ThenByDescending(x\
    \ => x.Item2).ToList();", "        List<Tuple<long, long>> result = new List<Tuple<long,\
    \ long>>();\n        foreach (List<long> row in lst) {\n            foreach (long\
    \ n in row) {\n                if (n == x) {\n                    result.Add(new\
    \ Tuple<long, long>(row.IndexOf(n), row.IndexOf(n) + 1));\n                }\n\
    \            }\n        }\n        return result.OrderBy(x => x.Item1).ThenByDescending(x\
    \ => x.Item2).ToList();", "        List<Tuple<long, long>> result = new List<Tuple<long,\
    \ long>>();\n        foreach (var row in lst) {\n            foreach (var item\
    \ in row) {\n                if (item == x) {\n                    result.Add(new\
    \ Tuple<long, long>(row, row.IndexOf(item)));\n                }\n           \
    \ }\n        }\n        return result.OrderBy(x => x.Item1).ThenByDescending(x\
    \ => x.Item2).ToList();", "        List<Tuple<long, long>> result = new List<Tuple<long,\
    \ long>>();\n        foreach (List<long> row in lst) {\n            foreach (long\
    \ n in row) {\n                if (n == x) {\n                    result.Add(new\
    \ Tuple<long, long>(row.IndexOf(n), row.IndexOf(n) + 1));\n                }\n\
    \            }\n        }\n        return result.OrderBy(x => x.Item1).ThenByDescending(x\
    \ => x.Item2).ToList();", "        List<Tuple<long, long>> result = new List<Tuple<long,\
    \ long>>();\n        foreach (List<long> row in lst) {\n            foreach (long\
    \ num in row) {\n                if (num == x) {\n                    result.Add(new\
    \ Tuple<long, long>(row.IndexOf(num), row.IndexOf(x)));\n                }\n \
    \           }\n        }\n        return result.OrderBy(x => x.Item1).ThenByDescending(x\
    \ => x.Item2).ToList();", "        List<Tuple<long, long>> result = new List<Tuple<long,\
    \ long>>();\n        foreach (List<long> row in lst) {\n            foreach (long\
    \ n in row) {\n                if (n == x) {\n                    result.Add(new\
    \ Tuple<long, long>((long)row.IndexOf(n), (long)row.IndexOf(n)));\n          \
    \      }\n            }\n        }\n        return result.OrderBy(x => x.Item1).ThenByDescending(x\
    \ => x.Item2).ToList();", "        List<Tuple<long, long>> result = new List<Tuple<long,\
    \ long>>();\n        foreach (List<long> row in lst) {\n            foreach (long\
    \ col in row) {\n                if (col == x) {\n                    result.Add(new\
    \ Tuple<long, long>(row.IndexOf(row), row.IndexOf(row)));\n                }\n\
    \            }\n        }\n        return result.OrderBy(x => x.Item1).ThenByDescending(x\
    \ => x.Item2).ToList();", "        List<Tuple<long, long>> result = new List<Tuple<long,\
    \ long>>();\n        foreach (List<long> row in lst) {\n            foreach (long\
    \ y in row) {\n                if (y == x) {\n                    result.Add(new\
    \ Tuple<long, long>(row.IndexOf(y), row.IndexOf(x)));\n                }\n   \
    \         }\n        }\n        return result.OrderBy(x => x.Item1).ThenByDescending(x\
    \ => x.Item2).ToList();", "        List<Tuple<long, long>> result = new List<Tuple<long,\
    \ long>>();\n        foreach (var row in lst) {\n            foreach (var item\
    \ in row) {\n                if (item == x) {\n                    result.Add(new\
    \ Tuple<long, long>(row.IndexOf(item), row.IndexOf(x)));\n                }\n\
    \            }\n        }\n        return result.OrderBy(x => x.Item1).ThenByDescending(x\
    \ => x.Item2).ToList();", "        List<Tuple<long, long>> result = new List<Tuple<long,\
    \ long>>();\n        foreach (List<long> row in lst) {\n            foreach (long\
    \ n in row) {\n                if (n == x) {\n                    result.Add(new\
    \ Tuple<long, long>(row.IndexOf(n), row.IndexOf(n) + 1));\n                }\n\
    \            }\n        }\n        return result.OrderBy(x => x.Item1).ThenByDescending(x\
    \ => x.Item2).ToList();", "        List<Tuple<long, long>> result = new List<Tuple<long,\
    \ long>>();\n        foreach (List<long> row in lst) {\n            foreach (long\
    \ num in row) {\n                if (num == x) {\n                    result.Add(new\
    \ Tuple<long, long>((long)row.IndexOf(num), row.IndexOf(num)));\n            \
    \    }\n            }\n        }\n        return result.OrderBy(x => x.Item1).ThenByDescending(x\
    \ => x.Item2).ToList();", "        List<Tuple<long, long>> result = new List<Tuple<long,\
    \ long>>();\n        foreach (var row in lst) {\n            foreach (var col\
    \ in row.OrderByDescending(c => c)) {\n                if (col == x) {\n     \
    \               result.Add(new Tuple<long, long>(row.IndexOf(x), col.IndexOf(x)));\n\
    \                }\n            }\n        }\n        return result.OrderBy(r\
    \ => r.Item1).ThenBy(r => r.Item2).ToList();", "        List<Tuple<long, long>>\
    \ result = new List<Tuple<long, long>>();\n        foreach (var row in lst) {\n\
    \            foreach (var item in row) {\n                if (item == x) {\n \
    \                   result.Add(new Tuple<long, long>(row.IndexOf(item), row.IndexOf(x)));\n\
    \                }\n            }\n        }\n        return result.OrderBy(x\
    \ => x.Item1).ThenByDescending(x => x.Item2).ToList();", "        List<Tuple<long,\
    \ long>> result = new List<Tuple<long, long>>();\n        foreach (List<long>\
    \ row in lst) {\n            long y = row.FindIndex(x => x == 0);\n          \
    \  if (y != -1) {\n                result.Add(new Tuple<long, long>(y, row.FindIndex(x\
    \ => x == x)));\n            }\n        }\n        return result.OrderBy(x =>\
    \ x.Item1).ThenByDescending(x => x.Item2).ToList();", "        List<Tuple<long,\
    \ long>> result = new List<Tuple<long, long>>();\n        foreach (var row in\
    \ lst) {\n            var y = row.FindIndex(y => y == x);\n            if (y !=\
    \ -1) {\n                result.Add(new Tuple<long, long>(row.IndexOf(x), y));\n\
    \            }\n        }\n        return result.OrderBy(x => x.Item1).ThenByDescending(x\
    \ => x.Item2).ToList();", "        List<Tuple<long, long>> result = new List<Tuple<long,\
    \ long>>();\n        foreach (var row in lst) {\n            foreach (var item\
    \ in row) {\n                if (item == x) {\n                    result.Add(new\
    \ Tuple<long, long>(row.IndexOf(item), row.IndexOf(x)));\n                }\n\
    \            }\n        }\n        return result.OrderBy(x => x.Item1).ThenByDescending(x\
    \ => x.Item2).ToList();", "        List<Tuple<long, long>> result = new List<Tuple<long,\
    \ long>>();\n        foreach (List<long> row in lst) {\n            long y = 0;\n\
    \            foreach (long n in row) {\n                if (n == x) {\n      \
    \              y = 1;\n                    break;\n                }\n       \
    \     }\n            result.Add(new Tuple<long, long>(row.IndexOf(x), y));\n \
    \       }\n        return result.OrderBy(x => x.Item1).ThenByDescending(x => x.Item2).ToList();",
  "        List<Tuple<long, long>> result = new List<Tuple<long, long>>();\n     \
    \   foreach (var row in lst) {\n            foreach (var item in row) {\n    \
    \            if (item == x) {\n                    result.Add(new Tuple<long,\
    \ long>(row.IndexOf(item), row.IndexOf(x)));\n                }\n            }\n\
    \        }\n        return result.OrderBy(x => x.Item1).ThenByDescending(x =>\
    \ x.Item2).ToList();", "        List<Tuple<long, long>> result = new List<Tuple<long,\
    \ long>>();\n        foreach (var row in lst) {\n            foreach (var col\
    \ in row.OrderByDescending(c => c)) {\n                if (col == x) {\n     \
    \               result.Add(new Tuple<long, long>(row.IndexOf(x), col.IndexOf(x)));\n\
    \                }\n            }\n        }\n        return result;", "     \
    \   List<Tuple<long, long>> result = new List<Tuple<long, long>>();\n        foreach\
    \ (List<long> row in lst) {\n            foreach (long col in row) {\n       \
    \         if (col == x) {\n                    result.Add(new Tuple<long, long>(row.IndexOf(col),\
    \ row.IndexOf(col)));\n                }\n            }\n        }\n        return\
    \ result.OrderBy(x => x.Item1).ThenByDescending(x => x.Item2).ToList();", "  \
    \      var result = new List<Tuple<long, long>>();\n        foreach (var row in\
    \ lst) {\n            var rowTuple = new Tuple<long, long>(row.Count, row.Count);\n\
    \            foreach (var col in row.OrderByDescending(c => c)) {\n          \
    \      if (col == x) {\n                    rowTuple.Item1 = row.Count;\n    \
    \                rowTuple.Item2 = col;\n                    result.Add(rowTuple);\n\
    \                    break;\n                }\n            }\n        }\n   \
    \     return result;", "        List<Tuple<long, long>> result = new List<Tuple<long,\
    \ long>>();\n        foreach (var row in lst) {\n            foreach (var col\
    \ in row.OrderByDescending(c => c)) {\n                if (col == x) {\n     \
    \               result.Add(new Tuple<long, long>(row.IndexOf(x), col.IndexOf(x)));\n\
    \                }\n            }\n        }\n        return result;", "     \
    \   List<Tuple<long, long>> result = new List<Tuple<long, long>>();\n        foreach\
    \ (List<long> row in lst) {\n            long y = row.FindIndex(i => i == x);\n\
    \            result.Add(new Tuple<long, long>(row.IndexOf(x), y));\n        }\n\
    \        return result.OrderBy(i => i.Item1).ThenByDescending(i => i.Item2).ToList();",
  "        List<Tuple<long, long>> result = new List<Tuple<long, long>>();\n     \
    \   foreach (List<long> row in lst) {\n            foreach (long num in row) {\n\
    \                if (num == x) {\n                    result.Add(new Tuple<long,\
    \ long>((long)row.IndexOf(num), row.IndexOf(x)));\n                }\n       \
    \     }\n        }\n        return result.OrderBy(x => x.Item1).ThenByDescending(x\
    \ => x.Item2).ToList();", "        List<Tuple<long, long>> result = new List<Tuple<long,\
    \ long>>();\n        foreach (List<long> row in lst) {\n            foreach (long\
    \ y in row) {\n                if (y == x) {\n                    result.Add(new\
    \ Tuple<long, long>(0, row.IndexOf(y)));\n                }\n            }\n \
    \       }\n        return result.OrderBy(t => t.Item1).ThenByDescending(t => t.Item2).ToList();",
  "        List<Tuple<long, long>> result = new List<Tuple<long, long>>();\n     \
    \   foreach (List<long> row in lst) {\n            foreach (long num in row) {\n\
    \                if (num == x) {\n                    result.Add(new Tuple<long,\
    \ long>(row.IndexOf(num), row.IndexOf(x)));\n                }\n            }\n\
    \        }\n        return result.OrderBy(x => x.Item1).ThenByDescending(x =>\
    \ x.Item2).ToList();", "        List<Tuple<long, long>> result = new List<Tuple<long,\
    \ long>>();\n        foreach (var row in lst) {\n            foreach (var item\
    \ in row) {\n                if (item == x) {\n                    result.Add(new\
    \ Tuple<long, long>(row.IndexOf(item), row.IndexOf(x)));\n                }\n\
    \            }\n        }\n        return result.OrderBy(x => x.Item1).ThenByDescending(x\
    \ => x.Item2).ToList();", "        List<Tuple<long, long>> result = new List<Tuple<long,\
    \ long>>();\n        foreach (var row in lst) {\n            foreach (var col\
    \ in row.OrderByDescending(x => x)) {\n                if (col == x) {\n     \
    \               result.Add(new Tuple<long, long>(row, col));\n               \
    \ }\n            }\n        }\n        return result.OrderBy(x => x.Item1).ThenByDescending(x\
    \ => x.Item2).ToList();", "        List<Tuple<long, long>> result = new List<Tuple<long,\
    \ long>>();\n        foreach (List<long> row in lst) {\n            foreach (long\
    \ num in row) {\n                if (num == x) {\n                    result.Add(new\
    \ Tuple<long, long>(row.IndexOf(num), row.IndexOf(x)));\n                }\n \
    \           }\n        }\n        return result.OrderBy(t => t.Item1).ThenByDescending(t\
    \ => t.Item2).ToList();", "        var result = new List<Tuple<long, long>>();\n\
    \        foreach (var row in lst) {\n            var y = row.FindIndex(y => y\
    \ == x);\n            if (y != -1) {\n                result.Add(new Tuple<long,\
    \ long>(row.IndexOf(x), y));\n            }\n        }\n        return result.OrderBy(x\
    \ => x.Item1).ThenByDescending(x => x.Item2).ToList();", "        List<Tuple<long,\
    \ long>> result = new List<Tuple<long, long>>();\n        foreach (var row in\
    \ lst) {\n            foreach (var col in row.OrderByDescending(y => y).TakeWhile(y\
    \ => y != x)) {\n                result.Add(new Tuple<long, long>(row, col));\n\
    \            }\n        }\n        return result.OrderBy(x => x.Item1).ThenByDescending(x\
    \ => x.Item2).ToList();", "        List<Tuple<long, long>> result = new List<Tuple<long,\
    \ long>>();\n        foreach (List<long> row in lst) {\n            long y = row.FindIndex(x\
    \ => x == 0);\n            result.Add(new Tuple<long, long>(row.FindIndex(x =>\
    \ x == 0), y));\n        }\n        return result.OrderBy(x => x.Item1).ThenByDescending(x\
    \ => x.Item2).ToList();", "        var result = new List<Tuple<long, long>>();\n\
    \        foreach (var row in lst) {\n            var rowResult = GetColumn(row,\
    \ x);\n            result.AddRange(rowResult);\n        }\n        return result.OrderBy(x\
    \ => x.Item1).ThenByDescending(x => x.Item2).ToList();", "        List<Tuple<long,\
    \ long>> result = new List<Tuple<long, long>>();\n        foreach (List<long>\
    \ row in lst) {\n            long y = row.FindIndex(i => i == x);\n          \
    \  if (y != -1) {\n                result.Add(new Tuple<long, long>(y, row.FindIndex(i\
    \ => i == x)));\n            }\n        }\n        return result.OrderBy(i =>\
    \ i.Item1).ThenByDescending(i => i.Item2).ToList();", "        List<Tuple<long,\
    \ long>> result = new List<Tuple<long, long>>();\n        foreach (var row in\
    \ lst) {\n            foreach (var item in row) {\n                if (item ==\
    \ x) {\n                    result.Add(new Tuple<long, long>(row.IndexOf(item),\
    \ row.IndexOf(x)));\n                }\n            }\n        }\n        return\
    \ result.OrderBy(x => x.Item1).ThenByDescending(x => x.Item2).ToList();", "  \
    \      List<Tuple<long, long>> result = new List<Tuple<long, long>>();\n     \
    \   foreach (List<long> row in lst) {\n            foreach (long n in row) {\n\
    \                if (n == x) {\n                    result.Add(new Tuple<long,\
    \ long>(row.IndexOf(row), row.IndexOf(row)));\n                }\n           \
    \ }\n        }\n        return result.OrderBy(x => x.Item1).ThenByDescending(x\
    \ => x.Item2).ToList();", "        List<Tuple<long, long>> result = new List<Tuple<long,\
    \ long>>();\n        foreach (List<long> row in lst) {\n            foreach (long\
    \ col in row) {\n                if (col == x) {\n                    result.Add(new\
    \ Tuple<long, long>(row.IndexOf(row), row.IndexOf(row)));\n                }\n\
    \            }\n        }\n        return result.OrderBy(t => t.Item1).ThenByDescending(t\
    \ => t.Item2).ToList();", "        List<Tuple<long, long>> result = new List<Tuple<long,\
    \ long>>();\n        foreach (List<long> row in lst) {\n            foreach (long\
    \ num in row) {\n                if (num == x) {\n                    result.Add(new\
    \ Tuple<long, long>(row.IndexOf(num), row.IndexOf(x)));\n                }\n \
    \           }\n        }\n        return result.OrderBy(x => x.Item1).ThenByDescending(x\
    \ => x.Item2).ToList();", "        var result = new List<Tuple<long, long>>();\n\
    \        var rows = lst.Select(x => x.ToArray()).ToArray();\n        var rows\
    \ = rows.OrderBy(x => x[0]);\n        var rows = rows.OrderByDescending(x => x[1]);\n\
    \        var rows = rows.ToArray();\n        var rows = rows.Select(x => Tuple.Create(x.GetValue(0),\
    \ x.GetValue(1))).ToArray();\n        var rows = rows.Where(x => x.Item1 == x).ToArray();\n\
    \        var rows = rows.Where(x => x.Item2 == x).ToArray();\n        var rows\
    \ = rows.Where(x => x.Item1 == x).ToArray();\n        var rows = rows.Where(x\
    \ => x.Item2 == x).ToArray();\n        var rows = rows.Where(x => x.Item1 == x).ToArray();\n\
    \        var rows = rows.Where(x => x.Item2 == x).ToArray();\n        var rows\
    \ = rows.Where(x => x.Item1 == x).ToArray();\n        var rows = rows.Where(x\
    \ => x.Item2 == x).ToArray();\n        var rows = rows.Where(x => x.Item1 == x).ToArray();\n\
    \        var rows = rows.Where(x => x.Item2 == x).ToArray();\n        var rows\
    \ = rows.Where(x => x.Item1 == x).ToArray();\n        var rows = rows.Where(x\
    \ => x.Item2 == x).ToArray();\n        var rows = rows.Where(x => x.Item1 == x).ToArray();\n\
    \        var rows = rows.Where(x => x.Item2 == x).ToArray();\n        var rows\
    \ = rows.Where(x => x.Item1 == x).ToArray();\n        var rows = rows.Where(x\
    \ => x.Item2 == x).ToArray();\n        var rows = rows.Where(x => x.Item1 == x).ToArray();\n\
    \        var rows = rows.Where(x => x.Item2 == x).ToArray();\n        var rows\
    \ = rows.Where(x => x.Item1 == x).ToArray();\n        var rows = rows.Where(x\
    \ => x.Item2 == x).ToArray();\n        var rows = rows.Where(x => x.Item1 == x).ToArray();\n\
    \        var rows = rows.Where(x => x.Item2 == x).ToArray();\n        var rows\
    \ = rows.Where(x => x.Item1 == x).ToArray();\n        var rows = rows.Where(x\
    \ => x.Item2 == x).ToArray();\n        var rows = rows.Where(x => x.Item1 == x).ToArray();\n\
    \        var rows = rows.Where(x => x.Item2 == x).ToArray();\n        var rows\
    \ = rows.Where(x => x.Item1 == x).ToArray();\n        var rows = rows.Where(x\
    \ => x.Item2 == x).ToArray();\n        var rows = rows.Where(x => x.Item1 == x).To",
  "        List<Tuple<long, long>> result = new List<Tuple<long, long>>();\n     \
    \   foreach (var row in lst) {\n            foreach (var item in row) {\n    \
    \            if (item == x) {\n                    result.Add(new Tuple<long,\
    \ long>(row.IndexOf(row), row.IndexOf(row)));\n                }\n           \
    \ }\n        }\n        return result.OrderBy(x => x.Item1).ThenByDescending(x\
    \ => x.Item2).ToList();", "        List<Tuple<long, long>> result = new List<Tuple<long,\
    \ long>>();\n        foreach (List<long> row in lst) {\n            foreach (long\
    \ y in row) {\n                if (y == x) {\n                    result.Add(new\
    \ Tuple<long, long>(0, row.IndexOf(y)));\n                }\n            }\n \
    \       }\n        return result.OrderBy(t => t.Item1).ThenByDescending(t => t.Item2).ToList();",
  "        List<Tuple<long, long>> result = new List<Tuple<long, long>>();\n     \
    \   foreach (var row in lst) {\n            foreach (var item in row) {\n    \
    \            if (item == x) {\n                    result.Add(new Tuple<long,\
    \ long>(row.IndexOf(item), row.IndexOf(x)));\n                }\n            }\n\
    \        }\n        return result.OrderBy(x => x.Item1).ThenByDescending(x =>\
    \ x.Item2).ToList();", "        List<Tuple<long, long>> result = new List<Tuple<long,\
    \ long>>();\n        foreach (List<long> row in lst) {\n            foreach (long\
    \ num in row) {\n                if (num == x) {\n                    result.Add(new\
    \ Tuple<long, long>(row.IndexOf(x), row.Last()));\n                }\n       \
    \     }\n        }\n        return result;", "        List<Tuple<long, long>>\
    \ result = new List<Tuple<long, long>>();\n        foreach (List<long> row in\
    \ lst) {\n            foreach (long n in row) {\n                if (n == x) {\n\
    \                    result.Add(new Tuple<long, long>(row.IndexOf(n), row.IndexOf(n)\
    \ + 1));\n                }\n            }\n        }\n        return result.OrderBy(x\
    \ => x.Item1).ThenByDescending(x => x.Item2).ToList();", "        List<Tuple<long,\
    \ long>> result = new List<Tuple<long, long>>();\n        foreach (List<long>\
    \ row in lst) {\n            foreach (long num in row) {\n                if (num\
    \ == x) {\n                    result.Add(new Tuple<long, long>(row.IndexOf(x),\
    \ row.Last()));\n                }\n            }\n        }\n        return result.OrderBy(x\
    \ => x.Item1).ThenByDescending(x => x.Item2).ToList();", "        List<Tuple<long,\
    \ long>> result = new List<Tuple<long, long>>();\n        foreach (var row in\
    \ lst) {\n            foreach (var item in row) {\n                if (item ==\
    \ x) {\n                    result.Add(new Tuple<long, long>(row.IndexOf(item),\
    \ row.IndexOf(x)));\n                }\n            }\n        }\n        return\
    \ result.OrderBy(x => x.Item1).ThenByDescending(x => x.Item2).ToList();", "  \
    \      List<Tuple<long, long>> result = new List<Tuple<long, long>>();\n     \
    \   foreach (List<long> row in lst) {\n            foreach (long num in row) {\n\
    \                if (num == x) {\n                    result.Add(new Tuple<long,\
    \ long>(row.IndexOf(num), row.LastIndexOf(num)));\n                }\n       \
    \     }\n        }\n        return result.OrderBy(t => t.Item1).ThenByDescending(t\
    \ => t.Item2).ToList();", "        var result = new List<Tuple<long, long>>();\n\
    \        foreach (var row in lst) {\n            var found = false;\n        \
    \    foreach (var item in row) {\n                if (item == x) {\n         \
    \           found = true;\n                    break;\n                }\n   \
    \         }\n            if (!found) {\n                continue;\n          \
    \  }\n            var tuple = new Tuple<long, long>(row.IndexOf(x), row.Last());\n\
    \            result.Add(tuple);\n        }\n        return result.OrderBy(x =>\
    \ x.Item1).ThenByDescending(x => x.Item2).ToList();", "        List<Tuple<long,\
    \ long>> result = new List<Tuple<long, long>>();\n        foreach (List<long>\
    \ row in lst) {\n            foreach (long y in row) {\n                if (y\
    \ == x) {\n                    result.Add(new Tuple<long, long>(row.IndexOf(y),\
    \ row.IndexOf(x)));\n                }\n            }\n        }\n        return\
    \ result.OrderBy(x => x.Item1).ThenByDescending(x => x.Item2).ToList();", "  \
    \      List<Tuple<long, long>> result = new List<Tuple<long, long>>();\n     \
    \   foreach (List<long> row in lst) {\n            foreach (long val in row) {\n\
    \                if (val == x) {\n                    result.Add(new Tuple<long,\
    \ long>(row.IndexOf(val), row.LastIndexOf(val)));\n                }\n       \
    \     }\n        }\n        return result.OrderBy(x => x.Item1).ThenByDescending(x\
    \ => x.Item2).ToList();", "        List<Tuple<long, long>> result = new List<Tuple<long,\
    \ long>>();\n        foreach (var row in lst) {\n            foreach (var item\
    \ in row) {\n                if (item == x) {\n                    result.Add(new\
    \ Tuple<long, long>(row.IndexOf(item), row.IndexOf(x)));\n                }\n\
    \            }\n        }\n        return result.OrderBy(x => x.Item1).ThenByDescending(x\
    \ => x.Item2).ToList();", "        List<Tuple<long, long>> result = new List<Tuple<long,\
    \ long>>();\n        foreach (List<long> row in lst) {\n            foreach (long\
    \ y in row) {\n                if (y == x) {\n                    result.Add(new\
    \ Tuple<long, long>(row.IndexOf(y), row.IndexOf(x)));\n                }\n   \
    \         }\n        }\n        return result.OrderBy(x => x.Item1).ThenByDescending(x\
    \ => x.Item2).ToList();", "        List<Tuple<long, long>> result = new List<Tuple<long,\
    \ long>>();\n        foreach (var row in lst) {\n            foreach (var item\
    \ in row) {\n                if (item == x) {\n                    result.Add(new\
    \ Tuple<long, long>(row.IndexOf(item), row.IndexOf(x)));\n                }\n\
    \            }\n        }\n        return result.OrderBy(x => x.Item1).ThenByDescending(x\
    \ => x.Item2).ToList();", "        List<Tuple<long, long>> result = new List<Tuple<long,\
    \ long>>();\n        foreach (List<long> row in lst) {\n            foreach (long\
    \ num in row) {\n                if (num == x) {\n                    result.Add(new\
    \ Tuple<long, long>(row.IndexOf(num), row.IndexOf(x)));\n                }\n \
    \           }\n        }\n        return result.OrderBy(x => x.Item1).ThenByDescending(x\
    \ => x.Item2).ToList();", "        List<Tuple<long, long>> result = new List<Tuple<long,\
    \ long>>();\n        foreach (List<long> row in lst) {\n            long y = row.FindIndex(x\
    \ => x == 0);\n            if (y != -1) {\n                result.Add(new Tuple<long,\
    \ long>(row.FindIndex(x => x == 0), y));\n            }\n        }\n        return\
    \ result.OrderBy(x => x.Item1).ThenByDescending(x => x.Item2).ToList();", "  \
    \      List<Tuple<long, long>> result = new List<Tuple<long, long>>();\n     \
    \   foreach (List<long> row in lst) {\n            foreach (long y in row) {\n\
    \                if (y == x) {\n                    result.Add(new Tuple<long,\
    \ long>(row.IndexOf(y), row.IndexOf(x)));\n                }\n            }\n\
    \        }\n        return result.OrderBy(x => x.Item1).ThenByDescending(x =>\
    \ x.Item2).ToList();", "        List<Tuple<long, long>> result = new List<Tuple<long,\
    \ long>>();\n        foreach (List<long> row in lst) {\n            foreach (long\
    \ n in row) {\n                if (n == x) {\n                    result.Add(new\
    \ Tuple<long, long>(row.IndexOf(n), row.IndexOf(n) + 1));\n                }\n\
    \            }\n        }\n        return result.OrderBy(x => x.Item1).ThenByDescending(x\
    \ => x.Item2).ToList();", "        List<Tuple<long, long>> result = new List<Tuple<long,\
    \ long>>();\n        foreach (List<long> row in lst) {\n            foreach (long\
    \ num in row) {\n                if (num == x) {\n                    result.Add(new\
    \ Tuple<long, long>(row.IndexOf(num), row.IndexOf(num)));\n                }\n\
    \            }\n        }\n        return result.OrderBy(x => x.Item1).ThenByDescending(x\
    \ => x.Item2).ToList();", "        List<Tuple<long, long>> result = new List<Tuple<long,\
    \ long>>();\n        foreach (var row in lst) {\n            foreach (var item\
    \ in row) {\n                if (item == x) {\n                    result.Add(new\
    \ Tuple<long, long>(row.IndexOf(row), row.IndexOf(row)));\n                }\n\
    \            }\n        }\n        return result.OrderBy(x => x.Item1).ThenByDescending(x\
    \ => x.Item2).ToList();", "        List<Tuple<long, long>> result = new List<Tuple<long,\
    \ long>>();\n        foreach (List<long> row in lst) {\n            long y = row.FindIndex(x\
    \ => x == 0);\n            if (y != -1) {\n                result.Add(new Tuple<long,\
    \ long>(y, row.FindIndex(x => x == x)));\n            }\n        }\n        return\
    \ result.OrderBy(x => x.Item1).ThenByDescending(x => x.Item2).ToList();", "  \
    \      List<Tuple<long, long>> result = new List<Tuple<long, long>>();\n     \
    \   foreach (List<long> row in lst) {\n            foreach (long col in row.OrderByDescending(y\
    \ => y).TakeWhile(y => y != x)) {\n                result.Add(new Tuple<long,\
    \ long>(row, col));\n            }\n        }\n        return result.OrderBy(x\
    \ => x.Item1).ThenByDescending(x => x.Item2).ToList();", "        var result =\
    \ new List<Tuple<long, long>>();\n        var rows = lst.Select(row => row.Count).ToList();\n\
    \        var cols = lst.First().Count;\n        var maxRow = rows.Max();\n   \
    \     var maxCol = cols.Max();\n        var minRow = rows.Min();\n        var\
    \ minCol = cols.Min();\n        var rowIndex = 0;\n        var colIndex = 0;\n\
    \        foreach (var row in lst) {\n            var rowCount = row.Count;\n \
    \           if (rowIndex < maxRow && rowIndex + rowCount > minRow) {\n       \
    \         for (var col = 0; col < maxCol; col++) {\n                    if (colIndex\
    \ < maxCol && colIndex + colCount > minCol) {\n                        if (row[col]\
    \ == x) {\n                            result.Add(new Tuple<long, long>(rowIndex,\
    \ colIndex));\n                        }\n                        colIndex++;\n\
    \                    }\n                    else {\n                        colIndex\
    \ = 0;\n                    }\n                }\n                rowIndex +=\
    \ rowCount;\n            }\n            else {\n                rowIndex = 0;\n\
    \            }\n        }\n        return result;", "        List<Tuple<long,\
    \ long>> result = new List<Tuple<long, long>>();\n        foreach (var row in\
    \ lst) {\n            foreach (var col in row.OrderByDescending(c => c)) {\n \
    \               if (col == x) {\n                    result.Add(new Tuple<long,\
    \ long>(row.IndexOf(x), col.IndexOf(x)));\n                }\n            }\n\
    \        }\n        return result;", "        List<Tuple<long, long>> result =\
    \ new List<Tuple<long, long>>();\n        foreach (List<long> row in lst) {\n\
    \            foreach (long col in row) {\n                if (col == x) {\n  \
    \                  result.Add(new Tuple<long, long>(row.IndexOf(row), row.IndexOf(row)));\n\
    \                }\n            }\n        }\n        return result.OrderBy(x\
    \ => x.Item1).ThenByDescending(x => x.Item2).ToList();", "        List<Tuple<long,\
    \ long>> result = new List<Tuple<long, long>>();\n        foreach (List<long>\
    \ row in lst) {\n            foreach (long num in row) {\n                if (num\
    \ == x) {\n                    result.Add(new Tuple<long, long>(row.IndexOf(num),\
    \ row.LastIndexOf(num)));\n                }\n            }\n        }\n     \
    \   return result.OrderBy(x => x.Item1).ThenByDescending(x => x.Item2).ToList();",
  "        List<Tuple<long, long>> result = new List<Tuple<long, long>>();\n     \
    \   foreach (List<long> row in lst) {\n            foreach (long col in row) {\n\
    \                if (col == x) {\n                    result.Add(new Tuple<long,\
    \ long>(row.IndexOf(row), row.IndexOf(row)));\n                }\n           \
    \ }\n        }\n        return result.OrderBy(x => x.Item1).ThenByDescending(x\
    \ => x.Item2).ToList();", "        List<Tuple<long, long>> result = new List<Tuple<long,\
    \ long>>();\n        foreach (List<long> row in lst) {\n            foreach (long\
    \ num in row) {\n                if (num == x) {\n                    result.Add(new\
    \ Tuple<long, long>(row.IndexOf(num), row.IndexOf(num)));\n                }\n\
    \            }\n        }\n        return result.OrderBy(x => x.Item1).ThenByDescending(x\
    \ => x.Item2).ToList();", "        List<Tuple<long, long>> result = new List<Tuple<long,\
    \ long>>();\n        foreach (List<long> row in lst) {\n            foreach (long\
    \ n in row) {\n                if (n == x) {\n                    result.Add(new\
    \ Tuple<long, long>((long)row.IndexOf(row), row.IndexOf(n)));\n              \
    \  }\n            }\n        }\n        return result.OrderBy(x => x.Item1).ThenByDescending(x\
    \ => x.Item2).ToList();", "        List<Tuple<long, long>> result = new List<Tuple<long,\
    \ long>>();\n        foreach (var row in lst) {\n            foreach (var col\
    \ in row.OrderByDescending(c => c)) {\n                if (col == x) {\n     \
    \               result.Add(new Tuple<long, long>(row.IndexOf(x), col.IndexOf(x)));\n\
    \                }\n            }\n        }\n        return result.OrderBy(t\
    \ => t.Item1).ThenByDescending(t => t.Item2).ToList();", "        List<Tuple<long,\
    \ long>> result = new List<Tuple<long, long>>();\n        foreach (List<long>\
    \ row in lst) {\n            foreach (long val in row) {\n                if (val\
    \ == x) {\n                    result.Add(new Tuple<long, long>(row.IndexOf(x),\
    \ row.IndexOf(x)));\n                }\n            }\n        }\n        return\
    \ result.OrderBy(x => x.Item1).ThenByDescending(x => x.Item2).ToList();", "  \
    \      List<Tuple<long, long>> result = new List<Tuple<long, long>>();\n     \
    \   foreach (var row in lst) {\n            foreach (var item in row) {\n    \
    \            if (item == x) {\n                    result.Add(new Tuple<long,\
    \ long>(row.IndexOf(item), row.IndexOf(x)));\n                }\n            }\n\
    \        }\n        return result.OrderBy(x => x.Item1).ThenByDescending(x =>\
    \ x.Item2).ToList();", "        List<Tuple<long, long>> result = new List<Tuple<long,\
    \ long>>();\n        foreach (List<long> row in lst) {\n            foreach (long\
    \ num in row) {\n                if (num == x) {\n                    result.Add(new\
    \ Tuple<long, long>(row.IndexOf(x), row.IndexOf(x)));\n                    break;\n\
    \                }\n            }\n        }\n        return result.OrderBy(t\
    \ => t.Item1).ThenByDescending(t => t.Item2).ToList();", "        List<Tuple<long,\
    \ long>> result = new List<Tuple<long, long>>();\n        foreach (List<long>\
    \ row in lst) {\n            foreach (long num in row) {\n                if (num\
    \ == x) {\n                    result.Add(new Tuple<long, long>(row.IndexOf(num),\
    \ row.IndexOf(num)));\n                }\n            }\n        }\n        return\
    \ result.OrderBy(x => x.Item1).ThenByDescending(x => x.Item2).ToList();", "  \
    \      List<Tuple<long, long>> result = new List<Tuple<long, long>>();\n     \
    \   foreach (List<long> row in lst) {\n            foreach (long col in row) {\n\
    \                if (col == x) {\n                    result.Add(new Tuple<long,\
    \ long>(row.IndexOf(x), row.IndexOf(col)));\n                }\n            }\n\
    \        }\n        return result.OrderBy(x => x.Item1).ThenByDescending(x =>\
    \ x.Item2).ToList();", "        List<Tuple<long, long>> result = new List<Tuple<long,\
    \ long>>();\n        foreach (var row in lst) {\n            foreach (var item\
    \ in row) {\n                if (item == x) {\n                    result.Add(new\
    \ Tuple<long, long>(row, row.IndexOf(item)));\n                }\n           \
    \ }\n        }\n        return result.OrderBy(x => x.Item1).ThenByDescending(x\
    \ => x.Item2).ToList();", "        List<Tuple<long, long>> result = new List<Tuple<long,\
    \ long>>();\n        foreach (List<long> row in lst) {\n            foreach (long\
    \ num in row) {\n                if (num == x) {\n                    result.Add(new\
    \ Tuple<long, long>(row.IndexOf(num), row.IndexOf(num) + 1));\n              \
    \  }\n            }\n        }\n        return result.OrderBy(x => x.Item1).ThenByDescending(x\
    \ => x.Item2).ToList();", "        List<Tuple<long, long>> result = new List<Tuple<long,\
    \ long>>();\n        foreach (var row in lst) {\n            foreach (var item\
    \ in row) {\n                if (item == x) {\n                    result.Add(new\
    \ Tuple<long, long>(row.IndexOf(item), row.IndexOf(x)));\n                }\n\
    \            }\n        }\n        return result.OrderBy(x => x.Item1).ThenByDescending(x\
    \ => x.Item2).ToList();"]
stop_tokens:
- "\n    }\n"
