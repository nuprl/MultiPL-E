language: cs
name: HumanEval_2_truncate_number
results:
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive floating point number, it can be decomposed
    into\n    // and integer part (largest integer smaller than given number) and
    decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal
    part of the number.\n    public static float TruncateNumber(float number) {\n
    \       float intPart = 0;\n        float decimalPart = 0;\n        float remainder
    = 0;\n        float temp = 0;\n        float temp2 = 0;\n        float temp3 =
    0;\n        float temp4 = 0;\n        float temp5 = 0;\n        float temp6 =
    0;\n        float temp7 = 0;\n        float temp8 = 0;\n        float temp9 =
    0;\n        float temp10 = 0;\n        float temp11 = 0;\n        float temp12
    = 0;\n        float temp13 = 0;\n        float temp14 = 0;\n        float temp15
    = 0;\n        float temp16 = 0;\n        float temp17 = 0;\n        float temp18
    = 0;\n        float temp19 = 0;\n        float temp20 = 0;\n        float temp21
    = 0;\n        float temp22 = 0;\n        float temp23 = 0;\n        float temp24
    = 0;\n        float temp25 = 0;\n        float temp26 = 0;\n        float temp27
    = 0;\n        float temp28 = 0;\n        float temp29 = 0;\n        float temp30
    = 0;\n        float temp31 = 0;\n        float temp32 = 0;\n        float temp33
    = 0;\n        float temp34 = 0;\n        float temp35 = 0;\n        float temp36
    = 0;\n        float temp37 = 0;\n        float temp38 = 0;\n        float temp39
    = 0;\n        float temp40 = 0;\n        float temp41 = 0;\n        float temp42
    = 0;\n        float temp43 = 0;\n        float temp44 = 0;\n        float temp45
    = 0;\n        float temp46 = 0;\n        float temp47 = 0;\n        float temp48
    = 0;\n        float temp49 = 0;\n        float temp50 = 0;\n        float temp51
    = 0;\n        float temp52 = 0;\n        float temp53 = 0;\n        float temp54
    = 0;\n        float temp55 = 0;\n        float temp56 = 0;\n        float temp57
    = 0;\n        float temp58 = 0;\n        float temp59 = 0;\n        float temp60
    = 0;\n        float temp61 = 0;\n        float temp62 = 0;\n        float temp63
    = 0;\n        float temp64 = 0;\n        float temp65 = 0;\n        float temp66
    = 0;\n        float temp67 = 0;\n        float temp68 = 0;\n        float temp69
    = 0;\n        float temp70 = 0;\n        float temp71 = 0;\n        float temp72
    = 0;\n        float temp73 = 0;\n        float temp74 = 0;\n        float temp75
    = 0;\n        float temp76 = 0;\n        float temp77 = 0;\n        float temp78
    = 0;\n        float temp79 = 0;\n        float temp80 = 0;\n        float temp81
    = 0;\n        float temp82 = 0;\n        float temp83 = 0;\n        \n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(TruncateNumber((3.5f))
    == (0.5f));\n    Debug.Assert(TruncateNumber((1.25f)) == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f))
    == (0.0f));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpgiywqrne.cs(14,15): warning CS0219: The variable ''intPart'' is assigned
    but its value is never used

    /tmp/tmpgiywqrne.cs(15,15): warning CS0219: The variable ''decimalPart'' is assigned
    but its value is never used

    /tmp/tmpgiywqrne.cs(16,15): warning CS0219: The variable ''remainder'' is assigned
    but its value is never used

    /tmp/tmpgiywqrne.cs(17,15): warning CS0219: The variable ''temp'' is assigned
    but its value is never used

    /tmp/tmpgiywqrne.cs(18,15): warning CS0219: The variable ''temp2'' is assigned
    but its value is never used

    /tmp/tmpgiywqrne.cs(19,15): warning CS0219: The variable ''temp3'' is assigned
    but its value is never used

    /tmp/tmpgiywqrne.cs(20,15): warning CS0219: The variable ''temp4'' is assigned
    but its value is never used

    /tmp/tmpgiywqrne.cs(21,15): warning CS0219: The variable ''temp5'' is assigned
    but its value is never used

    /tmp/tmpgiywqrne.cs(22,15): warning CS0219: The variable ''temp6'' is assigned
    but its value is never used

    /tmp/tmpgiywqrne.cs(23,15): warning CS0219: The variable ''temp7'' is assigned
    but its value is never used

    /tmp/tmpgiywqrne.cs(24,15): warning CS0219: The variable ''temp8'' is assigned
    but its value is never used

    /tmp/tmpgiywqrne.cs(25,15): warning CS0219: The variable ''temp9'' is assigned
    but its value is never used

    /tmp/tmpgiywqrne.cs(26,15): warning CS0219: The variable ''temp10'' is assigned
    but its value is never used

    /tmp/tmpgiywqrne.cs(27,15): warning CS0219: The variable ''temp11'' is assigned
    but its value is never used

    /tmp/tmpgiywqrne.cs(28,15): warning CS0219: The variable ''temp12'' is assigned
    but its value is never used

    /tmp/tmpgiywqrne.cs(29,15): warning CS0219: The variable ''temp13'' is assigned
    but its value is never used

    /tmp/tmpgiywqrne.cs(30,15): warning CS0219: The variable ''temp14'' is assigned
    but its value is never used

    /tmp/tmpgiywqrne.cs(31,15): warning CS0219: The variable ''temp15'' is assigned
    but its value is never used

    /tmp/tmpgiywqr'
  timestamp: 1659977071
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive floating point number, it can be decomposed
    into\n    // and integer part (largest integer smaller than given number) and
    decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal
    part of the number.\n    public static float TruncateNumber(float number) {\n
    \       float integerPart = number;\n        float decimalPart = 1;\n        while
    (decimalPart < 1) {\n            integerPart *= 10;\n            decimalPart *=
    10;\n        }\n        return integerPart;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(TruncateNumber((3.5f)) == (0.5f));\n    Debug.Assert(TruncateNumber((1.25f))
    == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f)) == (0.0f));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <35c907c7fe8b43149592683b508ac760>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <35c907c7fe8b43149592683b508ac760>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977071
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive floating point number, it can be decomposed
    into\n    // and integer part (largest integer smaller than given number) and
    decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal
    part of the number.\n    public static float TruncateNumber(float number) {\n
    \       Decimal d = new Decimal(number);\n        Decimal dTruncated = new Decimal(d.ToString().Substring(0,
    d.ToString().IndexOf('.')));\n        return dTruncated.ToSingle();\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(TruncateNumber((3.5f)) ==
    (0.5f));\n    Debug.Assert(TruncateNumber((1.25f)) == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f))
    == (0.0f));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp4tw_xev1.cs(15,42): error CS1503: Argument 1: cannot convert from ''string''
    to ''int''

    /tmp/tmp4tw_xev1.cs(16,27): error CS7036: There is no argument given that corresponds
    to the required formal parameter ''d'' of ''decimal.ToSingle(decimal)''

    '
  timestamp: 1659977071
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive floating point number, it can be decomposed
    into\n    // and integer part (largest integer smaller than given number) and
    decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal
    part of the number.\n    public static float TruncateNumber(float number) {\n
    \       float intPart = 0;\n        float decimalPart = 0;\n        float temp
    = 0;\n        float temp2 = 0;\n        float temp3 = 0;\n        float temp4
    = 0;\n        float temp5 = 0;\n        float temp6 = 0;\n        float temp7
    = 0;\n        float temp8 = 0;\n        float temp9 = 0;\n        float temp10
    = 0;\n        float temp11 = 0;\n        float temp12 = 0;\n        float temp13
    = 0;\n        float temp14 = 0;\n        float temp15 = 0;\n        float temp16
    = 0;\n        float temp17 = 0;\n        float temp18 = 0;\n        float temp19
    = 0;\n        float temp20 = 0;\n        float temp21 = 0;\n        float temp22
    = 0;\n        float temp23 = 0;\n        float temp24 = 0;\n        float temp25
    = 0;\n        float temp26 = 0;\n        float temp27 = 0;\n        float temp28
    = 0;\n        float temp29 = 0;\n        float temp30 = 0;\n        float temp31
    = 0;\n        float temp32 = 0;\n        float temp33 = 0;\n        float temp34
    = 0;\n        float temp35 = 0;\n        float temp36 = 0;\n        float temp37
    = 0;\n        float temp38 = 0;\n        float temp39 = 0;\n        float temp40
    = 0;\n        float temp41 = 0;\n        float temp42 = 0;\n        float temp43
    = 0;\n        float temp44 = 0;\n        float temp45 = 0;\n        float temp46
    = 0;\n        float temp47 = 0;\n        float temp48 = 0;\n        float temp49
    = 0;\n        float temp50 = 0;\n        float temp51 = 0;\n        float temp52
    = 0;\n        float temp53 = 0;\n        float temp54 = 0;\n        float temp55
    = 0;\n        float temp56 = 0;\n        float temp57 = 0;\n        float temp58
    = 0;\n        float temp59 = 0;\n        float temp60 = 0;\n        float temp61
    = 0;\n        float temp62 = 0;\n        float temp63 = 0;\n        float temp64
    = 0;\n        float temp65 = 0;\n        float temp66 = 0;\n        float temp67
    = 0;\n        float temp68 = 0;\n        float temp69 = 0;\n        float temp70
    = 0;\n        float temp71 = 0;\n        float temp72 = 0;\n        float temp73
    = 0;\n        float temp74 = 0;\n        float temp75 = 0;\n        float temp76
    = 0;\n        float temp77 = 0;\n        float temp78 = 0;\n        float temp79
    = 0;\n        float temp80 = 0;\n        float temp81 = 0;\n        float temp82
    = 0;\n        float temp83 = 0;\n        float temp84 = 0;\n        \n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(TruncateNumber((3.5f))
    == (0.5f));\n    Debug.Assert(TruncateNumber((1.25f)) == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f))
    == (0.0f));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp1s2tr_rx.cs(14,15): warning CS0219: The variable ''intPart'' is assigned
    but its value is never used

    /tmp/tmp1s2tr_rx.cs(15,15): warning CS0219: The variable ''decimalPart'' is assigned
    but its value is never used

    /tmp/tmp1s2tr_rx.cs(16,15): warning CS0219: The variable ''temp'' is assigned
    but its value is never used

    /tmp/tmp1s2tr_rx.cs(17,15): warning CS0219: The variable ''temp2'' is assigned
    but its value is never used

    /tmp/tmp1s2tr_rx.cs(18,15): warning CS0219: The variable ''temp3'' is assigned
    but its value is never used

    /tmp/tmp1s2tr_rx.cs(19,15): warning CS0219: The variable ''temp4'' is assigned
    but its value is never used

    /tmp/tmp1s2tr_rx.cs(20,15): warning CS0219: The variable ''temp5'' is assigned
    but its value is never used

    /tmp/tmp1s2tr_rx.cs(21,15): warning CS0219: The variable ''temp6'' is assigned
    but its value is never used

    /tmp/tmp1s2tr_rx.cs(22,15): warning CS0219: The variable ''temp7'' is assigned
    but its value is never used

    /tmp/tmp1s2tr_rx.cs(23,15): warning CS0219: The variable ''temp8'' is assigned
    but its value is never used

    /tmp/tmp1s2tr_rx.cs(24,15): warning CS0219: The variable ''temp9'' is assigned
    but its value is never used

    /tmp/tmp1s2tr_rx.cs(25,15): warning CS0219: The variable ''temp10'' is assigned
    but its value is never used

    /tmp/tmp1s2tr_rx.cs(26,15): warning CS0219: The variable ''temp11'' is assigned
    but its value is never used

    /tmp/tmp1s2tr_rx.cs(27,15): warning CS0219: The variable ''temp12'' is assigned
    but its value is never used

    /tmp/tmp1s2tr_rx.cs(28,15): warning CS0219: The variable ''temp13'' is assigned
    but its value is never used

    /tmp/tmp1s2tr_rx.cs(29,15): warning CS0219: The variable ''temp14'' is assigned
    but its value is never used

    /tmp/tmp1s2tr_rx.cs(30,15): warning CS0219: The variable ''temp15'' is assigned
    but its value is never used

    /tmp/tmp1s2tr_rx.cs(31,15): warning CS0219: The variable ''temp16'' is assigned
    but its value is never used

    /tmp/tmp1s2tr_rx.'
  timestamp: 1659977071
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive floating point number, it can be decomposed
    into\n    // and integer part (largest integer smaller than given number) and
    decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal
    part of the number.\n    public static float TruncateNumber(float number) {\n
    \       float integerPart = 0;\n        float decimalPart = 0;\n        float
    temp = 0;\n        float temp2 = 0;\n        float temp3 = 0;\n        float temp4
    = 0;\n        float temp5 = 0;\n        float temp6 = 0;\n        float temp7
    = 0;\n        float temp8 = 0;\n        float temp9 = 0;\n        float temp10
    = 0;\n        float temp11 = 0;\n        float temp12 = 0;\n        float temp13
    = 0;\n        float temp14 = 0;\n        float temp15 = 0;\n        float temp16
    = 0;\n        float temp17 = 0;\n        float temp18 = 0;\n        float temp19
    = 0;\n        float temp20 = 0;\n        float temp21 = 0;\n        float temp22
    = 0;\n        float temp23 = 0;\n        float temp24 = 0;\n        float temp25
    = 0;\n        float temp26 = 0;\n        float temp27 = 0;\n        float temp28
    = 0;\n        float temp29 = 0;\n        float temp30 = 0;\n        float temp31
    = 0;\n        float temp32 = 0;\n        float temp33 = 0;\n        float temp34
    = 0;\n        float temp35 = 0;\n        float temp36 = 0;\n        float temp37
    = 0;\n        float temp38 = 0;\n        float temp39 = 0;\n        float temp40
    = 0;\n        float temp41 = 0;\n        float temp42 = 0;\n        float temp43
    = 0;\n        float temp44 = 0;\n        float temp45 = 0;\n        float temp46
    = 0;\n        float temp47 = 0;\n        float temp48 = 0;\n        float temp49
    = 0;\n        float temp50 = 0;\n        float temp51 = 0;\n        float temp52
    = 0;\n        float temp53 = 0;\n        float temp54 = 0;\n        float temp55
    = 0;\n        float temp56 = 0;\n        float temp57 = 0;\n        float temp58
    = 0;\n        float temp59 = 0;\n        float temp60 = 0;\n        float temp61
    = 0;\n        float temp62 = 0;\n        float temp63 = 0;\n        float temp64
    = 0;\n        float temp65 = 0;\n        float temp66 = 0;\n        float temp67
    = 0;\n        float temp68 = 0;\n        float temp69 = 0;\n        float temp70
    = 0;\n        float temp71 = 0;\n        float temp72 = 0;\n        float temp73
    = 0;\n        float temp74 = 0;\n        float temp75 = 0;\n        float temp76
    = 0;\n        float temp77 = 0;\n        float temp78 = 0;\n        float temp79
    = 0;\n        float temp80 = 0;\n        float temp81 = 0;\n        float temp82
    = 0;\n        float temp83 = 0;\n        float temp84 = 0;\n        \n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(TruncateNumber((3.5f))
    == (0.5f));\n    Debug.Assert(TruncateNumber((1.25f)) == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f))
    == (0.0f));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpvu1akkb4.cs(14,15): warning CS0219: The variable ''integerPart'' is assigned
    but its value is never used

    /tmp/tmpvu1akkb4.cs(15,15): warning CS0219: The variable ''decimalPart'' is assigned
    but its value is never used

    /tmp/tmpvu1akkb4.cs(16,15): warning CS0219: The variable ''temp'' is assigned
    but its value is never used

    /tmp/tmpvu1akkb4.cs(17,15): warning CS0219: The variable ''temp2'' is assigned
    but its value is never used

    /tmp/tmpvu1akkb4.cs(18,15): warning CS0219: The variable ''temp3'' is assigned
    but its value is never used

    /tmp/tmpvu1akkb4.cs(19,15): warning CS0219: The variable ''temp4'' is assigned
    but its value is never used

    /tmp/tmpvu1akkb4.cs(20,15): warning CS0219: The variable ''temp5'' is assigned
    but its value is never used

    /tmp/tmpvu1akkb4.cs(21,15): warning CS0219: The variable ''temp6'' is assigned
    but its value is never used

    /tmp/tmpvu1akkb4.cs(22,15): warning CS0219: The variable ''temp7'' is assigned
    but its value is never used

    /tmp/tmpvu1akkb4.cs(23,15): warning CS0219: The variable ''temp8'' is assigned
    but its value is never used

    /tmp/tmpvu1akkb4.cs(24,15): warning CS0219: The variable ''temp9'' is assigned
    but its value is never used

    /tmp/tmpvu1akkb4.cs(25,15): warning CS0219: The variable ''temp10'' is assigned
    but its value is never used

    /tmp/tmpvu1akkb4.cs(26,15): warning CS0219: The variable ''temp11'' is assigned
    but its value is never used

    /tmp/tmpvu1akkb4.cs(27,15): warning CS0219: The variable ''temp12'' is assigned
    but its value is never used

    /tmp/tmpvu1akkb4.cs(28,15): warning CS0219: The variable ''temp13'' is assigned
    but its value is never used

    /tmp/tmpvu1akkb4.cs(29,15): warning CS0219: The variable ''temp14'' is assigned
    but its value is never used

    /tmp/tmpvu1akkb4.cs(30,15): warning CS0219: The variable ''temp15'' is assigned
    but its value is never used

    /tmp/tmpvu1akkb4.cs(31,15): warning CS0219: The variable ''temp16'' is assigned
    but its value is never used

    /tmp/tmpvu1ak'
  timestamp: 1659977071
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive floating point number, it can be decomposed
    into\n    // and integer part (largest integer smaller than given number) and
    decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal
    part of the number.\n    public static float TruncateNumber(float number) {\n
    \       BigInteger bigInteger = new BigInteger(number.ToString());\n        BigInteger
    bigIntegerDecimalPart = bigInteger.Remainder(BigInteger.One);\n        float truncatedNumber
    = (float)bigIntegerDecimalPart;\n        return truncatedNumber;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(TruncateNumber((3.5f)) ==
    (0.5f));\n    Debug.Assert(TruncateNumber((1.25f)) == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f))
    == (0.0f));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpbhxqigwe.cs(14,48): error CS1503: Argument 1: cannot convert from ''string''
    to ''int''

    /tmp/tmpbhxqigwe.cs(15,55): error CS7036: There is no argument given that corresponds
    to the required formal parameter ''divisor'' of ''BigInteger.Remainder(BigInteger,
    BigInteger)''

    '
  timestamp: 1659977071
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive floating point number, it can be decomposed
    into\n    // and integer part (largest integer smaller than given number) and
    decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal
    part of the number.\n    public static float TruncateNumber(float number) {\n
    \       BigInteger bigInteger = new BigInteger(number);\n        BigInteger bigIntegerRemainder
    = new BigInteger(number);\n        bigIntegerRemainder = bigIntegerRemainder.Remainder(BigInteger.One);\n
    \       bigInteger = bigInteger.Remainder(BigInteger.One);\n        float truncatedNumber
    = (float)bigInteger;\n        return truncatedNumber;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(TruncateNumber((3.5f)) == (0.5f));\n
    \   Debug.Assert(TruncateNumber((1.25f)) == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f))
    == (0.0f));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpi70u4xu5.cs(16,51): error CS7036: There is no argument given that corresponds
    to the required formal parameter ''divisor'' of ''BigInteger.Remainder(BigInteger,
    BigInteger)''

    /tmp/tmpi70u4xu5.cs(17,33): error CS7036: There is no argument given that corresponds
    to the required formal parameter ''divisor'' of ''BigInteger.Remainder(BigInteger,
    BigInteger)''

    '
  timestamp: 1659977071
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive floating point number, it can be decomposed
    into\n    // and integer part (largest integer smaller than given number) and
    decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal
    part of the number.\n    public static float TruncateNumber(float number) {\n
    \       float integerPart = number;\n        float decimalPart = number - integerPart;\n
    \       return decimalPart;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(TruncateNumber((3.5f)) == (0.5f));\n    Debug.Assert(TruncateNumber((1.25f))
    == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f)) == (0.0f));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <47e9a4810ba2493e918e49632d104bca>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <47e9a4810ba2493e918e49632d104bca>:0
    \n"
  stdout: ''
  timestamp: 1659977071
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive floating point number, it can be decomposed
    into\n    // and integer part (largest integer smaller than given number) and
    decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal
    part of the number.\n    public static float TruncateNumber(float number) {\n
    \       float integerPart;\n        float decimalPart;\n        float remainder;\n
    \       float temp;\n        float temp2;\n        float temp3;\n        float
    temp4;\n        float temp5;\n        float temp6;\n        float temp7;\n        float
    temp8;\n        float temp9;\n        float temp10;\n        float temp11;\n        float
    temp12;\n        float temp13;\n        float temp14;\n        float temp15;\n
    \       float temp16;\n        float temp17;\n        float temp18;\n        float
    temp19;\n        float temp20;\n        float temp21;\n        float temp22;\n
    \       float temp23;\n        float temp24;\n        float temp25;\n        float
    temp26;\n        float temp27;\n        float temp28;\n        float temp29;\n
    \       float temp30;\n        float temp31;\n        float temp32;\n        float
    temp33;\n        float temp34;\n        float temp35;\n        float temp36;\n
    \       float temp37;\n        float temp38;\n        float temp39;\n        float
    temp40;\n        float temp41;\n        float temp42;\n        float temp43;\n
    \       float temp44;\n        float temp45;\n        float temp46;\n        float
    temp47;\n        float temp48;\n        float temp49;\n        float temp50;\n
    \       float temp51;\n        float temp52;\n        float temp53;\n        float
    temp54;\n        float temp55;\n        float temp56;\n        float temp57;\n
    \       float temp58;\n        float temp59;\n        float temp60;\n        float
    temp61;\n        float temp62;\n        float temp63;\n        float temp64;\n
    \       float temp65;\n        float temp66;\n        float temp67;\n        float
    temp68;\n        float temp69;\n        float temp70;\n        float temp71;\n
    \       float temp72;\n        float temp73;\n        float temp74;\n        float
    temp75;\n        float temp76;\n        float temp77;\n        float temp78;\n
    \       float temp79;\n        float temp80;\n        float temp81;\n        float
    temp82;\n        float temp83;\n        float temp84;\n        float temp85;\n
    \       float temp86\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(TruncateNumber((3.5f))
    == (0.5f));\n    Debug.Assert(TruncateNumber((1.25f)) == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f))
    == (0.0f));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp7ohf2t3r.cs(102,21): error CS1002: ; expected

    '
  timestamp: 1659977070
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive floating point number, it can be decomposed
    into\n    // and integer part (largest integer smaller than given number) and
    decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal
    part of the number.\n    public static float TruncateNumber(float number) {\n
    \       float integerPart;\n        float decimalPart;\n        float truncatedNumber;\n
    \       float remainder;\n        float temp;\n        integerPart = number;\n
    \       decimalPart = 0;\n        while (integerPart > 0) {\n            temp
    = integerPart % 10;\n            integerPart = integerPart / 10;\n            decimalPart
    = decimalPart + temp;\n        }\n        truncatedNumber = decimalPart;\n        remainder
    = integerPart;\n        while (truncatedNumber != 0) {\n            temp = truncatedNumber
    % 10;\n            truncatedNumber = truncatedNumber / 10;\n            remainder
    = remainder + temp;\n        }\n        return remainder;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(TruncateNumber((3.5f)) == (0.5f));\n
    \   Debug.Assert(TruncateNumber((1.25f)) == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f))
    == (0.0f));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f29f9866ea1a4817a2ff436102ef402b>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f29f9866ea1a4817a2ff436102ef402b>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977071
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive floating point number, it can be decomposed
    into\n    // and integer part (largest integer smaller than given number) and
    decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal
    part of the number.\n    public static float TruncateNumber(float number) {\n
    \       float truncatedNumber = number;\n        float integerPart = truncatedNumber
    / 1;\n        float decimalPart = truncatedNumber - integerPart * 1;\n        return
    decimalPart;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(TruncateNumber((3.5f))
    == (0.5f));\n    Debug.Assert(TruncateNumber((1.25f)) == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f))
    == (0.0f));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <fcaa2171a0854b48bc8bb1b8d3f53398>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <fcaa2171a0854b48bc8bb1b8d3f53398>:0
    \n"
  stdout: ''
  timestamp: 1659977071
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive floating point number, it can be decomposed
    into\n    // and integer part (largest integer smaller than given number) and
    decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal
    part of the number.\n    public static float TruncateNumber(float number) {\n
    \       Debug.Assert(number >= 0);\n        Debug.Assert(number < 1);\n        Debug.Assert(number
    % 1 == 0);\n        Debug.Assert(number > 0);\n        Debug.Assert(number < float.MaxValue);\n
    \       Debug.Assert(number > float.MinValue);\n        Debug.Assert(number <
    float.MaxValue - 1);\n        Debug.Assert(number > float.MinValue - 1);\n        Debug.Assert(number
    < float.MaxValue - 2);\n        Debug.Assert(number > float.MinValue - 2);\n        Debug.Assert(number
    < float.MaxValue - 3);\n        Debug.Assert(number > float.MinValue - 3);\n        Debug.Assert(number
    < float.MaxValue - 4);\n        Debug.Assert(number > float.MinValue - 4);\n        Debug.Assert(number
    < float.MaxValue - 5);\n        Debug.Assert(number > float.MinValue - 5);\n        Debug.Assert(number
    < float.MaxValue - 6);\n        Debug.Assert(number > float.MinValue - 6);\n        Debug.Assert(number
    < float.MaxValue - 7);\n        Debug.Assert(number > float.MinValue - 7);\n        Debug.Assert(number
    < float.MaxValue - 8);\n        Debug.Assert(number > float.MinValue - 8);\n        Debug.Assert(number
    < float.MaxValue - 9);\n        Debug.Assert(number > float.MinValue - 9);\n        Debug.Assert(number
    < float.MaxValue - 10);\n        Debug.Assert(number > float.MinValue - 10);\n
    \       Debug.Assert(number < float.MaxValue - 11);\n        Debug.Assert(number
    > float.MinValue - 11);\n        Debug.Assert(number < float.MaxValue - 12);\n
    \       Debug.Assert(number > float.MinValue - 12);\n        Debug.Assert(number
    < float.MaxValue - 13);\n        Debug.Assert(number > float.MinValue - 13);\n
    \       Debug.Assert(number < float.MaxValue - 14);\n        Debug.Assert(number
    > float.MinValue - 14);\n        Debug.Assert(number < float.MaxValue - 15);\n
    \       Debug.Assert(number > float.\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(TruncateNumber((3.5f)) == (0.5f));\n    Debug.Assert(TruncateNumber((1.25f))
    == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f)) == (0.0f));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpwwnwdwws.cs(49,37): error CS1001: Identifier expected

    /tmp/tmpwwnwdwws.cs(49,37): error CS1026: ) expected

    /tmp/tmpwwnwdwws.cs(49,37): error CS1002: ; expected

    '
  timestamp: 1659977070
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive floating point number, it can be decomposed
    into\n    // and integer part (largest integer smaller than given number) and
    decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal
    part of the number.\n    public static float TruncateNumber(float number) {\n
    \       float truncatedNumber = number;\n        float integerPart;\n        float
    decimalPart;\n        float remainder;\n        float quotient;\n        float
    temp;\n        float temp2;\n        float temp3;\n        float temp4;\n        float
    temp5;\n        float temp6;\n        float temp7;\n        float temp8;\n        float
    temp9;\n        float temp10;\n        float temp11;\n        float temp12;\n
    \       float temp13;\n        float temp14;\n        float temp15;\n        float
    temp16;\n        float temp17;\n        float temp18;\n        float temp19;\n
    \       float temp20;\n        float temp21;\n        float temp22;\n        float
    temp23;\n        float temp24;\n        float temp25;\n        float temp26;\n
    \       float temp27;\n        float temp28;\n        float temp29;\n        float
    temp30;\n        float temp31;\n        float temp32;\n        float temp33;\n
    \       float temp34;\n        float temp35;\n        float temp36;\n        float
    temp37;\n        float temp38;\n        float temp39;\n        float temp40;\n
    \       float temp41;\n        float temp42;\n        float temp43;\n        float
    temp44;\n        float temp45;\n        float temp46;\n        float temp47;\n
    \       float temp48;\n        float temp49;\n        float temp50;\n        float
    temp51;\n        float temp52;\n        float temp53;\n        float temp54;\n
    \       float temp55;\n        float temp56;\n        float temp57;\n        float
    temp58;\n        float temp59;\n        float temp60;\n        float temp61;\n
    \       float temp62;\n        float temp63;\n        float temp64;\n        float
    temp65;\n        float temp66;\n        float temp67;\n        float temp68;\n
    \       float temp69;\n        float temp70;\n        float temp71;\n        float
    temp72;\n        float temp73;\n        float temp74;\n        float temp75;\n
    \       float temp76;\n        float temp77;\n        float temp78;\n        float
    temp79;\n        float temp80;\n        float temp81;\n        float temp82;\n
    \       float temp83;\n        float temp\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(TruncateNumber((3.5f)) == (0.5f));\n    Debug.Assert(TruncateNumber((1.25f))
    == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f)) == (0.0f));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpmqscsg4q.cs(102,19): error CS1002: ; expected

    '
  timestamp: 1659977070
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive floating point number, it can be decomposed
    into\n    // and integer part (largest integer smaller than given number) and
    decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal
    part of the number.\n    public static float TruncateNumber(float number) {\n
    \       float intPart;\n        float decimalPart;\n        float temp;\n        intPart
    = number;\n        temp = number;\n        while (temp > 0) {\n            temp
    = temp / 10;\n            intPart = intPart * 10;\n        }\n        decimalPart
    = number - intPart;\n        return decimalPart;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(TruncateNumber((3.5f)) == (0.5f));\n    Debug.Assert(TruncateNumber((1.25f))
    == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f)) == (0.0f));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <2d80bfc21edc4fc08b69093d4650bf26>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <2d80bfc21edc4fc08b69093d4650bf26>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977071
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive floating point number, it can be decomposed
    into\n    // and integer part (largest integer smaller than given number) and
    decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal
    part of the number.\n    public static float TruncateNumber(float number) {\n
    \       float integerPart;\n        float decimalPart;\n        float remainder;\n
    \       float truncatedNumber;\n        float temp;\n        float temp2;\n        float
    temp3;\n        float temp4;\n        float temp5;\n        float temp6;\n        float
    temp7;\n        float temp8;\n        float temp9;\n        float temp10;\n        float
    temp11;\n        float temp12;\n        float temp13;\n        float temp14;\n
    \       float temp15;\n        float temp16;\n        float temp17;\n        float
    temp18;\n        float temp19;\n        float temp20;\n        float temp21;\n
    \       float temp22;\n        float temp23;\n        float temp24;\n        float
    temp25;\n        float temp26;\n        float temp27;\n        float temp28;\n
    \       float temp29;\n        float temp30;\n        float temp31;\n        float
    temp32;\n        float temp33;\n        float temp34;\n        float temp35;\n
    \       float temp36;\n        float temp37;\n        float temp38;\n        float
    temp39;\n        float temp40;\n        float temp41;\n        float temp42;\n
    \       float temp43;\n        float temp44;\n        float temp45;\n        float
    temp46;\n        float temp47;\n        float temp48;\n        float temp49;\n
    \       float temp50;\n        float temp51;\n        float temp52;\n        float
    temp53;\n        float temp54;\n        float temp55;\n        float temp56;\n
    \       float temp57;\n        float temp58;\n        float temp59;\n        float
    temp60;\n        float temp61;\n        float temp62;\n        float temp63;\n
    \       float temp64;\n        float temp65;\n        float temp66;\n        float
    temp67;\n        float temp68;\n        float temp69;\n        float temp70;\n
    \       float temp71;\n        float temp72;\n        float temp73;\n        float
    temp74;\n        float temp75;\n        float temp76;\n        float temp77;\n
    \       float temp78;\n        float temp79;\n        float temp80;\n        float
    temp81;\n        float temp82;\n        float temp83;\n        float temp84;\n
    \       float temp\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(TruncateNumber((3.5f))
    == (0.5f));\n    Debug.Assert(TruncateNumber((1.25f)) == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f))
    == (0.0f));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmphklc0h9u.cs(102,19): error CS1002: ; expected

    '
  timestamp: 1659977070
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive floating point number, it can be decomposed
    into\n    // and integer part (largest integer smaller than given number) and
    decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal
    part of the number.\n    public static float TruncateNumber(float number) {\n
    \       float integerPart;\n        float decimalPart;\n        float truncatedNumber;\n
    \       float remainder;\n        float quotient;\n        float quotientRemainder;\n
    \       float quotientRemainderRemainder;\n        float quotientRemainderRemainderRemainder;\n
    \       float quotientRemainderRemainderRemainderRemainder;\n        float quotientRemainderRemainderRemainderRemainderRemainder;\n
    \       float quotientRemainderRemainderRemainderRemainderRemainderRemainder;\n
    \       float quotientRemainderRemainderRemainderRemainderRemainderRemainderRemainder;\n
    \       float quotientRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainder;\n
    \       float quotientRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainder;\n
    \       float quotientRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainder;\n
    \       float quotientRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainder;\n
    \       float quotientRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainder;\n
    \       float quotientRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainder;\n
    \       float quotientRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainder;\n
    \       float quotientRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainder;\n
    \       float quotientRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainder;\n
    \       float quotientRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainder;\n
    \       float quotientRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainder;\n
    \       float quotientRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainder;\n
    \       float quotientRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainder;\n
    \       float quotientRemainderRemainderRemainderRemain\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(TruncateNumber((3.5f)) == (0.5f));\n
    \   Debug.Assert(TruncateNumber((1.25f)) == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f))
    == (0.0f));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpyk1rbeli.cs(39,56): error CS1002: ; expected

    '
  timestamp: 1659977070
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive floating point number, it can be decomposed
    into\n    // and integer part (largest integer smaller than given number) and
    decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal
    part of the number.\n    public static float TruncateNumber(float number) {\n
    \       float integerPart = 0;\n        float decimalPart = 0;\n        float
    remainder = 0;\n        float quotient = 0;\n        float temp = 0;\n        float
    temp2 = 0;\n        float temp3 = 0;\n        float temp4 = 0;\n        float
    temp5 = 0;\n        float temp6 = 0;\n        float temp7 = 0;\n        float
    temp8 = 0;\n        float temp9 = 0;\n        float temp10 = 0;\n        float
    temp11 = 0;\n        float temp12 = 0;\n        float temp13 = 0;\n        float
    temp14 = 0;\n        float temp15 = 0;\n        float temp16 = 0;\n        float
    temp17 = 0;\n        float temp18 = 0;\n        float temp19 = 0;\n        float
    temp20 = 0;\n        float temp21 = 0;\n        float temp22 = 0;\n        float
    temp23 = 0;\n        float temp24 = 0;\n        float temp25 = 0;\n        float
    temp26 = 0;\n        float temp27 = 0;\n        float temp28 = 0;\n        float
    temp29 = 0;\n        float temp30 = 0;\n        float temp31 = 0;\n        float
    temp32 = 0;\n        float temp33 = 0;\n        float temp34 = 0;\n        float
    temp35 = 0;\n        float temp36 = 0;\n        float temp37 = 0;\n        float
    temp38 = 0;\n        float temp39 = 0;\n        float temp40 = 0;\n        float
    temp41 = 0;\n        float temp42 = 0;\n        float temp43 = 0;\n        float
    temp44 = 0;\n        float temp45 = 0;\n        float temp46 = 0;\n        float
    temp47 = 0;\n        float temp48 = 0;\n        float temp49 = 0;\n        float
    temp50 = 0;\n        float temp51 = 0;\n        float temp52 = 0;\n        float
    temp53 = 0;\n        float temp54 = 0;\n        float temp55 = 0;\n        float
    temp56 = 0;\n        float temp57 = 0;\n        float temp58 = 0;\n        float
    temp59 = 0;\n        float temp60 = 0;\n        float temp61 = 0;\n        float
    temp62 = 0;\n        float temp63 = 0;\n        float temp64 = 0;\n        float
    temp65 = 0;\n        float temp66 = 0;\n        float temp67 = 0;\n        float
    temp68 = 0;\n        float temp69 = 0;\n        float temp70 = 0;\n        float
    temp71 = 0;\n        float temp72 = 0;\n        float temp73 = 0;\n        float
    temp74 = 0;\n        float temp75 = 0;\n        float temp76 = 0;\n        float
    temp77 = 0;\n        float temp78 = 0;\n        float temp79 = 0;\n        float
    temp80 = 0;\n        float temp81 = 0;\n        float temp82 = 0;\n        \n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(TruncateNumber((3.5f))
    == (0.5f));\n    Debug.Assert(TruncateNumber((1.25f)) == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f))
    == (0.0f));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmph6sg7c57.cs(14,15): warning CS0219: The variable ''integerPart'' is assigned
    but its value is never used

    /tmp/tmph6sg7c57.cs(15,15): warning CS0219: The variable ''decimalPart'' is assigned
    but its value is never used

    /tmp/tmph6sg7c57.cs(16,15): warning CS0219: The variable ''remainder'' is assigned
    but its value is never used

    /tmp/tmph6sg7c57.cs(17,15): warning CS0219: The variable ''quotient'' is assigned
    but its value is never used

    /tmp/tmph6sg7c57.cs(18,15): warning CS0219: The variable ''temp'' is assigned
    but its value is never used

    /tmp/tmph6sg7c57.cs(19,15): warning CS0219: The variable ''temp2'' is assigned
    but its value is never used

    /tmp/tmph6sg7c57.cs(20,15): warning CS0219: The variable ''temp3'' is assigned
    but its value is never used

    /tmp/tmph6sg7c57.cs(21,15): warning CS0219: The variable ''temp4'' is assigned
    but its value is never used

    /tmp/tmph6sg7c57.cs(22,15): warning CS0219: The variable ''temp5'' is assigned
    but its value is never used

    /tmp/tmph6sg7c57.cs(23,15): warning CS0219: The variable ''temp6'' is assigned
    but its value is never used

    /tmp/tmph6sg7c57.cs(24,15): warning CS0219: The variable ''temp7'' is assigned
    but its value is never used

    /tmp/tmph6sg7c57.cs(25,15): warning CS0219: The variable ''temp8'' is assigned
    but its value is never used

    /tmp/tmph6sg7c57.cs(26,15): warning CS0219: The variable ''temp9'' is assigned
    but its value is never used

    /tmp/tmph6sg7c57.cs(27,15): warning CS0219: The variable ''temp10'' is assigned
    but its value is never used

    /tmp/tmph6sg7c57.cs(28,15): warning CS0219: The variable ''temp11'' is assigned
    but its value is never used

    /tmp/tmph6sg7c57.cs(29,15): warning CS0219: The variable ''temp12'' is assigned
    but its value is never used

    /tmp/tmph6sg7c57.cs(30,15): warning CS0219: The variable ''temp13'' is assigned
    but its value is never used

    /tmp/tmph6sg7c57.cs(31,15): warning CS0219: The variable ''temp14'' is assigned
    but its value is never used

    /tmp/tmp'
  timestamp: 1659977071
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive floating point number, it can be decomposed
    into\n    // and integer part (largest integer smaller than given number) and
    decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal
    part of the number.\n    public static float TruncateNumber(float number) {\n
    \       float integerPart = 0;\n        float decimalPart = 0;\n        float
    fractionalPart = 0;\n        float fractionalPartRemainder = 0;\n        float
    fractionalPartRemainderRemainder = 0;\n        float fractionalPartRemainderRemainderRemainder
    = 0;\n        float fractionalPartRemainderRemainderRemainderRemainder = 0;\n
    \       float fractionalPartRemainderRemainderRemainderRemainderRemainder = 0;\n
    \       float fractionalPartRemainderRemainderRemainderRemainderRemainderRemainder
    = 0;\n        float fractionalPartRemainderRemainderRemainderRemainderRemainderRemainderRemainder
    = 0;\n        float fractionalPartRemainderRemainderRemainderRemainderRemainderRemainderRemainder
    = 0;\n        float fractionalPartRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainder
    = 0;\n        float fractionalPartRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainder
    = 0;\n        float fractionalPartRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainder
    = 0;\n        float fractionalPartRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainder
    = 0;\n        float fractionalPartRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainder
    = 0;\n        float fractionalPartRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainder
    = 0;\n        float fractionalPartRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainder
    = 0;\n        float fractionalPartRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainder
    = 0;\n        float fractionalPartRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainder
    = 0;\n        float fractionalPartRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainder
    = 0;\n        float fractionalPartRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainder
    = 0;\n        float fractionalPartRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainder
    = 0;\n        float fractionalPartRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainder
    = 0;\n        float fractionalPartRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainder
    = 0;\n        float fractionalPartRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainder
    = 0;\n        float \n    }\n    public static void Main(string[] args) {\n    Debug.Assert(TruncateNumber((3.5f))
    == (0.5f));\n    Debug.Assert(TruncateNumber((1.25f)) == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f))
    == (0.0f));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp2gjpngye.cs(40,14): error CS1001: Identifier expected

    /tmp/tmp2gjpngye.cs(40,14): error CS1002: ; expected

    '
  timestamp: 1659977070
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive floating point number, it can be decomposed
    into\n    // and integer part (largest integer smaller than given number) and
    decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal
    part of the number.\n    public static float TruncateNumber(float number) {\n
    \       float integerPart;\n        float decimalPart;\n        float remainder;\n
    \       float truncatedNumber;\n        float truncatedIntegerPart;\n        float
    truncatedDecimalPart;\n        float truncatedRemainder;\n        float truncatedTruncatedNumber;\n
    \       float truncatedTruncatedIntegerPart;\n        float truncatedTruncatedDecimalPart;\n
    \       float truncatedTruncatedRemainder;\n        float truncatedTruncatedTruncatedNumber;\n
    \       float truncatedTruncatedTruncatedIntegerPart;\n        float truncatedTruncatedTruncatedDecimalPart;\n
    \       float truncatedTruncatedTruncatedRemainder;\n        float truncatedTruncatedTruncatedTruncatedNumber;\n
    \       float truncatedTruncatedTruncatedTruncatedIntegerPart;\n        float
    truncatedTruncatedTruncatedTruncatedDecimalPart;\n        float truncatedTruncatedTruncatedTruncatedRemainder;\n
    \       float truncatedTruncatedTruncatedTruncatedTruncatedNumber;\n        float
    truncatedTruncatedTruncatedTruncatedTruncatedIntegerPart;\n        float truncatedTruncatedTruncatedTruncatedTruncatedDecimalPart;\n
    \       float truncatedTruncatedTruncatedTruncatedTruncatedRemainder;\n        float
    truncatedTruncatedTruncatedTruncatedTruncatedTruncatedNumber;\n        float truncatedTruncatedTruncatedTruncatedTruncatedIntegerPart;\n
    \       float truncatedTruncatedTruncatedTruncatedTruncatedDecimalPart;\n        float
    truncatedTruncatedTruncatedTruncatedTruncatedRemainder;\n        float truncatedTruncatedTruncatedTruncatedTruncatedTruncatedNumber;\n
    \       float truncatedTruncatedTruncatedTruncatedTruncatedIntegerPart;\n        float
    truncatedTruncatedTruncatedTruncatedTruncatedDecimalPart;\n        float truncatedTruncatedTruncatedTruncatedTruncatedRemainder;\n
    \       float truncatedTruncatedTruncatedTruncatedTruncatedTruncatedNumber;\n
    \       float truncatedTruncatedTruncatedTruncatedTruncatedIntegerPart;\n        float
    truncatedTruncatedTruncatedTruncatedTruncatedDecimalPart;\n        float truncatedTruncatedTruncatedTruncatedTruncatedRemainder;\n
    \       float truncatedTruncatedTruncatedTruncatedTruncatedTruncatedNumber;\n
    \       float truncatedTruncatedTruncatedTruncatedTruncatedIntegerPart;\n        float
    truncatedTruncatedTruncatedTruncatedTruncatedDecimalPart;\n        float truncatedTruncatedTruncatedTruncatedTruncatedRemainder;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(TruncateNumber((3.5f))
    == (0.5f));\n    Debug.Assert(TruncateNumber((1.25f)) == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f))
    == (0.0f));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpl8g062fm.cs(38,15): error CS0128: A local variable or function named ''truncatedTruncatedTruncatedTruncatedTruncatedIntegerPart''
    is already defined in this scope

    /tmp/tmpl8g062fm.cs(39,15): error CS0128: A local variable or function named ''truncatedTruncatedTruncatedTruncatedTruncatedDecimalPart''
    is already defined in this scope

    /tmp/tmpl8g062fm.cs(40,15): error CS0128: A local variable or function named ''truncatedTruncatedTruncatedTruncatedTruncatedRemainder''
    is already defined in this scope

    /tmp/tmpl8g062fm.cs(41,15): error CS0128: A local variable or function named ''truncatedTruncatedTruncatedTruncatedTruncatedTruncatedNumber''
    is already defined in this scope

    /tmp/tmpl8g062fm.cs(42,15): error CS0128: A local variable or function named ''truncatedTruncatedTruncatedTruncatedTruncatedIntegerPart''
    is already defined in this scope

    /tmp/tmpl8g062fm.cs(43,15): error CS0128: A local variable or function named ''truncatedTruncatedTruncatedTruncatedTruncatedDecimalPart''
    is already defined in this scope

    /tmp/tmpl8g062fm.cs(44,15): error CS0128: A local variable or function named ''truncatedTruncatedTruncatedTruncatedTruncatedRemainder''
    is already defined in this scope

    /tmp/tmpl8g062fm.cs(45,15): error CS0128: A local variable or function named ''truncatedTruncatedTruncatedTruncatedTruncatedTruncatedNumber''
    is already defined in this scope

    /tmp/tmpl8g062fm.cs(46,15): error CS0128: A local variable or function named ''truncatedTruncatedTruncatedTruncatedTruncatedIntegerPart''
    is already defined in this scope

    /tmp/tmpl8g062fm.cs(47,15): error CS0128: A local variable or function named ''truncatedTruncatedTruncatedTruncatedTruncatedDecimalPart''
    is already defined in this scope

    /tmp/tmpl8g062fm.cs(48,15): error CS0128: A local variable or function named ''truncatedTruncatedTruncatedTruncatedTruncatedRemainder''
    is already defined in this scope

    /tmp/tmpl8g062fm.cs(49,15): error CS0128: A local variable o'
  timestamp: 1659977071
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive floating point number, it can be decomposed
    into\n    // and integer part (largest integer smaller than given number) and
    decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal
    part of the number.\n    public static float TruncateNumber(float number) {\n
    \       Debug.Assert(number > 0);\n        Debug.Assert(number < 1);\n        Debug.Assert(number
    != 0.0f);\n        Debug.Assert(number != 0.0);\n        Debug.Assert(number !=
    -0.0f);\n        Debug.Assert(number != -0.0);\n        Debug.Assert(number !=
    Number.NaN);\n        Debug.Assert(number != Number.PositiveInfinity);\n        Debug.Assert(number
    != Number.NegativeInfinity);\n        Debug.Assert(number != Number.NegativeZero);\n
    \       Debug.Assert(number != Number.PositiveZero);\n        Debug.Assert(number
    != Number.NaN);\n        Debug.Assert(number != Number.Infinity);\n        Debug.Assert(number
    != Number.NegativeInfinity);\n        Debug.Assert(number != Number.NaN);\n        Debug.Assert(number
    != Number.NegativeZero);\n        Debug.Assert(number != Number.PositiveZero);\n
    \       Debug.Assert(number != Number.NaN);\n        Debug.Assert(number != Number.Infinity);\n
    \       Debug.Assert(number != Number.NegativeInfinity);\n        Debug.Assert(number
    != Number.NaN);\n        Debug.Assert(number != Number.NegativeZero);\n        Debug.Assert(number
    != Number.PositiveZero);\n        Debug.Assert(number != Number.NaN);\n        Debug.Assert(number
    != Number.Infinity);\n        Debug.Assert(number != Number.NegativeInfinity);\n
    \       Debug.Assert(number != Number.NaN);\n        Debug.Assert(number != Number.NegativeZero);\n
    \       Debug.Assert(number != Number.PositiveZero);\n        Debug.Assert(number
    != Number.NaN);\n        Debug.Assert(number != Number.Infinity);\n        Debug.Assert(number
    != Number.NegativeInfinity);\n        Debug.Assert(number != Number.NaN);\n        Debug.Assert(number
    != Number.NegativeZero);\n        Debug.Assert(number != Number.PositiveZero);\n
    \       Debug.Assert(number != Number.NaN);\n        Debug.Assert(number != Number.Infinity);\n
    \       Debug.Assert(number != Number.NegativeInfinity);\n        Debug.Assert(number
    != Number.NaN);\n        Debug.Assert(number != Number.NegativeZero);\n        Debug.Assert(number
    != Number.PositiveZero);\n        Debug.Assert(number \n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(TruncateNumber((3.5f)) == (0.5f));\n
    \   Debug.Assert(TruncateNumber((1.25f)) == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f))
    == (0.0f));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp1h9evjri.cs(55,28): error CS1026: ) expected

    /tmp/tmp1h9evjri.cs(55,28): error CS1002: ; expected

    '
  timestamp: 1659977070
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive floating point number, it can be decomposed
    into\n    // and integer part (largest integer smaller than given number) and
    decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal
    part of the number.\n    public static float TruncateNumber(float number) {\n
    \       Decimal d = new Decimal(number);\n        Decimal dTruncated = new Decimal(d.ToString().Substring(0,
    d.ToString().IndexOf(\".\")));\n        return dTruncated.ToSingle();\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(TruncateNumber((3.5f))
    == (0.5f));\n    Debug.Assert(TruncateNumber((1.25f)) == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f))
    == (0.0f));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpdum1pg4b.cs(15,42): error CS1503: Argument 1: cannot convert from ''string''
    to ''int''

    /tmp/tmpdum1pg4b.cs(16,27): error CS7036: There is no argument given that corresponds
    to the required formal parameter ''d'' of ''decimal.ToSingle(decimal)''

    '
  timestamp: 1659977071
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive floating point number, it can be decomposed
    into\n    // and integer part (largest integer smaller than given number) and
    decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal
    part of the number.\n    public static float TruncateNumber(float number) {\n
    \       float integerPart;\n        float decimalPart;\n        float fractionalPart;\n
    \       float remainder;\n        float quotient;\n        float quotientRemainder;\n
    \       float quotientRemainderRemainder;\n        float quotientRemainderRemainderRemainder;\n
    \       float quotientRemainderRemainderRemainderRemainder;\n        float quotientRemainderRemainderRemainderRemainderRemainder;\n
    \       float quotientRemainderRemainderRemainderRemainderRemainderRemainder;\n
    \       float quotientRemainderRemainderRemainderRemainderRemainderRemainder;\n
    \       float quotientRemainderRemainderRemainderRemainderRemainderRemainderRemainder;\n
    \       float quotientRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainder;\n
    \       float quotientRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainder;\n
    \       float quotientRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainder;\n
    \       float quotientRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainder;\n
    \       float quotientRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainder;\n
    \       float quotientRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainder;\n
    \       float quotientRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainder;\n
    \       float quotientRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainder;\n
    \       float quotientRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainder;\n
    \       float quotientRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainder;\n
    \       float quotientRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainder;\n
    \       float quotientRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainder;\n
    \       float quotientRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainder;\n
    \       float quotientRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainder;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(TruncateNumber((3.5f))
    == (0.5f));\n    Debug.Assert(TruncateNumber((1.25f)) == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f))
    == (0.0f));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpfpkz51l_.cs(25,15): error CS0128: A local variable or function named ''quotientRemainderRemainderRemainderRemainderRemainderRemainder''
    is already defined in this scope

    /tmp/tmpfpkz51l_.cs(28,15): error CS0128: A local variable or function named ''quotientRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainder''
    is already defined in this scope

    /tmp/tmpfpkz51l_.cs(30,15): error CS0128: A local variable or function named ''quotientRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainder''
    is already defined in this scope

    /tmp/tmpfpkz51l_.cs(32,15): error CS0128: A local variable or function named ''quotientRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainder''
    is already defined in this scope

    /tmp/tmpfpkz51l_.cs(33,15): error CS0128: A local variable or function named ''quotientRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainder''
    is already defined in this scope

    /tmp/tmpfpkz51l_.cs(35,15): error CS0128: A local variable or function named ''quotientRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainder''
    is already defined in this scope

    /tmp/tmpfpkz51l_.cs(36,15): error CS0128: A local variable or function named ''quotientRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainder''
    is already defined in this scope

    /tmp/tmpfpkz51l_.cs(37,15): error CS0128: A local variable or function named ''quotientRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainder''
    is already defined in this scope

    /tmp/tmpfpkz51l_.cs(38,15): error CS0128: A local variable or function named ''quotientRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainder''
    is already defined in this scope

    /tmp/tmpfpkz51l_.cs(39,15): error CS0128: A local'
  timestamp: 1659977071
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive floating point number, it can be decomposed
    into\n    // and integer part (largest integer smaller than given number) and
    decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal
    part of the number.\n    public static float TruncateNumber(float number) {\n
    \       float truncatedNumber = number;\n        float integerPart = 0;\n        float
    decimalPart = 0;\n        while (truncatedNumber > 0) {\n            integerPart
    += truncatedNumber % 10;\n            truncatedNumber = truncatedNumber / 10;\n
    \       }\n        while (truncatedNumber > 0) {\n            decimalPart += truncatedNumber
    % 10;\n            truncatedNumber = truncatedNumber / 10;\n        }\n        return
    decimalPart;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(TruncateNumber((3.5f))
    == (0.5f));\n    Debug.Assert(TruncateNumber((1.25f)) == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f))
    == (0.0f));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <5de25c9f033f47e68d905126b3101c25>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <5de25c9f033f47e68d905126b3101c25>:0
    \n"
  stdout: ''
  timestamp: 1659977071
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive floating point number, it can be decomposed
    into\n    // and integer part (largest integer smaller than given number) and
    decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal
    part of the number.\n    public static float TruncateNumber(float number) {\n
    \       float integerPart;\n        float decimalPart;\n        float remainder;\n
    \       integerPart = number;\n        decimalPart = 1;\n        remainder = number;\n
    \       while (true) {\n            integerPart /= 10;\n            decimalPart
    *= 10;\n            if (integerPart == 0) {\n                break;\n            }\n
    \           remainder *= 10;\n            if (remainder == 0) {\n                break;\n
    \           }\n        }\n        return decimalPart;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(TruncateNumber((3.5f)) == (0.5f));\n
    \   Debug.Assert(TruncateNumber((1.25f)) == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f))
    == (0.0f));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c3cb697a618649b4b6ad98b9e5cf018c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c3cb697a618649b4b6ad98b9e5cf018c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977071
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive floating point number, it can be decomposed
    into\n    // and integer part (largest integer smaller than given number) and
    decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal
    part of the number.\n    public static float TruncateNumber(float number) {\n
    \       float integerPart = number;\n        float decimalPart = number - integerPart;\n
    \       return decimalPart;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(TruncateNumber((3.5f)) == (0.5f));\n    Debug.Assert(TruncateNumber((1.25f))
    == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f)) == (0.0f));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <47e9a4810ba2493e918e49632d104bca>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <47e9a4810ba2493e918e49632d104bca>:0
    \n"
  stdout: ''
  timestamp: 1659977071
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive floating point number, it can be decomposed
    into\n    // and integer part (largest integer smaller than given number) and
    decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal
    part of the number.\n    public static float TruncateNumber(float number) {\n
    \       float integerPart = (float)Math.Truncate(number);\n        float decimalPart
    = (float)Math.Ceiling(number);\n        return decimalPart;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(TruncateNumber((3.5f)) ==
    (0.5f));\n    Debug.Assert(TruncateNumber((1.25f)) == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f))
    == (0.0f));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <33cb9e95c591481d871a8dba01485ec4>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <33cb9e95c591481d871a8dba01485ec4>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977071
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive floating point number, it can be decomposed
    into\n    // and integer part (largest integer smaller than given number) and
    decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal
    part of the number.\n    public static float TruncateNumber(float number) {\n
    \       float intPart = (float)Math.Truncate(number);\n        float decimalPart
    = (float)number - intPart;\n        return decimalPart;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(TruncateNumber((3.5f)) == (0.5f));\n
    \   Debug.Assert(TruncateNumber((1.25f)) == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f))
    == (0.0f));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977071
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive floating point number, it can be decomposed
    into\n    // and integer part (largest integer smaller than given number) and
    decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal
    part of the number.\n    public static float TruncateNumber(float number) {\n
    \       float integerPart = (float)Math.Floor(number);\n        float decimalPart
    = (float)number - integerPart;\n        return decimalPart;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(TruncateNumber((3.5f)) ==
    (0.5f));\n    Debug.Assert(TruncateNumber((1.25f)) == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f))
    == (0.0f));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977071
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive floating point number, it can be decomposed
    into\n    // and integer part (largest integer smaller than given number) and
    decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal
    part of the number.\n    public static float TruncateNumber(float number) {\n
    \       float integerPart;\n        float decimalPart;\n        float remainder;\n
    \       float quotient;\n        float quotientRemainder;\n        float quotientRemainderRemainder;\n
    \       float quotientRemainderRemainderRemainder;\n        float quotientRemainderRemainderRemainderRemainder;\n
    \       float quotientRemainderRemainderRemainderRemainderRemainder;\n        float
    quotientRemainderRemainderRemainderRemainderRemainderRemainder;\n        float
    quotientRemainderRemainderRemainderRemainderRemainderRemainderRemainder;\n        float
    quotientRemainderRemainderRemainderRemainderRemainderRemainderRemainder;\n        float
    quotientRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainder;\n
    \       float quotientRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainder;\n
    \       float quotientRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainder;\n
    \       float quotientRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainder;\n
    \       float quotientRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainder;\n
    \       float quotientRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainder;\n
    \       float quotientRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainder;\n
    \       float quotientRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainder;\n
    \       float quotientRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainder;\n
    \       float quotientRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainder;\n
    \       float quotientRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainder;\n
    \       float quotientRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainder;\n
    \       float quotientRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainder;\n
    \       float quotientRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainder;\n\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(TruncateNumber((3.5f))
    == (0.5f));\n    Debug.Assert(TruncateNumber((1.25f)) == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f))
    == (0.0f));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpxs80olig.cs(25,15): error CS0128: A local variable or function named ''quotientRemainderRemainderRemainderRemainderRemainderRemainderRemainder''
    is already defined in this scope

    /tmp/tmpxs80olig.cs(27,15): error CS0128: A local variable or function named ''quotientRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainder''
    is already defined in this scope

    /tmp/tmpxs80olig.cs(29,15): error CS0128: A local variable or function named ''quotientRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainder''
    is already defined in this scope

    /tmp/tmpxs80olig.cs(31,15): error CS0128: A local variable or function named ''quotientRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainder''
    is already defined in this scope

    /tmp/tmpxs80olig.cs(32,15): error CS0128: A local variable or function named ''quotientRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainder''
    is already defined in this scope

    /tmp/tmpxs80olig.cs(34,15): error CS0128: A local variable or function named ''quotientRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainder''
    is already defined in this scope

    /tmp/tmpxs80olig.cs(35,15): error CS0128: A local variable or function named ''quotientRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainder''
    is already defined in this scope

    /tmp/tmpxs80olig.cs(36,15): error CS0128: A local variable or function named ''quotientRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainder''
    is already defined in this scope

    /tmp/tmpxs80olig.cs(37,15): error CS0128: A local variable or function named ''quotientRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainder''
    is already defined in this scope

    /tmp/tmpxs80olig.cs(39,15): error CS0128'
  timestamp: 1659977071
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive floating point number, it can be decomposed
    into\n    // and integer part (largest integer smaller than given number) and
    decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal
    part of the number.\n    public static float TruncateNumber(float number) {\n
    \       float result = number;\n        long integerPart = (long)result;\n        long
    decimalPart = (long)result - integerPart;\n        if (decimalPart > 1) {\n            decimalPart--;\n
    \       }\n        return result - decimalPart;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(TruncateNumber((3.5f)) == (0.5f));\n    Debug.Assert(TruncateNumber((1.25f))
    == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f)) == (0.0f));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <82ab2e36ea5942bf9716561f73d0742f>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <82ab2e36ea5942bf9716561f73d0742f>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977071
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive floating point number, it can be decomposed
    into\n    // and integer part (largest integer smaller than given number) and
    decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal
    part of the number.\n    public static float TruncateNumber(float number) {\n
    \       Debug.Assert(number >= 0);\n        Debug.Assert(number < 1);\n        Debug.Assert(number
    % 1 == 0);\n        Debug.Assert(number < 10);\n        Debug.Assert(number %
    10 == 0);\n        int integerPart = (int)(number - Math.Floor(number));\n        float
    decimalPart = number - integerPart;\n        return decimalPart;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(TruncateNumber((3.5f)) ==
    (0.5f));\n    Debug.Assert(TruncateNumber((1.25f)) == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f))
    == (0.0f));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.TruncateNumber (System.Single number) [0x00000] in <26675a12ef88444a8f574ce7c5390e0c>:0
    \n  at Problem.Main (System.String[] args) [0x00000] in <26675a12ef88444a8f574ce7c5390e0c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.TruncateNumber (System.Single number) [0x00000] in <26675a12ef88444a8f574ce7c5390e0c>:0
    \n  at Problem.Main (System.String[] args) [0x00000] in <26675a12ef88444a8f574ce7c5390e0c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1"
  stdout: ''
  timestamp: 1659977071
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive floating point number, it can be decomposed
    into\n    // and integer part (largest integer smaller than given number) and
    decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal
    part of the number.\n    public static float TruncateNumber(float number) {\n
    \       float integerPart = 0;\n        float decimalPart = 0;\n        float
    temp = 0;\n        float temp2 = 0;\n        float temp3 = 0;\n        float temp4
    = 0;\n        float temp5 = 0;\n        float temp6 = 0;\n        float temp7
    = 0;\n        float temp8 = 0;\n        float temp9 = 0;\n        float temp10
    = 0;\n        float temp11 = 0;\n        float temp12 = 0;\n        float temp13
    = 0;\n        float temp14 = 0;\n        float temp15 = 0;\n        float temp16
    = 0;\n        float temp17 = 0;\n        float temp18 = 0;\n        float temp19
    = 0;\n        float temp20 = 0;\n        float temp21 = 0;\n        float temp22
    = 0;\n        float temp23 = 0;\n        float temp24 = 0;\n        float temp25
    = 0;\n        float temp26 = 0;\n        float temp27 = 0;\n        float temp28
    = 0;\n        float temp29 = 0;\n        float temp30 = 0;\n        float temp31
    = 0;\n        float temp32 = 0;\n        float temp33 = 0;\n        float temp34
    = 0;\n        float temp35 = 0;\n        float temp36 = 0;\n        float temp37
    = 0;\n        float temp38 = 0;\n        float temp39 = 0;\n        float temp40
    = 0;\n        float temp41 = 0;\n        float temp42 = 0;\n        float temp43
    = 0;\n        float temp44 = 0;\n        float temp45 = 0;\n        float temp46
    = 0;\n        float temp47 = 0;\n        float temp48 = 0;\n        float temp49
    = 0;\n        float temp50 = 0;\n        float temp51 = 0;\n        float temp52
    = 0;\n        float temp53 = 0;\n        float temp54 = 0;\n        float temp55
    = 0;\n        float temp56 = 0;\n        float temp57 = 0;\n        float temp58
    = 0;\n        float temp59 = 0;\n        float temp60 = 0;\n        float temp61
    = 0;\n        float temp62 = 0;\n        float temp63 = 0;\n        float temp64
    = 0;\n        float temp65 = 0;\n        float temp66 = 0;\n        float temp67
    = 0;\n        float temp68 = 0;\n        float temp69 = 0;\n        float temp70
    = 0;\n        float temp71 = 0;\n        float temp72 = 0;\n        float temp73
    = 0;\n        float temp74 = 0;\n        float temp75 = 0;\n        float temp76
    = 0;\n        float temp77 = 0;\n        float temp78 = 0;\n        float temp79
    = 0;\n        float temp80 = 0;\n        float temp81 = 0;\n        float temp82
    = 0;\n        float temp83 = 0;\n        float temp84 = 0;\n        \n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(TruncateNumber((3.5f))
    == (0.5f));\n    Debug.Assert(TruncateNumber((1.25f)) == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f))
    == (0.0f));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpvu1akkb4.cs(14,15): warning CS0219: The variable ''integerPart'' is assigned
    but its value is never used

    /tmp/tmpvu1akkb4.cs(15,15): warning CS0219: The variable ''decimalPart'' is assigned
    but its value is never used

    /tmp/tmpvu1akkb4.cs(16,15): warning CS0219: The variable ''temp'' is assigned
    but its value is never used

    /tmp/tmpvu1akkb4.cs(17,15): warning CS0219: The variable ''temp2'' is assigned
    but its value is never used

    /tmp/tmpvu1akkb4.cs(18,15): warning CS0219: The variable ''temp3'' is assigned
    but its value is never used

    /tmp/tmpvu1akkb4.cs(19,15): warning CS0219: The variable ''temp4'' is assigned
    but its value is never used

    /tmp/tmpvu1akkb4.cs(20,15): warning CS0219: The variable ''temp5'' is assigned
    but its value is never used

    /tmp/tmpvu1akkb4.cs(21,15): warning CS0219: The variable ''temp6'' is assigned
    but its value is never used

    /tmp/tmpvu1akkb4.cs(22,15): warning CS0219: The variable ''temp7'' is assigned
    but its value is never used

    /tmp/tmpvu1akkb4.cs(23,15): warning CS0219: The variable ''temp8'' is assigned
    but its value is never used

    /tmp/tmpvu1akkb4.cs(24,15): warning CS0219: The variable ''temp9'' is assigned
    but its value is never used

    /tmp/tmpvu1akkb4.cs(25,15): warning CS0219: The variable ''temp10'' is assigned
    but its value is never used

    /tmp/tmpvu1akkb4.cs(26,15): warning CS0219: The variable ''temp11'' is assigned
    but its value is never used

    /tmp/tmpvu1akkb4.cs(27,15): warning CS0219: The variable ''temp12'' is assigned
    but its value is never used

    /tmp/tmpvu1akkb4.cs(28,15): warning CS0219: The variable ''temp13'' is assigned
    but its value is never used

    /tmp/tmpvu1akkb4.cs(29,15): warning CS0219: The variable ''temp14'' is assigned
    but its value is never used

    /tmp/tmpvu1akkb4.cs(30,15): warning CS0219: The variable ''temp15'' is assigned
    but its value is never used

    /tmp/tmpvu1akkb4.cs(31,15): warning CS0219: The variable ''temp16'' is assigned
    but its value is never used

    /tmp/tmpvu1ak'
  timestamp: 1659977071
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive floating point number, it can be decomposed
    into\n    // and integer part (largest integer smaller than given number) and
    decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal
    part of the number.\n    public static float TruncateNumber(float number) {\n
    \       float integerPart = number;\n        float decimalPart = number - integerPart;\n
    \       if (decimalPart > 1.0f) {\n            decimalPart = 1.0f;\n        }\n
    \       return decimalPart;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(TruncateNumber((3.5f)) == (0.5f));\n    Debug.Assert(TruncateNumber((1.25f))
    == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f)) == (0.0f));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <fa02fca22cd343b4abad42dd671546af>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <fa02fca22cd343b4abad42dd671546af>:0
    \n"
  stdout: ''
  timestamp: 1659977071
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive floating point number, it can be decomposed
    into\n    // and integer part (largest integer smaller than given number) and
    decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal
    part of the number.\n    public static float TruncateNumber(float number) {\n
    \       float integerPart = 0;\n        float decimalPart = 0;\n        float
    remainder = 0;\n        float temp = 0;\n        bool isNegative = false;\n        if
    (number < 0) {\n            isNegative = true;\n            number = -number;\n
    \       }\n        temp = number;\n        while (temp != 0) {\n            temp
    = temp / 10;\n            integerPart++;\n        }\n        temp = number;\n
    \       while (temp != 0) {\n            temp = temp % 10;\n            decimalPart++;\n
    \       }\n        remainder = number;\n        if (decimalPart != 0) {\n            while
    (decimalPart != 0) {\n                remainder = remainder % 10;\n                decimalPart--;\n
    \           }\n        }\n        if (isNegative) {\n            integerPart =
    -integerPart;\n        }\n        return integerPart + decimalPart * Math.Pow(10,
    decimalPart - 1);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(TruncateNumber((3.5f))
    == (0.5f));\n    Debug.Assert(TruncateNumber((1.25f)) == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f))
    == (0.0f));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpi40zk0da.cs(43,16): error CS0266: Cannot implicitly convert type ''double''
    to ''float''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659977071
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive floating point number, it can be decomposed
    into\n    // and integer part (largest integer smaller than given number) and
    decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal
    part of the number.\n    public static float TruncateNumber(float number) {\n
    \       float integerPart = 0;\n        float decimalPart = 0;\n        float
    temp = 0;\n        float temp2 = 0;\n        float temp3 = 0;\n        float temp4
    = 0;\n        float temp5 = 0;\n        float temp6 = 0;\n        float temp7
    = 0;\n        float temp8 = 0;\n        float temp9 = 0;\n        float temp10
    = 0;\n        float temp11 = 0;\n        float temp12 = 0;\n        float temp13
    = 0;\n        float temp14 = 0;\n        float temp15 = 0;\n        float temp16
    = 0;\n        float temp17 = 0;\n        float temp18 = 0;\n        float temp19
    = 0;\n        float temp20 = 0;\n        float temp21 = 0;\n        float temp22
    = 0;\n        float temp23 = 0;\n        float temp24 = 0;\n        float temp25
    = 0;\n        float temp26 = 0;\n        float temp27 = 0;\n        float temp28
    = 0;\n        float temp29 = 0;\n        float temp30 = 0;\n        float temp31
    = 0;\n        float temp32 = 0;\n        float temp33 = 0;\n        float temp34
    = 0;\n        float temp35 = 0;\n        float temp36 = 0;\n        float temp37
    = 0;\n        float temp38 = 0;\n        float temp39 = 0;\n        float temp40
    = 0;\n        float temp41 = 0;\n        float temp42 = 0;\n        float temp43
    = 0;\n        float temp44 = 0;\n        float temp45 = 0;\n        float temp46
    = 0;\n        float temp47 = 0;\n        float temp48 = 0;\n        float temp49
    = 0;\n        float temp50 = 0;\n        float temp51 = 0;\n        float temp52
    = 0;\n        float temp53 = 0;\n        float temp54 = 0;\n        float temp55
    = 0;\n        float temp56 = 0;\n        float temp57 = 0;\n        float temp58
    = 0;\n        float temp59 = 0;\n        float temp60 = 0;\n        float temp61
    = 0;\n        float temp62 = 0;\n        float temp63 = 0;\n        float temp64
    = 0;\n        float temp65 = 0;\n        float temp66 = 0;\n        float temp67
    = 0;\n        float temp68 = 0;\n        float temp69 = 0;\n        float temp70
    = 0;\n        float temp71 = 0;\n        float temp72 = 0;\n        float temp73
    = 0;\n        float temp74 = 0;\n        float temp75 = 0;\n        float temp76
    = 0;\n        float temp77 = 0;\n        float temp78 = 0;\n        float temp79
    = 0;\n        float temp80 = 0;\n        float temp81 = 0;\n        float temp82
    = 0;\n        float temp83 = 0;\n        float temp84 = 0;\n        \n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(TruncateNumber((3.5f))
    == (0.5f));\n    Debug.Assert(TruncateNumber((1.25f)) == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f))
    == (0.0f));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpvu1akkb4.cs(14,15): warning CS0219: The variable ''integerPart'' is assigned
    but its value is never used

    /tmp/tmpvu1akkb4.cs(15,15): warning CS0219: The variable ''decimalPart'' is assigned
    but its value is never used

    /tmp/tmpvu1akkb4.cs(16,15): warning CS0219: The variable ''temp'' is assigned
    but its value is never used

    /tmp/tmpvu1akkb4.cs(17,15): warning CS0219: The variable ''temp2'' is assigned
    but its value is never used

    /tmp/tmpvu1akkb4.cs(18,15): warning CS0219: The variable ''temp3'' is assigned
    but its value is never used

    /tmp/tmpvu1akkb4.cs(19,15): warning CS0219: The variable ''temp4'' is assigned
    but its value is never used

    /tmp/tmpvu1akkb4.cs(20,15): warning CS0219: The variable ''temp5'' is assigned
    but its value is never used

    /tmp/tmpvu1akkb4.cs(21,15): warning CS0219: The variable ''temp6'' is assigned
    but its value is never used

    /tmp/tmpvu1akkb4.cs(22,15): warning CS0219: The variable ''temp7'' is assigned
    but its value is never used

    /tmp/tmpvu1akkb4.cs(23,15): warning CS0219: The variable ''temp8'' is assigned
    but its value is never used

    /tmp/tmpvu1akkb4.cs(24,15): warning CS0219: The variable ''temp9'' is assigned
    but its value is never used

    /tmp/tmpvu1akkb4.cs(25,15): warning CS0219: The variable ''temp10'' is assigned
    but its value is never used

    /tmp/tmpvu1akkb4.cs(26,15): warning CS0219: The variable ''temp11'' is assigned
    but its value is never used

    /tmp/tmpvu1akkb4.cs(27,15): warning CS0219: The variable ''temp12'' is assigned
    but its value is never used

    /tmp/tmpvu1akkb4.cs(28,15): warning CS0219: The variable ''temp13'' is assigned
    but its value is never used

    /tmp/tmpvu1akkb4.cs(29,15): warning CS0219: The variable ''temp14'' is assigned
    but its value is never used

    /tmp/tmpvu1akkb4.cs(30,15): warning CS0219: The variable ''temp15'' is assigned
    but its value is never used

    /tmp/tmpvu1akkb4.cs(31,15): warning CS0219: The variable ''temp16'' is assigned
    but its value is never used

    /tmp/tmpvu1ak'
  timestamp: 1659977071
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive floating point number, it can be decomposed
    into\n    // and integer part (largest integer smaller than given number) and
    decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal
    part of the number.\n    public static float TruncateNumber(float number) {\n
    \       float truncatedNumber = number;\n        float integerPart;\n        float
    decimalPart;\n        float fractionalPart;\n        float fractionalPartRemainder;\n
    \       float fractionalPartRemainderRemainder;\n        float fractionalPartRemainderRemainderRemainder;\n
    \       float fractionalPartRemainderRemainderRemainderRemainder;\n        float
    fractionalPartRemainderRemainderRemainderRemainderRemainder;\n        float fractionalPartRemainderRemainderRemainderRemainderRemainderRemainder;\n
    \       float fractionalPartRemainderRemainderRemainderRemainderRemainderRemainderRemainder;\n
    \       float fractionalPartRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainder;\n
    \       float fractionalPartRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainder;\n
    \       float fractionalPartRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainder;\n
    \       float fractionalPartRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainder;\n
    \       float fractionalPartRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainder;\n
    \       float fractionalPartRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainder;\n
    \       float fractionalPartRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainder;\n
    \       float fractionalPartRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainder;\n
    \       float fractionalPartRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainder;\n
    \       float fractionalPartRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainder;\n
    \       float fractionalPartRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainder;\n
    \       float fractionalPartRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainder;\n
    \       float fractionalPartRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainder\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(TruncateNumber((3.5f))
    == (0.5f));\n    Debug.Assert(TruncateNumber((1.25f)) == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f))
    == (0.0f));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp2jtme4st.cs(37,137): error CS1002: ; expected

    '
  timestamp: 1659977071
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive floating point number, it can be decomposed
    into\n    // and integer part (largest integer smaller than given number) and
    decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal
    part of the number.\n    public static float TruncateNumber(float number) {\n
    \       BigInteger bigInteger = new BigInteger(number);\n        BigInteger bigInteger2
    = bigInteger.Remainder(BigInteger.One);\n        BigInteger bigInteger3 = bigInteger2.Remainder(BigInteger.One);\n
    \       BigInteger bigInteger4 = bigInteger3.Remainder(BigInteger.One);\n        BigInteger
    bigInteger5 = bigInteger4.Remainder(BigInteger.One);\n        BigInteger bigInteger6
    = bigInteger5.Remainder(BigInteger.One);\n        BigInteger bigInteger7 = bigInteger6.Remainder(BigInteger.One);\n
    \       BigInteger bigInteger8 = bigInteger7.Remainder(BigInteger.One);\n        BigInteger
    bigInteger9 = bigInteger8.Remainder(BigInteger.One);\n        BigInteger bigInteger10
    = bigInteger9.Remainder(BigInteger.One);\n        BigInteger bigInteger11 = bigInteger10.Remainder(BigInteger.One);\n
    \       BigInteger bigInteger12 = bigInteger11.Remainder(BigInteger.One);\n        BigInteger
    bigInteger13 = bigInteger12.Remainder(BigInteger.One);\n        BigInteger bigInteger14
    = bigInteger13.Remainder(BigInteger.One);\n        BigInteger bigInteger15 = bigInteger14.Remainder(BigInteger.One);\n
    \       BigInteger bigInteger16 = bigInteger15.Remainder(BigInteger.One);\n        BigInteger
    bigInteger17 = bigInteger16.Remainder(BigInteger.One);\n        BigInteger bigInteger18
    = bigInteger17.Remainder(BigInteger.One);\n        BigInteger bigInteger19 = bigInteger18.Remainder(BigInteger.One);\n
    \       BigInteger bigInteger20 = bigInteger19.Remainder(BigInteger.One);\n        BigInteger
    bigInteger21 = bigInteger20.Remainder(BigInteger.One);\n        BigInteger bigInteger22
    = bigInteger21.Remainder(BigInteger.One);\n        BigInteger bigInteger23 = bigInteger22.Remainder(BigInteger.One);\n
    \       BigInteger bigInteger24 = bigInteger23.Remainder(BigInteger.One);\n        BigInteger
    bigInteger25 = bigInteger24.Remainder(BigInteger.One);\n        BigInteger bigInteger26
    = bigInteger25.Remainder(BigInteger.One);\n        BigInteger bigInteger27 = bigInteger26.Remainder(BigInteger.One);\n
    \       BigInteger bigInteger28 = bigInteger27.Remainder(BigInteger.One);\n        BigInteger
    bigInteger29 = bigInteger28.Remainder(BigInteger.One);\n        BigInteger bigInteger30
    = bigInteger29.Remainder(BigInteger.One);\n        BigInteger bigInteger31 = bigInteger30.Remainder(BigInteger.One);\n
    \       BigInteger \n    }\n    public static void Main(string[] args) {\n    Debug.Assert(TruncateNumber((3.5f))
    == (0.5f));\n    Debug.Assert(TruncateNumber((1.25f)) == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f))
    == (0.0f));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpirya99p_.cs(45,19): error CS1002: ; expected

    '
  timestamp: 1659977071
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive floating point number, it can be decomposed
    into\n    // and integer part (largest integer smaller than given number) and
    decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal
    part of the number.\n    public static float TruncateNumber(float number) {\n
    \       BigInteger bigInteger = new BigInteger(number);\n        BigInteger bigInteger2
    = bigInteger.Remainder(BigInteger.One);\n        BigInteger bigInteger3 = bigInteger2.Remainder(BigInteger.One);\n
    \       BigInteger bigInteger4 = bigInteger3.Remainder(BigInteger.One);\n        BigInteger
    bigInteger5 = bigInteger4.Remainder(BigInteger.One);\n        BigInteger bigInteger6
    = bigInteger5.Remainder(BigInteger.One);\n        BigInteger bigInteger7 = bigInteger6.Remainder(BigInteger.One);\n
    \       BigInteger bigInteger8 = bigInteger7.Remainder(BigInteger.One);\n        BigInteger
    bigInteger9 = bigInteger8.Remainder(BigInteger.One);\n        BigInteger bigInteger10
    = bigInteger9.Remainder(BigInteger.One);\n        BigInteger bigInteger11 = bigInteger10.Remainder(BigInteger.One);\n
    \       BigInteger bigInteger12 = bigInteger11.Remainder(BigInteger.One);\n        BigInteger
    bigInteger13 = bigInteger12.Remainder(BigInteger.One);\n        BigInteger bigInteger14
    = bigInteger13.Remainder(BigInteger.One);\n        BigInteger bigInteger15 = bigInteger14.Remainder(BigInteger.One);\n
    \       BigInteger bigInteger16 = bigInteger15.Remainder(BigInteger.One);\n        BigInteger
    bigInteger17 = bigInteger16.Remainder(BigInteger.One);\n        BigInteger bigInteger18
    = bigInteger17.Remainder(BigInteger.One);\n        BigInteger bigInteger19 = bigInteger18.Remainder(BigInteger.One);\n
    \       BigInteger bigInteger20 = bigInteger19.Remainder(BigInteger.One);\n        BigInteger
    bigInteger21 = bigInteger20.Remainder(BigInteger.One);\n        BigInteger bigInteger22
    = bigInteger21.Remainder(BigInteger.One);\n        BigInteger bigInteger23 = bigInteger22.Remainder(BigInteger.One);\n
    \       BigInteger bigInteger24 = bigInteger23.Remainder(BigInteger.One);\n        BigInteger
    bigInteger25 = bigInteger24.Remainder(BigInteger.One);\n        BigInteger bigInteger26
    = bigInteger25.Remainder(BigInteger.One);\n        BigInteger bigInteger27 = bigInteger26.Remainder(BigInteger.One);\n
    \       BigInteger bigInteger28 = bigInteger27.Remainder(BigInteger.One);\n        BigInteger
    bigInteger29 = bigInteger28.Remainder(BigInteger.One);\n        BigInteger bigInteger30
    = bigInteger29.Remainder(BigInteger.One);\n        BigInteger bigInteger31 = bigInteger30.Remainder(BigInteger.One);\n
    \       BigInteger \n    }\n    public static void Main(string[] args) {\n    Debug.Assert(TruncateNumber((3.5f))
    == (0.5f));\n    Debug.Assert(TruncateNumber((1.25f)) == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f))
    == (0.0f));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpirya99p_.cs(45,19): error CS1002: ; expected

    '
  timestamp: 1659977071
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive floating point number, it can be decomposed
    into\n    // and integer part (largest integer smaller than given number) and
    decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal
    part of the number.\n    public static float TruncateNumber(float number) {\n
    \       float integerPart = 0;\n        float decimalPart = 0;\n        float
    temp = 0;\n        float temp2 = 0;\n        float temp3 = 0;\n        float temp4
    = 0;\n        float temp5 = 0;\n        float temp6 = 0;\n        float temp7
    = 0;\n        float temp8 = 0;\n        float temp9 = 0;\n        float temp10
    = 0;\n        float temp11 = 0;\n        float temp12 = 0;\n        float temp13
    = 0;\n        float temp14 = 0;\n        float temp15 = 0;\n        float temp16
    = 0;\n        float temp17 = 0;\n        float temp18 = 0;\n        float temp19
    = 0;\n        float temp20 = 0;\n        float temp21 = 0;\n        float temp22
    = 0;\n        float temp23 = 0;\n        float temp24 = 0;\n        float temp25
    = 0;\n        float temp26 = 0;\n        float temp27 = 0;\n        float temp28
    = 0;\n        float temp29 = 0;\n        float temp30 = 0;\n        float temp31
    = 0;\n        float temp32 = 0;\n        float temp33 = 0;\n        float temp34
    = 0;\n        float temp35 = 0;\n        float temp36 = 0;\n        float temp37
    = 0;\n        float temp38 = 0;\n        float temp39 = 0;\n        float temp40
    = 0;\n        float temp41 = 0;\n        float temp42 = 0;\n        float temp43
    = 0;\n        float temp44 = 0;\n        float temp45 = 0;\n        float temp46
    = 0;\n        float temp47 = 0;\n        float temp48 = 0;\n        float temp49
    = 0;\n        float temp50 = 0;\n        float temp51 = 0;\n        float temp52
    = 0;\n        float temp53 = 0;\n        float temp54 = 0;\n        float temp55
    = 0;\n        float temp56 = 0;\n        float temp57 = 0;\n        float temp58
    = 0;\n        float temp59 = 0;\n        float temp60 = 0;\n        float temp61
    = 0;\n        float temp62 = 0;\n        float temp63 = 0;\n        float temp64
    = 0;\n        float temp65 = 0;\n        float temp66 = 0;\n        float temp67
    = 0;\n        float temp68 = 0;\n        float temp69 = 0;\n        float temp70
    = 0;\n        float temp71 = 0;\n        float temp72 = 0;\n        float temp73
    = 0;\n        float temp74 = 0;\n        float temp75 = 0;\n        float temp76
    = 0;\n        float temp77 = 0;\n        float temp78 = 0;\n        float temp79
    = 0;\n        float temp80 = 0;\n        float temp81 = 0;\n        float temp82
    = 0;\n        float temp83 = 0;\n        float temp84 = 0;\n        \n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(TruncateNumber((3.5f))
    == (0.5f));\n    Debug.Assert(TruncateNumber((1.25f)) == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f))
    == (0.0f));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpvu1akkb4.cs(14,15): warning CS0219: The variable ''integerPart'' is assigned
    but its value is never used

    /tmp/tmpvu1akkb4.cs(15,15): warning CS0219: The variable ''decimalPart'' is assigned
    but its value is never used

    /tmp/tmpvu1akkb4.cs(16,15): warning CS0219: The variable ''temp'' is assigned
    but its value is never used

    /tmp/tmpvu1akkb4.cs(17,15): warning CS0219: The variable ''temp2'' is assigned
    but its value is never used

    /tmp/tmpvu1akkb4.cs(18,15): warning CS0219: The variable ''temp3'' is assigned
    but its value is never used

    /tmp/tmpvu1akkb4.cs(19,15): warning CS0219: The variable ''temp4'' is assigned
    but its value is never used

    /tmp/tmpvu1akkb4.cs(20,15): warning CS0219: The variable ''temp5'' is assigned
    but its value is never used

    /tmp/tmpvu1akkb4.cs(21,15): warning CS0219: The variable ''temp6'' is assigned
    but its value is never used

    /tmp/tmpvu1akkb4.cs(22,15): warning CS0219: The variable ''temp7'' is assigned
    but its value is never used

    /tmp/tmpvu1akkb4.cs(23,15): warning CS0219: The variable ''temp8'' is assigned
    but its value is never used

    /tmp/tmpvu1akkb4.cs(24,15): warning CS0219: The variable ''temp9'' is assigned
    but its value is never used

    /tmp/tmpvu1akkb4.cs(25,15): warning CS0219: The variable ''temp10'' is assigned
    but its value is never used

    /tmp/tmpvu1akkb4.cs(26,15): warning CS0219: The variable ''temp11'' is assigned
    but its value is never used

    /tmp/tmpvu1akkb4.cs(27,15): warning CS0219: The variable ''temp12'' is assigned
    but its value is never used

    /tmp/tmpvu1akkb4.cs(28,15): warning CS0219: The variable ''temp13'' is assigned
    but its value is never used

    /tmp/tmpvu1akkb4.cs(29,15): warning CS0219: The variable ''temp14'' is assigned
    but its value is never used

    /tmp/tmpvu1akkb4.cs(30,15): warning CS0219: The variable ''temp15'' is assigned
    but its value is never used

    /tmp/tmpvu1akkb4.cs(31,15): warning CS0219: The variable ''temp16'' is assigned
    but its value is never used

    /tmp/tmpvu1ak'
  timestamp: 1659977071
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive floating point number, it can be decomposed
    into\n    // and integer part (largest integer smaller than given number) and
    decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal
    part of the number.\n    public static float TruncateNumber(float number) {\n
    \       // Truncate to integer part\n        int integerPart = (int) number;\n
    \       // Truncate to decimal part\n        float decimalPart = number - integerPart;\n
    \       // Return decimal part\n        return decimalPart;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(TruncateNumber((3.5f)) ==
    (0.5f));\n    Debug.Assert(TruncateNumber((1.25f)) == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f))
    == (0.0f));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977071
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive floating point number, it can be decomposed
    into\n    // and integer part (largest integer smaller than given number) and
    decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal
    part of the number.\n    public static float TruncateNumber(float number) {\n
    \       float integerPart = (float)Math.Floor(number);\n        float decimalPart
    = number - integerPart;\n        return decimalPart;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(TruncateNumber((3.5f)) == (0.5f));\n
    \   Debug.Assert(TruncateNumber((1.25f)) == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f))
    == (0.0f));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977071
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive floating point number, it can be decomposed
    into\n    // and integer part (largest integer smaller than given number) and
    decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal
    part of the number.\n    public static float TruncateNumber(float number) {\n
    \       // Decompose the number into integer and decimal parts.\n        BigInteger
    integerPart = new BigInteger(number.ToString());\n        BigInteger decimalPart
    = new BigInteger(number.ToString().Substring(integerPart.Length));\n        //
    Return the decimal part of the number.\n        return decimalPart.ToSingle();\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(TruncateNumber((3.5f))
    == (0.5f));\n    Debug.Assert(TruncateNumber((1.25f)) == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f))
    == (0.0f));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpzluch_ja.cs(15,49): error CS1503: Argument 1: cannot convert from ''string''
    to ''int''

    /tmp/tmpzluch_ja.cs(16,89): error CS1061: ''BigInteger'' does not contain a definition
    for ''Length'' and no accessible extension method ''Length'' accepting a first
    argument of type ''BigInteger'' could be found (are you missing a using directive
    or an assembly reference?)

    /tmp/tmpzluch_ja.cs(18,28): error CS1061: ''BigInteger'' does not contain a definition
    for ''ToSingle'' and no accessible extension method ''ToSingle'' accepting a first
    argument of type ''BigInteger'' could be found (are you missing a using directive
    or an assembly reference?)

    '
  timestamp: 1659977071
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive floating point number, it can be decomposed
    into\n    // and integer part (largest integer smaller than given number) and
    decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal
    part of the number.\n    public static float TruncateNumber(float number) {\n
    \       float integerPart = number;\n        float decimalPart = number - integerPart;\n
    \       return decimalPart;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(TruncateNumber((3.5f)) == (0.5f));\n    Debug.Assert(TruncateNumber((1.25f))
    == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f)) == (0.0f));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <47e9a4810ba2493e918e49632d104bca>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <47e9a4810ba2493e918e49632d104bca>:0
    \n"
  stdout: ''
  timestamp: 1659977071
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive floating point number, it can be decomposed
    into\n    // and integer part (largest integer smaller than given number) and
    decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal
    part of the number.\n    public static float TruncateNumber(float number) {\n
    \       float integerPart = (float)Math.Floor(number);\n        float decimalPart
    = (float)number - integerPart;\n        return decimalPart;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(TruncateNumber((3.5f)) ==
    (0.5f));\n    Debug.Assert(TruncateNumber((1.25f)) == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f))
    == (0.0f));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977071
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive floating point number, it can be decomposed
    into\n    // and integer part (largest integer smaller than given number) and
    decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal
    part of the number.\n    public static float TruncateNumber(float number) {\n
    \       // Find largest integer smaller than given number\n        int integerPart
    = (int)number;\n        // Find leftover part (always smaller than 1)\n        float
    leftoverPart = number - integerPart;\n        // Return decimal part\n        return
    leftoverPart;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(TruncateNumber((3.5f))
    == (0.5f));\n    Debug.Assert(TruncateNumber((1.25f)) == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f))
    == (0.0f));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977071
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive floating point number, it can be decomposed
    into\n    // and integer part (largest integer smaller than given number) and
    decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal
    part of the number.\n    public static float TruncateNumber(float number) {\n
    \       float truncatedNumber = number;\n        float integerPart;\n        float
    decimalPart;\n        float fractionalPart;\n        float remainder;\n        float
    temp;\n        float temp2;\n        float temp3;\n        float temp4;\n        float
    temp5;\n        float temp6;\n        float temp7;\n        float temp8;\n        float
    temp9;\n        float temp10;\n        float temp11;\n        float temp12;\n
    \       float temp13;\n        float temp14;\n        float temp15;\n        float
    temp16;\n        float temp17;\n        float temp18;\n        float temp19;\n
    \       float temp20;\n        float temp21;\n        float temp22;\n        float
    temp23;\n        float temp24;\n        float temp25;\n        float temp26;\n
    \       float temp27;\n        float temp28;\n        float temp29;\n        float
    temp30;\n        float temp31;\n        float temp32;\n        float temp33;\n
    \       float temp34;\n        float temp35;\n        float temp36;\n        float
    temp37;\n        float temp38;\n        float temp39;\n        float temp40;\n
    \       float temp41;\n        float temp42;\n        float temp43;\n        float
    temp44;\n        float temp45;\n        float temp46;\n        float temp47;\n
    \       float temp48;\n        float temp49;\n        float temp50;\n        float
    temp51;\n        float temp52;\n        float temp53;\n        float temp54;\n
    \       float temp55;\n        float temp56;\n        float temp57;\n        float
    temp58;\n        float temp59;\n        float temp60;\n        float temp61;\n
    \       float temp62;\n        float temp63;\n        float temp64;\n        float
    temp65;\n        float temp66;\n        float temp67;\n        float temp68;\n
    \       float temp69;\n        float temp70;\n        float temp71;\n        float
    temp72;\n        float temp73;\n        float temp74;\n        float temp75;\n
    \       float temp76;\n        float temp77;\n        float temp78;\n        float
    temp79;\n        float temp80;\n        float temp81;\n        float temp82;\n
    \       float temp83;\n        float \n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(TruncateNumber((3.5f)) == (0.5f));\n    Debug.Assert(TruncateNumber((1.25f))
    == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f)) == (0.0f));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpi8ds9mjt.cs(102,14): error CS1001: Identifier expected

    /tmp/tmpi8ds9mjt.cs(102,14): error CS1002: ; expected

    '
  timestamp: 1659977071
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive floating point number, it can be decomposed
    into\n    // and integer part (largest integer smaller than given number) and
    decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal
    part of the number.\n    public static float TruncateNumber(float number) {\n
    \       // Decompose the number into integer and decimal parts.\n        BigInteger
    integerPart = (BigInteger) number;\n        BigInteger decimalPart = (BigInteger)
    number - integerPart;\n\n        // Return the decimal part of the number.\n        return
    decimalPart.ToSingle();\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(TruncateNumber((3.5f)) == (0.5f));\n    Debug.Assert(TruncateNumber((1.25f))
    == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f)) == (0.0f));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp8uzbr4cv.cs(19,28): error CS1061: ''BigInteger'' does not contain a definition
    for ''ToSingle'' and no accessible extension method ''ToSingle'' accepting a first
    argument of type ''BigInteger'' could be found (are you missing a using directive
    or an assembly reference?)

    '
  timestamp: 1659977071
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive floating point number, it can be decomposed
    into\n    // and integer part (largest integer smaller than given number) and
    decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal
    part of the number.\n    public static float TruncateNumber(float number) {\n
    \       float integerPart = 0;\n        float decimalPart = 0;\n        float
    fractionalPart = 0;\n        float temp = 0;\n        float temp2 = 0;\n        float
    temp3 = 0;\n        float temp4 = 0;\n        float temp5 = 0;\n        float
    temp6 = 0;\n        float temp7 = 0;\n        float temp8 = 0;\n        float
    temp9 = 0;\n        float temp10 = 0;\n        float temp11 = 0;\n        float
    temp12 = 0;\n        float temp13 = 0;\n        float temp14 = 0;\n        float
    temp15 = 0;\n        float temp16 = 0;\n        float temp17 = 0;\n        float
    temp18 = 0;\n        float temp19 = 0;\n        float temp20 = 0;\n        float
    temp21 = 0;\n        float temp22 = 0;\n        float temp23 = 0;\n        float
    temp24 = 0;\n        float temp25 = 0;\n        float temp26 = 0;\n        float
    temp27 = 0;\n        float temp28 = 0;\n        float temp29 = 0;\n        float
    temp30 = 0;\n        float temp31 = 0;\n        float temp32 = 0;\n        float
    temp33 = 0;\n        float temp34 = 0;\n        float temp35 = 0;\n        float
    temp36 = 0;\n        float temp37 = 0;\n        float temp38 = 0;\n        float
    temp39 = 0;\n        float temp40 = 0;\n        float temp41 = 0;\n        float
    temp42 = 0;\n        float temp43 = 0;\n        float temp44 = 0;\n        float
    temp45 = 0;\n        float temp46 = 0;\n        float temp47 = 0;\n        float
    temp48 = 0;\n        float temp49 = 0;\n        float temp50 = 0;\n        float
    temp51 = 0;\n        float temp52 = 0;\n        float temp53 = 0;\n        float
    temp54 = 0;\n        float temp55 = 0;\n        float temp56 = 0;\n        float
    temp57 = 0;\n        float temp58 = 0;\n        float temp59 = 0;\n        float
    temp60 = 0;\n        float temp61 = 0;\n        float temp62 = 0;\n        float
    temp63 = 0;\n        float temp64 = 0;\n        float temp65 = 0;\n        float
    temp66 = 0;\n        float temp67 = 0;\n        float temp68 = 0;\n        float
    temp69 = 0;\n        float temp70 = 0;\n        float temp71 = 0;\n        float
    temp72 = 0;\n        float temp73 = 0;\n        float temp74 = 0;\n        float
    temp75 = 0;\n        float temp76 = 0;\n        float temp77 = 0;\n        float
    temp78 = 0;\n        float temp79 = 0;\n        float temp80 = 0;\n        float
    temp81 = 0;\n        float temp82 = 0;\n        float temp83 = 0;\n\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(TruncateNumber((3.5f)) ==
    (0.5f));\n    Debug.Assert(TruncateNumber((1.25f)) == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f))
    == (0.0f));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpk8m7ogib.cs(14,15): warning CS0219: The variable ''integerPart'' is assigned
    but its value is never used

    /tmp/tmpk8m7ogib.cs(15,15): warning CS0219: The variable ''decimalPart'' is assigned
    but its value is never used

    /tmp/tmpk8m7ogib.cs(16,15): warning CS0219: The variable ''fractionalPart'' is
    assigned but its value is never used

    /tmp/tmpk8m7ogib.cs(17,15): warning CS0219: The variable ''temp'' is assigned
    but its value is never used

    /tmp/tmpk8m7ogib.cs(18,15): warning CS0219: The variable ''temp2'' is assigned
    but its value is never used

    /tmp/tmpk8m7ogib.cs(19,15): warning CS0219: The variable ''temp3'' is assigned
    but its value is never used

    /tmp/tmpk8m7ogib.cs(20,15): warning CS0219: The variable ''temp4'' is assigned
    but its value is never used

    /tmp/tmpk8m7ogib.cs(21,15): warning CS0219: The variable ''temp5'' is assigned
    but its value is never used

    /tmp/tmpk8m7ogib.cs(22,15): warning CS0219: The variable ''temp6'' is assigned
    but its value is never used

    /tmp/tmpk8m7ogib.cs(23,15): warning CS0219: The variable ''temp7'' is assigned
    but its value is never used

    /tmp/tmpk8m7ogib.cs(24,15): warning CS0219: The variable ''temp8'' is assigned
    but its value is never used

    /tmp/tmpk8m7ogib.cs(25,15): warning CS0219: The variable ''temp9'' is assigned
    but its value is never used

    /tmp/tmpk8m7ogib.cs(26,15): warning CS0219: The variable ''temp10'' is assigned
    but its value is never used

    /tmp/tmpk8m7ogib.cs(27,15): warning CS0219: The variable ''temp11'' is assigned
    but its value is never used

    /tmp/tmpk8m7ogib.cs(28,15): warning CS0219: The variable ''temp12'' is assigned
    but its value is never used

    /tmp/tmpk8m7ogib.cs(29,15): warning CS0219: The variable ''temp13'' is assigned
    but its value is never used

    /tmp/tmpk8m7ogib.cs(30,15): warning CS0219: The variable ''temp14'' is assigned
    but its value is never used

    /tmp/tmpk8m7ogib.cs(31,15): warning CS0219: The variable ''temp15'' is assigned
    but its value is never used

    /tmp/'
  timestamp: 1659977071
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive floating point number, it can be decomposed
    into\n    // and integer part (largest integer smaller than given number) and
    decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal
    part of the number.\n    public static float TruncateNumber(float number) {\n
    \       float integerPart = 0;\n        float decimalPart = 0;\n        float
    remainder = 0;\n        float quotient = 0;\n        float temp = 0;\n        float
    temp2 = 0;\n        float temp3 = 0;\n        float temp4 = 0;\n        float
    temp5 = 0;\n        float temp6 = 0;\n        float temp7 = 0;\n        float
    temp8 = 0;\n        float temp9 = 0;\n        float temp10 = 0;\n        float
    temp11 = 0;\n        float temp12 = 0;\n        float temp13 = 0;\n        float
    temp14 = 0;\n        float temp15 = 0;\n        float temp16 = 0;\n        float
    temp17 = 0;\n        float temp18 = 0;\n        float temp19 = 0;\n        float
    temp20 = 0;\n        float temp21 = 0;\n        float temp22 = 0;\n        float
    temp23 = 0;\n        float temp24 = 0;\n        float temp25 = 0;\n        float
    temp26 = 0;\n        float temp27 = 0;\n        float temp28 = 0;\n        float
    temp29 = 0;\n        float temp30 = 0;\n        float temp31 = 0;\n        float
    temp32 = 0;\n        float temp33 = 0;\n        float temp34 = 0;\n        float
    temp35 = 0;\n        float temp36 = 0;\n        float temp37 = 0;\n        float
    temp38 = 0;\n        float temp39 = 0;\n        float temp40 = 0;\n        float
    temp41 = 0;\n        float temp42 = 0;\n        float temp43 = 0;\n        float
    temp44 = 0;\n        float temp45 = 0;\n        float temp46 = 0;\n        float
    temp47 = 0;\n        float temp48 = 0;\n        float temp49 = 0;\n        float
    temp50 = 0;\n        float temp51 = 0;\n        float temp52 = 0;\n        float
    temp53 = 0;\n        float temp54 = 0;\n        float temp55 = 0;\n        float
    temp56 = 0;\n        float temp57 = 0;\n        float temp58 = 0;\n        float
    temp59 = 0;\n        float temp60 = 0;\n        float temp61 = 0;\n        float
    temp62 = 0;\n        float temp63 = 0;\n        float temp64 = 0;\n        float
    temp65 = 0;\n        float temp66 = 0;\n        float temp67 = 0;\n        float
    temp68 = 0;\n        float temp69 = 0;\n        float temp70 = 0;\n        float
    temp71 = 0;\n        float temp72 = 0;\n        float temp73 = 0;\n        float
    temp74 = 0;\n        float temp75 = 0;\n        float temp76 = 0;\n        float
    temp77 = 0;\n        float temp78 = 0;\n        float temp79 = 0;\n        float
    temp80 = 0;\n        float temp81 = 0;\n        float temp82 = 0;\n        \n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(TruncateNumber((3.5f))
    == (0.5f));\n    Debug.Assert(TruncateNumber((1.25f)) == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f))
    == (0.0f));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmph6sg7c57.cs(14,15): warning CS0219: The variable ''integerPart'' is assigned
    but its value is never used

    /tmp/tmph6sg7c57.cs(15,15): warning CS0219: The variable ''decimalPart'' is assigned
    but its value is never used

    /tmp/tmph6sg7c57.cs(16,15): warning CS0219: The variable ''remainder'' is assigned
    but its value is never used

    /tmp/tmph6sg7c57.cs(17,15): warning CS0219: The variable ''quotient'' is assigned
    but its value is never used

    /tmp/tmph6sg7c57.cs(18,15): warning CS0219: The variable ''temp'' is assigned
    but its value is never used

    /tmp/tmph6sg7c57.cs(19,15): warning CS0219: The variable ''temp2'' is assigned
    but its value is never used

    /tmp/tmph6sg7c57.cs(20,15): warning CS0219: The variable ''temp3'' is assigned
    but its value is never used

    /tmp/tmph6sg7c57.cs(21,15): warning CS0219: The variable ''temp4'' is assigned
    but its value is never used

    /tmp/tmph6sg7c57.cs(22,15): warning CS0219: The variable ''temp5'' is assigned
    but its value is never used

    /tmp/tmph6sg7c57.cs(23,15): warning CS0219: The variable ''temp6'' is assigned
    but its value is never used

    /tmp/tmph6sg7c57.cs(24,15): warning CS0219: The variable ''temp7'' is assigned
    but its value is never used

    /tmp/tmph6sg7c57.cs(25,15): warning CS0219: The variable ''temp8'' is assigned
    but its value is never used

    /tmp/tmph6sg7c57.cs(26,15): warning CS0219: The variable ''temp9'' is assigned
    but its value is never used

    /tmp/tmph6sg7c57.cs(27,15): warning CS0219: The variable ''temp10'' is assigned
    but its value is never used

    /tmp/tmph6sg7c57.cs(28,15): warning CS0219: The variable ''temp11'' is assigned
    but its value is never used

    /tmp/tmph6sg7c57.cs(29,15): warning CS0219: The variable ''temp12'' is assigned
    but its value is never used

    /tmp/tmph6sg7c57.cs(30,15): warning CS0219: The variable ''temp13'' is assigned
    but its value is never used

    /tmp/tmph6sg7c57.cs(31,15): warning CS0219: The variable ''temp14'' is assigned
    but its value is never used

    /tmp/tmp'
  timestamp: 1659977071
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive floating point number, it can be decomposed
    into\n    // and integer part (largest integer smaller than given number) and
    decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal
    part of the number.\n    public static float TruncateNumber(float number) {\n
    \       float intPart = number;\n        float decimalPart = (float)(number -
    intPart);\n        return decimalPart;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(TruncateNumber((3.5f)) == (0.5f));\n    Debug.Assert(TruncateNumber((1.25f))
    == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f)) == (0.0f));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <8c934452bccf47b5ba3c8e42e3098a0c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <8c934452bccf47b5ba3c8e42e3098a0c>:0
    \n"
  stdout: ''
  timestamp: 1659977071
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive floating point number, it can be decomposed
    into\n    // and integer part (largest integer smaller than given number) and
    decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal
    part of the number.\n    public static float TruncateNumber(float number) {\n
    \       float integerPart = 0;\n        float decimalPart = 0;\n        float
    temp = 0;\n        float temp2 = 0;\n        float temp3 = 0;\n        float temp4
    = 0;\n        float temp5 = 0;\n        float temp6 = 0;\n        float temp7
    = 0;\n        float temp8 = 0;\n        float temp9 = 0;\n        float temp10
    = 0;\n        float temp11 = 0;\n        float temp12 = 0;\n        float temp13
    = 0;\n        float temp14 = 0;\n        float temp15 = 0;\n        float temp16
    = 0;\n        float temp17 = 0;\n        float temp18 = 0;\n        float temp19
    = 0;\n        float temp20 = 0;\n        float temp21 = 0;\n        float temp22
    = 0;\n        float temp23 = 0;\n        float temp24 = 0;\n        float temp25
    = 0;\n        float temp26 = 0;\n        float temp27 = 0;\n        float temp28
    = 0;\n        float temp29 = 0;\n        float temp30 = 0;\n        float temp31
    = 0;\n        float temp32 = 0;\n        float temp33 = 0;\n        float temp34
    = 0;\n        float temp35 = 0;\n        float temp36 = 0;\n        float temp37
    = 0;\n        float temp38 = 0;\n        float temp39 = 0;\n        float temp40
    = 0;\n        float temp41 = 0;\n        float temp42 = 0;\n        float temp43
    = 0;\n        float temp44 = 0;\n        float temp45 = 0;\n        float temp46
    = 0;\n        float temp47 = 0;\n        float temp48 = 0;\n        float temp49
    = 0;\n        float temp50 = 0;\n        float temp51 = 0;\n        float temp52
    = 0;\n        float temp53 = 0;\n        float temp54 = 0;\n        float temp55
    = 0;\n        float temp56 = 0;\n        float temp57 = 0;\n        float temp58
    = 0;\n        float temp59 = 0;\n        float temp60 = 0;\n        float temp61
    = 0;\n        float temp62 = 0;\n        float temp63 = 0;\n        float temp64
    = 0;\n        float temp65 = 0;\n        float temp66 = 0;\n        float temp67
    = 0;\n        float temp68 = 0;\n        float temp69 = 0;\n        float temp70
    = 0;\n        float temp71 = 0;\n        float temp72 = 0;\n        float temp73
    = 0;\n        float temp74 = 0;\n        float temp75 = 0;\n        float temp76
    = 0;\n        float temp77 = 0;\n        float temp78 = 0;\n        float temp79
    = 0;\n        float temp80 = 0;\n        float temp81 = 0;\n        float temp82
    = 0;\n        float temp83 = 0;\n        float temp84 = 0;\n        \n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(TruncateNumber((3.5f))
    == (0.5f));\n    Debug.Assert(TruncateNumber((1.25f)) == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f))
    == (0.0f));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpvu1akkb4.cs(14,15): warning CS0219: The variable ''integerPart'' is assigned
    but its value is never used

    /tmp/tmpvu1akkb4.cs(15,15): warning CS0219: The variable ''decimalPart'' is assigned
    but its value is never used

    /tmp/tmpvu1akkb4.cs(16,15): warning CS0219: The variable ''temp'' is assigned
    but its value is never used

    /tmp/tmpvu1akkb4.cs(17,15): warning CS0219: The variable ''temp2'' is assigned
    but its value is never used

    /tmp/tmpvu1akkb4.cs(18,15): warning CS0219: The variable ''temp3'' is assigned
    but its value is never used

    /tmp/tmpvu1akkb4.cs(19,15): warning CS0219: The variable ''temp4'' is assigned
    but its value is never used

    /tmp/tmpvu1akkb4.cs(20,15): warning CS0219: The variable ''temp5'' is assigned
    but its value is never used

    /tmp/tmpvu1akkb4.cs(21,15): warning CS0219: The variable ''temp6'' is assigned
    but its value is never used

    /tmp/tmpvu1akkb4.cs(22,15): warning CS0219: The variable ''temp7'' is assigned
    but its value is never used

    /tmp/tmpvu1akkb4.cs(23,15): warning CS0219: The variable ''temp8'' is assigned
    but its value is never used

    /tmp/tmpvu1akkb4.cs(24,15): warning CS0219: The variable ''temp9'' is assigned
    but its value is never used

    /tmp/tmpvu1akkb4.cs(25,15): warning CS0219: The variable ''temp10'' is assigned
    but its value is never used

    /tmp/tmpvu1akkb4.cs(26,15): warning CS0219: The variable ''temp11'' is assigned
    but its value is never used

    /tmp/tmpvu1akkb4.cs(27,15): warning CS0219: The variable ''temp12'' is assigned
    but its value is never used

    /tmp/tmpvu1akkb4.cs(28,15): warning CS0219: The variable ''temp13'' is assigned
    but its value is never used

    /tmp/tmpvu1akkb4.cs(29,15): warning CS0219: The variable ''temp14'' is assigned
    but its value is never used

    /tmp/tmpvu1akkb4.cs(30,15): warning CS0219: The variable ''temp15'' is assigned
    but its value is never used

    /tmp/tmpvu1akkb4.cs(31,15): warning CS0219: The variable ''temp16'' is assigned
    but its value is never used

    /tmp/tmpvu1ak'
  timestamp: 1659977071
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive floating point number, it can be decomposed
    into\n    // and integer part (largest integer smaller than given number) and
    decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal
    part of the number.\n    public static float TruncateNumber(float number) {\n
    \       float integerPart = (float)Math.Floor(number);\n        float decimalPart
    = (float)number - integerPart;\n        return decimalPart;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(TruncateNumber((3.5f)) ==
    (0.5f));\n    Debug.Assert(TruncateNumber((1.25f)) == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f))
    == (0.0f));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977071
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive floating point number, it can be decomposed
    into\n    // and integer part (largest integer smaller than given number) and
    decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal
    part of the number.\n    public static float TruncateNumber(float number) {\n
    \       float integerPart = (float)Math.Truncate(number);\n        float decimalPart
    = number - integerPart;\n        return decimalPart;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(TruncateNumber((3.5f)) == (0.5f));\n
    \   Debug.Assert(TruncateNumber((1.25f)) == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f))
    == (0.0f));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977071
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive floating point number, it can be decomposed
    into\n    // and integer part (largest integer smaller than given number) and
    decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal
    part of the number.\n    public static float TruncateNumber(float number) {\n
    \       float truncatedNumber = number;\n        float integerPart = 0;\n        float
    decimalPart = 0;\n        while (truncatedNumber > 0) {\n            integerPart
    += truncatedNumber % 10;\n            truncatedNumber = truncatedNumber / 10;\n
    \       }\n        while (truncatedNumber > 0) {\n            decimalPart += truncatedNumber
    % 10;\n            truncatedNumber = truncatedNumber / 10;\n        }\n        return
    decimalPart;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(TruncateNumber((3.5f))
    == (0.5f));\n    Debug.Assert(TruncateNumber((1.25f)) == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f))
    == (0.0f));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <5de25c9f033f47e68d905126b3101c25>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <5de25c9f033f47e68d905126b3101c25>:0
    \n"
  stdout: ''
  timestamp: 1659977071
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive floating point number, it can be decomposed
    into\n    // and integer part (largest integer smaller than given number) and
    decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal
    part of the number.\n    public static float TruncateNumber(float number) {\n
    \       float integerPart = number;\n        float decimalPart = 1;\n        while
    (decimalPart < 1) {\n            integerPart *= 10;\n            decimalPart *=
    10;\n        }\n        return integerPart;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(TruncateNumber((3.5f)) == (0.5f));\n    Debug.Assert(TruncateNumber((1.25f))
    == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f)) == (0.0f));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <35c907c7fe8b43149592683b508ac760>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <35c907c7fe8b43149592683b508ac760>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977071
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive floating point number, it can be decomposed
    into\n    // and integer part (largest integer smaller than given number) and
    decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal
    part of the number.\n    public static float TruncateNumber(float number) {\n
    \       float integerPart;\n        float decimalPart;\n        float temp;\n
    \       float temp2;\n        float temp3;\n        float temp4;\n        float
    temp5;\n        float temp6;\n        float temp7;\n        float temp8;\n        float
    temp9;\n        float temp10;\n        float temp11;\n        float temp12;\n
    \       float temp13;\n        float temp14;\n        float temp15;\n        float
    temp16;\n        float temp17;\n        float temp18;\n        float temp19;\n
    \       float temp20;\n        float temp21;\n        float temp22;\n        float
    temp23;\n        float temp24;\n        float temp25;\n        float temp26;\n
    \       float temp27;\n        float temp28;\n        float temp29;\n        float
    temp30;\n        float temp31;\n        float temp32;\n        float temp33;\n
    \       float temp34;\n        float temp35;\n        float temp36;\n        float
    temp37;\n        float temp38;\n        float temp39;\n        float temp40;\n
    \       float temp41;\n        float temp42;\n        float temp43;\n        float
    temp44;\n        float temp45;\n        float temp46;\n        float temp47;\n
    \       float temp48;\n        float temp49;\n        float temp50;\n        float
    temp51;\n        float temp52;\n        float temp53;\n        float temp54;\n
    \       float temp55;\n        float temp56;\n        float temp57;\n        float
    temp58;\n        float temp59;\n        float temp60;\n        float temp61;\n
    \       float temp62;\n        float temp63;\n        float temp64;\n        float
    temp65;\n        float temp66;\n        float temp67;\n        float temp68;\n
    \       float temp69;\n        float temp70;\n        float temp71;\n        float
    temp72;\n        float temp73;\n        float temp74;\n        float temp75;\n
    \       float temp76;\n        float temp77;\n        float temp78;\n        float
    temp79;\n        float temp80;\n        float temp81;\n        float temp82;\n
    \       float temp83;\n        float temp84;\n        float temp85;\n        float
    temp86;\n        float temp87\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(TruncateNumber((3.5f)) == (0.5f));\n    Debug.Assert(TruncateNumber((1.25f))
    == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f)) == (0.0f));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpztizkx15.cs(102,21): error CS1002: ; expected

    '
  timestamp: 1659977071
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive floating point number, it can be decomposed
    into\n    // and integer part (largest integer smaller than given number) and
    decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal
    part of the number.\n    public static float TruncateNumber(float number) {\n
    \       float integerPart = number;\n        float decimalPart = number - integerPart;\n
    \       if (decimalPart > 0.0f) {\n            integerPart += 1.0f;\n        }\n
    \       return integerPart;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(TruncateNumber((3.5f)) == (0.5f));\n    Debug.Assert(TruncateNumber((1.25f))
    == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f)) == (0.0f));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <8ddcfb23d5674f6f8e1c38723b2696c3>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <8ddcfb23d5674f6f8e1c38723b2696c3>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977072
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive floating point number, it can be decomposed
    into\n    // and integer part (largest integer smaller than given number) and
    decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal
    part of the number.\n    public static float TruncateNumber(float number) {\n
    \       float truncatedNumber = number;\n        float integerPart;\n        float
    decimalPart;\n        float fractionalPart;\n        float fractionalPartRemainder;\n
    \       float fractionalPartRemainderRemainder;\n        float fractionalPartRemainderRemainderRemainder;\n
    \       float fractionalPartRemainderRemainderRemainderRemainder;\n        float
    fractionalPartRemainderRemainderRemainderRemainderRemainder;\n        float fractionalPartRemainderRemainderRemainderRemainderRemainderRemainder;\n
    \       float fractionalPartRemainderRemainderRemainderRemainderRemainderRemainder;\n
    \       float fractionalPartRemainderRemainderRemainderRemainderRemainderRemainderRemainder;\n
    \       float fractionalPartRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainder;\n
    \       float fractionalPartRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainder;\n
    \       float fractionalPartRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainder;\n
    \       float fractionalPartRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainder;\n
    \       float fractionalPartRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainder;\n
    \       float fractionalPartRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainder;\n
    \       float fractionalPartRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainder;\n
    \       float fractionalPartRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainder;\n
    \       float fractionalPartRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainder;\n
    \       float fractionalPartRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainder;\n
    \       float fractionalPartRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainder;\n
    \       float fractionalPartRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainder;\n
    \       float fractionalPartRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainder;\n
    \       float fractionalPartRemainderRemainder\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(TruncateNumber((3.5f)) == (0.5f));\n    Debug.Assert(TruncateNumber((1.25f))
    == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f)) == (0.0f));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpyi882znw.cs(39,47): error CS1002: ; expected

    '
  timestamp: 1659977071
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive floating point number, it can be decomposed
    into\n    // and integer part (largest integer smaller than given number) and
    decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal
    part of the number.\n    public static float TruncateNumber(float number) {\n
    \       float integerPart = number;\n        float decimalPart = number - integerPart;\n
    \       return decimalPart;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(TruncateNumber((3.5f)) == (0.5f));\n    Debug.Assert(TruncateNumber((1.25f))
    == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f)) == (0.0f));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <47e9a4810ba2493e918e49632d104bca>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <47e9a4810ba2493e918e49632d104bca>:0
    \n"
  stdout: ''
  timestamp: 1659977071
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive floating point number, it can be decomposed
    into\n    // and integer part (largest integer smaller than given number) and
    decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal
    part of the number.\n    public static float TruncateNumber(float number) {\n
    \       float integerPart = 0;\n        float decimalPart = 0;\n        float
    remainder = 0;\n        float temp = 0;\n        float temp2 = 0;\n        float
    temp3 = 0;\n        float temp4 = 0;\n        float temp5 = 0;\n        float
    temp6 = 0;\n        float temp7 = 0;\n        float temp8 = 0;\n        float
    temp9 = 0;\n        float temp10 = 0;\n        float temp11 = 0;\n        float
    temp12 = 0;\n        float temp13 = 0;\n        float temp14 = 0;\n        float
    temp15 = 0;\n        float temp16 = 0;\n        float temp17 = 0;\n        float
    temp18 = 0;\n        float temp19 = 0;\n        float temp20 = 0;\n        float
    temp21 = 0;\n        float temp22 = 0;\n        float temp23 = 0;\n        float
    temp24 = 0;\n        float temp25 = 0;\n        float temp26 = 0;\n        float
    temp27 = 0;\n        float temp28 = 0;\n        float temp29 = 0;\n        float
    temp30 = 0;\n        float temp31 = 0;\n        float temp32 = 0;\n        float
    temp33 = 0;\n        float temp34 = 0;\n        float temp35 = 0;\n        float
    temp36 = 0;\n        float temp37 = 0;\n        float temp38 = 0;\n        float
    temp39 = 0;\n        float temp40 = 0;\n        float temp41 = 0;\n        float
    temp42 = 0;\n        float temp43 = 0;\n        float temp44 = 0;\n        float
    temp45 = 0;\n        float temp46 = 0;\n        float temp47 = 0;\n        float
    temp48 = 0;\n        float temp49 = 0;\n        float temp50 = 0;\n        float
    temp51 = 0;\n        float temp52 = 0;\n        float temp53 = 0;\n        float
    temp54 = 0;\n        float temp55 = 0;\n        float temp56 = 0;\n        float
    temp57 = 0;\n        float temp58 = 0;\n        float temp59 = 0;\n        float
    temp60 = 0;\n        float temp61 = 0;\n        float temp62 = 0;\n        float
    temp63 = 0;\n        float temp64 = 0;\n        float temp65 = 0;\n        float
    temp66 = 0;\n        float temp67 = 0;\n        float temp68 = 0;\n        float
    temp69 = 0;\n        float temp70 = 0;\n        float temp71 = 0;\n        float
    temp72 = 0;\n        float temp73 = 0;\n        float temp74 = 0;\n        float
    temp75 = 0;\n        float temp76 = 0;\n        float temp77 = 0;\n        float
    temp78 = 0;\n        float temp79 = 0;\n        float temp80 = 0;\n        float
    temp81 = 0;\n        float temp82 = 0;\n        float temp83 = 0;\n        \n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(TruncateNumber((3.5f))
    == (0.5f));\n    Debug.Assert(TruncateNumber((1.25f)) == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f))
    == (0.0f));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpqn6e7o2n.cs(14,15): warning CS0219: The variable ''integerPart'' is assigned
    but its value is never used

    /tmp/tmpqn6e7o2n.cs(15,15): warning CS0219: The variable ''decimalPart'' is assigned
    but its value is never used

    /tmp/tmpqn6e7o2n.cs(16,15): warning CS0219: The variable ''remainder'' is assigned
    but its value is never used

    /tmp/tmpqn6e7o2n.cs(17,15): warning CS0219: The variable ''temp'' is assigned
    but its value is never used

    /tmp/tmpqn6e7o2n.cs(18,15): warning CS0219: The variable ''temp2'' is assigned
    but its value is never used

    /tmp/tmpqn6e7o2n.cs(19,15): warning CS0219: The variable ''temp3'' is assigned
    but its value is never used

    /tmp/tmpqn6e7o2n.cs(20,15): warning CS0219: The variable ''temp4'' is assigned
    but its value is never used

    /tmp/tmpqn6e7o2n.cs(21,15): warning CS0219: The variable ''temp5'' is assigned
    but its value is never used

    /tmp/tmpqn6e7o2n.cs(22,15): warning CS0219: The variable ''temp6'' is assigned
    but its value is never used

    /tmp/tmpqn6e7o2n.cs(23,15): warning CS0219: The variable ''temp7'' is assigned
    but its value is never used

    /tmp/tmpqn6e7o2n.cs(24,15): warning CS0219: The variable ''temp8'' is assigned
    but its value is never used

    /tmp/tmpqn6e7o2n.cs(25,15): warning CS0219: The variable ''temp9'' is assigned
    but its value is never used

    /tmp/tmpqn6e7o2n.cs(26,15): warning CS0219: The variable ''temp10'' is assigned
    but its value is never used

    /tmp/tmpqn6e7o2n.cs(27,15): warning CS0219: The variable ''temp11'' is assigned
    but its value is never used

    /tmp/tmpqn6e7o2n.cs(28,15): warning CS0219: The variable ''temp12'' is assigned
    but its value is never used

    /tmp/tmpqn6e7o2n.cs(29,15): warning CS0219: The variable ''temp13'' is assigned
    but its value is never used

    /tmp/tmpqn6e7o2n.cs(30,15): warning CS0219: The variable ''temp14'' is assigned
    but its value is never used

    /tmp/tmpqn6e7o2n.cs(31,15): warning CS0219: The variable ''temp15'' is assigned
    but its value is never used

    /tmp/tmpqn'
  timestamp: 1659977071
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive floating point number, it can be decomposed
    into\n    // and integer part (largest integer smaller than given number) and
    decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal
    part of the number.\n    public static float TruncateNumber(float number) {\n
    \       float integerPart = number;\n        float decimalPart = 1;\n        while
    (decimalPart < 1) {\n            integerPart *= 10;\n            decimalPart *=
    10;\n        }\n        return integerPart;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(TruncateNumber((3.5f)) == (0.5f));\n    Debug.Assert(TruncateNumber((1.25f))
    == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f)) == (0.0f));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <35c907c7fe8b43149592683b508ac760>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <35c907c7fe8b43149592683b508ac760>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977071
- exit_code: -1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive floating point number, it can be decomposed
    into\n    // and integer part (largest integer smaller than given number) and
    decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal
    part of the number.\n    public static float TruncateNumber(float number) {\n
    \       float truncatedNumber = number;\n        float integerPart = truncatedNumber
    - TruncateNumber(truncatedNumber);\n        float decimalPart = truncatedNumber
    - TruncateNumber(integerPart);\n        return decimalPart;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(TruncateNumber((3.5f)) ==
    (0.5f));\n    Debug.Assert(TruncateNumber((1.25f)) == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f))
    == (0.0f));\n    }\n\n}\n"
  status: Timeout
  stderr: ''
  stdout: None
  timestamp: 1659977077
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive floating point number, it can be decomposed
    into\n    // and integer part (largest integer smaller than given number) and
    decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal
    part of the number.\n    public static float TruncateNumber(float number) {\n
    \       float result = number;\n        float integerPart = result;\n        float
    decimalPart = result;\n        while (decimalPart > 1) {\n            decimalPart
    /= 10;\n            integerPart *= 10;\n        }\n        return integerPart;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(TruncateNumber((3.5f))
    == (0.5f));\n    Debug.Assert(TruncateNumber((1.25f)) == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f))
    == (0.0f));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c1edbcdc10114af4aaf98ba362a33fbe>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c1edbcdc10114af4aaf98ba362a33fbe>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977072
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive floating point number, it can be decomposed
    into\n    // and integer part (largest integer smaller than given number) and
    decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal
    part of the number.\n    public static float TruncateNumber(float number) {\n
    \       float truncatedNumber = number;\n        float integerPart = 0;\n        float
    decimalPart = 0;\n        while (truncatedNumber > 0) {\n            integerPart
    += truncatedNumber % 10;\n            truncatedNumber = truncatedNumber / 10;\n
    \       }\n        while (truncatedNumber > 0) {\n            decimalPart += truncatedNumber
    % 10;\n            truncatedNumber = truncatedNumber / 10;\n        }\n        return
    integerPart + decimalPart;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(TruncateNumber((3.5f)) == (0.5f));\n    Debug.Assert(TruncateNumber((1.25f))
    == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f)) == (0.0f));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <17fb8810641e48e88e8272acecb826a3>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <17fb8810641e48e88e8272acecb826a3>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977072
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive floating point number, it can be decomposed
    into\n    // and integer part (largest integer smaller than given number) and
    decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal
    part of the number.\n    public static float TruncateNumber(float number) {\n
    \       float intPart = number;\n        float decimalPart = number - intPart;\n
    \       return decimalPart;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(TruncateNumber((3.5f)) == (0.5f));\n    Debug.Assert(TruncateNumber((1.25f))
    == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f)) == (0.0f));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <5959b70f93124f20b9b055860aa57028>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <5959b70f93124f20b9b055860aa57028>:0
    \n"
  stdout: ''
  timestamp: 1659977072
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive floating point number, it can be decomposed
    into\n    // and integer part (largest integer smaller than given number) and
    decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal
    part of the number.\n    public static float TruncateNumber(float number) {\n
    \       float intPart = number;\n        float decimalPart = number - intPart;\n
    \       return decimalPart;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(TruncateNumber((3.5f)) == (0.5f));\n    Debug.Assert(TruncateNumber((1.25f))
    == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f)) == (0.0f));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <5959b70f93124f20b9b055860aa57028>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <5959b70f93124f20b9b055860aa57028>:0
    \n"
  stdout: ''
  timestamp: 1659977072
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive floating point number, it can be decomposed
    into\n    // and integer part (largest integer smaller than given number) and
    decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal
    part of the number.\n    public static float TruncateNumber(float number) {\n
    \       float truncatedNumber = number;\n        float integerPart = 0;\n        float
    decimalPart = 0;\n        float decimalMultiplier = 1;\n        while (truncatedNumber
    > 0) {\n            integerPart += truncatedNumber % 10;\n            truncatedNumber
    = truncatedNumber / 10;\n        }\n        while (truncatedNumber > 0) {\n            decimalPart
    += truncatedNumber * decimalMultiplier;\n            truncatedNumber = truncatedNumber
    / 10;\n            decimalMultiplier *= 10;\n        }\n        return decimalPart;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(TruncateNumber((3.5f))
    == (0.5f));\n    Debug.Assert(TruncateNumber((1.25f)) == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f))
    == (0.0f));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <68df130b9d114d7faa92030542e44f81>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <68df130b9d114d7faa92030542e44f81>:0
    \n"
  stdout: ''
  timestamp: 1659977072
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive floating point number, it can be decomposed
    into\n    // and integer part (largest integer smaller than given number) and
    decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal
    part of the number.\n    public static float TruncateNumber(float number) {\n
    \       float integerPart = (float)Math.Truncate(number);\n        float decimalPart
    = (float)number - integerPart;\n        return decimalPart;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(TruncateNumber((3.5f)) ==
    (0.5f));\n    Debug.Assert(TruncateNumber((1.25f)) == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f))
    == (0.0f));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977072
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive floating point number, it can be decomposed
    into\n    // and integer part (largest integer smaller than given number) and
    decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal
    part of the number.\n    public static float TruncateNumber(float number) {\n
    \       float integerPart;\n        float decimalPart;\n        float remainder;\n
    \       float temp;\n        float temp2;\n        float temp3;\n        float
    temp4;\n        float temp5;\n        float temp6;\n        float temp7;\n        float
    temp8;\n        float temp9;\n        float temp10;\n        float temp11;\n        float
    temp12;\n        float temp13;\n        float temp14;\n        float temp15;\n
    \       float temp16;\n        float temp17;\n        float temp18;\n        float
    temp19;\n        float temp20;\n        float temp21;\n        float temp22;\n
    \       float temp23;\n        float temp24;\n        float temp25;\n        float
    temp26;\n        float temp27;\n        float temp28;\n        float temp29;\n
    \       float temp30;\n        float temp31;\n        float temp32;\n        float
    temp33;\n        float temp34;\n        float temp35;\n        float temp36;\n
    \       float temp37;\n        float temp38;\n        float temp39;\n        float
    temp40;\n        float temp41;\n        float temp42;\n        float temp43;\n
    \       float temp44;\n        float temp45;\n        float temp46;\n        float
    temp47;\n        float temp48;\n        float temp49;\n        float temp50;\n
    \       float temp51;\n        float temp52;\n        float temp53;\n        float
    temp54;\n        float temp55;\n        float temp56;\n        float temp57;\n
    \       float temp58;\n        float temp59;\n        float temp60;\n        float
    temp61;\n        float temp62;\n        float temp63;\n        float temp64;\n
    \       float temp65;\n        float temp66;\n        float temp67;\n        float
    temp68;\n        float temp69;\n        float temp70;\n        float temp71;\n
    \       float temp72;\n        float temp73;\n        float temp74;\n        float
    temp75;\n        float temp76;\n        float temp77;\n        float temp78;\n
    \       float temp79;\n        float temp80;\n        float temp81;\n        float
    temp82;\n        float temp83;\n        float temp84;\n        float temp85;\n
    \       float temp86\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(TruncateNumber((3.5f))
    == (0.5f));\n    Debug.Assert(TruncateNumber((1.25f)) == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f))
    == (0.0f));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp7ohf2t3r.cs(102,21): error CS1002: ; expected

    '
  timestamp: 1659977070
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive floating point number, it can be decomposed
    into\n    // and integer part (largest integer smaller than given number) and
    decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal
    part of the number.\n    public static float TruncateNumber(float number) {\n
    \       float integerPart = (float)Math.Floor(number);\n        float decimalPart
    = (float)number - integerPart;\n        return decimalPart;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(TruncateNumber((3.5f)) ==
    (0.5f));\n    Debug.Assert(TruncateNumber((1.25f)) == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f))
    == (0.0f));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977071
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive floating point number, it can be decomposed
    into\n    // and integer part (largest integer smaller than given number) and
    decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal
    part of the number.\n    public static float TruncateNumber(float number) {\n
    \       float integerPart = (float)Math.Floor(number);\n        float decimalPart
    = (float)number - integerPart;\n        return decimalPart;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(TruncateNumber((3.5f)) ==
    (0.5f));\n    Debug.Assert(TruncateNumber((1.25f)) == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f))
    == (0.0f));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977071
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive floating point number, it can be decomposed
    into\n    // and integer part (largest integer smaller than given number) and
    decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal
    part of the number.\n    public static float TruncateNumber(float number) {\n
    \       float truncatedNumber = number;\n        float integerPart = 0;\n        float
    decimalPart = 0;\n        while (truncatedNumber != 0) {\n            float remainder
    = truncatedNumber % 10;\n            truncatedNumber = truncatedNumber / 10;\n
    \           integerPart += remainder;\n            decimalPart += remainder;\n
    \       }\n        return decimalPart;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(TruncateNumber((3.5f)) == (0.5f));\n    Debug.Assert(TruncateNumber((1.25f))
    == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f)) == (0.0f));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <904ae04bb53845b9b9eb1e1fb7c16b20>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <904ae04bb53845b9b9eb1e1fb7c16b20>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977072
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive floating point number, it can be decomposed
    into\n    // and integer part (largest integer smaller than given number) and
    decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal
    part of the number.\n    public static float TruncateNumber(float number) {\n
    \       float truncatedNumber = number;\n        float integerPart = 0;\n        float
    decimalPart = 0;\n        while (truncatedNumber > 0) {\n            integerPart
    += truncatedNumber % 10;\n            truncatedNumber = truncatedNumber / 10;\n
    \       }\n        while (truncatedNumber > 0) {\n            decimalPart += truncatedNumber
    % 10;\n            truncatedNumber = truncatedNumber / 10;\n        }\n        return
    decimalPart;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(TruncateNumber((3.5f))
    == (0.5f));\n    Debug.Assert(TruncateNumber((1.25f)) == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f))
    == (0.0f));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <5de25c9f033f47e68d905126b3101c25>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <5de25c9f033f47e68d905126b3101c25>:0
    \n"
  stdout: ''
  timestamp: 1659977071
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive floating point number, it can be decomposed
    into\n    // and integer part (largest integer smaller than given number) and
    decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal
    part of the number.\n    public static float TruncateNumber(float number) {\n
    \       float intPart = (float)Math.Floor(number);\n        float decimalPart
    = (float)number - intPart;\n        return intPart + decimalPart;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(TruncateNumber((3.5f)) ==
    (0.5f));\n    Debug.Assert(TruncateNumber((1.25f)) == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f))
    == (0.0f));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <e59f203d3d7d41cdb83537d0e2dd86b8>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <e59f203d3d7d41cdb83537d0e2dd86b8>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977072
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive floating point number, it can be decomposed
    into\n    // and integer part (largest integer smaller than given number) and
    decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal
    part of the number.\n    public static float TruncateNumber(float number) {\n
    \       BigInteger bigInteger = new BigInteger(number);\n        BigInteger bigIntegerRemainder
    = bigInteger.Remainder;\n        BigInteger bigIntegerDecimal = bigIntegerRemainder.Divide(BigInteger.One);\n
    \       float truncatedNumber = bigIntegerDecimal.ToSingle();\n        return
    truncatedNumber;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(TruncateNumber((3.5f))
    == (0.5f));\n    Debug.Assert(TruncateNumber((1.25f)) == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f))
    == (0.0f));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmps8v9wl9q.cs(15,53): error CS0428: Cannot convert method group ''Remainder''
    to non-delegate type ''BigInteger''. Did you intend to invoke the method?

    /tmp/tmps8v9wl9q.cs(16,60): error CS7036: There is no argument given that corresponds
    to the required formal parameter ''divisor'' of ''BigInteger.Divide(BigInteger,
    BigInteger)''

    /tmp/tmps8v9wl9q.cs(17,51): error CS1061: ''BigInteger'' does not contain a definition
    for ''ToSingle'' and no accessible extension method ''ToSingle'' accepting a first
    argument of type ''BigInteger'' could be found (are you missing a using directive
    or an assembly reference?)

    '
  timestamp: 1659977072
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive floating point number, it can be decomposed
    into\n    // and integer part (largest integer smaller than given number) and
    decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal
    part of the number.\n    public static float TruncateNumber(float number) {\n
    \       float integerPart = number;\n        float decimalPart = number - integerPart;\n
    \       return decimalPart;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(TruncateNumber((3.5f)) == (0.5f));\n    Debug.Assert(TruncateNumber((1.25f))
    == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f)) == (0.0f));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <47e9a4810ba2493e918e49632d104bca>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <47e9a4810ba2493e918e49632d104bca>:0
    \n"
  stdout: ''
  timestamp: 1659977071
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive floating point number, it can be decomposed
    into\n    // and integer part (largest integer smaller than given number) and
    decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal
    part of the number.\n    public static float TruncateNumber(float number) {\n
    \       BigInteger bigInteger = new BigInteger(number);\n        BigInteger bigIntegerRemainder
    = bigInteger.Remainder;\n        float truncatedNumber = (float)bigIntegerRemainder.Value;\n
    \       return truncatedNumber;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(TruncateNumber((3.5f)) == (0.5f));\n    Debug.Assert(TruncateNumber((1.25f))
    == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f)) == (0.0f));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmptjh1z79j.cs(15,53): error CS0428: Cannot convert method group ''Remainder''
    to non-delegate type ''BigInteger''. Did you intend to invoke the method?

    /tmp/tmptjh1z79j.cs(16,60): error CS1061: ''BigInteger'' does not contain a definition
    for ''Value'' and no accessible extension method ''Value'' accepting a first argument
    of type ''BigInteger'' could be found (are you missing a using directive or an
    assembly reference?)

    '
  timestamp: 1659977072
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive floating point number, it can be decomposed
    into\n    // and integer part (largest integer smaller than given number) and
    decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal
    part of the number.\n    public static float TruncateNumber(float number) {\n
    \       float truncatedNumber = number;\n        float integerPart = 0;\n        float
    decimalPart = 0;\n        while (truncatedNumber > 0) {\n            integerPart
    += truncatedNumber % 10;\n            truncatedNumber = truncatedNumber / 10;\n
    \       }\n        while (truncatedNumber > 0) {\n            decimalPart += truncatedNumber
    % 1;\n            truncatedNumber = truncatedNumber / 10;\n        }\n        return
    decimalPart;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(TruncateNumber((3.5f))
    == (0.5f));\n    Debug.Assert(TruncateNumber((1.25f)) == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f))
    == (0.0f));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <3d5f786585e34fb08096f980e2d760c7>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <3d5f786585e34fb08096f980e2d760c7>:0
    \n"
  stdout: ''
  timestamp: 1659977072
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive floating point number, it can be decomposed
    into\n    // and integer part (largest integer smaller than given number) and
    decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal
    part of the number.\n    public static float TruncateNumber(float number) {\n
    \       float integerPart = (float)Math.Floor(number);\n        float decimalPart
    = number - integerPart;\n        return decimalPart;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(TruncateNumber((3.5f)) == (0.5f));\n
    \   Debug.Assert(TruncateNumber((1.25f)) == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f))
    == (0.0f));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977071
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive floating point number, it can be decomposed
    into\n    // and integer part (largest integer smaller than given number) and
    decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal
    part of the number.\n    public static float TruncateNumber(float number) {\n
    \       float integerPart;\n        float decimalPart;\n        float fractionalPart;\n
    \       float remainder;\n        float quotient;\n        float quotientRemainder;\n
    \       float quotientRemainderFractional;\n        float quotientRemainderFractionalRemainder;\n
    \       float quotientRemainderFractionalRemainderFractional;\n        float quotientRemainderFractionalRemainderFractionalRemainder;\n
    \       float quotientRemainderFractionalRemainderFractionalRemainderFractional;\n
    \       float quotientRemainderFractionalRemainderFractionalRemainderFractionalRemainder;\n
    \       float quotientRemainderFractionalRemainderFractionalRemainderFractionalRemainderFractional;\n
    \       float quotientRemainderFractionalRemainderFractionalRemainderFractionalRemainderFractionalRemainder;\n
    \       float quotientRemainderFractionalRemainderFractionalRemainderFractionalRemainderFractionalRemainderFractional;\n
    \       float quotientRemainderFractionalRemainderFractionalRemainderFractionalRemainderFractionalRemainderFractionalRemainder;\n
    \       float quotientRemainderFractionalRemainderFractionalRemainderFractionalRemainderFractionalRemainderFractionalRemainderFractional;\n
    \       float quotientRemainderFractionalRemainderFractionalRemainderFractionalRemainderFractionalRemainderFractionalRemainderFractionalRemainder;\n
    \       float quotientRemainderFractionalRemainderFractionalRemainderFractionalRemainderFractionalRemainderFractionalRemainderFractionalRemainderFractionalRemainder;\n
    \       float quotientRemainderFractionalRemainderFractionalRemainderFractionalRemainderFractionalRemainderFractionalRemainderFractionalRemainderFractionalRemainderFractionalRemainder;\n
    \       float quotientRemainderFractionalRemainderFractionalRemainderFractionalRemainderFractionalRemainderFractionalRemainderFractionalRemainderFractionalRemainderFractionalRemainder;\n
    \       float quotientRemainderFractionalRemainderFractionalRemainderFractionalRemainderFractionalRemainderFractionalRemainderFractionalRemainderFractionalRemainderFractionalRemainderFractionalRemainder;\n
    \       float quotientRemainderFractionalRemainderFractionalRemainderFractionalRemainderFractionalRemainderFractionalRemainderFractionalRemainderFractionalRemainderFractionalRemainderFractionalRemainderFractionalRemainder;\n
    \       float quotientRemainderFractionalRemainderFractionalRemain\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(TruncateNumber((3.5f)) ==
    (0.5f));\n    Debug.Assert(TruncateNumber((1.25f)) == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f))
    == (0.0f));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmppv3y5stl.cs(37,67): error CS1002: ; expected

    '
  timestamp: 1659977071
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive floating point number, it can be decomposed
    into\n    // and integer part (largest integer smaller than given number) and
    decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal
    part of the number.\n    public static float TruncateNumber(float number) {\n
    \       float integerPart = 0;\n        float decimalPart = 0;\n        float
    remainder = 0;\n        float quotient = 0;\n        float temp = 0;\n        float
    temp2 = 0;\n        float temp3 = 0;\n        float temp4 = 0;\n        float
    temp5 = 0;\n        float temp6 = 0;\n        float temp7 = 0;\n        float
    temp8 = 0;\n        float temp9 = 0;\n        float temp10 = 0;\n        float
    temp11 = 0;\n        float temp12 = 0;\n        float temp13 = 0;\n        float
    temp14 = 0;\n        float temp15 = 0;\n        float temp16 = 0;\n        float
    temp17 = 0;\n        float temp18 = 0;\n        float temp19 = 0;\n        float
    temp20 = 0;\n        float temp21 = 0;\n        float temp22 = 0;\n        float
    temp23 = 0;\n        float temp24 = 0;\n        float temp25 = 0;\n        float
    temp26 = 0;\n        float temp27 = 0;\n        float temp28 = 0;\n        float
    temp29 = 0;\n        float temp30 = 0;\n        float temp31 = 0;\n        float
    temp32 = 0;\n        float temp33 = 0;\n        float temp34 = 0;\n        float
    temp35 = 0;\n        float temp36 = 0;\n        float temp37 = 0;\n        float
    temp38 = 0;\n        float temp39 = 0;\n        float temp40 = 0;\n        float
    temp41 = 0;\n        float temp42 = 0;\n        float temp43 = 0;\n        float
    temp44 = 0;\n        float temp45 = 0;\n        float temp46 = 0;\n        float
    temp47 = 0;\n        float temp48 = 0;\n        float temp49 = 0;\n        float
    temp50 = 0;\n        float temp51 = 0;\n        float temp52 = 0;\n        float
    temp53 = 0;\n        float temp54 = 0;\n        float temp55 = 0;\n        float
    temp56 = 0;\n        float temp57 = 0;\n        float temp58 = 0;\n        float
    temp59 = 0;\n        float temp60 = 0;\n        float temp61 = 0;\n        float
    temp62 = 0;\n        float temp63 = 0;\n        float temp64 = 0;\n        float
    temp65 = 0;\n        float temp66 = 0;\n        float temp67 = 0;\n        float
    temp68 = 0;\n        float temp69 = 0;\n        float temp70 = 0;\n        float
    temp71 = 0;\n        float temp72 = 0;\n        float temp73 = 0;\n        float
    temp74 = 0;\n        float temp75 = 0;\n        float temp76 = 0;\n        float
    temp77 = 0;\n        float temp78 = 0;\n        float temp79 = 0;\n        float
    temp80 = 0;\n        float temp81 = 0;\n        float temp82 = 0;\n        \n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(TruncateNumber((3.5f))
    == (0.5f));\n    Debug.Assert(TruncateNumber((1.25f)) == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f))
    == (0.0f));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmph6sg7c57.cs(14,15): warning CS0219: The variable ''integerPart'' is assigned
    but its value is never used

    /tmp/tmph6sg7c57.cs(15,15): warning CS0219: The variable ''decimalPart'' is assigned
    but its value is never used

    /tmp/tmph6sg7c57.cs(16,15): warning CS0219: The variable ''remainder'' is assigned
    but its value is never used

    /tmp/tmph6sg7c57.cs(17,15): warning CS0219: The variable ''quotient'' is assigned
    but its value is never used

    /tmp/tmph6sg7c57.cs(18,15): warning CS0219: The variable ''temp'' is assigned
    but its value is never used

    /tmp/tmph6sg7c57.cs(19,15): warning CS0219: The variable ''temp2'' is assigned
    but its value is never used

    /tmp/tmph6sg7c57.cs(20,15): warning CS0219: The variable ''temp3'' is assigned
    but its value is never used

    /tmp/tmph6sg7c57.cs(21,15): warning CS0219: The variable ''temp4'' is assigned
    but its value is never used

    /tmp/tmph6sg7c57.cs(22,15): warning CS0219: The variable ''temp5'' is assigned
    but its value is never used

    /tmp/tmph6sg7c57.cs(23,15): warning CS0219: The variable ''temp6'' is assigned
    but its value is never used

    /tmp/tmph6sg7c57.cs(24,15): warning CS0219: The variable ''temp7'' is assigned
    but its value is never used

    /tmp/tmph6sg7c57.cs(25,15): warning CS0219: The variable ''temp8'' is assigned
    but its value is never used

    /tmp/tmph6sg7c57.cs(26,15): warning CS0219: The variable ''temp9'' is assigned
    but its value is never used

    /tmp/tmph6sg7c57.cs(27,15): warning CS0219: The variable ''temp10'' is assigned
    but its value is never used

    /tmp/tmph6sg7c57.cs(28,15): warning CS0219: The variable ''temp11'' is assigned
    but its value is never used

    /tmp/tmph6sg7c57.cs(29,15): warning CS0219: The variable ''temp12'' is assigned
    but its value is never used

    /tmp/tmph6sg7c57.cs(30,15): warning CS0219: The variable ''temp13'' is assigned
    but its value is never used

    /tmp/tmph6sg7c57.cs(31,15): warning CS0219: The variable ''temp14'' is assigned
    but its value is never used

    /tmp/tmp'
  timestamp: 1659977071
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive floating point number, it can be decomposed
    into\n    // and integer part (largest integer smaller than given number) and
    decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal
    part of the number.\n    public static float TruncateNumber(float number) {\n
    \       float truncatedNumber = number;\n        int integerPart = (int)truncatedNumber;\n
    \       float decimalPart = truncatedNumber - integerPart;\n        return decimalPart;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(TruncateNumber((3.5f))
    == (0.5f));\n    Debug.Assert(TruncateNumber((1.25f)) == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f))
    == (0.0f));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977072
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive floating point number, it can be decomposed
    into\n    // and integer part (largest integer smaller than given number) and
    decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal
    part of the number.\n    public static float TruncateNumber(float number) {\n
    \       float intPart;\n        float decimalPart;\n        float remainder;\n
    \       intPart = number;\n        decimalPart = 1;\n        remainder = number;\n
    \       while (true) {\n            int remainderIntPart = remainder % 10;\n            if
    (remainderIntPart == 0) {\n                break;\n            }\n            decimalPart
    = decimalPart * 10 + remainderIntPart;\n            remainder = remainder / 10;\n
    \       }\n        return intPart + decimalPart;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(TruncateNumber((3.5f)) == (0.5f));\n    Debug.Assert(TruncateNumber((1.25f))
    == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f)) == (0.0f));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpcmpc4jl4.cs(21,36): error CS0266: Cannot implicitly convert type ''float''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659977072
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive floating point number, it can be decomposed
    into\n    // and integer part (largest integer smaller than given number) and
    decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal
    part of the number.\n    public static float TruncateNumber(float number) {\n
    \       float integerPart;\n        float decimalPart;\n        float remainder;\n
    \       float quotient;\n        float temp;\n        float temp2;\n        float
    temp3;\n        float temp4;\n        float temp5;\n        float temp6;\n        float
    temp7;\n        float temp8;\n        float temp9;\n        float temp10;\n        float
    temp11;\n        float temp12;\n        float temp13;\n        float temp14;\n
    \       float temp15;\n        float temp16;\n        float temp17;\n        float
    temp18;\n        float temp19;\n        float temp20;\n        float temp21;\n
    \       float temp22;\n        float temp23;\n        float temp24;\n        float
    temp25;\n        float temp26;\n        float temp27;\n        float temp28;\n
    \       float temp29;\n        float temp30;\n        float temp31;\n        float
    temp32;\n        float temp33;\n        float temp34;\n        float temp35;\n
    \       float temp36;\n        float temp37;\n        float temp38;\n        float
    temp39;\n        float temp40;\n        float temp41;\n        float temp42;\n
    \       float temp43;\n        float temp44;\n        float temp45;\n        float
    temp46;\n        float temp47;\n        float temp48;\n        float temp49;\n
    \       float temp50;\n        float temp51;\n        float temp52;\n        float
    temp53;\n        float temp54;\n        float temp55;\n        float temp56;\n
    \       float temp57;\n        float temp58;\n        float temp59;\n        float
    temp60;\n        float temp61;\n        float temp62;\n        float temp63;\n
    \       float temp64;\n        float temp65;\n        float temp66;\n        float
    temp67;\n        float temp68;\n        float temp69;\n        float temp70;\n
    \       float temp71;\n        float temp72;\n        float temp73;\n        float
    temp74;\n        float temp75;\n        float temp76;\n        float temp77;\n
    \       float temp78;\n        float temp79;\n        float temp80;\n        float
    temp81;\n        float temp82;\n        float temp83;\n        float temp84;\n
    \       float temp85\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(TruncateNumber((3.5f))
    == (0.5f));\n    Debug.Assert(TruncateNumber((1.25f)) == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f))
    == (0.0f));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpb7d460tv.cs(102,21): error CS1002: ; expected

    '
  timestamp: 1659977071
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive floating point number, it can be decomposed
    into\n    // and integer part (largest integer smaller than given number) and
    decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal
    part of the number.\n    public static float TruncateNumber(float number) {\n
    \       float intPart = (float)Math.Floor(number);\n        float decimalPart
    = (float)number - intPart;\n        return intPart + decimalPart;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(TruncateNumber((3.5f)) ==
    (0.5f));\n    Debug.Assert(TruncateNumber((1.25f)) == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f))
    == (0.0f));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <e59f203d3d7d41cdb83537d0e2dd86b8>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <e59f203d3d7d41cdb83537d0e2dd86b8>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977072
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive floating point number, it can be decomposed
    into\n    // and integer part (largest integer smaller than given number) and
    decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal
    part of the number.\n    public static float TruncateNumber(float number) {\n
    \       float fraction = number - Math.Floor(number);\n        return Math.Truncate(fraction);\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(TruncateNumber((3.5f))
    == (0.5f));\n    Debug.Assert(TruncateNumber((1.25f)) == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f))
    == (0.0f));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpcwxmfkgy.cs(14,26): error CS0266: Cannot implicitly convert type ''double''
    to ''float''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmpcwxmfkgy.cs(15,16): error CS0266: Cannot implicitly convert type ''double''
    to ''float''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659977072
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive floating point number, it can be decomposed
    into\n    // and integer part (largest integer smaller than given number) and
    decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal
    part of the number.\n    public static float TruncateNumber(float number) {\n
    \       float integerPart;\n        float decimalPart;\n        float temp;\n
    \       float temp2;\n        float temp3;\n        float temp4;\n        float
    temp5;\n        float temp6;\n        float temp7;\n        float temp8;\n        float
    temp9;\n        float temp10;\n        float temp11;\n        float temp12;\n
    \       float temp13;\n        float temp14;\n        float temp15;\n        float
    temp16;\n        float temp17;\n        float temp18;\n        float temp19;\n
    \       float temp20;\n        float temp21;\n        float temp22;\n        float
    temp23;\n        float temp24;\n        float temp25;\n        float temp26;\n
    \       float temp27;\n        float temp28;\n        float temp29;\n        float
    temp30;\n        float temp31;\n        float temp32;\n        float temp33;\n
    \       float temp34;\n        float temp35;\n        float temp36;\n        float
    temp37;\n        float temp38;\n        float temp39;\n        float temp40;\n
    \       float temp41;\n        float temp42;\n        float temp43;\n        float
    temp44;\n        float temp45;\n        float temp46;\n        float temp47;\n
    \       float temp48;\n        float temp49;\n        float temp50;\n        float
    temp51;\n        float temp52;\n        float temp53;\n        float temp54;\n
    \       float temp55;\n        float temp56;\n        float temp57;\n        float
    temp58;\n        float temp59;\n        float temp60;\n        float temp61;\n
    \       float temp62;\n        float temp63;\n        float temp64;\n        float
    temp65;\n        float temp66;\n        float temp67;\n        float temp68;\n
    \       float temp69;\n        float temp70;\n        float temp71;\n        float
    temp72;\n        float temp73;\n        float temp74;\n        float temp75;\n
    \       float temp76;\n        float temp77;\n        float temp78;\n        float
    temp79;\n        float temp80;\n        float temp81;\n        float temp82;\n
    \       float temp83;\n        float temp84;\n        float temp85;\n        float
    temp86;\n        float temp87\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(TruncateNumber((3.5f)) == (0.5f));\n    Debug.Assert(TruncateNumber((1.25f))
    == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f)) == (0.0f));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpztizkx15.cs(102,21): error CS1002: ; expected

    '
  timestamp: 1659977071
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive floating point number, it can be decomposed
    into\n    // and integer part (largest integer smaller than given number) and
    decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal
    part of the number.\n    public static float TruncateNumber(float number) {\n
    \       float integerPart;\n        float decimalPart;\n        float fractionalPart;\n
    \       float temp;\n        float temp2;\n        float temp3;\n        float
    temp4;\n        float temp5;\n        float temp6;\n        float temp7;\n        float
    temp8;\n        float temp9;\n        float temp10;\n        float temp11;\n        float
    temp12;\n        float temp13;\n        float temp14;\n        float temp15;\n
    \       float temp16;\n        float temp17;\n        float temp18;\n        float
    temp19;\n        float temp20;\n        float temp21;\n        float temp22;\n
    \       float temp23;\n        float temp24;\n        float temp25;\n        float
    temp26;\n        float temp27;\n        float temp28;\n        float temp29;\n
    \       float temp30;\n        float temp31;\n        float temp32;\n        float
    temp33;\n        float temp34;\n        float temp35;\n        float temp36;\n
    \       float temp37;\n        float temp38;\n        float temp39;\n        float
    temp40;\n        float temp41;\n        float temp42;\n        float temp43;\n
    \       float temp44;\n        float temp45;\n        float temp46;\n        float
    temp47;\n        float temp48;\n        float temp49;\n        float temp50;\n
    \       float temp51;\n        float temp52;\n        float temp53;\n        float
    temp54;\n        float temp55;\n        float temp56;\n        float temp57;\n
    \       float temp58;\n        float temp59;\n        float temp60;\n        float
    temp61;\n        float temp62;\n        float temp63;\n        float temp64;\n
    \       float temp65;\n        float temp66;\n        float temp67;\n        float
    temp68;\n        float temp69;\n        float temp70;\n        float temp71;\n
    \       float temp72;\n        float temp73;\n        float temp74;\n        float
    temp75;\n        float temp76;\n        float temp77;\n        float temp78;\n
    \       float temp79;\n        float temp80;\n        float temp81;\n        float
    temp82;\n        float temp83;\n        float temp84;\n        float temp85;\n
    \       float temp\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(TruncateNumber((3.5f))
    == (0.5f));\n    Debug.Assert(TruncateNumber((1.25f)) == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f))
    == (0.0f));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp5ug7yp0v.cs(102,19): error CS1002: ; expected

    '
  timestamp: 1659977071
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive floating point number, it can be decomposed
    into\n    // and integer part (largest integer smaller than given number) and
    decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal
    part of the number.\n    public static float TruncateNumber(float number) {\n
    \       float integerPart = number;\n        float decimalPart = number - integerPart;\n
    \       return decimalPart;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(TruncateNumber((3.5f)) == (0.5f));\n    Debug.Assert(TruncateNumber((1.25f))
    == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f)) == (0.0f));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <47e9a4810ba2493e918e49632d104bca>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <47e9a4810ba2493e918e49632d104bca>:0
    \n"
  stdout: ''
  timestamp: 1659977071
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive floating point number, it can be decomposed
    into\n    // and integer part (largest integer smaller than given number) and
    decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal
    part of the number.\n    public static float TruncateNumber(float number) {\n
    \       float integerPart = 0;\n        float decimalPart = 0;\n        float
    temp = 0;\n        float temp2 = 0;\n        float temp3 = 0;\n        float temp4
    = 0;\n        float temp5 = 0;\n        float temp6 = 0;\n        float temp7
    = 0;\n        float temp8 = 0;\n        float temp9 = 0;\n        float temp10
    = 0;\n        float temp11 = 0;\n        float temp12 = 0;\n        float temp13
    = 0;\n        float temp14 = 0;\n        float temp15 = 0;\n        float temp16
    = 0;\n        float temp17 = 0;\n        float temp18 = 0;\n        float temp19
    = 0;\n        float temp20 = 0;\n        float temp21 = 0;\n        float temp22
    = 0;\n        float temp23 = 0;\n        float temp24 = 0;\n        float temp25
    = 0;\n        float temp26 = 0;\n        float temp27 = 0;\n        float temp28
    = 0;\n        float temp29 = 0;\n        float temp30 = 0;\n        float temp31
    = 0;\n        float temp32 = 0;\n        float temp33 = 0;\n        float temp34
    = 0;\n        float temp35 = 0;\n        float temp36 = 0;\n        float temp37
    = 0;\n        float temp38 = 0;\n        float temp39 = 0;\n        float temp40
    = 0;\n        float temp41 = 0;\n        float temp42 = 0;\n        float temp43
    = 0;\n        float temp44 = 0;\n        float temp45 = 0;\n        float temp46
    = 0;\n        float temp47 = 0;\n        float temp48 = 0;\n        float temp49
    = 0;\n        float temp50 = 0;\n        float temp51 = 0;\n        float temp52
    = 0;\n        float temp53 = 0;\n        float temp54 = 0;\n        float temp55
    = 0;\n        float temp56 = 0;\n        float temp57 = 0;\n        float temp58
    = 0;\n        float temp59 = 0;\n        float temp60 = 0;\n        float temp61
    = 0;\n        float temp62 = 0;\n        float temp63 = 0;\n        float temp64
    = 0;\n        float temp65 = 0;\n        float temp66 = 0;\n        float temp67
    = 0;\n        float temp68 = 0;\n        float temp69 = 0;\n        float temp70
    = 0;\n        float temp71 = 0;\n        float temp72 = 0;\n        float temp73
    = 0;\n        float temp74 = 0;\n        float temp75 = 0;\n        float temp76
    = 0;\n        float temp77 = 0;\n        float temp78 = 0;\n        float temp79
    = 0;\n        float temp80 = 0;\n        float temp81 = 0;\n        float temp82
    = 0;\n        float temp83 = 0;\n        float temp84 = 0;\n        \n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(TruncateNumber((3.5f))
    == (0.5f));\n    Debug.Assert(TruncateNumber((1.25f)) == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f))
    == (0.0f));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpvu1akkb4.cs(14,15): warning CS0219: The variable ''integerPart'' is assigned
    but its value is never used

    /tmp/tmpvu1akkb4.cs(15,15): warning CS0219: The variable ''decimalPart'' is assigned
    but its value is never used

    /tmp/tmpvu1akkb4.cs(16,15): warning CS0219: The variable ''temp'' is assigned
    but its value is never used

    /tmp/tmpvu1akkb4.cs(17,15): warning CS0219: The variable ''temp2'' is assigned
    but its value is never used

    /tmp/tmpvu1akkb4.cs(18,15): warning CS0219: The variable ''temp3'' is assigned
    but its value is never used

    /tmp/tmpvu1akkb4.cs(19,15): warning CS0219: The variable ''temp4'' is assigned
    but its value is never used

    /tmp/tmpvu1akkb4.cs(20,15): warning CS0219: The variable ''temp5'' is assigned
    but its value is never used

    /tmp/tmpvu1akkb4.cs(21,15): warning CS0219: The variable ''temp6'' is assigned
    but its value is never used

    /tmp/tmpvu1akkb4.cs(22,15): warning CS0219: The variable ''temp7'' is assigned
    but its value is never used

    /tmp/tmpvu1akkb4.cs(23,15): warning CS0219: The variable ''temp8'' is assigned
    but its value is never used

    /tmp/tmpvu1akkb4.cs(24,15): warning CS0219: The variable ''temp9'' is assigned
    but its value is never used

    /tmp/tmpvu1akkb4.cs(25,15): warning CS0219: The variable ''temp10'' is assigned
    but its value is never used

    /tmp/tmpvu1akkb4.cs(26,15): warning CS0219: The variable ''temp11'' is assigned
    but its value is never used

    /tmp/tmpvu1akkb4.cs(27,15): warning CS0219: The variable ''temp12'' is assigned
    but its value is never used

    /tmp/tmpvu1akkb4.cs(28,15): warning CS0219: The variable ''temp13'' is assigned
    but its value is never used

    /tmp/tmpvu1akkb4.cs(29,15): warning CS0219: The variable ''temp14'' is assigned
    but its value is never used

    /tmp/tmpvu1akkb4.cs(30,15): warning CS0219: The variable ''temp15'' is assigned
    but its value is never used

    /tmp/tmpvu1akkb4.cs(31,15): warning CS0219: The variable ''temp16'' is assigned
    but its value is never used

    /tmp/tmpvu1ak'
  timestamp: 1659977071
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive floating point number, it can be decomposed
    into\n    // and integer part (largest integer smaller than given number) and
    decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal
    part of the number.\n    public static float TruncateNumber(float number) {\n
    \       float integerPart = 0;\n        float decimalPart = 0;\n        float
    temp = 0;\n        float temp2 = 0;\n        float temp3 = 0;\n        float temp4
    = 0;\n        float temp5 = 0;\n        float temp6 = 0;\n        float temp7
    = 0;\n        float temp8 = 0;\n        float temp9 = 0;\n        float temp10
    = 0;\n        float temp11 = 0;\n        float temp12 = 0;\n        float temp13
    = 0;\n        float temp14 = 0;\n        float temp15 = 0;\n        float temp16
    = 0;\n        float temp17 = 0;\n        float temp18 = 0;\n        float temp19
    = 0;\n        float temp20 = 0;\n        float temp21 = 0;\n        float temp22
    = 0;\n        float temp23 = 0;\n        float temp24 = 0;\n        float temp25
    = 0;\n        float temp26 = 0;\n        float temp27 = 0;\n        float temp28
    = 0;\n        float temp29 = 0;\n        float temp30 = 0;\n        float temp31
    = 0;\n        float temp32 = 0;\n        float temp33 = 0;\n        float temp34
    = 0;\n        float temp35 = 0;\n        float temp36 = 0;\n        float temp37
    = 0;\n        float temp38 = 0;\n        float temp39 = 0;\n        float temp40
    = 0;\n        float temp41 = 0;\n        float temp42 = 0;\n        float temp43
    = 0;\n        float temp44 = 0;\n        float temp45 = 0;\n        float temp46
    = 0;\n        float temp47 = 0;\n        float temp48 = 0;\n        float temp49
    = 0;\n        float temp50 = 0;\n        float temp51 = 0;\n        float temp52
    = 0;\n        float temp53 = 0;\n        float temp54 = 0;\n        float temp55
    = 0;\n        float temp56 = 0;\n        float temp57 = 0;\n        float temp58
    = 0;\n        float temp59 = 0;\n        float temp60 = 0;\n        float temp61
    = 0;\n        float temp62 = 0;\n        float temp63 = 0;\n        float temp64
    = 0;\n        float temp65 = 0;\n        float temp66 = 0;\n        float temp67
    = 0;\n        float temp68 = 0;\n        float temp69 = 0;\n        float temp70
    = 0;\n        float temp71 = 0;\n        float temp72 = 0;\n        float temp73
    = 0;\n        float temp74 = 0;\n        float temp75 = 0;\n        float temp76
    = 0;\n        float temp77 = 0;\n        float temp78 = 0;\n        float temp79
    = 0;\n        float temp80 = 0;\n        float temp81 = 0;\n        float temp82
    = 0;\n        float temp83 = 0;\n        float temp84 = 0;\n        \n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(TruncateNumber((3.5f))
    == (0.5f));\n    Debug.Assert(TruncateNumber((1.25f)) == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f))
    == (0.0f));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpvu1akkb4.cs(14,15): warning CS0219: The variable ''integerPart'' is assigned
    but its value is never used

    /tmp/tmpvu1akkb4.cs(15,15): warning CS0219: The variable ''decimalPart'' is assigned
    but its value is never used

    /tmp/tmpvu1akkb4.cs(16,15): warning CS0219: The variable ''temp'' is assigned
    but its value is never used

    /tmp/tmpvu1akkb4.cs(17,15): warning CS0219: The variable ''temp2'' is assigned
    but its value is never used

    /tmp/tmpvu1akkb4.cs(18,15): warning CS0219: The variable ''temp3'' is assigned
    but its value is never used

    /tmp/tmpvu1akkb4.cs(19,15): warning CS0219: The variable ''temp4'' is assigned
    but its value is never used

    /tmp/tmpvu1akkb4.cs(20,15): warning CS0219: The variable ''temp5'' is assigned
    but its value is never used

    /tmp/tmpvu1akkb4.cs(21,15): warning CS0219: The variable ''temp6'' is assigned
    but its value is never used

    /tmp/tmpvu1akkb4.cs(22,15): warning CS0219: The variable ''temp7'' is assigned
    but its value is never used

    /tmp/tmpvu1akkb4.cs(23,15): warning CS0219: The variable ''temp8'' is assigned
    but its value is never used

    /tmp/tmpvu1akkb4.cs(24,15): warning CS0219: The variable ''temp9'' is assigned
    but its value is never used

    /tmp/tmpvu1akkb4.cs(25,15): warning CS0219: The variable ''temp10'' is assigned
    but its value is never used

    /tmp/tmpvu1akkb4.cs(26,15): warning CS0219: The variable ''temp11'' is assigned
    but its value is never used

    /tmp/tmpvu1akkb4.cs(27,15): warning CS0219: The variable ''temp12'' is assigned
    but its value is never used

    /tmp/tmpvu1akkb4.cs(28,15): warning CS0219: The variable ''temp13'' is assigned
    but its value is never used

    /tmp/tmpvu1akkb4.cs(29,15): warning CS0219: The variable ''temp14'' is assigned
    but its value is never used

    /tmp/tmpvu1akkb4.cs(30,15): warning CS0219: The variable ''temp15'' is assigned
    but its value is never used

    /tmp/tmpvu1akkb4.cs(31,15): warning CS0219: The variable ''temp16'' is assigned
    but its value is never used

    /tmp/tmpvu1ak'
  timestamp: 1659977071
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive floating point number, it can be decomposed
    into\n    // and integer part (largest integer smaller than given number) and
    decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal
    part of the number.\n    public static float TruncateNumber(float number) {\n
    \       float integerPart = 0;\n        float decimalPart = 0;\n        float
    temp;\n        float temp2;\n        float temp3;\n        float temp4;\n        float
    temp5;\n        float temp6;\n        float temp7;\n        float temp8;\n        float
    temp9;\n        float temp10;\n        float temp11;\n        float temp12;\n
    \       float temp13;\n        float temp14;\n        float temp15;\n        float
    temp16;\n        float temp17;\n        float temp18;\n        float temp19;\n
    \       float temp20;\n        float temp21;\n        float temp22;\n        float
    temp23;\n        float temp24;\n        float temp25;\n        float temp26;\n
    \       float temp27;\n        float temp28;\n        float temp29;\n        float
    temp30;\n        float temp31;\n        float temp32;\n        float temp33;\n
    \       float temp34;\n        float temp35;\n        float temp36;\n        float
    temp37;\n        float temp38;\n        float temp39;\n        float temp40;\n
    \       float temp41;\n        float temp42;\n        float temp43;\n        float
    temp44;\n        float temp45;\n        float temp46;\n        float temp47;\n
    \       float temp48;\n        float temp49;\n        float temp50;\n        float
    temp51;\n        float temp52;\n        float temp53;\n        float temp54;\n
    \       float temp55;\n        float temp56;\n        float temp57;\n        float
    temp58;\n        float temp59;\n        float temp60;\n        float temp61;\n
    \       float temp62;\n        float temp63;\n        float temp64;\n        float
    temp65;\n        float temp66;\n        float temp67;\n        float temp68;\n
    \       float temp69;\n        float temp70;\n        float temp71;\n        float
    temp72;\n        float temp73;\n        float temp74;\n        float temp75;\n
    \       float temp76;\n        float temp77;\n        float temp78;\n        float
    temp79;\n        float temp80;\n        float temp81;\n        float temp82;\n
    \       float temp83;\n        float temp84;\n        float temp85;\n        float
    temp86;\n        float temp87\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(TruncateNumber((3.5f)) == (0.5f));\n    Debug.Assert(TruncateNumber((1.25f))
    == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f)) == (0.0f));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp1z5nd261.cs(102,21): error CS1002: ; expected

    '
  timestamp: 1659977072
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive floating point number, it can be decomposed
    into\n    // and integer part (largest integer smaller than given number) and
    decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal
    part of the number.\n    public static float TruncateNumber(float number) {\n
    \       float integerPart;\n        float decimalPart;\n        float temp;\n
    \       float temp2;\n        float temp3;\n        float temp4;\n        float
    temp5;\n        float temp6;\n        float temp7;\n        float temp8;\n        float
    temp9;\n        float temp10;\n        float temp11;\n        float temp12;\n
    \       float temp13;\n        float temp14;\n        float temp15;\n        float
    temp16;\n        float temp17;\n        float temp18;\n        float temp19;\n
    \       float temp20;\n        float temp21;\n        float temp22;\n        float
    temp23;\n        float temp24;\n        float temp25;\n        float temp26;\n
    \       float temp27;\n        float temp28;\n        float temp29;\n        float
    temp30;\n        float temp31;\n        float temp32;\n        float temp33;\n
    \       float temp34;\n        float temp35;\n        float temp36;\n        float
    temp37;\n        float temp38;\n        float temp39;\n        float temp40;\n
    \       float temp41;\n        float temp42;\n        float temp43;\n        float
    temp44;\n        float temp45;\n        float temp46;\n        float temp47;\n
    \       float temp48;\n        float temp49;\n        float temp50;\n        float
    temp51;\n        float temp52;\n        float temp53;\n        float temp54;\n
    \       float temp55;\n        float temp56;\n        float temp57;\n        float
    temp58;\n        float temp59;\n        float temp60;\n        float temp61;\n
    \       float temp62;\n        float temp63;\n        float temp64;\n        float
    temp65;\n        float temp66;\n        float temp67;\n        float temp68;\n
    \       float temp69;\n        float temp70;\n        float temp71;\n        float
    temp72;\n        float temp73;\n        float temp74;\n        float temp75;\n
    \       float temp76;\n        float temp77;\n        float temp78;\n        float
    temp79;\n        float temp80;\n        float temp81;\n        float temp82;\n
    \       float temp83;\n        float temp84;\n        float temp85;\n        float
    temp86;\n        float temp87\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(TruncateNumber((3.5f)) == (0.5f));\n    Debug.Assert(TruncateNumber((1.25f))
    == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f)) == (0.0f));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpztizkx15.cs(102,21): error CS1002: ; expected

    '
  timestamp: 1659977071
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive floating point number, it can be decomposed
    into\n    // and integer part (largest integer smaller than given number) and
    decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal
    part of the number.\n    public static float TruncateNumber(float number) {\n
    \       float integerPart;\n        float decimalPart;\n        float temp;\n
    \       float temp2;\n        float temp3;\n        float temp4;\n        float
    temp5;\n        float temp6;\n        float temp7;\n        float temp8;\n        float
    temp9;\n        float temp10;\n        float temp11;\n        float temp12;\n
    \       float temp13;\n        float temp14;\n        float temp15;\n        float
    temp16;\n        float temp17;\n        float temp18;\n        float temp19;\n
    \       float temp20;\n        float temp21;\n        float temp22;\n        float
    temp23;\n        float temp24;\n        float temp25;\n        float temp26;\n
    \       float temp27;\n        float temp28;\n        float temp29;\n        float
    temp30;\n        float temp31;\n        float temp32;\n        float temp33;\n
    \       float temp34;\n        float temp35;\n        float temp36;\n        float
    temp37;\n        float temp38;\n        float temp39;\n        float temp40;\n
    \       float temp41;\n        float temp42;\n        float temp43;\n        float
    temp44;\n        float temp45;\n        float temp46;\n        float temp47;\n
    \       float temp48;\n        float temp49;\n        float temp50;\n        float
    temp51;\n        float temp52;\n        float temp53;\n        float temp54;\n
    \       float temp55;\n        float temp56;\n        float temp57;\n        float
    temp58;\n        float temp59;\n        float temp60;\n        float temp61;\n
    \       float temp62;\n        float temp63;\n        float temp64;\n        float
    temp65;\n        float temp66;\n        float temp67;\n        float temp68;\n
    \       float temp69;\n        float temp70;\n        float temp71;\n        float
    temp72;\n        float temp73;\n        float temp74;\n        float temp75;\n
    \       float temp76;\n        float temp77;\n        float temp78;\n        float
    temp79;\n        float temp80;\n        float temp81;\n        float temp82;\n
    \       float temp83;\n        float temp84;\n        float temp85;\n        float
    temp86;\n        float temp87\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(TruncateNumber((3.5f)) == (0.5f));\n    Debug.Assert(TruncateNumber((1.25f))
    == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f)) == (0.0f));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpztizkx15.cs(102,21): error CS1002: ; expected

    '
  timestamp: 1659977071
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive floating point number, it can be decomposed
    into\n    // and integer part (largest integer smaller than given number) and
    decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal
    part of the number.\n    public static float TruncateNumber(float number) {\n
    \       float integerPart = (float)Math.Floor(number);\n        float decimalPart
    = (float)number - integerPart;\n        return decimalPart;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(TruncateNumber((3.5f)) ==
    (0.5f));\n    Debug.Assert(TruncateNumber((1.25f)) == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f))
    == (0.0f));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977071
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive floating point number, it can be decomposed
    into\n    // and integer part (largest integer smaller than given number) and
    decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal
    part of the number.\n    public static float TruncateNumber(float number) {\n
    \       float integerPart = 0;\n        float decimalPart = 0;\n        float
    temp = 0;\n        float temp2 = 0;\n        float temp3 = 0;\n        float temp4
    = 0;\n        float temp5 = 0;\n        float temp6 = 0;\n        float temp7
    = 0;\n        float temp8 = 0;\n        float temp9 = 0;\n        float temp10
    = 0;\n        float temp11 = 0;\n        float temp12 = 0;\n        float temp13
    = 0;\n        float temp14 = 0;\n        float temp15 = 0;\n        float temp16
    = 0;\n        float temp17 = 0;\n        float temp18 = 0;\n        float temp19
    = 0;\n        float temp20 = 0;\n        float temp21 = 0;\n        float temp22
    = 0;\n        float temp23 = 0;\n        float temp24 = 0;\n        float temp25
    = 0;\n        float temp26 = 0;\n        float temp27 = 0;\n        float temp28
    = 0;\n        float temp29 = 0;\n        float temp30 = 0;\n        float temp31
    = 0;\n        float temp32 = 0;\n        float temp33 = 0;\n        float temp34
    = 0;\n        float temp35 = 0;\n        float temp36 = 0;\n        float temp37
    = 0;\n        float temp38 = 0;\n        float temp39 = 0;\n        float temp40
    = 0;\n        float temp41 = 0;\n        float temp42 = 0;\n        float temp43
    = 0;\n        float temp44 = 0;\n        float temp45 = 0;\n        float temp46
    = 0;\n        float temp47 = 0;\n        float temp48 = 0;\n        float temp49
    = 0;\n        float temp50 = 0;\n        float temp51 = 0;\n        float temp52
    = 0;\n        float temp53 = 0;\n        float temp54 = 0;\n        float temp55
    = 0;\n        float temp56 = 0;\n        float temp57 = 0;\n        float temp58
    = 0;\n        float temp59 = 0;\n        float temp60 = 0;\n        float temp61
    = 0;\n        float temp62 = 0;\n        float temp63 = 0;\n        float temp64
    = 0;\n        float temp65 = 0;\n        float temp66 = 0;\n        float temp67
    = 0;\n        float temp68 = 0;\n        float temp69 = 0;\n        float temp70
    = 0;\n        float temp71 = 0;\n        float temp72 = 0;\n        float temp73
    = 0;\n        float temp74 = 0;\n        float temp75 = 0;\n        float temp76
    = 0;\n        float temp77 = 0;\n        float temp78 = 0;\n        float temp79
    = 0;\n        float temp80 = 0;\n        float temp81 = 0;\n        float temp82
    = 0;\n        float temp83 = 0;\n        float temp84 = 0;\n        \n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(TruncateNumber((3.5f))
    == (0.5f));\n    Debug.Assert(TruncateNumber((1.25f)) == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f))
    == (0.0f));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpvu1akkb4.cs(14,15): warning CS0219: The variable ''integerPart'' is assigned
    but its value is never used

    /tmp/tmpvu1akkb4.cs(15,15): warning CS0219: The variable ''decimalPart'' is assigned
    but its value is never used

    /tmp/tmpvu1akkb4.cs(16,15): warning CS0219: The variable ''temp'' is assigned
    but its value is never used

    /tmp/tmpvu1akkb4.cs(17,15): warning CS0219: The variable ''temp2'' is assigned
    but its value is never used

    /tmp/tmpvu1akkb4.cs(18,15): warning CS0219: The variable ''temp3'' is assigned
    but its value is never used

    /tmp/tmpvu1akkb4.cs(19,15): warning CS0219: The variable ''temp4'' is assigned
    but its value is never used

    /tmp/tmpvu1akkb4.cs(20,15): warning CS0219: The variable ''temp5'' is assigned
    but its value is never used

    /tmp/tmpvu1akkb4.cs(21,15): warning CS0219: The variable ''temp6'' is assigned
    but its value is never used

    /tmp/tmpvu1akkb4.cs(22,15): warning CS0219: The variable ''temp7'' is assigned
    but its value is never used

    /tmp/tmpvu1akkb4.cs(23,15): warning CS0219: The variable ''temp8'' is assigned
    but its value is never used

    /tmp/tmpvu1akkb4.cs(24,15): warning CS0219: The variable ''temp9'' is assigned
    but its value is never used

    /tmp/tmpvu1akkb4.cs(25,15): warning CS0219: The variable ''temp10'' is assigned
    but its value is never used

    /tmp/tmpvu1akkb4.cs(26,15): warning CS0219: The variable ''temp11'' is assigned
    but its value is never used

    /tmp/tmpvu1akkb4.cs(27,15): warning CS0219: The variable ''temp12'' is assigned
    but its value is never used

    /tmp/tmpvu1akkb4.cs(28,15): warning CS0219: The variable ''temp13'' is assigned
    but its value is never used

    /tmp/tmpvu1akkb4.cs(29,15): warning CS0219: The variable ''temp14'' is assigned
    but its value is never used

    /tmp/tmpvu1akkb4.cs(30,15): warning CS0219: The variable ''temp15'' is assigned
    but its value is never used

    /tmp/tmpvu1akkb4.cs(31,15): warning CS0219: The variable ''temp16'' is assigned
    but its value is never used

    /tmp/tmpvu1ak'
  timestamp: 1659977071
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive floating point number, it can be decomposed
    into\n    // and integer part (largest integer smaller than given number) and
    decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal
    part of the number.\n    public static float TruncateNumber(float number) {\n
    \       BigInteger bigInteger = new BigInteger(number);\n        BigInteger bigIntegerRemainder
    = new BigInteger(number);\n        bigIntegerRemainder = bigIntegerRemainder.Remainder(BigInteger.Two);\n
    \       bigInteger = bigInteger.Remainder(BigInteger.One);\n        float result
    = bigInteger.ToSingle();\n        return result;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(TruncateNumber((3.5f)) == (0.5f));\n    Debug.Assert(TruncateNumber((1.25f))
    == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f)) == (0.0f));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpuvlvxjbm.cs(16,72): error CS0117: ''BigInteger'' does not contain a definition
    for ''Two''

    /tmp/tmpuvlvxjbm.cs(17,33): error CS7036: There is no argument given that corresponds
    to the required formal parameter ''divisor'' of ''BigInteger.Remainder(BigInteger,
    BigInteger)''

    /tmp/tmpuvlvxjbm.cs(18,35): error CS1061: ''BigInteger'' does not contain a definition
    for ''ToSingle'' and no accessible extension method ''ToSingle'' accepting a first
    argument of type ''BigInteger'' could be found (are you missing a using directive
    or an assembly reference?)

    '
  timestamp: 1659977072
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive floating point number, it can be decomposed
    into\n    // and integer part (largest integer smaller than given number) and
    decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal
    part of the number.\n    public static float TruncateNumber(float number) {\n
    \       float integerPart;\n        float decimalPart;\n        float remainder;\n
    \       float quotient;\n        float temp;\n        float temp2;\n        float
    temp3;\n        float temp4;\n        float temp5;\n        float temp6;\n        float
    temp7;\n        float temp8;\n        float temp9;\n        float temp10;\n        float
    temp11;\n        float temp12;\n        float temp13;\n        float temp14;\n
    \       float temp15;\n        float temp16;\n        float temp17;\n        float
    temp18;\n        float temp19;\n        float temp20;\n        float temp21;\n
    \       float temp22;\n        float temp23;\n        float temp24;\n        float
    temp25;\n        float temp26;\n        float temp27;\n        float temp28;\n
    \       float temp29;\n        float temp30;\n        float temp31;\n        float
    temp32;\n        float temp33;\n        float temp34;\n        float temp35;\n
    \       float temp36;\n        float temp37;\n        float temp38;\n        float
    temp39;\n        float temp40;\n        float temp41;\n        float temp42;\n
    \       float temp43;\n        float temp44;\n        float temp45;\n        float
    temp46;\n        float temp47;\n        float temp48;\n        float temp49;\n
    \       float temp50;\n        float temp51;\n        float temp52;\n        float
    temp53;\n        float temp54;\n        float temp55;\n        float temp56;\n
    \       float temp57;\n        float temp58;\n        float temp59;\n        float
    temp60;\n        float temp61;\n        float temp62;\n        float temp63;\n
    \       float temp64;\n        float temp65;\n        float temp66;\n        float
    temp67;\n        float temp68;\n        float temp69;\n        float temp70;\n
    \       float temp71;\n        float temp72;\n        float temp73;\n        float
    temp74;\n        float temp75;\n        float temp76;\n        float temp77;\n
    \       float temp78;\n        float temp79;\n        float temp80;\n        float
    temp81;\n        float temp82;\n        float temp83;\n        float temp84;\n
    \       float temp85\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(TruncateNumber((3.5f))
    == (0.5f));\n    Debug.Assert(TruncateNumber((1.25f)) == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f))
    == (0.0f));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpb7d460tv.cs(102,21): error CS1002: ; expected

    '
  timestamp: 1659977071
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive floating point number, it can be decomposed
    into\n    // and integer part (largest integer smaller than given number) and
    decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal
    part of the number.\n    public static float TruncateNumber(float number) {\n
    \       float integerPart = number;\n        float decimalPart = number - integerPart;\n
    \       return decimalPart;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(TruncateNumber((3.5f)) == (0.5f));\n    Debug.Assert(TruncateNumber((1.25f))
    == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f)) == (0.0f));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <47e9a4810ba2493e918e49632d104bca>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <47e9a4810ba2493e918e49632d104bca>:0
    \n"
  stdout: ''
  timestamp: 1659977071
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive floating point number, it can be decomposed
    into\n    // and integer part (largest integer smaller than given number) and
    decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal
    part of the number.\n    public static float TruncateNumber(float number) {\n
    \       float integerPart = (float)Math.Floor(number);\n        float decimalPart
    = (float)number - integerPart;\n        return decimalPart;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(TruncateNumber((3.5f)) ==
    (0.5f));\n    Debug.Assert(TruncateNumber((1.25f)) == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f))
    == (0.0f));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977071
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive floating point number, it can be decomposed
    into\n    // and integer part (largest integer smaller than given number) and
    decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal
    part of the number.\n    public static float TruncateNumber(float number) {\n
    \       float integerPart = (float)Math.Truncate(number);\n        float decimalPart
    = number - integerPart;\n        return decimalPart;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(TruncateNumber((3.5f)) == (0.5f));\n
    \   Debug.Assert(TruncateNumber((1.25f)) == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f))
    == (0.0f));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977071
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive floating point number, it can be decomposed
    into\n    // and integer part (largest integer smaller than given number) and
    decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal
    part of the number.\n    public static float TruncateNumber(float number) {\n
    \       float intPart = number;\n        float decimalPart = (float)Math.Truncate(number);\n
    \       return intPart + decimalPart;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(TruncateNumber((3.5f)) == (0.5f));\n    Debug.Assert(TruncateNumber((1.25f))
    == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f)) == (0.0f));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f17e63ddc62c4942b260792017b6a77c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f17e63ddc62c4942b260792017b6a77c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977072
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive floating point number, it can be decomposed
    into\n    // and integer part (largest integer smaller than given number) and
    decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal
    part of the number.\n    public static float TruncateNumber(float number) {\n
    \       float integerPart = 0;\n        float decimalPart = 0;\n        float
    temp = 0;\n        float temp2 = 0;\n        float temp3 = 0;\n        float temp4
    = 0;\n        float temp5 = 0;\n        float temp6 = 0;\n        float temp7
    = 0;\n        float temp8 = 0;\n        float temp9 = 0;\n        float temp10
    = 0;\n        float temp11 = 0;\n        float temp12 = 0;\n        float temp13
    = 0;\n        float temp14 = 0;\n        float temp15 = 0;\n        float temp16
    = 0;\n        float temp17 = 0;\n        float temp18 = 0;\n        float temp19
    = 0;\n        float temp20 = 0;\n        float temp21 = 0;\n        float temp22
    = 0;\n        float temp23 = 0;\n        float temp24 = 0;\n        float temp25
    = 0;\n        float temp26 = 0;\n        float temp27 = 0;\n        float temp28
    = 0;\n        float temp29 = 0;\n        float temp30 = 0;\n        float temp31
    = 0;\n        float temp32 = 0;\n        float temp33 = 0;\n        float temp34
    = 0;\n        float temp35 = 0;\n        float temp36 = 0;\n        float temp37
    = 0;\n        float temp38 = 0;\n        float temp39 = 0;\n        float temp40
    = 0;\n        float temp41 = 0;\n        float temp42 = 0;\n        float temp43
    = 0;\n        float temp44 = 0;\n        float temp45 = 0;\n        float temp46
    = 0;\n        float temp47 = 0;\n        float temp48 = 0;\n        float temp49
    = 0;\n        float temp50 = 0;\n        float temp51 = 0;\n        float temp52
    = 0;\n        float temp53 = 0;\n        float temp54 = 0;\n        float temp55
    = 0;\n        float temp56 = 0;\n        float temp57 = 0;\n        float temp58
    = 0;\n        float temp59 = 0;\n        float temp60 = 0;\n        float temp61
    = 0;\n        float temp62 = 0;\n        float temp63 = 0;\n        float temp64
    = 0;\n        float temp65 = 0;\n        float temp66 = 0;\n        float temp67
    = 0;\n        float temp68 = 0;\n        float temp69 = 0;\n        float temp70
    = 0;\n        float temp71 = 0;\n        float temp72 = 0;\n        float temp73
    = 0;\n        float temp74 = 0;\n        float temp75 = 0;\n        float temp76
    = 0;\n        float temp77 = 0;\n        float temp78 = 0;\n        float temp79
    = 0;\n        float temp80 = 0;\n        float temp81 = 0;\n        float temp82
    = 0;\n        float temp83 = 0;\n        float temp84 = 0;\n        \n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(TruncateNumber((3.5f))
    == (0.5f));\n    Debug.Assert(TruncateNumber((1.25f)) == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f))
    == (0.0f));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpvu1akkb4.cs(14,15): warning CS0219: The variable ''integerPart'' is assigned
    but its value is never used

    /tmp/tmpvu1akkb4.cs(15,15): warning CS0219: The variable ''decimalPart'' is assigned
    but its value is never used

    /tmp/tmpvu1akkb4.cs(16,15): warning CS0219: The variable ''temp'' is assigned
    but its value is never used

    /tmp/tmpvu1akkb4.cs(17,15): warning CS0219: The variable ''temp2'' is assigned
    but its value is never used

    /tmp/tmpvu1akkb4.cs(18,15): warning CS0219: The variable ''temp3'' is assigned
    but its value is never used

    /tmp/tmpvu1akkb4.cs(19,15): warning CS0219: The variable ''temp4'' is assigned
    but its value is never used

    /tmp/tmpvu1akkb4.cs(20,15): warning CS0219: The variable ''temp5'' is assigned
    but its value is never used

    /tmp/tmpvu1akkb4.cs(21,15): warning CS0219: The variable ''temp6'' is assigned
    but its value is never used

    /tmp/tmpvu1akkb4.cs(22,15): warning CS0219: The variable ''temp7'' is assigned
    but its value is never used

    /tmp/tmpvu1akkb4.cs(23,15): warning CS0219: The variable ''temp8'' is assigned
    but its value is never used

    /tmp/tmpvu1akkb4.cs(24,15): warning CS0219: The variable ''temp9'' is assigned
    but its value is never used

    /tmp/tmpvu1akkb4.cs(25,15): warning CS0219: The variable ''temp10'' is assigned
    but its value is never used

    /tmp/tmpvu1akkb4.cs(26,15): warning CS0219: The variable ''temp11'' is assigned
    but its value is never used

    /tmp/tmpvu1akkb4.cs(27,15): warning CS0219: The variable ''temp12'' is assigned
    but its value is never used

    /tmp/tmpvu1akkb4.cs(28,15): warning CS0219: The variable ''temp13'' is assigned
    but its value is never used

    /tmp/tmpvu1akkb4.cs(29,15): warning CS0219: The variable ''temp14'' is assigned
    but its value is never used

    /tmp/tmpvu1akkb4.cs(30,15): warning CS0219: The variable ''temp15'' is assigned
    but its value is never used

    /tmp/tmpvu1akkb4.cs(31,15): warning CS0219: The variable ''temp16'' is assigned
    but its value is never used

    /tmp/tmpvu1ak'
  timestamp: 1659977071
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive floating point number, it can be decomposed
    into\n    // and integer part (largest integer smaller than given number) and
    decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal
    part of the number.\n    public static float TruncateNumber(float number) {\n
    \       float intPart = number;\n        float decimalPart = number - intPart;\n
    \       return decimalPart;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(TruncateNumber((3.5f)) == (0.5f));\n    Debug.Assert(TruncateNumber((1.25f))
    == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f)) == (0.0f));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <5959b70f93124f20b9b055860aa57028>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <5959b70f93124f20b9b055860aa57028>:0
    \n"
  stdout: ''
  timestamp: 1659977072
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive floating point number, it can be decomposed
    into\n    // and integer part (largest integer smaller than given number) and
    decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal
    part of the number.\n    public static float TruncateNumber(float number) {\n
    \       float integerPart = number;\n        float decimalPart = 1;\n        while
    (decimalPart < 1) {\n            integerPart *= 10;\n            decimalPart *=
    10;\n        }\n        return integerPart;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(TruncateNumber((3.5f)) == (0.5f));\n    Debug.Assert(TruncateNumber((1.25f))
    == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f)) == (0.0f));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <35c907c7fe8b43149592683b508ac760>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <35c907c7fe8b43149592683b508ac760>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977071
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive floating point number, it can be decomposed
    into\n    // and integer part (largest integer smaller than given number) and
    decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal
    part of the number.\n    public static float TruncateNumber(float number) {\n
    \       float integerPart = (float)Math.Floor(number);\n        float decimalPart
    = number - integerPart;\n        return decimalPart;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(TruncateNumber((3.5f)) == (0.5f));\n
    \   Debug.Assert(TruncateNumber((1.25f)) == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f))
    == (0.0f));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977071
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive floating point number, it can be decomposed
    into\n    // and integer part (largest integer smaller than given number) and
    decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal
    part of the number.\n    public static float TruncateNumber(float number) {\n
    \       float integerPart = (float)Math.Floor(number);\n        float decimalPart
    = number - integerPart;\n        return decimalPart;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(TruncateNumber((3.5f)) == (0.5f));\n
    \   Debug.Assert(TruncateNumber((1.25f)) == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f))
    == (0.0f));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977071
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive floating point number, it can be decomposed
    into\n    // and integer part (largest integer smaller than given number) and
    decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal
    part of the number.\n    public static float TruncateNumber(float number) {\n
    \       float result = number;\n        float remainder;\n        int integerPart;\n
    \       float decimalPart;\n        do {\n            integerPart = Convert.ToInt32(Math.Floor(result
    + 0.5f));\n            decimalPart = result - integerPart;\n            result
    = integerPart;\n        } while (decimalPart > 0);\n        return result;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(TruncateNumber((3.5f))
    == (0.5f));\n    Debug.Assert(TruncateNumber((1.25f)) == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f))
    == (0.0f));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a45112039769465d9f9e4a149b117dc2>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a45112039769465d9f9e4a149b117dc2>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977072
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive floating point number, it can be decomposed
    into\n    // and integer part (largest integer smaller than given number) and
    decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal
    part of the number.\n    public static float TruncateNumber(float number) {\n
    \       float integerPart = number;\n        float decimalPart = number - integerPart;\n
    \       return decimalPart;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(TruncateNumber((3.5f)) == (0.5f));\n    Debug.Assert(TruncateNumber((1.25f))
    == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f)) == (0.0f));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <47e9a4810ba2493e918e49632d104bca>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <47e9a4810ba2493e918e49632d104bca>:0
    \n"
  stdout: ''
  timestamp: 1659977071
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive floating point number, it can be decomposed
    into\n    // and integer part (largest integer smaller than given number) and
    decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal
    part of the number.\n    public static float TruncateNumber(float number) {\n
    \       float integerPart = number;\n        float decimalPart = number - integerPart;\n
    \       if (decimalPart > 0.0f) {\n            integerPart += 1.0f;\n        }\n
    \       return integerPart;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(TruncateNumber((3.5f)) == (0.5f));\n    Debug.Assert(TruncateNumber((1.25f))
    == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f)) == (0.0f));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <8ddcfb23d5674f6f8e1c38723b2696c3>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <8ddcfb23d5674f6f8e1c38723b2696c3>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977072
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive floating point number, it can be decomposed
    into\n    // and integer part (largest integer smaller than given number) and
    decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal
    part of the number.\n    public static float TruncateNumber(float number) {\n
    \       Decimal d = new Decimal(number);\n        Decimal dTruncated = d.Truncate();\n
    \       float fTruncated = (float)dTruncated;\n        return fTruncated;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(TruncateNumber((3.5f))
    == (0.5f));\n    Debug.Assert(TruncateNumber((1.25f)) == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f))
    == (0.0f));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp9yv9op1a.cs(15,32): error CS7036: There is no argument given that corresponds
    to the required formal parameter ''d'' of ''decimal.Truncate(decimal)''

    '
  timestamp: 1659977072
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive floating point number, it can be decomposed
    into\n    // and integer part (largest integer smaller than given number) and
    decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal
    part of the number.\n    public static float TruncateNumber(float number) {\n
    \       float truncatedNumber = number;\n        float integerPart = 0;\n        float
    decimalPart = 0;\n        while (truncatedNumber >= 1) {\n            truncatedNumber
    = truncatedNumber / 10;\n            integerPart++;\n        }\n        while
    (truncatedNumber >= 1) {\n            truncatedNumber = truncatedNumber / 10;\n
    \           decimalPart++;\n        }\n        return truncatedNumber;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(TruncateNumber((3.5f))
    == (0.5f));\n    Debug.Assert(TruncateNumber((1.25f)) == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f))
    == (0.0f));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <159cdff2f14b43a2b94c6194151775b7>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <159cdff2f14b43a2b94c6194151775b7>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977072
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive floating point number, it can be decomposed
    into\n    // and integer part (largest integer smaller than given number) and
    decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal
    part of the number.\n    public static float TruncateNumber(float number) {\n
    \       float result = number;\n        float remainder;\n        float integerPart;\n
    \       float decimalPart;\n        float temp;\n        bool isNegative = number
    < 0;\n        if (number == 0) {\n            return 0;\n        }\n        temp
    = number;\n        integerPart = temp;\n        while (temp > 0) {\n            temp
    = temp / 10;\n            integerPart++;\n        }\n        remainder = temp;\n
    \       temp = number;\n        while (temp > 0) {\n            temp = temp /
    10;\n            decimalPart++;\n        }\n        result = integerPart + (decimalPart
    / Math.Pow(10, decimalPart.ToString().Length));\n        if (isNegative) {\n            result
    = -result;\n        }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(TruncateNumber((3.5f)) == (0.5f));\n    Debug.Assert(TruncateNumber((1.25f))
    == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f)) == (0.0f));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp0q3zuavv.cs(35,18): error CS0266: Cannot implicitly convert type ''double''
    to ''float''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmp0q3zuavv.cs(33,13): error CS0165: Use of unassigned local variable ''decimalPart''

    '
  timestamp: 1659977072
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive floating point number, it can be decomposed
    into\n    // and integer part (largest integer smaller than given number) and
    decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal
    part of the number.\n    public static float TruncateNumber(float number) {\n
    \       float integerPart;\n        float decimalPart;\n        float truncatedNumber;\n
    \       float remainder;\n        float quotient;\n        float remainderRemainder;\n
    \       float quotientRemainder;\n        float quotientRemainderRemainder;\n
    \       float quotientRemainderRemainderRemainder;\n        float quotientRemainderRemainderRemainderRemainder;\n
    \       float quotientRemainderRemainderRemainderRemainderRemainder;\n        float
    quotientRemainderRemainderRemainderRemainderRemainderRemainder;\n        float
    quotientRemainderRemainderRemainderRemainderRemainderRemainder;\n        float
    quotientRemainderRemainderRemainderRemainderRemainderRemainderRemainder;\n        float
    quotientRemainderRemainderRemainderRemainderRemainderRemainderRemainder;\n        float
    quotientRemainderRemainderRemainderRemainderRemainderRemainderRemainder;\n        float
    quotientRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainder;\n
    \       float quotientRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainder;\n
    \       float quotientRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainder;\n
    \       float quotientRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainder;\n
    \       float quotientRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainder;\n
    \       float quotientRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainder;\n
    \       float quotientRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainder;\n
    \       float quotientRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainder;\n
    \       float quotientRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainder;\n
    \       float quotientRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainder;\n
    \       float quotientRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainder;\n
    \       float quotientRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainder;\n
    \       float quotientRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemain\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(TruncateNumber((3.5f))
    == (0.5f));\n    Debug.Assert(TruncateNumber((1.25f)) == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f))
    == (0.0f));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp45ie3x35.cs(42,92): error CS1002: ; expected

    '
  timestamp: 1659977072
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive floating point number, it can be decomposed
    into\n    // and integer part (largest integer smaller than given number) and
    decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal
    part of the number.\n    public static float TruncateNumber(float number) {\n
    \       float integerPart = (float)Math.Floor(number);\n        float decimalPart
    = (float)number - integerPart;\n        return decimalPart;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(TruncateNumber((3.5f)) ==
    (0.5f));\n    Debug.Assert(TruncateNumber((1.25f)) == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f))
    == (0.0f));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977071
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive floating point number, it can be decomposed
    into\n    // and integer part (largest integer smaller than given number) and
    decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal
    part of the number.\n    public static float TruncateNumber(float number) {\n
    \       // Truncate to integer part\n        int integerPart = (int)number;\n
    \       // Truncate to decimal part\n        float decimalPart = number - integerPart;\n
    \       // Return decimal part\n        return decimalPart;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(TruncateNumber((3.5f)) ==
    (0.5f));\n    Debug.Assert(TruncateNumber((1.25f)) == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f))
    == (0.0f));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977072
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive floating point number, it can be decomposed
    into\n    // and integer part (largest integer smaller than given number) and
    decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal
    part of the number.\n    public static float TruncateNumber(float number) {\n
    \       float result = number;\n        float remainder;\n        int integerPart;\n
    \       do {\n            integerPart = Convert.ToInt32(Math.Floor(result));\n
    \           remainder = result - integerPart;\n            result = integerPart;\n
    \       } while (remainder > 0);\n        return result;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(TruncateNumber((3.5f)) == (0.5f));\n
    \   Debug.Assert(TruncateNumber((1.25f)) == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f))
    == (0.0f));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <8c45ffe531de4210b53a479921c53b41>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <8c45ffe531de4210b53a479921c53b41>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977072
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive floating point number, it can be decomposed
    into\n    // and integer part (largest integer smaller than given number) and
    decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal
    part of the number.\n    public static float TruncateNumber(float number) {\n
    \       float integerPart;\n        float decimalPart;\n        float remainder;\n
    \       float quotient;\n        float temp;\n        float temp2;\n        float
    temp3;\n        float temp4;\n        float temp5;\n        float temp6;\n        float
    temp7;\n        float temp8;\n        float temp9;\n        float temp10;\n        float
    temp11;\n        float temp12;\n        float temp13;\n        float temp14;\n
    \       float temp15;\n        float temp16;\n        float temp17;\n        float
    temp18;\n        float temp19;\n        float temp20;\n        float temp21;\n
    \       float temp22;\n        float temp23;\n        float temp24;\n        float
    temp25;\n        float temp26;\n        float temp27;\n        float temp28;\n
    \       float temp29;\n        float temp30;\n        float temp31;\n        float
    temp32;\n        float temp33;\n        float temp34;\n        float temp35;\n
    \       float temp36;\n        float temp37;\n        float temp38;\n        float
    temp39;\n        float temp40;\n        float temp41;\n        float temp42;\n
    \       float temp43;\n        float temp44;\n        float temp45;\n        float
    temp46;\n        float temp47;\n        float temp48;\n        float temp49;\n
    \       float temp50;\n        float temp51;\n        float temp52;\n        float
    temp53;\n        float temp54;\n        float temp55;\n        float temp56;\n
    \       float temp57;\n        float temp58;\n        float temp59;\n        float
    temp60;\n        float temp61;\n        float temp62;\n        float temp63;\n
    \       float temp64;\n        float temp65;\n        float temp66;\n        float
    temp67;\n        float temp68;\n        float temp69;\n        float temp70;\n
    \       float temp71;\n        float temp72;\n        float temp73;\n        float
    temp74;\n        float temp75;\n        float temp76;\n        float temp77;\n
    \       float temp78;\n        float temp79;\n        float temp80;\n        float
    temp81;\n        float temp82;\n        float temp83;\n        float temp84;\n
    \       float temp85\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(TruncateNumber((3.5f))
    == (0.5f));\n    Debug.Assert(TruncateNumber((1.25f)) == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f))
    == (0.0f));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpb7d460tv.cs(102,21): error CS1002: ; expected

    '
  timestamp: 1659977071
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive floating point number, it can be decomposed
    into\n    // and integer part (largest integer smaller than given number) and
    decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal
    part of the number.\n    public static float TruncateNumber(float number) {\n
    \       BigInteger bigInteger = new BigInteger(number);\n        BigInteger bigIntegerDecimalPart
    = bigInteger.Remainder(BigInteger.One);\n        float truncatedNumber = bigIntegerDecimalPart.ToSingle();\n
    \       return truncatedNumber;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(TruncateNumber((3.5f)) == (0.5f));\n    Debug.Assert(TruncateNumber((1.25f))
    == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f)) == (0.0f));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmppieabs8w.cs(15,55): error CS7036: There is no argument given that corresponds
    to the required formal parameter ''divisor'' of ''BigInteger.Remainder(BigInteger,
    BigInteger)''

    /tmp/tmppieabs8w.cs(16,55): error CS1061: ''BigInteger'' does not contain a definition
    for ''ToSingle'' and no accessible extension method ''ToSingle'' accepting a first
    argument of type ''BigInteger'' could be found (are you missing a using directive
    or an assembly reference?)

    '
  timestamp: 1659977072
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive floating point number, it can be decomposed
    into\n    // and integer part (largest integer smaller than given number) and
    decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal
    part of the number.\n    public static float TruncateNumber(float number) {\n
    \       float truncatedNumber = number;\n        float integerPart;\n        float
    decimalPart;\n        float remainder;\n        float temp;\n        float temp2;\n
    \       float temp3;\n        float temp4;\n        float temp5;\n        float
    temp6;\n        float temp7;\n        float temp8;\n        float temp9;\n        float
    temp10;\n        float temp11;\n        float temp12;\n        float temp13;\n
    \       float temp14;\n        float temp15;\n        float temp16;\n        float
    temp17;\n        float temp18;\n        float temp19;\n        float temp20;\n
    \       float temp21;\n        float temp22;\n        float temp23;\n        float
    temp24;\n        float temp25;\n        float temp26;\n        float temp27;\n
    \       float temp28;\n        float temp29;\n        float temp30;\n        float
    temp31;\n        float temp32;\n        float temp33;\n        float temp34;\n
    \       float temp35;\n        float temp36;\n        float temp37;\n        float
    temp38;\n        float temp39;\n        float temp40;\n        float temp41;\n
    \       float temp42;\n        float temp43;\n        float temp44;\n        float
    temp45;\n        float temp46;\n        float temp47;\n        float temp48;\n
    \       float temp49;\n        float temp50;\n        float temp51;\n        float
    temp52;\n        float temp53;\n        float temp54;\n        float temp55;\n
    \       float temp56;\n        float temp57;\n        float temp58;\n        float
    temp59;\n        float temp60;\n        float temp61;\n        float temp62;\n
    \       float temp63;\n        float temp64;\n        float temp65;\n        float
    temp66;\n        float temp67;\n        float temp68;\n        float temp69;\n
    \       float temp70;\n        float temp71;\n        float temp72;\n        float
    temp73;\n        float temp74;\n        float temp75;\n        float temp76;\n
    \       float temp77;\n        float temp78;\n        float temp79;\n        float
    temp80;\n        float temp81;\n        float temp82;\n        float temp83;\n
    \       float temp84;\n        float temp\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(TruncateNumber((3.5f)) == (0.5f));\n    Debug.Assert(TruncateNumber((1.25f))
    == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f)) == (0.0f));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp1zsa50im.cs(102,19): error CS1002: ; expected

    '
  timestamp: 1659977072
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive floating point number, it can be decomposed
    into\n    // and integer part (largest integer smaller than given number) and
    decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal
    part of the number.\n    public static float TruncateNumber(float number) {\n
    \       float intPart = (float)Math.Truncate(number);\n        float decimalPart
    = number - intPart;\n        return decimalPart;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(TruncateNumber((3.5f)) == (0.5f));\n    Debug.Assert(TruncateNumber((1.25f))
    == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f)) == (0.0f));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977072
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive floating point number, it can be decomposed
    into\n    // and integer part (largest integer smaller than given number) and
    decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal
    part of the number.\n    public static float TruncateNumber(float number) {\n
    \       float integerPart = 0;\n        float decimalPart = 0;\n        float
    remainder = 0;\n        float temp = 0;\n        float temp2 = 0;\n        float
    temp3 = 0;\n        float temp4 = 0;\n        float temp5 = 0;\n        float
    temp6 = 0;\n        float temp7 = 0;\n        float temp8 = 0;\n        float
    temp9 = 0;\n        float temp10 = 0;\n        float temp11 = 0;\n        float
    temp12 = 0;\n        float temp13 = 0;\n        float temp14 = 0;\n        float
    temp15 = 0;\n        float temp16 = 0;\n        float temp17 = 0;\n        float
    temp18 = 0;\n        float temp19 = 0;\n        float temp20 = 0;\n        float
    temp21 = 0;\n        float temp22 = 0;\n        float temp23 = 0;\n        float
    temp24 = 0;\n        float temp25 = 0;\n        float temp26 = 0;\n        float
    temp27 = 0;\n        float temp28 = 0;\n        float temp29 = 0;\n        float
    temp30 = 0;\n        float temp31 = 0;\n        float temp32 = 0;\n        float
    temp33 = 0;\n        float temp34 = 0;\n        float temp35 = 0;\n        float
    temp36 = 0;\n        float temp37 = 0;\n        float temp38 = 0;\n        float
    temp39 = 0;\n        float temp40 = 0;\n        float temp41 = 0;\n        float
    temp42 = 0;\n        float temp43 = 0;\n        float temp44 = 0;\n        float
    temp45 = 0;\n        float temp46 = 0;\n        float temp47 = 0;\n        float
    temp48 = 0;\n        float temp49 = 0;\n        float temp50 = 0;\n        float
    temp51 = 0;\n        float temp52 = 0;\n        float temp53 = 0;\n        float
    temp54 = 0;\n        float temp55 = 0;\n        float temp56 = 0;\n        float
    temp57 = 0;\n        float temp58 = 0;\n        float temp59 = 0;\n        float
    temp60 = 0;\n        float temp61 = 0;\n        float temp62 = 0;\n        float
    temp63 = 0;\n        float temp64 = 0;\n        float temp65 = 0;\n        float
    temp66 = 0;\n        float temp67 = 0;\n        float temp68 = 0;\n        float
    temp69 = 0;\n        float temp70 = 0;\n        float temp71 = 0;\n        float
    temp72 = 0;\n        float temp73 = 0;\n        float temp74 = 0;\n        float
    temp75 = 0;\n        float temp76 = 0;\n        float temp77 = 0;\n        float
    temp78 = 0;\n        float temp79 = 0;\n        float temp80 = 0;\n        float
    temp81 = 0;\n        float temp82 = 0;\n        float temp83 = 0;\n        \n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(TruncateNumber((3.5f))
    == (0.5f));\n    Debug.Assert(TruncateNumber((1.25f)) == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f))
    == (0.0f));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpqn6e7o2n.cs(14,15): warning CS0219: The variable ''integerPart'' is assigned
    but its value is never used

    /tmp/tmpqn6e7o2n.cs(15,15): warning CS0219: The variable ''decimalPart'' is assigned
    but its value is never used

    /tmp/tmpqn6e7o2n.cs(16,15): warning CS0219: The variable ''remainder'' is assigned
    but its value is never used

    /tmp/tmpqn6e7o2n.cs(17,15): warning CS0219: The variable ''temp'' is assigned
    but its value is never used

    /tmp/tmpqn6e7o2n.cs(18,15): warning CS0219: The variable ''temp2'' is assigned
    but its value is never used

    /tmp/tmpqn6e7o2n.cs(19,15): warning CS0219: The variable ''temp3'' is assigned
    but its value is never used

    /tmp/tmpqn6e7o2n.cs(20,15): warning CS0219: The variable ''temp4'' is assigned
    but its value is never used

    /tmp/tmpqn6e7o2n.cs(21,15): warning CS0219: The variable ''temp5'' is assigned
    but its value is never used

    /tmp/tmpqn6e7o2n.cs(22,15): warning CS0219: The variable ''temp6'' is assigned
    but its value is never used

    /tmp/tmpqn6e7o2n.cs(23,15): warning CS0219: The variable ''temp7'' is assigned
    but its value is never used

    /tmp/tmpqn6e7o2n.cs(24,15): warning CS0219: The variable ''temp8'' is assigned
    but its value is never used

    /tmp/tmpqn6e7o2n.cs(25,15): warning CS0219: The variable ''temp9'' is assigned
    but its value is never used

    /tmp/tmpqn6e7o2n.cs(26,15): warning CS0219: The variable ''temp10'' is assigned
    but its value is never used

    /tmp/tmpqn6e7o2n.cs(27,15): warning CS0219: The variable ''temp11'' is assigned
    but its value is never used

    /tmp/tmpqn6e7o2n.cs(28,15): warning CS0219: The variable ''temp12'' is assigned
    but its value is never used

    /tmp/tmpqn6e7o2n.cs(29,15): warning CS0219: The variable ''temp13'' is assigned
    but its value is never used

    /tmp/tmpqn6e7o2n.cs(30,15): warning CS0219: The variable ''temp14'' is assigned
    but its value is never used

    /tmp/tmpqn6e7o2n.cs(31,15): warning CS0219: The variable ''temp15'' is assigned
    but its value is never used

    /tmp/tmpqn'
  timestamp: 1659977071
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive floating point number, it can be decomposed
    into\n    // and integer part (largest integer smaller than given number) and
    decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal
    part of the number.\n    public static float TruncateNumber(float number) {\n
    \       float integerPart;\n        float decimalPart;\n        float remainder;\n
    \       float truncatedNumber;\n        integerPart = number;\n        decimalPart
    = 1;\n        remainder = number;\n        while (true) {\n            integerPart
    = integerPart * 10;\n            decimalPart = decimalPart * 10;\n            if
    (integerPart > number) {\n                remainder = remainder - number;\n                integerPart
    = integerPart - number;\n                break;\n            }\n        }\n        truncatedNumber
    = integerPart + decimalPart;\n        return truncatedNumber;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(TruncateNumber((3.5f)) ==
    (0.5f));\n    Debug.Assert(TruncateNumber((1.25f)) == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f))
    == (0.0f));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <4e33000bc61d41ec97d8be35d96dff9c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <4e33000bc61d41ec97d8be35d96dff9c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977073
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive floating point number, it can be decomposed
    into\n    // and integer part (largest integer smaller than given number) and
    decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal
    part of the number.\n    public static float TruncateNumber(float number) {\n
    \       float truncatedNumber = number;\n        float integerPart = 0;\n        float
    decimalPart = 0;\n        while (truncatedNumber != 0) {\n            int remainder
    = truncatedNumber % 10;\n            truncatedNumber = truncatedNumber / 10;\n
    \           integerPart += remainder;\n            decimalPart += remainder *
    Math.Pow(10.0, -integerPart);\n        }\n        return decimalPart;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(TruncateNumber((3.5f))
    == (0.5f));\n    Debug.Assert(TruncateNumber((1.25f)) == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f))
    == (0.0f));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp91_bloxm.cs(18,29): error CS0266: Cannot implicitly convert type ''float''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmp91_bloxm.cs(21,13): error CS0266: Cannot implicitly convert type ''double''
    to ''float''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659977072
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive floating point number, it can be decomposed
    into\n    // and integer part (largest integer smaller than given number) and
    decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal
    part of the number.\n    public static float TruncateNumber(float number) {\n
    \       float integerPart = (float)Math.Truncate(number);\n        float decimalPart
    = (float)Math.Ceiling(number);\n        return decimalPart;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(TruncateNumber((3.5f)) ==
    (0.5f));\n    Debug.Assert(TruncateNumber((1.25f)) == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f))
    == (0.0f));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <33cb9e95c591481d871a8dba01485ec4>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <33cb9e95c591481d871a8dba01485ec4>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977071
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive floating point number, it can be decomposed
    into\n    // and integer part (largest integer smaller than given number) and
    decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal
    part of the number.\n    public static float TruncateNumber(float number) {\n
    \       float integerPart = number;\n        float decimalPart = number - integerPart;\n
    \       return decimalPart;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(TruncateNumber((3.5f)) == (0.5f));\n    Debug.Assert(TruncateNumber((1.25f))
    == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f)) == (0.0f));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <47e9a4810ba2493e918e49632d104bca>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <47e9a4810ba2493e918e49632d104bca>:0
    \n"
  stdout: ''
  timestamp: 1659977071
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive floating point number, it can be decomposed
    into\n    // and integer part (largest integer smaller than given number) and
    decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal
    part of the number.\n    public static float TruncateNumber(float number) {\n
    \       float integerPart = (float)Math.Truncate(number);\n        float decimalPart
    = (float)Math.Ceiling(number);\n        return decimalPart;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(TruncateNumber((3.5f)) ==
    (0.5f));\n    Debug.Assert(TruncateNumber((1.25f)) == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f))
    == (0.0f));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <33cb9e95c591481d871a8dba01485ec4>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <33cb9e95c591481d871a8dba01485ec4>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977071
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive floating point number, it can be decomposed
    into\n    // and integer part (largest integer smaller than given number) and
    decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal
    part of the number.\n    public static float TruncateNumber(float number) {\n
    \       float truncatedNumber = number;\n        float integerPart = 0;\n        float
    decimalPart = 0;\n        while (truncatedNumber > 0) {\n            integerPart
    += truncatedNumber % 10;\n            truncatedNumber = truncatedNumber / 10;\n
    \       }\n        while (truncatedNumber > 0) {\n            decimalPart += truncatedNumber
    % 10;\n            truncatedNumber = truncatedNumber / 10;\n        }\n        return
    decimalPart;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(TruncateNumber((3.5f))
    == (0.5f));\n    Debug.Assert(TruncateNumber((1.25f)) == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f))
    == (0.0f));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <5de25c9f033f47e68d905126b3101c25>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <5de25c9f033f47e68d905126b3101c25>:0
    \n"
  stdout: ''
  timestamp: 1659977071
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive floating point number, it can be decomposed
    into\n    // and integer part (largest integer smaller than given number) and
    decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal
    part of the number.\n    public static float TruncateNumber(float number) {\n
    \       float fraction = number - Math.Floor(number);\n        return fraction;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(TruncateNumber((3.5f))
    == (0.5f));\n    Debug.Assert(TruncateNumber((1.25f)) == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f))
    == (0.0f));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpl744mx6q.cs(14,26): error CS0266: Cannot implicitly convert type ''double''
    to ''float''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659977072
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive floating point number, it can be decomposed
    into\n    // and integer part (largest integer smaller than given number) and
    decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal
    part of the number.\n    public static float TruncateNumber(float number) {\n
    \       float intPart = number;\n        float decimalPart = number - intPart;\n
    \       return decimalPart;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(TruncateNumber((3.5f)) == (0.5f));\n    Debug.Assert(TruncateNumber((1.25f))
    == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f)) == (0.0f));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <5959b70f93124f20b9b055860aa57028>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <5959b70f93124f20b9b055860aa57028>:0
    \n"
  stdout: ''
  timestamp: 1659977072
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive floating point number, it can be decomposed
    into\n    // and integer part (largest integer smaller than given number) and
    decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal
    part of the number.\n    public static float TruncateNumber(float number) {\n
    \       float integerPart;\n        float decimalPart;\n        float remainder;\n
    \       float temp;\n        integerPart = number;\n        decimalPart = 1;\n
    \       while (decimalPart > 1) {\n            temp = integerPart;\n            integerPart
    = decimalPart;\n            decimalPart = temp - integerPart;\n        }\n        remainder
    = integerPart - decimalPart;\n        return remainder;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(TruncateNumber((3.5f)) == (0.5f));\n
    \   Debug.Assert(TruncateNumber((1.25f)) == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f))
    == (0.0f));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <32894c1062e04729909681f4787a98f9>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <32894c1062e04729909681f4787a98f9>:0
    \n"
  stdout: ''
  timestamp: 1659977073
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive floating point number, it can be decomposed
    into\n    // and integer part (largest integer smaller than given number) and
    decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal
    part of the number.\n    public static float TruncateNumber(float number) {\n
    \       float integerPart = 0;\n        float decimalPart = 0;\n        float
    temp = 0;\n        float temp2 = 0;\n        float temp3 = 0;\n        float temp4
    = 0;\n        float temp5 = 0;\n        float temp6 = 0;\n        float temp7
    = 0;\n        float temp8 = 0;\n        float temp9 = 0;\n        float temp10
    = 0;\n        float temp11 = 0;\n        float temp12 = 0;\n        float temp13
    = 0;\n        float temp14 = 0;\n        float temp15 = 0;\n        float temp16
    = 0;\n        float temp17 = 0;\n        float temp18 = 0;\n        float temp19
    = 0;\n        float temp20 = 0;\n        float temp21 = 0;\n        float temp22
    = 0;\n        float temp23 = 0;\n        float temp24 = 0;\n        float temp25
    = 0;\n        float temp26 = 0;\n        float temp27 = 0;\n        float temp28
    = 0;\n        float temp29 = 0;\n        float temp30 = 0;\n        float temp31
    = 0;\n        float temp32 = 0;\n        float temp33 = 0;\n        float temp34
    = 0;\n        float temp35 = 0;\n        float temp36 = 0;\n        float temp37
    = 0;\n        float temp38 = 0;\n        float temp39 = 0;\n        float temp40
    = 0;\n        float temp41 = 0;\n        float temp42 = 0;\n        float temp43
    = 0;\n        float temp44 = 0;\n        float temp45 = 0;\n        float temp46
    = 0;\n        float temp47 = 0;\n        float temp48 = 0;\n        float temp49
    = 0;\n        float temp50 = 0;\n        float temp51 = 0;\n        float temp52
    = 0;\n        float temp53 = 0;\n        float temp54 = 0;\n        float temp55
    = 0;\n        float temp56 = 0;\n        float temp57 = 0;\n        float temp58
    = 0;\n        float temp59 = 0;\n        float temp60 = 0;\n        float temp61
    = 0;\n        float temp62 = 0;\n        float temp63 = 0;\n        float temp64
    = 0;\n        float temp65 = 0;\n        float temp66 = 0;\n        float temp67
    = 0;\n        float temp68 = 0;\n        float temp69 = 0;\n        float temp70
    = 0;\n        float temp71 = 0;\n        float temp72 = 0;\n        float temp73
    = 0;\n        float temp74 = 0;\n        float temp75 = 0;\n        float temp76
    = 0;\n        float temp77 = 0;\n        float temp78 = 0;\n        float temp79
    = 0;\n        float temp80 = 0;\n        float temp81 = 0;\n        float temp82
    = 0;\n        float temp83 = 0;\n        float temp84 = 0;\n        \n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(TruncateNumber((3.5f))
    == (0.5f));\n    Debug.Assert(TruncateNumber((1.25f)) == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f))
    == (0.0f));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpvu1akkb4.cs(14,15): warning CS0219: The variable ''integerPart'' is assigned
    but its value is never used

    /tmp/tmpvu1akkb4.cs(15,15): warning CS0219: The variable ''decimalPart'' is assigned
    but its value is never used

    /tmp/tmpvu1akkb4.cs(16,15): warning CS0219: The variable ''temp'' is assigned
    but its value is never used

    /tmp/tmpvu1akkb4.cs(17,15): warning CS0219: The variable ''temp2'' is assigned
    but its value is never used

    /tmp/tmpvu1akkb4.cs(18,15): warning CS0219: The variable ''temp3'' is assigned
    but its value is never used

    /tmp/tmpvu1akkb4.cs(19,15): warning CS0219: The variable ''temp4'' is assigned
    but its value is never used

    /tmp/tmpvu1akkb4.cs(20,15): warning CS0219: The variable ''temp5'' is assigned
    but its value is never used

    /tmp/tmpvu1akkb4.cs(21,15): warning CS0219: The variable ''temp6'' is assigned
    but its value is never used

    /tmp/tmpvu1akkb4.cs(22,15): warning CS0219: The variable ''temp7'' is assigned
    but its value is never used

    /tmp/tmpvu1akkb4.cs(23,15): warning CS0219: The variable ''temp8'' is assigned
    but its value is never used

    /tmp/tmpvu1akkb4.cs(24,15): warning CS0219: The variable ''temp9'' is assigned
    but its value is never used

    /tmp/tmpvu1akkb4.cs(25,15): warning CS0219: The variable ''temp10'' is assigned
    but its value is never used

    /tmp/tmpvu1akkb4.cs(26,15): warning CS0219: The variable ''temp11'' is assigned
    but its value is never used

    /tmp/tmpvu1akkb4.cs(27,15): warning CS0219: The variable ''temp12'' is assigned
    but its value is never used

    /tmp/tmpvu1akkb4.cs(28,15): warning CS0219: The variable ''temp13'' is assigned
    but its value is never used

    /tmp/tmpvu1akkb4.cs(29,15): warning CS0219: The variable ''temp14'' is assigned
    but its value is never used

    /tmp/tmpvu1akkb4.cs(30,15): warning CS0219: The variable ''temp15'' is assigned
    but its value is never used

    /tmp/tmpvu1akkb4.cs(31,15): warning CS0219: The variable ''temp16'' is assigned
    but its value is never used

    /tmp/tmpvu1ak'
  timestamp: 1659977071
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive floating point number, it can be decomposed
    into\n    // and integer part (largest integer smaller than given number) and
    decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal
    part of the number.\n    public static float TruncateNumber(float number) {\n
    \       float integerPart = 0;\n        float decimalPart = 0;\n        float
    temp = 0;\n        float temp2 = 0;\n        float temp3 = 0;\n        float temp4
    = 0;\n        float temp5 = 0;\n        float temp6 = 0;\n        float temp7
    = 0;\n        float temp8 = 0;\n        float temp9 = 0;\n        float temp10
    = 0;\n        float temp11 = 0;\n        float temp12 = 0;\n        float temp13
    = 0;\n        float temp14 = 0;\n        float temp15 = 0;\n        float temp16
    = 0;\n        float temp17 = 0;\n        float temp18 = 0;\n        float temp19
    = 0;\n        float temp20 = 0;\n        float temp21 = 0;\n        float temp22
    = 0;\n        float temp23 = 0;\n        float temp24 = 0;\n        float temp25
    = 0;\n        float temp26 = 0;\n        float temp27 = 0;\n        float temp28
    = 0;\n        float temp29 = 0;\n        float temp30 = 0;\n        float temp31
    = 0;\n        float temp32 = 0;\n        float temp33 = 0;\n        float temp34
    = 0;\n        float temp35 = 0;\n        float temp36 = 0;\n        float temp37
    = 0;\n        float temp38 = 0;\n        float temp39 = 0;\n        float temp40
    = 0;\n        float temp41 = 0;\n        float temp42 = 0;\n        float temp43
    = 0;\n        float temp44 = 0;\n        float temp45 = 0;\n        float temp46
    = 0;\n        float temp47 = 0;\n        float temp48 = 0;\n        float temp49
    = 0;\n        float temp50 = 0;\n        float temp51 = 0;\n        float temp52
    = 0;\n        float temp53 = 0;\n        float temp54 = 0;\n        float temp55
    = 0;\n        float temp56 = 0;\n        float temp57 = 0;\n        float temp58
    = 0;\n        float temp59 = 0;\n        float temp60 = 0;\n        float temp61
    = 0;\n        float temp62 = 0;\n        float temp63 = 0;\n        float temp64
    = 0;\n        float temp65 = 0;\n        float temp66 = 0;\n        float temp67
    = 0;\n        float temp68 = 0;\n        float temp69 = 0;\n        float temp70
    = 0;\n        float temp71 = 0;\n        float temp72 = 0;\n        float temp73
    = 0;\n        float temp74 = 0;\n        float temp75 = 0;\n        float temp76
    = 0;\n        float temp77 = 0;\n        float temp78 = 0;\n        float temp79
    = 0;\n        float temp80 = 0;\n        float temp81 = 0;\n        float temp82
    = 0;\n        float temp83 = 0;\n        float temp84 = 0;\n        \n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(TruncateNumber((3.5f))
    == (0.5f));\n    Debug.Assert(TruncateNumber((1.25f)) == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f))
    == (0.0f));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpvu1akkb4.cs(14,15): warning CS0219: The variable ''integerPart'' is assigned
    but its value is never used

    /tmp/tmpvu1akkb4.cs(15,15): warning CS0219: The variable ''decimalPart'' is assigned
    but its value is never used

    /tmp/tmpvu1akkb4.cs(16,15): warning CS0219: The variable ''temp'' is assigned
    but its value is never used

    /tmp/tmpvu1akkb4.cs(17,15): warning CS0219: The variable ''temp2'' is assigned
    but its value is never used

    /tmp/tmpvu1akkb4.cs(18,15): warning CS0219: The variable ''temp3'' is assigned
    but its value is never used

    /tmp/tmpvu1akkb4.cs(19,15): warning CS0219: The variable ''temp4'' is assigned
    but its value is never used

    /tmp/tmpvu1akkb4.cs(20,15): warning CS0219: The variable ''temp5'' is assigned
    but its value is never used

    /tmp/tmpvu1akkb4.cs(21,15): warning CS0219: The variable ''temp6'' is assigned
    but its value is never used

    /tmp/tmpvu1akkb4.cs(22,15): warning CS0219: The variable ''temp7'' is assigned
    but its value is never used

    /tmp/tmpvu1akkb4.cs(23,15): warning CS0219: The variable ''temp8'' is assigned
    but its value is never used

    /tmp/tmpvu1akkb4.cs(24,15): warning CS0219: The variable ''temp9'' is assigned
    but its value is never used

    /tmp/tmpvu1akkb4.cs(25,15): warning CS0219: The variable ''temp10'' is assigned
    but its value is never used

    /tmp/tmpvu1akkb4.cs(26,15): warning CS0219: The variable ''temp11'' is assigned
    but its value is never used

    /tmp/tmpvu1akkb4.cs(27,15): warning CS0219: The variable ''temp12'' is assigned
    but its value is never used

    /tmp/tmpvu1akkb4.cs(28,15): warning CS0219: The variable ''temp13'' is assigned
    but its value is never used

    /tmp/tmpvu1akkb4.cs(29,15): warning CS0219: The variable ''temp14'' is assigned
    but its value is never used

    /tmp/tmpvu1akkb4.cs(30,15): warning CS0219: The variable ''temp15'' is assigned
    but its value is never used

    /tmp/tmpvu1akkb4.cs(31,15): warning CS0219: The variable ''temp16'' is assigned
    but its value is never used

    /tmp/tmpvu1ak'
  timestamp: 1659977071
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive floating point number, it can be decomposed
    into\n    // and integer part (largest integer smaller than given number) and
    decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal
    part of the number.\n    public static float TruncateNumber(float number) {\n
    \       float truncatedNumber = number;\n        int integerPart = 0;\n        while
    (truncatedNumber >= 1) {\n            truncatedNumber = truncatedNumber / 10;\n
    \           integerPart++;\n        }\n        float decimalPart = truncatedNumber;\n
    \       return decimalPart;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(TruncateNumber((3.5f)) == (0.5f));\n    Debug.Assert(TruncateNumber((1.25f))
    == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f)) == (0.0f));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c5b66743227e49b0be838a035f199076>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c5b66743227e49b0be838a035f199076>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977073
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive floating point number, it can be decomposed
    into\n    // and integer part (largest integer smaller than given number) and
    decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal
    part of the number.\n    public static float TruncateNumber(float number) {\n
    \       float fraction = number - Math.Truncate(number);\n        return Math.Truncate(number)
    + fraction;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(TruncateNumber((3.5f))
    == (0.5f));\n    Debug.Assert(TruncateNumber((1.25f)) == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f))
    == (0.0f));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpaebl8f3k.cs(14,26): error CS0266: Cannot implicitly convert type ''double''
    to ''float''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmpaebl8f3k.cs(15,16): error CS0266: Cannot implicitly convert type ''double''
    to ''float''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659977072
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive floating point number, it can be decomposed
    into\n    // and integer part (largest integer smaller than given number) and
    decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal
    part of the number.\n    public static float TruncateNumber(float number) {\n
    \       float integerPart = number;\n        float decimalPart = number - integerPart;\n
    \       return decimalPart;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(TruncateNumber((3.5f)) == (0.5f));\n    Debug.Assert(TruncateNumber((1.25f))
    == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f)) == (0.0f));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <47e9a4810ba2493e918e49632d104bca>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <47e9a4810ba2493e918e49632d104bca>:0
    \n"
  stdout: ''
  timestamp: 1659977071
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive floating point number, it can be decomposed
    into\n    // and integer part (largest integer smaller than given number) and
    decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal
    part of the number.\n    public static float TruncateNumber(float number) {\n
    \       float integerPart = number;\n        float decimalPart = 1;\n        while
    (decimalPart < 1) {\n            integerPart *= 10;\n            decimalPart *=
    10;\n        }\n        return integerPart;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(TruncateNumber((3.5f)) == (0.5f));\n    Debug.Assert(TruncateNumber((1.25f))
    == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f)) == (0.0f));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <35c907c7fe8b43149592683b508ac760>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <35c907c7fe8b43149592683b508ac760>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977071
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive floating point number, it can be decomposed
    into\n    // and integer part (largest integer smaller than given number) and
    decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal
    part of the number.\n    public static float TruncateNumber(float number) {\n
    \       float intPart;\n        float decimalPart;\n        float remainder;\n
    \       intPart = (float)Math.Floor(number);\n        decimalPart = number - intPart;\n
    \       remainder = decimalPart % 1;\n        return intPart + remainder;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(TruncateNumber((3.5f))
    == (0.5f));\n    Debug.Assert(TruncateNumber((1.25f)) == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f))
    == (0.0f));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a56209c518ee4c0a8adc11d8ea430c72>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a56209c518ee4c0a8adc11d8ea430c72>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977073
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive floating point number, it can be decomposed
    into\n    // and integer part (largest integer smaller than given number) and
    decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal
    part of the number.\n    public static float TruncateNumber(float number) {\n
    \       float integerPart;\n        float decimalPart;\n        float remainder;\n
    \       float temp;\n        float temp2;\n        float temp3;\n        float
    temp4;\n        float temp5;\n        float temp6;\n        float temp7;\n        float
    temp8;\n        float temp9;\n        float temp10;\n        float temp11;\n        float
    temp12;\n        float temp13;\n        float temp14;\n        float temp15;\n
    \       float temp16;\n        float temp17;\n        float temp18;\n        float
    temp19;\n        float temp20;\n        float temp21;\n        float temp22;\n
    \       float temp23;\n        float temp24;\n        float temp25;\n        float
    temp26;\n        float temp27;\n        float temp28;\n        float temp29;\n
    \       float temp30;\n        float temp31;\n        float temp32;\n        float
    temp33;\n        float temp34;\n        float temp35;\n        float temp36;\n
    \       float temp37;\n        float temp38;\n        float temp39;\n        float
    temp40;\n        float temp41;\n        float temp42;\n        float temp43;\n
    \       float temp44;\n        float temp45;\n        float temp46;\n        float
    temp47;\n        float temp48;\n        float temp49;\n        float temp50;\n
    \       float temp51;\n        float temp52;\n        float temp53;\n        float
    temp54;\n        float temp55;\n        float temp56;\n        float temp57;\n
    \       float temp58;\n        float temp59;\n        float temp60;\n        float
    temp61;\n        float temp62;\n        float temp63;\n        float temp64;\n
    \       float temp65;\n        float temp66;\n        float temp67;\n        float
    temp68;\n        float temp69;\n        float temp70;\n        float temp71;\n
    \       float temp72;\n        float temp73;\n        float temp74;\n        float
    temp75;\n        float temp76;\n        float temp77;\n        float temp78;\n
    \       float temp79;\n        float temp80;\n        float temp81;\n        float
    temp82;\n        float temp83;\n        float temp84;\n        float temp85;\n
    \       float temp86\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(TruncateNumber((3.5f))
    == (0.5f));\n    Debug.Assert(TruncateNumber((1.25f)) == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f))
    == (0.0f));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp7ohf2t3r.cs(102,21): error CS1002: ; expected

    '
  timestamp: 1659977070
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive floating point number, it can be decomposed
    into\n    // and integer part (largest integer smaller than given number) and
    decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal
    part of the number.\n    public static float TruncateNumber(float number) {\n
    \       BigInteger bigInteger = new BigInteger(number);\n        BigInteger bigIntegerDecimalPart
    = bigInteger.Remainder(BigInteger.One);\n        float truncatedNumber = (float)bigIntegerDecimalPart.Value;\n
    \       return truncatedNumber;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(TruncateNumber((3.5f)) == (0.5f));\n    Debug.Assert(TruncateNumber((1.25f))
    == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f)) == (0.0f));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpa2rl4jlb.cs(15,55): error CS7036: There is no argument given that corresponds
    to the required formal parameter ''divisor'' of ''BigInteger.Remainder(BigInteger,
    BigInteger)''

    /tmp/tmpa2rl4jlb.cs(16,62): error CS1061: ''BigInteger'' does not contain a definition
    for ''Value'' and no accessible extension method ''Value'' accepting a first argument
    of type ''BigInteger'' could be found (are you missing a using directive or an
    assembly reference?)

    '
  timestamp: 1659977072
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive floating point number, it can be decomposed
    into\n    // and integer part (largest integer smaller than given number) and
    decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal
    part of the number.\n    public static float TruncateNumber(float number) {\n
    \       float truncatedNumber = number;\n        float integerPart = 0;\n        float
    decimalPart = 0;\n        float fractionalPart = 0;\n        while (truncatedNumber
    > 0) {\n            int remainder = truncatedNumber % 10;\n            truncatedNumber
    = truncatedNumber / 10;\n            integerPart = integerPart + remainder;\n
    \           decimalPart = decimalPart + remainder;\n            fractionalPart
    = fractionalPart + 1;\n        }\n        float truncatedNumber2 = truncatedNumber;\n
    \       while (truncatedNumber2 > 0) {\n            int remainder2 = truncatedNumber2
    % 10;\n            truncatedNumber2 = truncatedNumber2 / 10;\n            integerPart
    = integerPart + remainder2;\n            decimalPart = decimalPart + remainder2;\n
    \           fractionalPart = fractionalPart + 1;\n        }\n        float truncatedNumber3
    = truncatedNumber2;\n        while (truncatedNumber3 > 0) {\n            int remainder3
    = truncatedNumber3 % 10;\n            truncatedNumber3 = truncatedNumber3 / 10;\n
    \           integerPart = integerPart + remainder3;\n            decimalPart =
    decimalPart + remainder3;\n            fractionalPart = fractionalPart + 1;\n
    \       }\n        float truncatedNumber4 = truncatedNumber3;\n        while (truncatedNumber4
    > 0) {\n            int remainder4 = truncatedNumber4 % 10;\n            truncatedNumber4
    = truncatedNumber4 / 10;\n            integerPart = integerPart + remainder4;\n
    \           decimalPart = decimalPart + remainder4;\n            fractionalPart
    = fractionalPart + 1;\n        }\n        float truncatedNumber5 = truncatedNumber4;\n
    \       while (truncatedNumber5 > 0) {\n            int remainder5 = truncatedNumber5
    % 10;\n            truncatedNumber5 = truncatedNumber5 / 10;\n            integerPart
    = integerPart + remainder5;\n            decimalPart = decimalPart + remainder5;\n
    \           fractionalPart = fractionalPart + 1;\n        }\n        float truncatedNumber6
    = truncatedNumber5;\n        while (truncatedNumber6 > 0) {\n            int remainder6
    = truncatedNumber6 % 10;\n            truncatedNumber6 = truncatedNumber6 / 10;\n
    \           integerPart = integerPart + remainder6;\n            decimalPart =
    decimalPart + remainder6;\n            fractionalPart = fractionalPart + 1;\n
    \       }\n        float truncatedNumber7 = truncatedNumber6;\n        while (truncatedNumber7
    > 0) {\n            int remainder7 = truncatedNumber7 % 10;\n            truncatedNumber7
    = truncatedNumber\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(TruncateNumber((3.5f))
    == (0.5f));\n    Debug.Assert(TruncateNumber((1.25f)) == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f))
    == (0.0f));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpvit6zo14.cs(68,47): error CS1002: ; expected

    /tmp/tmpvit6zo14.cs(70,5): error CS0106: The modifier ''public'' is not valid
    for this item

    /tmp/tmpvit6zo14.cs(76,2): error CS1513: } expected

    '
  timestamp: 1659977072
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive floating point number, it can be decomposed
    into\n    // and integer part (largest integer smaller than given number) and
    decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal
    part of the number.\n    public static float TruncateNumber(float number) {\n
    \       float truncatedNumber = number;\n        float integerPart = 0;\n        float
    decimalPart = 0;\n        while (truncatedNumber >= 1) {\n            truncatedNumber
    = truncatedNumber / 10;\n            integerPart++;\n        }\n        while
    (truncatedNumber > 0) {\n            truncatedNumber = truncatedNumber / 10;\n
    \           decimalPart++;\n        }\n        return decimalPart;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(TruncateNumber((3.5f)) ==
    (0.5f));\n    Debug.Assert(TruncateNumber((1.25f)) == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f))
    == (0.0f));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <36770cafbd034fc4980e20e02081f77a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <36770cafbd034fc4980e20e02081f77a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977073
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive floating point number, it can be decomposed
    into\n    // and integer part (largest integer smaller than given number) and
    decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal
    part of the number.\n    public static float TruncateNumber(float number) {\n
    \       float integerPart = number;\n        float decimalPart = number - integerPart;\n
    \       if (decimalPart > 1.0f) {\n            decimalPart -= 1.0f;\n            integerPart
    += 1.0f;\n        }\n        return integerPart;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(TruncateNumber((3.5f)) == (0.5f));\n    Debug.Assert(TruncateNumber((1.25f))
    == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f)) == (0.0f));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <aac4ce8a2cea47b19155894f460a0247>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <aac4ce8a2cea47b19155894f460a0247>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977073
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive floating point number, it can be decomposed
    into\n    // and integer part (largest integer smaller than given number) and
    decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal
    part of the number.\n    public static float TruncateNumber(float number) {\n
    \       float integerPart = (float)Math.Truncate(number);\n        float decimalPart
    = number - integerPart;\n        return decimalPart;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(TruncateNumber((3.5f)) == (0.5f));\n
    \   Debug.Assert(TruncateNumber((1.25f)) == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f))
    == (0.0f));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977071
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive floating point number, it can be decomposed
    into\n    // and integer part (largest integer smaller than given number) and
    decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal
    part of the number.\n    public static float TruncateNumber(float number) {\n
    \       float integerPart = (float)Math.Truncate(number);\n        float decimalPart
    = number - integerPart;\n        return decimalPart;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(TruncateNumber((3.5f)) == (0.5f));\n
    \   Debug.Assert(TruncateNumber((1.25f)) == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f))
    == (0.0f));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977071
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive floating point number, it can be decomposed
    into\n    // and integer part (largest integer smaller than given number) and
    decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal
    part of the number.\n    public static float TruncateNumber(float number) {\n
    \       float truncatedNumber = number;\n        int integerPart = (int)truncatedNumber;\n
    \       float decimalPart = truncatedNumber - integerPart;\n        return decimalPart;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(TruncateNumber((3.5f))
    == (0.5f));\n    Debug.Assert(TruncateNumber((1.25f)) == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f))
    == (0.0f));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977072
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive floating point number, it can be decomposed
    into\n    // and integer part (largest integer smaller than given number) and
    decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal
    part of the number.\n    public static float TruncateNumber(float number) {\n
    \       Decimal d = new Decimal(number);\n        Decimal integerPart = d.Truncate();\n
    \       Decimal decimalPart = d.Truncate(Decimal.Epsilon);\n        return decimalPart.Value;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(TruncateNumber((3.5f))
    == (0.5f));\n    Debug.Assert(TruncateNumber((1.25f)) == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f))
    == (0.0f));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpreh76jnl.cs(15,33): error CS7036: There is no argument given that corresponds
    to the required formal parameter ''d'' of ''decimal.Truncate(decimal)''

    /tmp/tmpreh76jnl.cs(16,50): error CS0117: ''decimal'' does not contain a definition
    for ''Epsilon''

    /tmp/tmpreh76jnl.cs(17,28): error CS1061: ''decimal'' does not contain a definition
    for ''Value'' and no accessible extension method ''Value'' accepting a first argument
    of type ''decimal'' could be found (are you missing a using directive or an assembly
    reference?)

    '
  timestamp: 1659977072
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive floating point number, it can be decomposed
    into\n    // and integer part (largest integer smaller than given number) and
    decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal
    part of the number.\n    public static float TruncateNumber(float number) {\n
    \       float integerPart;\n        float decimalPart;\n        float truncatedNumber;\n
    \       float remainder;\n        float quotient;\n        float quotientRemainder;\n
    \       float quotientRemainderRemainder;\n        float quotientRemainderRemainderRemainder;\n
    \       float quotientRemainderRemainderRemainderRemainder;\n        float quotientRemainderRemainderRemainderRemainderRemainder;\n
    \       float quotientRemainderRemainderRemainderRemainderRemainderRemainder;\n
    \       float quotientRemainderRemainderRemainderRemainderRemainderRemainderRemainder;\n
    \       float quotientRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainder;\n
    \       float quotientRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainder;\n
    \       float quotientRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainder;\n
    \       float quotientRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainder;\n
    \       float quotientRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainder;\n
    \       float quotientRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainder;\n
    \       float quotientRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainder;\n
    \       float quotientRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainder;\n
    \       float quotientRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainder;\n
    \       float quotientRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainder;\n
    \       float quotientRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainder;\n
    \       float quotientRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainder;\n
    \       float quotientRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemain\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(TruncateNumber((3.5f))
    == (0.5f));\n    Debug.Assert(TruncateNumber((1.25f)) == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f))
    == (0.0f));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpucg0xy8w.cs(38,92): error CS1002: ; expected

    '
  timestamp: 1659977072
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive floating point number, it can be decomposed
    into\n    // and integer part (largest integer smaller than given number) and
    decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal
    part of the number.\n    public static float TruncateNumber(float number) {\n
    \       float truncatedNumber = number;\n        float integerPart = 0;\n        float
    decimalPart = 0;\n        while (truncatedNumber != 0) {\n            float temp
    = truncatedNumber;\n            truncatedNumber = truncatedNumber / 10;\n            integerPart
    = integerPart * 10 + temp;\n        }\n        decimalPart = truncatedNumber;\n
    \       return decimalPart;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(TruncateNumber((3.5f)) == (0.5f));\n    Debug.Assert(TruncateNumber((1.25f))
    == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f)) == (0.0f));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f57693c5c93b4d5d989ea4c0475ef80f>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f57693c5c93b4d5d989ea4c0475ef80f>:0
    \n"
  stdout: ''
  timestamp: 1659977073
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive floating point number, it can be decomposed
    into\n    // and integer part (largest integer smaller than given number) and
    decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal
    part of the number.\n    public static float TruncateNumber(float number) {\n
    \       float result = number;\n        float remainder;\n        if (number >
    0)\n        {\n            int intPart = (int)result;\n            int decimalPart
    = (intPart % 1 == 0) ? intPart / 1 : (intPart - intPart % 1);\n            remainder
    = result - decimalPart;\n        }\n        else\n        {\n            int intPart
    = (int)result;\n            int decimalPart = (intPart % 1 == 0) ? intPart / 1
    : (intPart - intPart % 1);\n            remainder = result + decimalPart;\n        }\n
    \       return remainder;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(TruncateNumber((3.5f)) == (0.5f));\n    Debug.Assert(TruncateNumber((1.25f))
    == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f)) == (0.0f));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977073
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive floating point number, it can be decomposed
    into\n    // and integer part (largest integer smaller than given number) and
    decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal
    part of the number.\n    public static float TruncateNumber(float number) {\n
    \       float truncatedNumber = number;\n        float integerPart = 0;\n        float
    decimalPart = 0;\n        while (truncatedNumber != 0) {\n            integerPart
    = truncatedNumber % 10;\n            decimalPart = truncatedNumber / 10;\n            truncatedNumber
    = truncatedNumber / 10;\n        }\n        return decimalPart;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(TruncateNumber((3.5f)) ==
    (0.5f));\n    Debug.Assert(TruncateNumber((1.25f)) == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f))
    == (0.0f));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f07119ffade64100a41611ee1591ffe5>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f07119ffade64100a41611ee1591ffe5>:0
    \n"
  stdout: ''
  timestamp: 1659977073
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive floating point number, it can be decomposed
    into\n    // and integer part (largest integer smaller than given number) and
    decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal
    part of the number.\n    public static float TruncateNumber(float number) {\n
    \       Decimal integerPart = new Decimal(number);\n        Decimal decimalPart
    = new Decimal(number);\n        decimalPart = decimalPart.Subtract(integerPart);\n
    \       decimalPart = decimalPart.Multiply(new Decimal(10));\n        return decimalPart.ToSingle();\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(TruncateNumber((3.5f))
    == (0.5f));\n    Debug.Assert(TruncateNumber((1.25f)) == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f))
    == (0.0f));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp6wte4wws.cs(16,35): error CS7036: There is no argument given that corresponds
    to the required formal parameter ''d2'' of ''decimal.Subtract(decimal, decimal)''

    /tmp/tmp6wte4wws.cs(17,35): error CS7036: There is no argument given that corresponds
    to the required formal parameter ''d2'' of ''decimal.Multiply(decimal, decimal)''

    /tmp/tmp6wte4wws.cs(18,28): error CS7036: There is no argument given that corresponds
    to the required formal parameter ''d'' of ''decimal.ToSingle(decimal)''

    '
  timestamp: 1659977073
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive floating point number, it can be decomposed
    into\n    // and integer part (largest integer smaller than given number) and
    decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal
    part of the number.\n    public static float TruncateNumber(float number) {\n
    \       BigInteger bigInteger = new BigInteger(number);\n        BigInteger bigIntegerDecimalPart
    = bigInteger.Remainder(BigInteger.One);\n        BigInteger bigIntegerIntegerPart
    = bigInteger.Remainder(BigInteger.TEN);\n        float truncatedNumber = (float)bigIntegerDecimalPart.Value;\n
    \       truncatedNumber /= (float)bigIntegerIntegerPart.Value;\n        return
    truncatedNumber;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(TruncateNumber((3.5f))
    == (0.5f));\n    Debug.Assert(TruncateNumber((1.25f)) == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f))
    == (0.0f));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpntwpwe33.cs(15,55): error CS7036: There is no argument given that corresponds
    to the required formal parameter ''divisor'' of ''BigInteger.Remainder(BigInteger,
    BigInteger)''

    /tmp/tmpntwpwe33.cs(16,76): error CS0117: ''BigInteger'' does not contain a definition
    for ''TEN''

    /tmp/tmpntwpwe33.cs(17,62): error CS1061: ''BigInteger'' does not contain a definition
    for ''Value'' and no accessible extension method ''Value'' accepting a first argument
    of type ''BigInteger'' could be found (are you missing a using directive or an
    assembly reference?)

    /tmp/tmpntwpwe33.cs(18,57): error CS1061: ''BigInteger'' does not contain a definition
    for ''Value'' and no accessible extension method ''Value'' accepting a first argument
    of type ''BigInteger'' could be found (are you missing a using directive or an
    assembly reference?)

    '
  timestamp: 1659977073
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive floating point number, it can be decomposed
    into\n    // and integer part (largest integer smaller than given number) and
    decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal
    part of the number.\n    public static float TruncateNumber(float number) {\n
    \       float truncatedNumber = number;\n        float integerPart = 0;\n        float
    decimalPart = 0;\n        while (truncatedNumber != 0) {\n            int remainder
    = truncatedNumber % 10;\n            truncatedNumber = truncatedNumber / 10;\n
    \           integerPart += remainder;\n            decimalPart += remainder *
    Math.Pow(10.0, decimalPart - 1);\n        }\n        return decimalPart;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(TruncateNumber((3.5f))
    == (0.5f));\n    Debug.Assert(TruncateNumber((1.25f)) == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f))
    == (0.0f));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpd9pjy1f7.cs(18,29): error CS0266: Cannot implicitly convert type ''float''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmpd9pjy1f7.cs(21,13): error CS0266: Cannot implicitly convert type ''double''
    to ''float''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659977073
- exit_code: -1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive floating point number, it can be decomposed
    into\n    // and integer part (largest integer smaller than given number) and
    decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal
    part of the number.\n    public static float TruncateNumber(float number) {\n
    \       float integerPart;\n        float decimalPart;\n        float remainder;\n
    \       integerPart = number;\n        decimalPart = 0;\n        remainder = number;\n
    \       while (true) {\n            decimalPart += (remainder * 10f) / 10;\n            remainder
    *= 10;\n            if (remainder == 0) {\n                break;\n            }\n
    \       }\n        return decimalPart;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(TruncateNumber((3.5f)) == (0.5f));\n    Debug.Assert(TruncateNumber((1.25f))
    == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f)) == (0.0f));\n    }\n\n}\n"
  status: Timeout
  stderr: ''
  stdout: None
  timestamp: 1659977078
- exit_code: -1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive floating point number, it can be decomposed
    into\n    // and integer part (largest integer smaller than given number) and
    decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal
    part of the number.\n    public static float TruncateNumber(float number) {\n
    \       float integerPart;\n        float decimalPart;\n        float remainder;\n
    \       integerPart = number;\n        decimalPart = 1;\n        remainder = number;\n
    \       while (remainder > 1) {\n            integerPart *= 10;\n            decimalPart
    *= 10;\n            remainder *= 10;\n        }\n        remainder *= 10;\n        return
    integerPart + decimalPart;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(TruncateNumber((3.5f)) == (0.5f));\n    Debug.Assert(TruncateNumber((1.25f))
    == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f)) == (0.0f));\n    }\n\n}\n"
  status: Timeout
  stderr: ''
  stdout: None
  timestamp: 1659977078
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive floating point number, it can be decomposed
    into\n    // and integer part (largest integer smaller than given number) and
    decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal
    part of the number.\n    public static float TruncateNumber(float number) {\n
    \       float integerPart;\n        float decimalPart;\n        float remainder;\n
    \       float quotient;\n        float temp;\n        float temp2;\n        float
    temp3;\n        float temp4;\n        float temp5;\n        float temp6;\n        float
    temp7;\n        float temp8;\n        float temp9;\n        float temp10;\n        float
    temp11;\n        float temp12;\n        float temp13;\n        float temp14;\n
    \       float temp15;\n        float temp16;\n        float temp17;\n        float
    temp18;\n        float temp19;\n        float temp20;\n        float temp21;\n
    \       float temp22;\n        float temp23;\n        float temp24;\n        float
    temp25;\n        float temp26;\n        float temp27;\n        float temp28;\n
    \       float temp29;\n        float temp30;\n        float temp31;\n        float
    temp32;\n        float temp33;\n        float temp34;\n        float temp35;\n
    \       float temp36;\n        float temp37;\n        float temp38;\n        float
    temp39;\n        float temp40;\n        float temp41;\n        float temp42;\n
    \       float temp43;\n        float temp44;\n        float temp45;\n        float
    temp46;\n        float temp47;\n        float temp48;\n        float temp49;\n
    \       float temp50;\n        float temp51;\n        float temp52;\n        float
    temp53;\n        float temp54;\n        float temp55;\n        float temp56;\n
    \       float temp57;\n        float temp58;\n        float temp59;\n        float
    temp60;\n        float temp61;\n        float temp62;\n        float temp63;\n
    \       float temp64;\n        float temp65;\n        float temp66;\n        float
    temp67;\n        float temp68;\n        float temp69;\n        float temp70;\n
    \       float temp71;\n        float temp72;\n        float temp73;\n        float
    temp74;\n        float temp75;\n        float temp76;\n        float temp77;\n
    \       float temp78;\n        float temp79;\n        float temp80;\n        float
    temp81;\n        float temp82;\n        float temp83;\n        float temp84;\n
    \       float temp85\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(TruncateNumber((3.5f))
    == (0.5f));\n    Debug.Assert(TruncateNumber((1.25f)) == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f))
    == (0.0f));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpb7d460tv.cs(102,21): error CS1002: ; expected

    '
  timestamp: 1659977071
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive floating point number, it can be decomposed
    into\n    // and integer part (largest integer smaller than given number) and
    decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal
    part of the number.\n    public static float TruncateNumber(float number) {\n
    \       float integerPart = (float)Math.Floor(number);\n        float decimalPart
    = number - integerPart;\n        return decimalPart;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(TruncateNumber((3.5f)) == (0.5f));\n
    \   Debug.Assert(TruncateNumber((1.25f)) == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f))
    == (0.0f));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977071
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive floating point number, it can be decomposed
    into\n    // and integer part (largest integer smaller than given number) and
    decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal
    part of the number.\n    public static float TruncateNumber(float number) {\n
    \       Debug.Assert(number >= 0);\n        Debug.Assert(number < 1);\n        Debug.Assert(number
    % 1 == 0);\n        Debug.Assert(number < Math.Pow(10, 4));\n        Debug.Assert(number
    < Math.Pow(10, 5));\n        Debug.Assert(number < Math.Pow(10, 6));\n        Debug.Assert(number
    < Math.Pow(10, 7));\n        Debug.Assert(number < Math.Pow(10, 8));\n        Debug.Assert(number
    < Math.Pow(10, 9));\n        Debug.Assert(number < Math.Pow(10, 10));\n        Debug.Assert(number
    < Math.Pow(10, 11));\n        Debug.Assert(number < Math.Pow(10, 12));\n        Debug.Assert(number
    < Math.Pow(10, 13));\n        Debug.Assert(number < Math.Pow(10, 14));\n        Debug.Assert(number
    < Math.Pow(10, 15));\n        Debug.Assert(number < Math.Pow(10, 16));\n        Debug.Assert(number
    < Math.Pow(10, 17));\n        Debug.Assert(number < Math.Pow(10, 18));\n        Debug.Assert(number
    < Math.Pow(10, 19));\n        Debug.Assert(number < Math.Pow(10, 20));\n        Debug.Assert(number
    < Math.Pow(10, 21));\n        Debug.Assert(number < Math.Pow(10, 22));\n        Debug.Assert(number
    < Math.Pow(10, 23));\n        Debug.Assert(number < Math.Pow(10, 24));\n        Debug.Assert(number
    < Math.Pow(10, 25));\n        Debug.Assert(number < Math.Pow(10, 26));\n        Debug.Assert(number
    < Math.Pow(10, 27));\n        Debug.Assert(number < Math.Pow(10, 28));\n        Debug.Assert(number
    < Math.Pow(10, 29));\n        Debug.Assert(number < Math.Pow(10, 30));\n        Debug.Assert(number
    < Math.Pow(10, 31));\n        Debug.Assert(number < Math.Pow(10, 32));\n        Debug.Assert(number
    < Math.Pow(10, 33));\n        Debug.Assert(number < Math.Pow(10, 34));\n        Debug.Assert(number
    < Math.Pow(10, 35));\n        Debug.Assert(number < Math.Pow(10, 36));\n        Debug.Assert(number
    < Math.Pow(10, 37));\n        Debug.Asser\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(TruncateNumber((3.5f)) == (0.5f));\n    Debug.Assert(TruncateNumber((1.25f))
    == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f)) == (0.0f));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpxw6blgmz.cs(51,20): error CS1002: ; expected

    '
  timestamp: 1659977073
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive floating point number, it can be decomposed
    into\n    // and integer part (largest integer smaller than given number) and
    decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal
    part of the number.\n    public static float TruncateNumber(float number) {\n
    \       // TODO: Implement this function\n        throw new NotImplementedException();\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(TruncateNumber((3.5f))
    == (0.5f));\n    Debug.Assert(TruncateNumber((1.25f)) == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f))
    == (0.0f));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NotImplementedException: The method or operation
    is not implemented.\n  at Problem.Main (System.String[] args) [0x00001] in <a4af55c4a04840309bca56ff7b717243>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.NotImplementedException: The method
    or operation is not implemented.\n  at Problem.Main (System.String[] args) [0x00001]
    in <a4af55c4a04840309bca56ff7b717243>:0 \n"
  stdout: ''
  timestamp: 1659977073
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive floating point number, it can be decomposed
    into\n    // and integer part (largest integer smaller than given number) and
    decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal
    part of the number.\n    public static float TruncateNumber(float number) {\n
    \       float integerPart;\n        float decimalPart;\n        float remainder;\n
    \       float quotient;\n        float temp;\n        float temp2;\n        float
    temp3;\n        float temp4;\n        float temp5;\n        float temp6;\n        float
    temp7;\n        float temp8;\n        float temp9;\n        float temp10;\n        float
    temp11;\n        float temp12;\n        float temp13;\n        float temp14;\n
    \       float temp15;\n        float temp16;\n        float temp17;\n        float
    temp18;\n        float temp19;\n        float temp20;\n        float temp21;\n
    \       float temp22;\n        float temp23;\n        float temp24;\n        float
    temp25;\n        float temp26;\n        float temp27;\n        float temp28;\n
    \       float temp29;\n        float temp30;\n        float temp31;\n        float
    temp32;\n        float temp33;\n        float temp34;\n        float temp35;\n
    \       float temp36;\n        float temp37;\n        float temp38;\n        float
    temp39;\n        float temp40;\n        float temp41;\n        float temp42;\n
    \       float temp43;\n        float temp44;\n        float temp45;\n        float
    temp46;\n        float temp47;\n        float temp48;\n        float temp49;\n
    \       float temp50;\n        float temp51;\n        float temp52;\n        float
    temp53;\n        float temp54;\n        float temp55;\n        float temp56;\n
    \       float temp57;\n        float temp58;\n        float temp59;\n        float
    temp60;\n        float temp61;\n        float temp62;\n        float temp63;\n
    \       float temp64;\n        float temp65;\n        float temp66;\n        float
    temp67;\n        float temp68;\n        float temp69;\n        float temp70;\n
    \       float temp71;\n        float temp72;\n        float temp73;\n        float
    temp74;\n        float temp75;\n        float temp76;\n        float temp77;\n
    \       float temp78;\n        float temp79;\n        float temp80;\n        float
    temp81;\n        float temp82;\n        float temp83;\n        float temp84;\n
    \       float temp85\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(TruncateNumber((3.5f))
    == (0.5f));\n    Debug.Assert(TruncateNumber((1.25f)) == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f))
    == (0.0f));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpb7d460tv.cs(102,21): error CS1002: ; expected

    '
  timestamp: 1659977071
- exit_code: -1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive floating point number, it can be decomposed
    into\n    // and integer part (largest integer smaller than given number) and
    decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal
    part of the number.\n    public static float TruncateNumber(float number) {\n
    \       float truncatedNumber = number;\n        float integerPart = truncatedNumber
    - TruncateNumber(truncatedNumber);\n        float decimalPart = truncatedNumber
    - TruncateNumber(truncatedNumber);\n        return decimalPart;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(TruncateNumber((3.5f)) ==
    (0.5f));\n    Debug.Assert(TruncateNumber((1.25f)) == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f))
    == (0.0f));\n    }\n\n}\n"
  status: Timeout
  stderr: ''
  stdout: None
  timestamp: 1659977079
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive floating point number, it can be decomposed
    into\n    // and integer part (largest integer smaller than given number) and
    decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal
    part of the number.\n    public static float TruncateNumber(float number) {\n
    \       float fraction = number - Math.Floor(number);\n        float integerPart
    = Math.Floor(number);\n        float decimalPart = number - integerPart;\n        return
    fraction + decimalPart;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(TruncateNumber((3.5f)) == (0.5f));\n    Debug.Assert(TruncateNumber((1.25f))
    == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f)) == (0.0f));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp9pd20psu.cs(14,26): error CS0266: Cannot implicitly convert type ''double''
    to ''float''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmp9pd20psu.cs(15,29): error CS0266: Cannot implicitly convert type ''double''
    to ''float''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659977073
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive floating point number, it can be decomposed
    into\n    // and integer part (largest integer smaller than given number) and
    decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal
    part of the number.\n    public static float TruncateNumber(float number) {\n
    \       BigInteger bigInteger = new BigInteger(number);\n        BigInteger bigIntegerDecimalPart
    = bigInteger.Remainder(BigInteger.One);\n        float truncatedDecimalPart =
    bigIntegerDecimalPart.ToSingle();\n        return truncatedDecimalPart;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(TruncateNumber((3.5f))
    == (0.5f));\n    Debug.Assert(TruncateNumber((1.25f)) == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f))
    == (0.0f));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpt6ajw6yl.cs(15,55): error CS7036: There is no argument given that corresponds
    to the required formal parameter ''divisor'' of ''BigInteger.Remainder(BigInteger,
    BigInteger)''

    /tmp/tmpt6ajw6yl.cs(16,60): error CS1061: ''BigInteger'' does not contain a definition
    for ''ToSingle'' and no accessible extension method ''ToSingle'' accepting a first
    argument of type ''BigInteger'' could be found (are you missing a using directive
    or an assembly reference?)

    '
  timestamp: 1659977073
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive floating point number, it can be decomposed
    into\n    // and integer part (largest integer smaller than given number) and
    decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal
    part of the number.\n    public static float TruncateNumber(float number) {\n
    \       float integerPart;\n        float decimalPart;\n        float fractionalPart;\n
    \       float temp;\n        float temp2;\n        float temp3;\n        float
    temp4;\n        float temp5;\n        float temp6;\n        float temp7;\n        float
    temp8;\n        float temp9;\n        float temp10;\n        float temp11;\n        float
    temp12;\n        float temp13;\n        float temp14;\n        float temp15;\n
    \       float temp16;\n        float temp17;\n        float temp18;\n        float
    temp19;\n        float temp20;\n        float temp21;\n        float temp22;\n
    \       float temp23;\n        float temp24;\n        float temp25;\n        float
    temp26;\n        float temp27;\n        float temp28;\n        float temp29;\n
    \       float temp30;\n        float temp31;\n        float temp32;\n        float
    temp33;\n        float temp34;\n        float temp35;\n        float temp36;\n
    \       float temp37;\n        float temp38;\n        float temp39;\n        float
    temp40;\n        float temp41;\n        float temp42;\n        float temp43;\n
    \       float temp44;\n        float temp45;\n        float temp46;\n        float
    temp47;\n        float temp48;\n        float temp49;\n        float temp50;\n
    \       float temp51;\n        float temp52;\n        float temp53;\n        float
    temp54;\n        float temp55;\n        float temp56;\n        float temp57;\n
    \       float temp58;\n        float temp59;\n        float temp60;\n        float
    temp61;\n        float temp62;\n        float temp63;\n        float temp64;\n
    \       float temp65;\n        float temp66;\n        float temp67;\n        float
    temp68;\n        float temp69;\n        float temp70;\n        float temp71;\n
    \       float temp72;\n        float temp73;\n        float temp74;\n        float
    temp75;\n        float temp76;\n        float temp77;\n        float temp78;\n
    \       float temp79;\n        float temp80;\n        float temp81;\n        float
    temp82;\n        float temp83;\n        float temp84;\n        float temp85;\n
    \       float temp\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(TruncateNumber((3.5f))
    == (0.5f));\n    Debug.Assert(TruncateNumber((1.25f)) == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f))
    == (0.0f));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp5ug7yp0v.cs(102,19): error CS1002: ; expected

    '
  timestamp: 1659977071
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive floating point number, it can be decomposed
    into\n    // and integer part (largest integer smaller than given number) and
    decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal
    part of the number.\n    public static float TruncateNumber(float number) {\n
    \       float integerPart = number;\n        float decimalPart = 1;\n        while
    (decimalPart < 1) {\n            integerPart *= 10;\n            decimalPart *=
    10;\n        }\n        return integerPart;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(TruncateNumber((3.5f)) == (0.5f));\n    Debug.Assert(TruncateNumber((1.25f))
    == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f)) == (0.0f));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <35c907c7fe8b43149592683b508ac760>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <35c907c7fe8b43149592683b508ac760>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977071
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive floating point number, it can be decomposed
    into\n    // and integer part (largest integer smaller than given number) and
    decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal
    part of the number.\n    public static float TruncateNumber(float number) {\n
    \       BigInteger bigInteger = new BigInteger(number);\n        BigInteger bigIntegerRemainder
    = bigInteger.Remainder;\n        BigInteger bigIntegerDecimal = bigIntegerRemainder.Divide(BigInteger.One);\n
    \       float truncatedNumber = (float)bigIntegerDecimal;\n        return truncatedNumber;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(TruncateNumber((3.5f))
    == (0.5f));\n    Debug.Assert(TruncateNumber((1.25f)) == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f))
    == (0.0f));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpb70b6q6t.cs(15,53): error CS0428: Cannot convert method group ''Remainder''
    to non-delegate type ''BigInteger''. Did you intend to invoke the method?

    /tmp/tmpb70b6q6t.cs(16,60): error CS7036: There is no argument given that corresponds
    to the required formal parameter ''divisor'' of ''BigInteger.Divide(BigInteger,
    BigInteger)''

    '
  timestamp: 1659977073
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive floating point number, it can be decomposed
    into\n    // and integer part (largest integer smaller than given number) and
    decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal
    part of the number.\n    public static float TruncateNumber(float number) {\n
    \       float integerPart = (float)Math.Floor(number);\n        float decimalPart
    = number - integerPart;\n        return decimalPart;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(TruncateNumber((3.5f)) == (0.5f));\n
    \   Debug.Assert(TruncateNumber((1.25f)) == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f))
    == (0.0f));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977071
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive floating point number, it can be decomposed
    into\n    // and integer part (largest integer smaller than given number) and
    decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal
    part of the number.\n    public static float TruncateNumber(float number) {\n
    \       float integerPart = number;\n        float decimalPart = 1;\n        while
    (decimalPart < 1) {\n            integerPart *= 10;\n            decimalPart *=
    10;\n        }\n        return integerPart;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(TruncateNumber((3.5f)) == (0.5f));\n    Debug.Assert(TruncateNumber((1.25f))
    == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f)) == (0.0f));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <35c907c7fe8b43149592683b508ac760>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <35c907c7fe8b43149592683b508ac760>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977071
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive floating point number, it can be decomposed
    into\n    // and integer part (largest integer smaller than given number) and
    decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal
    part of the number.\n    public static float TruncateNumber(float number) {\n
    \       float integerPart;\n        float decimalPart;\n        float temp;\n
    \       float temp2;\n        float temp3;\n        float temp4;\n        float
    temp5;\n        float temp6;\n        float temp7;\n        float temp8;\n        float
    temp9;\n        float temp10;\n        float temp11;\n        float temp12;\n
    \       float temp13;\n        float temp14;\n        float temp15;\n        float
    temp16;\n        float temp17;\n        float temp18;\n        float temp19;\n
    \       float temp20;\n        float temp21;\n        float temp22;\n        float
    temp23;\n        float temp24;\n        float temp25;\n        float temp26;\n
    \       float temp27;\n        float temp28;\n        float temp29;\n        float
    temp30;\n        float temp31;\n        float temp32;\n        float temp33;\n
    \       float temp34;\n        float temp35;\n        float temp36;\n        float
    temp37;\n        float temp38;\n        float temp39;\n        float temp40;\n
    \       float temp41;\n        float temp42;\n        float temp43;\n        float
    temp44;\n        float temp45;\n        float temp46;\n        float temp47;\n
    \       float temp48;\n        float temp49;\n        float temp50;\n        float
    temp51;\n        float temp52;\n        float temp53;\n        float temp54;\n
    \       float temp55;\n        float temp56;\n        float temp57;\n        float
    temp58;\n        float temp59;\n        float temp60;\n        float temp61;\n
    \       float temp62;\n        float temp63;\n        float temp64;\n        float
    temp65;\n        float temp66;\n        float temp67;\n        float temp68;\n
    \       float temp69;\n        float temp70;\n        float temp71;\n        float
    temp72;\n        float temp73;\n        float temp74;\n        float temp75;\n
    \       float temp76;\n        float temp77;\n        float temp78;\n        float
    temp79;\n        float temp80;\n        float temp81;\n        float temp82;\n
    \       float temp83;\n        float temp84;\n        float temp85;\n        float
    temp86;\n        float temp87\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(TruncateNumber((3.5f)) == (0.5f));\n    Debug.Assert(TruncateNumber((1.25f))
    == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f)) == (0.0f));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpztizkx15.cs(102,21): error CS1002: ; expected

    '
  timestamp: 1659977071
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive floating point number, it can be decomposed
    into\n    // and integer part (largest integer smaller than given number) and
    decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal
    part of the number.\n    public static float TruncateNumber(float number) {\n
    \       float integerPart = 0;\n        float decimalPart = 0;\n        float
    remainder = 0;\n        float temp = 0;\n        int count = 0;\n        while
    (number != 0) {\n            temp = number % 10;\n            integerPart += temp;\n
    \           decimalPart += temp * Math.Pow(10, count);\n            number = number
    / 10;\n            count++;\n        }\n        if (decimalPart != 0) {\n            remainder
    = decimalPart % 1;\n        }\n        return integerPart + remainder;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(TruncateNumber((3.5f))
    == (0.5f));\n    Debug.Assert(TruncateNumber((1.25f)) == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f))
    == (0.0f));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpxmnhmt1p.cs(22,13): error CS0266: Cannot implicitly convert type ''double''
    to ''float''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659977073
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive floating point number, it can be decomposed
    into\n    // and integer part (largest integer smaller than given number) and
    decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal
    part of the number.\n    public static float TruncateNumber(float number) {\n
    \       float integerPart = (float)Math.Truncate(number);\n        float decimalPart
    = (float)Math.Ceiling(number);\n        return decimalPart;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(TruncateNumber((3.5f)) ==
    (0.5f));\n    Debug.Assert(TruncateNumber((1.25f)) == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f))
    == (0.0f));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <33cb9e95c591481d871a8dba01485ec4>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <33cb9e95c591481d871a8dba01485ec4>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977071
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive floating point number, it can be decomposed
    into\n    // and integer part (largest integer smaller than given number) and
    decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal
    part of the number.\n    public static float TruncateNumber(float number) {\n
    \       float fraction = number - Math.Floor(number);\n        float decimal =
    number - fraction;\n        return decimal;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(TruncateNumber((3.5f)) == (0.5f));\n    Debug.Assert(TruncateNumber((1.25f))
    == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f)) == (0.0f));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmppfgeilbx.cs(15,15): error CS1001: Identifier expected

    /tmp/tmppfgeilbx.cs(15,15): error CS1002: ; expected

    /tmp/tmppfgeilbx.cs(15,23): error CS1001: Identifier expected

    /tmp/tmppfgeilbx.cs(16,16): error CS1525: Invalid expression term ''decimal''

    '
  timestamp: 1659977073
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive floating point number, it can be decomposed
    into\n    // and integer part (largest integer smaller than given number) and
    decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal
    part of the number.\n    public static float TruncateNumber(float number) {\n
    \       float integerPart = (float)Math.Floor(number);\n        float decimalPart
    = (float)number - integerPart;\n        return decimalPart;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(TruncateNumber((3.5f)) ==
    (0.5f));\n    Debug.Assert(TruncateNumber((1.25f)) == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f))
    == (0.0f));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977071
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive floating point number, it can be decomposed
    into\n    // and integer part (largest integer smaller than given number) and
    decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal
    part of the number.\n    public static float TruncateNumber(float number) {\n
    \       float integerPart;\n        float decimalPart;\n        float remainder;\n
    \       integerPart = number;\n        decimalPart = 0;\n        remainder = number;\n
    \       while (true) {\n            decimalPart += remainder;\n            remainder
    = remainder / 10;\n            if (remainder == 0) {\n                break;\n
    \           }\n        }\n        return integerPart + decimalPart;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(TruncateNumber((3.5f)) ==
    (0.5f));\n    Debug.Assert(TruncateNumber((1.25f)) == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f))
    == (0.0f));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a6d2178c400146d882556f821c589969>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a6d2178c400146d882556f821c589969>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977073
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive floating point number, it can be decomposed
    into\n    // and integer part (largest integer smaller than given number) and
    decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal
    part of the number.\n    public static float TruncateNumber(float number) {\n
    \       float integerPart;\n        float decimalPart;\n        float temp;\n
    \       float temp2;\n        float temp3;\n        float temp4;\n        float
    temp5;\n        float temp6;\n        float temp7;\n        float temp8;\n        float
    temp9;\n        float temp10;\n        float temp11;\n        float temp12;\n
    \       float temp13;\n        float temp14;\n        float temp15;\n        float
    temp16;\n        float temp17;\n        float temp18;\n        float temp19;\n
    \       float temp20;\n        float temp21;\n        float temp22;\n        float
    temp23;\n        float temp24;\n        float temp25;\n        float temp26;\n
    \       float temp27;\n        float temp28;\n        float temp29;\n        float
    temp30;\n        float temp31;\n        float temp32;\n        float temp33;\n
    \       float temp34;\n        float temp35;\n        float temp36;\n        float
    temp37;\n        float temp38;\n        float temp39;\n        float temp40;\n
    \       float temp41;\n        float temp42;\n        float temp43;\n        float
    temp44;\n        float temp45;\n        float temp46;\n        float temp47;\n
    \       float temp48;\n        float temp49;\n        float temp50;\n        float
    temp51;\n        float temp52;\n        float temp53;\n        float temp54;\n
    \       float temp55;\n        float temp56;\n        float temp57;\n        float
    temp58;\n        float temp59;\n        float temp60;\n        float temp61;\n
    \       float temp62;\n        float temp63;\n        float temp64;\n        float
    temp65;\n        float temp66;\n        float temp67;\n        float temp68;\n
    \       float temp69;\n        float temp70;\n        float temp71;\n        float
    temp72;\n        float temp73;\n        float temp74;\n        float temp75;\n
    \       float temp76;\n        float temp77;\n        float temp78;\n        float
    temp79;\n        float temp80;\n        float temp81;\n        float temp82;\n
    \       float temp83;\n        float temp84;\n        float temp85;\n        float
    temp86;\n        float temp87\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(TruncateNumber((3.5f)) == (0.5f));\n    Debug.Assert(TruncateNumber((1.25f))
    == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f)) == (0.0f));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpztizkx15.cs(102,21): error CS1002: ; expected

    '
  timestamp: 1659977071
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive floating point number, it can be decomposed
    into\n    // and integer part (largest integer smaller than given number) and
    decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal
    part of the number.\n    public static float TruncateNumber(float number) {\n
    \       float integerPart;\n        float decimalPart;\n        float remainder;\n
    \       float truncatedNumber;\n        float truncatedNumberRemainder;\n        float
    truncatedNumberRemainderRemainder;\n        float truncatedNumberRemainderRemainderRemainder;\n
    \       float truncatedNumberRemainderRemainderRemainderRemainder;\n        float
    truncatedNumberRemainderRemainderRemainderRemainderRemainder;\n        float truncatedNumberRemainderRemainderRemainderRemainderRemainderRemainder;\n
    \       float truncatedNumberRemainderRemainderRemainderRemainderRemainderRemainder;\n
    \       float truncatedNumberRemainderRemainderRemainderRemainderRemainderRemainderRemainder;\n
    \       float truncatedNumberRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainder;\n
    \       float truncatedNumberRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainder;\n
    \       float truncatedNumberRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainder;\n
    \       float truncatedNumberRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainder;\n
    \       float truncatedNumberRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainder;\n
    \       float truncatedNumberRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainder;\n
    \       float truncatedNumberRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainder;\n
    \       float truncatedNumberRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainder;\n
    \       float truncatedNumberRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainder;\n
    \       float truncatedNumberRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainder;\n
    \       float truncatedNumberRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainder;\n
    \       float truncatedNumberRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainder;\n
    \       float truncatedNumberRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainder;\n
    \       float truncatedNumberRemainderRemainderRemainderRemain\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(TruncateNumber((3.5f)) ==
    (0.5f));\n    Debug.Assert(TruncateNumber((1.25f)) == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f))
    == (0.0f));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpr5pn7t5z.cs(39,63): error CS1002: ; expected

    '
  timestamp: 1659977073
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive floating point number, it can be decomposed
    into\n    // and integer part (largest integer smaller than given number) and
    decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal
    part of the number.\n    public static float TruncateNumber(float number) {\n
    \       float truncatedNumber = number;\n        float integerPart = 0;\n        float
    decimalPart = 0;\n        float temp;\n        while (truncatedNumber > 0) {\n
    \           temp = truncatedNumber % 10;\n            integerPart += temp * Math.Pow(10,
    truncatedNumber.Length - 1);\n            truncatedNumber = truncatedNumber /
    10;\n        }\n        temp = truncatedNumber;\n        while (temp > 0) {\n
    \           temp = temp / 10;\n            decimalPart += temp;\n        }\n        return
    decimalPart;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(TruncateNumber((3.5f))
    == (0.5f));\n    Debug.Assert(TruncateNumber((1.25f)) == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f))
    == (0.0f));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpo8iamkh7.cs(20,64): error CS1061: ''float'' does not contain a definition
    for ''Length'' and no accessible extension method ''Length'' accepting a first
    argument of type ''float'' could be found (are you missing a using directive or
    an assembly reference?)

    '
  timestamp: 1659977073
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive floating point number, it can be decomposed
    into\n    // and integer part (largest integer smaller than given number) and
    decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal
    part of the number.\n    public static float TruncateNumber(float number) {\n
    \       float integerPart;\n        float decimalPart;\n        float temp;\n
    \       integerPart = number;\n        decimalPart = 1;\n        while (decimalPart
    > 1) {\n            temp = integerPart;\n            integerPart = integerPart
    * 10;\n            decimalPart = decimalPart - 1;\n        }\n        return temp;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(TruncateNumber((3.5f))
    == (0.5f));\n    Debug.Assert(TruncateNumber((1.25f)) == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f))
    == (0.0f));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmptm3630m5.cs(24,16): error CS0165: Use of unassigned local variable ''temp''

    '
  timestamp: 1659977073
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive floating point number, it can be decomposed
    into\n    // and integer part (largest integer smaller than given number) and
    decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal
    part of the number.\n    public static float TruncateNumber(float number) {\n
    \       float truncatedNumber = number;\n        float integerPart;\n        float
    decimalPart;\n        float temp;\n        float temp2;\n        float temp3;\n
    \       float temp4;\n        float temp5;\n        float temp6;\n        float
    temp7;\n        float temp8;\n        float temp9;\n        float temp10;\n        float
    temp11;\n        float temp12;\n        float temp13;\n        float temp14;\n
    \       float temp15;\n        float temp16;\n        float temp17;\n        float
    temp18;\n        float temp19;\n        float temp20;\n        float temp21;\n
    \       float temp22;\n        float temp23;\n        float temp24;\n        float
    temp25;\n        float temp26;\n        float temp27;\n        float temp28;\n
    \       float temp29;\n        float temp30;\n        float temp31;\n        float
    temp32;\n        float temp33;\n        float temp34;\n        float temp35;\n
    \       float temp36;\n        float temp37;\n        float temp38;\n        float
    temp39;\n        float temp40;\n        float temp41;\n        float temp42;\n
    \       float temp43;\n        float temp44;\n        float temp45;\n        float
    temp46;\n        float temp47;\n        float temp48;\n        float temp49;\n
    \       float temp50;\n        float temp51;\n        float temp52;\n        float
    temp53;\n        float temp54;\n        float temp55;\n        float temp56;\n
    \       float temp57;\n        float temp58;\n        float temp59;\n        float
    temp60;\n        float temp61;\n        float temp62;\n        float temp63;\n
    \       float temp64;\n        float temp65;\n        float temp66;\n        float
    temp67;\n        float temp68;\n        float temp69;\n        float temp70;\n
    \       float temp71;\n        float temp72;\n        float temp73;\n        float
    temp74;\n        float temp75;\n        float temp76;\n        float temp77;\n
    \       float temp78;\n        float temp79;\n        float temp80;\n        float
    temp81;\n        float temp82;\n        float temp83;\n        float temp84;\n
    \       float temp85;\n        float temp\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(TruncateNumber((3.5f)) == (0.5f));\n    Debug.Assert(TruncateNumber((1.25f))
    == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f)) == (0.0f));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp1vl6z3b3.cs(102,19): error CS1002: ; expected

    '
  timestamp: 1659977073
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive floating point number, it can be decomposed
    into\n    // and integer part (largest integer smaller than given number) and
    decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal
    part of the number.\n    public static float TruncateNumber(float number) {\n
    \       float integerPart = 0;\n        float decimalPart = 0;\n        float
    temp = 0;\n        float temp2 = 0;\n        float temp3 = 0;\n        float temp4
    = 0;\n        float temp5 = 0;\n        float temp6 = 0;\n        float temp7
    = 0;\n        float temp8 = 0;\n        float temp9 = 0;\n        float temp10
    = 0;\n        float temp11 = 0;\n        float temp12 = 0;\n        float temp13
    = 0;\n        float temp14 = 0;\n        float temp15 = 0;\n        float temp16
    = 0;\n        float temp17 = 0;\n        float temp18 = 0;\n        float temp19
    = 0;\n        float temp20 = 0;\n        float temp21 = 0;\n        float temp22
    = 0;\n        float temp23 = 0;\n        float temp24 = 0;\n        float temp25
    = 0;\n        float temp26 = 0;\n        float temp27 = 0;\n        float temp28
    = 0;\n        float temp29 = 0;\n        float temp30 = 0;\n        float temp31
    = 0;\n        float temp32 = 0;\n        float temp33 = 0;\n        float temp34
    = 0;\n        float temp35 = 0;\n        float temp36 = 0;\n        float temp37
    = 0;\n        float temp38 = 0;\n        float temp39 = 0;\n        float temp40
    = 0;\n        float temp41 = 0;\n        float temp42 = 0;\n        float temp43
    = 0;\n        float temp44 = 0;\n        float temp45 = 0;\n        float temp46
    = 0;\n        float temp47 = 0;\n        float temp48 = 0;\n        float temp49
    = 0;\n        float temp50 = 0;\n        float temp51 = 0;\n        float temp52
    = 0;\n        float temp53 = 0;\n        float temp54 = 0;\n        float temp55
    = 0;\n        float temp56 = 0;\n        float temp57 = 0;\n        float temp58
    = 0;\n        float temp59 = 0;\n        float temp60 = 0;\n        float temp61
    = 0;\n        float temp62 = 0;\n        float temp63 = 0;\n        float temp64
    = 0;\n        float temp65 = 0;\n        float temp66 = 0;\n        float temp67
    = 0;\n        float temp68 = 0;\n        float temp69 = 0;\n        float temp70
    = 0;\n        float temp71 = 0;\n        float temp72 = 0;\n        float temp73
    = 0;\n        float temp74 = 0;\n        float temp75 = 0;\n        float temp76
    = 0;\n        float temp77 = 0;\n        float temp78 = 0;\n        float temp79
    = 0;\n        float temp80 = 0;\n        float temp81 = 0;\n        float temp82
    = 0;\n        float temp83 = 0;\n        float temp84 = 0;\n        \n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(TruncateNumber((3.5f))
    == (0.5f));\n    Debug.Assert(TruncateNumber((1.25f)) == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f))
    == (0.0f));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpvu1akkb4.cs(14,15): warning CS0219: The variable ''integerPart'' is assigned
    but its value is never used

    /tmp/tmpvu1akkb4.cs(15,15): warning CS0219: The variable ''decimalPart'' is assigned
    but its value is never used

    /tmp/tmpvu1akkb4.cs(16,15): warning CS0219: The variable ''temp'' is assigned
    but its value is never used

    /tmp/tmpvu1akkb4.cs(17,15): warning CS0219: The variable ''temp2'' is assigned
    but its value is never used

    /tmp/tmpvu1akkb4.cs(18,15): warning CS0219: The variable ''temp3'' is assigned
    but its value is never used

    /tmp/tmpvu1akkb4.cs(19,15): warning CS0219: The variable ''temp4'' is assigned
    but its value is never used

    /tmp/tmpvu1akkb4.cs(20,15): warning CS0219: The variable ''temp5'' is assigned
    but its value is never used

    /tmp/tmpvu1akkb4.cs(21,15): warning CS0219: The variable ''temp6'' is assigned
    but its value is never used

    /tmp/tmpvu1akkb4.cs(22,15): warning CS0219: The variable ''temp7'' is assigned
    but its value is never used

    /tmp/tmpvu1akkb4.cs(23,15): warning CS0219: The variable ''temp8'' is assigned
    but its value is never used

    /tmp/tmpvu1akkb4.cs(24,15): warning CS0219: The variable ''temp9'' is assigned
    but its value is never used

    /tmp/tmpvu1akkb4.cs(25,15): warning CS0219: The variable ''temp10'' is assigned
    but its value is never used

    /tmp/tmpvu1akkb4.cs(26,15): warning CS0219: The variable ''temp11'' is assigned
    but its value is never used

    /tmp/tmpvu1akkb4.cs(27,15): warning CS0219: The variable ''temp12'' is assigned
    but its value is never used

    /tmp/tmpvu1akkb4.cs(28,15): warning CS0219: The variable ''temp13'' is assigned
    but its value is never used

    /tmp/tmpvu1akkb4.cs(29,15): warning CS0219: The variable ''temp14'' is assigned
    but its value is never used

    /tmp/tmpvu1akkb4.cs(30,15): warning CS0219: The variable ''temp15'' is assigned
    but its value is never used

    /tmp/tmpvu1akkb4.cs(31,15): warning CS0219: The variable ''temp16'' is assigned
    but its value is never used

    /tmp/tmpvu1ak'
  timestamp: 1659977071
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive floating point number, it can be decomposed
    into\n    // and integer part (largest integer smaller than given number) and
    decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal
    part of the number.\n    public static float TruncateNumber(float number) {\n
    \       Debug.Assert(number >= 0);\n        Debug.Assert(number < 1);\n        Debug.Assert(number
    != 0.0f);\n        Debug.Assert(number != 0.0f);\n        Debug.Assert(number
    != 0.0f);\n        Debug.Assert(number != 0.0f);\n        Debug.Assert(number
    != 0.0f);\n        Debug.Assert(number != 0.0f);\n        Debug.Assert(number
    != 0.0f);\n        Debug.Assert(number != 0.0f);\n        Debug.Assert(number
    != 0.0f);\n        Debug.Assert(number != 0.0f);\n        Debug.Assert(number
    != 0.0f);\n        Debug.Assert(number != 0.0f);\n        Debug.Assert(number
    != 0.0f);\n        Debug.Assert(number != 0.0f);\n        Debug.Assert(number
    != 0.0f);\n        Debug.Assert(number != 0.0f);\n        Debug.Assert(number
    != 0.0f);\n        Debug.Assert(number != 0.0f);\n        Debug.Assert(number
    != 0.0f);\n        Debug.Assert(number != 0.0f);\n        Debug.Assert(number
    != 0.0f);\n        Debug.Assert(number != 0.0f);\n        Debug.Assert(number
    != 0.0f);\n        Debug.Assert(number != 0.0f);\n        Debug.Assert(number
    != 0.0f);\n        Debug.Assert(number != 0.0f);\n        Debug.Assert(number
    != 0.0f);\n        Debug.Assert(number != 0.0f);\n        Debug.Assert(number
    != 0.0f);\n        Debug.Assert(number != 0.0f);\n        Debug.Assert(number
    != 0.0f);\n        Debug.Assert(number != 0.0f);\n        Debug.Assert(number
    != 0.0f);\n        Debug.Assert(number != 0.0f);\n        Debug.Assert(number
    != 0.0f);\n        Debug.Assert(number != 0.0f);\n        Debug.Assert(number
    != 0.0f);\n        Debug.Assert(number != 0.0f);\n        Debug.Assert(number
    != 0.0f);\n        Debug.Assert(number != 0.0f);\n        Debug.Assert(number
    != 0.0f);\n\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(TruncateNumber((3.5f))
    == (0.5f));\n    Debug.Assert(TruncateNumber((1.25f)) == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f))
    == (0.0f));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpdo5n0s_h.cs(13,25): error CS0161: ''Problem.TruncateNumber(float)'': not
    all code paths return a value

    '
  timestamp: 1659977073
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive floating point number, it can be decomposed
    into\n    // and integer part (largest integer smaller than given number) and
    decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal
    part of the number.\n    public static float TruncateNumber(float number) {\n
    \       float integerPart = number;\n        float decimalPart = number - integerPart;\n
    \       float remainder = decimalPart * 100;\n        return integerPart + remainder;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(TruncateNumber((3.5f))
    == (0.5f));\n    Debug.Assert(TruncateNumber((1.25f)) == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f))
    == (0.0f));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <ee3b0a8522994faa8bc84cf29dc9a226>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <ee3b0a8522994faa8bc84cf29dc9a226>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977074
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive floating point number, it can be decomposed
    into\n    // and integer part (largest integer smaller than given number) and
    decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal
    part of the number.\n    public static float TruncateNumber(float number) {\n
    \       BigInteger bigInteger = new BigInteger(number);\n        BigInteger bigIntegerDecimalPart
    = bigInteger.Remainder(BigInteger.One);\n        float truncatedNumber = bigIntegerDecimalPart.ToSingle();\n
    \       return truncatedNumber;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(TruncateNumber((3.5f)) == (0.5f));\n    Debug.Assert(TruncateNumber((1.25f))
    == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f)) == (0.0f));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmppieabs8w.cs(15,55): error CS7036: There is no argument given that corresponds
    to the required formal parameter ''divisor'' of ''BigInteger.Remainder(BigInteger,
    BigInteger)''

    /tmp/tmppieabs8w.cs(16,55): error CS1061: ''BigInteger'' does not contain a definition
    for ''ToSingle'' and no accessible extension method ''ToSingle'' accepting a first
    argument of type ''BigInteger'' could be found (are you missing a using directive
    or an assembly reference?)

    '
  timestamp: 1659977072
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive floating point number, it can be decomposed
    into\n    // and integer part (largest integer smaller than given number) and
    decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal
    part of the number.\n    public static float TruncateNumber(float number) {\n
    \       float integerPart = number;\n        float decimalPart = number - integerPart;\n
    \       return decimalPart;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(TruncateNumber((3.5f)) == (0.5f));\n    Debug.Assert(TruncateNumber((1.25f))
    == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f)) == (0.0f));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <47e9a4810ba2493e918e49632d104bca>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <47e9a4810ba2493e918e49632d104bca>:0
    \n"
  stdout: ''
  timestamp: 1659977071
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive floating point number, it can be decomposed
    into\n    // and integer part (largest integer smaller than given number) and
    decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal
    part of the number.\n    public static float TruncateNumber(float number) {\n
    \       float integerPart;\n        float decimalPart;\n        float temp;\n
    \       float temp2;\n        float temp3;\n        float temp4;\n        float
    temp5;\n        float temp6;\n        float temp7;\n        float temp8;\n        float
    temp9;\n        float temp10;\n        float temp11;\n        float temp12;\n
    \       float temp13;\n        float temp14;\n        float temp15;\n        float
    temp16;\n        float temp17;\n        float temp18;\n        float temp19;\n
    \       float temp20;\n        float temp21;\n        float temp22;\n        float
    temp23;\n        float temp24;\n        float temp25;\n        float temp26;\n
    \       float temp27;\n        float temp28;\n        float temp29;\n        float
    temp30;\n        float temp31;\n        float temp32;\n        float temp33;\n
    \       float temp34;\n        float temp35;\n        float temp36;\n        float
    temp37;\n        float temp38;\n        float temp39;\n        float temp40;\n
    \       float temp41;\n        float temp42;\n        float temp43;\n        float
    temp44;\n        float temp45;\n        float temp46;\n        float temp47;\n
    \       float temp48;\n        float temp49;\n        float temp50;\n        float
    temp51;\n        float temp52;\n        float temp53;\n        float temp54;\n
    \       float temp55;\n        float temp56;\n        float temp57;\n        float
    temp58;\n        float temp59;\n        float temp60;\n        float temp61;\n
    \       float temp62;\n        float temp63;\n        float temp64;\n        float
    temp65;\n        float temp66;\n        float temp67;\n        float temp68;\n
    \       float temp69;\n        float temp70;\n        float temp71;\n        float
    temp72;\n        float temp73;\n        float temp74;\n        float temp75;\n
    \       float temp76;\n        float temp77;\n        float temp78;\n        float
    temp79;\n        float temp80;\n        float temp81;\n        float temp82;\n
    \       float temp83;\n        float temp84;\n        float temp85;\n        float
    temp86;\n        float temp87\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(TruncateNumber((3.5f)) == (0.5f));\n    Debug.Assert(TruncateNumber((1.25f))
    == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f)) == (0.0f));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpztizkx15.cs(102,21): error CS1002: ; expected

    '
  timestamp: 1659977071
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive floating point number, it can be decomposed
    into\n    // and integer part (largest integer smaller than given number) and
    decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal
    part of the number.\n    public static float TruncateNumber(float number) {\n
    \       float integerPart;\n        float decimalPart;\n        float remainder;\n
    \       float quotient;\n        float temp;\n        float temp2;\n        float
    temp3;\n        float temp4;\n        float temp5;\n        float temp6;\n        float
    temp7;\n        float temp8;\n        float temp9;\n        float temp10;\n        float
    temp11;\n        float temp12;\n        float temp13;\n        float temp14;\n
    \       float temp15;\n        float temp16;\n        float temp17;\n        float
    temp18;\n        float temp19;\n        float temp20;\n        float temp21;\n
    \       float temp22;\n        float temp23;\n        float temp24;\n        float
    temp25;\n        float temp26;\n        float temp27;\n        float temp28;\n
    \       float temp29;\n        float temp30;\n        float temp31;\n        float
    temp32;\n        float temp33;\n        float temp34;\n        float temp35;\n
    \       float temp36;\n        float temp37;\n        float temp38;\n        float
    temp39;\n        float temp40;\n        float temp41;\n        float temp42;\n
    \       float temp43;\n        float temp44;\n        float temp45;\n        float
    temp46;\n        float temp47;\n        float temp48;\n        float temp49;\n
    \       float temp50;\n        float temp51;\n        float temp52;\n        float
    temp53;\n        float temp54;\n        float temp55;\n        float temp56;\n
    \       float temp57;\n        float temp58;\n        float temp59;\n        float
    temp60;\n        float temp61;\n        float temp62;\n        float temp63;\n
    \       float temp64;\n        float temp65;\n        float temp66;\n        float
    temp67;\n        float temp68;\n        float temp69;\n        float temp70;\n
    \       float temp71;\n        float temp72;\n        float temp73;\n        float
    temp74;\n        float temp75;\n        float temp76;\n        float temp77;\n
    \       float temp78;\n        float temp79;\n        float temp80;\n        float
    temp81;\n        float temp82;\n        float temp83;\n        float temp84;\n
    \       float temp85\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(TruncateNumber((3.5f))
    == (0.5f));\n    Debug.Assert(TruncateNumber((1.25f)) == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f))
    == (0.0f));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpb7d460tv.cs(102,21): error CS1002: ; expected

    '
  timestamp: 1659977071
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive floating point number, it can be decomposed
    into\n    // and integer part (largest integer smaller than given number) and
    decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal
    part of the number.\n    public static float TruncateNumber(float number) {\n
    \       float integerPart = (float)Math.Truncate(number);\n        float decimalPart
    = number - integerPart;\n        return decimalPart;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(TruncateNumber((3.5f)) == (0.5f));\n
    \   Debug.Assert(TruncateNumber((1.25f)) == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f))
    == (0.0f));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977071
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive floating point number, it can be decomposed
    into\n    // and integer part (largest integer smaller than given number) and
    decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal
    part of the number.\n    public static float TruncateNumber(float number) {\n
    \       float integerPart = (float)Math.Truncate(number);\n        float decimalPart
    = number - integerPart;\n        return decimalPart;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(TruncateNumber((3.5f)) == (0.5f));\n
    \   Debug.Assert(TruncateNumber((1.25f)) == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f))
    == (0.0f));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977071
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive floating point number, it can be decomposed
    into\n    // and integer part (largest integer smaller than given number) and
    decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal
    part of the number.\n    public static float TruncateNumber(float number) {\n
    \       float integerPart = number;\n        float decimalPart = number - integerPart;\n
    \       return decimalPart;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(TruncateNumber((3.5f)) == (0.5f));\n    Debug.Assert(TruncateNumber((1.25f))
    == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f)) == (0.0f));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <47e9a4810ba2493e918e49632d104bca>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <47e9a4810ba2493e918e49632d104bca>:0
    \n"
  stdout: ''
  timestamp: 1659977071
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive floating point number, it can be decomposed
    into\n    // and integer part (largest integer smaller than given number) and
    decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal
    part of the number.\n    public static float TruncateNumber(float number) {\n
    \       float integerPart;\n        float decimalPart;\n        float fractionalPart;\n
    \       float temp;\n        float temp2;\n        float temp3;\n        float
    temp4;\n        float temp5;\n        float temp6;\n        float temp7;\n        float
    temp8;\n        float temp9;\n        float temp10;\n        float temp11;\n        float
    temp12;\n        float temp13;\n        float temp14;\n        float temp15;\n
    \       float temp16;\n        float temp17;\n        float temp18;\n        float
    temp19;\n        float temp20;\n        float temp21;\n        float temp22;\n
    \       float temp23;\n        float temp24;\n        float temp25;\n        float
    temp26;\n        float temp27;\n        float temp28;\n        float temp29;\n
    \       float temp30;\n        float temp31;\n        float temp32;\n        float
    temp33;\n        float temp34;\n        float temp35;\n        float temp36;\n
    \       float temp37;\n        float temp38;\n        float temp39;\n        float
    temp40;\n        float temp41;\n        float temp42;\n        float temp43;\n
    \       float temp44;\n        float temp45;\n        float temp46;\n        float
    temp47;\n        float temp48;\n        float temp49;\n        float temp50;\n
    \       float temp51;\n        float temp52;\n        float temp53;\n        float
    temp54;\n        float temp55;\n        float temp56;\n        float temp57;\n
    \       float temp58;\n        float temp59;\n        float temp60;\n        float
    temp61;\n        float temp62;\n        float temp63;\n        float temp64;\n
    \       float temp65;\n        float temp66;\n        float temp67;\n        float
    temp68;\n        float temp69;\n        float temp70;\n        float temp71;\n
    \       float temp72;\n        float temp73;\n        float temp74;\n        float
    temp75;\n        float temp76;\n        float temp77;\n        float temp78;\n
    \       float temp79;\n        float temp80;\n        float temp81;\n        float
    temp82;\n        float temp83;\n        float temp84;\n        float temp85;\n
    \       float temp\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(TruncateNumber((3.5f))
    == (0.5f));\n    Debug.Assert(TruncateNumber((1.25f)) == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f))
    == (0.0f));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp5ug7yp0v.cs(102,19): error CS1002: ; expected

    '
  timestamp: 1659977071
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive floating point number, it can be decomposed
    into\n    // and integer part (largest integer smaller than given number) and
    decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal
    part of the number.\n    public static float TruncateNumber(float number) {\n
    \       float integerPart = 0;\n        float decimalPart = 0;\n        float
    temp = 0;\n        float temp2 = 0;\n        float temp3 = 0;\n        float temp4
    = 0;\n        float temp5 = 0;\n        float temp6 = 0;\n        float temp7
    = 0;\n        float temp8 = 0;\n        float temp9 = 0;\n        float temp10
    = 0;\n        float temp11 = 0;\n        float temp12 = 0;\n        float temp13
    = 0;\n        float temp14 = 0;\n        float temp15 = 0;\n        float temp16
    = 0;\n        float temp17 = 0;\n        float temp18 = 0;\n        float temp19
    = 0;\n        float temp20 = 0;\n        float temp21 = 0;\n        float temp22
    = 0;\n        float temp23 = 0;\n        float temp24 = 0;\n        float temp25
    = 0;\n        float temp26 = 0;\n        float temp27 = 0;\n        float temp28
    = 0;\n        float temp29 = 0;\n        float temp30 = 0;\n        float temp31
    = 0;\n        float temp32 = 0;\n        float temp33 = 0;\n        float temp34
    = 0;\n        float temp35 = 0;\n        float temp36 = 0;\n        float temp37
    = 0;\n        float temp38 = 0;\n        float temp39 = 0;\n        float temp40
    = 0;\n        float temp41 = 0;\n        float temp42 = 0;\n        float temp43
    = 0;\n        float temp44 = 0;\n        float temp45 = 0;\n        float temp46
    = 0;\n        float temp47 = 0;\n        float temp48 = 0;\n        float temp49
    = 0;\n        float temp50 = 0;\n        float temp51 = 0;\n        float temp52
    = 0;\n        float temp53 = 0;\n        float temp54 = 0;\n        float temp55
    = 0;\n        float temp56 = 0;\n        float temp57 = 0;\n        float temp58
    = 0;\n        float temp59 = 0;\n        float temp60 = 0;\n        float temp61
    = 0;\n        float temp62 = 0;\n        float temp63 = 0;\n        float temp64
    = 0;\n        float temp65 = 0;\n        float temp66 = 0;\n        float temp67
    = 0;\n        float temp68 = 0;\n        float temp69 = 0;\n        float temp70
    = 0;\n        float temp71 = 0;\n        float temp72 = 0;\n        float temp73
    = 0;\n        float temp74 = 0;\n        float temp75 = 0;\n        float temp76
    = 0;\n        float temp77 = 0;\n        float temp78 = 0;\n        float temp79
    = 0;\n        float temp80 = 0;\n        float temp81 = 0;\n        float temp82
    = 0;\n        float temp83 = 0;\n        float temp84 = 0;\n        \n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(TruncateNumber((3.5f))
    == (0.5f));\n    Debug.Assert(TruncateNumber((1.25f)) == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f))
    == (0.0f));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpvu1akkb4.cs(14,15): warning CS0219: The variable ''integerPart'' is assigned
    but its value is never used

    /tmp/tmpvu1akkb4.cs(15,15): warning CS0219: The variable ''decimalPart'' is assigned
    but its value is never used

    /tmp/tmpvu1akkb4.cs(16,15): warning CS0219: The variable ''temp'' is assigned
    but its value is never used

    /tmp/tmpvu1akkb4.cs(17,15): warning CS0219: The variable ''temp2'' is assigned
    but its value is never used

    /tmp/tmpvu1akkb4.cs(18,15): warning CS0219: The variable ''temp3'' is assigned
    but its value is never used

    /tmp/tmpvu1akkb4.cs(19,15): warning CS0219: The variable ''temp4'' is assigned
    but its value is never used

    /tmp/tmpvu1akkb4.cs(20,15): warning CS0219: The variable ''temp5'' is assigned
    but its value is never used

    /tmp/tmpvu1akkb4.cs(21,15): warning CS0219: The variable ''temp6'' is assigned
    but its value is never used

    /tmp/tmpvu1akkb4.cs(22,15): warning CS0219: The variable ''temp7'' is assigned
    but its value is never used

    /tmp/tmpvu1akkb4.cs(23,15): warning CS0219: The variable ''temp8'' is assigned
    but its value is never used

    /tmp/tmpvu1akkb4.cs(24,15): warning CS0219: The variable ''temp9'' is assigned
    but its value is never used

    /tmp/tmpvu1akkb4.cs(25,15): warning CS0219: The variable ''temp10'' is assigned
    but its value is never used

    /tmp/tmpvu1akkb4.cs(26,15): warning CS0219: The variable ''temp11'' is assigned
    but its value is never used

    /tmp/tmpvu1akkb4.cs(27,15): warning CS0219: The variable ''temp12'' is assigned
    but its value is never used

    /tmp/tmpvu1akkb4.cs(28,15): warning CS0219: The variable ''temp13'' is assigned
    but its value is never used

    /tmp/tmpvu1akkb4.cs(29,15): warning CS0219: The variable ''temp14'' is assigned
    but its value is never used

    /tmp/tmpvu1akkb4.cs(30,15): warning CS0219: The variable ''temp15'' is assigned
    but its value is never used

    /tmp/tmpvu1akkb4.cs(31,15): warning CS0219: The variable ''temp16'' is assigned
    but its value is never used

    /tmp/tmpvu1ak'
  timestamp: 1659977071
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive floating point number, it can be decomposed
    into\n    // and integer part (largest integer smaller than given number) and
    decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal
    part of the number.\n    public static float TruncateNumber(float number) {\n
    \       float integerPart = 0;\n        float decimalPart = 0;\n        float
    fractionalPart = 0;\n        float fractionalPartRemainder = 0;\n        float
    fractionalPartRemainderRemainder = 0;\n        float fractionalPartRemainderRemainderRemainder
    = 0;\n        float fractionalPartRemainderRemainderRemainderRemainder = 0;\n
    \       float fractionalPartRemainderRemainderRemainderRemainderRemainder = 0;\n
    \       float fractionalPartRemainderRemainderRemainderRemainderRemainderRemainder
    = 0;\n        float fractionalPartRemainderRemainderRemainderRemainderRemainderRemainderRemainder
    = 0;\n        float fractionalPartRemainderRemainderRemainderRemainderRemainderRemainderRemainder
    = 0;\n        float fractionalPartRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainder
    = 0;\n        float fractionalPartRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainder
    = 0;\n        float fractionalPartRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainder
    = 0;\n        float fractionalPartRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainder
    = 0;\n        float fractionalPartRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainder
    = 0;\n        float fractionalPartRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainder
    = 0;\n        float fractionalPartRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainder
    = 0;\n        float fractionalPartRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainder
    = 0;\n        float fractionalPartRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainder
    = 0;\n        float fractionalPartRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainder
    = 0;\n        float fractionalPartRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainder
    = 0;\n        float fractionalPartRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainder
    = 0;\n        float fractionalPartRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainder
    = 0;\n        float fractionalPartRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainder
    = 0;\n        float fractionalPartRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainder
    = 0;\n        float \n    }\n    public static void Main(string[] args) {\n    Debug.Assert(TruncateNumber((3.5f))
    == (0.5f));\n    Debug.Assert(TruncateNumber((1.25f)) == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f))
    == (0.0f));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp2gjpngye.cs(40,14): error CS1001: Identifier expected

    /tmp/tmp2gjpngye.cs(40,14): error CS1002: ; expected

    '
  timestamp: 1659977070
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive floating point number, it can be decomposed
    into\n    // and integer part (largest integer smaller than given number) and
    decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal
    part of the number.\n    public static float TruncateNumber(float number) {\n
    \       Decimal d = new Decimal(number);\n        BigInteger bi = new BigInteger(d.ToString());\n
    \       BigInteger bi2 = bi.Remainder(BigInteger.One);\n        BigInteger bi3
    = bi2.Remainder(BigInteger.One);\n        BigInteger bi4 = bi3.Remainder(BigInteger.One);\n
    \       BigInteger bi5 = bi4.Remainder(BigInteger.One);\n        BigInteger bi6
    = bi5.Remainder(BigInteger.One);\n        BigInteger bi7 = bi6.Remainder(BigInteger.One);\n
    \       BigInteger bi8 = bi7.Remainder(BigInteger.One);\n        BigInteger bi9
    = bi8.Remainder(BigInteger.One);\n        BigInteger bi10 = bi9.Remainder(BigInteger.One);\n
    \       BigInteger bi11 = bi10.Remainder(BigInteger.One);\n        BigInteger
    bi12 = bi11.Remainder(BigInteger.One);\n        BigInteger bi13 = bi12.Remainder(BigInteger.One);\n
    \       BigInteger bi14 = bi13.Remainder(BigInteger.One);\n        BigInteger
    bi15 = bi14.Remainder(BigInteger.One);\n        BigInteger bi16 = bi15.Remainder(BigInteger.One);\n
    \       BigInteger bi17 = bi16.Remainder(BigInteger.One);\n        BigInteger
    bi18 = bi17.Remainder(BigInteger.One);\n        BigInteger bi19 = bi18.Remainder(BigInteger.One);\n
    \       BigInteger bi20 = bi19.Remainder(BigInteger.One);\n        BigInteger
    bi21 = bi20.Remainder(BigInteger.One);\n        BigInteger bi22 = bi21.Remainder(BigInteger.One);\n
    \       BigInteger bi23 = bi22.Remainder(BigInteger.One);\n        BigInteger
    bi24 = bi23.Remainder(BigInteger.One);\n        BigInteger bi25 = bi24.Remainder(BigInteger.One);\n
    \       BigInteger bi26 = bi25.Remainder(BigInteger.One);\n        BigInteger
    bi27 = bi26.Remainder(BigInteger.One);\n        BigInteger bi28 = bi27.Remainder(BigInteger.One);\n
    \       BigInteger bi29 = bi28.Remainder(BigInteger.One);\n        BigInteger
    bi30 = bi29.Remainder(BigInteger.One);\n        BigInteger bi31 = bi30.Remainder(BigInteger.One);\n
    \       BigInteger bi32 = bi31.Remainder(BigInteger.One);\n        BigInteger
    bi33 = bi32.Remainder(BigInteger.One);\n        BigInteger bi34 = bi33.Remainder(BigInteger.One);\n
    \       BigInteger bi35\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(TruncateNumber((3.5f)) == (0.5f));\n    Debug.Assert(TruncateNumber((1.25f))
    == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f)) == (0.0f));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp7tr6rj23.cs(49,24): error CS1002: ; expected

    '
  timestamp: 1659977073
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive floating point number, it can be decomposed
    into\n    // and integer part (largest integer smaller than given number) and
    decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal
    part of the number.\n    public static float TruncateNumber(float number) {\n
    \       float integerPart;\n        float decimalPart;\n        float fractionalPart;\n
    \       float fractionalPartRemainder;\n        float fractionalPartRemainderRemainder;\n
    \       float fractionalPartRemainderRemainderRemainder;\n        float fractionalPartRemainderRemainderRemainderRemainder;\n
    \       float fractionalPartRemainderRemainderRemainderRemainderRemainder;\n        float
    fractionalPartRemainderRemainderRemainderRemainderRemainderRemainder;\n        float
    fractionalPartRemainderRemainderRemainderRemainderRemainderRemainderRemainder;\n
    \       float fractionalPartRemainderRemainderRemainderRemainderRemainderRemainderRemainder;\n
    \       float fractionalPartRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainder;\n
    \       float fractionalPartRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainder;\n
    \       float fractionalPartRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainder;\n
    \       float fractionalPartRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainder;\n
    \       float fractionalPartRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainder;\n
    \       float fractionalPartRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainder;\n
    \       float fractionalPartRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainder;\n
    \       float fractionalPartRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainder;\n
    \       float fractionalPartRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainder;\n
    \       float fractionalPartRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainder;\n
    \       float fractionalPartRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainder;\n
    \       float fractionalPartRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainder;\n
    \       float fractionalPartRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainder;\n
    \       float fractionalPartRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainder;\n
    \       float fractionalPartRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainder\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(TruncateNumber((3.5f))
    == (0.5f));\n    Debug.Assert(TruncateNumber((1.25f)) == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f))
    == (0.0f));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp01zhfp2k.cs(39,119): error CS1002: ; expected

    '
  timestamp: 1659977073
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive floating point number, it can be decomposed
    into\n    // and integer part (largest integer smaller than given number) and
    decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal
    part of the number.\n    public static float TruncateNumber(float number) {\n
    \       float fraction = number - Math.Floor(number);\n        float decimals
    = Math.Abs(fraction);\n        return decimals;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(TruncateNumber((3.5f)) == (0.5f));\n    Debug.Assert(TruncateNumber((1.25f))
    == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f)) == (0.0f));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpe034tq_h.cs(14,26): error CS0266: Cannot implicitly convert type ''double''
    to ''float''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659977073
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive floating point number, it can be decomposed
    into\n    // and integer part (largest integer smaller than given number) and
    decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal
    part of the number.\n    public static float TruncateNumber(float number) {\n
    \       float truncatedNumber = number;\n        float integerPart = 0;\n        float
    decimalPart = 0;\n        while (truncatedNumber != 0) {\n            truncatedNumber
    = truncatedNumber / 10;\n            integerPart++;\n        }\n        while
    (truncatedNumber != 0) {\n            truncatedNumber = truncatedNumber / 10;\n
    \           decimalPart++;\n        }\n        return decimalPart;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(TruncateNumber((3.5f)) ==
    (0.5f));\n    Debug.Assert(TruncateNumber((1.25f)) == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f))
    == (0.0f));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a2976fe155104a5ab93d5f172722e1a1>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a2976fe155104a5ab93d5f172722e1a1>:0
    \n"
  stdout: ''
  timestamp: 1659977074
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive floating point number, it can be decomposed
    into\n    // and integer part (largest integer smaller than given number) and
    decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal
    part of the number.\n    public static float TruncateNumber(float number) {\n
    \       float integerPart = number;\n        float decimalPart = 1;\n        while
    (decimalPart < 1) {\n            integerPart *= 10;\n            decimalPart *=
    10;\n        }\n        return integerPart;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(TruncateNumber((3.5f)) == (0.5f));\n    Debug.Assert(TruncateNumber((1.25f))
    == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f)) == (0.0f));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <35c907c7fe8b43149592683b508ac760>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <35c907c7fe8b43149592683b508ac760>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659977071
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive floating point number, it can be decomposed
    into\n    // and integer part (largest integer smaller than given number) and
    decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal
    part of the number.\n    public static float TruncateNumber(float number) {\n
    \       float integerPart = 0;\n        float decimalPart = 0;\n        float
    temp = 0;\n        float temp2 = 0;\n        float temp3 = 0;\n        float temp4
    = 0;\n        float temp5 = 0;\n        float temp6 = 0;\n        float temp7
    = 0;\n        float temp8 = 0;\n        float temp9 = 0;\n        float temp10
    = 0;\n        float temp11 = 0;\n        float temp12 = 0;\n        float temp13
    = 0;\n        float temp14 = 0;\n        float temp15 = 0;\n        float temp16
    = 0;\n        float temp17 = 0;\n        float temp18 = 0;\n        float temp19
    = 0;\n        float temp20 = 0;\n        float temp21 = 0;\n        float temp22
    = 0;\n        float temp23 = 0;\n        float temp24 = 0;\n        float temp25
    = 0;\n        float temp26 = 0;\n        float temp27 = 0;\n        float temp28
    = 0;\n        float temp29 = 0;\n        float temp30 = 0;\n        float temp31
    = 0;\n        float temp32 = 0;\n        float temp33 = 0;\n        float temp34
    = 0;\n        float temp35 = 0;\n        float temp36 = 0;\n        float temp37
    = 0;\n        float temp38 = 0;\n        float temp39 = 0;\n        float temp40
    = 0;\n        float temp41 = 0;\n        float temp42 = 0;\n        float temp43
    = 0;\n        float temp44 = 0;\n        float temp45 = 0;\n        float temp46
    = 0;\n        float temp47 = 0;\n        float temp48 = 0;\n        float temp49
    = 0;\n        float temp50 = 0;\n        float temp51 = 0;\n        float temp52
    = 0;\n        float temp53 = 0;\n        float temp54 = 0;\n        float temp55
    = 0;\n        float temp56 = 0;\n        float temp57 = 0;\n        float temp58
    = 0;\n        float temp59 = 0;\n        float temp60 = 0;\n        float temp61
    = 0;\n        float temp62 = 0;\n        float temp63 = 0;\n        float temp64
    = 0;\n        float temp65 = 0;\n        float temp66 = 0;\n        float temp67
    = 0;\n        float temp68 = 0;\n        float temp69 = 0;\n        float temp70
    = 0;\n        float temp71 = 0;\n        float temp72 = 0;\n        float temp73
    = 0;\n        float temp74 = 0;\n        float temp75 = 0;\n        float temp76
    = 0;\n        float temp77 = 0;\n        float temp78 = 0;\n        float temp79
    = 0;\n        float temp80 = 0;\n        float temp81 = 0;\n        float temp82
    = 0;\n        float temp83 = 0;\n        float temp84 = 0;\n        \n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(TruncateNumber((3.5f))
    == (0.5f));\n    Debug.Assert(TruncateNumber((1.25f)) == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f))
    == (0.0f));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpvu1akkb4.cs(14,15): warning CS0219: The variable ''integerPart'' is assigned
    but its value is never used

    /tmp/tmpvu1akkb4.cs(15,15): warning CS0219: The variable ''decimalPart'' is assigned
    but its value is never used

    /tmp/tmpvu1akkb4.cs(16,15): warning CS0219: The variable ''temp'' is assigned
    but its value is never used

    /tmp/tmpvu1akkb4.cs(17,15): warning CS0219: The variable ''temp2'' is assigned
    but its value is never used

    /tmp/tmpvu1akkb4.cs(18,15): warning CS0219: The variable ''temp3'' is assigned
    but its value is never used

    /tmp/tmpvu1akkb4.cs(19,15): warning CS0219: The variable ''temp4'' is assigned
    but its value is never used

    /tmp/tmpvu1akkb4.cs(20,15): warning CS0219: The variable ''temp5'' is assigned
    but its value is never used

    /tmp/tmpvu1akkb4.cs(21,15): warning CS0219: The variable ''temp6'' is assigned
    but its value is never used

    /tmp/tmpvu1akkb4.cs(22,15): warning CS0219: The variable ''temp7'' is assigned
    but its value is never used

    /tmp/tmpvu1akkb4.cs(23,15): warning CS0219: The variable ''temp8'' is assigned
    but its value is never used

    /tmp/tmpvu1akkb4.cs(24,15): warning CS0219: The variable ''temp9'' is assigned
    but its value is never used

    /tmp/tmpvu1akkb4.cs(25,15): warning CS0219: The variable ''temp10'' is assigned
    but its value is never used

    /tmp/tmpvu1akkb4.cs(26,15): warning CS0219: The variable ''temp11'' is assigned
    but its value is never used

    /tmp/tmpvu1akkb4.cs(27,15): warning CS0219: The variable ''temp12'' is assigned
    but its value is never used

    /tmp/tmpvu1akkb4.cs(28,15): warning CS0219: The variable ''temp13'' is assigned
    but its value is never used

    /tmp/tmpvu1akkb4.cs(29,15): warning CS0219: The variable ''temp14'' is assigned
    but its value is never used

    /tmp/tmpvu1akkb4.cs(30,15): warning CS0219: The variable ''temp15'' is assigned
    but its value is never used

    /tmp/tmpvu1akkb4.cs(31,15): warning CS0219: The variable ''temp16'' is assigned
    but its value is never used

    /tmp/tmpvu1ak'
  timestamp: 1659977071
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a positive floating point number, it can be decomposed
    into\n    // and integer part (largest integer smaller than given number) and
    decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal
    part of the number.\n    public static float TruncateNumber(float number) {\n
    \       float integerPart = number;\n        float decimalPart = number - integerPart;\n
    \       return decimalPart;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(TruncateNumber((3.5f)) == (0.5f));\n    Debug.Assert(TruncateNumber((1.25f))
    == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f)) == (0.0f));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <47e9a4810ba2493e918e49632d104bca>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <47e9a4810ba2493e918e49632d104bca>:0
    \n"
  stdout: ''
  timestamp: 1659977071
