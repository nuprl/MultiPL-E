language: cs
name: HumanEval_152_compare
results:
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // I think we all remember that feeling when the result of\
    \ some long-awaited\n    // event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    // definitely worth noting down and comparing.\n\
    \    // Your task is to determine if a person correctly guessed the results of\
    \ a number of matches.\n    // You are given two arrays of scores and guesses\
    \ of equal length, where each index shows a match. \n    // Return an array of\
    \ the same length denoting how far off each guess was. If they have guessed correctly,\n\
    \    // the value is 0, and if not, the value is the absolute difference between\
    \ the guess and the score.\n    // example:\n    public static List<long> Compare(List<long>\
    \ game, List<long> guess) {\n        List<long> result = new List<long>();\n \
    \       foreach (var g in game) {\n            var guess = guess.FirstOrDefault(x\
    \ => x == g);\n            if (guess == null) {\n                result.Add(0);\n\
    \            } else {\n                result.Add(Math.Abs(guess - g));\n    \
    \        }\n        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))));\n  \
    \  Debug.Assert(Compare((new List<long>(new long[]{(long)0L, (long)0L, (long)0L,\
    \ (long)0L, (long)0L, (long)0L})), (new List<long>(new long[]{(long)0L, (long)0L,\
    \ (long)0L, (long)0L, (long)0L, (long)0L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))));\n    Debug.Assert(Compare((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (new List<long>(new long[]{(long)-1L,\
    \ (long)-2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,\
    \ (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L, (long)2L,\
    \ (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)0L,\
    \ (long)0L, (long)1L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpqha0ffvr.cs(20,17): error CS0136: A local or parameter named ''guess''
    cannot be declared in this scope because that name is used in an enclosing local
    scope to define a local or parameter

    /tmp/tmpqha0ffvr.cs(20,25): error CS0841: Cannot use local variable ''guess''
    before it is declared

    '
  timestamp: 1659976334
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // I think we all remember that feeling when the result of\
    \ some long-awaited\n    // event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    // definitely worth noting down and comparing.\n\
    \    // Your task is to determine if a person correctly guessed the results of\
    \ a number of matches.\n    // You are given two arrays of scores and guesses\
    \ of equal length, where each index shows a match. \n    // Return an array of\
    \ the same length denoting how far off each guess was. If they have guessed correctly,\n\
    \    // the value is 0, and if not, the value is the absolute difference between\
    \ the guess and the score.\n    // example:\n    public static List<long> Compare(List<long>\
    \ game, List<long> guess) {\n        List<long> result = new List<long>();\n \
    \       long score = 0;\n        long guess = 0;\n        long diff = 0;\n   \
    \     foreach (var item in game) {\n            score = item;\n            guess\
    \ = guess[game.IndexOf(item)]; // get the guess from the game\n            diff\
    \ = guess - score;\n            result.Add(diff);\n        }\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Compare((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})),\
    \ (new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L,\
    \ (long)-2L}))).Equals((new List<long>(new long[]{(long)0L, (long)0L, (long)0L,\
    \ (long)0L, (long)3L, (long)3L}))));\n    Debug.Assert(Compare((new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L})), (new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))));\n\
    \    Debug.Assert(Compare((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})),\
    \ (new List<long>(new long[]{(long)-1L, (long)-2L, (long)-3L}))).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)4L, (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L,\
    \ (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)0L, (long)0L, (long)1L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp_56g1e7g.cs(20,14): error CS0136: A local or parameter named ''guess''
    cannot be declared in this scope because that name is used in an enclosing local
    scope to define a local or parameter

    /tmp/tmp_56g1e7g.cs(24,21): error CS0021: Cannot apply indexing with [] to an
    expression of type ''long''

    '
  timestamp: 1659976334
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // I think we all remember that feeling when the result of\
    \ some long-awaited\n    // event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    // definitely worth noting down and comparing.\n\
    \    // Your task is to determine if a person correctly guessed the results of\
    \ a number of matches.\n    // You are given two arrays of scores and guesses\
    \ of equal length, where each index shows a match. \n    // Return an array of\
    \ the same length denoting how far off each guess was. If they have guessed correctly,\n\
    \    // the value is 0, and if not, the value is the absolute difference between\
    \ the guess and the score.\n    // example:\n    public static List<long> Compare(List<long>\
    \ game, List<long> guess) {\n        var result = new List<long>();\n        foreach\
    \ (var g in guess) {\n            var difference = Math.Abs(g - game[game.IndexOf(g)]);\n\
    \            result.Add(difference);\n        }\n        return result;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(Compare((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))));\n\
    \    Debug.Assert(Compare((new List<long>(new long[]{(long)0L, (long)0L, (long)0L,\
    \ (long)0L, (long)0L, (long)0L})), (new List<long>(new long[]{(long)0L, (long)0L,\
    \ (long)0L, (long)0L, (long)0L, (long)0L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))));\n    Debug.Assert(Compare((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (new List<long>(new long[]{(long)-1L,\
    \ (long)-2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,\
    \ (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L, (long)2L,\
    \ (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)0L,\
    \ (long)0L, (long)1L}))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out\
    \ of range. Must be non-negative and less than the size of the collection.\nParameter\
    \ name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Compare\
    \ (System.Collections.Generic.List`1[T] game, System.Collections.Generic.List`1[T]\
    \ guess) [0x00023] in <a0cf3d9e323b4b32a0ef6a6b41cbc600>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x0002d] in <a0cf3d9e323b4b32a0ef6a6b41cbc600>:0 \n\
    [ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index was\
    \ out of range. Must be non-negative and less than the size of the collection.\n\
    Parameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Compare\
    \ (System.Collections.Generic.List`1[T] game, System.Collections.Generic.List`1[T]\
    \ guess) [0x00023] in <a0cf3d9e323b4b32a0ef6a6b41cbc600>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x0002d] in <a0cf3d9e323b4b32a0ef6a6b41cbc600>:0 \n"
  stdout: ''
  timestamp: 1659976334
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // I think we all remember that feeling when the result of\
    \ some long-awaited\n    // event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    // definitely worth noting down and comparing.\n\
    \    // Your task is to determine if a person correctly guessed the results of\
    \ a number of matches.\n    // You are given two arrays of scores and guesses\
    \ of equal length, where each index shows a match. \n    // Return an array of\
    \ the same length denoting how far off each guess was. If they have guessed correctly,\n\
    \    // the value is 0, and if not, the value is the absolute difference between\
    \ the guess and the score.\n    // example:\n    public static List<long> Compare(List<long>\
    \ game, List<long> guess) {\n        List<long> result = new List<long>();\n \
    \       foreach (long guess in guess) {\n            long score = game.ElementAtOrDefault(game.IndexOf(guess));\n\
    \            result.Add(Math.Abs(guess - score));\n        }\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Compare((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})),\
    \ (new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L,\
    \ (long)-2L}))).Equals((new List<long>(new long[]{(long)0L, (long)0L, (long)0L,\
    \ (long)0L, (long)3L, (long)3L}))));\n    Debug.Assert(Compare((new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L})), (new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))));\n\
    \    Debug.Assert(Compare((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})),\
    \ (new List<long>(new long[]{(long)-1L, (long)-2L, (long)-3L}))).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)4L, (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L,\
    \ (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)0L, (long)0L, (long)1L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpgv081m89.cs(19,23): error CS0136: A local or parameter named ''guess''
    cannot be declared in this scope because that name is used in an enclosing local
    scope to define a local or parameter

    '
  timestamp: 1659976334
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // I think we all remember that feeling when the result of\
    \ some long-awaited\n    // event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    // definitely worth noting down and comparing.\n\
    \    // Your task is to determine if a person correctly guessed the results of\
    \ a number of matches.\n    // You are given two arrays of scores and guesses\
    \ of equal length, where each index shows a match. \n    // Return an array of\
    \ the same length denoting how far off each guess was. If they have guessed correctly,\n\
    \    // the value is 0, and if not, the value is the absolute difference between\
    \ the guess and the score.\n    // example:\n    public static List<long> Compare(List<long>\
    \ game, List<long> guess) {\n        List<long> result = new List<long>();\n \
    \       foreach (long g in game) {\n            long guess = guess.FirstOrDefault(x\
    \ => x == g);\n            if (guess == g) {\n                result.Add(0);\n\
    \            } else {\n                result.Add(Math.Abs(guess - g));\n    \
    \        }\n        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))));\n  \
    \  Debug.Assert(Compare((new List<long>(new long[]{(long)0L, (long)0L, (long)0L,\
    \ (long)0L, (long)0L, (long)0L})), (new List<long>(new long[]{(long)0L, (long)0L,\
    \ (long)0L, (long)0L, (long)0L, (long)0L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))));\n    Debug.Assert(Compare((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (new List<long>(new long[]{(long)-1L,\
    \ (long)-2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,\
    \ (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L, (long)2L,\
    \ (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)0L,\
    \ (long)0L, (long)1L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp8415ncs2.cs(20,18): error CS0136: A local or parameter named ''guess''
    cannot be declared in this scope because that name is used in an enclosing local
    scope to define a local or parameter

    /tmp/tmp8415ncs2.cs(20,32): error CS1061: ''long'' does not contain a definition
    for ''FirstOrDefault'' and no accessible extension method ''FirstOrDefault'' accepting
    a first argument of type ''long'' could be found (are you missing a using directive
    or an assembly reference?)

    /tmp/tmp8415ncs2.cs(20,26): error CS0165: Use of unassigned local variable ''guess''

    '
  timestamp: 1659976334
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // I think we all remember that feeling when the result of\
    \ some long-awaited\n    // event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    // definitely worth noting down and comparing.\n\
    \    // Your task is to determine if a person correctly guessed the results of\
    \ a number of matches.\n    // You are given two arrays of scores and guesses\
    \ of equal length, where each index shows a match. \n    // Return an array of\
    \ the same length denoting how far off each guess was. If they have guessed correctly,\n\
    \    // the value is 0, and if not, the value is the absolute difference between\
    \ the guess and the score.\n    // example:\n    public static List<long> Compare(List<long>\
    \ game, List<long> guess) {\n        // TODO: Implement this method\n        List<long>\
    \ result = new List<long>();\n        long score = 0;\n        long guess = 0;\n\
    \        long difference = 0;\n        foreach (var item in game) {\n        \
    \    score = item;\n            guess = guess[0];\n            difference = Math.Abs(guess\
    \ - score);\n            result.Add(difference);\n        }\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Compare((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})),\
    \ (new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L,\
    \ (long)-2L}))).Equals((new List<long>(new long[]{(long)0L, (long)0L, (long)0L,\
    \ (long)0L, (long)3L, (long)3L}))));\n    Debug.Assert(Compare((new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L})), (new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))));\n\
    \    Debug.Assert(Compare((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})),\
    \ (new List<long>(new long[]{(long)-1L, (long)-2L, (long)-3L}))).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)4L, (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L,\
    \ (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)0L, (long)0L, (long)1L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp4tlqsi9o.cs(21,14): error CS0136: A local or parameter named ''guess''
    cannot be declared in this scope because that name is used in an enclosing local
    scope to define a local or parameter

    /tmp/tmp4tlqsi9o.cs(25,21): error CS0021: Cannot apply indexing with [] to an
    expression of type ''long''

    '
  timestamp: 1659976334
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // I think we all remember that feeling when the result of\
    \ some long-awaited\n    // event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    // definitely worth noting down and comparing.\n\
    \    // Your task is to determine if a person correctly guessed the results of\
    \ a number of matches.\n    // You are given two arrays of scores and guesses\
    \ of equal length, where each index shows a match. \n    // Return an array of\
    \ the same length denoting how far off each guess was. If they have guessed correctly,\n\
    \    // the value is 0, and if not, the value is the absolute difference between\
    \ the guess and the score.\n    // example:\n    public static List<long> Compare(List<long>\
    \ game, List<long> guess) {\n        List<long> result = new List<long>();\n \
    \       long score = 0;\n        long diff = 0;\n        foreach (long g in game)\
    \ {\n            score += g;\n        }\n        foreach (long g in guess) {\n\
    \            diff += g - score;\n        }\n        if (diff < 0) {\n        \
    \    foreach (long g in guess) {\n                result.Add(-g);\n          \
    \  }\n        } else {\n            foreach (long g in guess) {\n            \
    \    result.Add(g);\n            }\n        }\n        return result;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(Compare((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))));\n\
    \    Debug.Assert(Compare((new List<long>(new long[]{(long)0L, (long)0L, (long)0L,\
    \ (long)0L, (long)0L, (long)0L})), (new List<long>(new long[]{(long)0L, (long)0L,\
    \ (long)0L, (long)0L, (long)0L, (long)0L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))));\n    Debug.Assert(Compare((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (new List<long>(new long[]{(long)-1L,\
    \ (long)-2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,\
    \ (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L, (long)2L,\
    \ (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)0L,\
    \ (long)0L, (long)1L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <48af0aa88f304d0b9814eaac09a72781>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <48af0aa88f304d0b9814eaac09a72781>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976335
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // I think we all remember that feeling when the result of\
    \ some long-awaited\n    // event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    // definitely worth noting down and comparing.\n\
    \    // Your task is to determine if a person correctly guessed the results of\
    \ a number of matches.\n    // You are given two arrays of scores and guesses\
    \ of equal length, where each index shows a match. \n    // Return an array of\
    \ the same length denoting how far off each guess was. If they have guessed correctly,\n\
    \    // the value is 0, and if not, the value is the absolute difference between\
    \ the guess and the score.\n    // example:\n    public static List<long> Compare(List<long>\
    \ game, List<long> guess) {\n        var result = new List<long>();\n        foreach\
    \ (var g in game) {\n            long diff = Math.Abs(g - guess[game.IndexOf(g)]);\n\
    \            result.Add(diff);\n        }\n        return result;\n    }\n   \
    \ public static void Main(string[] args) {\n    Debug.Assert(Compare((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))));\n\
    \    Debug.Assert(Compare((new List<long>(new long[]{(long)0L, (long)0L, (long)0L,\
    \ (long)0L, (long)0L, (long)0L})), (new List<long>(new long[]{(long)0L, (long)0L,\
    \ (long)0L, (long)0L, (long)0L, (long)0L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))));\n    Debug.Assert(Compare((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (new List<long>(new long[]{(long)-1L,\
    \ (long)-2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,\
    \ (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L, (long)2L,\
    \ (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)0L,\
    \ (long)0L, (long)1L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <dc9d9ada2cda4cdaa6b86e7745db7785>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <dc9d9ada2cda4cdaa6b86e7745db7785>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976335
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // I think we all remember that feeling when the result of\
    \ some long-awaited\n    // event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    // definitely worth noting down and comparing.\n\
    \    // Your task is to determine if a person correctly guessed the results of\
    \ a number of matches.\n    // You are given two arrays of scores and guesses\
    \ of equal length, where each index shows a match. \n    // Return an array of\
    \ the same length denoting how far off each guess was. If they have guessed correctly,\n\
    \    // the value is 0, and if not, the value is the absolute difference between\
    \ the guess and the score.\n    // example:\n    public static List<long> Compare(List<long>\
    \ game, List<long> guess) {\n        List<long> result = new List<long>();\n \
    \       long total = 0;\n        long totalDiff = 0;\n        long totalGuess\
    \ = 0;\n        long totalGuessed = 0;\n        long totalGuessedDiff = 0;\n \
    \       long totalGuessedDiff2 = 0;\n        long totalGuessedDiff3 = 0;\n   \
    \     long totalGuessedDiff4 = 0;\n        long totalGuessedDiff5 = 0;\n     \
    \   long totalGuessedDiff6 = 0;\n        long totalGuessedDiff7 = 0;\n       \
    \ long totalGuessedDiff8 = 0;\n        long totalGuessedDiff9 = 0;\n        long\
    \ totalGuessedDiff10 = 0;\n        long totalGuessedDiff11 = 0;\n        long\
    \ totalGuessedDiff12 = 0;\n        long totalGuessedDiff13 = 0;\n        long\
    \ totalGuessedDiff14 = 0;\n        long totalGuessedDiff15 = 0;\n        long\
    \ totalGuessedDiff16 = 0;\n        long totalGuessedDiff17 = 0;\n        long\
    \ totalGuessedDiff18 = 0;\n        long totalGuessedDiff19 = 0;\n        long\
    \ totalGuessedDiff20 = 0;\n        long totalGuessedDiff21 = 0;\n        long\
    \ totalGuessedDiff22 = 0;\n        long totalGuessedDiff23 = 0;\n        long\
    \ totalGuessedDiff24 = 0;\n        long totalGuessedDiff25 = 0;\n        long\
    \ totalGuessedDiff26 = 0;\n        long totalGuessedDiff27 = 0;\n        long\
    \ totalGuessedDiff28 = 0;\n        long totalGuessedDiff29 = 0;\n        long\
    \ totalGuessedDiff30 = 0;\n        long totalGuessedDiff31 = 0;\n        long\
    \ totalGuessedDiff32 = 0;\n        long totalGuessedDiff33 = 0;\n        long\
    \ totalGuessedDiff34 = 0;\n        long totalGuessedDiff35 = 0;\n        long\
    \ totalGuessedDiff36 = 0;\n        long totalGuessedDiff37 = 0;\n        long\
    \ totalGuessedDiff38 = 0;\n        long totalGuessedDiff39 = 0;\n        long\
    \ totalGuessedDiff40 = 0;\n        long totalGuessedDiff41 = 0;\n        long\
    \ totalGuessedDiff42 = 0;\n        long totalGuessedDiff43 = 0;\n        long\
    \ totalGuessedDiff44 = 0;\n        long totalGuessedDiff45 = 0;\n        long\
    \ totalGuessedDiff46 = 0;\n        long totalGuessedDiff47 = 0;\n        long\
    \ totalGuessedDiff48 = 0;\n        \n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))));\n  \
    \  Debug.Assert(Compare((new List<long>(new long[]{(long)0L, (long)0L, (long)0L,\
    \ (long)0L, (long)0L, (long)0L})), (new List<long>(new long[]{(long)0L, (long)0L,\
    \ (long)0L, (long)0L, (long)0L, (long)0L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))));\n    Debug.Assert(Compare((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (new List<long>(new long[]{(long)-1L,\
    \ (long)-2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,\
    \ (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L, (long)2L,\
    \ (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)0L,\
    \ (long)0L, (long)1L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpbu48pm4v.cs(19,14): warning CS0219: The variable ''total'' is assigned
    but its value is never used

    /tmp/tmpbu48pm4v.cs(20,14): warning CS0219: The variable ''totalDiff'' is assigned
    but its value is never used

    /tmp/tmpbu48pm4v.cs(21,14): warning CS0219: The variable ''totalGuess'' is assigned
    but its value is never used

    /tmp/tmpbu48pm4v.cs(22,14): warning CS0219: The variable ''totalGuessed'' is assigned
    but its value is never used

    /tmp/tmpbu48pm4v.cs(23,14): warning CS0219: The variable ''totalGuessedDiff''
    is assigned but its value is never used

    /tmp/tmpbu48pm4v.cs(24,14): warning CS0219: The variable ''totalGuessedDiff2''
    is assigned but its value is never used

    /tmp/tmpbu48pm4v.cs(25,14): warning CS0219: The variable ''totalGuessedDiff3''
    is assigned but its value is never used

    /tmp/tmpbu48pm4v.cs(26,14): warning CS0219: The variable ''totalGuessedDiff4''
    is assigned but its value is never used

    /tmp/tmpbu48pm4v.cs(27,14): warning CS0219: The variable ''totalGuessedDiff5''
    is assigned but its value is never used

    /tmp/tmpbu48pm4v.cs(28,14): warning CS0219: The variable ''totalGuessedDiff6''
    is assigned but its value is never used

    /tmp/tmpbu48pm4v.cs(29,14): warning CS0219: The variable ''totalGuessedDiff7''
    is assigned but its value is never used

    /tmp/tmpbu48pm4v.cs(30,14): warning CS0219: The variable ''totalGuessedDiff8''
    is assigned but its value is never used

    /tmp/tmpbu48pm4v.cs(31,14): warning CS0219: The variable ''totalGuessedDiff9''
    is assigned but its value is never used

    /tmp/tmpbu48pm4v.cs(32,14): warning CS0219: The variable ''totalGuessedDiff10''
    is assigned but its value is never used

    /tmp/tmpbu48pm4v.cs(33,14): warning CS0219: The variable ''totalGuessedDiff11''
    is assigned but its value is never used

    /tmp/tmpbu48pm4v.cs(34,14): warning CS0219: The variable ''totalGuessedDiff12''
    is assigned but its value is never used

    /tmp/tmpbu48pm4v.cs(35,14): warning CS0219: The variable ''totalGuessedDiff13''
    i'
  timestamp: 1659976334
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // I think we all remember that feeling when the result of\
    \ some long-awaited\n    // event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    // definitely worth noting down and comparing.\n\
    \    // Your task is to determine if a person correctly guessed the results of\
    \ a number of matches.\n    // You are given two arrays of scores and guesses\
    \ of equal length, where each index shows a match. \n    // Return an array of\
    \ the same length denoting how far off each guess was. If they have guessed correctly,\n\
    \    // the value is 0, and if not, the value is the absolute difference between\
    \ the guess and the score.\n    // example:\n    public static List<long> Compare(List<long>\
    \ game, List<long> guess) {\n        var result = new List<long>();\n        foreach\
    \ (var g in game) {\n            var guess = guess.FirstOrDefault(x => x == g);\n\
    \            if (guess == null) {\n                result.Add(0);\n          \
    \  } else {\n                result.Add(Math.Abs(guess - g));\n            }\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))));\n  \
    \  Debug.Assert(Compare((new List<long>(new long[]{(long)0L, (long)0L, (long)0L,\
    \ (long)0L, (long)0L, (long)0L})), (new List<long>(new long[]{(long)0L, (long)0L,\
    \ (long)0L, (long)0L, (long)0L, (long)0L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))));\n    Debug.Assert(Compare((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (new List<long>(new long[]{(long)-1L,\
    \ (long)-2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,\
    \ (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L, (long)2L,\
    \ (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)0L,\
    \ (long)0L, (long)1L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpltsofqsz.cs(20,17): error CS0136: A local or parameter named ''guess''
    cannot be declared in this scope because that name is used in an enclosing local
    scope to define a local or parameter

    /tmp/tmpltsofqsz.cs(20,25): error CS0841: Cannot use local variable ''guess''
    before it is declared

    '
  timestamp: 1659976334
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // I think we all remember that feeling when the result of\
    \ some long-awaited\n    // event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    // definitely worth noting down and comparing.\n\
    \    // Your task is to determine if a person correctly guessed the results of\
    \ a number of matches.\n    // You are given two arrays of scores and guesses\
    \ of equal length, where each index shows a match. \n    // Return an array of\
    \ the same length denoting how far off each guess was. If they have guessed correctly,\n\
    \    // the value is 0, and if not, the value is the absolute difference between\
    \ the guess and the score.\n    // example:\n    public static List<long> Compare(List<long>\
    \ game, List<long> guess) {\n        List<long> result = new List<long>();\n \
    \       long score = 0;\n        long diff = 0;\n        foreach (var g in game)\
    \ {\n            score += g;\n        }\n        foreach (var g in guess) {\n\
    \            diff += g;\n        }\n        if (diff == 0) {\n            result.Add(0);\n\
    \        } else {\n            result.Add(Math.Abs(score - diff));\n        }\n\
    \        return result;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(Compare((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L, (long)5L, (long)1L})), (new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)2L, (long)-2L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))));\n    Debug.Assert(Compare((new\
    \ List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L})),\
    \ (new List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L,\
    \ (long)0L}))).Equals((new List<long>(new long[]{(long)0L, (long)0L, (long)0L,\
    \ (long)0L, (long)0L, (long)0L}))));\n    Debug.Assert(Compare((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L})), (new List<long>(new long[]{(long)-1L,\
    \ (long)-2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,\
    \ (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L, (long)2L,\
    \ (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)0L,\
    \ (long)0L, (long)1L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <353f63fd0adf4eb7a3c6e3ca5eb27701>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <353f63fd0adf4eb7a3c6e3ca5eb27701>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976335
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // I think we all remember that feeling when the result of\
    \ some long-awaited\n    // event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    // definitely worth noting down and comparing.\n\
    \    // Your task is to determine if a person correctly guessed the results of\
    \ a number of matches.\n    // You are given two arrays of scores and guesses\
    \ of equal length, where each index shows a match. \n    // Return an array of\
    \ the same length denoting how far off each guess was. If they have guessed correctly,\n\
    \    // the value is 0, and if not, the value is the absolute difference between\
    \ the guess and the score.\n    // example:\n    public static List<long> Compare(List<long>\
    \ game, List<long> guess) {\n        var result = new List<long>();\n        foreach\
    \ (var g in game) {\n            long diff = Math.Abs(g - guess[game.IndexOf(g)]);\n\
    \            result.Add(diff);\n        }\n        return result;\n    }\n   \
    \ public static void Main(string[] args) {\n    Debug.Assert(Compare((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))));\n\
    \    Debug.Assert(Compare((new List<long>(new long[]{(long)0L, (long)0L, (long)0L,\
    \ (long)0L, (long)0L, (long)0L})), (new List<long>(new long[]{(long)0L, (long)0L,\
    \ (long)0L, (long)0L, (long)0L, (long)0L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))));\n    Debug.Assert(Compare((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (new List<long>(new long[]{(long)-1L,\
    \ (long)-2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,\
    \ (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L, (long)2L,\
    \ (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)0L,\
    \ (long)0L, (long)1L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <dc9d9ada2cda4cdaa6b86e7745db7785>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <dc9d9ada2cda4cdaa6b86e7745db7785>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976335
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // I think we all remember that feeling when the result of\
    \ some long-awaited\n    // event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    // definitely worth noting down and comparing.\n\
    \    // Your task is to determine if a person correctly guessed the results of\
    \ a number of matches.\n    // You are given two arrays of scores and guesses\
    \ of equal length, where each index shows a match. \n    // Return an array of\
    \ the same length denoting how far off each guess was. If they have guessed correctly,\n\
    \    // the value is 0, and if not, the value is the absolute difference between\
    \ the guess and the score.\n    // example:\n    public static List<long> Compare(List<long>\
    \ game, List<long> guess) {\n        List<long> result = new List<long>();\n \
    \       long score = 0;\n        long diff = 0;\n        long diff2 = 0;\n   \
    \     long diff3 = 0;\n        long diff4 = 0;\n        long diff5 = 0;\n    \
    \    long diff6 = 0;\n        long diff7 = 0;\n        long diff8 = 0;\n     \
    \   long diff9 = 0;\n        long diff10 = 0;\n        long diff11 = 0;\n    \
    \    long diff12 = 0;\n        long diff13 = 0;\n        long diff14 = 0;\n  \
    \      long diff15 = 0;\n        long diff16 = 0;\n        long diff17 = 0;\n\
    \        long diff18 = 0;\n        long diff19 = 0;\n        long diff20 = 0;\n\
    \        long diff21 = 0;\n        long diff22 = 0;\n        long diff23 = 0;\n\
    \        long diff24 = 0;\n        long diff25 = 0;\n        long diff26 = 0;\n\
    \        long diff27 = 0;\n        long diff28 = 0;\n        long diff29 = 0;\n\
    \        long diff30 = 0;\n        long diff31 = 0;\n        long diff32 = 0;\n\
    \        long diff33 = 0;\n        long diff34 = 0;\n        long diff35 = 0;\n\
    \        long diff36 = 0;\n        long diff37 = 0;\n        long diff38 = 0;\n\
    \        long diff39 = 0;\n        long diff40 = 0;\n        long diff41 = 0;\n\
    \        long diff42 = 0;\n        long diff43 = 0;\n        long diff44 = 0;\n\
    \        long diff45 = 0;\n        long diff46 = 0;\n        long diff47 = 0;\n\
    \        long diff48 = 0;\n        long diff49 = 0;\n        long diff50 = 0;\n\
    \        long diff51 = 0;\n        long diff52 = 0;\n        long diff53 = 0;\n\
    \        long diff54 = 0;\n        long diff55 = 0;\n        long diff56 = 0;\n\
    \        long diff57 = 0;\n        long diff58 = 0;\n        long diff59 = 0;\n\
    \        long diff60 = 0;\n        long diff61 = 0;\n        long diff62 = 0;\n\
    \        long diff63 = 0;\n        long diff64 = 0;\n        long diff65 = 0;\n\
    \        long diff66 = 0;\n        long diff67 = 0;\n        long diff68 = 0;\n\
    \        long diff69 = 0;\n        long diff70 = 0;\n        long diff71 = 0;\n\
    \        long diff72 = 0;\n        long diff73 = 0;\n        long diff74 = 0;\n\
    \        long diff75 = 0;\n        long diff76 = 0;\n        long diff77 = 0;\n\
    \        long diff78 = 0;\n        long diff79 = 0;\n        long diff80 = 0;\n\
    \        long diff81 = 0;\n        long diff82 = 0;\n        long diff83 = 0;\n\
    \        long diff84\n    }\n    public static void Main(string[] args) {\n  \
    \  Debug.Assert(Compare((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L, (long)5L, (long)1L})), (new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)2L, (long)-2L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))));\n    Debug.Assert(Compare((new\
    \ List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L})),\
    \ (new List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L,\
    \ (long)0L}))).Equals((new List<long>(new long[]{(long)0L, (long)0L, (long)0L,\
    \ (long)0L, (long)0L, (long)0L}))));\n    Debug.Assert(Compare((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L})), (new List<long>(new long[]{(long)-1L,\
    \ (long)-2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,\
    \ (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L, (long)2L,\
    \ (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)0L,\
    \ (long)0L, (long)1L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpc7qjn8vw.cs(103,20): error CS1002: ; expected

    '
  timestamp: 1659976334
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // I think we all remember that feeling when the result of\
    \ some long-awaited\n    // event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    // definitely worth noting down and comparing.\n\
    \    // Your task is to determine if a person correctly guessed the results of\
    \ a number of matches.\n    // You are given two arrays of scores and guesses\
    \ of equal length, where each index shows a match. \n    // Return an array of\
    \ the same length denoting how far off each guess was. If they have guessed correctly,\n\
    \    // the value is 0, and if not, the value is the absolute difference between\
    \ the guess and the score.\n    // example:\n    public static List<long> Compare(List<long>\
    \ game, List<long> guess) {\n        List<long> result = new List<long>();\n \
    \       long score = 0;\n        long guess = 0;\n        foreach (var item in\
    \ game) {\n            score = item;\n            guess = guess[game.IndexOf(item)];\
    \ // this line is what makes the difference\n            result.Add(Math.Abs(guess\
    \ - score));\n        }\n        return result;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))));\n  \
    \  Debug.Assert(Compare((new List<long>(new long[]{(long)0L, (long)0L, (long)0L,\
    \ (long)0L, (long)0L, (long)0L})), (new List<long>(new long[]{(long)0L, (long)0L,\
    \ (long)0L, (long)0L, (long)0L, (long)0L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))));\n    Debug.Assert(Compare((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (new List<long>(new long[]{(long)-1L,\
    \ (long)-2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,\
    \ (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L, (long)2L,\
    \ (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)0L,\
    \ (long)0L, (long)1L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp9ey8u_m0.cs(20,14): error CS0136: A local or parameter named ''guess''
    cannot be declared in this scope because that name is used in an enclosing local
    scope to define a local or parameter

    /tmp/tmp9ey8u_m0.cs(23,21): error CS0021: Cannot apply indexing with [] to an
    expression of type ''long''

    '
  timestamp: 1659976334
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // I think we all remember that feeling when the result of\
    \ some long-awaited\n    // event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    // definitely worth noting down and comparing.\n\
    \    // Your task is to determine if a person correctly guessed the results of\
    \ a number of matches.\n    // You are given two arrays of scores and guesses\
    \ of equal length, where each index shows a match. \n    // Return an array of\
    \ the same length denoting how far off each guess was. If they have guessed correctly,\n\
    \    // the value is 0, and if not, the value is the absolute difference between\
    \ the guess and the score.\n    // example:\n    public static List<long> Compare(List<long>\
    \ game, List<long> guess) {\n        List<long> result = new List<long>();\n \
    \       long score;\n        long guess;\n        long diff;\n        bool correct\
    \ = false;\n        foreach (var item in game) {\n            score = item;\n\
    \            foreach (var item2 in guess) {\n                guess = item2;\n\
    \                diff = guess - score;\n                if (diff < 0) {\n    \
    \                result.Add(diff);\n                    correct = true;\n    \
    \                break;\n                }\n            }\n            if (correct)\
    \ {\n                break;\n            }\n        }\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Compare((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})),\
    \ (new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L,\
    \ (long)-2L}))).Equals((new List<long>(new long[]{(long)0L, (long)0L, (long)0L,\
    \ (long)0L, (long)3L, (long)3L}))));\n    Debug.Assert(Compare((new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L})), (new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))));\n\
    \    Debug.Assert(Compare((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})),\
    \ (new List<long>(new long[]{(long)-1L, (long)-2L, (long)-3L}))).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)4L, (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L,\
    \ (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)0L, (long)0L, (long)1L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp3pi1u_0x.cs(20,14): error CS0136: A local or parameter named ''guess''
    cannot be declared in this scope because that name is used in an enclosing local
    scope to define a local or parameter

    /tmp/tmp3pi1u_0x.cs(25,35): error CS1579: foreach statement cannot operate on
    variables of type ''long'' because ''long'' does not contain a public instance
    definition for ''GetEnumerator''

    /tmp/tmp3pi1u_0x.cs(25,35): error CS0165: Use of unassigned local variable ''guess''

    '
  timestamp: 1659976334
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // I think we all remember that feeling when the result of\
    \ some long-awaited\n    // event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    // definitely worth noting down and comparing.\n\
    \    // Your task is to determine if a person correctly guessed the results of\
    \ a number of matches.\n    // You are given two arrays of scores and guesses\
    \ of equal length, where each index shows a match. \n    // Return an array of\
    \ the same length denoting how far off each guess was. If they have guessed correctly,\n\
    \    // the value is 0, and if not, the value is the absolute difference between\
    \ the guess and the score.\n    // example:\n    public static List<long> Compare(List<long>\
    \ game, List<long> guess) {\n        List<long> result = new List<long>();\n \
    \       long score = 0;\n        long guess = 0;\n        long diff = 0;\n   \
    \     foreach (var item in game) {\n            score = item;\n            guess\
    \ = guess[game.IndexOf(item)]; // get the guess from the array\n            diff\
    \ = guess - score; // get the difference between the guess and the score\n   \
    \         result.Add(diff);\n        }\n        return result;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Compare((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))));\n\
    \    Debug.Assert(Compare((new List<long>(new long[]{(long)0L, (long)0L, (long)0L,\
    \ (long)0L, (long)0L, (long)0L})), (new List<long>(new long[]{(long)0L, (long)0L,\
    \ (long)0L, (long)0L, (long)0L, (long)0L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))));\n    Debug.Assert(Compare((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (new List<long>(new long[]{(long)-1L,\
    \ (long)-2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,\
    \ (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L, (long)2L,\
    \ (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)0L,\
    \ (long)0L, (long)1L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpm0r1zo6c.cs(20,14): error CS0136: A local or parameter named ''guess''
    cannot be declared in this scope because that name is used in an enclosing local
    scope to define a local or parameter

    /tmp/tmpm0r1zo6c.cs(24,21): error CS0021: Cannot apply indexing with [] to an
    expression of type ''long''

    '
  timestamp: 1659976334
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // I think we all remember that feeling when the result of\
    \ some long-awaited\n    // event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    // definitely worth noting down and comparing.\n\
    \    // Your task is to determine if a person correctly guessed the results of\
    \ a number of matches.\n    // You are given two arrays of scores and guesses\
    \ of equal length, where each index shows a match. \n    // Return an array of\
    \ the same length denoting how far off each guess was. If they have guessed correctly,\n\
    \    // the value is 0, and if not, the value is the absolute difference between\
    \ the guess and the score.\n    // example:\n    public static List<long> Compare(List<long>\
    \ game, List<long> guess) {\n        List<long> result = new List<long>();\n \
    \       long score = 0;\n        foreach (long g in game) {\n            score\
    \ += g;\n        }\n        foreach (long g in guess) {\n            score -=\
    \ g;\n        }\n        if (score == 0) {\n            result.Add(0);\n     \
    \   } else {\n            result.Add(Math.Abs(score));\n        }\n        return\
    \ result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Compare((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})),\
    \ (new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L,\
    \ (long)-2L}))).Equals((new List<long>(new long[]{(long)0L, (long)0L, (long)0L,\
    \ (long)0L, (long)3L, (long)3L}))));\n    Debug.Assert(Compare((new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L})), (new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))));\n\
    \    Debug.Assert(Compare((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})),\
    \ (new List<long>(new long[]{(long)-1L, (long)-2L, (long)-3L}))).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)4L, (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L,\
    \ (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)0L, (long)0L, (long)1L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <357fc465dee9424fab3fb52af822f636>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <357fc465dee9424fab3fb52af822f636>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976335
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // I think we all remember that feeling when the result of\
    \ some long-awaited\n    // event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    // definitely worth noting down and comparing.\n\
    \    // Your task is to determine if a person correctly guessed the results of\
    \ a number of matches.\n    // You are given two arrays of scores and guesses\
    \ of equal length, where each index shows a match. \n    // Return an array of\
    \ the same length denoting how far off each guess was. If they have guessed correctly,\n\
    \    // the value is 0, and if not, the value is the absolute difference between\
    \ the guess and the score.\n    // example:\n    public static List<long> Compare(List<long>\
    \ game, List<long> guess) {\n        List<long> result = new List<long>();\n \
    \       long score = 0;\n        long difference = 0;\n        foreach (long g\
    \ in game) {\n            score += g;\n        }\n        foreach (long g in guess)\
    \ {\n            difference += g - score;\n        }\n        result.Add(difference);\n\
    \        return result;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(Compare((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L, (long)5L, (long)1L})), (new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)2L, (long)-2L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))));\n    Debug.Assert(Compare((new\
    \ List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L})),\
    \ (new List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L,\
    \ (long)0L}))).Equals((new List<long>(new long[]{(long)0L, (long)0L, (long)0L,\
    \ (long)0L, (long)0L, (long)0L}))));\n    Debug.Assert(Compare((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L})), (new List<long>(new long[]{(long)-1L,\
    \ (long)-2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,\
    \ (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L, (long)2L,\
    \ (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)0L,\
    \ (long)0L, (long)1L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <e9b3b49e5ed044c68bfc089bb8fe3136>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <e9b3b49e5ed044c68bfc089bb8fe3136>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976335
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // I think we all remember that feeling when the result of\
    \ some long-awaited\n    // event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    // definitely worth noting down and comparing.\n\
    \    // Your task is to determine if a person correctly guessed the results of\
    \ a number of matches.\n    // You are given two arrays of scores and guesses\
    \ of equal length, where each index shows a match. \n    // Return an array of\
    \ the same length denoting how far off each guess was. If they have guessed correctly,\n\
    \    // the value is 0, and if not, the value is the absolute difference between\
    \ the guess and the score.\n    // example:\n    public static List<long> Compare(List<long>\
    \ game, List<long> guess) {\n        List<long> result = new List<long>();\n \
    \       long score = 0;\n        long guess = 0;\n        long diff = 0;\n   \
    \     long diff2 = 0;\n        foreach (long g in game) {\n            score =\
    \ g;\n            foreach (long g in guess) {\n                guess = g;\n  \
    \              diff = score - guess;\n                diff2 = Math.Abs(diff);\n\
    \                result.Add(diff2);\n            }\n        }\n        return\
    \ result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Compare((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})),\
    \ (new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L,\
    \ (long)-2L}))).Equals((new List<long>(new long[]{(long)0L, (long)0L, (long)0L,\
    \ (long)0L, (long)3L, (long)3L}))));\n    Debug.Assert(Compare((new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L})), (new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))));\n\
    \    Debug.Assert(Compare((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})),\
    \ (new List<long>(new long[]{(long)-1L, (long)-2L, (long)-3L}))).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)4L, (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L,\
    \ (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)0L, (long)0L, (long)1L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp5d8qyk5x.cs(20,14): error CS0136: A local or parameter named ''guess''
    cannot be declared in this scope because that name is used in an enclosing local
    scope to define a local or parameter

    /tmp/tmp5d8qyk5x.cs(25,32): error CS1579: foreach statement cannot operate on
    variables of type ''long'' because ''long'' does not contain a public instance
    definition for ''GetEnumerator''

    /tmp/tmp5d8qyk5x.cs(25,27): error CS0136: A local or parameter named ''g'' cannot
    be declared in this scope because that name is used in an enclosing local scope
    to define a local or parameter

    '
  timestamp: 1659976334
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // I think we all remember that feeling when the result of\
    \ some long-awaited\n    // event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    // definitely worth noting down and comparing.\n\
    \    // Your task is to determine if a person correctly guessed the results of\
    \ a number of matches.\n    // You are given two arrays of scores and guesses\
    \ of equal length, where each index shows a match. \n    // Return an array of\
    \ the same length denoting how far off each guess was. If they have guessed correctly,\n\
    \    // the value is 0, and if not, the value is the absolute difference between\
    \ the guess and the score.\n    // example:\n    public static List<long> Compare(List<long>\
    \ game, List<long> guess) {\n        List<long> result = new List<long>();\n \
    \       long score;\n        long guess;\n        long diff;\n        bool correct;\n\
    \        foreach (var item in game) {\n            score = item;\n           \
    \ guess = guess[game.IndexOf(item)]; // get the guess from the game\n        \
    \    diff = guess - score;\n            correct = guess == score;\n          \
    \  result.Add(diff * correct ? diff : Math.Abs(diff));\n        }\n        return\
    \ result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Compare((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})),\
    \ (new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L,\
    \ (long)-2L}))).Equals((new List<long>(new long[]{(long)0L, (long)0L, (long)0L,\
    \ (long)0L, (long)3L, (long)3L}))));\n    Debug.Assert(Compare((new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L})), (new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))));\n\
    \    Debug.Assert(Compare((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})),\
    \ (new List<long>(new long[]{(long)-1L, (long)-2L, (long)-3L}))).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)4L, (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L,\
    \ (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)0L, (long)0L, (long)1L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpr5hs084_.cs(20,14): error CS0136: A local or parameter named ''guess''
    cannot be declared in this scope because that name is used in an enclosing local
    scope to define a local or parameter

    /tmp/tmpr5hs084_.cs(25,21): error CS0021: Cannot apply indexing with [] to an
    expression of type ''long''

    /tmp/tmpr5hs084_.cs(28,24): error CS0019: Operator ''*'' cannot be applied to
    operands of type ''long'' and ''bool''

    /tmp/tmpr5hs084_.cs(25,21): error CS0165: Use of unassigned local variable ''guess''

    '
  timestamp: 1659976334
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // I think we all remember that feeling when the result of\
    \ some long-awaited\n    // event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    // definitely worth noting down and comparing.\n\
    \    // Your task is to determine if a person correctly guessed the results of\
    \ a number of matches.\n    // You are given two arrays of scores and guesses\
    \ of equal length, where each index shows a match. \n    // Return an array of\
    \ the same length denoting how far off each guess was. If they have guessed correctly,\n\
    \    // the value is 0, and if not, the value is the absolute difference between\
    \ the guess and the score.\n    // example:\n    public static List<long> Compare(List<long>\
    \ game, List<long> guess) {\n        // TODO: Complete this method\n        List<long>\
    \ result = new List<long>();\n        foreach (int i in game.Count) {\n      \
    \      result.Add(0);\n        }\n        foreach (int i in guess.Count) {\n \
    \           result.Add(0);\n        }\n        foreach (int i in game.Count) {\n\
    \            int j = 0;\n            while (j < guess.Count && game[i] == guess[j])\
    \ {\n                j++;\n            }\n            if (j == guess.Count) {\n\
    \                result.Add(0);\n            } else {\n                result.Add(Math.Abs(game[i]\
    \ - guess[j]));\n            }\n        }\n        return result;\n    }\n   \
    \ public static void Main(string[] args) {\n    Debug.Assert(Compare((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))));\n\
    \    Debug.Assert(Compare((new List<long>(new long[]{(long)0L, (long)0L, (long)0L,\
    \ (long)0L, (long)0L, (long)0L})), (new List<long>(new long[]{(long)0L, (long)0L,\
    \ (long)0L, (long)0L, (long)0L, (long)0L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))));\n    Debug.Assert(Compare((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (new List<long>(new long[]{(long)-1L,\
    \ (long)-2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,\
    \ (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L, (long)2L,\
    \ (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)0L,\
    \ (long)0L, (long)1L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpgabrrpja.cs(20,27): error CS1579: foreach statement cannot operate on
    variables of type ''int'' because ''int'' does not contain a public instance definition
    for ''GetEnumerator''

    /tmp/tmpgabrrpja.cs(23,27): error CS1579: foreach statement cannot operate on
    variables of type ''int'' because ''int'' does not contain a public instance definition
    for ''GetEnumerator''

    /tmp/tmpgabrrpja.cs(26,27): error CS1579: foreach statement cannot operate on
    variables of type ''int'' because ''int'' does not contain a public instance definition
    for ''GetEnumerator''

    '
  timestamp: 1659976334
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // I think we all remember that feeling when the result of\
    \ some long-awaited\n    // event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    // definitely worth noting down and comparing.\n\
    \    // Your task is to determine if a person correctly guessed the results of\
    \ a number of matches.\n    // You are given two arrays of scores and guesses\
    \ of equal length, where each index shows a match. \n    // Return an array of\
    \ the same length denoting how far off each guess was. If they have guessed correctly,\n\
    \    // the value is 0, and if not, the value is the absolute difference between\
    \ the guess and the score.\n    // example:\n    public static List<long> Compare(List<long>\
    \ game, List<long> guess) {\n        List<long> result = new List<long>();\n \
    \       long score = 0;\n        long guess = 0;\n        long diff = 0;\n   \
    \     bool correct = false;\n        foreach (var item in game) {\n          \
    \  if (guess == item) {\n                correct = true;\n            }\n    \
    \        guess = item;\n        }\n        if (correct) {\n            result.Add(0);\n\
    \        } else {\n            foreach (var item in game) {\n                diff\
    \ = item - guess;\n                result.Add(diff);\n            }\n        }\n\
    \        return result;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(Compare((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L, (long)5L, (long)1L})), (new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)2L, (long)-2L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))));\n    Debug.Assert(Compare((new\
    \ List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L})),\
    \ (new List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L,\
    \ (long)0L}))).Equals((new List<long>(new long[]{(long)0L, (long)0L, (long)0L,\
    \ (long)0L, (long)0L, (long)0L}))));\n    Debug.Assert(Compare((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L})), (new List<long>(new long[]{(long)-1L,\
    \ (long)-2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,\
    \ (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L, (long)2L,\
    \ (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)0L,\
    \ (long)0L, (long)1L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp4bbyue26.cs(20,14): error CS0136: A local or parameter named ''guess''
    cannot be declared in this scope because that name is used in an enclosing local
    scope to define a local or parameter

    /tmp/tmp4bbyue26.cs(19,14): warning CS0219: The variable ''score'' is assigned
    but its value is never used

    '
  timestamp: 1659976334
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // I think we all remember that feeling when the result of\
    \ some long-awaited\n    // event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    // definitely worth noting down and comparing.\n\
    \    // Your task is to determine if a person correctly guessed the results of\
    \ a number of matches.\n    // You are given two arrays of scores and guesses\
    \ of equal length, where each index shows a match. \n    // Return an array of\
    \ the same length denoting how far off each guess was. If they have guessed correctly,\n\
    \    // the value is 0, and if not, the value is the absolute difference between\
    \ the guess and the score.\n    // example:\n    public static List<long> Compare(List<long>\
    \ game, List<long> guess) {\n        // Your code here\n        List<long> result\
    \ = new List<long>();\n        long diff = 0;\n        foreach (long g in game)\
    \ {\n            foreach (long g in guess) {\n                diff = g - g;\n\
    \                result.Add(diff);\n            }\n        }\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Compare((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})),\
    \ (new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L,\
    \ (long)-2L}))).Equals((new List<long>(new long[]{(long)0L, (long)0L, (long)0L,\
    \ (long)0L, (long)3L, (long)3L}))));\n    Debug.Assert(Compare((new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L})), (new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))));\n\
    \    Debug.Assert(Compare((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})),\
    \ (new List<long>(new long[]{(long)-1L, (long)-2L, (long)-3L}))).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)4L, (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L,\
    \ (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)0L, (long)0L, (long)1L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp0kvzebph.cs(22,27): error CS0136: A local or parameter named ''g'' cannot
    be declared in this scope because that name is used in an enclosing local scope
    to define a local or parameter

    '
  timestamp: 1659976334
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // I think we all remember that feeling when the result of\
    \ some long-awaited\n    // event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    // definitely worth noting down and comparing.\n\
    \    // Your task is to determine if a person correctly guessed the results of\
    \ a number of matches.\n    // You are given two arrays of scores and guesses\
    \ of equal length, where each index shows a match. \n    // Return an array of\
    \ the same length denoting how far off each guess was. If they have guessed correctly,\n\
    \    // the value is 0, and if not, the value is the absolute difference between\
    \ the guess and the score.\n    // example:\n    public static List<long> Compare(List<long>\
    \ game, List<long> guess) {\n        List<long> result = new List<long>();\n \
    \       long score;\n        long guess;\n        long difference;\n        bool\
    \ correct;\n        bool found = false;\n        foreach (long g in game) {\n\
    \            foreach (long g in guess) {\n                guess = g;\n       \
    \         score = g;\n                difference = guess - score;\n          \
    \      correct = difference < 0 ? false : true;\n                found = false;\n\
    \                foreach (long g in guess) {\n                    if (g == score)\
    \ {\n                        found = true;\n                        break;\n \
    \                   }\n                }\n                if (found) {\n     \
    \               result.Add(0);\n                } else {\n                   \
    \ result.Add(difference);\n                }\n            }\n        }\n     \
    \   return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Compare((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})),\
    \ (new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L,\
    \ (long)-2L}))).Equals((new List<long>(new long[]{(long)0L, (long)0L, (long)0L,\
    \ (long)0L, (long)3L, (long)3L}))));\n    Debug.Assert(Compare((new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L})), (new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))));\n\
    \    Debug.Assert(Compare((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})),\
    \ (new List<long>(new long[]{(long)-1L, (long)-2L, (long)-3L}))).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)4L, (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L,\
    \ (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)0L, (long)0L, (long)1L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmprd9xbfr5.cs(20,14): error CS0136: A local or parameter named ''guess''
    cannot be declared in this scope because that name is used in an enclosing local
    scope to define a local or parameter

    /tmp/tmprd9xbfr5.cs(25,32): error CS1579: foreach statement cannot operate on
    variables of type ''long'' because ''long'' does not contain a public instance
    definition for ''GetEnumerator''

    /tmp/tmprd9xbfr5.cs(25,27): error CS0136: A local or parameter named ''g'' cannot
    be declared in this scope because that name is used in an enclosing local scope
    to define a local or parameter

    /tmp/tmprd9xbfr5.cs(31,36): error CS1579: foreach statement cannot operate on
    variables of type ''long'' because ''long'' does not contain a public instance
    definition for ''GetEnumerator''

    /tmp/tmprd9xbfr5.cs(31,31): error CS0136: A local or parameter named ''g'' cannot
    be declared in this scope because that name is used in an enclosing local scope
    to define a local or parameter

    /tmp/tmprd9xbfr5.cs(25,32): error CS0165: Use of unassigned local variable ''guess''

    '
  timestamp: 1659976334
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // I think we all remember that feeling when the result of\
    \ some long-awaited\n    // event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    // definitely worth noting down and comparing.\n\
    \    // Your task is to determine if a person correctly guessed the results of\
    \ a number of matches.\n    // You are given two arrays of scores and guesses\
    \ of equal length, where each index shows a match. \n    // Return an array of\
    \ the same length denoting how far off each guess was. If they have guessed correctly,\n\
    \    // the value is 0, and if not, the value is the absolute difference between\
    \ the guess and the score.\n    // example:\n    public static List<long> Compare(List<long>\
    \ game, List<long> guess) {\n        List<long> result = new List<long>();\n \
    \       long score;\n        long guess;\n        long diff;\n        bool correct\
    \ = false;\n        foreach (var item in game) {\n            score = item;\n\
    \            guess = guess[game.IndexOf(item)]; // guess is now the index of the\
    \ item in the game array\n            diff = guess - score; // diff is now the\
    \ difference between the guess and the score\n            if (diff < 0) {\n  \
    \              diff = -diff;\n            }\n            result.Add(diff);\n \
    \           if (diff == 0) {\n                correct = true;\n            }\n\
    \        }\n        if (!correct) {\n            foreach (var item in guess) {\n\
    \                score = item;\n                guess = guess[game.IndexOf(item)];\
    \ // guess is now the index of the item in the game array\n                diff\
    \ = guess - score; // diff is now the difference between the guess and the score\n\
    \                if (diff < 0) {\n                    diff = -diff;\n        \
    \        }\n                result.Add(diff);\n            }\n        }\n    \
    \    return result;\n    }\n    public static void Main(string[] args) {\n   \
    \ Debug.Assert(Compare((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L, (long)5L, (long)1L})), (new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)2L, (long)-2L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))));\n    Debug.Assert(Compare((new\
    \ List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L})),\
    \ (new List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L,\
    \ (long)0L}))).Equals((new List<long>(new long[]{(long)0L, (long)0L, (long)0L,\
    \ (long)0L, (long)0L, (long)0L}))));\n    Debug.Assert(Compare((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L})), (new List<long>(new long[]{(long)-1L,\
    \ (long)-2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,\
    \ (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L, (long)2L,\
    \ (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)0L,\
    \ (long)0L, (long)1L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmppdhc331f.cs(20,14): error CS0136: A local or parameter named ''guess''
    cannot be declared in this scope because that name is used in an enclosing local
    scope to define a local or parameter

    /tmp/tmppdhc331f.cs(25,21): error CS0021: Cannot apply indexing with [] to an
    expression of type ''long''

    /tmp/tmppdhc331f.cs(36,34): error CS1579: foreach statement cannot operate on
    variables of type ''long'' because ''long'' does not contain a public instance
    definition for ''GetEnumerator''

    /tmp/tmppdhc331f.cs(25,21): error CS0165: Use of unassigned local variable ''guess''

    '
  timestamp: 1659976335
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // I think we all remember that feeling when the result of\
    \ some long-awaited\n    // event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    // definitely worth noting down and comparing.\n\
    \    // Your task is to determine if a person correctly guessed the results of\
    \ a number of matches.\n    // You are given two arrays of scores and guesses\
    \ of equal length, where each index shows a match. \n    // Return an array of\
    \ the same length denoting how far off each guess was. If they have guessed correctly,\n\
    \    // the value is 0, and if not, the value is the absolute difference between\
    \ the guess and the score.\n    // example:\n    public static List<long> Compare(List<long>\
    \ game, List<long> guess) {\n        List<long> result = new List<long>();\n \
    \       foreach (long g in game) {\n            long g2 = g;\n            long\
    \ g3 = g;\n            long g4 = g;\n            long g5 = g;\n            long\
    \ g6 = g;\n            long g7 = g;\n            long g8 = g;\n            long\
    \ g9 = g;\n            long g10 = g;\n            long g11 = g;\n            long\
    \ g12 = g;\n            long g13 = g;\n            long g14 = g;\n           \
    \ long g15 = g;\n            long g16 = g;\n            long g17 = g;\n      \
    \      long g18 = g;\n            long g19 = g;\n            long g20 = g;\n \
    \           long g21 = g;\n            long g22 = g;\n            long g23 = g;\n\
    \            long g24 = g;\n            long g25 = g;\n            long g26 =\
    \ g;\n            long g27 = g;\n            long g28 = g;\n            long g29\
    \ = g;\n            long g30 = g;\n            long g31 = g;\n            long\
    \ g32 = g;\n            long g33 = g;\n            long g34 = g;\n           \
    \ long g35 = g;\n            long g36 = g;\n            long g37 = g;\n      \
    \      long g38 = g;\n            long g39 = g;\n            long g40 = g;\n \
    \           long g41 = g;\n            long g42 = g;\n            long g43 = g;\n\
    \            long g44 = g;\n            long g45 = g;\n            long g46 =\
    \ g;\n            long g47 = g;\n            long g48 = g;\n            long g49\
    \ = g;\n            long g50 = g;\n            long g51 = g;\n            long\
    \ g52 = g;\n            long g53 = g;\n            long g54 = g;\n           \
    \ long g55 = g;\n            long g56 = g;\n            long g57 = g;\n      \
    \      long g58 = g;\n            long g59 = g;\n            long g60 = g;\n \
    \           long g61 = g;\n            long g62 = g;\n            long g63 = g;\n\
    \            long g64 = g;\n            long g65 = g;\n            long g66 =\
    \ g;\n            long g67 = g;\n            long g68 = g;\n            long g69\
    \ = g;\n            long g70 = g;\n\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))));\n  \
    \  Debug.Assert(Compare((new List<long>(new long[]{(long)0L, (long)0L, (long)0L,\
    \ (long)0L, (long)0L, (long)0L})), (new List<long>(new long[]{(long)0L, (long)0L,\
    \ (long)0L, (long)0L, (long)0L, (long)0L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))));\n    Debug.Assert(Compare((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (new List<long>(new long[]{(long)-1L,\
    \ (long)-2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,\
    \ (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L, (long)2L,\
    \ (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)0L,\
    \ (long)0L, (long)1L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpgfjx41ni.cs(91,5): error CS0106: The modifier ''public'' is not valid
    for this item

    /tmp/tmpgfjx41ni.cs(98,2): error CS1513: } expected

    '
  timestamp: 1659976335
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // I think we all remember that feeling when the result of\
    \ some long-awaited\n    // event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    // definitely worth noting down and comparing.\n\
    \    // Your task is to determine if a person correctly guessed the results of\
    \ a number of matches.\n    // You are given two arrays of scores and guesses\
    \ of equal length, where each index shows a match. \n    // Return an array of\
    \ the same length denoting how far off each guess was. If they have guessed correctly,\n\
    \    // the value is 0, and if not, the value is the absolute difference between\
    \ the guess and the score.\n    // example:\n    public static List<long> Compare(List<long>\
    \ game, List<long> guess) {\n        List<long> result = new List<long>();\n \
    \       long score;\n        long guess;\n        long diff;\n        bool correct;\n\
    \        foreach (int i in game.Count) {\n            score = game[i];\n     \
    \       guess = guess[i];\n            diff = guess - score;\n            correct\
    \ = guess == score;\n            result.Add(diff < 0 ? diff : diff * -1);\n  \
    \      }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))));\n  \
    \  Debug.Assert(Compare((new List<long>(new long[]{(long)0L, (long)0L, (long)0L,\
    \ (long)0L, (long)0L, (long)0L})), (new List<long>(new long[]{(long)0L, (long)0L,\
    \ (long)0L, (long)0L, (long)0L, (long)0L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))));\n    Debug.Assert(Compare((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (new List<long>(new long[]{(long)-1L,\
    \ (long)-2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,\
    \ (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L, (long)2L,\
    \ (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)0L,\
    \ (long)0L, (long)1L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp0258k92g.cs(20,14): error CS0136: A local or parameter named ''guess''
    cannot be declared in this scope because that name is used in an enclosing local
    scope to define a local or parameter

    /tmp/tmp0258k92g.cs(23,27): error CS1579: foreach statement cannot operate on
    variables of type ''int'' because ''int'' does not contain a public instance definition
    for ''GetEnumerator''

    /tmp/tmp0258k92g.cs(25,21): error CS0021: Cannot apply indexing with [] to an
    expression of type ''long''

    /tmp/tmp0258k92g.cs(25,21): error CS0165: Use of unassigned local variable ''guess''

    '
  timestamp: 1659976335
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // I think we all remember that feeling when the result of\
    \ some long-awaited\n    // event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    // definitely worth noting down and comparing.\n\
    \    // Your task is to determine if a person correctly guessed the results of\
    \ a number of matches.\n    // You are given two arrays of scores and guesses\
    \ of equal length, where each index shows a match. \n    // Return an array of\
    \ the same length denoting how far off each guess was. If they have guessed correctly,\n\
    \    // the value is 0, and if not, the value is the absolute difference between\
    \ the guess and the score.\n    // example:\n    public static List<long> Compare(List<long>\
    \ game, List<long> guess) {\n        var result = new List<long>();\n        foreach\
    \ (var g in game) {\n            var gDiff = Math.Abs(g - guess);\n          \
    \  result.Add(gDiff);\n        }\n        return result;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))));\n  \
    \  Debug.Assert(Compare((new List<long>(new long[]{(long)0L, (long)0L, (long)0L,\
    \ (long)0L, (long)0L, (long)0L})), (new List<long>(new long[]{(long)0L, (long)0L,\
    \ (long)0L, (long)0L, (long)0L, (long)0L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))));\n    Debug.Assert(Compare((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (new List<long>(new long[]{(long)-1L,\
    \ (long)-2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,\
    \ (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L, (long)2L,\
    \ (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)0L,\
    \ (long)0L, (long)1L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpq_537y40.cs(20,34): error CS0019: Operator ''-'' cannot be applied to
    operands of type ''long'' and ''List<long>''

    '
  timestamp: 1659976335
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // I think we all remember that feeling when the result of\
    \ some long-awaited\n    // event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    // definitely worth noting down and comparing.\n\
    \    // Your task is to determine if a person correctly guessed the results of\
    \ a number of matches.\n    // You are given two arrays of scores and guesses\
    \ of equal length, where each index shows a match. \n    // Return an array of\
    \ the same length denoting how far off each guess was. If they have guessed correctly,\n\
    \    // the value is 0, and if not, the value is the absolute difference between\
    \ the guess and the score.\n    // example:\n    public static List<long> Compare(List<long>\
    \ game, List<long> guess) {\n        var result = new List<long>();\n        foreach\
    \ (var item in game) {\n            var guess = guess.FirstOrDefault(x => x ==\
    \ item);\n            if (guess == null) {\n                result.Add(0);\n \
    \           } else {\n                result.Add(Math.Abs(item - guess));\n  \
    \          }\n        }\n        return result;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))));\n  \
    \  Debug.Assert(Compare((new List<long>(new long[]{(long)0L, (long)0L, (long)0L,\
    \ (long)0L, (long)0L, (long)0L})), (new List<long>(new long[]{(long)0L, (long)0L,\
    \ (long)0L, (long)0L, (long)0L, (long)0L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))));\n    Debug.Assert(Compare((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (new List<long>(new long[]{(long)-1L,\
    \ (long)-2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,\
    \ (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L, (long)2L,\
    \ (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)0L,\
    \ (long)0L, (long)1L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpmsgd8qtw.cs(20,17): error CS0136: A local or parameter named ''guess''
    cannot be declared in this scope because that name is used in an enclosing local
    scope to define a local or parameter

    /tmp/tmpmsgd8qtw.cs(20,25): error CS0841: Cannot use local variable ''guess''
    before it is declared

    '
  timestamp: 1659976335
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // I think we all remember that feeling when the result of\
    \ some long-awaited\n    // event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    // definitely worth noting down and comparing.\n\
    \    // Your task is to determine if a person correctly guessed the results of\
    \ a number of matches.\n    // You are given two arrays of scores and guesses\
    \ of equal length, where each index shows a match. \n    // Return an array of\
    \ the same length denoting how far off each guess was. If they have guessed correctly,\n\
    \    // the value is 0, and if not, the value is the absolute difference between\
    \ the guess and the score.\n    // example:\n    public static List<long> Compare(List<long>\
    \ game, List<long> guess) {\n        List<long> result = new List<long>();\n \
    \       foreach (var item in game) {\n            if (guess.Contains(item)) {\n\
    \                result.Add(0);\n            } else {\n                result.Add(Math.Abs(item\
    \ - guess.Single(x => x == item)));\n            }\n        }\n        return\
    \ result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Compare((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})),\
    \ (new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L,\
    \ (long)-2L}))).Equals((new List<long>(new long[]{(long)0L, (long)0L, (long)0L,\
    \ (long)0L, (long)3L, (long)3L}))));\n    Debug.Assert(Compare((new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L})), (new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))));\n\
    \    Debug.Assert(Compare((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})),\
    \ (new List<long>(new long[]{(long)-1L, (long)-2L, (long)-3L}))).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)4L, (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L,\
    \ (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)0L, (long)0L, (long)1L}))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.InvalidOperationException: Sequence contains\
    \ no matching element\n  at System.Linq.Enumerable.Single[TSource] (System.Collections.Generic.IEnumerable`1[T]\
    \ source, System.Func`2[T,TResult] predicate) [0x00070] in <e540098dd111461e919c5863f6975c29>:0\
    \ \n  at Problem.Compare (System.Collections.Generic.List`1[T] game, System.Collections.Generic.List`1[T]\
    \ guess) [0x00043] in <6f0afd80793846fbb5b09813fb44c3ee>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x0002d] in <6f0afd80793846fbb5b09813fb44c3ee>:0 \n\
    [ERROR] FATAL UNHANDLED EXCEPTION: System.InvalidOperationException: Sequence\
    \ contains no matching element\n  at System.Linq.Enumerable.Single[TSource] (System.Collections.Generic.IEnumerable`1[T]\
    \ source, System.Func`2[T,TResult] predicate) [0x00070] in <e540098dd111461e919c5863f6975c29>:0\
    \ \n  at Problem.Compare (System.Collections.Generic.List`1[T] game, System.Collections.Generic.List`1[T]\
    \ guess) [0x00043] in <6f0afd80793846fbb5b09813fb44c3ee>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x0002d] in <6f0afd80793846fbb5b09813fb44c3ee>:0 \n"
  stdout: ''
  timestamp: 1659976335
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // I think we all remember that feeling when the result of\
    \ some long-awaited\n    // event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    // definitely worth noting down and comparing.\n\
    \    // Your task is to determine if a person correctly guessed the results of\
    \ a number of matches.\n    // You are given two arrays of scores and guesses\
    \ of equal length, where each index shows a match. \n    // Return an array of\
    \ the same length denoting how far off each guess was. If they have guessed correctly,\n\
    \    // the value is 0, and if not, the value is the absolute difference between\
    \ the guess and the score.\n    // example:\n    public static List<long> Compare(List<long>\
    \ game, List<long> guess) {\n        List<long> result = new List<long>();\n \
    \       long diff = 0;\n        foreach (long score in game) {\n            long\
    \ guess = guess.FirstOrDefault();\n            diff = score - guess;\n       \
    \     if (diff < 0) {\n                result.Add(diff);\n            }\n    \
    \        else {\n                result.Add(diff);\n            }\n        }\n\
    \        return result;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(Compare((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L, (long)5L, (long)1L})), (new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)2L, (long)-2L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))));\n    Debug.Assert(Compare((new\
    \ List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L})),\
    \ (new List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L,\
    \ (long)0L}))).Equals((new List<long>(new long[]{(long)0L, (long)0L, (long)0L,\
    \ (long)0L, (long)0L, (long)0L}))));\n    Debug.Assert(Compare((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L})), (new List<long>(new long[]{(long)-1L,\
    \ (long)-2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,\
    \ (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L, (long)2L,\
    \ (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)0L,\
    \ (long)0L, (long)1L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpwxq1atre.cs(21,18): error CS0136: A local or parameter named ''guess''
    cannot be declared in this scope because that name is used in an enclosing local
    scope to define a local or parameter

    /tmp/tmpwxq1atre.cs(21,32): error CS1061: ''long'' does not contain a definition
    for ''FirstOrDefault'' and no accessible extension method ''FirstOrDefault'' accepting
    a first argument of type ''long'' could be found (are you missing a using directive
    or an assembly reference?)

    /tmp/tmpwxq1atre.cs(21,26): error CS0165: Use of unassigned local variable ''guess''

    '
  timestamp: 1659976335
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // I think we all remember that feeling when the result of\
    \ some long-awaited\n    // event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    // definitely worth noting down and comparing.\n\
    \    // Your task is to determine if a person correctly guessed the results of\
    \ a number of matches.\n    // You are given two arrays of scores and guesses\
    \ of equal length, where each index shows a match. \n    // Return an array of\
    \ the same length denoting how far off each guess was. If they have guessed correctly,\n\
    \    // the value is 0, and if not, the value is the absolute difference between\
    \ the guess and the score.\n    // example:\n    public static List<long> Compare(List<long>\
    \ game, List<long> guess) {\n        List<long> result = new List<long>();\n \
    \       long score;\n        long guess;\n        long diff;\n        for (int\
    \ i = 0; i < game.Count; i++) {\n            score = game[i];\n            guess\
    \ = guess[i];\n            diff = guess - score;\n            result.Add(diff);\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))));\n  \
    \  Debug.Assert(Compare((new List<long>(new long[]{(long)0L, (long)0L, (long)0L,\
    \ (long)0L, (long)0L, (long)0L})), (new List<long>(new long[]{(long)0L, (long)0L,\
    \ (long)0L, (long)0L, (long)0L, (long)0L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))));\n    Debug.Assert(Compare((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (new List<long>(new long[]{(long)-1L,\
    \ (long)-2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,\
    \ (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L, (long)2L,\
    \ (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)0L,\
    \ (long)0L, (long)1L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp9wgdilz6.cs(20,14): error CS0136: A local or parameter named ''guess''
    cannot be declared in this scope because that name is used in an enclosing local
    scope to define a local or parameter

    /tmp/tmp9wgdilz6.cs(24,21): error CS0021: Cannot apply indexing with [] to an
    expression of type ''long''

    /tmp/tmp9wgdilz6.cs(24,21): error CS0165: Use of unassigned local variable ''guess''

    '
  timestamp: 1659976335
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // I think we all remember that feeling when the result of\
    \ some long-awaited\n    // event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    // definitely worth noting down and comparing.\n\
    \    // Your task is to determine if a person correctly guessed the results of\
    \ a number of matches.\n    // You are given two arrays of scores and guesses\
    \ of equal length, where each index shows a match. \n    // Return an array of\
    \ the same length denoting how far off each guess was. If they have guessed correctly,\n\
    \    // the value is 0, and if not, the value is the absolute difference between\
    \ the guess and the score.\n    // example:\n    public static List<long> Compare(List<long>\
    \ game, List<long> guess) {\n        List<long> result = new List<long>();\n \
    \       long score = 0;\n        long guess = 0;\n        long difference = 0;\n\
    \        foreach (long g in game) {\n            score = g;\n            foreach\
    \ (long g in guess) {\n                guess = g;\n                difference\
    \ = Math.Abs(guess - score);\n                result.Add(difference);\n      \
    \      }\n        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))));\n  \
    \  Debug.Assert(Compare((new List<long>(new long[]{(long)0L, (long)0L, (long)0L,\
    \ (long)0L, (long)0L, (long)0L})), (new List<long>(new long[]{(long)0L, (long)0L,\
    \ (long)0L, (long)0L, (long)0L, (long)0L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))));\n    Debug.Assert(Compare((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (new List<long>(new long[]{(long)-1L,\
    \ (long)-2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,\
    \ (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L, (long)2L,\
    \ (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)0L,\
    \ (long)0L, (long)1L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpfhnw02jn.cs(20,14): error CS0136: A local or parameter named ''guess''
    cannot be declared in this scope because that name is used in an enclosing local
    scope to define a local or parameter

    /tmp/tmpfhnw02jn.cs(24,32): error CS1579: foreach statement cannot operate on
    variables of type ''long'' because ''long'' does not contain a public instance
    definition for ''GetEnumerator''

    /tmp/tmpfhnw02jn.cs(24,27): error CS0136: A local or parameter named ''g'' cannot
    be declared in this scope because that name is used in an enclosing local scope
    to define a local or parameter

    '
  timestamp: 1659976335
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // I think we all remember that feeling when the result of\
    \ some long-awaited\n    // event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    // definitely worth noting down and comparing.\n\
    \    // Your task is to determine if a person correctly guessed the results of\
    \ a number of matches.\n    // You are given two arrays of scores and guesses\
    \ of equal length, where each index shows a match. \n    // Return an array of\
    \ the same length denoting how far off each guess was. If they have guessed correctly,\n\
    \    // the value is 0, and if not, the value is the absolute difference between\
    \ the guess and the score.\n    // example:\n    public static List<long> Compare(List<long>\
    \ game, List<long> guess) {\n        List<long> result = new List<long>();\n \
    \       long score;\n        long guess;\n        long diff;\n        bool correct;\n\
    \        bool same;\n        bool sameIndex;\n        bool sameScore;\n      \
    \  bool sameGuesses;\n        bool sameIndex;\n        bool sameScore;\n     \
    \   bool sameGuesses;\n        bool sameIndex;\n        bool sameScore;\n    \
    \    bool sameGuesses;\n        bool sameIndex;\n        bool sameScore;\n   \
    \     bool sameGuesses;\n        bool sameIndex;\n        bool sameScore;\n  \
    \      bool sameGuesses;\n        bool sameIndex;\n        bool sameScore;\n \
    \       bool sameGuesses;\n        bool sameIndex;\n        bool sameScore;\n\
    \        bool sameGuesses;\n        bool sameIndex;\n        bool sameScore;\n\
    \        bool sameGuesses;\n        bool sameIndex;\n        bool sameScore;\n\
    \        bool sameGuesses;\n        bool sameIndex;\n        bool sameScore;\n\
    \        bool sameGuesses;\n        bool sameIndex;\n        bool sameScore;\n\
    \        bool sameGuesses;\n        bool sameIndex;\n        bool sameScore;\n\
    \        bool sameGuesses;\n        bool sameIndex;\n        bool sameScore;\n\
    \        bool sameGuesses;\n        bool sameIndex;\n        bool sameScore;\n\
    \        bool sameGuesses;\n        bool sameIndex;\n        bool sameScore;\n\
    \        bool sameGuesses;\n        bool sameIndex;\n        bool sameScore;\n\
    \        bool sameGuesses;\n        bool sameIndex;\n        bool sameScore;\n\
    \        bool sameGuesses;\n        bool sameIndex;\n        bool sameScore;\n\
    \        bool sameGuesses;\n        bool sameIndex;\n        bool sameScore;\n\
    \        bool sameGuesses;\n        bool sameIndex;\n        bool sameScore;\n\
    \        bool sameGuesses;\n        bool sameIndex;\n        bool sameScore;\n\
    \        bool sameGuesses;\n        bool sameIndex;\n        bool sameScore;\n\
    \        bool sameGuesses;\n        bool sameIndex;\n        bool sameScore;\n\
    \        bool sameGuesses;\n        bool sameIndex;\n        bool sameScore;\n\
    \        bool sameGuesses;\n        bool sameIndex;\n        bool sameScore;\n\
    \        bool sameGuesses;\n        bool \n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))));\n  \
    \  Debug.Assert(Compare((new List<long>(new long[]{(long)0L, (long)0L, (long)0L,\
    \ (long)0L, (long)0L, (long)0L})), (new List<long>(new long[]{(long)0L, (long)0L,\
    \ (long)0L, (long)0L, (long)0L, (long)0L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))));\n    Debug.Assert(Compare((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (new List<long>(new long[]{(long)-1L,\
    \ (long)-2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,\
    \ (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L, (long)2L,\
    \ (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)0L,\
    \ (long)0L, (long)1L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp5mmkixvf.cs(99,13): error CS1001: Identifier expected

    /tmp/tmp5mmkixvf.cs(99,13): error CS1002: ; expected

    '
  timestamp: 1659976335
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // I think we all remember that feeling when the result of\
    \ some long-awaited\n    // event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    // definitely worth noting down and comparing.\n\
    \    // Your task is to determine if a person correctly guessed the results of\
    \ a number of matches.\n    // You are given two arrays of scores and guesses\
    \ of equal length, where each index shows a match. \n    // Return an array of\
    \ the same length denoting how far off each guess was. If they have guessed correctly,\n\
    \    // the value is 0, and if not, the value is the absolute difference between\
    \ the guess and the score.\n    // example:\n    public static List<long> Compare(List<long>\
    \ game, List<long> guess) {\n        List<long> result = new List<long>();\n \
    \       long score = 0;\n        long guess = 0;\n        long diff = 0;\n   \
    \     foreach (long g in game) {\n            score += g;\n        }\n       \
    \ foreach (long g in guess) {\n            guess += g;\n        }\n        diff\
    \ = score - guess;\n        if (diff < 0) {\n            diff = -diff;\n     \
    \   }\n        result.Add(diff);\n        return result;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))));\n  \
    \  Debug.Assert(Compare((new List<long>(new long[]{(long)0L, (long)0L, (long)0L,\
    \ (long)0L, (long)0L, (long)0L})), (new List<long>(new long[]{(long)0L, (long)0L,\
    \ (long)0L, (long)0L, (long)0L, (long)0L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))));\n    Debug.Assert(Compare((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (new List<long>(new long[]{(long)-1L,\
    \ (long)-2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,\
    \ (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L, (long)2L,\
    \ (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)0L,\
    \ (long)0L, (long)1L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpcmb0v9ls.cs(20,14): error CS0136: A local or parameter named ''guess''
    cannot be declared in this scope because that name is used in an enclosing local
    scope to define a local or parameter

    /tmp/tmpcmb0v9ls.cs(25,28): error CS1579: foreach statement cannot operate on
    variables of type ''long'' because ''long'' does not contain a public instance
    definition for ''GetEnumerator''

    '
  timestamp: 1659976335
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // I think we all remember that feeling when the result of\
    \ some long-awaited\n    // event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    // definitely worth noting down and comparing.\n\
    \    // Your task is to determine if a person correctly guessed the results of\
    \ a number of matches.\n    // You are given two arrays of scores and guesses\
    \ of equal length, where each index shows a match. \n    // Return an array of\
    \ the same length denoting how far off each guess was. If they have guessed correctly,\n\
    \    // the value is 0, and if not, the value is the absolute difference between\
    \ the guess and the score.\n    // example:\n    public static List<long> Compare(List<long>\
    \ game, List<long> guess) {\n        List<long> result = new List<long>();\n \
    \       long score;\n        long guess;\n        long diff;\n        long diffAbs;\n\
    \        bool correct;\n        bool correctGuess;\n        bool correctScore;\n\
    \        bool correctScoreGuess;\n        bool correctScoreGuessAbs;\n       \
    \ bool correctScoreGuessAbsAbs;\n        bool correctScoreGuessAbsAbsAbs;\n  \
    \      bool correctScoreGuessAbsAbsAbsAbs;\n        bool correctScoreGuessAbsAbsAbsAbsAbs;\n\
    \        bool correctScoreGuessAbsAbsAbsAbsAbsAbs;\n        bool correctScoreGuessAbsAbsAbsAbsAbsAbsAbs;\n\
    \        bool correctScoreGuessAbsAbsAbsAbsAbsAbsAbsAbs;\n        bool correctScoreGuessAbsAbsAbsAbsAbsAbsAbsAbs;\n\
    \        bool correctScoreGuessAbsAbsAbsAbsAbsAbsAbsAbsAbs;\n        bool correctScoreGuessAbsAbsAbsAbsAbsAbsAbsAbsAbsAbs;\n\
    \        bool correctScoreGuessAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbs;\n       \
    \ bool correctScoreGuessAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbs;\n        bool\
    \ correctScoreGuessAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbs;\n        bool correctScoreGuessAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbs;\n\
    \        bool correctScoreGuessAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbs;\n\
    \        bool correctScoreGuessAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbs;\n\
    \        bool correctScoreGuessAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbs\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(Compare((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))));\n\
    \    Debug.Assert(Compare((new List<long>(new long[]{(long)0L, (long)0L, (long)0L,\
    \ (long)0L, (long)0L, (long)0L})), (new List<long>(new long[]{(long)0L, (long)0L,\
    \ (long)0L, (long)0L, (long)0L, (long)0L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))));\n    Debug.Assert(Compare((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (new List<long>(new long[]{(long)-1L,\
    \ (long)-2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,\
    \ (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L, (long)2L,\
    \ (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)0L,\
    \ (long)0L, (long)1L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpoue_d8xx.cs(44,70): error CS1002: ; expected

    '
  timestamp: 1659976335
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // I think we all remember that feeling when the result of\
    \ some long-awaited\n    // event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    // definitely worth noting down and comparing.\n\
    \    // Your task is to determine if a person correctly guessed the results of\
    \ a number of matches.\n    // You are given two arrays of scores and guesses\
    \ of equal length, where each index shows a match. \n    // Return an array of\
    \ the same length denoting how far off each guess was. If they have guessed correctly,\n\
    \    // the value is 0, and if not, the value is the absolute difference between\
    \ the guess and the score.\n    // example:\n    public static List<long> Compare(List<long>\
    \ game, List<long> guess) {\n        List<long> result = new List<long>();\n \
    \       foreach (long score in game) {\n            long guess = guess.FirstOrDefault(x\
    \ => x == score);\n            if (guess == score) {\n                result.Add(0);\n\
    \            } else {\n                result.Add(Math.Abs(guess - score));\n\
    \            }\n        }\n        return result;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))));\n  \
    \  Debug.Assert(Compare((new List<long>(new long[]{(long)0L, (long)0L, (long)0L,\
    \ (long)0L, (long)0L, (long)0L})), (new List<long>(new long[]{(long)0L, (long)0L,\
    \ (long)0L, (long)0L, (long)0L, (long)0L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))));\n    Debug.Assert(Compare((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (new List<long>(new long[]{(long)-1L,\
    \ (long)-2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,\
    \ (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L, (long)2L,\
    \ (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)0L,\
    \ (long)0L, (long)1L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp6jtsi3yw.cs(20,18): error CS0136: A local or parameter named ''guess''
    cannot be declared in this scope because that name is used in an enclosing local
    scope to define a local or parameter

    /tmp/tmp6jtsi3yw.cs(20,32): error CS1061: ''long'' does not contain a definition
    for ''FirstOrDefault'' and no accessible extension method ''FirstOrDefault'' accepting
    a first argument of type ''long'' could be found (are you missing a using directive
    or an assembly reference?)

    /tmp/tmp6jtsi3yw.cs(20,26): error CS0165: Use of unassigned local variable ''guess''

    '
  timestamp: 1659976335
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // I think we all remember that feeling when the result of\
    \ some long-awaited\n    // event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    // definitely worth noting down and comparing.\n\
    \    // Your task is to determine if a person correctly guessed the results of\
    \ a number of matches.\n    // You are given two arrays of scores and guesses\
    \ of equal length, where each index shows a match. \n    // Return an array of\
    \ the same length denoting how far off each guess was. If they have guessed correctly,\n\
    \    // the value is 0, and if not, the value is the absolute difference between\
    \ the guess and the score.\n    // example:\n    public static List<long> Compare(List<long>\
    \ game, List<long> guess) {\n        // TODO: Implement this method\n        List<long>\
    \ result = new List<long>();\n        long score = 0;\n        long guess = 0;\n\
    \        long diff = 0;\n        foreach (var item in game) {\n            score\
    \ = item;\n            guess = guess[game.IndexOf(item)]; // guess is index of\
    \ item in game\n            diff = guess - score;\n            result.Add(diff);\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))));\n  \
    \  Debug.Assert(Compare((new List<long>(new long[]{(long)0L, (long)0L, (long)0L,\
    \ (long)0L, (long)0L, (long)0L})), (new List<long>(new long[]{(long)0L, (long)0L,\
    \ (long)0L, (long)0L, (long)0L, (long)0L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))));\n    Debug.Assert(Compare((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (new List<long>(new long[]{(long)-1L,\
    \ (long)-2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,\
    \ (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L, (long)2L,\
    \ (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)0L,\
    \ (long)0L, (long)1L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpxttuy_wa.cs(21,14): error CS0136: A local or parameter named ''guess''
    cannot be declared in this scope because that name is used in an enclosing local
    scope to define a local or parameter

    /tmp/tmpxttuy_wa.cs(25,21): error CS0021: Cannot apply indexing with [] to an
    expression of type ''long''

    '
  timestamp: 1659976335
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // I think we all remember that feeling when the result of\
    \ some long-awaited\n    // event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    // definitely worth noting down and comparing.\n\
    \    // Your task is to determine if a person correctly guessed the results of\
    \ a number of matches.\n    // You are given two arrays of scores and guesses\
    \ of equal length, where each index shows a match. \n    // Return an array of\
    \ the same length denoting how far off each guess was. If they have guessed correctly,\n\
    \    // the value is 0, and if not, the value is the absolute difference between\
    \ the guess and the score.\n    // example:\n    public static List<long> Compare(List<long>\
    \ game, List<long> guess) {\n        List<long> result = new List<long>();\n \
    \       long score = 0;\n        long difference = 0;\n        foreach (long guess\
    \ in guess) {\n            score = game.Sum(x => x);\n            difference =\
    \ guess - score;\n            result.Add(difference);\n        }\n        return\
    \ result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Compare((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})),\
    \ (new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L,\
    \ (long)-2L}))).Equals((new List<long>(new long[]{(long)0L, (long)0L, (long)0L,\
    \ (long)0L, (long)3L, (long)3L}))));\n    Debug.Assert(Compare((new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L})), (new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))));\n\
    \    Debug.Assert(Compare((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})),\
    \ (new List<long>(new long[]{(long)-1L, (long)-2L, (long)-3L}))).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)4L, (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L,\
    \ (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)0L, (long)0L, (long)1L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpdo0xoxe9.cs(21,23): error CS0136: A local or parameter named ''guess''
    cannot be declared in this scope because that name is used in an enclosing local
    scope to define a local or parameter

    '
  timestamp: 1659976335
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // I think we all remember that feeling when the result of\
    \ some long-awaited\n    // event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    // definitely worth noting down and comparing.\n\
    \    // Your task is to determine if a person correctly guessed the results of\
    \ a number of matches.\n    // You are given two arrays of scores and guesses\
    \ of equal length, where each index shows a match. \n    // Return an array of\
    \ the same length denoting how far off each guess was. If they have guessed correctly,\n\
    \    // the value is 0, and if not, the value is the absolute difference between\
    \ the guess and the score.\n    // example:\n    public static List<long> Compare(List<long>\
    \ game, List<long> guess) {\n        List<long> result = new List<long>();\n \
    \       long score = 0;\n        long guess = 0;\n        long difference = 0;\n\
    \        foreach (var item in game) {\n            score = item;\n           \
    \ guess = guess[game.IndexOf(item)]; // get the guess from the guess array\n \
    \           difference = guess - score; // get the difference between the guess\
    \ and the score\n            result.Add(difference); // add the difference to\
    \ the result array\n        }\n        return result;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))));\n  \
    \  Debug.Assert(Compare((new List<long>(new long[]{(long)0L, (long)0L, (long)0L,\
    \ (long)0L, (long)0L, (long)0L})), (new List<long>(new long[]{(long)0L, (long)0L,\
    \ (long)0L, (long)0L, (long)0L, (long)0L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))));\n    Debug.Assert(Compare((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (new List<long>(new long[]{(long)-1L,\
    \ (long)-2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,\
    \ (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L, (long)2L,\
    \ (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)0L,\
    \ (long)0L, (long)1L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpugcbgs7a.cs(20,14): error CS0136: A local or parameter named ''guess''
    cannot be declared in this scope because that name is used in an enclosing local
    scope to define a local or parameter

    /tmp/tmpugcbgs7a.cs(24,21): error CS0021: Cannot apply indexing with [] to an
    expression of type ''long''

    '
  timestamp: 1659976335
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // I think we all remember that feeling when the result of\
    \ some long-awaited\n    // event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    // definitely worth noting down and comparing.\n\
    \    // Your task is to determine if a person correctly guessed the results of\
    \ a number of matches.\n    // You are given two arrays of scores and guesses\
    \ of equal length, where each index shows a match. \n    // Return an array of\
    \ the same length denoting how far off each guess was. If they have guessed correctly,\n\
    \    // the value is 0, and if not, the value is the absolute difference between\
    \ the guess and the score.\n    // example:\n    public static List<long> Compare(List<long>\
    \ game, List<long> guess) {\n        List<long> result = new List<long>();\n \
    \       long score = 0;\n        long difference = 0;\n        foreach (long g\
    \ in game) {\n            score += g;\n        }\n        foreach (long g in guess)\
    \ {\n            difference += g - score;\n        }\n        foreach (long g\
    \ in guess) {\n            result.Add(difference - g);\n        }\n        return\
    \ result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Compare((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})),\
    \ (new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L,\
    \ (long)-2L}))).Equals((new List<long>(new long[]{(long)0L, (long)0L, (long)0L,\
    \ (long)0L, (long)3L, (long)3L}))));\n    Debug.Assert(Compare((new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L})), (new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))));\n\
    \    Debug.Assert(Compare((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})),\
    \ (new List<long>(new long[]{(long)-1L, (long)-2L, (long)-3L}))).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)4L, (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L,\
    \ (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)0L, (long)0L, (long)1L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <6c5862b597e849aeacf5f57a0847fa25>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <6c5862b597e849aeacf5f57a0847fa25>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976336
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // I think we all remember that feeling when the result of\
    \ some long-awaited\n    // event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    // definitely worth noting down and comparing.\n\
    \    // Your task is to determine if a person correctly guessed the results of\
    \ a number of matches.\n    // You are given two arrays of scores and guesses\
    \ of equal length, where each index shows a match. \n    // Return an array of\
    \ the same length denoting how far off each guess was. If they have guessed correctly,\n\
    \    // the value is 0, and if not, the value is the absolute difference between\
    \ the guess and the score.\n    // example:\n    public static List<long> Compare(List<long>\
    \ game, List<long> guess) {\n        List<long> result = new List<long>();\n \
    \       long score;\n        long guess;\n        long diff;\n        bool correct;\n\
    \        foreach (long g in game) {\n            correct = false;\n          \
    \  foreach (long g in guess) {\n                score = g;\n                guess\
    \ = g;\n                diff = g - score;\n                if (diff < 0) {\n \
    \                   diff = -diff;\n                }\n                if (diff\
    \ == 0) {\n                    correct = true;\n                }\n          \
    \  }\n            result.Add(correct ? 0 : diff);\n        }\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Compare((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})),\
    \ (new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L,\
    \ (long)-2L}))).Equals((new List<long>(new long[]{(long)0L, (long)0L, (long)0L,\
    \ (long)0L, (long)3L, (long)3L}))));\n    Debug.Assert(Compare((new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L})), (new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))));\n\
    \    Debug.Assert(Compare((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})),\
    \ (new List<long>(new long[]{(long)-1L, (long)-2L, (long)-3L}))).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)4L, (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L,\
    \ (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)0L, (long)0L, (long)1L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpe_gl5r3b.cs(20,14): error CS0136: A local or parameter named ''guess''
    cannot be declared in this scope because that name is used in an enclosing local
    scope to define a local or parameter

    /tmp/tmpe_gl5r3b.cs(25,32): error CS1579: foreach statement cannot operate on
    variables of type ''long'' because ''long'' does not contain a public instance
    definition for ''GetEnumerator''

    /tmp/tmpe_gl5r3b.cs(25,27): error CS0136: A local or parameter named ''g'' cannot
    be declared in this scope because that name is used in an enclosing local scope
    to define a local or parameter

    /tmp/tmpe_gl5r3b.cs(25,32): error CS0165: Use of unassigned local variable ''guess''

    /tmp/tmpe_gl5r3b.cs(36,38): error CS0165: Use of unassigned local variable ''diff''

    '
  timestamp: 1659976335
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // I think we all remember that feeling when the result of\
    \ some long-awaited\n    // event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    // definitely worth noting down and comparing.\n\
    \    // Your task is to determine if a person correctly guessed the results of\
    \ a number of matches.\n    // You are given two arrays of scores and guesses\
    \ of equal length, where each index shows a match. \n    // Return an array of\
    \ the same length denoting how far off each guess was. If they have guessed correctly,\n\
    \    // the value is 0, and if not, the value is the absolute difference between\
    \ the guess and the score.\n    // example:\n    public static List<long> Compare(List<long>\
    \ game, List<long> guess) {\n        var result = new List<long>();\n        foreach\
    \ (var g in game) {\n            var gDiff = Math.Abs(g - guess);\n          \
    \  result.Add(gDiff);\n        }\n        return result;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))));\n  \
    \  Debug.Assert(Compare((new List<long>(new long[]{(long)0L, (long)0L, (long)0L,\
    \ (long)0L, (long)0L, (long)0L})), (new List<long>(new long[]{(long)0L, (long)0L,\
    \ (long)0L, (long)0L, (long)0L, (long)0L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))));\n    Debug.Assert(Compare((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (new List<long>(new long[]{(long)-1L,\
    \ (long)-2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,\
    \ (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L, (long)2L,\
    \ (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)0L,\
    \ (long)0L, (long)1L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpq_537y40.cs(20,34): error CS0019: Operator ''-'' cannot be applied to
    operands of type ''long'' and ''List<long>''

    '
  timestamp: 1659976335
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // I think we all remember that feeling when the result of\
    \ some long-awaited\n    // event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    // definitely worth noting down and comparing.\n\
    \    // Your task is to determine if a person correctly guessed the results of\
    \ a number of matches.\n    // You are given two arrays of scores and guesses\
    \ of equal length, where each index shows a match. \n    // Return an array of\
    \ the same length denoting how far off each guess was. If they have guessed correctly,\n\
    \    // the value is 0, and if not, the value is the absolute difference between\
    \ the guess and the score.\n    // example:\n    public static List<long> Compare(List<long>\
    \ game, List<long> guess) {\n        List<long> result = new List<long>();\n \
    \       long score = 0;\n        long difference = 0;\n        long maxScore =\
    \ game.Max();\n        long minScore = game.Min();\n        long maxGuess = guess.Max();\n\
    \        long minGuess = guess.Min();\n        long maxDifference = maxScore -\
    \ minScore;\n        long minDifference = minScore - maxScore;\n        foreach\
    \ (long guess in guess) {\n            score = game.IndexOf(guess);\n        \
    \    if (score == -1) {\n                difference = maxGuess - minGuess;\n \
    \           } else {\n                difference = maxDifference - minDifference;\n\
    \            }\n            result.Add(difference);\n        }\n        return\
    \ result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Compare((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})),\
    \ (new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L,\
    \ (long)-2L}))).Equals((new List<long>(new long[]{(long)0L, (long)0L, (long)0L,\
    \ (long)0L, (long)3L, (long)3L}))));\n    Debug.Assert(Compare((new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L})), (new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))));\n\
    \    Debug.Assert(Compare((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})),\
    \ (new List<long>(new long[]{(long)-1L, (long)-2L, (long)-3L}))).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)4L, (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L,\
    \ (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)0L, (long)0L, (long)1L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp2bo5h5r8.cs(27,23): error CS0136: A local or parameter named ''guess''
    cannot be declared in this scope because that name is used in an enclosing local
    scope to define a local or parameter

    '
  timestamp: 1659976336
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // I think we all remember that feeling when the result of\
    \ some long-awaited\n    // event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    // definitely worth noting down and comparing.\n\
    \    // Your task is to determine if a person correctly guessed the results of\
    \ a number of matches.\n    // You are given two arrays of scores and guesses\
    \ of equal length, where each index shows a match. \n    // Return an array of\
    \ the same length denoting how far off each guess was. If they have guessed correctly,\n\
    \    // the value is 0, and if not, the value is the absolute difference between\
    \ the guess and the score.\n    // example:\n    public static List<long> Compare(List<long>\
    \ game, List<long> guess) {\n        List<long> result = new List<long>();\n \
    \       long score = 0;\n        long difference = 0;\n        foreach (long g\
    \ in game) {\n            score += g;\n        }\n        foreach (long g in guess)\
    \ {\n            difference += g - score;\n        }\n        result.Add(difference);\n\
    \        return result;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(Compare((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L, (long)5L, (long)1L})), (new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)2L, (long)-2L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))));\n    Debug.Assert(Compare((new\
    \ List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L})),\
    \ (new List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L,\
    \ (long)0L}))).Equals((new List<long>(new long[]{(long)0L, (long)0L, (long)0L,\
    \ (long)0L, (long)0L, (long)0L}))));\n    Debug.Assert(Compare((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L})), (new List<long>(new long[]{(long)-1L,\
    \ (long)-2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,\
    \ (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L, (long)2L,\
    \ (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)0L,\
    \ (long)0L, (long)1L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <e9b3b49e5ed044c68bfc089bb8fe3136>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <e9b3b49e5ed044c68bfc089bb8fe3136>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976335
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // I think we all remember that feeling when the result of\
    \ some long-awaited\n    // event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    // definitely worth noting down and comparing.\n\
    \    // Your task is to determine if a person correctly guessed the results of\
    \ a number of matches.\n    // You are given two arrays of scores and guesses\
    \ of equal length, where each index shows a match. \n    // Return an array of\
    \ the same length denoting how far off each guess was. If they have guessed correctly,\n\
    \    // the value is 0, and if not, the value is the absolute difference between\
    \ the guess and the score.\n    // example:\n    public static List<long> Compare(List<long>\
    \ game, List<long> guess) {\n        List<long> result = new List<long>();\n \
    \       long score = 0;\n        long difference = 0;\n        long guess = 0;\n\
    \        long game = 0;\n        foreach (long g in game) {\n            score\
    \ = g;\n            foreach (long g in guess) {\n                guess = g;\n\
    \                difference = Math.Abs(guess - score);\n                result.Add(difference);\n\
    \            }\n        }\n        return result;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))));\n  \
    \  Debug.Assert(Compare((new List<long>(new long[]{(long)0L, (long)0L, (long)0L,\
    \ (long)0L, (long)0L, (long)0L})), (new List<long>(new long[]{(long)0L, (long)0L,\
    \ (long)0L, (long)0L, (long)0L, (long)0L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))));\n    Debug.Assert(Compare((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (new List<long>(new long[]{(long)-1L,\
    \ (long)-2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,\
    \ (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L, (long)2L,\
    \ (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)0L,\
    \ (long)0L, (long)1L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp0dmkq7yw.cs(21,14): error CS0136: A local or parameter named ''guess''
    cannot be declared in this scope because that name is used in an enclosing local
    scope to define a local or parameter

    /tmp/tmp0dmkq7yw.cs(22,14): error CS0136: A local or parameter named ''game''
    cannot be declared in this scope because that name is used in an enclosing local
    scope to define a local or parameter

    /tmp/tmp0dmkq7yw.cs(23,28): error CS1579: foreach statement cannot operate on
    variables of type ''long'' because ''long'' does not contain a public instance
    definition for ''GetEnumerator''

    /tmp/tmp0dmkq7yw.cs(25,32): error CS1579: foreach statement cannot operate on
    variables of type ''long'' because ''long'' does not contain a public instance
    definition for ''GetEnumerator''

    /tmp/tmp0dmkq7yw.cs(25,27): error CS0136: A local or parameter named ''g'' cannot
    be declared in this scope because that name is used in an enclosing local scope
    to define a local or parameter

    '
  timestamp: 1659976336
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // I think we all remember that feeling when the result of\
    \ some long-awaited\n    // event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    // definitely worth noting down and comparing.\n\
    \    // Your task is to determine if a person correctly guessed the results of\
    \ a number of matches.\n    // You are given two arrays of scores and guesses\
    \ of equal length, where each index shows a match. \n    // Return an array of\
    \ the same length denoting how far off each guess was. If they have guessed correctly,\n\
    \    // the value is 0, and if not, the value is the absolute difference between\
    \ the guess and the score.\n    // example:\n    public static List<long> Compare(List<long>\
    \ game, List<long> guess) {\n        List<long> result = new List<long>();\n \
    \       long score;\n        long guess;\n        long diff;\n        long diffAbs;\n\
    \        long diffAbs2;\n        long diffAbs3;\n        long diffAbs4;\n    \
    \    long diffAbs5;\n        long diffAbs6;\n        long diffAbs7;\n        long\
    \ diffAbs8;\n        long diffAbs9;\n        long diffAbs10;\n        long diffAbs11;\n\
    \        long diffAbs12;\n        long diffAbs13;\n        long diffAbs14;\n \
    \       long diffAbs15;\n        long diffAbs16;\n        long diffAbs17;\n  \
    \      long diffAbs18;\n        long diffAbs19;\n        long diffAbs20;\n   \
    \     long diffAbs21;\n        long diffAbs22;\n        long diffAbs23;\n    \
    \    long diffAbs24;\n        long diffAbs25;\n        long diffAbs26;\n     \
    \   long diffAbs27;\n        long diffAbs28;\n        long diffAbs29;\n      \
    \  long diffAbs30;\n        long diffAbs31;\n        long diffAbs32;\n       \
    \ long diffAbs33;\n        long diffAbs34;\n        long diffAbs35;\n        long\
    \ diffAbs36;\n        long diffAbs37;\n        long diffAbs38;\n        long diffAbs39;\n\
    \        long diffAbs40;\n        long diffAbs41;\n        long diffAbs42;\n \
    \       long diffAbs43;\n        long diffAbs44;\n        long diffAbs45;\n  \
    \      long diffAbs46;\n        long diffAbs47;\n        long diffAbs48;\n   \
    \     long diffAbs49;\n        long diffAbs50;\n        long diffAbs51;\n    \
    \    long diffAbs52;\n        long diffAbs53;\n        long diffAbs54;\n     \
    \   long diffAbs55;\n        long diffAbs56;\n        long diffAbs57;\n      \
    \  long diffAbs58;\n        long diffAbs59;\n        long diffAbs60;\n       \
    \ long diffAbs61;\n        long diffAbs62;\n        long diffAbs63;\n        long\
    \ diffAbs64;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Compare((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})),\
    \ (new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L,\
    \ (long)-2L}))).Equals((new List<long>(new long[]{(long)0L, (long)0L, (long)0L,\
    \ (long)0L, (long)3L, (long)3L}))));\n    Debug.Assert(Compare((new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L})), (new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))));\n\
    \    Debug.Assert(Compare((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})),\
    \ (new List<long>(new long[]{(long)-1L, (long)-2L, (long)-3L}))).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)4L, (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L,\
    \ (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)0L, (long)0L, (long)1L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpfankuj3q.cs(20,14): error CS0136: A local or parameter named ''guess''
    cannot be declared in this scope because that name is used in an enclosing local
    scope to define a local or parameter

    /tmp/tmpfankuj3q.cs(19,14): warning CS0168: The variable ''score'' is declared
    but never used

    /tmp/tmpfankuj3q.cs(20,14): warning CS0168: The variable ''guess'' is declared
    but never used

    /tmp/tmpfankuj3q.cs(21,14): warning CS0168: The variable ''diff'' is declared
    but never used

    /tmp/tmpfankuj3q.cs(22,14): warning CS0168: The variable ''diffAbs'' is declared
    but never used

    /tmp/tmpfankuj3q.cs(23,14): warning CS0168: The variable ''diffAbs2'' is declared
    but never used

    /tmp/tmpfankuj3q.cs(24,14): warning CS0168: The variable ''diffAbs3'' is declared
    but never used

    /tmp/tmpfankuj3q.cs(25,14): warning CS0168: The variable ''diffAbs4'' is declared
    but never used

    /tmp/tmpfankuj3q.cs(26,14): warning CS0168: The variable ''diffAbs5'' is declared
    but never used

    /tmp/tmpfankuj3q.cs(27,14): warning CS0168: The variable ''diffAbs6'' is declared
    but never used

    /tmp/tmpfankuj3q.cs(28,14): warning CS0168: The variable ''diffAbs7'' is declared
    but never used

    /tmp/tmpfankuj3q.cs(29,14): warning CS0168: The variable ''diffAbs8'' is declared
    but never used

    /tmp/tmpfankuj3q.cs(30,14): warning CS0168: The variable ''diffAbs9'' is declared
    but never used

    /tmp/tmpfankuj3q.cs(31,14): warning CS0168: The variable ''diffAbs10'' is declared
    but never used

    /tmp/tmpfankuj3q.cs(32,14): warning CS0168: The variable ''diffAbs11'' is declared
    but never used

    /tmp/tmpfankuj3q.cs(33,14): warning CS0168: The variable ''diffAbs12'' is declared
    but never used

    /tmp/tmpfankuj3q.cs(34,14): warning CS0168: The variable ''diffAbs13'' is declared
    but never used

    /tmp/tmpfankuj3q.cs(35,14): warning CS0168: The variable ''diffAbs14'' is declared
    but never used

    /tmp/tmpfankuj3q.cs(36,14): warning CS0168: The variable ''diffAbs15'' is declared
    but never used

    /tmp/tmpfankuj3q.cs(3'
  timestamp: 1659976336
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // I think we all remember that feeling when the result of\
    \ some long-awaited\n    // event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    // definitely worth noting down and comparing.\n\
    \    // Your task is to determine if a person correctly guessed the results of\
    \ a number of matches.\n    // You are given two arrays of scores and guesses\
    \ of equal length, where each index shows a match. \n    // Return an array of\
    \ the same length denoting how far off each guess was. If they have guessed correctly,\n\
    \    // the value is 0, and if not, the value is the absolute difference between\
    \ the guess and the score.\n    // example:\n    public static List<long> Compare(List<long>\
    \ game, List<long> guess) {\n        List<long> result = new List<long>();\n \
    \       long score = 0;\n        long diff = 0;\n        foreach (var g in game)\
    \ {\n            score = g;\n            foreach (var g in guess) {\n        \
    \        diff = g - score;\n                if (diff == 0) {\n               \
    \     result.Add(0);\n                } else {\n                    result.Add(diff);\n\
    \                }\n            }\n        }\n        return result;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(Compare((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))));\n\
    \    Debug.Assert(Compare((new List<long>(new long[]{(long)0L, (long)0L, (long)0L,\
    \ (long)0L, (long)0L, (long)0L})), (new List<long>(new long[]{(long)0L, (long)0L,\
    \ (long)0L, (long)0L, (long)0L, (long)0L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))));\n    Debug.Assert(Compare((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (new List<long>(new long[]{(long)-1L,\
    \ (long)-2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,\
    \ (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L, (long)2L,\
    \ (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)0L,\
    \ (long)0L, (long)1L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpi2kjbfzo.cs(23,26): error CS0136: A local or parameter named ''g'' cannot
    be declared in this scope because that name is used in an enclosing local scope
    to define a local or parameter

    '
  timestamp: 1659976336
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // I think we all remember that feeling when the result of\
    \ some long-awaited\n    // event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    // definitely worth noting down and comparing.\n\
    \    // Your task is to determine if a person correctly guessed the results of\
    \ a number of matches.\n    // You are given two arrays of scores and guesses\
    \ of equal length, where each index shows a match. \n    // Return an array of\
    \ the same length denoting how far off each guess was. If they have guessed correctly,\n\
    \    // the value is 0, and if not, the value is the absolute difference between\
    \ the guess and the score.\n    // example:\n    public static List<long> Compare(List<long>\
    \ game, List<long> guess) {\n        List<long> result = new List<long>();\n \
    \       long score;\n        long guess;\n        long diff;\n        bool correct;\n\
    \        foreach (var g in game) {\n            score = 0;\n            correct\
    \ = false;\n            foreach (var g in guess) {\n                guess = g;\n\
    \                diff = g - score;\n                if (diff > 0) {\n        \
    \            correct = true;\n                    break;\n                }\n\
    \                score = g;\n            }\n            result.Add(correct ? diff\
    \ : -diff);\n        }\n        return result;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))));\n  \
    \  Debug.Assert(Compare((new List<long>(new long[]{(long)0L, (long)0L, (long)0L,\
    \ (long)0L, (long)0L, (long)0L})), (new List<long>(new long[]{(long)0L, (long)0L,\
    \ (long)0L, (long)0L, (long)0L, (long)0L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))));\n    Debug.Assert(Compare((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (new List<long>(new long[]{(long)-1L,\
    \ (long)-2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,\
    \ (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L, (long)2L,\
    \ (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)0L,\
    \ (long)0L, (long)1L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpu_bhsbfh.cs(20,14): error CS0136: A local or parameter named ''guess''
    cannot be declared in this scope because that name is used in an enclosing local
    scope to define a local or parameter

    /tmp/tmpu_bhsbfh.cs(26,31): error CS1579: foreach statement cannot operate on
    variables of type ''long'' because ''long'' does not contain a public instance
    definition for ''GetEnumerator''

    /tmp/tmpu_bhsbfh.cs(26,26): error CS0136: A local or parameter named ''g'' cannot
    be declared in this scope because that name is used in an enclosing local scope
    to define a local or parameter

    /tmp/tmpu_bhsbfh.cs(26,31): error CS0165: Use of unassigned local variable ''guess''

    /tmp/tmpu_bhsbfh.cs(35,34): error CS0165: Use of unassigned local variable ''diff''

    '
  timestamp: 1659976336
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // I think we all remember that feeling when the result of\
    \ some long-awaited\n    // event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    // definitely worth noting down and comparing.\n\
    \    // Your task is to determine if a person correctly guessed the results of\
    \ a number of matches.\n    // You are given two arrays of scores and guesses\
    \ of equal length, where each index shows a match. \n    // Return an array of\
    \ the same length denoting how far off each guess was. If they have guessed correctly,\n\
    \    // the value is 0, and if not, the value is the absolute difference between\
    \ the guess and the score.\n    // example:\n    public static List<long> Compare(List<long>\
    \ game, List<long> guess) {\n        var result = new List<long>();\n        foreach\
    \ (var item in guess) {\n            var diff = item - game[game.IndexOf(item)];\
    \ // the difference between the guess and the score\n            result.Add(diff);\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))));\n  \
    \  Debug.Assert(Compare((new List<long>(new long[]{(long)0L, (long)0L, (long)0L,\
    \ (long)0L, (long)0L, (long)0L})), (new List<long>(new long[]{(long)0L, (long)0L,\
    \ (long)0L, (long)0L, (long)0L, (long)0L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))));\n    Debug.Assert(Compare((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (new List<long>(new long[]{(long)-1L,\
    \ (long)-2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,\
    \ (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L, (long)2L,\
    \ (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)0L,\
    \ (long)0L, (long)1L}))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out\
    \ of range. Must be non-negative and less than the size of the collection.\nParameter\
    \ name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Compare\
    \ (System.Collections.Generic.List`1[T] game, System.Collections.Generic.List`1[T]\
    \ guess) [0x00023] in <fc55dd6a2bad4dc7b4581077e548bbdf>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x0002d] in <fc55dd6a2bad4dc7b4581077e548bbdf>:0 \n\
    [ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index was\
    \ out of range. Must be non-negative and less than the size of the collection.\n\
    Parameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Compare\
    \ (System.Collections.Generic.List`1[T] game, System.Collections.Generic.List`1[T]\
    \ guess) [0x00023] in <fc55dd6a2bad4dc7b4581077e548bbdf>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x0002d] in <fc55dd6a2bad4dc7b4581077e548bbdf>:0 \n"
  stdout: ''
  timestamp: 1659976336
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // I think we all remember that feeling when the result of\
    \ some long-awaited\n    // event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    // definitely worth noting down and comparing.\n\
    \    // Your task is to determine if a person correctly guessed the results of\
    \ a number of matches.\n    // You are given two arrays of scores and guesses\
    \ of equal length, where each index shows a match. \n    // Return an array of\
    \ the same length denoting how far off each guess was. If they have guessed correctly,\n\
    \    // the value is 0, and if not, the value is the absolute difference between\
    \ the guess and the score.\n    // example:\n    public static List<long> Compare(List<long>\
    \ game, List<long> guess) {\n        var result = new List<long>();\n        foreach\
    \ (var g in game) {\n            var guess = guess.Where(x => x == g).FirstOrDefault();\n\
    \            if (guess == null) {\n                result.Add(0);\n          \
    \  } else {\n                result.Add(Math.Abs(guess - g));\n            }\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))));\n  \
    \  Debug.Assert(Compare((new List<long>(new long[]{(long)0L, (long)0L, (long)0L,\
    \ (long)0L, (long)0L, (long)0L})), (new List<long>(new long[]{(long)0L, (long)0L,\
    \ (long)0L, (long)0L, (long)0L, (long)0L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))));\n    Debug.Assert(Compare((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (new List<long>(new long[]{(long)-1L,\
    \ (long)-2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,\
    \ (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L, (long)2L,\
    \ (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)0L,\
    \ (long)0L, (long)1L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpywc8t1d0.cs(20,17): error CS0136: A local or parameter named ''guess''
    cannot be declared in this scope because that name is used in an enclosing local
    scope to define a local or parameter

    /tmp/tmpywc8t1d0.cs(20,25): error CS0841: Cannot use local variable ''guess''
    before it is declared

    '
  timestamp: 1659976336
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // I think we all remember that feeling when the result of\
    \ some long-awaited\n    // event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    // definitely worth noting down and comparing.\n\
    \    // Your task is to determine if a person correctly guessed the results of\
    \ a number of matches.\n    // You are given two arrays of scores and guesses\
    \ of equal length, where each index shows a match. \n    // Return an array of\
    \ the same length denoting how far off each guess was. If they have guessed correctly,\n\
    \    // the value is 0, and if not, the value is the absolute difference between\
    \ the guess and the score.\n    // example:\n    public static List<long> Compare(List<long>\
    \ game, List<long> guess) {\n        List<long> result = new List<long>();\n \
    \       long score;\n        long guess;\n        long difference;\n        foreach\
    \ (var item in game) {\n            score = item;\n            guess = guess[game.IndexOf(item)];\
    \ // get the guess from the list at that index\n            difference = Math.Abs(guess\
    \ - score);\n            result.Add(difference);\n        }\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Compare((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})),\
    \ (new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L,\
    \ (long)-2L}))).Equals((new List<long>(new long[]{(long)0L, (long)0L, (long)0L,\
    \ (long)0L, (long)3L, (long)3L}))));\n    Debug.Assert(Compare((new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L})), (new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))));\n\
    \    Debug.Assert(Compare((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})),\
    \ (new List<long>(new long[]{(long)-1L, (long)-2L, (long)-3L}))).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)4L, (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L,\
    \ (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)0L, (long)0L, (long)1L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpa1b5c_xj.cs(20,14): error CS0136: A local or parameter named ''guess''
    cannot be declared in this scope because that name is used in an enclosing local
    scope to define a local or parameter

    /tmp/tmpa1b5c_xj.cs(24,21): error CS0021: Cannot apply indexing with [] to an
    expression of type ''long''

    /tmp/tmpa1b5c_xj.cs(24,21): error CS0165: Use of unassigned local variable ''guess''

    '
  timestamp: 1659976336
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // I think we all remember that feeling when the result of\
    \ some long-awaited\n    // event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    // definitely worth noting down and comparing.\n\
    \    // Your task is to determine if a person correctly guessed the results of\
    \ a number of matches.\n    // You are given two arrays of scores and guesses\
    \ of equal length, where each index shows a match. \n    // Return an array of\
    \ the same length denoting how far off each guess was. If they have guessed correctly,\n\
    \    // the value is 0, and if not, the value is the absolute difference between\
    \ the guess and the score.\n    // example:\n    public static List<long> Compare(List<long>\
    \ game, List<long> guess) {\n        // Your code goes here\n        List<long>\
    \ result = new List<long>();\n        long score = 0;\n        long diff = 0;\n\
    \        long diff2 = 0;\n        long diff3 = 0;\n        long diff4 = 0;\n \
    \       long diff5 = 0;\n        long diff6 = 0;\n        long diff7 = 0;\n  \
    \      long diff8 = 0;\n        long diff9 = 0;\n        long diff10 = 0;\n  \
    \      long diff11 = 0;\n        long diff12 = 0;\n        long diff13 = 0;\n\
    \        long diff14 = 0;\n        long diff15 = 0;\n        long diff16 = 0;\n\
    \        long diff17 = 0;\n        long diff18 = 0;\n        long diff19 = 0;\n\
    \        long diff20 = 0;\n        long diff21 = 0;\n        long diff22 = 0;\n\
    \        long diff23 = 0;\n        long diff24 = 0;\n        long diff25 = 0;\n\
    \        long diff26 = 0;\n        long diff27 = 0;\n        long diff28 = 0;\n\
    \        long diff29 = 0;\n        long diff30 = 0;\n        long diff31 = 0;\n\
    \        long diff32 = 0;\n        long diff33 = 0;\n        long diff34 = 0;\n\
    \        long diff35 = 0;\n        long diff36 = 0;\n        long diff37 = 0;\n\
    \        long diff38 = 0;\n        long diff39 = 0;\n        long diff40 = 0;\n\
    \        long diff41 = 0;\n        long diff42 = 0;\n        long diff43 = 0;\n\
    \        long diff44 = 0;\n        long diff45 = 0;\n        long diff46 = 0;\n\
    \        long diff47 = 0;\n        long diff48 = 0;\n        long diff49 = 0;\n\
    \        long diff50 = 0;\n        long diff51 = 0;\n        long diff52 = 0;\n\
    \        long diff53 = 0;\n        long diff54 = 0;\n        long diff55 = 0;\n\
    \        long diff56 = 0;\n        long diff57 = 0;\n        long diff58 = 0;\n\
    \        long diff59 = 0;\n        long diff60 = 0;\n        long diff61 = 0;\n\
    \        long diff62 = 0;\n        long diff63 = 0;\n        long diff64 = 0;\n\
    \        long diff65 = 0;\n        long diff66 = 0;\n        long diff67 = 0;\n\
    \        long diff68 = 0;\n        long diff69 = 0;\n        long diff70 = 0;\n\
    \        long diff71 = 0;\n        long diff72 = 0;\n        long diff73 = 0;\n\
    \        long diff74 = 0;\n        long diff75 = 0;\n        long diff76 = 0;\n\
    \        long diff77 = 0;\n        long diff78 = 0;\n        long diff79 = 0;\n\
    \        long diff80 = 0;\n        long diff81 = 0;\n        long diff82 = 0;\n\
    \        long diff83\n    }\n    public static void Main(string[] args) {\n  \
    \  Debug.Assert(Compare((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L, (long)5L, (long)1L})), (new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)2L, (long)-2L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))));\n    Debug.Assert(Compare((new\
    \ List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L})),\
    \ (new List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L,\
    \ (long)0L}))).Equals((new List<long>(new long[]{(long)0L, (long)0L, (long)0L,\
    \ (long)0L, (long)0L, (long)0L}))));\n    Debug.Assert(Compare((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L})), (new List<long>(new long[]{(long)-1L,\
    \ (long)-2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,\
    \ (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L, (long)2L,\
    \ (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)0L,\
    \ (long)0L, (long)1L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpj5zvc_xf.cs(103,20): error CS1002: ; expected

    '
  timestamp: 1659976335
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // I think we all remember that feeling when the result of\
    \ some long-awaited\n    // event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    // definitely worth noting down and comparing.\n\
    \    // Your task is to determine if a person correctly guessed the results of\
    \ a number of matches.\n    // You are given two arrays of scores and guesses\
    \ of equal length, where each index shows a match. \n    // Return an array of\
    \ the same length denoting how far off each guess was. If they have guessed correctly,\n\
    \    // the value is 0, and if not, the value is the absolute difference between\
    \ the guess and the score.\n    // example:\n    public static List<long> Compare(List<long>\
    \ game, List<long> guess) {\n        List<long> result = new List<long>();\n \
    \       long score = 0;\n        long diff = 0;\n        foreach (var g in game)\
    \ {\n            score += g;\n            foreach (var g in guess) {\n       \
    \         diff += Math.Abs(g - score);\n            }\n            result.Add(diff);\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))));\n  \
    \  Debug.Assert(Compare((new List<long>(new long[]{(long)0L, (long)0L, (long)0L,\
    \ (long)0L, (long)0L, (long)0L})), (new List<long>(new long[]{(long)0L, (long)0L,\
    \ (long)0L, (long)0L, (long)0L, (long)0L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))));\n    Debug.Assert(Compare((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (new List<long>(new long[]{(long)-1L,\
    \ (long)-2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,\
    \ (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L, (long)2L,\
    \ (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)0L,\
    \ (long)0L, (long)1L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpzres1w2k.cs(23,26): error CS0136: A local or parameter named ''g'' cannot
    be declared in this scope because that name is used in an enclosing local scope
    to define a local or parameter

    '
  timestamp: 1659976336
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // I think we all remember that feeling when the result of\
    \ some long-awaited\n    // event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    // definitely worth noting down and comparing.\n\
    \    // Your task is to determine if a person correctly guessed the results of\
    \ a number of matches.\n    // You are given two arrays of scores and guesses\
    \ of equal length, where each index shows a match. \n    // Return an array of\
    \ the same length denoting how far off each guess was. If they have guessed correctly,\n\
    \    // the value is 0, and if not, the value is the absolute difference between\
    \ the guess and the score.\n    // example:\n    public static List<long> Compare(List<long>\
    \ game, List<long> guess) {\n        // TODO: Implement this method\n        List<long>\
    \ result = new List<long>();\n        long diff = 0;\n        foreach (var item\
    \ in game) {\n            diff = item - guess[game.IndexOf(item)]; \n        \
    \    result.Add(diff);\n        }\n        return result;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))));\n  \
    \  Debug.Assert(Compare((new List<long>(new long[]{(long)0L, (long)0L, (long)0L,\
    \ (long)0L, (long)0L, (long)0L})), (new List<long>(new long[]{(long)0L, (long)0L,\
    \ (long)0L, (long)0L, (long)0L, (long)0L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))));\n    Debug.Assert(Compare((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (new List<long>(new long[]{(long)-1L,\
    \ (long)-2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,\
    \ (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L, (long)2L,\
    \ (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)0L,\
    \ (long)0L, (long)1L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a95fa6f2c1bd44e4a73664fa2f52361b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a95fa6f2c1bd44e4a73664fa2f52361b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976336
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // I think we all remember that feeling when the result of\
    \ some long-awaited\n    // event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    // definitely worth noting down and comparing.\n\
    \    // Your task is to determine if a person correctly guessed the results of\
    \ a number of matches.\n    // You are given two arrays of scores and guesses\
    \ of equal length, where each index shows a match. \n    // Return an array of\
    \ the same length denoting how far off each guess was. If they have guessed correctly,\n\
    \    // the value is 0, and if not, the value is the absolute difference between\
    \ the guess and the score.\n    // example:\n    public static List<long> Compare(List<long>\
    \ game, List<long> guess) {\n        List<long> result = new List<long>();\n \
    \       long score;\n        long guess;\n        long diff;\n        bool correct\
    \ = false;\n        for (int i = 0; i < game.Count; i++) {\n            score\
    \ = game[i];\n            guess = guess[i];\n            diff = guess - score;\n\
    \            if (diff > 0) {\n                result.Add(diff);\n            \
    \    correct = true;\n            }\n        }\n        if (!correct) {\n    \
    \        foreach (long i in guess) {\n                result.Add(i);\n       \
    \     }\n        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))));\n  \
    \  Debug.Assert(Compare((new List<long>(new long[]{(long)0L, (long)0L, (long)0L,\
    \ (long)0L, (long)0L, (long)0L})), (new List<long>(new long[]{(long)0L, (long)0L,\
    \ (long)0L, (long)0L, (long)0L, (long)0L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))));\n    Debug.Assert(Compare((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (new List<long>(new long[]{(long)-1L,\
    \ (long)-2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,\
    \ (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L, (long)2L,\
    \ (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)0L,\
    \ (long)0L, (long)1L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpna6ag63i.cs(20,14): error CS0136: A local or parameter named ''guess''
    cannot be declared in this scope because that name is used in an enclosing local
    scope to define a local or parameter

    /tmp/tmpna6ag63i.cs(25,21): error CS0021: Cannot apply indexing with [] to an
    expression of type ''long''

    /tmp/tmpna6ag63i.cs(33,32): error CS1579: foreach statement cannot operate on
    variables of type ''long'' because ''long'' does not contain a public instance
    definition for ''GetEnumerator''

    /tmp/tmpna6ag63i.cs(25,21): error CS0165: Use of unassigned local variable ''guess''

    '
  timestamp: 1659976336
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // I think we all remember that feeling when the result of\
    \ some long-awaited\n    // event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    // definitely worth noting down and comparing.\n\
    \    // Your task is to determine if a person correctly guessed the results of\
    \ a number of matches.\n    // You are given two arrays of scores and guesses\
    \ of equal length, where each index shows a match. \n    // Return an array of\
    \ the same length denoting how far off each guess was. If they have guessed correctly,\n\
    \    // the value is 0, and if not, the value is the absolute difference between\
    \ the guess and the score.\n    // example:\n    public static List<long> Compare(List<long>\
    \ game, List<long> guess) {\n        List<long> result = new List<long>();\n \
    \       long score;\n        long guess;\n        long diff;\n        bool correct\
    \ = false;\n        foreach (var item in game) {\n            score = item;\n\
    \            guess = guess[game.IndexOf(item)]; // get the guess from the list\n\
    \            diff = guess - score; // get the difference between the guess and\
    \ the score\n            result.Add(diff); // add the difference to the result\n\
    \            if (diff == 0) {\n                correct = true;\n            }\n\
    \        }\n        if (!correct) {\n            foreach (var item in result)\
    \ {\n                result.Add(-diff);\n            }\n        }\n        return\
    \ result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Compare((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})),\
    \ (new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L,\
    \ (long)-2L}))).Equals((new List<long>(new long[]{(long)0L, (long)0L, (long)0L,\
    \ (long)0L, (long)3L, (long)3L}))));\n    Debug.Assert(Compare((new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L})), (new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))));\n\
    \    Debug.Assert(Compare((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})),\
    \ (new List<long>(new long[]{(long)-1L, (long)-2L, (long)-3L}))).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)4L, (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L,\
    \ (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)0L, (long)0L, (long)1L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpxhgflufl.cs(20,14): error CS0136: A local or parameter named ''guess''
    cannot be declared in this scope because that name is used in an enclosing local
    scope to define a local or parameter

    /tmp/tmpxhgflufl.cs(25,21): error CS0021: Cannot apply indexing with [] to an
    expression of type ''long''

    /tmp/tmpxhgflufl.cs(25,21): error CS0165: Use of unassigned local variable ''guess''

    /tmp/tmpxhgflufl.cs(34,29): error CS0165: Use of unassigned local variable ''diff''

    '
  timestamp: 1659976336
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // I think we all remember that feeling when the result of\
    \ some long-awaited\n    // event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    // definitely worth noting down and comparing.\n\
    \    // Your task is to determine if a person correctly guessed the results of\
    \ a number of matches.\n    // You are given two arrays of scores and guesses\
    \ of equal length, where each index shows a match. \n    // Return an array of\
    \ the same length denoting how far off each guess was. If they have guessed correctly,\n\
    \    // the value is 0, and if not, the value is the absolute difference between\
    \ the guess and the score.\n    // example:\n    public static List<long> Compare(List<long>\
    \ game, List<long> guess) {\n        List<long> result = new List<long>();\n \
    \       foreach (long g in game) {\n            long g2 = g;\n            long\
    \ g3 = g;\n            long g4 = g;\n            long g5 = g;\n            long\
    \ g6 = g;\n            long g7 = g;\n            long g8 = g;\n            long\
    \ g9 = g;\n            long g10 = g;\n            long g11 = g;\n            long\
    \ g12 = g;\n            long g13 = g;\n            long g14 = g;\n           \
    \ long g15 = g;\n            long g16 = g;\n            long g17 = g;\n      \
    \      long g18 = g;\n            long g19 = g;\n            long g20 = g;\n \
    \           long g21 = g;\n            long g22 = g;\n            long g23 = g;\n\
    \            long g24 = g;\n            long g25 = g;\n            long g26 =\
    \ g;\n            long g27 = g;\n            long g28 = g;\n            long g29\
    \ = g;\n            long g30 = g;\n            long g31 = g;\n            long\
    \ g32 = g;\n            long g33 = g;\n            long g34 = g;\n           \
    \ long g35 = g;\n            long g36 = g;\n            long g37 = g;\n      \
    \      long g38 = g;\n            long g39 = g;\n            long g40 = g;\n \
    \           long g41 = g;\n            long g42 = g;\n            long g43 = g;\n\
    \            long g44 = g;\n            long g45 = g;\n            long g46 =\
    \ g;\n            long g47 = g;\n            long g48 = g;\n            long g49\
    \ = g;\n            long g50 = g;\n            long g51 = g;\n            long\
    \ g52 = g;\n            long g53 = g;\n            long g54 = g;\n           \
    \ long g55 = g;\n            long g56 = g;\n            long g57 = g;\n      \
    \      long g58 = g;\n            long g59 = g;\n            long g60 = g;\n \
    \           long g61 = g;\n            long g62 = g;\n            long g63 = g;\n\
    \            long g64 = g;\n            long g65 = g;\n            long g66 =\
    \ g;\n            long g67 = g;\n            long g68 = g;\n            long g69\
    \ = g;\n            long g70 = g;\n\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))));\n  \
    \  Debug.Assert(Compare((new List<long>(new long[]{(long)0L, (long)0L, (long)0L,\
    \ (long)0L, (long)0L, (long)0L})), (new List<long>(new long[]{(long)0L, (long)0L,\
    \ (long)0L, (long)0L, (long)0L, (long)0L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))));\n    Debug.Assert(Compare((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (new List<long>(new long[]{(long)-1L,\
    \ (long)-2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,\
    \ (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L, (long)2L,\
    \ (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)0L,\
    \ (long)0L, (long)1L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpgfjx41ni.cs(91,5): error CS0106: The modifier ''public'' is not valid
    for this item

    /tmp/tmpgfjx41ni.cs(98,2): error CS1513: } expected

    '
  timestamp: 1659976335
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // I think we all remember that feeling when the result of\
    \ some long-awaited\n    // event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    // definitely worth noting down and comparing.\n\
    \    // Your task is to determine if a person correctly guessed the results of\
    \ a number of matches.\n    // You are given two arrays of scores and guesses\
    \ of equal length, where each index shows a match. \n    // Return an array of\
    \ the same length denoting how far off each guess was. If they have guessed correctly,\n\
    \    // the value is 0, and if not, the value is the absolute difference between\
    \ the guess and the score.\n    // example:\n    public static List<long> Compare(List<long>\
    \ game, List<long> guess) {\n        List<long> result = new List<long>();\n \
    \       long score;\n        long guess;\n        long diff;\n        bool correct;\n\
    \        foreach (var item in game) {\n            score = item;\n           \
    \ guess = guess[game.IndexOf(item)]; // guesses are in same order as game\n  \
    \          diff = guess - score;\n            correct = diff < 0 ? diff > 0 :\
    \ diff == 0;\n            result.Add(correct ? diff : Math.Abs(diff));\n     \
    \   }\n        return result;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L, (long)5L, (long)1L})), (new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)2L, (long)-2L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))));\n    Debug.Assert(Compare((new\
    \ List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L})),\
    \ (new List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L,\
    \ (long)0L}))).Equals((new List<long>(new long[]{(long)0L, (long)0L, (long)0L,\
    \ (long)0L, (long)0L, (long)0L}))));\n    Debug.Assert(Compare((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L})), (new List<long>(new long[]{(long)-1L,\
    \ (long)-2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,\
    \ (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L, (long)2L,\
    \ (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)0L,\
    \ (long)0L, (long)1L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpptvt40jk.cs(20,14): error CS0136: A local or parameter named ''guess''
    cannot be declared in this scope because that name is used in an enclosing local
    scope to define a local or parameter

    /tmp/tmpptvt40jk.cs(25,21): error CS0021: Cannot apply indexing with [] to an
    expression of type ''long''

    /tmp/tmpptvt40jk.cs(25,21): error CS0165: Use of unassigned local variable ''guess''

    '
  timestamp: 1659976336
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // I think we all remember that feeling when the result of\
    \ some long-awaited\n    // event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    // definitely worth noting down and comparing.\n\
    \    // Your task is to determine if a person correctly guessed the results of\
    \ a number of matches.\n    // You are given two arrays of scores and guesses\
    \ of equal length, where each index shows a match. \n    // Return an array of\
    \ the same length denoting how far off each guess was. If they have guessed correctly,\n\
    \    // the value is 0, and if not, the value is the absolute difference between\
    \ the guess and the score.\n    // example:\n    public static List<long> Compare(List<long>\
    \ game, List<long> guess) {\n        List<long> result = new List<long>();\n \
    \       long score;\n        long guess;\n        long diff;\n        bool correct;\n\
    \        foreach (var item in game) {\n            score = item;\n           \
    \ guess = guess[game.IndexOf(item)]; // get the guess from the index\n       \
    \     diff = guess - score;\n            correct = guess == score;\n         \
    \   result.Add(diff * correct);\n        }\n        return result;\n    }\n  \
    \  public static void Main(string[] args) {\n    Debug.Assert(Compare((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))));\n\
    \    Debug.Assert(Compare((new List<long>(new long[]{(long)0L, (long)0L, (long)0L,\
    \ (long)0L, (long)0L, (long)0L})), (new List<long>(new long[]{(long)0L, (long)0L,\
    \ (long)0L, (long)0L, (long)0L, (long)0L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))));\n    Debug.Assert(Compare((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (new List<long>(new long[]{(long)-1L,\
    \ (long)-2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,\
    \ (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L, (long)2L,\
    \ (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)0L,\
    \ (long)0L, (long)1L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpb8uuahvu.cs(20,14): error CS0136: A local or parameter named ''guess''
    cannot be declared in this scope because that name is used in an enclosing local
    scope to define a local or parameter

    /tmp/tmpb8uuahvu.cs(25,21): error CS0021: Cannot apply indexing with [] to an
    expression of type ''long''

    /tmp/tmpb8uuahvu.cs(28,24): error CS0019: Operator ''*'' cannot be applied to
    operands of type ''long'' and ''bool''

    /tmp/tmpb8uuahvu.cs(25,21): error CS0165: Use of unassigned local variable ''guess''

    '
  timestamp: 1659976336
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // I think we all remember that feeling when the result of\
    \ some long-awaited\n    // event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    // definitely worth noting down and comparing.\n\
    \    // Your task is to determine if a person correctly guessed the results of\
    \ a number of matches.\n    // You are given two arrays of scores and guesses\
    \ of equal length, where each index shows a match. \n    // Return an array of\
    \ the same length denoting how far off each guess was. If they have guessed correctly,\n\
    \    // the value is 0, and if not, the value is the absolute difference between\
    \ the guess and the score.\n    // example:\n    public static List<long> Compare(List<long>\
    \ game, List<long> guess) {\n        var result = new List<long>();\n        foreach\
    \ (var g in game) {\n            var guess = guess.FirstOrDefault(x => x == g);\n\
    \            if (guess == null)\n                result.Add(0);\n            else\n\
    \                result.Add(Math.Abs(g - guess));\n        }\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Compare((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})),\
    \ (new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L,\
    \ (long)-2L}))).Equals((new List<long>(new long[]{(long)0L, (long)0L, (long)0L,\
    \ (long)0L, (long)3L, (long)3L}))));\n    Debug.Assert(Compare((new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L})), (new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))));\n\
    \    Debug.Assert(Compare((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})),\
    \ (new List<long>(new long[]{(long)-1L, (long)-2L, (long)-3L}))).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)4L, (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L,\
    \ (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)0L, (long)0L, (long)1L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpopv8e2c4.cs(20,17): error CS0136: A local or parameter named ''guess''
    cannot be declared in this scope because that name is used in an enclosing local
    scope to define a local or parameter

    /tmp/tmpopv8e2c4.cs(20,25): error CS0841: Cannot use local variable ''guess''
    before it is declared

    '
  timestamp: 1659976336
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // I think we all remember that feeling when the result of\
    \ some long-awaited\n    // event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    // definitely worth noting down and comparing.\n\
    \    // Your task is to determine if a person correctly guessed the results of\
    \ a number of matches.\n    // You are given two arrays of scores and guesses\
    \ of equal length, where each index shows a match. \n    // Return an array of\
    \ the same length denoting how far off each guess was. If they have guessed correctly,\n\
    \    // the value is 0, and if not, the value is the absolute difference between\
    \ the guess and the score.\n    // example:\n    public static List<long> Compare(List<long>\
    \ game, List<long> guess) {\n        // TODO: implement this method\n        List<long>\
    \ result = new List<long>();\n        long total = 0;\n        long score = 0;\n\
    \        long guess = 0;\n        long diff = 0;\n        foreach (var item in\
    \ game) {\n            total += item;\n        }\n        foreach (var item in\
    \ guess) {\n            score += item;\n        }\n        foreach (var item in\
    \ game) {\n            guess = item;\n            diff = guess - score;\n    \
    \        result.Add(diff);\n        }\n        return result;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Compare((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))));\n\
    \    Debug.Assert(Compare((new List<long>(new long[]{(long)0L, (long)0L, (long)0L,\
    \ (long)0L, (long)0L, (long)0L})), (new List<long>(new long[]{(long)0L, (long)0L,\
    \ (long)0L, (long)0L, (long)0L, (long)0L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))));\n    Debug.Assert(Compare((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (new List<long>(new long[]{(long)-1L,\
    \ (long)-2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,\
    \ (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L, (long)2L,\
    \ (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)0L,\
    \ (long)0L, (long)1L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpcu8nje2v.cs(22,14): error CS0136: A local or parameter named ''guess''
    cannot be declared in this scope because that name is used in an enclosing local
    scope to define a local or parameter

    /tmp/tmpcu8nje2v.cs(27,30): error CS1579: foreach statement cannot operate on
    variables of type ''long'' because ''long'' does not contain a public instance
    definition for ''GetEnumerator''

    '
  timestamp: 1659976336
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // I think we all remember that feeling when the result of\
    \ some long-awaited\n    // event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    // definitely worth noting down and comparing.\n\
    \    // Your task is to determine if a person correctly guessed the results of\
    \ a number of matches.\n    // You are given two arrays of scores and guesses\
    \ of equal length, where each index shows a match. \n    // Return an array of\
    \ the same length denoting how far off each guess was. If they have guessed correctly,\n\
    \    // the value is 0, and if not, the value is the absolute difference between\
    \ the guess and the score.\n    // example:\n    public static List<long> Compare(List<long>\
    \ game, List<long> guess) {\n        List<long> result = new List<long>();\n \
    \       long score;\n        long guess;\n        bool correct;\n        bool\
    \ same;\n        long diff;\n        long diff2;\n        long diff3;\n      \
    \  long diff4;\n        long diff5;\n        long diff6;\n        long diff7;\n\
    \        long diff8;\n        long diff9;\n        long diff10;\n        long\
    \ diff11;\n        long diff12;\n        long diff13;\n        long diff14;\n\
    \        long diff15;\n        long diff16;\n        long diff17;\n        long\
    \ diff18;\n        long diff19;\n        long diff20;\n        long diff21;\n\
    \        long diff22;\n        long diff23;\n        long diff24;\n        long\
    \ diff25;\n        long diff26;\n        long diff27;\n        long diff28;\n\
    \        long diff29;\n        long diff30;\n        long diff31;\n        long\
    \ diff32;\n        long diff33;\n        long diff34;\n        long diff35;\n\
    \        long diff36;\n        long diff37;\n        long diff38;\n        long\
    \ diff39;\n        long diff40;\n        long diff41;\n        long diff42;\n\
    \        long diff43;\n        long diff44;\n        long diff45;\n        long\
    \ diff46;\n        long diff47;\n        long diff48;\n        long diff49;\n\
    \        long diff50;\n        long diff51;\n        long diff52;\n        long\
    \ diff53;\n        long diff54;\n        long diff55;\n        long diff56;\n\
    \        long diff57;\n        long diff58;\n        long diff59;\n        long\
    \ diff60;\n        long diff61;\n        long diff62;\n        long diff63;\n\
    \        long diff64;\n        long diff65;\n        long diff66;\n        long\
    \ diff67;\n        long diff68;\n        long diff69;\n        long diff70;\n\
    \        long diff71;\n        long diff72;\n        long diff73;\n        long\
    \ diff74;\n        long diff75;\n        long diff76;\n        long diff77;\n\
    \        long diff78;\n        long diff79;\n        long diff80;\n        long\
    \ diff81;\n        long diff82;\n        long diff83;\n        long diff84\n \
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Compare((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})),\
    \ (new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L,\
    \ (long)-2L}))).Equals((new List<long>(new long[]{(long)0L, (long)0L, (long)0L,\
    \ (long)0L, (long)3L, (long)3L}))));\n    Debug.Assert(Compare((new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L})), (new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))));\n\
    \    Debug.Assert(Compare((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})),\
    \ (new List<long>(new long[]{(long)-1L, (long)-2L, (long)-3L}))).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)4L, (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L,\
    \ (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)0L, (long)0L, (long)1L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp3dvveig5.cs(106,20): error CS1002: ; expected

    '
  timestamp: 1659976336
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // I think we all remember that feeling when the result of\
    \ some long-awaited\n    // event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    // definitely worth noting down and comparing.\n\
    \    // Your task is to determine if a person correctly guessed the results of\
    \ a number of matches.\n    // You are given two arrays of scores and guesses\
    \ of equal length, where each index shows a match. \n    // Return an array of\
    \ the same length denoting how far off each guess was. If they have guessed correctly,\n\
    \    // the value is 0, and if not, the value is the absolute difference between\
    \ the guess and the score.\n    // example:\n    public static List<long> Compare(List<long>\
    \ game, List<long> guess) {\n        // TODO: implement this method\n    }\n \
    \   public static void Main(string[] args) {\n    Debug.Assert(Compare((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))));\n\
    \    Debug.Assert(Compare((new List<long>(new long[]{(long)0L, (long)0L, (long)0L,\
    \ (long)0L, (long)0L, (long)0L})), (new List<long>(new long[]{(long)0L, (long)0L,\
    \ (long)0L, (long)0L, (long)0L, (long)0L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))));\n    Debug.Assert(Compare((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (new List<long>(new long[]{(long)-1L,\
    \ (long)-2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,\
    \ (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L, (long)2L,\
    \ (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)0L,\
    \ (long)0L, (long)1L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpqxfeyd93.cs(17,30): error CS0161: ''Problem.Compare(List<long>, List<long>)'':
    not all code paths return a value

    '
  timestamp: 1659976336
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // I think we all remember that feeling when the result of\
    \ some long-awaited\n    // event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    // definitely worth noting down and comparing.\n\
    \    // Your task is to determine if a person correctly guessed the results of\
    \ a number of matches.\n    // You are given two arrays of scores and guesses\
    \ of equal length, where each index shows a match. \n    // Return an array of\
    \ the same length denoting how far off each guess was. If they have guessed correctly,\n\
    \    // the value is 0, and if not, the value is the absolute difference between\
    \ the guess and the score.\n    // example:\n    public static List<long> Compare(List<long>\
    \ game, List<long> guess) {\n        List<long> result = new List<long>();\n \
    \       long score = 0;\n        long guess = 0;\n        foreach (var item in\
    \ game) {\n            score += item;\n        }\n        foreach (var item in\
    \ guess) {\n            guess += item;\n        }\n        if (score == guess)\
    \ {\n            result.Add(0);\n        } else {\n            result.Add(Math.Abs(score\
    \ - guess));\n        }\n        return result;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))));\n  \
    \  Debug.Assert(Compare((new List<long>(new long[]{(long)0L, (long)0L, (long)0L,\
    \ (long)0L, (long)0L, (long)0L})), (new List<long>(new long[]{(long)0L, (long)0L,\
    \ (long)0L, (long)0L, (long)0L, (long)0L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))));\n    Debug.Assert(Compare((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (new List<long>(new long[]{(long)-1L,\
    \ (long)-2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,\
    \ (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L, (long)2L,\
    \ (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)0L,\
    \ (long)0L, (long)1L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmprpfg2_ab.cs(20,14): error CS0136: A local or parameter named ''guess''
    cannot be declared in this scope because that name is used in an enclosing local
    scope to define a local or parameter

    /tmp/tmprpfg2_ab.cs(24,30): error CS1579: foreach statement cannot operate on
    variables of type ''long'' because ''long'' does not contain a public instance
    definition for ''GetEnumerator''

    '
  timestamp: 1659976336
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // I think we all remember that feeling when the result of\
    \ some long-awaited\n    // event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    // definitely worth noting down and comparing.\n\
    \    // Your task is to determine if a person correctly guessed the results of\
    \ a number of matches.\n    // You are given two arrays of scores and guesses\
    \ of equal length, where each index shows a match. \n    // Return an array of\
    \ the same length denoting how far off each guess was. If they have guessed correctly,\n\
    \    // the value is 0, and if not, the value is the absolute difference between\
    \ the guess and the score.\n    // example:\n    public static List<long> Compare(List<long>\
    \ game, List<long> guess) {\n        List<long> result = new List<long>();\n \
    \       long score;\n        long guess;\n        long diff;\n        bool correct\
    \ = false;\n        foreach(long g in game) {\n            score = g;\n      \
    \      foreach(long g in guess) {\n                guess = g;\n              \
    \  diff = score - guess;\n                if(diff < 0) {\n                   \
    \ diff = -diff;\n                }\n                result.Add(diff);\n      \
    \      }\n        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))));\n  \
    \  Debug.Assert(Compare((new List<long>(new long[]{(long)0L, (long)0L, (long)0L,\
    \ (long)0L, (long)0L, (long)0L})), (new List<long>(new long[]{(long)0L, (long)0L,\
    \ (long)0L, (long)0L, (long)0L, (long)0L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))));\n    Debug.Assert(Compare((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (new List<long>(new long[]{(long)-1L,\
    \ (long)-2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,\
    \ (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L, (long)2L,\
    \ (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)0L,\
    \ (long)0L, (long)1L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpfunnhbuz.cs(20,14): error CS0136: A local or parameter named ''guess''
    cannot be declared in this scope because that name is used in an enclosing local
    scope to define a local or parameter

    /tmp/tmpfunnhbuz.cs(25,31): error CS1579: foreach statement cannot operate on
    variables of type ''long'' because ''long'' does not contain a public instance
    definition for ''GetEnumerator''

    /tmp/tmpfunnhbuz.cs(25,26): error CS0136: A local or parameter named ''g'' cannot
    be declared in this scope because that name is used in an enclosing local scope
    to define a local or parameter

    /tmp/tmpfunnhbuz.cs(25,31): error CS0165: Use of unassigned local variable ''guess''

    /tmp/tmpfunnhbuz.cs(22,14): warning CS0219: The variable ''correct'' is assigned
    but its value is never used

    '
  timestamp: 1659976336
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // I think we all remember that feeling when the result of\
    \ some long-awaited\n    // event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    // definitely worth noting down and comparing.\n\
    \    // Your task is to determine if a person correctly guessed the results of\
    \ a number of matches.\n    // You are given two arrays of scores and guesses\
    \ of equal length, where each index shows a match. \n    // Return an array of\
    \ the same length denoting how far off each guess was. If they have guessed correctly,\n\
    \    // the value is 0, and if not, the value is the absolute difference between\
    \ the guess and the score.\n    // example:\n    public static List<long> Compare(List<long>\
    \ game, List<long> guess) {\n        var result = new List<long>();\n        game.ForEach(x\
    \ => result.Add(Math.Abs(x - guess[game.IndexOf(x)])));\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Compare((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})),\
    \ (new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L,\
    \ (long)-2L}))).Equals((new List<long>(new long[]{(long)0L, (long)0L, (long)0L,\
    \ (long)0L, (long)3L, (long)3L}))));\n    Debug.Assert(Compare((new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L})), (new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))));\n\
    \    Debug.Assert(Compare((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})),\
    \ (new List<long>(new long[]{(long)-1L, (long)-2L, (long)-3L}))).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)4L, (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L,\
    \ (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)0L, (long)0L, (long)1L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <de1b5ce296924b7e90e8363df13e2834>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <de1b5ce296924b7e90e8363df13e2834>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976337
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // I think we all remember that feeling when the result of\
    \ some long-awaited\n    // event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    // definitely worth noting down and comparing.\n\
    \    // Your task is to determine if a person correctly guessed the results of\
    \ a number of matches.\n    // You are given two arrays of scores and guesses\
    \ of equal length, where each index shows a match. \n    // Return an array of\
    \ the same length denoting how far off each guess was. If they have guessed correctly,\n\
    \    // the value is 0, and if not, the value is the absolute difference between\
    \ the guess and the score.\n    // example:\n    public static List<long> Compare(List<long>\
    \ game, List<long> guess) {\n        // Your code here\n        List<long> result\
    \ = new List<long>();\n        foreach (var item in game) {\n            result.Add(Math.Abs(item\
    \ - guess[game.IndexOf(item)]);\n        }\n        return result;\n    }\n  \
    \  public static void Main(string[] args) {\n    Debug.Assert(Compare((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))));\n\
    \    Debug.Assert(Compare((new List<long>(new long[]{(long)0L, (long)0L, (long)0L,\
    \ (long)0L, (long)0L, (long)0L})), (new List<long>(new long[]{(long)0L, (long)0L,\
    \ (long)0L, (long)0L, (long)0L, (long)0L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))));\n    Debug.Assert(Compare((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (new List<long>(new long[]{(long)-1L,\
    \ (long)-2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,\
    \ (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L, (long)2L,\
    \ (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)0L,\
    \ (long)0L, (long)1L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpk_nig78d.cs(21,66): error CS1026: ) expected

    '
  timestamp: 1659976336
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // I think we all remember that feeling when the result of\
    \ some long-awaited\n    // event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    // definitely worth noting down and comparing.\n\
    \    // Your task is to determine if a person correctly guessed the results of\
    \ a number of matches.\n    // You are given two arrays of scores and guesses\
    \ of equal length, where each index shows a match. \n    // Return an array of\
    \ the same length denoting how far off each guess was. If they have guessed correctly,\n\
    \    // the value is 0, and if not, the value is the absolute difference between\
    \ the guess and the score.\n    // example:\n    public static List<long> Compare(List<long>\
    \ game, List<long> guess) {\n        List<long> result = new List<long>();\n \
    \       foreach (var g in game) {\n            long diff = Math.Abs(g - guess[game.IndexOf(g)]);\n\
    \            result.Add(diff);\n        }\n        return result;\n    }\n   \
    \ public static void Main(string[] args) {\n    Debug.Assert(Compare((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))));\n\
    \    Debug.Assert(Compare((new List<long>(new long[]{(long)0L, (long)0L, (long)0L,\
    \ (long)0L, (long)0L, (long)0L})), (new List<long>(new long[]{(long)0L, (long)0L,\
    \ (long)0L, (long)0L, (long)0L, (long)0L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))));\n    Debug.Assert(Compare((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (new List<long>(new long[]{(long)-1L,\
    \ (long)-2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,\
    \ (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L, (long)2L,\
    \ (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)0L,\
    \ (long)0L, (long)1L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <4a222c961c1848619c982f9dc41ed54a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <4a222c961c1848619c982f9dc41ed54a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976337
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // I think we all remember that feeling when the result of\
    \ some long-awaited\n    // event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    // definitely worth noting down and comparing.\n\
    \    // Your task is to determine if a person correctly guessed the results of\
    \ a number of matches.\n    // You are given two arrays of scores and guesses\
    \ of equal length, where each index shows a match. \n    // Return an array of\
    \ the same length denoting how far off each guess was. If they have guessed correctly,\n\
    \    // the value is 0, and if not, the value is the absolute difference between\
    \ the guess and the score.\n    // example:\n    public static List<long> Compare(List<long>\
    \ game, List<long> guess) {\n        var result = new List<long>();\n        foreach\
    \ (var g in guess) {\n            var diff = Math.Abs(g - game[game.IndexOf(g)]);\n\
    \            result.Add(diff);\n        }\n        return result;\n    }\n   \
    \ public static void Main(string[] args) {\n    Debug.Assert(Compare((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))));\n\
    \    Debug.Assert(Compare((new List<long>(new long[]{(long)0L, (long)0L, (long)0L,\
    \ (long)0L, (long)0L, (long)0L})), (new List<long>(new long[]{(long)0L, (long)0L,\
    \ (long)0L, (long)0L, (long)0L, (long)0L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))));\n    Debug.Assert(Compare((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (new List<long>(new long[]{(long)-1L,\
    \ (long)-2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,\
    \ (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L, (long)2L,\
    \ (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)0L,\
    \ (long)0L, (long)1L}))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out\
    \ of range. Must be non-negative and less than the size of the collection.\nParameter\
    \ name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Compare\
    \ (System.Collections.Generic.List`1[T] game, System.Collections.Generic.List`1[T]\
    \ guess) [0x00023] in <469d0e9ff4c04622be1ff09c4a688852>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x0002d] in <469d0e9ff4c04622be1ff09c4a688852>:0 \n\
    [ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index was\
    \ out of range. Must be non-negative and less than the size of the collection.\n\
    Parameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Compare\
    \ (System.Collections.Generic.List`1[T] game, System.Collections.Generic.List`1[T]\
    \ guess) [0x00023] in <469d0e9ff4c04622be1ff09c4a688852>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x0002d] in <469d0e9ff4c04622be1ff09c4a688852>:0 \n"
  stdout: ''
  timestamp: 1659976337
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // I think we all remember that feeling when the result of\
    \ some long-awaited\n    // event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    // definitely worth noting down and comparing.\n\
    \    // Your task is to determine if a person correctly guessed the results of\
    \ a number of matches.\n    // You are given two arrays of scores and guesses\
    \ of equal length, where each index shows a match. \n    // Return an array of\
    \ the same length denoting how far off each guess was. If they have guessed correctly,\n\
    \    // the value is 0, and if not, the value is the absolute difference between\
    \ the guess and the score.\n    // example:\n    public static List<long> Compare(List<long>\
    \ game, List<long> guess) {\n        // TODO: Implement this method\n        List<long>\
    \ result = new List<long>();\n        long score = 0;\n        long guess = 0;\n\
    \        long difference = 0;\n        foreach (var item in game) {\n        \
    \    score = item;\n            foreach (var item2 in guess) {\n             \
    \   guess = item2;\n                difference = Math.Abs(guess - score);\n  \
    \              result.Add(difference);\n            }\n        }\n        return\
    \ result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Compare((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})),\
    \ (new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L,\
    \ (long)-2L}))).Equals((new List<long>(new long[]{(long)0L, (long)0L, (long)0L,\
    \ (long)0L, (long)3L, (long)3L}))));\n    Debug.Assert(Compare((new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L})), (new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))));\n\
    \    Debug.Assert(Compare((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})),\
    \ (new List<long>(new long[]{(long)-1L, (long)-2L, (long)-3L}))).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)4L, (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L,\
    \ (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)0L, (long)0L, (long)1L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpd6vmbw9e.cs(21,14): error CS0136: A local or parameter named ''guess''
    cannot be declared in this scope because that name is used in an enclosing local
    scope to define a local or parameter

    /tmp/tmpd6vmbw9e.cs(25,35): error CS1579: foreach statement cannot operate on
    variables of type ''long'' because ''long'' does not contain a public instance
    definition for ''GetEnumerator''

    '
  timestamp: 1659976336
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // I think we all remember that feeling when the result of\
    \ some long-awaited\n    // event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    // definitely worth noting down and comparing.\n\
    \    // Your task is to determine if a person correctly guessed the results of\
    \ a number of matches.\n    // You are given two arrays of scores and guesses\
    \ of equal length, where each index shows a match. \n    // Return an array of\
    \ the same length denoting how far off each guess was. If they have guessed correctly,\n\
    \    // the value is 0, and if not, the value is the absolute difference between\
    \ the guess and the score.\n    // example:\n    public static List<long> Compare(List<long>\
    \ game, List<long> guess) {\n        var result = new List<long>();\n        foreach\
    \ (var g in game) {\n            var guess = guess.Where(x => x == g).FirstOrDefault();\n\
    \            if (guess == null) {\n                result.Add(0);\n          \
    \  } else {\n                result.Add(Math.Abs(g - guess));\n            }\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))));\n  \
    \  Debug.Assert(Compare((new List<long>(new long[]{(long)0L, (long)0L, (long)0L,\
    \ (long)0L, (long)0L, (long)0L})), (new List<long>(new long[]{(long)0L, (long)0L,\
    \ (long)0L, (long)0L, (long)0L, (long)0L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))));\n    Debug.Assert(Compare((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (new List<long>(new long[]{(long)-1L,\
    \ (long)-2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,\
    \ (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L, (long)2L,\
    \ (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)0L,\
    \ (long)0L, (long)1L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpg5ulzmy_.cs(20,17): error CS0136: A local or parameter named ''guess''
    cannot be declared in this scope because that name is used in an enclosing local
    scope to define a local or parameter

    /tmp/tmpg5ulzmy_.cs(20,25): error CS0841: Cannot use local variable ''guess''
    before it is declared

    '
  timestamp: 1659976337
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // I think we all remember that feeling when the result of\
    \ some long-awaited\n    // event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    // definitely worth noting down and comparing.\n\
    \    // Your task is to determine if a person correctly guessed the results of\
    \ a number of matches.\n    // You are given two arrays of scores and guesses\
    \ of equal length, where each index shows a match. \n    // Return an array of\
    \ the same length denoting how far off each guess was. If they have guessed correctly,\n\
    \    // the value is 0, and if not, the value is the absolute difference between\
    \ the guess and the score.\n    // example:\n    public static List<long> Compare(List<long>\
    \ game, List<long> guess) {\n        List<long> result = new List<long>();\n \
    \       long score = 0;\n        long difference = 0;\n        long total = 0;\n\
    \        foreach (long g in game) {\n            total += g;\n        }\n    \
    \    foreach (long g in guess) {\n            total -= g;\n        }\n       \
    \ foreach (long g in guess) {\n            difference = Math.Abs(g - score);\n\
    \            result.Add(difference);\n        }\n        return result;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(Compare((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))));\n\
    \    Debug.Assert(Compare((new List<long>(new long[]{(long)0L, (long)0L, (long)0L,\
    \ (long)0L, (long)0L, (long)0L})), (new List<long>(new long[]{(long)0L, (long)0L,\
    \ (long)0L, (long)0L, (long)0L, (long)0L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))));\n    Debug.Assert(Compare((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (new List<long>(new long[]{(long)-1L,\
    \ (long)-2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,\
    \ (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L, (long)2L,\
    \ (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)0L,\
    \ (long)0L, (long)1L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <ff36f05b6f3642d7bb34b65cb22220ab>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <ff36f05b6f3642d7bb34b65cb22220ab>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976337
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // I think we all remember that feeling when the result of\
    \ some long-awaited\n    // event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    // definitely worth noting down and comparing.\n\
    \    // Your task is to determine if a person correctly guessed the results of\
    \ a number of matches.\n    // You are given two arrays of scores and guesses\
    \ of equal length, where each index shows a match. \n    // Return an array of\
    \ the same length denoting how far off each guess was. If they have guessed correctly,\n\
    \    // the value is 0, and if not, the value is the absolute difference between\
    \ the guess and the score.\n    // example:\n    public static List<long> Compare(List<long>\
    \ game, List<long> guess) {\n        List<long> result = new List<long>();\n \
    \       long score;\n        long guess;\n        long diff;\n        bool correct;\n\
    \        foreach (var item in game) {\n            score = item;\n           \
    \ guess = guess[game.IndexOf(item)]; // get the guess from the index\n       \
    \     diff = guess - score; // get the difference between the guess and the score\n\
    \            correct = diff < 0 ? false : true;\n            result.Add(correct\
    \ ? diff : -diff);\n        }\n        return result;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))));\n  \
    \  Debug.Assert(Compare((new List<long>(new long[]{(long)0L, (long)0L, (long)0L,\
    \ (long)0L, (long)0L, (long)0L})), (new List<long>(new long[]{(long)0L, (long)0L,\
    \ (long)0L, (long)0L, (long)0L, (long)0L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))));\n    Debug.Assert(Compare((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (new List<long>(new long[]{(long)-1L,\
    \ (long)-2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,\
    \ (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L, (long)2L,\
    \ (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)0L,\
    \ (long)0L, (long)1L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp25pdu_46.cs(20,14): error CS0136: A local or parameter named ''guess''
    cannot be declared in this scope because that name is used in an enclosing local
    scope to define a local or parameter

    /tmp/tmp25pdu_46.cs(25,21): error CS0021: Cannot apply indexing with [] to an
    expression of type ''long''

    /tmp/tmp25pdu_46.cs(25,21): error CS0165: Use of unassigned local variable ''guess''

    '
  timestamp: 1659976337
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // I think we all remember that feeling when the result of\
    \ some long-awaited\n    // event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    // definitely worth noting down and comparing.\n\
    \    // Your task is to determine if a person correctly guessed the results of\
    \ a number of matches.\n    // You are given two arrays of scores and guesses\
    \ of equal length, where each index shows a match. \n    // Return an array of\
    \ the same length denoting how far off each guess was. If they have guessed correctly,\n\
    \    // the value is 0, and if not, the value is the absolute difference between\
    \ the guess and the score.\n    // example:\n    public static List<long> Compare(List<long>\
    \ game, List<long> guess) {\n        var result = new List<long>();\n        foreach\
    \ (var g in guess) {\n            var diff = g - game.FirstOrDefault(x => x ==\
    \ g);\n            if (diff == 0) {\n                result.Add(0);\n        \
    \    } else {\n                result.Add(diff);\n            }\n        }\n \
    \       return result;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(Compare((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L, (long)5L, (long)1L})), (new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)2L, (long)-2L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))));\n    Debug.Assert(Compare((new\
    \ List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L})),\
    \ (new List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L,\
    \ (long)0L}))).Equals((new List<long>(new long[]{(long)0L, (long)0L, (long)0L,\
    \ (long)0L, (long)0L, (long)0L}))));\n    Debug.Assert(Compare((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L})), (new List<long>(new long[]{(long)-1L,\
    \ (long)-2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,\
    \ (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L, (long)2L,\
    \ (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)0L,\
    \ (long)0L, (long)1L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <f74eca37cdc042b4985db8e6cfd9e5a8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <f74eca37cdc042b4985db8e6cfd9e5a8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976337
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // I think we all remember that feeling when the result of\
    \ some long-awaited\n    // event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    // definitely worth noting down and comparing.\n\
    \    // Your task is to determine if a person correctly guessed the results of\
    \ a number of matches.\n    // You are given two arrays of scores and guesses\
    \ of equal length, where each index shows a match. \n    // Return an array of\
    \ the same length denoting how far off each guess was. If they have guessed correctly,\n\
    \    // the value is 0, and if not, the value is the absolute difference between\
    \ the guess and the score.\n    // example:\n    public static List<long> Compare(List<long>\
    \ game, List<long> guess) {\n        List<long> result = new List<long>();\n \
    \       long score = 0;\n        long guess = 0;\n        long difference = 0;\n\
    \        bool correct = false;\n        foreach (var item in game) {\n       \
    \     score += item;\n        }\n        foreach (var item in guess) {\n     \
    \       guess += item;\n        }\n        guess = Math.Abs(guess);\n        foreach\
    \ (var item in game) {\n            difference = item - guess;\n            if\
    \ (difference == 0) {\n                correct = true;\n            }\n      \
    \      result.Add(difference);\n        }\n        if (correct) {\n          \
    \  result.Add(0);\n        }\n        return result;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))));\n  \
    \  Debug.Assert(Compare((new List<long>(new long[]{(long)0L, (long)0L, (long)0L,\
    \ (long)0L, (long)0L, (long)0L})), (new List<long>(new long[]{(long)0L, (long)0L,\
    \ (long)0L, (long)0L, (long)0L, (long)0L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))));\n    Debug.Assert(Compare((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (new List<long>(new long[]{(long)-1L,\
    \ (long)-2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,\
    \ (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L, (long)2L,\
    \ (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)0L,\
    \ (long)0L, (long)1L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp8_c5zbnt.cs(20,14): error CS0136: A local or parameter named ''guess''
    cannot be declared in this scope because that name is used in an enclosing local
    scope to define a local or parameter

    /tmp/tmp8_c5zbnt.cs(26,30): error CS1579: foreach statement cannot operate on
    variables of type ''long'' because ''long'' does not contain a public instance
    definition for ''GetEnumerator''

    '
  timestamp: 1659976337
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // I think we all remember that feeling when the result of\
    \ some long-awaited\n    // event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    // definitely worth noting down and comparing.\n\
    \    // Your task is to determine if a person correctly guessed the results of\
    \ a number of matches.\n    // You are given two arrays of scores and guesses\
    \ of equal length, where each index shows a match. \n    // Return an array of\
    \ the same length denoting how far off each guess was. If they have guessed correctly,\n\
    \    // the value is 0, and if not, the value is the absolute difference between\
    \ the guess and the score.\n    // example:\n    public static List<long> Compare(List<long>\
    \ game, List<long> guess) {\n        List<long> result = new List<long>();\n \
    \       long score = 0;\n        long diff = 0;\n        foreach (long g in game)\
    \ {\n            score += g;\n        }\n        foreach (long g in guess) {\n\
    \            diff += g - score;\n        }\n        result.Add(diff);\n      \
    \  return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Compare((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})),\
    \ (new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L,\
    \ (long)-2L}))).Equals((new List<long>(new long[]{(long)0L, (long)0L, (long)0L,\
    \ (long)0L, (long)3L, (long)3L}))));\n    Debug.Assert(Compare((new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L})), (new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))));\n\
    \    Debug.Assert(Compare((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})),\
    \ (new List<long>(new long[]{(long)-1L, (long)-2L, (long)-3L}))).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)4L, (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L,\
    \ (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)0L, (long)0L, (long)1L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8d9030caf2554e9c9db98128e579e2a0>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8d9030caf2554e9c9db98128e579e2a0>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976337
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // I think we all remember that feeling when the result of\
    \ some long-awaited\n    // event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    // definitely worth noting down and comparing.\n\
    \    // Your task is to determine if a person correctly guessed the results of\
    \ a number of matches.\n    // You are given two arrays of scores and guesses\
    \ of equal length, where each index shows a match. \n    // Return an array of\
    \ the same length denoting how far off each guess was. If they have guessed correctly,\n\
    \    // the value is 0, and if not, the value is the absolute difference between\
    \ the guess and the score.\n    // example:\n    public static List<long> Compare(List<long>\
    \ game, List<long> guess) {\n        // Your code here\n        var result = game.Zip(guess,\
    \ (a, b) => a - b).ToList();\n        return result;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))));\n  \
    \  Debug.Assert(Compare((new List<long>(new long[]{(long)0L, (long)0L, (long)0L,\
    \ (long)0L, (long)0L, (long)0L})), (new List<long>(new long[]{(long)0L, (long)0L,\
    \ (long)0L, (long)0L, (long)0L, (long)0L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))));\n    Debug.Assert(Compare((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (new List<long>(new long[]{(long)-1L,\
    \ (long)-2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,\
    \ (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L, (long)2L,\
    \ (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)0L,\
    \ (long)0L, (long)1L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <82766a9d47f24197a4506b819a2c1cd9>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <82766a9d47f24197a4506b819a2c1cd9>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976337
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // I think we all remember that feeling when the result of\
    \ some long-awaited\n    // event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    // definitely worth noting down and comparing.\n\
    \    // Your task is to determine if a person correctly guessed the results of\
    \ a number of matches.\n    // You are given two arrays of scores and guesses\
    \ of equal length, where each index shows a match. \n    // Return an array of\
    \ the same length denoting how far off each guess was. If they have guessed correctly,\n\
    \    // the value is 0, and if not, the value is the absolute difference between\
    \ the guess and the score.\n    // example:\n    public static List<long> Compare(List<long>\
    \ game, List<long> guess) {\n        // Your code here\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))));\n  \
    \  Debug.Assert(Compare((new List<long>(new long[]{(long)0L, (long)0L, (long)0L,\
    \ (long)0L, (long)0L, (long)0L})), (new List<long>(new long[]{(long)0L, (long)0L,\
    \ (long)0L, (long)0L, (long)0L, (long)0L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))));\n    Debug.Assert(Compare((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (new List<long>(new long[]{(long)-1L,\
    \ (long)-2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,\
    \ (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L, (long)2L,\
    \ (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)0L,\
    \ (long)0L, (long)1L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpvkv85hi0.cs(17,30): error CS0161: ''Problem.Compare(List<long>, List<long>)'':
    not all code paths return a value

    '
  timestamp: 1659976337
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // I think we all remember that feeling when the result of\
    \ some long-awaited\n    // event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    // definitely worth noting down and comparing.\n\
    \    // Your task is to determine if a person correctly guessed the results of\
    \ a number of matches.\n    // You are given two arrays of scores and guesses\
    \ of equal length, where each index shows a match. \n    // Return an array of\
    \ the same length denoting how far off each guess was. If they have guessed correctly,\n\
    \    // the value is 0, and if not, the value is the absolute difference between\
    \ the guess and the score.\n    // example:\n    public static List<long> Compare(List<long>\
    \ game, List<long> guess) {\n        List<long> result = new List<long>();\n \
    \       foreach (var g in game) {\n            long diff = Math.Abs(g - guess[game.IndexOf(g)]);\n\
    \            result.Add(diff);\n        }\n        return result;\n    }\n   \
    \ public static void Main(string[] args) {\n    Debug.Assert(Compare((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))));\n\
    \    Debug.Assert(Compare((new List<long>(new long[]{(long)0L, (long)0L, (long)0L,\
    \ (long)0L, (long)0L, (long)0L})), (new List<long>(new long[]{(long)0L, (long)0L,\
    \ (long)0L, (long)0L, (long)0L, (long)0L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))));\n    Debug.Assert(Compare((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (new List<long>(new long[]{(long)-1L,\
    \ (long)-2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,\
    \ (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L, (long)2L,\
    \ (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)0L,\
    \ (long)0L, (long)1L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <4a222c961c1848619c982f9dc41ed54a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <4a222c961c1848619c982f9dc41ed54a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976337
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // I think we all remember that feeling when the result of\
    \ some long-awaited\n    // event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    // definitely worth noting down and comparing.\n\
    \    // Your task is to determine if a person correctly guessed the results of\
    \ a number of matches.\n    // You are given two arrays of scores and guesses\
    \ of equal length, where each index shows a match. \n    // Return an array of\
    \ the same length denoting how far off each guess was. If they have guessed correctly,\n\
    \    // the value is 0, and if not, the value is the absolute difference between\
    \ the guess and the score.\n    // example:\n    public static List<long> Compare(List<long>\
    \ game, List<long> guess) {\n        List<long> result = new List<long>();\n \
    \       long total = 0;\n        foreach (long g in game) {\n            total\
    \ += g;\n        }\n        foreach (long g in guess) {\n            total -=\
    \ g;\n        }\n        foreach (long g in guess) {\n            result.Add(Math.Abs(g\
    \ - total));\n        }\n        return result;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))));\n  \
    \  Debug.Assert(Compare((new List<long>(new long[]{(long)0L, (long)0L, (long)0L,\
    \ (long)0L, (long)0L, (long)0L})), (new List<long>(new long[]{(long)0L, (long)0L,\
    \ (long)0L, (long)0L, (long)0L, (long)0L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))));\n    Debug.Assert(Compare((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (new List<long>(new long[]{(long)-1L,\
    \ (long)-2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,\
    \ (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L, (long)2L,\
    \ (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)0L,\
    \ (long)0L, (long)1L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <4908de31b66540cfbb75f12fcabeb3eb>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <4908de31b66540cfbb75f12fcabeb3eb>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976337
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // I think we all remember that feeling when the result of\
    \ some long-awaited\n    // event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    // definitely worth noting down and comparing.\n\
    \    // Your task is to determine if a person correctly guessed the results of\
    \ a number of matches.\n    // You are given two arrays of scores and guesses\
    \ of equal length, where each index shows a match. \n    // Return an array of\
    \ the same length denoting how far off each guess was. If they have guessed correctly,\n\
    \    // the value is 0, and if not, the value is the absolute difference between\
    \ the guess and the score.\n    // example:\n    public static List<long> Compare(List<long>\
    \ game, List<long> guess) {\n        // TODO: Complete this method\n        List<long>\
    \ result = new List<long>();\n        long score;\n        long guess;\n     \
    \   long diff;\n        for(int i = 0; i < game.Count; i++) {\n            score\
    \ = game[i];\n            guess = guess[i];\n            diff = guess - score;\n\
    \            result.Add(diff);\n        }\n        return result;\n    }\n   \
    \ public static void Main(string[] args) {\n    Debug.Assert(Compare((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))));\n\
    \    Debug.Assert(Compare((new List<long>(new long[]{(long)0L, (long)0L, (long)0L,\
    \ (long)0L, (long)0L, (long)0L})), (new List<long>(new long[]{(long)0L, (long)0L,\
    \ (long)0L, (long)0L, (long)0L, (long)0L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))));\n    Debug.Assert(Compare((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (new List<long>(new long[]{(long)-1L,\
    \ (long)-2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,\
    \ (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L, (long)2L,\
    \ (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)0L,\
    \ (long)0L, (long)1L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpzh38p66p.cs(21,14): error CS0136: A local or parameter named ''guess''
    cannot be declared in this scope because that name is used in an enclosing local
    scope to define a local or parameter

    /tmp/tmpzh38p66p.cs(25,21): error CS0021: Cannot apply indexing with [] to an
    expression of type ''long''

    /tmp/tmpzh38p66p.cs(25,21): error CS0165: Use of unassigned local variable ''guess''

    '
  timestamp: 1659976337
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // I think we all remember that feeling when the result of\
    \ some long-awaited\n    // event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    // definitely worth noting down and comparing.\n\
    \    // Your task is to determine if a person correctly guessed the results of\
    \ a number of matches.\n    // You are given two arrays of scores and guesses\
    \ of equal length, where each index shows a match. \n    // Return an array of\
    \ the same length denoting how far off each guess was. If they have guessed correctly,\n\
    \    // the value is 0, and if not, the value is the absolute difference between\
    \ the guess and the score.\n    // example:\n    public static List<long> Compare(List<long>\
    \ game, List<long> guess) {\n        List<long> result = new List<long>();\n \
    \       long score = 0;\n        foreach (long g in game) {\n            score\
    \ += g;\n        }\n        foreach (long g in guess) {\n            score -=\
    \ g;\n        }\n        if (score == 0) {\n            result.Add(0);\n     \
    \   } else {\n            result.Add(Math.Abs(score));\n        }\n        return\
    \ result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Compare((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})),\
    \ (new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L,\
    \ (long)-2L}))).Equals((new List<long>(new long[]{(long)0L, (long)0L, (long)0L,\
    \ (long)0L, (long)3L, (long)3L}))));\n    Debug.Assert(Compare((new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L})), (new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))));\n\
    \    Debug.Assert(Compare((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})),\
    \ (new List<long>(new long[]{(long)-1L, (long)-2L, (long)-3L}))).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)4L, (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L,\
    \ (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)0L, (long)0L, (long)1L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <357fc465dee9424fab3fb52af822f636>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <357fc465dee9424fab3fb52af822f636>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976335
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // I think we all remember that feeling when the result of\
    \ some long-awaited\n    // event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    // definitely worth noting down and comparing.\n\
    \    // Your task is to determine if a person correctly guessed the results of\
    \ a number of matches.\n    // You are given two arrays of scores and guesses\
    \ of equal length, where each index shows a match. \n    // Return an array of\
    \ the same length denoting how far off each guess was. If they have guessed correctly,\n\
    \    // the value is 0, and if not, the value is the absolute difference between\
    \ the guess and the score.\n    // example:\n    public static List<long> Compare(List<long>\
    \ game, List<long> guess) {\n        List<long> result = new List<long>();\n \
    \       foreach (long score in game) {\n            long diff = score - guess[game.IndexOf(score)];\n\
    \            result.Add(diff);\n        }\n        return result;\n    }\n   \
    \ public static void Main(string[] args) {\n    Debug.Assert(Compare((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))));\n\
    \    Debug.Assert(Compare((new List<long>(new long[]{(long)0L, (long)0L, (long)0L,\
    \ (long)0L, (long)0L, (long)0L})), (new List<long>(new long[]{(long)0L, (long)0L,\
    \ (long)0L, (long)0L, (long)0L, (long)0L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))));\n    Debug.Assert(Compare((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (new List<long>(new long[]{(long)-1L,\
    \ (long)-2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,\
    \ (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L, (long)2L,\
    \ (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)0L,\
    \ (long)0L, (long)1L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <4f1fd904590740dcaa20a1536c166b48>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <4f1fd904590740dcaa20a1536c166b48>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976337
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // I think we all remember that feeling when the result of\
    \ some long-awaited\n    // event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    // definitely worth noting down and comparing.\n\
    \    // Your task is to determine if a person correctly guessed the results of\
    \ a number of matches.\n    // You are given two arrays of scores and guesses\
    \ of equal length, where each index shows a match. \n    // Return an array of\
    \ the same length denoting how far off each guess was. If they have guessed correctly,\n\
    \    // the value is 0, and if not, the value is the absolute difference between\
    \ the guess and the score.\n    // example:\n    public static List<long> Compare(List<long>\
    \ game, List<long> guess) {\n        List<long> result = new List<long>();\n \
    \       long score;\n        long guess;\n        long diff;\n        bool correct;\n\
    \        bool found = false;\n        foreach (long g in game) {\n           \
    \ found = false;\n            foreach (long g in guess) {\n                guess\
    \ = g;\n                score = g;\n                diff = g - score;\n      \
    \          if (diff < 0) {\n                    diff = -diff;\n              \
    \  }\n                correct = diff == 0;\n                if (correct) {\n \
    \                   found = true;\n                    break;\n              \
    \  }\n            }\n            if (found) {\n                result.Add(0);\n\
    \            } else {\n                result.Add(diff);\n            }\n    \
    \    }\n        return result;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L, (long)5L, (long)1L})), (new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)2L, (long)-2L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))));\n    Debug.Assert(Compare((new\
    \ List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L})),\
    \ (new List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L,\
    \ (long)0L}))).Equals((new List<long>(new long[]{(long)0L, (long)0L, (long)0L,\
    \ (long)0L, (long)0L, (long)0L}))));\n    Debug.Assert(Compare((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L})), (new List<long>(new long[]{(long)-1L,\
    \ (long)-2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,\
    \ (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L, (long)2L,\
    \ (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)0L,\
    \ (long)0L, (long)1L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpd_0va0_h.cs(20,14): error CS0136: A local or parameter named ''guess''
    cannot be declared in this scope because that name is used in an enclosing local
    scope to define a local or parameter

    /tmp/tmpd_0va0_h.cs(26,32): error CS1579: foreach statement cannot operate on
    variables of type ''long'' because ''long'' does not contain a public instance
    definition for ''GetEnumerator''

    /tmp/tmpd_0va0_h.cs(26,27): error CS0136: A local or parameter named ''g'' cannot
    be declared in this scope because that name is used in an enclosing local scope
    to define a local or parameter

    /tmp/tmpd_0va0_h.cs(26,32): error CS0165: Use of unassigned local variable ''guess''

    /tmp/tmpd_0va0_h.cs(42,28): error CS0165: Use of unassigned local variable ''diff''

    '
  timestamp: 1659976337
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // I think we all remember that feeling when the result of\
    \ some long-awaited\n    // event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    // definitely worth noting down and comparing.\n\
    \    // Your task is to determine if a person correctly guessed the results of\
    \ a number of matches.\n    // You are given two arrays of scores and guesses\
    \ of equal length, where each index shows a match. \n    // Return an array of\
    \ the same length denoting how far off each guess was. If they have guessed correctly,\n\
    \    // the value is 0, and if not, the value is the absolute difference between\
    \ the guess and the score.\n    // example:\n    public static List<long> Compare(List<long>\
    \ game, List<long> guess) {\n        var result = new List<long>();\n        foreach\
    \ (var g in game) {\n            var guess = guess.Where(x => x == g).FirstOrDefault();\n\
    \            if (guess == null) {\n                result.Add(0);\n          \
    \  } else {\n                result.Add(Math.Abs(g - guess));\n            }\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))));\n  \
    \  Debug.Assert(Compare((new List<long>(new long[]{(long)0L, (long)0L, (long)0L,\
    \ (long)0L, (long)0L, (long)0L})), (new List<long>(new long[]{(long)0L, (long)0L,\
    \ (long)0L, (long)0L, (long)0L, (long)0L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))));\n    Debug.Assert(Compare((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (new List<long>(new long[]{(long)-1L,\
    \ (long)-2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,\
    \ (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L, (long)2L,\
    \ (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)0L,\
    \ (long)0L, (long)1L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpg5ulzmy_.cs(20,17): error CS0136: A local or parameter named ''guess''
    cannot be declared in this scope because that name is used in an enclosing local
    scope to define a local or parameter

    /tmp/tmpg5ulzmy_.cs(20,25): error CS0841: Cannot use local variable ''guess''
    before it is declared

    '
  timestamp: 1659976337
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // I think we all remember that feeling when the result of\
    \ some long-awaited\n    // event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    // definitely worth noting down and comparing.\n\
    \    // Your task is to determine if a person correctly guessed the results of\
    \ a number of matches.\n    // You are given two arrays of scores and guesses\
    \ of equal length, where each index shows a match. \n    // Return an array of\
    \ the same length denoting how far off each guess was. If they have guessed correctly,\n\
    \    // the value is 0, and if not, the value is the absolute difference between\
    \ the guess and the score.\n    // example:\n    public static List<long> Compare(List<long>\
    \ game, List<long> guess) {\n        List<long> result = new List<long>();\n \
    \       long score = 0;\n        long diff = 0;\n        foreach (long g in game)\
    \ {\n            score += g;\n            foreach (long g in guess) {\n      \
    \          diff += g - score;\n            }\n            result.Add(diff);\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))));\n  \
    \  Debug.Assert(Compare((new List<long>(new long[]{(long)0L, (long)0L, (long)0L,\
    \ (long)0L, (long)0L, (long)0L})), (new List<long>(new long[]{(long)0L, (long)0L,\
    \ (long)0L, (long)0L, (long)0L, (long)0L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))));\n    Debug.Assert(Compare((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (new List<long>(new long[]{(long)-1L,\
    \ (long)-2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,\
    \ (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L, (long)2L,\
    \ (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)0L,\
    \ (long)0L, (long)1L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmppwzumdz5.cs(23,27): error CS0136: A local or parameter named ''g'' cannot
    be declared in this scope because that name is used in an enclosing local scope
    to define a local or parameter

    '
  timestamp: 1659976337
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // I think we all remember that feeling when the result of\
    \ some long-awaited\n    // event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    // definitely worth noting down and comparing.\n\
    \    // Your task is to determine if a person correctly guessed the results of\
    \ a number of matches.\n    // You are given two arrays of scores and guesses\
    \ of equal length, where each index shows a match. \n    // Return an array of\
    \ the same length denoting how far off each guess was. If they have guessed correctly,\n\
    \    // the value is 0, and if not, the value is the absolute difference between\
    \ the guess and the score.\n    // example:\n    public static List<long> Compare(List<long>\
    \ game, List<long> guess) {\n        List<long> result = new List<long>();\n \
    \       long score;\n        long guess;\n        long diff;\n        foreach\
    \ (var g in game) {\n            score = g;\n            foreach (var g in guess)\
    \ {\n                guess = g;\n                diff = score - guess;\n     \
    \           if (diff < 0) {\n                    result.Add(diff);\n         \
    \       }\n            }\n        }\n        return result;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Compare((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))));\n\
    \    Debug.Assert(Compare((new List<long>(new long[]{(long)0L, (long)0L, (long)0L,\
    \ (long)0L, (long)0L, (long)0L})), (new List<long>(new long[]{(long)0L, (long)0L,\
    \ (long)0L, (long)0L, (long)0L, (long)0L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))));\n    Debug.Assert(Compare((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (new List<long>(new long[]{(long)-1L,\
    \ (long)-2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,\
    \ (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L, (long)2L,\
    \ (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)0L,\
    \ (long)0L, (long)1L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpflrlg5dz.cs(20,14): error CS0136: A local or parameter named ''guess''
    cannot be declared in this scope because that name is used in an enclosing local
    scope to define a local or parameter

    /tmp/tmpflrlg5dz.cs(24,31): error CS1579: foreach statement cannot operate on
    variables of type ''long'' because ''long'' does not contain a public instance
    definition for ''GetEnumerator''

    /tmp/tmpflrlg5dz.cs(24,26): error CS0136: A local or parameter named ''g'' cannot
    be declared in this scope because that name is used in an enclosing local scope
    to define a local or parameter

    /tmp/tmpflrlg5dz.cs(24,31): error CS0165: Use of unassigned local variable ''guess''

    '
  timestamp: 1659976337
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // I think we all remember that feeling when the result of\
    \ some long-awaited\n    // event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    // definitely worth noting down and comparing.\n\
    \    // Your task is to determine if a person correctly guessed the results of\
    \ a number of matches.\n    // You are given two arrays of scores and guesses\
    \ of equal length, where each index shows a match. \n    // Return an array of\
    \ the same length denoting how far off each guess was. If they have guessed correctly,\n\
    \    // the value is 0, and if not, the value is the absolute difference between\
    \ the guess and the score.\n    // example:\n    public static List<long> Compare(List<long>\
    \ game, List<long> guess) {\n        List<long> result = new List<long>();\n \
    \       long score;\n        long guess;\n        long diff;\n        bool correct;\n\
    \        bool found;\n        bool found2;\n        bool found3;\n        bool\
    \ found4;\n        bool found5;\n        bool found6;\n        bool found7;\n\
    \        bool found8;\n        bool found9;\n        bool found10;\n        bool\
    \ found11;\n        bool found12;\n        bool found13;\n        bool found14;\n\
    \        bool found15;\n        bool found16;\n        bool found17;\n       \
    \ bool found18;\n        bool found19;\n        bool found20;\n        bool found21;\n\
    \        bool found22;\n        bool found23;\n        bool found24;\n       \
    \ bool found25;\n        bool found26;\n        bool found27;\n        bool found28;\n\
    \        bool found29;\n        bool found30;\n        bool found31;\n       \
    \ bool found32;\n        bool found33;\n        bool found34;\n        bool found35;\n\
    \        bool found36;\n        bool found37;\n        bool found38;\n       \
    \ bool found39;\n        bool found40;\n        bool found41;\n        bool found42;\n\
    \        bool found43;\n        bool found44;\n        bool found45;\n       \
    \ bool found46;\n        bool found47;\n        bool found48;\n        bool found49;\n\
    \        bool found50;\n        bool found51;\n        bool found52;\n       \
    \ bool found53;\n        bool found54;\n        bool found55;\n        bool found56;\n\
    \        bool found57;\n        bool found58;\n        bool found59;\n       \
    \ bool found60;\n        bool found61;\n        bool found62;\n        bool found63;\n\
    \        bool found64;\n        bool found65;\n        bool found66;\n       \
    \ bool found67;\n        bool found68;\n        bool found69;\n        bool found70;\n\
    \        bool found71;\n        bool found72;\n        bool found73;\n       \
    \ bool found74;\n        bool found75;\n        bool found76;\n        bool found77;\n\
    \        bool found78;\n        bool found79;\n        bool found80;\n       \
    \ bool found81;\n        bool found82;\n        bool found83;\n        bool found84\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Compare((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})),\
    \ (new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L,\
    \ (long)-2L}))).Equals((new List<long>(new long[]{(long)0L, (long)0L, (long)0L,\
    \ (long)0L, (long)3L, (long)3L}))));\n    Debug.Assert(Compare((new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L})), (new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))));\n\
    \    Debug.Assert(Compare((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})),\
    \ (new List<long>(new long[]{(long)-1L, (long)-2L, (long)-3L}))).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)4L, (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L,\
    \ (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)0L, (long)0L, (long)1L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp0i23z703.cs(106,21): error CS1002: ; expected

    '
  timestamp: 1659976337
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // I think we all remember that feeling when the result of\
    \ some long-awaited\n    // event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    // definitely worth noting down and comparing.\n\
    \    // Your task is to determine if a person correctly guessed the results of\
    \ a number of matches.\n    // You are given two arrays of scores and guesses\
    \ of equal length, where each index shows a match. \n    // Return an array of\
    \ the same length denoting how far off each guess was. If they have guessed correctly,\n\
    \    // the value is 0, and if not, the value is the absolute difference between\
    \ the guess and the score.\n    // example:\n    public static List<long> Compare(List<long>\
    \ game, List<long> guess) {\n        var result = new List<long>();\n        var\
    \ gameLength = game.Count;\n        var guessLength = guess.Count;\n        if\
    \ (gameLength != guessLength) {\n            throw new ArgumentException(\"The\
    \ two lists must have the same length\");\n        }\n        for (int i = 0;\
    \ i < gameLength; i++) {\n            var gameScore = game[i];\n            var\
    \ guessScore = guess[i];\n            if (gameScore == guessScore) {\n       \
    \         result.Add(0);\n            } else {\n                result.Add(Math.Abs(gameScore\
    \ - guessScore));\n            }\n        }\n        return result;\n    }\n \
    \   public static void Main(string[] args) {\n    Debug.Assert(Compare((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))));\n\
    \    Debug.Assert(Compare((new List<long>(new long[]{(long)0L, (long)0L, (long)0L,\
    \ (long)0L, (long)0L, (long)0L})), (new List<long>(new long[]{(long)0L, (long)0L,\
    \ (long)0L, (long)0L, (long)0L, (long)0L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))));\n    Debug.Assert(Compare((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (new List<long>(new long[]{(long)-1L,\
    \ (long)-2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,\
    \ (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L, (long)2L,\
    \ (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)0L,\
    \ (long)0L, (long)1L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <f0fb9bd14a2f495c9882cbe3e5d44b13>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <f0fb9bd14a2f495c9882cbe3e5d44b13>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976338
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // I think we all remember that feeling when the result of\
    \ some long-awaited\n    // event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    // definitely worth noting down and comparing.\n\
    \    // Your task is to determine if a person correctly guessed the results of\
    \ a number of matches.\n    // You are given two arrays of scores and guesses\
    \ of equal length, where each index shows a match. \n    // Return an array of\
    \ the same length denoting how far off each guess was. If they have guessed correctly,\n\
    \    // the value is 0, and if not, the value is the absolute difference between\
    \ the guess and the score.\n    // example:\n    public static List<long> Compare(List<long>\
    \ game, List<long> guess) {\n        List<long> result = new List<long>();\n \
    \       long diff = 0;\n        foreach (long g in game) {\n            foreach\
    \ (long g in guess) {\n                diff = g - g;\n                if (diff\
    \ < 0) {\n                    diff = -diff;\n                }\n             \
    \   result.Add(diff);\n            }\n        }\n        return result;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(Compare((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))));\n\
    \    Debug.Assert(Compare((new List<long>(new long[]{(long)0L, (long)0L, (long)0L,\
    \ (long)0L, (long)0L, (long)0L})), (new List<long>(new long[]{(long)0L, (long)0L,\
    \ (long)0L, (long)0L, (long)0L, (long)0L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))));\n    Debug.Assert(Compare((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (new List<long>(new long[]{(long)-1L,\
    \ (long)-2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,\
    \ (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L, (long)2L,\
    \ (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)0L,\
    \ (long)0L, (long)1L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpsvq04jrx.cs(21,27): error CS0136: A local or parameter named ''g'' cannot
    be declared in this scope because that name is used in an enclosing local scope
    to define a local or parameter

    '
  timestamp: 1659976337
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // I think we all remember that feeling when the result of\
    \ some long-awaited\n    // event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    // definitely worth noting down and comparing.\n\
    \    // Your task is to determine if a person correctly guessed the results of\
    \ a number of matches.\n    // You are given two arrays of scores and guesses\
    \ of equal length, where each index shows a match. \n    // Return an array of\
    \ the same length denoting how far off each guess was. If they have guessed correctly,\n\
    \    // the value is 0, and if not, the value is the absolute difference between\
    \ the guess and the score.\n    // example:\n    public static List<long> Compare(List<long>\
    \ game, List<long> guess) {\n        List<long> result = new List<long>();\n \
    \       long score;\n        long guess;\n        bool correct;\n        for (int\
    \ i = 0; i < game.Count; i++) {\n            score = game[i];\n            guess\
    \ = guess[i];\n            correct = guess == score;\n            result.Add(correct\
    \ ? 0 : Math.Abs(guess - score));\n        }\n        return result;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(Compare((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))));\n\
    \    Debug.Assert(Compare((new List<long>(new long[]{(long)0L, (long)0L, (long)0L,\
    \ (long)0L, (long)0L, (long)0L})), (new List<long>(new long[]{(long)0L, (long)0L,\
    \ (long)0L, (long)0L, (long)0L, (long)0L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))));\n    Debug.Assert(Compare((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (new List<long>(new long[]{(long)-1L,\
    \ (long)-2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,\
    \ (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L, (long)2L,\
    \ (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)0L,\
    \ (long)0L, (long)1L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpy96sw_ob.cs(20,14): error CS0136: A local or parameter named ''guess''
    cannot be declared in this scope because that name is used in an enclosing local
    scope to define a local or parameter

    /tmp/tmpy96sw_ob.cs(24,21): error CS0021: Cannot apply indexing with [] to an
    expression of type ''long''

    /tmp/tmpy96sw_ob.cs(24,21): error CS0165: Use of unassigned local variable ''guess''

    '
  timestamp: 1659976337
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // I think we all remember that feeling when the result of\
    \ some long-awaited\n    // event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    // definitely worth noting down and comparing.\n\
    \    // Your task is to determine if a person correctly guessed the results of\
    \ a number of matches.\n    // You are given two arrays of scores and guesses\
    \ of equal length, where each index shows a match. \n    // Return an array of\
    \ the same length denoting how far off each guess was. If they have guessed correctly,\n\
    \    // the value is 0, and if not, the value is the absolute difference between\
    \ the guess and the score.\n    // example:\n    public static List<long> Compare(List<long>\
    \ game, List<long> guess) {\n        List<long> result = new List<long>();\n \
    \       foreach (long g in game) {\n            long guess = guess.FirstOrDefault(x\
    \ => x == g);\n            if (guess == g) {\n                result.Add(0);\n\
    \            } else {\n                result.Add(Math.Abs(guess - g));\n    \
    \        }\n        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))));\n  \
    \  Debug.Assert(Compare((new List<long>(new long[]{(long)0L, (long)0L, (long)0L,\
    \ (long)0L, (long)0L, (long)0L})), (new List<long>(new long[]{(long)0L, (long)0L,\
    \ (long)0L, (long)0L, (long)0L, (long)0L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))));\n    Debug.Assert(Compare((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (new List<long>(new long[]{(long)-1L,\
    \ (long)-2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,\
    \ (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L, (long)2L,\
    \ (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)0L,\
    \ (long)0L, (long)1L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp8415ncs2.cs(20,18): error CS0136: A local or parameter named ''guess''
    cannot be declared in this scope because that name is used in an enclosing local
    scope to define a local or parameter

    /tmp/tmp8415ncs2.cs(20,32): error CS1061: ''long'' does not contain a definition
    for ''FirstOrDefault'' and no accessible extension method ''FirstOrDefault'' accepting
    a first argument of type ''long'' could be found (are you missing a using directive
    or an assembly reference?)

    /tmp/tmp8415ncs2.cs(20,26): error CS0165: Use of unassigned local variable ''guess''

    '
  timestamp: 1659976334
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // I think we all remember that feeling when the result of\
    \ some long-awaited\n    // event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    // definitely worth noting down and comparing.\n\
    \    // Your task is to determine if a person correctly guessed the results of\
    \ a number of matches.\n    // You are given two arrays of scores and guesses\
    \ of equal length, where each index shows a match. \n    // Return an array of\
    \ the same length denoting how far off each guess was. If they have guessed correctly,\n\
    \    // the value is 0, and if not, the value is the absolute difference between\
    \ the guess and the score.\n    // example:\n    public static List<long> Compare(List<long>\
    \ game, List<long> guess) {\n        List<long> result = new List<long>();\n \
    \       long score = 0;\n        long difference = 0;\n        foreach (long guess\
    \ in guess) {\n            score = game.Sum(x => x);\n            difference =\
    \ guess - score;\n            result.Add(difference);\n        }\n        return\
    \ result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Compare((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})),\
    \ (new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L,\
    \ (long)-2L}))).Equals((new List<long>(new long[]{(long)0L, (long)0L, (long)0L,\
    \ (long)0L, (long)3L, (long)3L}))));\n    Debug.Assert(Compare((new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L})), (new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))));\n\
    \    Debug.Assert(Compare((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})),\
    \ (new List<long>(new long[]{(long)-1L, (long)-2L, (long)-3L}))).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)4L, (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L,\
    \ (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)0L, (long)0L, (long)1L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpdo0xoxe9.cs(21,23): error CS0136: A local or parameter named ''guess''
    cannot be declared in this scope because that name is used in an enclosing local
    scope to define a local or parameter

    '
  timestamp: 1659976335
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // I think we all remember that feeling when the result of\
    \ some long-awaited\n    // event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    // definitely worth noting down and comparing.\n\
    \    // Your task is to determine if a person correctly guessed the results of\
    \ a number of matches.\n    // You are given two arrays of scores and guesses\
    \ of equal length, where each index shows a match. \n    // Return an array of\
    \ the same length denoting how far off each guess was. If they have guessed correctly,\n\
    \    // the value is 0, and if not, the value is the absolute difference between\
    \ the guess and the score.\n    // example:\n    public static List<long> Compare(List<long>\
    \ game, List<long> guess) {\n        List<long> result = new List<long>();\n \
    \       foreach (long score in game) {\n            long guess = guess.FirstOrDefault(x\
    \ => x == score);\n            if (guess == score) {\n                result.Add(0);\n\
    \            } else {\n                result.Add(Math.Abs(score - guess));\n\
    \            }\n        }\n        return result;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))));\n  \
    \  Debug.Assert(Compare((new List<long>(new long[]{(long)0L, (long)0L, (long)0L,\
    \ (long)0L, (long)0L, (long)0L})), (new List<long>(new long[]{(long)0L, (long)0L,\
    \ (long)0L, (long)0L, (long)0L, (long)0L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))));\n    Debug.Assert(Compare((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (new List<long>(new long[]{(long)-1L,\
    \ (long)-2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,\
    \ (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L, (long)2L,\
    \ (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)0L,\
    \ (long)0L, (long)1L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpdg8qws7z.cs(20,18): error CS0136: A local or parameter named ''guess''
    cannot be declared in this scope because that name is used in an enclosing local
    scope to define a local or parameter

    /tmp/tmpdg8qws7z.cs(20,32): error CS1061: ''long'' does not contain a definition
    for ''FirstOrDefault'' and no accessible extension method ''FirstOrDefault'' accepting
    a first argument of type ''long'' could be found (are you missing a using directive
    or an assembly reference?)

    /tmp/tmpdg8qws7z.cs(20,26): error CS0165: Use of unassigned local variable ''guess''

    '
  timestamp: 1659976337
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // I think we all remember that feeling when the result of\
    \ some long-awaited\n    // event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    // definitely worth noting down and comparing.\n\
    \    // Your task is to determine if a person correctly guessed the results of\
    \ a number of matches.\n    // You are given two arrays of scores and guesses\
    \ of equal length, where each index shows a match. \n    // Return an array of\
    \ the same length denoting how far off each guess was. If they have guessed correctly,\n\
    \    // the value is 0, and if not, the value is the absolute difference between\
    \ the guess and the score.\n    // example:\n    public static List<long> Compare(List<long>\
    \ game, List<long> guess) {\n        List<long> result = new List<long>();\n \
    \       long score = 0;\n        long guess = 0;\n        foreach (var item in\
    \ game) {\n            score += item;\n        }\n        foreach (var item in\
    \ guess) {\n            guess += item;\n        }\n        if (score == guess)\
    \ {\n            result.Add(0);\n        } else {\n            result.Add(Math.Abs(score\
    \ - guess));\n        }\n        return result;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))));\n  \
    \  Debug.Assert(Compare((new List<long>(new long[]{(long)0L, (long)0L, (long)0L,\
    \ (long)0L, (long)0L, (long)0L})), (new List<long>(new long[]{(long)0L, (long)0L,\
    \ (long)0L, (long)0L, (long)0L, (long)0L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))));\n    Debug.Assert(Compare((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (new List<long>(new long[]{(long)-1L,\
    \ (long)-2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,\
    \ (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L, (long)2L,\
    \ (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)0L,\
    \ (long)0L, (long)1L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmprpfg2_ab.cs(20,14): error CS0136: A local or parameter named ''guess''
    cannot be declared in this scope because that name is used in an enclosing local
    scope to define a local or parameter

    /tmp/tmprpfg2_ab.cs(24,30): error CS1579: foreach statement cannot operate on
    variables of type ''long'' because ''long'' does not contain a public instance
    definition for ''GetEnumerator''

    '
  timestamp: 1659976336
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // I think we all remember that feeling when the result of\
    \ some long-awaited\n    // event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    // definitely worth noting down and comparing.\n\
    \    // Your task is to determine if a person correctly guessed the results of\
    \ a number of matches.\n    // You are given two arrays of scores and guesses\
    \ of equal length, where each index shows a match. \n    // Return an array of\
    \ the same length denoting how far off each guess was. If they have guessed correctly,\n\
    \    // the value is 0, and if not, the value is the absolute difference between\
    \ the guess and the score.\n    // example:\n    public static List<long> Compare(List<long>\
    \ game, List<long> guess) {\n        // Your code goes here\n        List<long>\
    \ result = new List<long>();\n        long score = 0;\n        long diff = 0;\n\
    \        long diff2 = 0;\n        long diff3 = 0;\n        long diff4 = 0;\n \
    \       long diff5 = 0;\n        long diff6 = 0;\n        long diff7 = 0;\n  \
    \      long diff8 = 0;\n        long diff9 = 0;\n        long diff10 = 0;\n  \
    \      long diff11 = 0;\n        long diff12 = 0;\n        long diff13 = 0;\n\
    \        long diff14 = 0;\n        long diff15 = 0;\n        long diff16 = 0;\n\
    \        long diff17 = 0;\n        long diff18 = 0;\n        long diff19 = 0;\n\
    \        long diff20 = 0;\n        long diff21 = 0;\n        long diff22 = 0;\n\
    \        long diff23 = 0;\n        long diff24 = 0;\n        long diff25 = 0;\n\
    \        long diff26 = 0;\n        long diff27 = 0;\n        long diff28 = 0;\n\
    \        long diff29 = 0;\n        long diff30 = 0;\n        long diff31 = 0;\n\
    \        long diff32 = 0;\n        long diff33 = 0;\n        long diff34 = 0;\n\
    \        long diff35 = 0;\n        long diff36 = 0;\n        long diff37 = 0;\n\
    \        long diff38 = 0;\n        long diff39 = 0;\n        long diff40 = 0;\n\
    \        long diff41 = 0;\n        long diff42 = 0;\n        long diff43 = 0;\n\
    \        long diff44 = 0;\n        long diff45 = 0;\n        long diff46 = 0;\n\
    \        long diff47 = 0;\n        long diff48 = 0;\n        long diff49 = 0;\n\
    \        long diff50 = 0;\n        long diff51 = 0;\n        long diff52 = 0;\n\
    \        long diff53 = 0;\n        long diff54 = 0;\n        long diff55 = 0;\n\
    \        long diff56 = 0;\n        long diff57 = 0;\n        long diff58 = 0;\n\
    \        long diff59 = 0;\n        long diff60 = 0;\n        long diff61 = 0;\n\
    \        long diff62 = 0;\n        long diff63 = 0;\n        long diff64 = 0;\n\
    \        long diff65 = 0;\n        long diff66 = 0;\n        long diff67 = 0;\n\
    \        long diff68 = 0;\n        long diff69 = 0;\n        long diff70 = 0;\n\
    \        long diff71 = 0;\n        long diff72 = 0;\n        long diff73 = 0;\n\
    \        long diff74 = 0;\n        long diff75 = 0;\n        long diff76 = 0;\n\
    \        long diff77 = 0;\n        long diff78 = 0;\n        long diff79 = 0;\n\
    \        long diff80 = 0;\n        long diff81 = 0;\n        long diff82 = 0;\n\
    \        long diff83\n    }\n    public static void Main(string[] args) {\n  \
    \  Debug.Assert(Compare((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L, (long)5L, (long)1L})), (new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)2L, (long)-2L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))));\n    Debug.Assert(Compare((new\
    \ List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L})),\
    \ (new List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L,\
    \ (long)0L}))).Equals((new List<long>(new long[]{(long)0L, (long)0L, (long)0L,\
    \ (long)0L, (long)0L, (long)0L}))));\n    Debug.Assert(Compare((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L})), (new List<long>(new long[]{(long)-1L,\
    \ (long)-2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,\
    \ (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L, (long)2L,\
    \ (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)0L,\
    \ (long)0L, (long)1L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpj5zvc_xf.cs(103,20): error CS1002: ; expected

    '
  timestamp: 1659976335
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // I think we all remember that feeling when the result of\
    \ some long-awaited\n    // event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    // definitely worth noting down and comparing.\n\
    \    // Your task is to determine if a person correctly guessed the results of\
    \ a number of matches.\n    // You are given two arrays of scores and guesses\
    \ of equal length, where each index shows a match. \n    // Return an array of\
    \ the same length denoting how far off each guess was. If they have guessed correctly,\n\
    \    // the value is 0, and if not, the value is the absolute difference between\
    \ the guess and the score.\n    // example:\n    public static List<long> Compare(List<long>\
    \ game, List<long> guess) {\n        List<long> result = new List<long>();\n \
    \       foreach (long g in game) {\n            long guess = guess.FirstOrDefault(x\
    \ => x == g);\n            if (guess == g) {\n                result.Add(0);\n\
    \            } else {\n                result.Add(Math.Abs(g - guess));\n    \
    \        }\n        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))));\n  \
    \  Debug.Assert(Compare((new List<long>(new long[]{(long)0L, (long)0L, (long)0L,\
    \ (long)0L, (long)0L, (long)0L})), (new List<long>(new long[]{(long)0L, (long)0L,\
    \ (long)0L, (long)0L, (long)0L, (long)0L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))));\n    Debug.Assert(Compare((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (new List<long>(new long[]{(long)-1L,\
    \ (long)-2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,\
    \ (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L, (long)2L,\
    \ (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)0L,\
    \ (long)0L, (long)1L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp3m0ib_wn.cs(20,18): error CS0136: A local or parameter named ''guess''
    cannot be declared in this scope because that name is used in an enclosing local
    scope to define a local or parameter

    /tmp/tmp3m0ib_wn.cs(20,32): error CS1061: ''long'' does not contain a definition
    for ''FirstOrDefault'' and no accessible extension method ''FirstOrDefault'' accepting
    a first argument of type ''long'' could be found (are you missing a using directive
    or an assembly reference?)

    /tmp/tmp3m0ib_wn.cs(20,26): error CS0165: Use of unassigned local variable ''guess''

    '
  timestamp: 1659976337
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // I think we all remember that feeling when the result of\
    \ some long-awaited\n    // event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    // definitely worth noting down and comparing.\n\
    \    // Your task is to determine if a person correctly guessed the results of\
    \ a number of matches.\n    // You are given two arrays of scores and guesses\
    \ of equal length, where each index shows a match. \n    // Return an array of\
    \ the same length denoting how far off each guess was. If they have guessed correctly,\n\
    \    // the value is 0, and if not, the value is the absolute difference between\
    \ the guess and the score.\n    // example:\n    public static List<long> Compare(List<long>\
    \ game, List<long> guess) {\n        // Your code here\n        List<long> result\
    \ = new List<long>();\n        long score = 0;\n        long diff = 0;\n     \
    \   foreach (long g in game) {\n            score += g;\n        }\n        foreach\
    \ (long g in guess) {\n            diff += g - score;\n        }\n        result.Add(diff);\n\
    \        return result;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(Compare((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L, (long)5L, (long)1L})), (new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)2L, (long)-2L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))));\n    Debug.Assert(Compare((new\
    \ List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L})),\
    \ (new List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L,\
    \ (long)0L}))).Equals((new List<long>(new long[]{(long)0L, (long)0L, (long)0L,\
    \ (long)0L, (long)0L, (long)0L}))));\n    Debug.Assert(Compare((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L})), (new List<long>(new long[]{(long)-1L,\
    \ (long)-2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,\
    \ (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L, (long)2L,\
    \ (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)0L,\
    \ (long)0L, (long)1L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <24e1286f8411418f9b4ccf222bdf9fc5>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <24e1286f8411418f9b4ccf222bdf9fc5>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976338
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // I think we all remember that feeling when the result of\
    \ some long-awaited\n    // event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    // definitely worth noting down and comparing.\n\
    \    // Your task is to determine if a person correctly guessed the results of\
    \ a number of matches.\n    // You are given two arrays of scores and guesses\
    \ of equal length, where each index shows a match. \n    // Return an array of\
    \ the same length denoting how far off each guess was. If they have guessed correctly,\n\
    \    // the value is 0, and if not, the value is the absolute difference between\
    \ the guess and the score.\n    // example:\n    public static List<long> Compare(List<long>\
    \ game, List<long> guess) {\n        List<long> result = new List<long>();\n \
    \       long score = 0;\n        long difference = 0;\n        foreach (long guess\
    \ in guess) {\n            score = game.Sum(x => x);\n            difference =\
    \ Math.Abs(guess - score);\n            result.Add(difference);\n        }\n \
    \       return result;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(Compare((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L, (long)5L, (long)1L})), (new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)2L, (long)-2L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))));\n    Debug.Assert(Compare((new\
    \ List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L})),\
    \ (new List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L,\
    \ (long)0L}))).Equals((new List<long>(new long[]{(long)0L, (long)0L, (long)0L,\
    \ (long)0L, (long)0L, (long)0L}))));\n    Debug.Assert(Compare((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L})), (new List<long>(new long[]{(long)-1L,\
    \ (long)-2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,\
    \ (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L, (long)2L,\
    \ (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)0L,\
    \ (long)0L, (long)1L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpcei6fsgc.cs(21,23): error CS0136: A local or parameter named ''guess''
    cannot be declared in this scope because that name is used in an enclosing local
    scope to define a local or parameter

    '
  timestamp: 1659976337
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // I think we all remember that feeling when the result of\
    \ some long-awaited\n    // event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    // definitely worth noting down and comparing.\n\
    \    // Your task is to determine if a person correctly guessed the results of\
    \ a number of matches.\n    // You are given two arrays of scores and guesses\
    \ of equal length, where each index shows a match. \n    // Return an array of\
    \ the same length denoting how far off each guess was. If they have guessed correctly,\n\
    \    // the value is 0, and if not, the value is the absolute difference between\
    \ the guess and the score.\n    // example:\n    public static List<long> Compare(List<long>\
    \ game, List<long> guess) {\n        List<long> result = new List<long>();\n \
    \       long score;\n        long guess;\n        long diff;\n        bool correct;\n\
    \        foreach (var item in game) {\n            score = item;\n           \
    \ correct = false;\n            foreach (var item2 in guess) {\n             \
    \   guess = item2;\n                diff = guess - score;\n                if\
    \ (diff < 0)\n                    diff = -diff;\n                if (diff == 0)\n\
    \                    correct = true;\n            }\n            result.Add(correct\
    \ ? 0 : diff);\n        }\n        return result;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))));\n  \
    \  Debug.Assert(Compare((new List<long>(new long[]{(long)0L, (long)0L, (long)0L,\
    \ (long)0L, (long)0L, (long)0L})), (new List<long>(new long[]{(long)0L, (long)0L,\
    \ (long)0L, (long)0L, (long)0L, (long)0L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))));\n    Debug.Assert(Compare((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (new List<long>(new long[]{(long)-1L,\
    \ (long)-2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,\
    \ (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L, (long)2L,\
    \ (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)0L,\
    \ (long)0L, (long)1L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpv4xkp4pc.cs(20,14): error CS0136: A local or parameter named ''guess''
    cannot be declared in this scope because that name is used in an enclosing local
    scope to define a local or parameter

    /tmp/tmpv4xkp4pc.cs(26,35): error CS1579: foreach statement cannot operate on
    variables of type ''long'' because ''long'' does not contain a public instance
    definition for ''GetEnumerator''

    /tmp/tmpv4xkp4pc.cs(26,35): error CS0165: Use of unassigned local variable ''guess''

    /tmp/tmpv4xkp4pc.cs(34,38): error CS0165: Use of unassigned local variable ''diff''

    '
  timestamp: 1659976337
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // I think we all remember that feeling when the result of\
    \ some long-awaited\n    // event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    // definitely worth noting down and comparing.\n\
    \    // Your task is to determine if a person correctly guessed the results of\
    \ a number of matches.\n    // You are given two arrays of scores and guesses\
    \ of equal length, where each index shows a match. \n    // Return an array of\
    \ the same length denoting how far off each guess was. If they have guessed correctly,\n\
    \    // the value is 0, and if not, the value is the absolute difference between\
    \ the guess and the score.\n    // example:\n    public static List<long> Compare(List<long>\
    \ game, List<long> guess) {\n        List<long> result = new List<long>();\n \
    \       long score = 0;\n        long guess = 0;\n        long difference = 0;\n\
    \        bool correct = false;\n        foreach (long g in game) {\n         \
    \   guess = g.ToString();\n            difference = g.ToString().CompareTo(guess.ToString());\n\
    \            if (difference == 0) {\n                correct = true;\n       \
    \     }\n            result.Add(difference);\n        }\n        if (correct)\
    \ {\n            result.Add(0);\n        }\n        return result;\n    }\n  \
    \  public static void Main(string[] args) {\n    Debug.Assert(Compare((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))));\n\
    \    Debug.Assert(Compare((new List<long>(new long[]{(long)0L, (long)0L, (long)0L,\
    \ (long)0L, (long)0L, (long)0L})), (new List<long>(new long[]{(long)0L, (long)0L,\
    \ (long)0L, (long)0L, (long)0L, (long)0L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))));\n    Debug.Assert(Compare((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (new List<long>(new long[]{(long)-1L,\
    \ (long)-2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,\
    \ (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L, (long)2L,\
    \ (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)0L,\
    \ (long)0L, (long)1L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp7jz8bv_w.cs(20,14): error CS0136: A local or parameter named ''guess''
    cannot be declared in this scope because that name is used in an enclosing local
    scope to define a local or parameter

    /tmp/tmp7jz8bv_w.cs(24,21): error CS0029: Cannot implicitly convert type ''string''
    to ''long''

    /tmp/tmp7jz8bv_w.cs(19,14): warning CS0219: The variable ''score'' is assigned
    but its value is never used

    '
  timestamp: 1659976338
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // I think we all remember that feeling when the result of\
    \ some long-awaited\n    // event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    // definitely worth noting down and comparing.\n\
    \    // Your task is to determine if a person correctly guessed the results of\
    \ a number of matches.\n    // You are given two arrays of scores and guesses\
    \ of equal length, where each index shows a match. \n    // Return an array of\
    \ the same length denoting how far off each guess was. If they have guessed correctly,\n\
    \    // the value is 0, and if not, the value is the absolute difference between\
    \ the guess and the score.\n    // example:\n    public static List<long> Compare(List<long>\
    \ game, List<long> guess) {\n        var result = new List<long>();\n        foreach\
    \ (var g in guess) {\n            result.Add(Math.Abs(g - game[game.IndexOf(g)]));\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))));\n  \
    \  Debug.Assert(Compare((new List<long>(new long[]{(long)0L, (long)0L, (long)0L,\
    \ (long)0L, (long)0L, (long)0L})), (new List<long>(new long[]{(long)0L, (long)0L,\
    \ (long)0L, (long)0L, (long)0L, (long)0L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))));\n    Debug.Assert(Compare((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (new List<long>(new long[]{(long)-1L,\
    \ (long)-2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,\
    \ (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L, (long)2L,\
    \ (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)0L,\
    \ (long)0L, (long)1L}))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out\
    \ of range. Must be non-negative and less than the size of the collection.\nParameter\
    \ name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Compare\
    \ (System.Collections.Generic.List`1[T] game, System.Collections.Generic.List`1[T]\
    \ guess) [0x00024] in <1ba9fa12f924417080564d53e2cb01cc>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x0002d] in <1ba9fa12f924417080564d53e2cb01cc>:0 \n\
    [ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index was\
    \ out of range. Must be non-negative and less than the size of the collection.\n\
    Parameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Compare\
    \ (System.Collections.Generic.List`1[T] game, System.Collections.Generic.List`1[T]\
    \ guess) [0x00024] in <1ba9fa12f924417080564d53e2cb01cc>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x0002d] in <1ba9fa12f924417080564d53e2cb01cc>:0 \n"
  stdout: ''
  timestamp: 1659976338
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // I think we all remember that feeling when the result of\
    \ some long-awaited\n    // event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    // definitely worth noting down and comparing.\n\
    \    // Your task is to determine if a person correctly guessed the results of\
    \ a number of matches.\n    // You are given two arrays of scores and guesses\
    \ of equal length, where each index shows a match. \n    // Return an array of\
    \ the same length denoting how far off each guess was. If they have guessed correctly,\n\
    \    // the value is 0, and if not, the value is the absolute difference between\
    \ the guess and the score.\n    // example:\n    public static List<long> Compare(List<long>\
    \ game, List<long> guess) {\n        // TODO: Implement this method\n        List<long>\
    \ result = new List<long>();\n        long score = 0;\n        long guess = 0;\n\
    \        foreach (var item in game) {\n            score = item;\n           \
    \ guess = guess[game.IndexOf(item)]; \n            result.Add(Math.Abs(guess -\
    \ score));\n        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))));\n  \
    \  Debug.Assert(Compare((new List<long>(new long[]{(long)0L, (long)0L, (long)0L,\
    \ (long)0L, (long)0L, (long)0L})), (new List<long>(new long[]{(long)0L, (long)0L,\
    \ (long)0L, (long)0L, (long)0L, (long)0L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))));\n    Debug.Assert(Compare((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (new List<long>(new long[]{(long)-1L,\
    \ (long)-2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,\
    \ (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L, (long)2L,\
    \ (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)0L,\
    \ (long)0L, (long)1L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp4ke1bwlj.cs(21,14): error CS0136: A local or parameter named ''guess''
    cannot be declared in this scope because that name is used in an enclosing local
    scope to define a local or parameter

    /tmp/tmp4ke1bwlj.cs(24,21): error CS0021: Cannot apply indexing with [] to an
    expression of type ''long''

    '
  timestamp: 1659976338
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // I think we all remember that feeling when the result of\
    \ some long-awaited\n    // event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    // definitely worth noting down and comparing.\n\
    \    // Your task is to determine if a person correctly guessed the results of\
    \ a number of matches.\n    // You are given two arrays of scores and guesses\
    \ of equal length, where each index shows a match. \n    // Return an array of\
    \ the same length denoting how far off each guess was. If they have guessed correctly,\n\
    \    // the value is 0, and if not, the value is the absolute difference between\
    \ the guess and the score.\n    // example:\n    public static List<long> Compare(List<long>\
    \ game, List<long> guess) {\n        List<long> result = new List<long>();\n \
    \       long score = 0;\n        long guess = 0;\n        foreach (long g in game)\
    \ {\n            guess = g.CompareTo(guess);\n            if (guess == 0) {\n\
    \                result.Add(0);\n            } else {\n                result.Add(guess\
    \ - score);\n            }\n            score = g;\n        }\n        return\
    \ result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Compare((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})),\
    \ (new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L,\
    \ (long)-2L}))).Equals((new List<long>(new long[]{(long)0L, (long)0L, (long)0L,\
    \ (long)0L, (long)3L, (long)3L}))));\n    Debug.Assert(Compare((new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L})), (new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))));\n\
    \    Debug.Assert(Compare((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})),\
    \ (new List<long>(new long[]{(long)-1L, (long)-2L, (long)-3L}))).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)4L, (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L,\
    \ (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)0L, (long)0L, (long)1L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp28t9zvj9.cs(20,14): error CS0136: A local or parameter named ''guess''
    cannot be declared in this scope because that name is used in an enclosing local
    scope to define a local or parameter

    '
  timestamp: 1659976338
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // I think we all remember that feeling when the result of\
    \ some long-awaited\n    // event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    // definitely worth noting down and comparing.\n\
    \    // Your task is to determine if a person correctly guessed the results of\
    \ a number of matches.\n    // You are given two arrays of scores and guesses\
    \ of equal length, where each index shows a match. \n    // Return an array of\
    \ the same length denoting how far off each guess was. If they have guessed correctly,\n\
    \    // the value is 0, and if not, the value is the absolute difference between\
    \ the guess and the score.\n    // example:\n    public static List<long> Compare(List<long>\
    \ game, List<long> guess) {\n        List<long> result = new List<long>();\n \
    \       long score = 0;\n        long guess = 0;\n        long diff = 0;\n   \
    \     foreach (var item in game) {\n            score = item;\n            guess\
    \ = guess[game.IndexOf(item)]; // get the guess from the list\n            diff\
    \ = guess - score; // get the difference between the guess and the score\n   \
    \         result.Add(diff);\n        }\n        return result;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Compare((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))));\n\
    \    Debug.Assert(Compare((new List<long>(new long[]{(long)0L, (long)0L, (long)0L,\
    \ (long)0L, (long)0L, (long)0L})), (new List<long>(new long[]{(long)0L, (long)0L,\
    \ (long)0L, (long)0L, (long)0L, (long)0L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))));\n    Debug.Assert(Compare((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (new List<long>(new long[]{(long)-1L,\
    \ (long)-2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,\
    \ (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L, (long)2L,\
    \ (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)0L,\
    \ (long)0L, (long)1L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp17k4dakp.cs(20,14): error CS0136: A local or parameter named ''guess''
    cannot be declared in this scope because that name is used in an enclosing local
    scope to define a local or parameter

    /tmp/tmp17k4dakp.cs(24,21): error CS0021: Cannot apply indexing with [] to an
    expression of type ''long''

    '
  timestamp: 1659976338
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // I think we all remember that feeling when the result of\
    \ some long-awaited\n    // event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    // definitely worth noting down and comparing.\n\
    \    // Your task is to determine if a person correctly guessed the results of\
    \ a number of matches.\n    // You are given two arrays of scores and guesses\
    \ of equal length, where each index shows a match. \n    // Return an array of\
    \ the same length denoting how far off each guess was. If they have guessed correctly,\n\
    \    // the value is 0, and if not, the value is the absolute difference between\
    \ the guess and the score.\n    // example:\n    public static List<long> Compare(List<long>\
    \ game, List<long> guess) {\n        List<long> result = new List<long>();\n \
    \       long score = 0;\n        long guess = 0;\n        long difference = 0;\n\
    \        foreach (long g in game) {\n            score = g;\n            foreach\
    \ (long g in guess) {\n                guess = g;\n                difference\
    \ = Math.Abs(guess - score);\n                result.Add(difference);\n      \
    \      }\n        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))));\n  \
    \  Debug.Assert(Compare((new List<long>(new long[]{(long)0L, (long)0L, (long)0L,\
    \ (long)0L, (long)0L, (long)0L})), (new List<long>(new long[]{(long)0L, (long)0L,\
    \ (long)0L, (long)0L, (long)0L, (long)0L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))));\n    Debug.Assert(Compare((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (new List<long>(new long[]{(long)-1L,\
    \ (long)-2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,\
    \ (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L, (long)2L,\
    \ (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)0L,\
    \ (long)0L, (long)1L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpfhnw02jn.cs(20,14): error CS0136: A local or parameter named ''guess''
    cannot be declared in this scope because that name is used in an enclosing local
    scope to define a local or parameter

    /tmp/tmpfhnw02jn.cs(24,32): error CS1579: foreach statement cannot operate on
    variables of type ''long'' because ''long'' does not contain a public instance
    definition for ''GetEnumerator''

    /tmp/tmpfhnw02jn.cs(24,27): error CS0136: A local or parameter named ''g'' cannot
    be declared in this scope because that name is used in an enclosing local scope
    to define a local or parameter

    '
  timestamp: 1659976335
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // I think we all remember that feeling when the result of\
    \ some long-awaited\n    // event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    // definitely worth noting down and comparing.\n\
    \    // Your task is to determine if a person correctly guessed the results of\
    \ a number of matches.\n    // You are given two arrays of scores and guesses\
    \ of equal length, where each index shows a match. \n    // Return an array of\
    \ the same length denoting how far off each guess was. If they have guessed correctly,\n\
    \    // the value is 0, and if not, the value is the absolute difference between\
    \ the guess and the score.\n    // example:\n    public static List<long> Compare(List<long>\
    \ game, List<long> guess) {\n        List<long> result = new List<long>();\n \
    \       long score = 0;\n        long guess = 0;\n        long diff = 0;\n   \
    \     foreach (long g in game) {\n            score = g;\n            foreach\
    \ (long g in guess) {\n                guess = g;\n                diff = g -\
    \ score;\n                result.Add(diff);\n            }\n        }\n      \
    \  return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Compare((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})),\
    \ (new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L,\
    \ (long)-2L}))).Equals((new List<long>(new long[]{(long)0L, (long)0L, (long)0L,\
    \ (long)0L, (long)3L, (long)3L}))));\n    Debug.Assert(Compare((new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L})), (new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))));\n\
    \    Debug.Assert(Compare((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})),\
    \ (new List<long>(new long[]{(long)-1L, (long)-2L, (long)-3L}))).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)4L, (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L,\
    \ (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)0L, (long)0L, (long)1L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpbhb07k5o.cs(20,14): error CS0136: A local or parameter named ''guess''
    cannot be declared in this scope because that name is used in an enclosing local
    scope to define a local or parameter

    /tmp/tmpbhb07k5o.cs(24,32): error CS1579: foreach statement cannot operate on
    variables of type ''long'' because ''long'' does not contain a public instance
    definition for ''GetEnumerator''

    /tmp/tmpbhb07k5o.cs(24,27): error CS0136: A local or parameter named ''g'' cannot
    be declared in this scope because that name is used in an enclosing local scope
    to define a local or parameter

    '
  timestamp: 1659976338
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // I think we all remember that feeling when the result of\
    \ some long-awaited\n    // event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    // definitely worth noting down and comparing.\n\
    \    // Your task is to determine if a person correctly guessed the results of\
    \ a number of matches.\n    // You are given two arrays of scores and guesses\
    \ of equal length, where each index shows a match. \n    // Return an array of\
    \ the same length denoting how far off each guess was. If they have guessed correctly,\n\
    \    // the value is 0, and if not, the value is the absolute difference between\
    \ the guess and the score.\n    // example:\n    public static List<long> Compare(List<long>\
    \ game, List<long> guess) {\n        List<long> result = new List<long>();\n \
    \       long score;\n        long guess;\n        long diff;\n        bool correct;\n\
    \        bool found;\n        bool found2;\n        bool found3;\n        bool\
    \ found4;\n        bool found5;\n        bool found6;\n        bool found7;\n\
    \        bool found8;\n        bool found9;\n        bool found10;\n        bool\
    \ found11;\n        bool found12;\n        bool found13;\n        bool found14;\n\
    \        bool found15;\n        bool found16;\n        bool found17;\n       \
    \ bool found18;\n        bool found19;\n        bool found20;\n        bool found21;\n\
    \        bool found22;\n        bool found23;\n        bool found24;\n       \
    \ bool found25;\n        bool found26;\n        bool found27;\n        bool found28;\n\
    \        bool found29;\n        bool found30;\n        bool found31;\n       \
    \ bool found32;\n        bool found33;\n        bool found34;\n        bool found35;\n\
    \        bool found36;\n        bool found37;\n        bool found38;\n       \
    \ bool found39;\n        bool found40;\n        bool found41;\n        bool found42;\n\
    \        bool found43;\n        bool found44;\n        bool found45;\n       \
    \ bool found46;\n        bool found47;\n        bool found48;\n        bool found49;\n\
    \        bool found50;\n        bool found51;\n        bool found52;\n       \
    \ bool found53;\n        bool found54;\n        bool found55;\n        bool found56;\n\
    \        bool found57;\n        bool found58;\n        bool found59;\n       \
    \ bool found60;\n        bool found61;\n        bool found62;\n        bool found63;\n\
    \        bool found64;\n        bool found65;\n        bool found66;\n       \
    \ bool found67;\n        bool found68;\n        bool found69;\n        bool found70;\n\
    \        bool found71;\n        bool found72;\n        bool found73;\n       \
    \ bool found74;\n        bool found75;\n        bool found76;\n        bool found77;\n\
    \        bool found78;\n        bool found79;\n        bool found80;\n       \
    \ bool found81;\n        bool found82;\n        bool found83;\n        bool found84\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Compare((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})),\
    \ (new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L,\
    \ (long)-2L}))).Equals((new List<long>(new long[]{(long)0L, (long)0L, (long)0L,\
    \ (long)0L, (long)3L, (long)3L}))));\n    Debug.Assert(Compare((new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L})), (new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))));\n\
    \    Debug.Assert(Compare((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})),\
    \ (new List<long>(new long[]{(long)-1L, (long)-2L, (long)-3L}))).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)4L, (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L,\
    \ (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)0L, (long)0L, (long)1L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp0i23z703.cs(106,21): error CS1002: ; expected

    '
  timestamp: 1659976337
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // I think we all remember that feeling when the result of\
    \ some long-awaited\n    // event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    // definitely worth noting down and comparing.\n\
    \    // Your task is to determine if a person correctly guessed the results of\
    \ a number of matches.\n    // You are given two arrays of scores and guesses\
    \ of equal length, where each index shows a match. \n    // Return an array of\
    \ the same length denoting how far off each guess was. If they have guessed correctly,\n\
    \    // the value is 0, and if not, the value is the absolute difference between\
    \ the guess and the score.\n    // example:\n    public static List<long> Compare(List<long>\
    \ game, List<long> guess) {\n        List<long> result = new List<long>();\n \
    \       long total = 0;\n        long totalGuess = 0;\n        long totalGuessed\
    \ = 0;\n        long totalGuessedCorrectly = 0;\n        long totalGuessedIncorrectly\
    \ = 0;\n        long totalGuessedIncorrectlyIncorrectly = 0;\n        long totalGuessedIncorrectlyIncorrectlyIncorrectly\
    \ = 0;\n        long totalGuessedIncorrectlyIncorrectlyIncorrectlyIncorrectly\
    \ = 0;\n        long totalGuessedIncorrectlyIncorrectlyIncorrectlyIncorrectlyIncorrectly\
    \ = 0;\n        long totalGuessedIncorrectlyIncorrectlyIncorrectlyIncorrectlyIncorrectlyIncorrectly\
    \ = 0;\n        long totalGuessedIncorrectlyIncorrectlyIncorrectlyIncorrectlyIncorrectlyIncorrectlyIncorrectly\
    \ = 0;\n        long totalGuessedIncorrectlyIncorrectlyIncorrectlyIncorrectlyIncorrectlyIncorrectlyIncorrectly\
    \ = 0;\n        long totalGuessedIncorrectlyIncorrectlyIncorrectlyIncorrectlyIncorrectlyIncorrectlyIncorrectly\
    \ = 0;\n        long totalGuessedIncorrectlyIncorrectlyIncorrectlyIncorrectlyIncorrectlyIncorrectlyIncorrectly\
    \ = 0;\n        long totalGuessedIncorrectlyIncorrectlyIncorrectlyIncorrectlyIncorrectlyIncorrectlyIncorrectly\
    \ = 0;\n        long totalGuessedIncorrectlyIncorrectlyIncorrectlyIncorrectlyIncorrectlyIncorrectlyIncorrectly\
    \ = 0;\n        long totalGuessedIncorrectlyIncorrectlyIncorrectlyIncorrectlyIncorrectlyIncorrectlyIncorrectly\
    \ = 0;\n        long totalGuessedIncorrectlyIncorrectlyIncorrectlyIncorrectlyIncorrectlyIncorrectlyIncorrectly\
    \ = 0;\n        long totalGuessedIncorrectlyIncorrectlyIncorrectlyIncorrectlyIncorrectlyIncorrectlyIncorrectly\
    \ = 0;\n        long totalGuessedIncorrectlyIncorrectlyIncorrectlyIncorrectlyIncorrectlyIncorrectlyIncorrectly\
    \ = 0;\n        long totalGuessedIncorrectlyIncorrectlyIncorrectlyIncorrectlyIncorrectlyIncorrectlyIncorrectly\
    \ = 0;\n        long totalGuessedIncorrectlyIncorrectlyIncorrectlyIncorrectlyIncorrectlyIncorrectlyIncorrectly\
    \ = 0;\n        long totalGuessedIncorrectlyIncorrectlyIncorrectlyIncorrectlyIncorrectlyIncorrectlyIncorrectly\
    \ = 0;\n        long totalGuessedIncorrectlyIncorrectlyIncorrectlyIncorrectlyIncorrectlyIncorrectlyIncorrectly\
    \ = 0;\n        long totalGuessedIncorrectlyIncorrectlyIncorrectlyIncorrectlyIncorrectlyIncorrectlyIncorrectly\
    \ = 0;\n        long totalGuessedIncorrectlyIncorrectlyIncorrectlyIncorrectlyIncorrectlyIncorrectlyIncorrectly\
    \ = 0;\n        long totalGuessedIncorrectlyIncorrectlyIncorrectlyIncorrectlyIncorrectlyIncorrectlyIncorrectly\
    \ = 0;\n        long totalGuessedIncorrectly\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))));\n  \
    \  Debug.Assert(Compare((new List<long>(new long[]{(long)0L, (long)0L, (long)0L,\
    \ (long)0L, (long)0L, (long)0L})), (new List<long>(new long[]{(long)0L, (long)0L,\
    \ (long)0L, (long)0L, (long)0L, (long)0L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))));\n    Debug.Assert(Compare((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (new List<long>(new long[]{(long)-1L,\
    \ (long)-2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,\
    \ (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L, (long)2L,\
    \ (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)0L,\
    \ (long)0L, (long)1L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp22ocq8tq.cs(46,37): error CS1002: ; expected

    '
  timestamp: 1659976337
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // I think we all remember that feeling when the result of\
    \ some long-awaited\n    // event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    // definitely worth noting down and comparing.\n\
    \    // Your task is to determine if a person correctly guessed the results of\
    \ a number of matches.\n    // You are given two arrays of scores and guesses\
    \ of equal length, where each index shows a match. \n    // Return an array of\
    \ the same length denoting how far off each guess was. If they have guessed correctly,\n\
    \    // the value is 0, and if not, the value is the absolute difference between\
    \ the guess and the score.\n    // example:\n    public static List<long> Compare(List<long>\
    \ game, List<long> guess) {\n        List<long> result = new List<long>();\n \
    \       long score = 0;\n        long diff = 0;\n        long diff2 = 0;\n   \
    \     long diff3 = 0;\n        long diff4 = 0;\n        long diff5 = 0;\n    \
    \    long diff6 = 0;\n        long diff7 = 0;\n        long diff8 = 0;\n     \
    \   long diff9 = 0;\n        long diff10 = 0;\n        long diff11 = 0;\n    \
    \    long diff12 = 0;\n        long diff13 = 0;\n        long diff14 = 0;\n  \
    \      long diff15 = 0;\n        long diff16 = 0;\n        long diff17 = 0;\n\
    \        long diff18 = 0;\n        long diff19 = 0;\n        long diff20 = 0;\n\
    \        long diff21 = 0;\n        long diff22 = 0;\n        long diff23 = 0;\n\
    \        long diff24 = 0;\n        long diff25 = 0;\n        long diff26 = 0;\n\
    \        long diff27 = 0;\n        long diff28 = 0;\n        long diff29 = 0;\n\
    \        long diff30 = 0;\n        long diff31 = 0;\n        long diff32 = 0;\n\
    \        long diff33 = 0;\n        long diff34 = 0;\n        long diff35 = 0;\n\
    \        long diff36 = 0;\n        long diff37 = 0;\n        long diff38 = 0;\n\
    \        long diff39 = 0;\n        long diff40 = 0;\n        long diff41 = 0;\n\
    \        long diff42 = 0;\n        long diff43 = 0;\n        long diff44 = 0;\n\
    \        long diff45 = 0;\n        long diff46 = 0;\n        long diff47 = 0;\n\
    \        long diff48 = 0;\n        long diff49 = 0;\n        long diff50 = 0;\n\
    \        long diff51 = 0;\n        long diff52 = 0;\n        long diff53 = 0;\n\
    \        long diff54 = 0;\n        long diff55 = 0;\n        long diff56 = 0;\n\
    \        long diff57 = 0;\n        long diff58 = 0;\n        long diff59 = 0;\n\
    \        long diff60 = 0;\n        long diff61 = 0;\n        long diff62 = 0;\n\
    \        long diff63 = 0;\n        long diff64 = 0;\n        long diff65 = 0;\n\
    \        long diff66 = 0;\n        long diff67 = 0;\n        long diff68 = 0;\n\
    \        long diff69 = 0;\n        long diff70 = 0;\n        long diff71 = 0;\n\
    \        long diff72 = 0;\n        long diff73 = 0;\n        long diff74 = 0;\n\
    \        long diff75 = 0;\n        long diff76 = 0;\n        long diff77 = 0;\n\
    \        long diff78 = 0;\n        long diff79 = 0;\n        long diff80 = 0;\n\
    \        long diff81 = 0;\n        long diff82 = 0;\n        long diff83 = 0;\n\
    \        long diff84\n    }\n    public static void Main(string[] args) {\n  \
    \  Debug.Assert(Compare((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L, (long)5L, (long)1L})), (new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)2L, (long)-2L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))));\n    Debug.Assert(Compare((new\
    \ List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L})),\
    \ (new List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L,\
    \ (long)0L}))).Equals((new List<long>(new long[]{(long)0L, (long)0L, (long)0L,\
    \ (long)0L, (long)0L, (long)0L}))));\n    Debug.Assert(Compare((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L})), (new List<long>(new long[]{(long)-1L,\
    \ (long)-2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,\
    \ (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L, (long)2L,\
    \ (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)0L,\
    \ (long)0L, (long)1L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpc7qjn8vw.cs(103,20): error CS1002: ; expected

    '
  timestamp: 1659976334
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // I think we all remember that feeling when the result of\
    \ some long-awaited\n    // event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    // definitely worth noting down and comparing.\n\
    \    // Your task is to determine if a person correctly guessed the results of\
    \ a number of matches.\n    // You are given two arrays of scores and guesses\
    \ of equal length, where each index shows a match. \n    // Return an array of\
    \ the same length denoting how far off each guess was. If they have guessed correctly,\n\
    \    // the value is 0, and if not, the value is the absolute difference between\
    \ the guess and the score.\n    // example:\n    public static List<long> Compare(List<long>\
    \ game, List<long> guess) {\n        var result = new List<long>();\n        foreach\
    \ (var g in game) {\n            var gDiff = Math.Abs(g - guess);\n          \
    \  result.Add(gDiff);\n        }\n        return result;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))));\n  \
    \  Debug.Assert(Compare((new List<long>(new long[]{(long)0L, (long)0L, (long)0L,\
    \ (long)0L, (long)0L, (long)0L})), (new List<long>(new long[]{(long)0L, (long)0L,\
    \ (long)0L, (long)0L, (long)0L, (long)0L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))));\n    Debug.Assert(Compare((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (new List<long>(new long[]{(long)-1L,\
    \ (long)-2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,\
    \ (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L, (long)2L,\
    \ (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)0L,\
    \ (long)0L, (long)1L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpq_537y40.cs(20,34): error CS0019: Operator ''-'' cannot be applied to
    operands of type ''long'' and ''List<long>''

    '
  timestamp: 1659976335
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // I think we all remember that feeling when the result of\
    \ some long-awaited\n    // event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    // definitely worth noting down and comparing.\n\
    \    // Your task is to determine if a person correctly guessed the results of\
    \ a number of matches.\n    // You are given two arrays of scores and guesses\
    \ of equal length, where each index shows a match. \n    // Return an array of\
    \ the same length denoting how far off each guess was. If they have guessed correctly,\n\
    \    // the value is 0, and if not, the value is the absolute difference between\
    \ the guess and the score.\n    // example:\n    public static List<long> Compare(List<long>\
    \ game, List<long> guess) {\n        var result = new List<long>();\n        foreach\
    \ (var g in game) {\n            var guess = guess.FirstOrDefault(x => x == g);\n\
    \            if (guess == null) result.Add(0);\n            else result.Add(Math.Abs(guess\
    \ - g));\n        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))));\n  \
    \  Debug.Assert(Compare((new List<long>(new long[]{(long)0L, (long)0L, (long)0L,\
    \ (long)0L, (long)0L, (long)0L})), (new List<long>(new long[]{(long)0L, (long)0L,\
    \ (long)0L, (long)0L, (long)0L, (long)0L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))));\n    Debug.Assert(Compare((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (new List<long>(new long[]{(long)-1L,\
    \ (long)-2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,\
    \ (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L, (long)2L,\
    \ (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)0L,\
    \ (long)0L, (long)1L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpsy34m5ak.cs(20,17): error CS0136: A local or parameter named ''guess''
    cannot be declared in this scope because that name is used in an enclosing local
    scope to define a local or parameter

    /tmp/tmpsy34m5ak.cs(20,25): error CS0841: Cannot use local variable ''guess''
    before it is declared

    '
  timestamp: 1659976338
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // I think we all remember that feeling when the result of\
    \ some long-awaited\n    // event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    // definitely worth noting down and comparing.\n\
    \    // Your task is to determine if a person correctly guessed the results of\
    \ a number of matches.\n    // You are given two arrays of scores and guesses\
    \ of equal length, where each index shows a match. \n    // Return an array of\
    \ the same length denoting how far off each guess was. If they have guessed correctly,\n\
    \    // the value is 0, and if not, the value is the absolute difference between\
    \ the guess and the score.\n    // example:\n    public static List<long> Compare(List<long>\
    \ game, List<long> guess) {\n        List<long> result = new List<long>();\n \
    \       long score = 0;\n        long diff = 0;\n        foreach (long g in game)\
    \ {\n            score = g;\n            foreach (long g in guess) {\n       \
    \         diff = g - score;\n                if (diff < 0) {\n               \
    \     diff = -diff;\n                }\n                result.Add(diff);\n  \
    \          }\n        }\n        return result;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))));\n  \
    \  Debug.Assert(Compare((new List<long>(new long[]{(long)0L, (long)0L, (long)0L,\
    \ (long)0L, (long)0L, (long)0L})), (new List<long>(new long[]{(long)0L, (long)0L,\
    \ (long)0L, (long)0L, (long)0L, (long)0L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))));\n    Debug.Assert(Compare((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (new List<long>(new long[]{(long)-1L,\
    \ (long)-2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,\
    \ (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L, (long)2L,\
    \ (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)0L,\
    \ (long)0L, (long)1L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpzeqrr3y4.cs(23,27): error CS0136: A local or parameter named ''g'' cannot
    be declared in this scope because that name is used in an enclosing local scope
    to define a local or parameter

    '
  timestamp: 1659976338
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // I think we all remember that feeling when the result of\
    \ some long-awaited\n    // event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    // definitely worth noting down and comparing.\n\
    \    // Your task is to determine if a person correctly guessed the results of\
    \ a number of matches.\n    // You are given two arrays of scores and guesses\
    \ of equal length, where each index shows a match. \n    // Return an array of\
    \ the same length denoting how far off each guess was. If they have guessed correctly,\n\
    \    // the value is 0, and if not, the value is the absolute difference between\
    \ the guess and the score.\n    // example:\n    public static List<long> Compare(List<long>\
    \ game, List<long> guess) {\n        List<long> result = new List<long>();\n \
    \       long score = 0;\n        long difference = 0;\n        foreach (long guess\
    \ in guess) {\n            score = game.Sum(x => x);\n            difference =\
    \ guess - score;\n            result.Add(difference);\n        }\n        return\
    \ result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Compare((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})),\
    \ (new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L,\
    \ (long)-2L}))).Equals((new List<long>(new long[]{(long)0L, (long)0L, (long)0L,\
    \ (long)0L, (long)3L, (long)3L}))));\n    Debug.Assert(Compare((new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L})), (new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))));\n\
    \    Debug.Assert(Compare((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})),\
    \ (new List<long>(new long[]{(long)-1L, (long)-2L, (long)-3L}))).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)4L, (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L,\
    \ (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)0L, (long)0L, (long)1L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpdo0xoxe9.cs(21,23): error CS0136: A local or parameter named ''guess''
    cannot be declared in this scope because that name is used in an enclosing local
    scope to define a local or parameter

    '
  timestamp: 1659976335
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // I think we all remember that feeling when the result of\
    \ some long-awaited\n    // event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    // definitely worth noting down and comparing.\n\
    \    // Your task is to determine if a person correctly guessed the results of\
    \ a number of matches.\n    // You are given two arrays of scores and guesses\
    \ of equal length, where each index shows a match. \n    // Return an array of\
    \ the same length denoting how far off each guess was. If they have guessed correctly,\n\
    \    // the value is 0, and if not, the value is the absolute difference between\
    \ the guess and the score.\n    // example:\n    public static List<long> Compare(List<long>\
    \ game, List<long> guess) {\n        List<long> result = new List<long>();\n \
    \       long diff = 0;\n        foreach (long g in game) {\n            foreach\
    \ (long g in guess) {\n                if (g == g) {\n                    result.Add(0);\n\
    \                } else {\n                    diff = g - g;\n               \
    \     result.Add(diff);\n                }\n            }\n        }\n       \
    \ return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Compare((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})),\
    \ (new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L,\
    \ (long)-2L}))).Equals((new List<long>(new long[]{(long)0L, (long)0L, (long)0L,\
    \ (long)0L, (long)3L, (long)3L}))));\n    Debug.Assert(Compare((new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L})), (new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))));\n\
    \    Debug.Assert(Compare((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})),\
    \ (new List<long>(new long[]{(long)-1L, (long)-2L, (long)-3L}))).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)4L, (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L,\
    \ (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)0L, (long)0L, (long)1L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpsqe0uxji.cs(21,27): error CS0136: A local or parameter named ''g'' cannot
    be declared in this scope because that name is used in an enclosing local scope
    to define a local or parameter

    /tmp/tmpsqe0uxji.cs(22,21): warning CS1718: Comparison made to same variable;
    did you mean to compare something else?

    '
  timestamp: 1659976338
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // I think we all remember that feeling when the result of\
    \ some long-awaited\n    // event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    // definitely worth noting down and comparing.\n\
    \    // Your task is to determine if a person correctly guessed the results of\
    \ a number of matches.\n    // You are given two arrays of scores and guesses\
    \ of equal length, where each index shows a match. \n    // Return an array of\
    \ the same length denoting how far off each guess was. If they have guessed correctly,\n\
    \    // the value is 0, and if not, the value is the absolute difference between\
    \ the guess and the score.\n    // example:\n    public static List<long> Compare(List<long>\
    \ game, List<long> guess) {\n        List<long> result = new List<long>();\n \
    \       long score = 0;\n        long diff = 0;\n        foreach (long g in game)\
    \ {\n            score += g;\n        }\n        foreach (long g in guess) {\n\
    \            diff += g - score;\n        }\n        foreach (long g in guess)\
    \ {\n            result.Add(Math.Abs(g - score));\n        }\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Compare((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})),\
    \ (new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L,\
    \ (long)-2L}))).Equals((new List<long>(new long[]{(long)0L, (long)0L, (long)0L,\
    \ (long)0L, (long)3L, (long)3L}))));\n    Debug.Assert(Compare((new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L})), (new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))));\n\
    \    Debug.Assert(Compare((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})),\
    \ (new List<long>(new long[]{(long)-1L, (long)-2L, (long)-3L}))).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)4L, (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L,\
    \ (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)0L, (long)0L, (long)1L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <4f3d86c85c7c419c8c809d9f9aaf9b04>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <4f3d86c85c7c419c8c809d9f9aaf9b04>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976338
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // I think we all remember that feeling when the result of\
    \ some long-awaited\n    // event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    // definitely worth noting down and comparing.\n\
    \    // Your task is to determine if a person correctly guessed the results of\
    \ a number of matches.\n    // You are given two arrays of scores and guesses\
    \ of equal length, where each index shows a match. \n    // Return an array of\
    \ the same length denoting how far off each guess was. If they have guessed correctly,\n\
    \    // the value is 0, and if not, the value is the absolute difference between\
    \ the guess and the score.\n    // example:\n    public static List<long> Compare(List<long>\
    \ game, List<long> guess) {\n        List<long> result = new List<long>();\n \
    \       long score = 0;\n        long difference = 0;\n        foreach (long guess\
    \ in guess) {\n            score = game.Sum(x => x);\n            difference =\
    \ guess - score;\n            result.Add(difference);\n        }\n        return\
    \ result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Compare((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})),\
    \ (new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L,\
    \ (long)-2L}))).Equals((new List<long>(new long[]{(long)0L, (long)0L, (long)0L,\
    \ (long)0L, (long)3L, (long)3L}))));\n    Debug.Assert(Compare((new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L})), (new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))));\n\
    \    Debug.Assert(Compare((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})),\
    \ (new List<long>(new long[]{(long)-1L, (long)-2L, (long)-3L}))).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)4L, (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L,\
    \ (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)0L, (long)0L, (long)1L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpdo0xoxe9.cs(21,23): error CS0136: A local or parameter named ''guess''
    cannot be declared in this scope because that name is used in an enclosing local
    scope to define a local or parameter

    '
  timestamp: 1659976335
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // I think we all remember that feeling when the result of\
    \ some long-awaited\n    // event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    // definitely worth noting down and comparing.\n\
    \    // Your task is to determine if a person correctly guessed the results of\
    \ a number of matches.\n    // You are given two arrays of scores and guesses\
    \ of equal length, where each index shows a match. \n    // Return an array of\
    \ the same length denoting how far off each guess was. If they have guessed correctly,\n\
    \    // the value is 0, and if not, the value is the absolute difference between\
    \ the guess and the score.\n    // example:\n    public static List<long> Compare(List<long>\
    \ game, List<long> guess) {\n        List<long> result = new List<long>();\n \
    \       long score = 0;\n        long diff = 0;\n        foreach (long g in game)\
    \ {\n            score += g;\n        }\n        foreach (long g in guess) {\n\
    \            diff += g - score;\n        }\n        if (diff < 0) {\n        \
    \    foreach (long g in guess) {\n                result.Add(-g);\n          \
    \  }\n        } else {\n            foreach (long g in guess) {\n            \
    \    result.Add(g);\n            }\n        }\n        return result;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(Compare((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))));\n\
    \    Debug.Assert(Compare((new List<long>(new long[]{(long)0L, (long)0L, (long)0L,\
    \ (long)0L, (long)0L, (long)0L})), (new List<long>(new long[]{(long)0L, (long)0L,\
    \ (long)0L, (long)0L, (long)0L, (long)0L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))));\n    Debug.Assert(Compare((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (new List<long>(new long[]{(long)-1L,\
    \ (long)-2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,\
    \ (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L, (long)2L,\
    \ (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)0L,\
    \ (long)0L, (long)1L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <48af0aa88f304d0b9814eaac09a72781>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <48af0aa88f304d0b9814eaac09a72781>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976335
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // I think we all remember that feeling when the result of\
    \ some long-awaited\n    // event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    // definitely worth noting down and comparing.\n\
    \    // Your task is to determine if a person correctly guessed the results of\
    \ a number of matches.\n    // You are given two arrays of scores and guesses\
    \ of equal length, where each index shows a match. \n    // Return an array of\
    \ the same length denoting how far off each guess was. If they have guessed correctly,\n\
    \    // the value is 0, and if not, the value is the absolute difference between\
    \ the guess and the score.\n    // example:\n    public static List<long> Compare(List<long>\
    \ game, List<long> guess) {\n        List<long> result = new List<long>();\n \
    \       long score = 0;\n        foreach (var g in game) {\n            score\
    \ += g;\n        }\n        foreach (var g in guess) {\n            score -= g;\n\
    \        }\n        result.Add(score);\n        return result;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Compare((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))));\n\
    \    Debug.Assert(Compare((new List<long>(new long[]{(long)0L, (long)0L, (long)0L,\
    \ (long)0L, (long)0L, (long)0L})), (new List<long>(new long[]{(long)0L, (long)0L,\
    \ (long)0L, (long)0L, (long)0L, (long)0L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))));\n    Debug.Assert(Compare((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (new List<long>(new long[]{(long)-1L,\
    \ (long)-2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,\
    \ (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L, (long)2L,\
    \ (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)0L,\
    \ (long)0L, (long)1L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <ba354a5781284793a8d523852fa017bb>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <ba354a5781284793a8d523852fa017bb>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976338
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // I think we all remember that feeling when the result of\
    \ some long-awaited\n    // event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    // definitely worth noting down and comparing.\n\
    \    // Your task is to determine if a person correctly guessed the results of\
    \ a number of matches.\n    // You are given two arrays of scores and guesses\
    \ of equal length, where each index shows a match. \n    // Return an array of\
    \ the same length denoting how far off each guess was. If they have guessed correctly,\n\
    \    // the value is 0, and if not, the value is the absolute difference between\
    \ the guess and the score.\n    // example:\n    public static List<long> Compare(List<long>\
    \ game, List<long> guess) {\n        // Your code here\n        var result = new\
    \ List<long>();\n        game.ForEach(x => result.Add(Math.Abs(x - guess.FirstOrDefault(y\
    \ => y == x))).ToList());\n        return result;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))));\n  \
    \  Debug.Assert(Compare((new List<long>(new long[]{(long)0L, (long)0L, (long)0L,\
    \ (long)0L, (long)0L, (long)0L})), (new List<long>(new long[]{(long)0L, (long)0L,\
    \ (long)0L, (long)0L, (long)0L, (long)0L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))));\n    Debug.Assert(Compare((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (new List<long>(new long[]{(long)-1L,\
    \ (long)-2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,\
    \ (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L, (long)2L,\
    \ (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)0L,\
    \ (long)0L, (long)1L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpbjil4zbk.cs(20,86): error CS0023: Operator ''.'' cannot be applied to
    operand of type ''void''

    '
  timestamp: 1659976338
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // I think we all remember that feeling when the result of\
    \ some long-awaited\n    // event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    // definitely worth noting down and comparing.\n\
    \    // Your task is to determine if a person correctly guessed the results of\
    \ a number of matches.\n    // You are given two arrays of scores and guesses\
    \ of equal length, where each index shows a match. \n    // Return an array of\
    \ the same length denoting how far off each guess was. If they have guessed correctly,\n\
    \    // the value is 0, and if not, the value is the absolute difference between\
    \ the guess and the score.\n    // example:\n    public static List<long> Compare(List<long>\
    \ game, List<long> guess) {\n        List<long> result = new List<long>();\n \
    \       long score = 0;\n        foreach (long g in game) {\n            score\
    \ += g;\n        }\n        foreach (long g in guess) {\n            score -=\
    \ g;\n        }\n        if (score < 0) {\n            score *= -1;\n        }\n\
    \        result.Add(score);\n        return result;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))));\n  \
    \  Debug.Assert(Compare((new List<long>(new long[]{(long)0L, (long)0L, (long)0L,\
    \ (long)0L, (long)0L, (long)0L})), (new List<long>(new long[]{(long)0L, (long)0L,\
    \ (long)0L, (long)0L, (long)0L, (long)0L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))));\n    Debug.Assert(Compare((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (new List<long>(new long[]{(long)-1L,\
    \ (long)-2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,\
    \ (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L, (long)2L,\
    \ (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)0L,\
    \ (long)0L, (long)1L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <960022867f964f1e84f8f6bb87533a93>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <960022867f964f1e84f8f6bb87533a93>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976338
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // I think we all remember that feeling when the result of\
    \ some long-awaited\n    // event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    // definitely worth noting down and comparing.\n\
    \    // Your task is to determine if a person correctly guessed the results of\
    \ a number of matches.\n    // You are given two arrays of scores and guesses\
    \ of equal length, where each index shows a match. \n    // Return an array of\
    \ the same length denoting how far off each guess was. If they have guessed correctly,\n\
    \    // the value is 0, and if not, the value is the absolute difference between\
    \ the guess and the score.\n    // example:\n    public static List<long> Compare(List<long>\
    \ game, List<long> guess) {\n        List<long> result = new List<long>();\n \
    \       foreach (long score in game) {\n            long guess = guess.FirstOrDefault();\n\
    \            if (guess == score) {\n                result.Add(0);\n         \
    \   } else {\n                result.Add(Math.Abs(guess - score));\n         \
    \   }\n        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))));\n  \
    \  Debug.Assert(Compare((new List<long>(new long[]{(long)0L, (long)0L, (long)0L,\
    \ (long)0L, (long)0L, (long)0L})), (new List<long>(new long[]{(long)0L, (long)0L,\
    \ (long)0L, (long)0L, (long)0L, (long)0L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))));\n    Debug.Assert(Compare((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (new List<long>(new long[]{(long)-1L,\
    \ (long)-2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,\
    \ (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L, (long)2L,\
    \ (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)0L,\
    \ (long)0L, (long)1L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpqku9a0oz.cs(20,18): error CS0136: A local or parameter named ''guess''
    cannot be declared in this scope because that name is used in an enclosing local
    scope to define a local or parameter

    /tmp/tmpqku9a0oz.cs(20,32): error CS1061: ''long'' does not contain a definition
    for ''FirstOrDefault'' and no accessible extension method ''FirstOrDefault'' accepting
    a first argument of type ''long'' could be found (are you missing a using directive
    or an assembly reference?)

    /tmp/tmpqku9a0oz.cs(20,26): error CS0165: Use of unassigned local variable ''guess''

    '
  timestamp: 1659976338
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // I think we all remember that feeling when the result of\
    \ some long-awaited\n    // event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    // definitely worth noting down and comparing.\n\
    \    // Your task is to determine if a person correctly guessed the results of\
    \ a number of matches.\n    // You are given two arrays of scores and guesses\
    \ of equal length, where each index shows a match. \n    // Return an array of\
    \ the same length denoting how far off each guess was. If they have guessed correctly,\n\
    \    // the value is 0, and if not, the value is the absolute difference between\
    \ the guess and the score.\n    // example:\n    public static List<long> Compare(List<long>\
    \ game, List<long> guess) {\n        List<long> result = new List<long>();\n \
    \       long score;\n        long guess;\n        long diff;\n        long diffAbs;\n\
    \        long diffAbsMax;\n        long diffAbsMaxIndex;\n        long diffAbsMaxScore;\n\
    \        long diffAbsMaxScoreIndex;\n        long diffAbsMaxScoreIndex;\n    \
    \    long diffAbsMaxScoreIndex;\n        long diffAbsMaxScoreIndex;\n        long\
    \ diffAbsMaxScoreIndex;\n        long diffAbsMaxScoreIndex;\n        long diffAbsMaxScoreIndex;\n\
    \        long diffAbsMaxScoreIndex;\n        long diffAbsMaxScoreIndex;\n    \
    \    long diffAbsMaxScoreIndex;\n        long diffAbsMaxScoreIndex;\n        long\
    \ diffAbsMaxScoreIndex;\n        long diffAbsMaxScoreIndex;\n        long diffAbsMaxScoreIndex;\n\
    \        long diffAbsMaxScoreIndex;\n        long diffAbsMaxScoreIndex;\n    \
    \    long diffAbsMaxScoreIndex;\n        long diffAbsMaxScoreIndex;\n        long\
    \ diffAbsMaxScoreIndex;\n        long diffAbsMaxScoreIndex;\n        long diffAbsMaxScoreIndex;\n\
    \        long diffAbsMaxScoreIndex;\n        long diffAbsMaxScoreIndex;\n    \
    \    long diffAbsMaxScoreIndex;\n        long diffAbsMaxScoreIndex;\n        long\
    \ diffAbsMaxScoreIndex;\n        long diffAbsMaxScoreIndex;\n        long diffAbsMaxScoreIndex;\n\
    \        long diffAbsMaxScoreIndex;\n        long diffAbsMaxScoreIndex;\n    \
    \    long diffAbsMaxScoreIndex;\n        long diffAbsMaxScoreIndex;\n        long\
    \ diffAbsMaxScoreIndex;\n        long diffAbsMaxScoreIndex;\n        long diffAbsMaxScoreIndex;\n\
    \        long diffAbsMaxScoreIndex;\n        long diffAbsMaxScoreIndex;\n    \
    \    long diffAbsMaxScoreIndex;\n        long diffAbsMaxScoreIndex;\n        long\
    \ diffAbsMaxScoreIndex;\n        long diffAbsMaxScoreIndex;\n        long diffAbsMaxScoreIndex;\n\
    \        long diffAbsMaxScoreIndex;\n        long diffAbsMaxScoreIndex;\n    \
    \    long diffAbsMaxScoreIndex;\n        long diffAbsMaxScoreIndex;\n        long\
    \ diffAbsMaxScoreIndex;\n        long diffAbsMaxScoreIndex;\n        long diffAbsMaxScoreIndex;\n\
    \        long diffAbsMaxScoreIndex;\n        long diffAbsMax\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Compare((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))));\n\
    \    Debug.Assert(Compare((new List<long>(new long[]{(long)0L, (long)0L, (long)0L,\
    \ (long)0L, (long)0L, (long)0L})), (new List<long>(new long[]{(long)0L, (long)0L,\
    \ (long)0L, (long)0L, (long)0L, (long)0L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))));\n    Debug.Assert(Compare((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (new List<long>(new long[]{(long)-1L,\
    \ (long)-2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,\
    \ (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L, (long)2L,\
    \ (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)0L,\
    \ (long)0L, (long)1L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpqmyhpd6z.cs(76,24): error CS1002: ; expected

    '
  timestamp: 1659976338
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // I think we all remember that feeling when the result of\
    \ some long-awaited\n    // event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    // definitely worth noting down and comparing.\n\
    \    // Your task is to determine if a person correctly guessed the results of\
    \ a number of matches.\n    // You are given two arrays of scores and guesses\
    \ of equal length, where each index shows a match. \n    // Return an array of\
    \ the same length denoting how far off each guess was. If they have guessed correctly,\n\
    \    // the value is 0, and if not, the value is the absolute difference between\
    \ the guess and the score.\n    // example:\n    public static List<long> Compare(List<long>\
    \ game, List<long> guess) {\n        // TODO: Implement this method\n        List<long>\
    \ result = new List<long>();\n        foreach (long g in game) {\n           \
    \ long g2 = g;\n            long g3 = g;\n            long g4 = g;\n         \
    \   long g5 = g;\n            long g6 = g;\n            long g7 = g;\n       \
    \     long g8 = g;\n            long g9 = g;\n            long g10 = g;\n    \
    \        long g11 = g;\n            long g12 = g;\n            long g13 = g;\n\
    \            long g14 = g;\n            long g15 = g;\n            long g16 =\
    \ g;\n            long g17 = g;\n            long g18 = g;\n            long g19\
    \ = g;\n            long g20 = g;\n            long g21 = g;\n            long\
    \ g22 = g;\n            long g23 = g;\n            long g24 = g;\n           \
    \ long g25 = g;\n            long g26 = g;\n            long g27 = g;\n      \
    \      long g28 = g;\n            long g29 = g;\n            long g30 = g;\n \
    \           long g31 = g;\n            long g32 = g;\n            long g33 = g;\n\
    \            long g34 = g;\n            long g35 = g;\n            long g36 =\
    \ g;\n            long g37 = g;\n            long g38 = g;\n            long g39\
    \ = g;\n            long g40 = g;\n            long g41 = g;\n            long\
    \ g42 = g;\n            long g43 = g;\n            long g44 = g;\n           \
    \ long g45 = g;\n            long g46 = g;\n            long g47 = g;\n      \
    \      long g48 = g;\n            long g49 = g;\n            long g50 = g;\n \
    \           long g51 = g;\n            long g52 = g;\n            long g53 = g;\n\
    \            long g54 = g;\n            long g55 = g;\n            long g56 =\
    \ g;\n            long g57 = g;\n            long g58 = g;\n            long g59\
    \ = g;\n            long g60 = g;\n            long g61 = g;\n            long\
    \ g62 = g;\n            long g63 = g;\n            long g64 = g;\n           \
    \ long g65 = g;\n            long g66 = g;\n            long g67 = g;\n      \
    \      long g68 = g;\n            long g69 = g;\n            \n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Compare((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))));\n\
    \    Debug.Assert(Compare((new List<long>(new long[]{(long)0L, (long)0L, (long)0L,\
    \ (long)0L, (long)0L, (long)0L})), (new List<long>(new long[]{(long)0L, (long)0L,\
    \ (long)0L, (long)0L, (long)0L, (long)0L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))));\n    Debug.Assert(Compare((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (new List<long>(new long[]{(long)-1L,\
    \ (long)-2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,\
    \ (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L, (long)2L,\
    \ (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)0L,\
    \ (long)0L, (long)1L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpywz7v32n.cs(91,5): error CS0106: The modifier ''public'' is not valid
    for this item

    /tmp/tmpywz7v32n.cs(98,2): error CS1513: } expected

    '
  timestamp: 1659976338
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // I think we all remember that feeling when the result of\
    \ some long-awaited\n    // event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    // definitely worth noting down and comparing.\n\
    \    // Your task is to determine if a person correctly guessed the results of\
    \ a number of matches.\n    // You are given two arrays of scores and guesses\
    \ of equal length, where each index shows a match. \n    // Return an array of\
    \ the same length denoting how far off each guess was. If they have guessed correctly,\n\
    \    // the value is 0, and if not, the value is the absolute difference between\
    \ the guess and the score.\n    // example:\n    public static List<long> Compare(List<long>\
    \ game, List<long> guess) {\n        List<long> result = new List<long>();\n \
    \       long score;\n        long guess;\n        long diff;\n        bool correct;\n\
    \        bool found;\n        bool found2;\n        bool found3;\n        bool\
    \ found4;\n        bool found5;\n        bool found6;\n        bool found7;\n\
    \        bool found8;\n        bool found9;\n        bool found10;\n        bool\
    \ found11;\n        bool found12;\n        bool found13;\n        bool found14;\n\
    \        bool found15;\n        bool found16;\n        bool found17;\n       \
    \ bool found18;\n        bool found19;\n        bool found20;\n        bool found21;\n\
    \        bool found22;\n        bool found23;\n        bool found24;\n       \
    \ bool found25;\n        bool found26;\n        bool found27;\n        bool found28;\n\
    \        bool found29;\n        bool found30;\n        bool found31;\n       \
    \ bool found32;\n        bool found33;\n        bool found34;\n        bool found35;\n\
    \        bool found36;\n        bool found37;\n        bool found38;\n       \
    \ bool found39;\n        bool found40;\n        bool found41;\n        bool found42;\n\
    \        bool found43;\n        bool found44;\n        bool found45;\n       \
    \ bool found46;\n        bool found47;\n        bool found48;\n        bool found49;\n\
    \        bool found50;\n        bool found51;\n        bool found52;\n       \
    \ bool found53;\n        bool found54;\n        bool found55;\n        bool found56;\n\
    \        bool found57;\n        bool found58;\n        bool found59;\n       \
    \ bool found60;\n        bool found61;\n        bool found62;\n        bool found63;\n\
    \        bool found64;\n        bool found65;\n        bool found66;\n       \
    \ bool found67;\n        bool found68;\n        bool found69;\n        bool found70;\n\
    \        bool found71;\n        bool found72;\n        bool found73;\n       \
    \ bool found74;\n        bool found75;\n        bool found76;\n        bool found77;\n\
    \        bool found78;\n        bool found79;\n        bool found80;\n       \
    \ bool found81;\n        bool found82;\n        bool found83;\n        bool found84\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Compare((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})),\
    \ (new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L,\
    \ (long)-2L}))).Equals((new List<long>(new long[]{(long)0L, (long)0L, (long)0L,\
    \ (long)0L, (long)3L, (long)3L}))));\n    Debug.Assert(Compare((new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L})), (new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))));\n\
    \    Debug.Assert(Compare((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})),\
    \ (new List<long>(new long[]{(long)-1L, (long)-2L, (long)-3L}))).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)4L, (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L,\
    \ (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)0L, (long)0L, (long)1L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp0i23z703.cs(106,21): error CS1002: ; expected

    '
  timestamp: 1659976337
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // I think we all remember that feeling when the result of\
    \ some long-awaited\n    // event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    // definitely worth noting down and comparing.\n\
    \    // Your task is to determine if a person correctly guessed the results of\
    \ a number of matches.\n    // You are given two arrays of scores and guesses\
    \ of equal length, where each index shows a match. \n    // Return an array of\
    \ the same length denoting how far off each guess was. If they have guessed correctly,\n\
    \    // the value is 0, and if not, the value is the absolute difference between\
    \ the guess and the score.\n    // example:\n    public static List<long> Compare(List<long>\
    \ game, List<long> guess) {\n        List<long> result = new List<long>();\n \
    \       long score = 0;\n        long guess = 0;\n        foreach (var item in\
    \ game) {\n            score = item;\n            guess = guess[game.IndexOf(item)];\
    \ // guesses[game.IndexOf(item)]\n            result.Add(Math.Abs(guess - score));\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))));\n  \
    \  Debug.Assert(Compare((new List<long>(new long[]{(long)0L, (long)0L, (long)0L,\
    \ (long)0L, (long)0L, (long)0L})), (new List<long>(new long[]{(long)0L, (long)0L,\
    \ (long)0L, (long)0L, (long)0L, (long)0L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))));\n    Debug.Assert(Compare((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (new List<long>(new long[]{(long)-1L,\
    \ (long)-2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,\
    \ (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L, (long)2L,\
    \ (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)0L,\
    \ (long)0L, (long)1L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp5iaadm_n.cs(20,14): error CS0136: A local or parameter named ''guess''
    cannot be declared in this scope because that name is used in an enclosing local
    scope to define a local or parameter

    /tmp/tmp5iaadm_n.cs(23,21): error CS0021: Cannot apply indexing with [] to an
    expression of type ''long''

    '
  timestamp: 1659976338
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // I think we all remember that feeling when the result of\
    \ some long-awaited\n    // event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    // definitely worth noting down and comparing.\n\
    \    // Your task is to determine if a person correctly guessed the results of\
    \ a number of matches.\n    // You are given two arrays of scores and guesses\
    \ of equal length, where each index shows a match. \n    // Return an array of\
    \ the same length denoting how far off each guess was. If they have guessed correctly,\n\
    \    // the value is 0, and if not, the value is the absolute difference between\
    \ the guess and the score.\n    // example:\n    public static List<long> Compare(List<long>\
    \ game, List<long> guess) {\n        List<long> result = new List<long>();\n \
    \       foreach (long g in game) {\n            long guess = guess.FirstOrDefault(x\
    \ => x == g);\n            if (guess == g) {\n                result.Add(0);\n\
    \            } else {\n                result.Add(Math.Abs(g - guess));\n    \
    \        }\n        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))));\n  \
    \  Debug.Assert(Compare((new List<long>(new long[]{(long)0L, (long)0L, (long)0L,\
    \ (long)0L, (long)0L, (long)0L})), (new List<long>(new long[]{(long)0L, (long)0L,\
    \ (long)0L, (long)0L, (long)0L, (long)0L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))));\n    Debug.Assert(Compare((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (new List<long>(new long[]{(long)-1L,\
    \ (long)-2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,\
    \ (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L, (long)2L,\
    \ (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)0L,\
    \ (long)0L, (long)1L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp3m0ib_wn.cs(20,18): error CS0136: A local or parameter named ''guess''
    cannot be declared in this scope because that name is used in an enclosing local
    scope to define a local or parameter

    /tmp/tmp3m0ib_wn.cs(20,32): error CS1061: ''long'' does not contain a definition
    for ''FirstOrDefault'' and no accessible extension method ''FirstOrDefault'' accepting
    a first argument of type ''long'' could be found (are you missing a using directive
    or an assembly reference?)

    /tmp/tmp3m0ib_wn.cs(20,26): error CS0165: Use of unassigned local variable ''guess''

    '
  timestamp: 1659976337
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // I think we all remember that feeling when the result of\
    \ some long-awaited\n    // event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    // definitely worth noting down and comparing.\n\
    \    // Your task is to determine if a person correctly guessed the results of\
    \ a number of matches.\n    // You are given two arrays of scores and guesses\
    \ of equal length, where each index shows a match. \n    // Return an array of\
    \ the same length denoting how far off each guess was. If they have guessed correctly,\n\
    \    // the value is 0, and if not, the value is the absolute difference between\
    \ the guess and the score.\n    // example:\n    public static List<long> Compare(List<long>\
    \ game, List<long> guess) {\n        var result = new List<long>();\n        foreach\
    \ (var g in game) {\n            var gDiff = Math.Abs(g - guess[game.IndexOf(g)]);\n\
    \            if (gDiff > 0) {\n                result.Add(gDiff);\n          \
    \  }\n        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))));\n  \
    \  Debug.Assert(Compare((new List<long>(new long[]{(long)0L, (long)0L, (long)0L,\
    \ (long)0L, (long)0L, (long)0L})), (new List<long>(new long[]{(long)0L, (long)0L,\
    \ (long)0L, (long)0L, (long)0L, (long)0L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))));\n    Debug.Assert(Compare((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (new List<long>(new long[]{(long)-1L,\
    \ (long)-2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,\
    \ (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L, (long)2L,\
    \ (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)0L,\
    \ (long)0L, (long)1L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <e1a196afcf9e4703ad66995682eeb1f5>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <e1a196afcf9e4703ad66995682eeb1f5>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976339
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // I think we all remember that feeling when the result of\
    \ some long-awaited\n    // event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    // definitely worth noting down and comparing.\n\
    \    // Your task is to determine if a person correctly guessed the results of\
    \ a number of matches.\n    // You are given two arrays of scores and guesses\
    \ of equal length, where each index shows a match. \n    // Return an array of\
    \ the same length denoting how far off each guess was. If they have guessed correctly,\n\
    \    // the value is 0, and if not, the value is the absolute difference between\
    \ the guess and the score.\n    // example:\n    public static List<long> Compare(List<long>\
    \ game, List<long> guess) {\n        List<long> result = new List<long>();\n \
    \       long score;\n        long guess;\n        long diff;\n        bool correct;\n\
    \        foreach (var item in game) {\n            score = item;\n           \
    \ correct = false;\n            foreach (var item2 in guess) {\n             \
    \   guess = item2;\n                diff = guess - score;\n                if\
    \ (diff < 0) {\n                    diff = -diff;\n                }\n       \
    \         if (diff == 0) {\n                    correct = true;\n            \
    \        break;\n                }\n            }\n            result.Add(diff);\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))));\n  \
    \  Debug.Assert(Compare((new List<long>(new long[]{(long)0L, (long)0L, (long)0L,\
    \ (long)0L, (long)0L, (long)0L})), (new List<long>(new long[]{(long)0L, (long)0L,\
    \ (long)0L, (long)0L, (long)0L, (long)0L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))));\n    Debug.Assert(Compare((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (new List<long>(new long[]{(long)-1L,\
    \ (long)-2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,\
    \ (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L, (long)2L,\
    \ (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)0L,\
    \ (long)0L, (long)1L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpq1283by2.cs(20,14): error CS0136: A local or parameter named ''guess''
    cannot be declared in this scope because that name is used in an enclosing local
    scope to define a local or parameter

    /tmp/tmpq1283by2.cs(26,35): error CS1579: foreach statement cannot operate on
    variables of type ''long'' because ''long'' does not contain a public instance
    definition for ''GetEnumerator''

    /tmp/tmpq1283by2.cs(26,35): error CS0165: Use of unassigned local variable ''guess''

    /tmp/tmpq1283by2.cs(37,24): error CS0165: Use of unassigned local variable ''diff''

    /tmp/tmpq1283by2.cs(22,14): warning CS0219: The variable ''correct'' is assigned
    but its value is never used

    '
  timestamp: 1659976338
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // I think we all remember that feeling when the result of\
    \ some long-awaited\n    // event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    // definitely worth noting down and comparing.\n\
    \    // Your task is to determine if a person correctly guessed the results of\
    \ a number of matches.\n    // You are given two arrays of scores and guesses\
    \ of equal length, where each index shows a match. \n    // Return an array of\
    \ the same length denoting how far off each guess was. If they have guessed correctly,\n\
    \    // the value is 0, and if not, the value is the absolute difference between\
    \ the guess and the score.\n    // example:\n    public static List<long> Compare(List<long>\
    \ game, List<long> guess) {\n        List<long> result = new List<long>();\n \
    \       long score;\n        long guess;\n        long diff;\n        bool correct;\n\
    \        bool found;\n        bool found2;\n        bool found3;\n        bool\
    \ found4;\n        bool found5;\n        bool found6;\n        bool found7;\n\
    \        bool found8;\n        bool found9;\n        bool found10;\n        bool\
    \ found11;\n        bool found12;\n        bool found13;\n        bool found14;\n\
    \        bool found15;\n        bool found16;\n        bool found17;\n       \
    \ bool found18;\n        bool found19;\n        bool found20;\n        bool found21;\n\
    \        bool found22;\n        bool found23;\n        bool found24;\n       \
    \ bool found25;\n        bool found26;\n        bool found27;\n        bool found28;\n\
    \        bool found29;\n        bool found30;\n        bool found31;\n       \
    \ bool found32;\n        bool found33;\n        bool found34;\n        bool found35;\n\
    \        bool found36;\n        bool found37;\n        bool found38;\n       \
    \ bool found39;\n        bool found40;\n        bool found41;\n        bool found42;\n\
    \        bool found43;\n        bool found44;\n        bool found45;\n       \
    \ bool found46;\n        bool found47;\n        bool found48;\n        bool found49;\n\
    \        bool found50;\n        bool found51;\n        bool found52;\n       \
    \ bool found53;\n        bool found54;\n        bool found55;\n        bool found56;\n\
    \        bool found57;\n        bool found58;\n        bool found59;\n       \
    \ bool found60;\n        bool found61;\n        bool found62;\n        bool found63;\n\
    \        bool found64;\n        bool found65;\n        bool found66;\n       \
    \ bool found67;\n        bool found68;\n        bool found69;\n        bool found70;\n\
    \        bool found71;\n        bool found72;\n        bool found73;\n       \
    \ bool found74;\n        bool found75;\n        bool found76;\n        bool found77;\n\
    \        bool found78;\n        bool found79;\n        bool found80;\n       \
    \ bool found81;\n        bool found82;\n        bool found83;\n        bool found84\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Compare((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})),\
    \ (new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L,\
    \ (long)-2L}))).Equals((new List<long>(new long[]{(long)0L, (long)0L, (long)0L,\
    \ (long)0L, (long)3L, (long)3L}))));\n    Debug.Assert(Compare((new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L})), (new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))));\n\
    \    Debug.Assert(Compare((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})),\
    \ (new List<long>(new long[]{(long)-1L, (long)-2L, (long)-3L}))).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)4L, (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L,\
    \ (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)0L, (long)0L, (long)1L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp0i23z703.cs(106,21): error CS1002: ; expected

    '
  timestamp: 1659976337
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // I think we all remember that feeling when the result of\
    \ some long-awaited\n    // event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    // definitely worth noting down and comparing.\n\
    \    // Your task is to determine if a person correctly guessed the results of\
    \ a number of matches.\n    // You are given two arrays of scores and guesses\
    \ of equal length, where each index shows a match. \n    // Return an array of\
    \ the same length denoting how far off each guess was. If they have guessed correctly,\n\
    \    // the value is 0, and if not, the value is the absolute difference between\
    \ the guess and the score.\n    // example:\n    public static List<long> Compare(List<long>\
    \ game, List<long> guess) {\n        // TODO: Your code here\n        List<long>\
    \ result = new List<long>();\n        long score = 0;\n        long diff = 0;\n\
    \        foreach (long g in game) {\n            foreach (long g in guess) {\n\
    \                diff = g - g;\n                if (g == g) {\n              \
    \      score = 0;\n                }\n                else {\n               \
    \     score = diff;\n                }\n            }\n            result.Add(score);\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))));\n  \
    \  Debug.Assert(Compare((new List<long>(new long[]{(long)0L, (long)0L, (long)0L,\
    \ (long)0L, (long)0L, (long)0L})), (new List<long>(new long[]{(long)0L, (long)0L,\
    \ (long)0L, (long)0L, (long)0L, (long)0L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))));\n    Debug.Assert(Compare((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (new List<long>(new long[]{(long)-1L,\
    \ (long)-2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,\
    \ (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L, (long)2L,\
    \ (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)0L,\
    \ (long)0L, (long)1L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp362xv_ew.cs(23,27): error CS0136: A local or parameter named ''g'' cannot
    be declared in this scope because that name is used in an enclosing local scope
    to define a local or parameter

    /tmp/tmp362xv_ew.cs(25,21): warning CS1718: Comparison made to same variable;
    did you mean to compare something else?

    '
  timestamp: 1659976338
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // I think we all remember that feeling when the result of\
    \ some long-awaited\n    // event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    // definitely worth noting down and comparing.\n\
    \    // Your task is to determine if a person correctly guessed the results of\
    \ a number of matches.\n    // You are given two arrays of scores and guesses\
    \ of equal length, where each index shows a match. \n    // Return an array of\
    \ the same length denoting how far off each guess was. If they have guessed correctly,\n\
    \    // the value is 0, and if not, the value is the absolute difference between\
    \ the guess and the score.\n    // example:\n    public static List<long> Compare(List<long>\
    \ game, List<long> guess) {\n        List<long> result = new List<long>();\n \
    \       long score;\n        long guess;\n        long diff;\n        bool correct;\n\
    \        bool found;\n        bool found2;\n        bool found3;\n        bool\
    \ found4;\n        bool found5;\n        bool found6;\n        bool found7;\n\
    \        bool found8;\n        bool found9;\n        bool found10;\n        bool\
    \ found11;\n        bool found12;\n        bool found13;\n        bool found14;\n\
    \        bool found15;\n        bool found16;\n        bool found17;\n       \
    \ bool found18;\n        bool found19;\n        bool found20;\n        bool found21;\n\
    \        bool found22;\n        bool found23;\n        bool found24;\n       \
    \ bool found25;\n        bool found26;\n        bool found27;\n        bool found28;\n\
    \        bool found29;\n        bool found30;\n        bool found31;\n       \
    \ bool found32;\n        bool found33;\n        bool found34;\n        bool found35;\n\
    \        bool found36;\n        bool found37;\n        bool found38;\n       \
    \ bool found39;\n        bool found40;\n        bool found41;\n        bool found42;\n\
    \        bool found43;\n        bool found44;\n        bool found45;\n       \
    \ bool found46;\n        bool found47;\n        bool found48;\n        bool found49;\n\
    \        bool found50;\n        bool found51;\n        bool found52;\n       \
    \ bool found53;\n        bool found54;\n        bool found55;\n        bool found56;\n\
    \        bool found57;\n        bool found58;\n        bool found59;\n       \
    \ bool found60;\n        bool found61;\n        bool found62;\n        bool found63;\n\
    \        bool found64;\n        bool found65;\n        bool found66;\n       \
    \ bool found67;\n        bool found68;\n        bool found69;\n        bool found70;\n\
    \        bool found71;\n        bool found72;\n        bool found73;\n       \
    \ bool found74;\n        bool found75;\n        bool found76;\n        bool found77;\n\
    \        bool found78;\n        bool found79;\n        bool found80;\n       \
    \ bool found81;\n        bool found82;\n        bool found83;\n        bool found84\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Compare((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})),\
    \ (new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L,\
    \ (long)-2L}))).Equals((new List<long>(new long[]{(long)0L, (long)0L, (long)0L,\
    \ (long)0L, (long)3L, (long)3L}))));\n    Debug.Assert(Compare((new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L})), (new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))));\n\
    \    Debug.Assert(Compare((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})),\
    \ (new List<long>(new long[]{(long)-1L, (long)-2L, (long)-3L}))).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)4L, (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L,\
    \ (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)0L, (long)0L, (long)1L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp0i23z703.cs(106,21): error CS1002: ; expected

    '
  timestamp: 1659976337
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // I think we all remember that feeling when the result of\
    \ some long-awaited\n    // event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    // definitely worth noting down and comparing.\n\
    \    // Your task is to determine if a person correctly guessed the results of\
    \ a number of matches.\n    // You are given two arrays of scores and guesses\
    \ of equal length, where each index shows a match. \n    // Return an array of\
    \ the same length denoting how far off each guess was. If they have guessed correctly,\n\
    \    // the value is 0, and if not, the value is the absolute difference between\
    \ the guess and the score.\n    // example:\n    public static List<long> Compare(List<long>\
    \ game, List<long> guess) {\n        List<long> result = new List<long>();\n \
    \       long score;\n        long guess;\n        long diff;\n        bool correct\
    \ = false;\n        for (int i = 0; i < game.Count; i++) {\n            score\
    \ = game[i];\n            guess = guess[i];\n            diff = guess - score;\n\
    \            if (diff < 0) {\n                result.Add(diff);\n            }\
    \ else {\n                result.Add(0);\n                correct = true;\n  \
    \          }\n        }\n        if (correct) {\n            return result;\n\
    \        } else {\n            return game.Zip(guess, (a, b) => a - b).ToList();\n\
    \        }\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Compare((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})),\
    \ (new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L,\
    \ (long)-2L}))).Equals((new List<long>(new long[]{(long)0L, (long)0L, (long)0L,\
    \ (long)0L, (long)3L, (long)3L}))));\n    Debug.Assert(Compare((new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L})), (new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))));\n\
    \    Debug.Assert(Compare((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})),\
    \ (new List<long>(new long[]{(long)-1L, (long)-2L, (long)-3L}))).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)4L, (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L,\
    \ (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)0L, (long)0L, (long)1L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp94tk_aeo.cs(20,14): error CS0136: A local or parameter named ''guess''
    cannot be declared in this scope because that name is used in an enclosing local
    scope to define a local or parameter

    /tmp/tmp94tk_aeo.cs(25,21): error CS0021: Cannot apply indexing with [] to an
    expression of type ''long''

    /tmp/tmp94tk_aeo.cs(37,25): error CS0411: The type arguments for method ''Enumerable.Zip<TFirst,
    TSecond, TResult>(IEnumerable<TFirst>, IEnumerable<TSecond>, Func<TFirst, TSecond,
    TResult>)'' cannot be inferred from the usage. Try specifying the type arguments
    explicitly.

    /tmp/tmp94tk_aeo.cs(25,21): error CS0165: Use of unassigned local variable ''guess''

    '
  timestamp: 1659976338
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // I think we all remember that feeling when the result of\
    \ some long-awaited\n    // event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    // definitely worth noting down and comparing.\n\
    \    // Your task is to determine if a person correctly guessed the results of\
    \ a number of matches.\n    // You are given two arrays of scores and guesses\
    \ of equal length, where each index shows a match. \n    // Return an array of\
    \ the same length denoting how far off each guess was. If they have guessed correctly,\n\
    \    // the value is 0, and if not, the value is the absolute difference between\
    \ the guess and the score.\n    // example:\n    public static List<long> Compare(List<long>\
    \ game, List<long> guess) {\n        List<long> result = new List<long>();\n \
    \       long score = 0;\n        long difference = 0;\n        foreach (long guess\
    \ in guess) {\n            score = game.Sum(x => x);\n            difference =\
    \ guess - score;\n            result.Add(difference);\n        }\n        return\
    \ result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Compare((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})),\
    \ (new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L,\
    \ (long)-2L}))).Equals((new List<long>(new long[]{(long)0L, (long)0L, (long)0L,\
    \ (long)0L, (long)3L, (long)3L}))));\n    Debug.Assert(Compare((new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L})), (new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))));\n\
    \    Debug.Assert(Compare((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})),\
    \ (new List<long>(new long[]{(long)-1L, (long)-2L, (long)-3L}))).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)4L, (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L,\
    \ (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)0L, (long)0L, (long)1L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpdo0xoxe9.cs(21,23): error CS0136: A local or parameter named ''guess''
    cannot be declared in this scope because that name is used in an enclosing local
    scope to define a local or parameter

    '
  timestamp: 1659976335
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // I think we all remember that feeling when the result of\
    \ some long-awaited\n    // event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    // definitely worth noting down and comparing.\n\
    \    // Your task is to determine if a person correctly guessed the results of\
    \ a number of matches.\n    // You are given two arrays of scores and guesses\
    \ of equal length, where each index shows a match. \n    // Return an array of\
    \ the same length denoting how far off each guess was. If they have guessed correctly,\n\
    \    // the value is 0, and if not, the value is the absolute difference between\
    \ the guess and the score.\n    // example:\n    public static List<long> Compare(List<long>\
    \ game, List<long> guess) {\n        List<long> result = new List<long>();\n \
    \       long score;\n        long guess;\n        long diff;\n        foreach\
    \ (var g in game) {\n            score = g;\n            foreach (var g in guess)\
    \ {\n                guess = g;\n                diff = score - guess;\n     \
    \           if (diff < 0) {\n                    result.Add(diff);\n         \
    \       }\n            }\n        }\n        return result;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Compare((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))));\n\
    \    Debug.Assert(Compare((new List<long>(new long[]{(long)0L, (long)0L, (long)0L,\
    \ (long)0L, (long)0L, (long)0L})), (new List<long>(new long[]{(long)0L, (long)0L,\
    \ (long)0L, (long)0L, (long)0L, (long)0L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))));\n    Debug.Assert(Compare((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (new List<long>(new long[]{(long)-1L,\
    \ (long)-2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,\
    \ (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L, (long)2L,\
    \ (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)0L,\
    \ (long)0L, (long)1L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpflrlg5dz.cs(20,14): error CS0136: A local or parameter named ''guess''
    cannot be declared in this scope because that name is used in an enclosing local
    scope to define a local or parameter

    /tmp/tmpflrlg5dz.cs(24,31): error CS1579: foreach statement cannot operate on
    variables of type ''long'' because ''long'' does not contain a public instance
    definition for ''GetEnumerator''

    /tmp/tmpflrlg5dz.cs(24,26): error CS0136: A local or parameter named ''g'' cannot
    be declared in this scope because that name is used in an enclosing local scope
    to define a local or parameter

    /tmp/tmpflrlg5dz.cs(24,31): error CS0165: Use of unassigned local variable ''guess''

    '
  timestamp: 1659976337
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // I think we all remember that feeling when the result of\
    \ some long-awaited\n    // event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    // definitely worth noting down and comparing.\n\
    \    // Your task is to determine if a person correctly guessed the results of\
    \ a number of matches.\n    // You are given two arrays of scores and guesses\
    \ of equal length, where each index shows a match. \n    // Return an array of\
    \ the same length denoting how far off each guess was. If they have guessed correctly,\n\
    \    // the value is 0, and if not, the value is the absolute difference between\
    \ the guess and the score.\n    // example:\n    public static List<long> Compare(List<long>\
    \ game, List<long> guess) {\n        // TODO: Write your code here\n        List<long>\
    \ result = new List<long>();\n        foreach (var g in game) {\n            long\
    \ diff = Math.Abs(g - guess[game.IndexOf(g)]);\n            result.Add(diff);\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))));\n  \
    \  Debug.Assert(Compare((new List<long>(new long[]{(long)0L, (long)0L, (long)0L,\
    \ (long)0L, (long)0L, (long)0L})), (new List<long>(new long[]{(long)0L, (long)0L,\
    \ (long)0L, (long)0L, (long)0L, (long)0L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))));\n    Debug.Assert(Compare((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (new List<long>(new long[]{(long)-1L,\
    \ (long)-2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,\
    \ (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L, (long)2L,\
    \ (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)0L,\
    \ (long)0L, (long)1L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d571f4892f97480480a858f83ae7b22e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d571f4892f97480480a858f83ae7b22e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976339
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // I think we all remember that feeling when the result of\
    \ some long-awaited\n    // event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    // definitely worth noting down and comparing.\n\
    \    // Your task is to determine if a person correctly guessed the results of\
    \ a number of matches.\n    // You are given two arrays of scores and guesses\
    \ of equal length, where each index shows a match. \n    // Return an array of\
    \ the same length denoting how far off each guess was. If they have guessed correctly,\n\
    \    // the value is 0, and if not, the value is the absolute difference between\
    \ the guess and the score.\n    // example:\n    public static List<long> Compare(List<long>\
    \ game, List<long> guess) {\n        List<long> result = new List<long>();\n \
    \       long diff = 0;\n        foreach (long g in game) {\n            diff =\
    \ g - guess[game.IndexOf(g)];\n            result.Add(diff);\n        }\n    \
    \    return result;\n    }\n    public static void Main(string[] args) {\n   \
    \ Debug.Assert(Compare((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L, (long)5L, (long)1L})), (new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)2L, (long)-2L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))));\n    Debug.Assert(Compare((new\
    \ List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L})),\
    \ (new List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L,\
    \ (long)0L}))).Equals((new List<long>(new long[]{(long)0L, (long)0L, (long)0L,\
    \ (long)0L, (long)0L, (long)0L}))));\n    Debug.Assert(Compare((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L})), (new List<long>(new long[]{(long)-1L,\
    \ (long)-2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,\
    \ (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L, (long)2L,\
    \ (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)0L,\
    \ (long)0L, (long)1L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <5f8e70bcf68f4853abbee528b0284289>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <5f8e70bcf68f4853abbee528b0284289>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976339
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // I think we all remember that feeling when the result of\
    \ some long-awaited\n    // event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    // definitely worth noting down and comparing.\n\
    \    // Your task is to determine if a person correctly guessed the results of\
    \ a number of matches.\n    // You are given two arrays of scores and guesses\
    \ of equal length, where each index shows a match. \n    // Return an array of\
    \ the same length denoting how far off each guess was. If they have guessed correctly,\n\
    \    // the value is 0, and if not, the value is the absolute difference between\
    \ the guess and the score.\n    // example:\n    public static List<long> Compare(List<long>\
    \ game, List<long> guess) {\n        List<long> result = new List<long>();\n \
    \       long score;\n        long guess;\n        long diff;\n        bool correct;\n\
    \        foreach (var item in game) {\n            score = item;\n           \
    \ guess = guess[game.IndexOf(item)]; // guesses are in same order as game\n  \
    \          diff = guess - score;\n            correct = diff < 0 ? diff > 0 :\
    \ diff == 0;\n            result.Add(correct ? diff : -diff);\n        }\n   \
    \     return result;\n    }\n    public static void Main(string[] args) {\n  \
    \  Debug.Assert(Compare((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L, (long)5L, (long)1L})), (new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)2L, (long)-2L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))));\n    Debug.Assert(Compare((new\
    \ List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L})),\
    \ (new List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L,\
    \ (long)0L}))).Equals((new List<long>(new long[]{(long)0L, (long)0L, (long)0L,\
    \ (long)0L, (long)0L, (long)0L}))));\n    Debug.Assert(Compare((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L})), (new List<long>(new long[]{(long)-1L,\
    \ (long)-2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,\
    \ (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L, (long)2L,\
    \ (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)0L,\
    \ (long)0L, (long)1L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpca4rkf5q.cs(20,14): error CS0136: A local or parameter named ''guess''
    cannot be declared in this scope because that name is used in an enclosing local
    scope to define a local or parameter

    /tmp/tmpca4rkf5q.cs(25,21): error CS0021: Cannot apply indexing with [] to an
    expression of type ''long''

    /tmp/tmpca4rkf5q.cs(25,21): error CS0165: Use of unassigned local variable ''guess''

    '
  timestamp: 1659976338
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // I think we all remember that feeling when the result of\
    \ some long-awaited\n    // event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    // definitely worth noting down and comparing.\n\
    \    // Your task is to determine if a person correctly guessed the results of\
    \ a number of matches.\n    // You are given two arrays of scores and guesses\
    \ of equal length, where each index shows a match. \n    // Return an array of\
    \ the same length denoting how far off each guess was. If they have guessed correctly,\n\
    \    // the value is 0, and if not, the value is the absolute difference between\
    \ the guess and the score.\n    // example:\n    public static List<long> Compare(List<long>\
    \ game, List<long> guess) {\n        List<long> result = new List<long>();\n \
    \       long score;\n        long guess;\n        long difference;\n        bool\
    \ correct;\n        foreach(long g in game) {\n            foreach(long g in guess)\
    \ {\n                score = g;\n                guess = g;\n                correct\
    \ = false;\n                difference = score - guess;\n                if (difference\
    \ < 0) {\n                    difference = -difference;\n                    correct\
    \ = true;\n                }\n                result.Add(difference);\n      \
    \      }\n        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))));\n  \
    \  Debug.Assert(Compare((new List<long>(new long[]{(long)0L, (long)0L, (long)0L,\
    \ (long)0L, (long)0L, (long)0L})), (new List<long>(new long[]{(long)0L, (long)0L,\
    \ (long)0L, (long)0L, (long)0L, (long)0L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))));\n    Debug.Assert(Compare((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (new List<long>(new long[]{(long)-1L,\
    \ (long)-2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,\
    \ (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L, (long)2L,\
    \ (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)0L,\
    \ (long)0L, (long)1L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp9c4zzvtd.cs(20,14): error CS0136: A local or parameter named ''guess''
    cannot be declared in this scope because that name is used in an enclosing local
    scope to define a local or parameter

    /tmp/tmp9c4zzvtd.cs(24,31): error CS1579: foreach statement cannot operate on
    variables of type ''long'' because ''long'' does not contain a public instance
    definition for ''GetEnumerator''

    /tmp/tmp9c4zzvtd.cs(24,26): error CS0136: A local or parameter named ''g'' cannot
    be declared in this scope because that name is used in an enclosing local scope
    to define a local or parameter

    /tmp/tmp9c4zzvtd.cs(24,31): error CS0165: Use of unassigned local variable ''guess''

    /tmp/tmp9c4zzvtd.cs(22,14): warning CS0219: The variable ''correct'' is assigned
    but its value is never used

    '
  timestamp: 1659976339
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // I think we all remember that feeling when the result of\
    \ some long-awaited\n    // event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    // definitely worth noting down and comparing.\n\
    \    // Your task is to determine if a person correctly guessed the results of\
    \ a number of matches.\n    // You are given two arrays of scores and guesses\
    \ of equal length, where each index shows a match. \n    // Return an array of\
    \ the same length denoting how far off each guess was. If they have guessed correctly,\n\
    \    // the value is 0, and if not, the value is the absolute difference between\
    \ the guess and the score.\n    // example:\n    public static List<long> Compare(List<long>\
    \ game, List<long> guess) {\n        List<long> result = new List<long>();\n \
    \       long score;\n        long guess;\n        long diff;\n        bool correct;\n\
    \        bool found;\n        bool found2;\n        bool found3;\n        bool\
    \ found4;\n        bool found5;\n        bool found6;\n        bool found7;\n\
    \        bool found8;\n        bool found9;\n        bool found10;\n        bool\
    \ found11;\n        bool found12;\n        bool found13;\n        bool found14;\n\
    \        bool found15;\n        bool found16;\n        bool found17;\n       \
    \ bool found18;\n        bool found19;\n        bool found20;\n        bool found21;\n\
    \        bool found22;\n        bool found23;\n        bool found24;\n       \
    \ bool found25;\n        bool found26;\n        bool found27;\n        bool found28;\n\
    \        bool found29;\n        bool found30;\n        bool found31;\n       \
    \ bool found32;\n        bool found33;\n        bool found34;\n        bool found35;\n\
    \        bool found36;\n        bool found37;\n        bool found38;\n       \
    \ bool found39;\n        bool found40;\n        bool found41;\n        bool found42;\n\
    \        bool found43;\n        bool found44;\n        bool found45;\n       \
    \ bool found46;\n        bool found47;\n        bool found48;\n        bool found49;\n\
    \        bool found50;\n        bool found51;\n        bool found52;\n       \
    \ bool found53;\n        bool found54;\n        bool found55;\n        bool found56;\n\
    \        bool found57;\n        bool found58;\n        bool found59;\n       \
    \ bool found60;\n        bool found61;\n        bool found62;\n        bool found63;\n\
    \        bool found64;\n        bool found65;\n        bool found66;\n       \
    \ bool found67;\n        bool found68;\n        bool found69;\n        bool found70;\n\
    \        bool found71;\n        bool found72;\n        bool found73;\n       \
    \ bool found74;\n        bool found75;\n        bool found76;\n        bool found77;\n\
    \        bool found78;\n        bool found79;\n        bool found80;\n       \
    \ bool found81;\n        bool found82;\n        bool found83;\n        bool found84\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Compare((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})),\
    \ (new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L,\
    \ (long)-2L}))).Equals((new List<long>(new long[]{(long)0L, (long)0L, (long)0L,\
    \ (long)0L, (long)3L, (long)3L}))));\n    Debug.Assert(Compare((new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L})), (new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))));\n\
    \    Debug.Assert(Compare((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})),\
    \ (new List<long>(new long[]{(long)-1L, (long)-2L, (long)-3L}))).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)4L, (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L,\
    \ (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)0L, (long)0L, (long)1L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp0i23z703.cs(106,21): error CS1002: ; expected

    '
  timestamp: 1659976337
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // I think we all remember that feeling when the result of\
    \ some long-awaited\n    // event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    // definitely worth noting down and comparing.\n\
    \    // Your task is to determine if a person correctly guessed the results of\
    \ a number of matches.\n    // You are given two arrays of scores and guesses\
    \ of equal length, where each index shows a match. \n    // Return an array of\
    \ the same length denoting how far off each guess was. If they have guessed correctly,\n\
    \    // the value is 0, and if not, the value is the absolute difference between\
    \ the guess and the score.\n    // example:\n    public static List<long> Compare(List<long>\
    \ game, List<long> guess) {\n        var result = new List<long>();\n        foreach\
    \ (var g in game) {\n            var g2 = g.CompareTo(guess);\n            if\
    \ (g2 == 0) {\n                result.Add(0);\n            } else {\n        \
    \        result.Add(g2);\n            }\n        }\n        return result;\n \
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Compare((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})),\
    \ (new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L,\
    \ (long)-2L}))).Equals((new List<long>(new long[]{(long)0L, (long)0L, (long)0L,\
    \ (long)0L, (long)3L, (long)3L}))));\n    Debug.Assert(Compare((new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L})), (new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))));\n\
    \    Debug.Assert(Compare((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})),\
    \ (new List<long>(new long[]{(long)-1L, (long)-2L, (long)-3L}))).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)4L, (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L,\
    \ (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)0L, (long)0L, (long)1L}))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentException: Object must be of type\
    \ Int64.\n  at System.Int64.CompareTo (System.Object value) [0x00024] in <aa5dff9b31c64fce86559bbbf6cd364f>:0\
    \ \n  at Problem.Compare (System.Collections.Generic.List`1[T] game, System.Collections.Generic.List`1[T]\
    \ guess) [0x0001a] in <ccccd13ca3244b9ebfa89caa49ef2ed7>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x0002d] in <ccccd13ca3244b9ebfa89caa49ef2ed7>:0 \n\
    [ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentException: Object must be of\
    \ type Int64.\n  at System.Int64.CompareTo (System.Object value) [0x00024] in\
    \ <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Compare (System.Collections.Generic.List`1[T]\
    \ game, System.Collections.Generic.List`1[T] guess) [0x0001a] in <ccccd13ca3244b9ebfa89caa49ef2ed7>:0\
    \ \n  at Problem.Main (System.String[] args) [0x0002d] in <ccccd13ca3244b9ebfa89caa49ef2ed7>:0\
    \ \n"
  stdout: ''
  timestamp: 1659976339
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // I think we all remember that feeling when the result of\
    \ some long-awaited\n    // event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    // definitely worth noting down and comparing.\n\
    \    // Your task is to determine if a person correctly guessed the results of\
    \ a number of matches.\n    // You are given two arrays of scores and guesses\
    \ of equal length, where each index shows a match. \n    // Return an array of\
    \ the same length denoting how far off each guess was. If they have guessed correctly,\n\
    \    // the value is 0, and if not, the value is the absolute difference between\
    \ the guess and the score.\n    // example:\n    public static List<long> Compare(List<long>\
    \ game, List<long> guess) {\n        List<long> result = new List<long>();\n \
    \       foreach (var item in game) {\n            result.Add(item - guess[game.IndexOf(item)]);\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))));\n  \
    \  Debug.Assert(Compare((new List<long>(new long[]{(long)0L, (long)0L, (long)0L,\
    \ (long)0L, (long)0L, (long)0L})), (new List<long>(new long[]{(long)0L, (long)0L,\
    \ (long)0L, (long)0L, (long)0L, (long)0L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))));\n    Debug.Assert(Compare((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (new List<long>(new long[]{(long)-1L,\
    \ (long)-2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,\
    \ (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L, (long)2L,\
    \ (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)0L,\
    \ (long)0L, (long)1L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <0765a6ae9759468da933b37b4321b27a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <0765a6ae9759468da933b37b4321b27a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976339
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // I think we all remember that feeling when the result of\
    \ some long-awaited\n    // event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    // definitely worth noting down and comparing.\n\
    \    // Your task is to determine if a person correctly guessed the results of\
    \ a number of matches.\n    // You are given two arrays of scores and guesses\
    \ of equal length, where each index shows a match. \n    // Return an array of\
    \ the same length denoting how far off each guess was. If they have guessed correctly,\n\
    \    // the value is 0, and if not, the value is the absolute difference between\
    \ the guess and the score.\n    // example:\n    public static List<long> Compare(List<long>\
    \ game, List<long> guess) {\n        List<long> result = new List<long>();\n \
    \       long score = 0;\n        long diff = 0;\n        long diff2 = 0;\n   \
    \     long diff3 = 0;\n        long diff4 = 0;\n        long diff5 = 0;\n    \
    \    long diff6 = 0;\n        long diff7 = 0;\n        long diff8 = 0;\n     \
    \   long diff9 = 0;\n        long diff10 = 0;\n        long diff11 = 0;\n    \
    \    long diff12 = 0;\n        long diff13 = 0;\n        long diff14 = 0;\n  \
    \      long diff15 = 0;\n        long diff16 = 0;\n        long diff17 = 0;\n\
    \        long diff18 = 0;\n        long diff19 = 0;\n        long diff20 = 0;\n\
    \        long diff21 = 0;\n        long diff22 = 0;\n        long diff23 = 0;\n\
    \        long diff24 = 0;\n        long diff25 = 0;\n        long diff26 = 0;\n\
    \        long diff27 = 0;\n        long diff28 = 0;\n        long diff29 = 0;\n\
    \        long diff30 = 0;\n        long diff31 = 0;\n        long diff32 = 0;\n\
    \        long diff33 = 0;\n        long diff34 = 0;\n        long diff35 = 0;\n\
    \        long diff36 = 0;\n        long diff37 = 0;\n        long diff38 = 0;\n\
    \        long diff39 = 0;\n        long diff40 = 0;\n        long diff41 = 0;\n\
    \        long diff42 = 0;\n        long diff43 = 0;\n        long diff44 = 0;\n\
    \        long diff45 = 0;\n        long diff46 = 0;\n        long diff47 = 0;\n\
    \        long diff48 = 0;\n        long diff49 = 0;\n        long diff50 = 0;\n\
    \        long diff51 = 0;\n        long diff52 = 0;\n        long diff53 = 0;\n\
    \        long diff54 = 0;\n        long diff55 = 0;\n        long diff56 = 0;\n\
    \        long diff57 = 0;\n        long diff58 = 0;\n        long diff59 = 0;\n\
    \        long diff60 = 0;\n        long diff61 = 0;\n        long diff62 = 0;\n\
    \        long diff63 = 0;\n        long diff64 = 0;\n        long diff65 = 0;\n\
    \        long diff66 = 0;\n        long diff67 = 0;\n        long diff68 = 0;\n\
    \        long diff69 = 0;\n        long diff70 = 0;\n        long diff71 = 0;\n\
    \        long diff72 = 0;\n        long diff73 = 0;\n        long diff74 = 0;\n\
    \        long diff75 = 0;\n        long diff76 = 0;\n        long diff77 = 0;\n\
    \        long diff78 = 0;\n        long diff79 = 0;\n        long diff80 = 0;\n\
    \        long diff81 = 0;\n        long diff82 = 0;\n        long diff83 = 0;\n\
    \        long diff84\n    }\n    public static void Main(string[] args) {\n  \
    \  Debug.Assert(Compare((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L, (long)5L, (long)1L})), (new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)2L, (long)-2L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))));\n    Debug.Assert(Compare((new\
    \ List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L})),\
    \ (new List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L,\
    \ (long)0L}))).Equals((new List<long>(new long[]{(long)0L, (long)0L, (long)0L,\
    \ (long)0L, (long)0L, (long)0L}))));\n    Debug.Assert(Compare((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L})), (new List<long>(new long[]{(long)-1L,\
    \ (long)-2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,\
    \ (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L, (long)2L,\
    \ (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)0L,\
    \ (long)0L, (long)1L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpc7qjn8vw.cs(103,20): error CS1002: ; expected

    '
  timestamp: 1659976334
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // I think we all remember that feeling when the result of\
    \ some long-awaited\n    // event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    // definitely worth noting down and comparing.\n\
    \    // Your task is to determine if a person correctly guessed the results of\
    \ a number of matches.\n    // You are given two arrays of scores and guesses\
    \ of equal length, where each index shows a match. \n    // Return an array of\
    \ the same length denoting how far off each guess was. If they have guessed correctly,\n\
    \    // the value is 0, and if not, the value is the absolute difference between\
    \ the guess and the score.\n    // example:\n    public static List<long> Compare(List<long>\
    \ game, List<long> guess) {\n        List<long> result = new List<long>();\n \
    \       long score;\n        long guess;\n        bool correct;\n        long\
    \ diff;\n        foreach (long g in game) {\n            score = g;\n        \
    \    guess = guess.First();\n            correct = false;\n            diff =\
    \ 0;\n            foreach (long g in guess) {\n                diff = g - score;\n\
    \                if (diff < 0) {\n                    correct = true;\n      \
    \              break;\n                }\n            }\n            result.Add(correct\
    \ ? 0 : diff);\n        }\n        return result;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))));\n  \
    \  Debug.Assert(Compare((new List<long>(new long[]{(long)0L, (long)0L, (long)0L,\
    \ (long)0L, (long)0L, (long)0L})), (new List<long>(new long[]{(long)0L, (long)0L,\
    \ (long)0L, (long)0L, (long)0L, (long)0L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))));\n    Debug.Assert(Compare((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (new List<long>(new long[]{(long)-1L,\
    \ (long)-2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,\
    \ (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L, (long)2L,\
    \ (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)0L,\
    \ (long)0L, (long)1L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmphw083o29.cs(20,14): error CS0136: A local or parameter named ''guess''
    cannot be declared in this scope because that name is used in an enclosing local
    scope to define a local or parameter

    /tmp/tmphw083o29.cs(25,27): error CS1061: ''long'' does not contain a definition
    for ''First'' and no accessible extension method ''First'' accepting a first argument
    of type ''long'' could be found (are you missing a using directive or an assembly
    reference?)

    /tmp/tmphw083o29.cs(28,32): error CS1579: foreach statement cannot operate on
    variables of type ''long'' because ''long'' does not contain a public instance
    definition for ''GetEnumerator''

    /tmp/tmphw083o29.cs(28,27): error CS0136: A local or parameter named ''g'' cannot
    be declared in this scope because that name is used in an enclosing local scope
    to define a local or parameter

    /tmp/tmphw083o29.cs(25,21): error CS0165: Use of unassigned local variable ''guess''

    '
  timestamp: 1659976339
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // I think we all remember that feeling when the result of\
    \ some long-awaited\n    // event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    // definitely worth noting down and comparing.\n\
    \    // Your task is to determine if a person correctly guessed the results of\
    \ a number of matches.\n    // You are given two arrays of scores and guesses\
    \ of equal length, where each index shows a match. \n    // Return an array of\
    \ the same length denoting how far off each guess was. If they have guessed correctly,\n\
    \    // the value is 0, and if not, the value is the absolute difference between\
    \ the guess and the score.\n    // example:\n    public static List<long> Compare(List<long>\
    \ game, List<long> guess) {\n        List<long> result = new List<long>();\n \
    \       long score;\n        long guess;\n        long diff;\n        bool correct;\n\
    \        bool found;\n        bool found2;\n        bool found3;\n        bool\
    \ found4;\n        bool found5;\n        bool found6;\n        bool found7;\n\
    \        bool found8;\n        bool found9;\n        bool found10;\n        bool\
    \ found11;\n        bool found12;\n        bool found13;\n        bool found14;\n\
    \        bool found15;\n        bool found16;\n        bool found17;\n       \
    \ bool found18;\n        bool found19;\n        bool found20;\n        bool found21;\n\
    \        bool found22;\n        bool found23;\n        bool found24;\n       \
    \ bool found25;\n        bool found26;\n        bool found27;\n        bool found28;\n\
    \        bool found29;\n        bool found30;\n        bool found31;\n       \
    \ bool found32;\n        bool found33;\n        bool found34;\n        bool found35;\n\
    \        bool found36;\n        bool found37;\n        bool found38;\n       \
    \ bool found39;\n        bool found40;\n        bool found41;\n        bool found42;\n\
    \        bool found43;\n        bool found44;\n        bool found45;\n       \
    \ bool found46;\n        bool found47;\n        bool found48;\n        bool found49;\n\
    \        bool found50;\n        bool found51;\n        bool found52;\n       \
    \ bool found53;\n        bool found54;\n        bool found55;\n        bool found56;\n\
    \        bool found57;\n        bool found58;\n        bool found59;\n       \
    \ bool found60;\n        bool found61;\n        bool found62;\n        bool found63;\n\
    \        bool found64;\n        bool found65;\n        bool found66;\n       \
    \ bool found67;\n        bool found68;\n        bool found69;\n        bool found70;\n\
    \        bool found71;\n        bool found72;\n        bool found73;\n       \
    \ bool found74;\n        bool found75;\n        bool found76;\n        bool found77;\n\
    \        bool found78;\n        bool found79;\n        bool found80;\n       \
    \ bool found81;\n        bool found82;\n        bool found83;\n        bool found84\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Compare((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})),\
    \ (new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L,\
    \ (long)-2L}))).Equals((new List<long>(new long[]{(long)0L, (long)0L, (long)0L,\
    \ (long)0L, (long)3L, (long)3L}))));\n    Debug.Assert(Compare((new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L})), (new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))));\n\
    \    Debug.Assert(Compare((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})),\
    \ (new List<long>(new long[]{(long)-1L, (long)-2L, (long)-3L}))).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)4L, (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L,\
    \ (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)0L, (long)0L, (long)1L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp0i23z703.cs(106,21): error CS1002: ; expected

    '
  timestamp: 1659976337
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // I think we all remember that feeling when the result of\
    \ some long-awaited\n    // event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    // definitely worth noting down and comparing.\n\
    \    // Your task is to determine if a person correctly guessed the results of\
    \ a number of matches.\n    // You are given two arrays of scores and guesses\
    \ of equal length, where each index shows a match. \n    // Return an array of\
    \ the same length denoting how far off each guess was. If they have guessed correctly,\n\
    \    // the value is 0, and if not, the value is the absolute difference between\
    \ the guess and the score.\n    // example:\n    public static List<long> Compare(List<long>\
    \ game, List<long> guess) {\n        List<long> result = new List<long>();\n \
    \       long score = 0;\n        long guess = 0;\n        long difference = 0;\n\
    \        foreach (var item in game) {\n            score = item;\n           \
    \ guess = guess[game.IndexOf(item)]; // get guess from game\n            difference\
    \ = guess - score; // get difference from guess\n            result.Add(difference);\
    \ // add difference to result\n        }\n        return result;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Compare((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))));\n\
    \    Debug.Assert(Compare((new List<long>(new long[]{(long)0L, (long)0L, (long)0L,\
    \ (long)0L, (long)0L, (long)0L})), (new List<long>(new long[]{(long)0L, (long)0L,\
    \ (long)0L, (long)0L, (long)0L, (long)0L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))));\n    Debug.Assert(Compare((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (new List<long>(new long[]{(long)-1L,\
    \ (long)-2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,\
    \ (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L, (long)2L,\
    \ (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)0L,\
    \ (long)0L, (long)1L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp7l34yv6t.cs(20,14): error CS0136: A local or parameter named ''guess''
    cannot be declared in this scope because that name is used in an enclosing local
    scope to define a local or parameter

    /tmp/tmp7l34yv6t.cs(24,21): error CS0021: Cannot apply indexing with [] to an
    expression of type ''long''

    '
  timestamp: 1659976339
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // I think we all remember that feeling when the result of\
    \ some long-awaited\n    // event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    // definitely worth noting down and comparing.\n\
    \    // Your task is to determine if a person correctly guessed the results of\
    \ a number of matches.\n    // You are given two arrays of scores and guesses\
    \ of equal length, where each index shows a match. \n    // Return an array of\
    \ the same length denoting how far off each guess was. If they have guessed correctly,\n\
    \    // the value is 0, and if not, the value is the absolute difference between\
    \ the guess and the score.\n    // example:\n    public static List<long> Compare(List<long>\
    \ game, List<long> guess) {\n        var result = new List<long>();\n        foreach\
    \ (var g in game) {\n            var guess = guess.FirstOrDefault(x => x == g);\n\
    \            if (guess == null) {\n                result.Add(0);\n          \
    \  } else {\n                result.Add(Math.Abs(guess - g));\n            }\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))));\n  \
    \  Debug.Assert(Compare((new List<long>(new long[]{(long)0L, (long)0L, (long)0L,\
    \ (long)0L, (long)0L, (long)0L})), (new List<long>(new long[]{(long)0L, (long)0L,\
    \ (long)0L, (long)0L, (long)0L, (long)0L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))));\n    Debug.Assert(Compare((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (new List<long>(new long[]{(long)-1L,\
    \ (long)-2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,\
    \ (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L, (long)2L,\
    \ (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)0L,\
    \ (long)0L, (long)1L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpltsofqsz.cs(20,17): error CS0136: A local or parameter named ''guess''
    cannot be declared in this scope because that name is used in an enclosing local
    scope to define a local or parameter

    /tmp/tmpltsofqsz.cs(20,25): error CS0841: Cannot use local variable ''guess''
    before it is declared

    '
  timestamp: 1659976334
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // I think we all remember that feeling when the result of\
    \ some long-awaited\n    // event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    // definitely worth noting down and comparing.\n\
    \    // Your task is to determine if a person correctly guessed the results of\
    \ a number of matches.\n    // You are given two arrays of scores and guesses\
    \ of equal length, where each index shows a match. \n    // Return an array of\
    \ the same length denoting how far off each guess was. If they have guessed correctly,\n\
    \    // the value is 0, and if not, the value is the absolute difference between\
    \ the guess and the score.\n    // example:\n    public static List<long> Compare(List<long>\
    \ game, List<long> guess) {\n        // Your code here\n        List<long> result\
    \ = new List<long>();\n        long score = 0;\n        long guess = 0;\n    \
    \    foreach (var item in game) {\n            score = item;\n            guess\
    \ = guess[game.IndexOf(item)]; // guess[game.IndexOf(item)]\n            result.Add(Math.Abs(guess\
    \ - score));\n        }\n        return result;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))));\n  \
    \  Debug.Assert(Compare((new List<long>(new long[]{(long)0L, (long)0L, (long)0L,\
    \ (long)0L, (long)0L, (long)0L})), (new List<long>(new long[]{(long)0L, (long)0L,\
    \ (long)0L, (long)0L, (long)0L, (long)0L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))));\n    Debug.Assert(Compare((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (new List<long>(new long[]{(long)-1L,\
    \ (long)-2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,\
    \ (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L, (long)2L,\
    \ (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)0L,\
    \ (long)0L, (long)1L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpipzrdhs1.cs(21,14): error CS0136: A local or parameter named ''guess''
    cannot be declared in this scope because that name is used in an enclosing local
    scope to define a local or parameter

    /tmp/tmpipzrdhs1.cs(24,21): error CS0021: Cannot apply indexing with [] to an
    expression of type ''long''

    '
  timestamp: 1659976339
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // I think we all remember that feeling when the result of\
    \ some long-awaited\n    // event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    // definitely worth noting down and comparing.\n\
    \    // Your task is to determine if a person correctly guessed the results of\
    \ a number of matches.\n    // You are given two arrays of scores and guesses\
    \ of equal length, where each index shows a match. \n    // Return an array of\
    \ the same length denoting how far off each guess was. If they have guessed correctly,\n\
    \    // the value is 0, and if not, the value is the absolute difference between\
    \ the guess and the score.\n    // example:\n    public static List<long> Compare(List<long>\
    \ game, List<long> guess) {\n        List<long> result = new List<long>();\n \
    \       long score = 0;\n        long guess = 0;\n        long difference = 0;\n\
    \        foreach (var item in game) {\n            score = item;\n           \
    \ guess = guess[game.IndexOf(item)]; // get guess from game\n            difference\
    \ = guess - score; // get difference from guess\n            result.Add(difference);\
    \ // add difference to result\n        }\n        return result;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Compare((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))));\n\
    \    Debug.Assert(Compare((new List<long>(new long[]{(long)0L, (long)0L, (long)0L,\
    \ (long)0L, (long)0L, (long)0L})), (new List<long>(new long[]{(long)0L, (long)0L,\
    \ (long)0L, (long)0L, (long)0L, (long)0L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))));\n    Debug.Assert(Compare((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (new List<long>(new long[]{(long)-1L,\
    \ (long)-2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,\
    \ (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L, (long)2L,\
    \ (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)0L,\
    \ (long)0L, (long)1L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp7l34yv6t.cs(20,14): error CS0136: A local or parameter named ''guess''
    cannot be declared in this scope because that name is used in an enclosing local
    scope to define a local or parameter

    /tmp/tmp7l34yv6t.cs(24,21): error CS0021: Cannot apply indexing with [] to an
    expression of type ''long''

    '
  timestamp: 1659976339
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // I think we all remember that feeling when the result of\
    \ some long-awaited\n    // event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    // definitely worth noting down and comparing.\n\
    \    // Your task is to determine if a person correctly guessed the results of\
    \ a number of matches.\n    // You are given two arrays of scores and guesses\
    \ of equal length, where each index shows a match. \n    // Return an array of\
    \ the same length denoting how far off each guess was. If they have guessed correctly,\n\
    \    // the value is 0, and if not, the value is the absolute difference between\
    \ the guess and the score.\n    // example:\n    public static List<long> Compare(List<long>\
    \ game, List<long> guess) {\n        List<long> result = new List<long>();\n \
    \       long score;\n        long guess;\n        bool correct;\n        long\
    \ diff;\n        foreach (int i in game.Count) {\n            score = game[i];\n\
    \            guess = guess[i];\n            correct = guess == score;\n      \
    \      diff = correct ? 0 : Math.Abs(guess - score);\n            result.Add(diff);\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))));\n  \
    \  Debug.Assert(Compare((new List<long>(new long[]{(long)0L, (long)0L, (long)0L,\
    \ (long)0L, (long)0L, (long)0L})), (new List<long>(new long[]{(long)0L, (long)0L,\
    \ (long)0L, (long)0L, (long)0L, (long)0L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))));\n    Debug.Assert(Compare((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (new List<long>(new long[]{(long)-1L,\
    \ (long)-2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,\
    \ (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L, (long)2L,\
    \ (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)0L,\
    \ (long)0L, (long)1L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpom682f42.cs(20,14): error CS0136: A local or parameter named ''guess''
    cannot be declared in this scope because that name is used in an enclosing local
    scope to define a local or parameter

    /tmp/tmpom682f42.cs(23,27): error CS1579: foreach statement cannot operate on
    variables of type ''int'' because ''int'' does not contain a public instance definition
    for ''GetEnumerator''

    /tmp/tmpom682f42.cs(25,21): error CS0021: Cannot apply indexing with [] to an
    expression of type ''long''

    /tmp/tmpom682f42.cs(25,21): error CS0165: Use of unassigned local variable ''guess''

    '
  timestamp: 1659976339
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // I think we all remember that feeling when the result of\
    \ some long-awaited\n    // event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    // definitely worth noting down and comparing.\n\
    \    // Your task is to determine if a person correctly guessed the results of\
    \ a number of matches.\n    // You are given two arrays of scores and guesses\
    \ of equal length, where each index shows a match. \n    // Return an array of\
    \ the same length denoting how far off each guess was. If they have guessed correctly,\n\
    \    // the value is 0, and if not, the value is the absolute difference between\
    \ the guess and the score.\n    // example:\n    public static List<long> Compare(List<long>\
    \ game, List<long> guess) {\n        List<long> result = new List<long>();\n \
    \       long score = 0;\n        long difference = 0;\n        foreach (long guess\
    \ in guess) {\n            score += game[guess];\n        }\n        foreach (long\
    \ guess in guess) {\n            difference = Math.Abs(guess - score);\n     \
    \       result.Add(difference);\n        }\n        return result;\n    }\n  \
    \  public static void Main(string[] args) {\n    Debug.Assert(Compare((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))));\n\
    \    Debug.Assert(Compare((new List<long>(new long[]{(long)0L, (long)0L, (long)0L,\
    \ (long)0L, (long)0L, (long)0L})), (new List<long>(new long[]{(long)0L, (long)0L,\
    \ (long)0L, (long)0L, (long)0L, (long)0L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))));\n    Debug.Assert(Compare((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (new List<long>(new long[]{(long)-1L,\
    \ (long)-2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,\
    \ (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L, (long)2L,\
    \ (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)0L,\
    \ (long)0L, (long)1L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp4vudsdt6.cs(21,23): error CS0136: A local or parameter named ''guess''
    cannot be declared in this scope because that name is used in an enclosing local
    scope to define a local or parameter

    /tmp/tmp4vudsdt6.cs(22,27): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmp4vudsdt6.cs(24,23): error CS0136: A local or parameter named ''guess''
    cannot be declared in this scope because that name is used in an enclosing local
    scope to define a local or parameter

    '
  timestamp: 1659976339
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // I think we all remember that feeling when the result of\
    \ some long-awaited\n    // event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    // definitely worth noting down and comparing.\n\
    \    // Your task is to determine if a person correctly guessed the results of\
    \ a number of matches.\n    // You are given two arrays of scores and guesses\
    \ of equal length, where each index shows a match. \n    // Return an array of\
    \ the same length denoting how far off each guess was. If they have guessed correctly,\n\
    \    // the value is 0, and if not, the value is the absolute difference between\
    \ the guess and the score.\n    // example:\n    public static List<long> Compare(List<long>\
    \ game, List<long> guess) {\n        List<long> result = new List<long>();\n \
    \       long diff = 0;\n        long score = 0;\n        foreach (long g in game)\
    \ {\n            score = g;\n            foreach (long g in guess) {\n       \
    \         diff = g - score;\n                if (diff < 0) {\n               \
    \     diff = -diff;\n                }\n                result.Add(diff);\n  \
    \          }\n        }\n        return result;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))));\n  \
    \  Debug.Assert(Compare((new List<long>(new long[]{(long)0L, (long)0L, (long)0L,\
    \ (long)0L, (long)0L, (long)0L})), (new List<long>(new long[]{(long)0L, (long)0L,\
    \ (long)0L, (long)0L, (long)0L, (long)0L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))));\n    Debug.Assert(Compare((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (new List<long>(new long[]{(long)-1L,\
    \ (long)-2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,\
    \ (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L, (long)2L,\
    \ (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)0L,\
    \ (long)0L, (long)1L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpet7soczl.cs(23,27): error CS0136: A local or parameter named ''g'' cannot
    be declared in this scope because that name is used in an enclosing local scope
    to define a local or parameter

    '
  timestamp: 1659976339
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // I think we all remember that feeling when the result of\
    \ some long-awaited\n    // event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    // definitely worth noting down and comparing.\n\
    \    // Your task is to determine if a person correctly guessed the results of\
    \ a number of matches.\n    // You are given two arrays of scores and guesses\
    \ of equal length, where each index shows a match. \n    // Return an array of\
    \ the same length denoting how far off each guess was. If they have guessed correctly,\n\
    \    // the value is 0, and if not, the value is the absolute difference between\
    \ the guess and the score.\n    // example:\n    public static List<long> Compare(List<long>\
    \ game, List<long> guess) {\n        List<long> result = new List<long>();\n \
    \       long score;\n        long guess;\n        long diff;\n        foreach\
    \ (var g in game) {\n            score = g;\n            foreach (var g in guess)\
    \ {\n                guess = g;\n                diff = score - guess;\n     \
    \           if (diff > 0) {\n                    result.Add(diff);\n         \
    \       }\n            }\n        }\n        return result;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Compare((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))));\n\
    \    Debug.Assert(Compare((new List<long>(new long[]{(long)0L, (long)0L, (long)0L,\
    \ (long)0L, (long)0L, (long)0L})), (new List<long>(new long[]{(long)0L, (long)0L,\
    \ (long)0L, (long)0L, (long)0L, (long)0L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))));\n    Debug.Assert(Compare((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (new List<long>(new long[]{(long)-1L,\
    \ (long)-2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,\
    \ (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L, (long)2L,\
    \ (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)0L,\
    \ (long)0L, (long)1L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpiw1kcvbt.cs(20,14): error CS0136: A local or parameter named ''guess''
    cannot be declared in this scope because that name is used in an enclosing local
    scope to define a local or parameter

    /tmp/tmpiw1kcvbt.cs(24,31): error CS1579: foreach statement cannot operate on
    variables of type ''long'' because ''long'' does not contain a public instance
    definition for ''GetEnumerator''

    /tmp/tmpiw1kcvbt.cs(24,26): error CS0136: A local or parameter named ''g'' cannot
    be declared in this scope because that name is used in an enclosing local scope
    to define a local or parameter

    /tmp/tmpiw1kcvbt.cs(24,31): error CS0165: Use of unassigned local variable ''guess''

    '
  timestamp: 1659976339
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // I think we all remember that feeling when the result of\
    \ some long-awaited\n    // event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    // definitely worth noting down and comparing.\n\
    \    // Your task is to determine if a person correctly guessed the results of\
    \ a number of matches.\n    // You are given two arrays of scores and guesses\
    \ of equal length, where each index shows a match. \n    // Return an array of\
    \ the same length denoting how far off each guess was. If they have guessed correctly,\n\
    \    // the value is 0, and if not, the value is the absolute difference between\
    \ the guess and the score.\n    // example:\n    public static List<long> Compare(List<long>\
    \ game, List<long> guess) {\n        List<long> result = new List<long>();\n \
    \       long score;\n        long guess;\n        long diff;\n        long diffAbs;\n\
    \        bool correct;\n        bool found;\n        bool found2;\n        bool\
    \ found3;\n        bool found4;\n        bool found5;\n        bool found6;\n\
    \        bool found7;\n        bool found8;\n        bool found9;\n        bool\
    \ found10;\n        bool found11;\n        bool found12;\n        bool found13;\n\
    \        bool found14;\n        bool found15;\n        bool found16;\n       \
    \ bool found17;\n        bool found18;\n        bool found19;\n        bool found20;\n\
    \        bool found21;\n        bool found22;\n        bool found23;\n       \
    \ bool found24;\n        bool found25;\n        bool found26;\n        bool found27;\n\
    \        bool found28;\n        bool found29;\n        bool found30;\n       \
    \ bool found31;\n        bool found32;\n        bool found33;\n        bool found34;\n\
    \        bool found35;\n        bool found36;\n        bool found37;\n       \
    \ bool found38;\n        bool found39;\n        bool found40;\n        bool found41;\n\
    \        bool found42;\n        bool found43;\n        bool found44;\n       \
    \ bool found45;\n        bool found46;\n        bool found47;\n        bool found48;\n\
    \        bool found49;\n        bool found50;\n        bool found51;\n       \
    \ bool found52;\n        bool found53;\n        bool found54;\n        bool found55;\n\
    \        bool found56;\n        bool found57;\n        bool found58;\n       \
    \ bool found59;\n        bool found60;\n        bool found61;\n        bool found62;\n\
    \        bool found63;\n        bool found64;\n        bool found65;\n       \
    \ bool found66;\n        bool found67;\n        bool found68;\n        bool found69;\n\
    \        bool found70;\n        bool found71;\n        bool found72;\n       \
    \ bool found73;\n        bool found74;\n        bool found75;\n        bool found76;\n\
    \        bool found77;\n        bool found78;\n        bool found79;\n       \
    \ bool found80;\n        bool found81;\n        bool found82;\n        bool found83\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Compare((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})),\
    \ (new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L,\
    \ (long)-2L}))).Equals((new List<long>(new long[]{(long)0L, (long)0L, (long)0L,\
    \ (long)0L, (long)3L, (long)3L}))));\n    Debug.Assert(Compare((new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L})), (new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))));\n\
    \    Debug.Assert(Compare((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})),\
    \ (new List<long>(new long[]{(long)-1L, (long)-2L, (long)-3L}))).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)4L, (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L,\
    \ (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)0L, (long)0L, (long)1L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpglhfsz5m.cs(106,21): error CS1002: ; expected

    '
  timestamp: 1659976338
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // I think we all remember that feeling when the result of\
    \ some long-awaited\n    // event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    // definitely worth noting down and comparing.\n\
    \    // Your task is to determine if a person correctly guessed the results of\
    \ a number of matches.\n    // You are given two arrays of scores and guesses\
    \ of equal length, where each index shows a match. \n    // Return an array of\
    \ the same length denoting how far off each guess was. If they have guessed correctly,\n\
    \    // the value is 0, and if not, the value is the absolute difference between\
    \ the guess and the score.\n    // example:\n    public static List<long> Compare(List<long>\
    \ game, List<long> guess) {\n        // Your code goes here\n        List<long>\
    \ result = new List<long>();\n        foreach (long g in game) {\n           \
    \ long guess = guess.FirstOrDefault(x => x == g);\n            if (guess == g)\
    \ {\n                result.Add(0);\n            } else {\n                result.Add(Math.Abs(g\
    \ - guess));\n            }\n        }\n        return result;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Compare((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))));\n\
    \    Debug.Assert(Compare((new List<long>(new long[]{(long)0L, (long)0L, (long)0L,\
    \ (long)0L, (long)0L, (long)0L})), (new List<long>(new long[]{(long)0L, (long)0L,\
    \ (long)0L, (long)0L, (long)0L, (long)0L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))));\n    Debug.Assert(Compare((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (new List<long>(new long[]{(long)-1L,\
    \ (long)-2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,\
    \ (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L, (long)2L,\
    \ (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)0L,\
    \ (long)0L, (long)1L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpygbnfjpf.cs(21,18): error CS0136: A local or parameter named ''guess''
    cannot be declared in this scope because that name is used in an enclosing local
    scope to define a local or parameter

    /tmp/tmpygbnfjpf.cs(21,32): error CS1061: ''long'' does not contain a definition
    for ''FirstOrDefault'' and no accessible extension method ''FirstOrDefault'' accepting
    a first argument of type ''long'' could be found (are you missing a using directive
    or an assembly reference?)

    /tmp/tmpygbnfjpf.cs(21,26): error CS0165: Use of unassigned local variable ''guess''

    '
  timestamp: 1659976339
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // I think we all remember that feeling when the result of\
    \ some long-awaited\n    // event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    // definitely worth noting down and comparing.\n\
    \    // Your task is to determine if a person correctly guessed the results of\
    \ a number of matches.\n    // You are given two arrays of scores and guesses\
    \ of equal length, where each index shows a match. \n    // Return an array of\
    \ the same length denoting how far off each guess was. If they have guessed correctly,\n\
    \    // the value is 0, and if not, the value is the absolute difference between\
    \ the guess and the score.\n    // example:\n    public static List<long> Compare(List<long>\
    \ game, List<long> guess) {\n        // Your code goes here\n        List<long>\
    \ result = new List<long>();\n        long score = 0;\n        long guess = 0;\n\
    \        long difference = 0;\n        foreach (var item in game) {\n        \
    \    score += item;\n        }\n        foreach (var item in guess) {\n      \
    \      guess += item;\n        }\n        foreach (var item in game) {\n     \
    \       difference = Math.Abs(guess - item);\n            result.Add(difference);\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))));\n  \
    \  Debug.Assert(Compare((new List<long>(new long[]{(long)0L, (long)0L, (long)0L,\
    \ (long)0L, (long)0L, (long)0L})), (new List<long>(new long[]{(long)0L, (long)0L,\
    \ (long)0L, (long)0L, (long)0L, (long)0L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))));\n    Debug.Assert(Compare((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (new List<long>(new long[]{(long)-1L,\
    \ (long)-2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,\
    \ (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L, (long)2L,\
    \ (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)0L,\
    \ (long)0L, (long)1L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpf2laj2bl.cs(21,14): error CS0136: A local or parameter named ''guess''
    cannot be declared in this scope because that name is used in an enclosing local
    scope to define a local or parameter

    /tmp/tmpf2laj2bl.cs(26,30): error CS1579: foreach statement cannot operate on
    variables of type ''long'' because ''long'' does not contain a public instance
    definition for ''GetEnumerator''

    '
  timestamp: 1659976339
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // I think we all remember that feeling when the result of\
    \ some long-awaited\n    // event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    // definitely worth noting down and comparing.\n\
    \    // Your task is to determine if a person correctly guessed the results of\
    \ a number of matches.\n    // You are given two arrays of scores and guesses\
    \ of equal length, where each index shows a match. \n    // Return an array of\
    \ the same length denoting how far off each guess was. If they have guessed correctly,\n\
    \    // the value is 0, and if not, the value is the absolute difference between\
    \ the guess and the score.\n    // example:\n    public static List<long> Compare(List<long>\
    \ game, List<long> guess) {\n        List<long> result = new List<long>();\n \
    \       long score;\n        long guess;\n        long diff;\n        bool correct\
    \ = false;\n        foreach (var item in game) {\n            score = item;\n\
    \            foreach (var item2 in guess) {\n                guess = item2;\n\
    \                diff = guess - score;\n                if (diff < 0) {\n    \
    \                result.Add(diff);\n                }\n                if (diff\
    \ > 0) {\n                    result.Add(diff);\n                }\n         \
    \       if (diff == 0) {\n                    correct = true;\n              \
    \  }\n            }\n        }\n        if (correct) {\n            return result;\n\
    \        }\n        else {\n            return result.Select(x => Math.Abs(x)).ToList();\n\
    \        }\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Compare((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})),\
    \ (new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L,\
    \ (long)-2L}))).Equals((new List<long>(new long[]{(long)0L, (long)0L, (long)0L,\
    \ (long)0L, (long)3L, (long)3L}))));\n    Debug.Assert(Compare((new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L})), (new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))));\n\
    \    Debug.Assert(Compare((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})),\
    \ (new List<long>(new long[]{(long)-1L, (long)-2L, (long)-3L}))).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)4L, (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L,\
    \ (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)0L, (long)0L, (long)1L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp6bo7bmi7.cs(20,14): error CS0136: A local or parameter named ''guess''
    cannot be declared in this scope because that name is used in an enclosing local
    scope to define a local or parameter

    /tmp/tmp6bo7bmi7.cs(25,35): error CS1579: foreach statement cannot operate on
    variables of type ''long'' because ''long'' does not contain a public instance
    definition for ''GetEnumerator''

    /tmp/tmp6bo7bmi7.cs(25,35): error CS0165: Use of unassigned local variable ''guess''

    '
  timestamp: 1659976339
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // I think we all remember that feeling when the result of\
    \ some long-awaited\n    // event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    // definitely worth noting down and comparing.\n\
    \    // Your task is to determine if a person correctly guessed the results of\
    \ a number of matches.\n    // You are given two arrays of scores and guesses\
    \ of equal length, where each index shows a match. \n    // Return an array of\
    \ the same length denoting how far off each guess was. If they have guessed correctly,\n\
    \    // the value is 0, and if not, the value is the absolute difference between\
    \ the guess and the score.\n    // example:\n    public static List<long> Compare(List<long>\
    \ game, List<long> guess) {\n        List<long> result = new List<long>();\n \
    \       long score = 0;\n        long difference = 0;\n        foreach (long guess\
    \ in guess) {\n            score = game.Sum(x => x);\n            difference =\
    \ guess - score;\n            result.Add(difference);\n        }\n        return\
    \ result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Compare((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})),\
    \ (new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L,\
    \ (long)-2L}))).Equals((new List<long>(new long[]{(long)0L, (long)0L, (long)0L,\
    \ (long)0L, (long)3L, (long)3L}))));\n    Debug.Assert(Compare((new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L})), (new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))));\n\
    \    Debug.Assert(Compare((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})),\
    \ (new List<long>(new long[]{(long)-1L, (long)-2L, (long)-3L}))).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)4L, (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L,\
    \ (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)0L, (long)0L, (long)1L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpdo0xoxe9.cs(21,23): error CS0136: A local or parameter named ''guess''
    cannot be declared in this scope because that name is used in an enclosing local
    scope to define a local or parameter

    '
  timestamp: 1659976335
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // I think we all remember that feeling when the result of\
    \ some long-awaited\n    // event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    // definitely worth noting down and comparing.\n\
    \    // Your task is to determine if a person correctly guessed the results of\
    \ a number of matches.\n    // You are given two arrays of scores and guesses\
    \ of equal length, where each index shows a match. \n    // Return an array of\
    \ the same length denoting how far off each guess was. If they have guessed correctly,\n\
    \    // the value is 0, and if not, the value is the absolute difference between\
    \ the guess and the score.\n    // example:\n    public static List<long> Compare(List<long>\
    \ game, List<long> guess) {\n        List<long> result = new List<long>();\n \
    \       long score;\n        long guess;\n        long diff;\n        bool correct;\n\
    \        for (int i = 0; i < game.Count; i++) {\n            score = game[i];\n\
    \            guess = guess[i];\n            diff = guess - score;\n          \
    \  correct = guess == score;\n            result.Add(correct ? diff : -diff);\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))));\n  \
    \  Debug.Assert(Compare((new List<long>(new long[]{(long)0L, (long)0L, (long)0L,\
    \ (long)0L, (long)0L, (long)0L})), (new List<long>(new long[]{(long)0L, (long)0L,\
    \ (long)0L, (long)0L, (long)0L, (long)0L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))));\n    Debug.Assert(Compare((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (new List<long>(new long[]{(long)-1L,\
    \ (long)-2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,\
    \ (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L, (long)2L,\
    \ (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)0L,\
    \ (long)0L, (long)1L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpudrzfpqt.cs(20,14): error CS0136: A local or parameter named ''guess''
    cannot be declared in this scope because that name is used in an enclosing local
    scope to define a local or parameter

    /tmp/tmpudrzfpqt.cs(25,21): error CS0021: Cannot apply indexing with [] to an
    expression of type ''long''

    /tmp/tmpudrzfpqt.cs(25,21): error CS0165: Use of unassigned local variable ''guess''

    '
  timestamp: 1659976339
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // I think we all remember that feeling when the result of\
    \ some long-awaited\n    // event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    // definitely worth noting down and comparing.\n\
    \    // Your task is to determine if a person correctly guessed the results of\
    \ a number of matches.\n    // You are given two arrays of scores and guesses\
    \ of equal length, where each index shows a match. \n    // Return an array of\
    \ the same length denoting how far off each guess was. If they have guessed correctly,\n\
    \    // the value is 0, and if not, the value is the absolute difference between\
    \ the guess and the score.\n    // example:\n    public static List<long> Compare(List<long>\
    \ game, List<long> guess) {\n        var result = new List<long>();\n        foreach\
    \ (var g in game) {\n            foreach (var g in guess) {\n                if\
    \ (g == g) {\n                    result.Add(0);\n                }\n        \
    \        else {\n                    result.Add(Math.Abs(g - g));\n          \
    \      }\n            }\n        }\n        return result;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Compare((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))));\n\
    \    Debug.Assert(Compare((new List<long>(new long[]{(long)0L, (long)0L, (long)0L,\
    \ (long)0L, (long)0L, (long)0L})), (new List<long>(new long[]{(long)0L, (long)0L,\
    \ (long)0L, (long)0L, (long)0L, (long)0L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))));\n    Debug.Assert(Compare((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (new List<long>(new long[]{(long)-1L,\
    \ (long)-2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,\
    \ (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L, (long)2L,\
    \ (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)0L,\
    \ (long)0L, (long)1L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp_knlhws1.cs(20,26): error CS0136: A local or parameter named ''g'' cannot
    be declared in this scope because that name is used in an enclosing local scope
    to define a local or parameter

    /tmp/tmp_knlhws1.cs(21,21): warning CS1718: Comparison made to same variable;
    did you mean to compare something else?

    '
  timestamp: 1659976339
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // I think we all remember that feeling when the result of\
    \ some long-awaited\n    // event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    // definitely worth noting down and comparing.\n\
    \    // Your task is to determine if a person correctly guessed the results of\
    \ a number of matches.\n    // You are given two arrays of scores and guesses\
    \ of equal length, where each index shows a match. \n    // Return an array of\
    \ the same length denoting how far off each guess was. If they have guessed correctly,\n\
    \    // the value is 0, and if not, the value is the absolute difference between\
    \ the guess and the score.\n    // example:\n    public static List<long> Compare(List<long>\
    \ game, List<long> guess) {\n        // TODO: Your code here\n        List<long>\
    \ result = new List<long>();\n        long score = 0;\n        long guess = 0;\n\
    \        long diff = 0;\n        foreach (var item in game) {\n            score\
    \ = item;\n            foreach (var item2 in guess) {\n                guess =\
    \ item2;\n                diff = guess - score;\n                if (diff < 0)\
    \ {\n                    result.Add(diff);\n                }\n            }\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))));\n  \
    \  Debug.Assert(Compare((new List<long>(new long[]{(long)0L, (long)0L, (long)0L,\
    \ (long)0L, (long)0L, (long)0L})), (new List<long>(new long[]{(long)0L, (long)0L,\
    \ (long)0L, (long)0L, (long)0L, (long)0L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))));\n    Debug.Assert(Compare((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (new List<long>(new long[]{(long)-1L,\
    \ (long)-2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,\
    \ (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L, (long)2L,\
    \ (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)0L,\
    \ (long)0L, (long)1L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp8yfazbd_.cs(21,14): error CS0136: A local or parameter named ''guess''
    cannot be declared in this scope because that name is used in an enclosing local
    scope to define a local or parameter

    /tmp/tmp8yfazbd_.cs(25,35): error CS1579: foreach statement cannot operate on
    variables of type ''long'' because ''long'' does not contain a public instance
    definition for ''GetEnumerator''

    '
  timestamp: 1659976339
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // I think we all remember that feeling when the result of\
    \ some long-awaited\n    // event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    // definitely worth noting down and comparing.\n\
    \    // Your task is to determine if a person correctly guessed the results of\
    \ a number of matches.\n    // You are given two arrays of scores and guesses\
    \ of equal length, where each index shows a match. \n    // Return an array of\
    \ the same length denoting how far off each guess was. If they have guessed correctly,\n\
    \    // the value is 0, and if not, the value is the absolute difference between\
    \ the guess and the score.\n    // example:\n    public static List<long> Compare(List<long>\
    \ game, List<long> guess) {\n        List<long> result = new List<long>();\n \
    \       long score = 0;\n        long diff = 0;\n        foreach (var g in game)\
    \ {\n            score += g;\n            diff = g - guess[game.IndexOf(g)];\n\
    \            result.Add(diff);\n        }\n        return result;\n    }\n   \
    \ public static void Main(string[] args) {\n    Debug.Assert(Compare((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))));\n\
    \    Debug.Assert(Compare((new List<long>(new long[]{(long)0L, (long)0L, (long)0L,\
    \ (long)0L, (long)0L, (long)0L})), (new List<long>(new long[]{(long)0L, (long)0L,\
    \ (long)0L, (long)0L, (long)0L, (long)0L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))));\n    Debug.Assert(Compare((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (new List<long>(new long[]{(long)-1L,\
    \ (long)-2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,\
    \ (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L, (long)2L,\
    \ (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)0L,\
    \ (long)0L, (long)1L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a003d63669234579bd7e734a92c0e4d4>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a003d63669234579bd7e734a92c0e4d4>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976340
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // I think we all remember that feeling when the result of\
    \ some long-awaited\n    // event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    // definitely worth noting down and comparing.\n\
    \    // Your task is to determine if a person correctly guessed the results of\
    \ a number of matches.\n    // You are given two arrays of scores and guesses\
    \ of equal length, where each index shows a match. \n    // Return an array of\
    \ the same length denoting how far off each guess was. If they have guessed correctly,\n\
    \    // the value is 0, and if not, the value is the absolute difference between\
    \ the guess and the score.\n    // example:\n    public static List<long> Compare(List<long>\
    \ game, List<long> guess) {\n        List<long> result = new List<long>();\n \
    \       foreach (long score in game) {\n            long guess = guess.FirstOrDefault();\n\
    \            if (guess == score) {\n                result.Add(0);\n         \
    \   } else {\n                result.Add(Math.Abs(guess - score));\n         \
    \   }\n        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))));\n  \
    \  Debug.Assert(Compare((new List<long>(new long[]{(long)0L, (long)0L, (long)0L,\
    \ (long)0L, (long)0L, (long)0L})), (new List<long>(new long[]{(long)0L, (long)0L,\
    \ (long)0L, (long)0L, (long)0L, (long)0L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))));\n    Debug.Assert(Compare((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (new List<long>(new long[]{(long)-1L,\
    \ (long)-2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,\
    \ (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L, (long)2L,\
    \ (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)0L,\
    \ (long)0L, (long)1L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpqku9a0oz.cs(20,18): error CS0136: A local or parameter named ''guess''
    cannot be declared in this scope because that name is used in an enclosing local
    scope to define a local or parameter

    /tmp/tmpqku9a0oz.cs(20,32): error CS1061: ''long'' does not contain a definition
    for ''FirstOrDefault'' and no accessible extension method ''FirstOrDefault'' accepting
    a first argument of type ''long'' could be found (are you missing a using directive
    or an assembly reference?)

    /tmp/tmpqku9a0oz.cs(20,26): error CS0165: Use of unassigned local variable ''guess''

    '
  timestamp: 1659976338
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // I think we all remember that feeling when the result of\
    \ some long-awaited\n    // event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    // definitely worth noting down and comparing.\n\
    \    // Your task is to determine if a person correctly guessed the results of\
    \ a number of matches.\n    // You are given two arrays of scores and guesses\
    \ of equal length, where each index shows a match. \n    // Return an array of\
    \ the same length denoting how far off each guess was. If they have guessed correctly,\n\
    \    // the value is 0, and if not, the value is the absolute difference between\
    \ the guess and the score.\n    // example:\n    public static List<long> Compare(List<long>\
    \ game, List<long> guess) {\n        List<long> result = new List<long>();\n \
    \       long diff = 0;\n        foreach (long g in game) {\n            long guess\
    \ = guess.ElementAt(0);\n            diff = g - guess;\n            if (diff >\
    \ 0) {\n                result.Add(diff);\n            }\n        }\n        return\
    \ result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Compare((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})),\
    \ (new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L,\
    \ (long)-2L}))).Equals((new List<long>(new long[]{(long)0L, (long)0L, (long)0L,\
    \ (long)0L, (long)3L, (long)3L}))));\n    Debug.Assert(Compare((new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L})), (new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))));\n\
    \    Debug.Assert(Compare((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})),\
    \ (new List<long>(new long[]{(long)-1L, (long)-2L, (long)-3L}))).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)4L, (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L,\
    \ (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)0L, (long)0L, (long)1L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpmdqxiuon.cs(21,18): error CS0136: A local or parameter named ''guess''
    cannot be declared in this scope because that name is used in an enclosing local
    scope to define a local or parameter

    /tmp/tmpmdqxiuon.cs(21,32): error CS1061: ''long'' does not contain a definition
    for ''ElementAt'' and no accessible extension method ''ElementAt'' accepting a
    first argument of type ''long'' could be found (are you missing a using directive
    or an assembly reference?)

    /tmp/tmpmdqxiuon.cs(21,26): error CS0165: Use of unassigned local variable ''guess''

    '
  timestamp: 1659976339
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // I think we all remember that feeling when the result of\
    \ some long-awaited\n    // event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    // definitely worth noting down and comparing.\n\
    \    // Your task is to determine if a person correctly guessed the results of\
    \ a number of matches.\n    // You are given two arrays of scores and guesses\
    \ of equal length, where each index shows a match. \n    // Return an array of\
    \ the same length denoting how far off each guess was. If they have guessed correctly,\n\
    \    // the value is 0, and if not, the value is the absolute difference between\
    \ the guess and the score.\n    // example:\n    public static List<long> Compare(List<long>\
    \ game, List<long> guess) {\n        List<long> result = new List<long>();\n \
    \       foreach (long score in game) {\n            long diff = score - guess[game.IndexOf(score)];\n\
    \            result.Add(diff);\n        }\n        return result;\n    }\n   \
    \ public static void Main(string[] args) {\n    Debug.Assert(Compare((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))));\n\
    \    Debug.Assert(Compare((new List<long>(new long[]{(long)0L, (long)0L, (long)0L,\
    \ (long)0L, (long)0L, (long)0L})), (new List<long>(new long[]{(long)0L, (long)0L,\
    \ (long)0L, (long)0L, (long)0L, (long)0L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))));\n    Debug.Assert(Compare((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (new List<long>(new long[]{(long)-1L,\
    \ (long)-2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,\
    \ (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L, (long)2L,\
    \ (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)0L,\
    \ (long)0L, (long)1L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <4f1fd904590740dcaa20a1536c166b48>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <4f1fd904590740dcaa20a1536c166b48>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976337
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // I think we all remember that feeling when the result of\
    \ some long-awaited\n    // event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    // definitely worth noting down and comparing.\n\
    \    // Your task is to determine if a person correctly guessed the results of\
    \ a number of matches.\n    // You are given two arrays of scores and guesses\
    \ of equal length, where each index shows a match. \n    // Return an array of\
    \ the same length denoting how far off each guess was. If they have guessed correctly,\n\
    \    // the value is 0, and if not, the value is the absolute difference between\
    \ the guess and the score.\n    // example:\n    public static List<long> Compare(List<long>\
    \ game, List<long> guess) {\n        // TODO: implement this method\n    }\n \
    \   public static void Main(string[] args) {\n    Debug.Assert(Compare((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))));\n\
    \    Debug.Assert(Compare((new List<long>(new long[]{(long)0L, (long)0L, (long)0L,\
    \ (long)0L, (long)0L, (long)0L})), (new List<long>(new long[]{(long)0L, (long)0L,\
    \ (long)0L, (long)0L, (long)0L, (long)0L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))));\n    Debug.Assert(Compare((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (new List<long>(new long[]{(long)-1L,\
    \ (long)-2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,\
    \ (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L, (long)2L,\
    \ (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)0L,\
    \ (long)0L, (long)1L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpqxfeyd93.cs(17,30): error CS0161: ''Problem.Compare(List<long>, List<long>)'':
    not all code paths return a value

    '
  timestamp: 1659976336
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // I think we all remember that feeling when the result of\
    \ some long-awaited\n    // event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    // definitely worth noting down and comparing.\n\
    \    // Your task is to determine if a person correctly guessed the results of\
    \ a number of matches.\n    // You are given two arrays of scores and guesses\
    \ of equal length, where each index shows a match. \n    // Return an array of\
    \ the same length denoting how far off each guess was. If they have guessed correctly,\n\
    \    // the value is 0, and if not, the value is the absolute difference between\
    \ the guess and the score.\n    // example:\n    public static List<long> Compare(List<long>\
    \ game, List<long> guess) {\n        // Your code here\n        var result = game.Zip(guess,\
    \ (a, b) => a - b).ToList();\n        return result;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))));\n  \
    \  Debug.Assert(Compare((new List<long>(new long[]{(long)0L, (long)0L, (long)0L,\
    \ (long)0L, (long)0L, (long)0L})), (new List<long>(new long[]{(long)0L, (long)0L,\
    \ (long)0L, (long)0L, (long)0L, (long)0L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))));\n    Debug.Assert(Compare((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (new List<long>(new long[]{(long)-1L,\
    \ (long)-2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,\
    \ (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L, (long)2L,\
    \ (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)0L,\
    \ (long)0L, (long)1L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <82766a9d47f24197a4506b819a2c1cd9>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <82766a9d47f24197a4506b819a2c1cd9>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976337
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // I think we all remember that feeling when the result of\
    \ some long-awaited\n    // event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    // definitely worth noting down and comparing.\n\
    \    // Your task is to determine if a person correctly guessed the results of\
    \ a number of matches.\n    // You are given two arrays of scores and guesses\
    \ of equal length, where each index shows a match. \n    // Return an array of\
    \ the same length denoting how far off each guess was. If they have guessed correctly,\n\
    \    // the value is 0, and if not, the value is the absolute difference between\
    \ the guess and the score.\n    // example:\n    public static List<long> Compare(List<long>\
    \ game, List<long> guess) {\n        List<long> result = new List<long>();\n \
    \       long score = 0;\n        long diff = 0;\n        foreach (long g in game)\
    \ {\n            score += g;\n        }\n        foreach (long g in guess) {\n\
    \            diff += g - score;\n        }\n        result.Add(diff);\n      \
    \  return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Compare((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})),\
    \ (new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L,\
    \ (long)-2L}))).Equals((new List<long>(new long[]{(long)0L, (long)0L, (long)0L,\
    \ (long)0L, (long)3L, (long)3L}))));\n    Debug.Assert(Compare((new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L})), (new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))));\n\
    \    Debug.Assert(Compare((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})),\
    \ (new List<long>(new long[]{(long)-1L, (long)-2L, (long)-3L}))).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)4L, (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L,\
    \ (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)0L, (long)0L, (long)1L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8d9030caf2554e9c9db98128e579e2a0>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8d9030caf2554e9c9db98128e579e2a0>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976337
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // I think we all remember that feeling when the result of\
    \ some long-awaited\n    // event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    // definitely worth noting down and comparing.\n\
    \    // Your task is to determine if a person correctly guessed the results of\
    \ a number of matches.\n    // You are given two arrays of scores and guesses\
    \ of equal length, where each index shows a match. \n    // Return an array of\
    \ the same length denoting how far off each guess was. If they have guessed correctly,\n\
    \    // the value is 0, and if not, the value is the absolute difference between\
    \ the guess and the score.\n    // example:\n    public static List<long> Compare(List<long>\
    \ game, List<long> guess) {\n        List<long> result = new List<long>();\n \
    \       long score;\n        long guess;\n        long diff;\n        bool correct;\n\
    \        bool found;\n        bool found2;\n        bool found3;\n        bool\
    \ found4;\n        bool found5;\n        bool found6;\n        bool found7;\n\
    \        bool found8;\n        bool found9;\n        bool found10;\n        bool\
    \ found11;\n        bool found12;\n        bool found13;\n        bool found14;\n\
    \        bool found15;\n        bool found16;\n        bool found17;\n       \
    \ bool found18;\n        bool found19;\n        bool found20;\n        bool found21;\n\
    \        bool found22;\n        bool found23;\n        bool found24;\n       \
    \ bool found25;\n        bool found26;\n        bool found27;\n        bool found28;\n\
    \        bool found29;\n        bool found30;\n        bool found31;\n       \
    \ bool found32;\n        bool found33;\n        bool found34;\n        bool found35;\n\
    \        bool found36;\n        bool found37;\n        bool found38;\n       \
    \ bool found39;\n        bool found40;\n        bool found41;\n        bool found42;\n\
    \        bool found43;\n        bool found44;\n        bool found45;\n       \
    \ bool found46;\n        bool found47;\n        bool found48;\n        bool found49;\n\
    \        bool found50;\n        bool found51;\n        bool found52;\n       \
    \ bool found53;\n        bool found54;\n        bool found55;\n        bool found56;\n\
    \        bool found57;\n        bool found58;\n        bool found59;\n       \
    \ bool found60;\n        bool found61;\n        bool found62;\n        bool found63;\n\
    \        bool found64;\n        bool found65;\n        bool found66;\n       \
    \ bool found67;\n        bool found68;\n        bool found69;\n        bool found70;\n\
    \        bool found71;\n        bool found72;\n        bool found73;\n       \
    \ bool found74;\n        bool found75;\n        bool found76;\n        bool found77;\n\
    \        bool found78;\n        bool found79;\n        bool found80;\n       \
    \ bool found81;\n        bool found82;\n        bool found83;\n        bool found84\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Compare((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})),\
    \ (new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L,\
    \ (long)-2L}))).Equals((new List<long>(new long[]{(long)0L, (long)0L, (long)0L,\
    \ (long)0L, (long)3L, (long)3L}))));\n    Debug.Assert(Compare((new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L})), (new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))));\n\
    \    Debug.Assert(Compare((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})),\
    \ (new List<long>(new long[]{(long)-1L, (long)-2L, (long)-3L}))).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)4L, (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L,\
    \ (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)0L, (long)0L, (long)1L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp0i23z703.cs(106,21): error CS1002: ; expected

    '
  timestamp: 1659976337
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // I think we all remember that feeling when the result of\
    \ some long-awaited\n    // event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    // definitely worth noting down and comparing.\n\
    \    // Your task is to determine if a person correctly guessed the results of\
    \ a number of matches.\n    // You are given two arrays of scores and guesses\
    \ of equal length, where each index shows a match. \n    // Return an array of\
    \ the same length denoting how far off each guess was. If they have guessed correctly,\n\
    \    // the value is 0, and if not, the value is the absolute difference between\
    \ the guess and the score.\n    // example:\n    public static List<long> Compare(List<long>\
    \ game, List<long> guess) {\n        var result = new List<long>();\n        foreach\
    \ (var g in game) {\n            var guess = guess.FirstOrDefault(x => x == g);\n\
    \            if (guess == null) {\n                result.Add(0);\n          \
    \  } else {\n                result.Add(Math.Abs(guess - g));\n            }\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))));\n  \
    \  Debug.Assert(Compare((new List<long>(new long[]{(long)0L, (long)0L, (long)0L,\
    \ (long)0L, (long)0L, (long)0L})), (new List<long>(new long[]{(long)0L, (long)0L,\
    \ (long)0L, (long)0L, (long)0L, (long)0L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))));\n    Debug.Assert(Compare((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (new List<long>(new long[]{(long)-1L,\
    \ (long)-2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,\
    \ (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L, (long)2L,\
    \ (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)0L,\
    \ (long)0L, (long)1L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpltsofqsz.cs(20,17): error CS0136: A local or parameter named ''guess''
    cannot be declared in this scope because that name is used in an enclosing local
    scope to define a local or parameter

    /tmp/tmpltsofqsz.cs(20,25): error CS0841: Cannot use local variable ''guess''
    before it is declared

    '
  timestamp: 1659976334
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // I think we all remember that feeling when the result of\
    \ some long-awaited\n    // event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    // definitely worth noting down and comparing.\n\
    \    // Your task is to determine if a person correctly guessed the results of\
    \ a number of matches.\n    // You are given two arrays of scores and guesses\
    \ of equal length, where each index shows a match. \n    // Return an array of\
    \ the same length denoting how far off each guess was. If they have guessed correctly,\n\
    \    // the value is 0, and if not, the value is the absolute difference between\
    \ the guess and the score.\n    // example:\n    public static List<long> Compare(List<long>\
    \ game, List<long> guess) {\n        List<long> result = new List<long>();\n \
    \       long score = 0;\n        long guess = 0;\n        long difference = 0;\n\
    \        bool correct = false;\n        foreach (var item in game) {\n       \
    \     if (guess == item) {\n                correct = true;\n            }\n \
    \       }\n        if (correct) {\n            result.Add(0);\n        } else\
    \ {\n            foreach (var item in game) {\n                difference = Math.Abs(guess\
    \ - item);\n                result.Add(difference);\n            }\n        }\n\
    \        return result;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(Compare((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L, (long)5L, (long)1L})), (new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)2L, (long)-2L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))));\n    Debug.Assert(Compare((new\
    \ List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L})),\
    \ (new List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L,\
    \ (long)0L}))).Equals((new List<long>(new long[]{(long)0L, (long)0L, (long)0L,\
    \ (long)0L, (long)0L, (long)0L}))));\n    Debug.Assert(Compare((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L})), (new List<long>(new long[]{(long)-1L,\
    \ (long)-2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,\
    \ (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L, (long)2L,\
    \ (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)0L,\
    \ (long)0L, (long)1L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpzwgu7bnj.cs(20,14): error CS0136: A local or parameter named ''guess''
    cannot be declared in this scope because that name is used in an enclosing local
    scope to define a local or parameter

    /tmp/tmpzwgu7bnj.cs(19,14): warning CS0219: The variable ''score'' is assigned
    but its value is never used

    '
  timestamp: 1659976339
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // I think we all remember that feeling when the result of\
    \ some long-awaited\n    // event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    // definitely worth noting down and comparing.\n\
    \    // Your task is to determine if a person correctly guessed the results of\
    \ a number of matches.\n    // You are given two arrays of scores and guesses\
    \ of equal length, where each index shows a match. \n    // Return an array of\
    \ the same length denoting how far off each guess was. If they have guessed correctly,\n\
    \    // the value is 0, and if not, the value is the absolute difference between\
    \ the guess and the score.\n    // example:\n    public static List<long> Compare(List<long>\
    \ game, List<long> guess) {\n        List<long> result = new List<long>();\n \
    \       long score = 0;\n        long diff = 0;\n        foreach (long g in game)\
    \ {\n            score += g;\n            foreach (long g in guess) {\n      \
    \          diff += g - score;\n            }\n            result.Add(diff);\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))));\n  \
    \  Debug.Assert(Compare((new List<long>(new long[]{(long)0L, (long)0L, (long)0L,\
    \ (long)0L, (long)0L, (long)0L})), (new List<long>(new long[]{(long)0L, (long)0L,\
    \ (long)0L, (long)0L, (long)0L, (long)0L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))));\n    Debug.Assert(Compare((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (new List<long>(new long[]{(long)-1L,\
    \ (long)-2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,\
    \ (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L, (long)2L,\
    \ (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)0L,\
    \ (long)0L, (long)1L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmppwzumdz5.cs(23,27): error CS0136: A local or parameter named ''g'' cannot
    be declared in this scope because that name is used in an enclosing local scope
    to define a local or parameter

    '
  timestamp: 1659976337
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // I think we all remember that feeling when the result of\
    \ some long-awaited\n    // event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    // definitely worth noting down and comparing.\n\
    \    // Your task is to determine if a person correctly guessed the results of\
    \ a number of matches.\n    // You are given two arrays of scores and guesses\
    \ of equal length, where each index shows a match. \n    // Return an array of\
    \ the same length denoting how far off each guess was. If they have guessed correctly,\n\
    \    // the value is 0, and if not, the value is the absolute difference between\
    \ the guess and the score.\n    // example:\n    public static List<long> Compare(List<long>\
    \ game, List<long> guess) {\n        List<long> result = new List<long>();\n \
    \       foreach (long score in game) {\n            long diff = 0;\n         \
    \   foreach (long guess in guess) {\n                diff = guess - score;\n \
    \               if (diff < 0) {\n                    diff *= -1;\n           \
    \     }\n            }\n            result.Add(diff);\n        }\n        return\
    \ result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Compare((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})),\
    \ (new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L,\
    \ (long)-2L}))).Equals((new List<long>(new long[]{(long)0L, (long)0L, (long)0L,\
    \ (long)0L, (long)3L, (long)3L}))));\n    Debug.Assert(Compare((new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L})), (new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))));\n\
    \    Debug.Assert(Compare((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})),\
    \ (new List<long>(new long[]{(long)-1L, (long)-2L, (long)-3L}))).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)4L, (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L,\
    \ (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)0L, (long)0L, (long)1L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpvvlvhus9.cs(21,27): error CS0136: A local or parameter named ''guess''
    cannot be declared in this scope because that name is used in an enclosing local
    scope to define a local or parameter

    '
  timestamp: 1659976339
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // I think we all remember that feeling when the result of\
    \ some long-awaited\n    // event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    // definitely worth noting down and comparing.\n\
    \    // Your task is to determine if a person correctly guessed the results of\
    \ a number of matches.\n    // You are given two arrays of scores and guesses\
    \ of equal length, where each index shows a match. \n    // Return an array of\
    \ the same length denoting how far off each guess was. If they have guessed correctly,\n\
    \    // the value is 0, and if not, the value is the absolute difference between\
    \ the guess and the score.\n    // example:\n    public static List<long> Compare(List<long>\
    \ game, List<long> guess) {\n        // TODO: Complete this method\n        List<long>\
    \ result = new List<long>();\n        long score = 0;\n        long guess = 0;\n\
    \        foreach (var item in game) {\n            score = score * 10;\n     \
    \       guess = guess * 10;\n            if (guess == item) {\n              \
    \  result.Add(0);\n            }\n            else {\n                result.Add(Math.Abs(guess\
    \ - item));\n            }\n        }\n        return result;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Compare((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))));\n\
    \    Debug.Assert(Compare((new List<long>(new long[]{(long)0L, (long)0L, (long)0L,\
    \ (long)0L, (long)0L, (long)0L})), (new List<long>(new long[]{(long)0L, (long)0L,\
    \ (long)0L, (long)0L, (long)0L, (long)0L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))));\n    Debug.Assert(Compare((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (new List<long>(new long[]{(long)-1L,\
    \ (long)-2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,\
    \ (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L, (long)2L,\
    \ (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)0L,\
    \ (long)0L, (long)1L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpdqvd_6az.cs(21,14): error CS0136: A local or parameter named ''guess''
    cannot be declared in this scope because that name is used in an enclosing local
    scope to define a local or parameter

    '
  timestamp: 1659976339
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // I think we all remember that feeling when the result of\
    \ some long-awaited\n    // event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    // definitely worth noting down and comparing.\n\
    \    // Your task is to determine if a person correctly guessed the results of\
    \ a number of matches.\n    // You are given two arrays of scores and guesses\
    \ of equal length, where each index shows a match. \n    // Return an array of\
    \ the same length denoting how far off each guess was. If they have guessed correctly,\n\
    \    // the value is 0, and if not, the value is the absolute difference between\
    \ the guess and the score.\n    // example:\n    public static List<long> Compare(List<long>\
    \ game, List<long> guess) {\n        // Your code here\n        List<long> result\
    \ = new List<long>();\n        long score = 0;\n        long diff = 0;\n     \
    \   long maxDiff = 0;\n        long maxScore = 0;\n        long maxScoreIndex\
    \ = 0;\n        long maxGuess = 0;\n        long maxGuessIndex = 0;\n        long\
    \ maxScoreDiff = 0;\n        long maxScoreDiffIndex = 0;\n        long maxGuessDiff\
    \ = 0;\n        long maxGuessDiffIndex = 0;\n        long maxScoreDiffIndex2 =\
    \ 0;\n        long maxScoreDiffIndex2 = 0;\n        long maxGuessDiff2 = 0;\n\
    \        long maxGuessDiffIndex2 = 0;\n        long maxScoreDiffIndex3 = 0;\n\
    \        long maxScoreDiffIndex3 = 0;\n        long maxGuessDiff3 = 0;\n     \
    \   long maxGuessDiffIndex3 = 0;\n        long maxScoreDiffIndex4 = 0;\n     \
    \   long maxScoreDiffIndex4 = 0;\n        long maxGuessDiff4 = 0;\n        long\
    \ maxGuessDiffIndex4 = 0;\n        long maxScoreDiffIndex5 = 0;\n        long\
    \ maxScoreDiffIndex5 = 0;\n        long maxGuessDiff5 = 0;\n        long maxGuessDiffIndex5\
    \ = 0;\n        long maxScoreDiffIndex6 = 0;\n        long maxScoreDiffIndex6\
    \ = 0;\n        long maxGuessDiff6 = 0;\n        long maxGuessDiffIndex6 = 0;\n\
    \        long maxScoreDiffIndex7 = 0;\n        long maxScoreDiffIndex7 = 0;\n\
    \        long maxGuessDiff7 = 0;\n        long maxGuessDiffIndex7 = 0;\n     \
    \   long maxScoreDiffIndex8 = 0;\n        long maxScoreDiffIndex8 = 0;\n     \
    \   long maxGuessDiff8 = 0;\n        long maxGuessDiffIndex8 = 0;\n        long\
    \ maxScoreDiffIndex9 = 0;\n        long maxScoreDiffIndex9 = 0;\n        long\
    \ maxGuessDiff9 = 0;\n        long maxGuessDiffIndex9 = 0;\n        long maxScoreDiffIndex10\
    \ = 0;\n        long maxScoreDiffIndex10 = 0;\n        long maxGuessDiff10 = 0;\n\
    \        long maxGuessDiffIndex10 = 0;\n        long maxScoreDiffIndex11 = 0;\n\
    \        long maxScoreDiffIndex11 = 0;\n        long maxGuessDiff11 = 0;\n   \
    \     long maxGuessDiffIndex11 = 0;\n        long maxScoreDiffIndex12 = 0;\n \
    \       long maxScoreDiffIndex12 = 0;\n        long maxGuessDiff12 = 0;\n    \
    \    long maxGuessDiffIndex12 = 0;\n        long maxScoreDiffIndex13 = 0;\n  \
    \      long maxScoreDiffIndex13 = 0;\n        long maxGuessDiff13 = 0;\n     \
    \   long max\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Compare((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})),\
    \ (new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L,\
    \ (long)-2L}))).Equals((new List<long>(new long[]{(long)0L, (long)0L, (long)0L,\
    \ (long)0L, (long)3L, (long)3L}))));\n    Debug.Assert(Compare((new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L})), (new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))));\n\
    \    Debug.Assert(Compare((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})),\
    \ (new List<long>(new long[]{(long)-1L, (long)-2L, (long)-3L}))).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)4L, (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L,\
    \ (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)0L, (long)0L, (long)1L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpdded0l3v.cs(78,17): error CS1002: ; expected

    '
  timestamp: 1659976339
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // I think we all remember that feeling when the result of\
    \ some long-awaited\n    // event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    // definitely worth noting down and comparing.\n\
    \    // Your task is to determine if a person correctly guessed the results of\
    \ a number of matches.\n    // You are given two arrays of scores and guesses\
    \ of equal length, where each index shows a match. \n    // Return an array of\
    \ the same length denoting how far off each guess was. If they have guessed correctly,\n\
    \    // the value is 0, and if not, the value is the absolute difference between\
    \ the guess and the score.\n    // example:\n    public static List<long> Compare(List<long>\
    \ game, List<long> guess) {\n        List<long> result = new List<long>();\n \
    \       long diff = 0;\n        foreach (long g in game) {\n            diff =\
    \ g - guess[game.IndexOf(g)];\n            result.Add(diff);\n        }\n    \
    \    return result;\n    }\n    public static void Main(string[] args) {\n   \
    \ Debug.Assert(Compare((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L, (long)5L, (long)1L})), (new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)2L, (long)-2L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))));\n    Debug.Assert(Compare((new\
    \ List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L})),\
    \ (new List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L,\
    \ (long)0L}))).Equals((new List<long>(new long[]{(long)0L, (long)0L, (long)0L,\
    \ (long)0L, (long)0L, (long)0L}))));\n    Debug.Assert(Compare((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L})), (new List<long>(new long[]{(long)-1L,\
    \ (long)-2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,\
    \ (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L, (long)2L,\
    \ (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)0L,\
    \ (long)0L, (long)1L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <5f8e70bcf68f4853abbee528b0284289>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <5f8e70bcf68f4853abbee528b0284289>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976339
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // I think we all remember that feeling when the result of\
    \ some long-awaited\n    // event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    // definitely worth noting down and comparing.\n\
    \    // Your task is to determine if a person correctly guessed the results of\
    \ a number of matches.\n    // You are given two arrays of scores and guesses\
    \ of equal length, where each index shows a match. \n    // Return an array of\
    \ the same length denoting how far off each guess was. If they have guessed correctly,\n\
    \    // the value is 0, and if not, the value is the absolute difference between\
    \ the guess and the score.\n    // example:\n    public static List<long> Compare(List<long>\
    \ game, List<long> guess) {\n        List<long> result = new List<long>();\n \
    \       long score = 0;\n        long guess = 0;\n        long diff = 0;\n   \
    \     foreach (var item in game) {\n            score = item;\n            foreach\
    \ (var item2 in guess) {\n                guess = item2;\n                diff\
    \ = guess - score;\n                result.Add(diff);\n            }\n       \
    \ }\n        return result;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L, (long)5L, (long)1L})), (new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)2L, (long)-2L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))));\n    Debug.Assert(Compare((new\
    \ List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L})),\
    \ (new List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L,\
    \ (long)0L}))).Equals((new List<long>(new long[]{(long)0L, (long)0L, (long)0L,\
    \ (long)0L, (long)0L, (long)0L}))));\n    Debug.Assert(Compare((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L})), (new List<long>(new long[]{(long)-1L,\
    \ (long)-2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,\
    \ (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L, (long)2L,\
    \ (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)0L,\
    \ (long)0L, (long)1L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp88b3byy6.cs(20,14): error CS0136: A local or parameter named ''guess''
    cannot be declared in this scope because that name is used in an enclosing local
    scope to define a local or parameter

    /tmp/tmp88b3byy6.cs(24,35): error CS1579: foreach statement cannot operate on
    variables of type ''long'' because ''long'' does not contain a public instance
    definition for ''GetEnumerator''

    '
  timestamp: 1659976340
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // I think we all remember that feeling when the result of\
    \ some long-awaited\n    // event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    // definitely worth noting down and comparing.\n\
    \    // Your task is to determine if a person correctly guessed the results of\
    \ a number of matches.\n    // You are given two arrays of scores and guesses\
    \ of equal length, where each index shows a match. \n    // Return an array of\
    \ the same length denoting how far off each guess was. If they have guessed correctly,\n\
    \    // the value is 0, and if not, the value is the absolute difference between\
    \ the guess and the score.\n    // example:\n    public static List<long> Compare(List<long>\
    \ game, List<long> guess) {\n        List<long> result = new List<long>();\n \
    \       long score = 0;\n        long guess = 0;\n        foreach (long g in game)\
    \ {\n            guess = g.ToString();\n            score = g.ToString();\n  \
    \          foreach (long g in guess) {\n                guess = g.ToString();\n\
    \                score = g.ToString();\n                result.Add(Math.Abs(guess\
    \ - score));\n            }\n        }\n        return result;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Compare((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))));\n\
    \    Debug.Assert(Compare((new List<long>(new long[]{(long)0L, (long)0L, (long)0L,\
    \ (long)0L, (long)0L, (long)0L})), (new List<long>(new long[]{(long)0L, (long)0L,\
    \ (long)0L, (long)0L, (long)0L, (long)0L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))));\n    Debug.Assert(Compare((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (new List<long>(new long[]{(long)-1L,\
    \ (long)-2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,\
    \ (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L, (long)2L,\
    \ (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)0L,\
    \ (long)0L, (long)1L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpm6fouw62.cs(20,14): error CS0136: A local or parameter named ''guess''
    cannot be declared in this scope because that name is used in an enclosing local
    scope to define a local or parameter

    /tmp/tmpm6fouw62.cs(22,21): error CS0029: Cannot implicitly convert type ''string''
    to ''long''

    /tmp/tmpm6fouw62.cs(23,21): error CS0029: Cannot implicitly convert type ''string''
    to ''long''

    /tmp/tmpm6fouw62.cs(24,32): error CS1579: foreach statement cannot operate on
    variables of type ''long'' because ''long'' does not contain a public instance
    definition for ''GetEnumerator''

    /tmp/tmpm6fouw62.cs(24,27): error CS0136: A local or parameter named ''g'' cannot
    be declared in this scope because that name is used in an enclosing local scope
    to define a local or parameter

    /tmp/tmpm6fouw62.cs(25,25): error CS0029: Cannot implicitly convert type ''string''
    to ''long''

    /tmp/tmpm6fouw62.cs(26,25): error CS0029: Cannot implicitly convert type ''string''
    to ''long''

    '
  timestamp: 1659976340
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // I think we all remember that feeling when the result of\
    \ some long-awaited\n    // event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    // definitely worth noting down and comparing.\n\
    \    // Your task is to determine if a person correctly guessed the results of\
    \ a number of matches.\n    // You are given two arrays of scores and guesses\
    \ of equal length, where each index shows a match. \n    // Return an array of\
    \ the same length denoting how far off each guess was. If they have guessed correctly,\n\
    \    // the value is 0, and if not, the value is the absolute difference between\
    \ the guess and the score.\n    // example:\n    public static List<long> Compare(List<long>\
    \ game, List<long> guess) {\n        List<long> result = new List<long>();\n \
    \       foreach (long g in game) {\n            long g2 = g;\n            long\
    \ g3 = g;\n            long g4 = g;\n            long g5 = g;\n            long\
    \ g6 = g;\n            long g7 = g;\n            long g8 = g;\n            long\
    \ g9 = g;\n            long g10 = g;\n            long g11 = g;\n            long\
    \ g12 = g;\n            long g13 = g;\n            long g14 = g;\n           \
    \ long g15 = g;\n            long g16 = g;\n            long g17 = g;\n      \
    \      long g18 = g;\n            long g19 = g;\n            long g20 = g;\n \
    \           long g21 = g;\n            long g22 = g;\n            long g23 = g;\n\
    \            long g24 = g;\n            long g25 = g;\n            long g26 =\
    \ g;\n            long g27 = g;\n            long g28 = g;\n            long g29\
    \ = g;\n            long g30 = g;\n            long g31 = g;\n            long\
    \ g32 = g;\n            long g33 = g;\n            long g34 = g;\n           \
    \ long g35 = g;\n            long g36 = g;\n            long g37 = g;\n      \
    \      long g38 = g;\n            long g39 = g;\n            long g40 = g;\n \
    \           long g41 = g;\n            long g42 = g;\n            long g43 = g;\n\
    \            long g44 = g;\n            long g45 = g;\n            long g46 =\
    \ g;\n            long g47 = g;\n            long g48 = g;\n            long g49\
    \ = g;\n            long g50 = g;\n            long g51 = g;\n            long\
    \ g52 = g;\n            long g53 = g;\n            long g54 = g;\n           \
    \ long g55 = g;\n            long g56 = g;\n            long g57 = g;\n      \
    \      long g58 = g;\n            long g59 = g;\n            long g60 = g;\n \
    \           long g61 = g;\n            long g62 = g;\n            long g63 = g;\n\
    \            long g64 = g;\n            long g65 = g;\n            long g66 =\
    \ g;\n            long g67 = g;\n            long g68 = g;\n            long g69\
    \ = g;\n            long g70 = g;\n\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))));\n  \
    \  Debug.Assert(Compare((new List<long>(new long[]{(long)0L, (long)0L, (long)0L,\
    \ (long)0L, (long)0L, (long)0L})), (new List<long>(new long[]{(long)0L, (long)0L,\
    \ (long)0L, (long)0L, (long)0L, (long)0L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))));\n    Debug.Assert(Compare((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (new List<long>(new long[]{(long)-1L,\
    \ (long)-2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,\
    \ (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L, (long)2L,\
    \ (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)0L,\
    \ (long)0L, (long)1L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpgfjx41ni.cs(91,5): error CS0106: The modifier ''public'' is not valid
    for this item

    /tmp/tmpgfjx41ni.cs(98,2): error CS1513: } expected

    '
  timestamp: 1659976335
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // I think we all remember that feeling when the result of\
    \ some long-awaited\n    // event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    // definitely worth noting down and comparing.\n\
    \    // Your task is to determine if a person correctly guessed the results of\
    \ a number of matches.\n    // You are given two arrays of scores and guesses\
    \ of equal length, where each index shows a match. \n    // Return an array of\
    \ the same length denoting how far off each guess was. If they have guessed correctly,\n\
    \    // the value is 0, and if not, the value is the absolute difference between\
    \ the guess and the score.\n    // example:\n    public static List<long> Compare(List<long>\
    \ game, List<long> guess) {\n        List<long> result = new List<long>();\n \
    \       long score = 0;\n        long guess = 0;\n        long diff = 0;\n   \
    \     foreach (var g in game) {\n            score += g;\n        }\n        foreach\
    \ (var g in guess) {\n            guess += g;\n        }\n        diff = score\
    \ - guess;\n        result.Add(diff);\n        return result;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Compare((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))));\n\
    \    Debug.Assert(Compare((new List<long>(new long[]{(long)0L, (long)0L, (long)0L,\
    \ (long)0L, (long)0L, (long)0L})), (new List<long>(new long[]{(long)0L, (long)0L,\
    \ (long)0L, (long)0L, (long)0L, (long)0L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))));\n    Debug.Assert(Compare((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (new List<long>(new long[]{(long)-1L,\
    \ (long)-2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,\
    \ (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L, (long)2L,\
    \ (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)0L,\
    \ (long)0L, (long)1L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpi2itirkv.cs(20,14): error CS0136: A local or parameter named ''guess''
    cannot be declared in this scope because that name is used in an enclosing local
    scope to define a local or parameter

    /tmp/tmpi2itirkv.cs(25,27): error CS1579: foreach statement cannot operate on
    variables of type ''long'' because ''long'' does not contain a public instance
    definition for ''GetEnumerator''

    '
  timestamp: 1659976340
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // I think we all remember that feeling when the result of\
    \ some long-awaited\n    // event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    // definitely worth noting down and comparing.\n\
    \    // Your task is to determine if a person correctly guessed the results of\
    \ a number of matches.\n    // You are given two arrays of scores and guesses\
    \ of equal length, where each index shows a match. \n    // Return an array of\
    \ the same length denoting how far off each guess was. If they have guessed correctly,\n\
    \    // the value is 0, and if not, the value is the absolute difference between\
    \ the guess and the score.\n    // example:\n    public static List<long> Compare(List<long>\
    \ game, List<long> guess) {\n        List<long> result = new List<long>();\n \
    \       foreach (var g in game) {\n            long diff = Math.Abs(g - guess[game.IndexOf(g)]);\n\
    \            result.Add(diff);\n        }\n        return result;\n    }\n   \
    \ public static void Main(string[] args) {\n    Debug.Assert(Compare((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))));\n\
    \    Debug.Assert(Compare((new List<long>(new long[]{(long)0L, (long)0L, (long)0L,\
    \ (long)0L, (long)0L, (long)0L})), (new List<long>(new long[]{(long)0L, (long)0L,\
    \ (long)0L, (long)0L, (long)0L, (long)0L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))));\n    Debug.Assert(Compare((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (new List<long>(new long[]{(long)-1L,\
    \ (long)-2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,\
    \ (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L, (long)2L,\
    \ (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)0L,\
    \ (long)0L, (long)1L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <4a222c961c1848619c982f9dc41ed54a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <4a222c961c1848619c982f9dc41ed54a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976337
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // I think we all remember that feeling when the result of\
    \ some long-awaited\n    // event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    // definitely worth noting down and comparing.\n\
    \    // Your task is to determine if a person correctly guessed the results of\
    \ a number of matches.\n    // You are given two arrays of scores and guesses\
    \ of equal length, where each index shows a match. \n    // Return an array of\
    \ the same length denoting how far off each guess was. If they have guessed correctly,\n\
    \    // the value is 0, and if not, the value is the absolute difference between\
    \ the guess and the score.\n    // example:\n    public static List<long> Compare(List<long>\
    \ game, List<long> guess) {\n        List<long> result = new List<long>();\n \
    \       foreach (long g in game) {\n            long guess = guess.FirstOrDefault();\n\
    \            if (guess == g) {\n                result.Add(0);\n            }\
    \ else {\n                result.Add(Math.Abs(g - guess));\n            }\n  \
    \      }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))));\n  \
    \  Debug.Assert(Compare((new List<long>(new long[]{(long)0L, (long)0L, (long)0L,\
    \ (long)0L, (long)0L, (long)0L})), (new List<long>(new long[]{(long)0L, (long)0L,\
    \ (long)0L, (long)0L, (long)0L, (long)0L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))));\n    Debug.Assert(Compare((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (new List<long>(new long[]{(long)-1L,\
    \ (long)-2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,\
    \ (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L, (long)2L,\
    \ (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)0L,\
    \ (long)0L, (long)1L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpsdxz78sx.cs(20,18): error CS0136: A local or parameter named ''guess''
    cannot be declared in this scope because that name is used in an enclosing local
    scope to define a local or parameter

    /tmp/tmpsdxz78sx.cs(20,32): error CS1061: ''long'' does not contain a definition
    for ''FirstOrDefault'' and no accessible extension method ''FirstOrDefault'' accepting
    a first argument of type ''long'' could be found (are you missing a using directive
    or an assembly reference?)

    /tmp/tmpsdxz78sx.cs(20,26): error CS0165: Use of unassigned local variable ''guess''

    '
  timestamp: 1659976340
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // I think we all remember that feeling when the result of\
    \ some long-awaited\n    // event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    // definitely worth noting down and comparing.\n\
    \    // Your task is to determine if a person correctly guessed the results of\
    \ a number of matches.\n    // You are given two arrays of scores and guesses\
    \ of equal length, where each index shows a match. \n    // Return an array of\
    \ the same length denoting how far off each guess was. If they have guessed correctly,\n\
    \    // the value is 0, and if not, the value is the absolute difference between\
    \ the guess and the score.\n    // example:\n    public static List<long> Compare(List<long>\
    \ game, List<long> guess) {\n        var result = new List<long>();\n        foreach\
    \ (var g in game) {\n            var gDiff = g.CompareTo(guess);\n           \
    \ if (gDiff != 0) {\n                result.Add(gDiff);\n            }\n     \
    \   }\n        return result;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L, (long)5L, (long)1L})), (new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)2L, (long)-2L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))));\n    Debug.Assert(Compare((new\
    \ List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L})),\
    \ (new List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L,\
    \ (long)0L}))).Equals((new List<long>(new long[]{(long)0L, (long)0L, (long)0L,\
    \ (long)0L, (long)0L, (long)0L}))));\n    Debug.Assert(Compare((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L})), (new List<long>(new long[]{(long)-1L,\
    \ (long)-2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,\
    \ (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L, (long)2L,\
    \ (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)0L,\
    \ (long)0L, (long)1L}))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentException: Object must be of type\
    \ Int64.\n  at System.Int64.CompareTo (System.Object value) [0x00024] in <aa5dff9b31c64fce86559bbbf6cd364f>:0\
    \ \n  at Problem.Compare (System.Collections.Generic.List`1[T] game, System.Collections.Generic.List`1[T]\
    \ guess) [0x0001a] in <aad8d52d0ce7485ca45cd7393d4561f4>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x0002d] in <aad8d52d0ce7485ca45cd7393d4561f4>:0 \n\
    [ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentException: Object must be of\
    \ type Int64.\n  at System.Int64.CompareTo (System.Object value) [0x00024] in\
    \ <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Compare (System.Collections.Generic.List`1[T]\
    \ game, System.Collections.Generic.List`1[T] guess) [0x0001a] in <aad8d52d0ce7485ca45cd7393d4561f4>:0\
    \ \n  at Problem.Main (System.String[] args) [0x0002d] in <aad8d52d0ce7485ca45cd7393d4561f4>:0\
    \ \n"
  stdout: ''
  timestamp: 1659976340
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // I think we all remember that feeling when the result of\
    \ some long-awaited\n    // event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    // definitely worth noting down and comparing.\n\
    \    // Your task is to determine if a person correctly guessed the results of\
    \ a number of matches.\n    // You are given two arrays of scores and guesses\
    \ of equal length, where each index shows a match. \n    // Return an array of\
    \ the same length denoting how far off each guess was. If they have guessed correctly,\n\
    \    // the value is 0, and if not, the value is the absolute difference between\
    \ the guess and the score.\n    // example:\n    public static List<long> Compare(List<long>\
    \ game, List<long> guess) {\n        List<long> result = new List<long>();\n \
    \       foreach (long g in game) {\n            long guess = guess.FirstOrDefault(x\
    \ => x == g);\n            if (guess != g) {\n                result.Add(Math.Abs(guess\
    \ - g));\n            }\n        }\n        return result;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Compare((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))));\n\
    \    Debug.Assert(Compare((new List<long>(new long[]{(long)0L, (long)0L, (long)0L,\
    \ (long)0L, (long)0L, (long)0L})), (new List<long>(new long[]{(long)0L, (long)0L,\
    \ (long)0L, (long)0L, (long)0L, (long)0L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))));\n    Debug.Assert(Compare((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (new List<long>(new long[]{(long)-1L,\
    \ (long)-2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,\
    \ (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L, (long)2L,\
    \ (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)0L,\
    \ (long)0L, (long)1L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp4d2cl0ct.cs(20,18): error CS0136: A local or parameter named ''guess''
    cannot be declared in this scope because that name is used in an enclosing local
    scope to define a local or parameter

    /tmp/tmp4d2cl0ct.cs(20,32): error CS1061: ''long'' does not contain a definition
    for ''FirstOrDefault'' and no accessible extension method ''FirstOrDefault'' accepting
    a first argument of type ''long'' could be found (are you missing a using directive
    or an assembly reference?)

    /tmp/tmp4d2cl0ct.cs(20,26): error CS0165: Use of unassigned local variable ''guess''

    '
  timestamp: 1659976340
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // I think we all remember that feeling when the result of\
    \ some long-awaited\n    // event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    // definitely worth noting down and comparing.\n\
    \    // Your task is to determine if a person correctly guessed the results of\
    \ a number of matches.\n    // You are given two arrays of scores and guesses\
    \ of equal length, where each index shows a match. \n    // Return an array of\
    \ the same length denoting how far off each guess was. If they have guessed correctly,\n\
    \    // the value is 0, and if not, the value is the absolute difference between\
    \ the guess and the score.\n    // example:\n    public static List<long> Compare(List<long>\
    \ game, List<long> guess) {\n        // Your code goes here\n        List<long>\
    \ result = new List<long>();\n        long score = 0;\n        long guess = 0;\n\
    \        foreach (long g in game) {\n            score = g;\n            guess\
    \ = guess.FirstOrDefault();\n            result.Add(Math.Abs(guess - score));\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))));\n  \
    \  Debug.Assert(Compare((new List<long>(new long[]{(long)0L, (long)0L, (long)0L,\
    \ (long)0L, (long)0L, (long)0L})), (new List<long>(new long[]{(long)0L, (long)0L,\
    \ (long)0L, (long)0L, (long)0L, (long)0L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))));\n    Debug.Assert(Compare((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (new List<long>(new long[]{(long)-1L,\
    \ (long)-2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,\
    \ (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L, (long)2L,\
    \ (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)0L,\
    \ (long)0L, (long)1L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpygcrw8k9.cs(21,14): error CS0136: A local or parameter named ''guess''
    cannot be declared in this scope because that name is used in an enclosing local
    scope to define a local or parameter

    /tmp/tmpygcrw8k9.cs(24,27): error CS1061: ''long'' does not contain a definition
    for ''FirstOrDefault'' and no accessible extension method ''FirstOrDefault'' accepting
    a first argument of type ''long'' could be found (are you missing a using directive
    or an assembly reference?)

    '
  timestamp: 1659976340
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // I think we all remember that feeling when the result of\
    \ some long-awaited\n    // event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    // definitely worth noting down and comparing.\n\
    \    // Your task is to determine if a person correctly guessed the results of\
    \ a number of matches.\n    // You are given two arrays of scores and guesses\
    \ of equal length, where each index shows a match. \n    // Return an array of\
    \ the same length denoting how far off each guess was. If they have guessed correctly,\n\
    \    // the value is 0, and if not, the value is the absolute difference between\
    \ the guess and the score.\n    // example:\n    public static List<long> Compare(List<long>\
    \ game, List<long> guess) {\n        List<long> result = new List<long>();\n \
    \       long score = 0;\n        foreach (long g in game) {\n            score\
    \ += g;\n        }\n        foreach (long g in guess) {\n            score -=\
    \ g;\n        }\n        if (score < 0) {\n            score = -score;\n     \
    \   }\n        result.Add(score);\n        return result;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))));\n  \
    \  Debug.Assert(Compare((new List<long>(new long[]{(long)0L, (long)0L, (long)0L,\
    \ (long)0L, (long)0L, (long)0L})), (new List<long>(new long[]{(long)0L, (long)0L,\
    \ (long)0L, (long)0L, (long)0L, (long)0L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))));\n    Debug.Assert(Compare((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (new List<long>(new long[]{(long)-1L,\
    \ (long)-2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,\
    \ (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L, (long)2L,\
    \ (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)0L,\
    \ (long)0L, (long)1L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <015d121a5f274b368015eeb77c60232a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <015d121a5f274b368015eeb77c60232a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976340
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // I think we all remember that feeling when the result of\
    \ some long-awaited\n    // event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    // definitely worth noting down and comparing.\n\
    \    // Your task is to determine if a person correctly guessed the results of\
    \ a number of matches.\n    // You are given two arrays of scores and guesses\
    \ of equal length, where each index shows a match. \n    // Return an array of\
    \ the same length denoting how far off each guess was. If they have guessed correctly,\n\
    \    // the value is 0, and if not, the value is the absolute difference between\
    \ the guess and the score.\n    // example:\n    public static List<long> Compare(List<long>\
    \ game, List<long> guess) {\n        List<long> result = new List<long>();\n \
    \       long score = 0;\n        long diff = 0;\n        foreach (long g in game)\
    \ {\n            foreach (long g in guess) {\n                diff = g - g;\n\
    \                if (diff == 0) {\n                    result.Add(0);\n      \
    \          } else {\n                    result.Add(diff);\n                }\n\
    \            }\n        }\n        return result;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))));\n  \
    \  Debug.Assert(Compare((new List<long>(new long[]{(long)0L, (long)0L, (long)0L,\
    \ (long)0L, (long)0L, (long)0L})), (new List<long>(new long[]{(long)0L, (long)0L,\
    \ (long)0L, (long)0L, (long)0L, (long)0L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))));\n    Debug.Assert(Compare((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (new List<long>(new long[]{(long)-1L,\
    \ (long)-2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,\
    \ (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L, (long)2L,\
    \ (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)0L,\
    \ (long)0L, (long)1L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpvryk_z23.cs(22,27): error CS0136: A local or parameter named ''g'' cannot
    be declared in this scope because that name is used in an enclosing local scope
    to define a local or parameter

    /tmp/tmpvryk_z23.cs(19,14): warning CS0219: The variable ''score'' is assigned
    but its value is never used

    '
  timestamp: 1659976340
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // I think we all remember that feeling when the result of\
    \ some long-awaited\n    // event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    // definitely worth noting down and comparing.\n\
    \    // Your task is to determine if a person correctly guessed the results of\
    \ a number of matches.\n    // You are given two arrays of scores and guesses\
    \ of equal length, where each index shows a match. \n    // Return an array of\
    \ the same length denoting how far off each guess was. If they have guessed correctly,\n\
    \    // the value is 0, and if not, the value is the absolute difference between\
    \ the guess and the score.\n    // example:\n    public static List<long> Compare(List<long>\
    \ game, List<long> guess) {\n        List<long> result = new List<long>();\n \
    \       long diff = 0;\n        foreach (long g in game) {\n            long g2\
    \ = g;\n            foreach (long g in guess) {\n                long g3 = g;\n\
    \                diff = g3 - g2;\n                if (diff < 0) {\n          \
    \          diff = -diff;\n                }\n                result.Add(diff);\n\
    \            }\n        }\n        return result;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))));\n  \
    \  Debug.Assert(Compare((new List<long>(new long[]{(long)0L, (long)0L, (long)0L,\
    \ (long)0L, (long)0L, (long)0L})), (new List<long>(new long[]{(long)0L, (long)0L,\
    \ (long)0L, (long)0L, (long)0L, (long)0L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))));\n    Debug.Assert(Compare((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (new List<long>(new long[]{(long)-1L,\
    \ (long)-2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,\
    \ (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L, (long)2L,\
    \ (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)0L,\
    \ (long)0L, (long)1L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp59uewi35.cs(22,27): error CS0136: A local or parameter named ''g'' cannot
    be declared in this scope because that name is used in an enclosing local scope
    to define a local or parameter

    '
  timestamp: 1659976340
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // I think we all remember that feeling when the result of\
    \ some long-awaited\n    // event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    // definitely worth noting down and comparing.\n\
    \    // Your task is to determine if a person correctly guessed the results of\
    \ a number of matches.\n    // You are given two arrays of scores and guesses\
    \ of equal length, where each index shows a match. \n    // Return an array of\
    \ the same length denoting how far off each guess was. If they have guessed correctly,\n\
    \    // the value is 0, and if not, the value is the absolute difference between\
    \ the guess and the score.\n    // example:\n    public static List<long> Compare(List<long>\
    \ game, List<long> guess) {\n        List<long> result = new List<long>();\n \
    \       long score;\n        long guess;\n        long diff;\n        bool correct;\n\
    \        foreach (var item in game) {\n            score = item;\n           \
    \ guess = guess[game.IndexOf(item)]; // get the guess from the game\n        \
    \    diff = guess - score;\n            correct = diff < 0 ? guess == score :\
    \ diff > 0 ? guess == score : guess == score;\n            result.Add(correct\
    \ ? diff : Math.Abs(diff));\n        }\n        return result;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Compare((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))));\n\
    \    Debug.Assert(Compare((new List<long>(new long[]{(long)0L, (long)0L, (long)0L,\
    \ (long)0L, (long)0L, (long)0L})), (new List<long>(new long[]{(long)0L, (long)0L,\
    \ (long)0L, (long)0L, (long)0L, (long)0L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))));\n    Debug.Assert(Compare((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (new List<long>(new long[]{(long)-1L,\
    \ (long)-2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,\
    \ (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L, (long)2L,\
    \ (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)0L,\
    \ (long)0L, (long)1L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpr9c96be4.cs(20,14): error CS0136: A local or parameter named ''guess''
    cannot be declared in this scope because that name is used in an enclosing local
    scope to define a local or parameter

    /tmp/tmpr9c96be4.cs(25,21): error CS0021: Cannot apply indexing with [] to an
    expression of type ''long''

    /tmp/tmpr9c96be4.cs(25,21): error CS0165: Use of unassigned local variable ''guess''

    '
  timestamp: 1659976340
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // I think we all remember that feeling when the result of\
    \ some long-awaited\n    // event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    // definitely worth noting down and comparing.\n\
    \    // Your task is to determine if a person correctly guessed the results of\
    \ a number of matches.\n    // You are given two arrays of scores and guesses\
    \ of equal length, where each index shows a match. \n    // Return an array of\
    \ the same length denoting how far off each guess was. If they have guessed correctly,\n\
    \    // the value is 0, and if not, the value is the absolute difference between\
    \ the guess and the score.\n    // example:\n    public static List<long> Compare(List<long>\
    \ game, List<long> guess) {\n        // Your code goes here\n        List<long>\
    \ result = new List<long>();\n        long diff = 0;\n        long max = 0;\n\
    \        long min = 0;\n        long sum = 0;\n        long count = 0;\n     \
    \   long sum2 = 0;\n        long sum3 = 0;\n        long sum4 = 0;\n        long\
    \ sum5 = 0;\n        long sum6 = 0;\n        long sum7 = 0;\n        long sum8\
    \ = 0;\n        long sum9 = 0;\n        long sum10 = 0;\n        long sum11 =\
    \ 0;\n        long sum12 = 0;\n        long sum13 = 0;\n        long sum14 = 0;\n\
    \        long sum15 = 0;\n        long sum16 = 0;\n        long sum17 = 0;\n \
    \       long sum18 = 0;\n        long sum19 = 0;\n        long sum20 = 0;\n  \
    \      long sum21 = 0;\n        long sum22 = 0;\n        long sum23 = 0;\n   \
    \     long sum24 = 0;\n        long sum25 = 0;\n        long sum26 = 0;\n    \
    \    long sum27 = 0;\n        long sum28 = 0;\n        long sum29 = 0;\n     \
    \   long sum30 = 0;\n        long sum31 = 0;\n        long sum32 = 0;\n      \
    \  long sum33 = 0;\n        long sum34 = 0;\n        long sum35 = 0;\n       \
    \ long sum36 = 0;\n        long sum37 = 0;\n        long sum38 = 0;\n        long\
    \ sum39 = 0;\n        long sum40 = 0;\n        long sum41 = 0;\n        long sum42\
    \ = 0;\n        long sum43 = 0;\n        long sum44 = 0;\n        long sum45 =\
    \ 0;\n        long sum46 = 0;\n        long sum47 = 0;\n        long sum48 = 0;\n\
    \        long sum49 = 0;\n        long sum50 = 0;\n        long sum51 = 0;\n \
    \       long sum52 = 0;\n        long sum53 = 0;\n        long sum54 = 0;\n  \
    \      long sum55 = 0;\n        long sum56 = 0;\n        long sum57 = 0;\n   \
    \     long sum58 = 0;\n        long sum59 = 0;\n        long sum60 = 0;\n    \
    \    long sum61 = 0;\n        long sum62 = 0;\n        long sum63 = 0;\n     \
    \   long sum64 = 0;\n        long sum65 = 0;\n        long sum66 = 0;\n      \
    \  long sum67 = 0;\n        long sum68 = 0;\n        long sum69 = 0;\n       \
    \ long sum70 = 0;\n        long sum71 = 0;\n        long sum72 = 0;\n        long\
    \ sum73 = 0;\n        long sum74 = 0;\n        long sum75 = 0;\n        long sum76\
    \ = 0;\n        long sum77 = 0;\n        long sum78 = 0;\n        long sum79 =\
    \ 0;\n        long sum80 = 0;\n        long \n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))));\n  \
    \  Debug.Assert(Compare((new List<long>(new long[]{(long)0L, (long)0L, (long)0L,\
    \ (long)0L, (long)0L, (long)0L})), (new List<long>(new long[]{(long)0L, (long)0L,\
    \ (long)0L, (long)0L, (long)0L, (long)0L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))));\n    Debug.Assert(Compare((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (new List<long>(new long[]{(long)-1L,\
    \ (long)-2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,\
    \ (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L, (long)2L,\
    \ (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)0L,\
    \ (long)0L, (long)1L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpcwc5wuw7.cs(104,13): error CS1001: Identifier expected

    /tmp/tmpcwc5wuw7.cs(104,13): error CS1002: ; expected

    '
  timestamp: 1659976339
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // I think we all remember that feeling when the result of\
    \ some long-awaited\n    // event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    // definitely worth noting down and comparing.\n\
    \    // Your task is to determine if a person correctly guessed the results of\
    \ a number of matches.\n    // You are given two arrays of scores and guesses\
    \ of equal length, where each index shows a match. \n    // Return an array of\
    \ the same length denoting how far off each guess was. If they have guessed correctly,\n\
    \    // the value is 0, and if not, the value is the absolute difference between\
    \ the guess and the score.\n    // example:\n    public static List<long> Compare(List<long>\
    \ game, List<long> guess) {\n        List<long> result = new List<long>();\n \
    \       long diff = 0;\n        foreach (long g in game) {\n            diff =\
    \ g - guess[game.IndexOf(g)];\n            result.Add(diff);\n        }\n    \
    \    return result;\n    }\n    public static void Main(string[] args) {\n   \
    \ Debug.Assert(Compare((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L, (long)5L, (long)1L})), (new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)2L, (long)-2L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))));\n    Debug.Assert(Compare((new\
    \ List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L})),\
    \ (new List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L,\
    \ (long)0L}))).Equals((new List<long>(new long[]{(long)0L, (long)0L, (long)0L,\
    \ (long)0L, (long)0L, (long)0L}))));\n    Debug.Assert(Compare((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L})), (new List<long>(new long[]{(long)-1L,\
    \ (long)-2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,\
    \ (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L, (long)2L,\
    \ (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)0L,\
    \ (long)0L, (long)1L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <5f8e70bcf68f4853abbee528b0284289>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <5f8e70bcf68f4853abbee528b0284289>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976339
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // I think we all remember that feeling when the result of\
    \ some long-awaited\n    // event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    // definitely worth noting down and comparing.\n\
    \    // Your task is to determine if a person correctly guessed the results of\
    \ a number of matches.\n    // You are given two arrays of scores and guesses\
    \ of equal length, where each index shows a match. \n    // Return an array of\
    \ the same length denoting how far off each guess was. If they have guessed correctly,\n\
    \    // the value is 0, and if not, the value is the absolute difference between\
    \ the guess and the score.\n    // example:\n    public static List<long> Compare(List<long>\
    \ game, List<long> guess) {\n        List<long> result = new List<long>();\n \
    \       foreach (var g in guess) {\n            long diff = Math.Abs(g - game[game.IndexOf(g)]);\n\
    \            result.Add(diff);\n        }\n        return result;\n    }\n   \
    \ public static void Main(string[] args) {\n    Debug.Assert(Compare((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))));\n\
    \    Debug.Assert(Compare((new List<long>(new long[]{(long)0L, (long)0L, (long)0L,\
    \ (long)0L, (long)0L, (long)0L})), (new List<long>(new long[]{(long)0L, (long)0L,\
    \ (long)0L, (long)0L, (long)0L, (long)0L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))));\n    Debug.Assert(Compare((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (new List<long>(new long[]{(long)-1L,\
    \ (long)-2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,\
    \ (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L, (long)2L,\
    \ (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)0L,\
    \ (long)0L, (long)1L}))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out\
    \ of range. Must be non-negative and less than the size of the collection.\nParameter\
    \ name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Compare\
    \ (System.Collections.Generic.List`1[T] game, System.Collections.Generic.List`1[T]\
    \ guess) [0x00023] in <74a3009cc680437ca05d7f5d349e0739>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x0002d] in <74a3009cc680437ca05d7f5d349e0739>:0 \n\
    [ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index was\
    \ out of range. Must be non-negative and less than the size of the collection.\n\
    Parameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Compare\
    \ (System.Collections.Generic.List`1[T] game, System.Collections.Generic.List`1[T]\
    \ guess) [0x00023] in <74a3009cc680437ca05d7f5d349e0739>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x0002d] in <74a3009cc680437ca05d7f5d349e0739>:0 \n"
  stdout: ''
  timestamp: 1659976340
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // I think we all remember that feeling when the result of\
    \ some long-awaited\n    // event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    // definitely worth noting down and comparing.\n\
    \    // Your task is to determine if a person correctly guessed the results of\
    \ a number of matches.\n    // You are given two arrays of scores and guesses\
    \ of equal length, where each index shows a match. \n    // Return an array of\
    \ the same length denoting how far off each guess was. If they have guessed correctly,\n\
    \    // the value is 0, and if not, the value is the absolute difference between\
    \ the guess and the score.\n    // example:\n    public static List<long> Compare(List<long>\
    \ game, List<long> guess) {\n        List<long> result = new List<long>();\n \
    \       long score = 0;\n        long difference = 0;\n        for (int i = 0;\
    \ i < game.Count; i++) {\n            score += game[i];\n            difference\
    \ += Math.Abs(guess[i] - score);\n        }\n        if (difference == 0) {\n\
    \            result.Add(0);\n        } else {\n            result.Add(difference);\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))));\n  \
    \  Debug.Assert(Compare((new List<long>(new long[]{(long)0L, (long)0L, (long)0L,\
    \ (long)0L, (long)0L, (long)0L})), (new List<long>(new long[]{(long)0L, (long)0L,\
    \ (long)0L, (long)0L, (long)0L, (long)0L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))));\n    Debug.Assert(Compare((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (new List<long>(new long[]{(long)-1L,\
    \ (long)-2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,\
    \ (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L, (long)2L,\
    \ (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)0L,\
    \ (long)0L, (long)1L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <f8f73f6040fe435ba9442d0f05a5c97d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <f8f73f6040fe435ba9442d0f05a5c97d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976340
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // I think we all remember that feeling when the result of\
    \ some long-awaited\n    // event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    // definitely worth noting down and comparing.\n\
    \    // Your task is to determine if a person correctly guessed the results of\
    \ a number of matches.\n    // You are given two arrays of scores and guesses\
    \ of equal length, where each index shows a match. \n    // Return an array of\
    \ the same length denoting how far off each guess was. If they have guessed correctly,\n\
    \    // the value is 0, and if not, the value is the absolute difference between\
    \ the guess and the score.\n    // example:\n    public static List<long> Compare(List<long>\
    \ game, List<long> guess) {\n        List<long> result = new List<long>();\n \
    \       long score = 0;\n        long diff = 0;\n        foreach (long g in game)\
    \ {\n            score += g;\n            diff = g - guess[game.IndexOf(g)];\n\
    \            result.Add(diff);\n        }\n        return result;\n    }\n   \
    \ public static void Main(string[] args) {\n    Debug.Assert(Compare((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))));\n\
    \    Debug.Assert(Compare((new List<long>(new long[]{(long)0L, (long)0L, (long)0L,\
    \ (long)0L, (long)0L, (long)0L})), (new List<long>(new long[]{(long)0L, (long)0L,\
    \ (long)0L, (long)0L, (long)0L, (long)0L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))));\n    Debug.Assert(Compare((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (new List<long>(new long[]{(long)-1L,\
    \ (long)-2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,\
    \ (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L, (long)2L,\
    \ (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)0L,\
    \ (long)0L, (long)1L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <7bc05edc4c48470fa4901d4974798e27>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <7bc05edc4c48470fa4901d4974798e27>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976340
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // I think we all remember that feeling when the result of\
    \ some long-awaited\n    // event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    // definitely worth noting down and comparing.\n\
    \    // Your task is to determine if a person correctly guessed the results of\
    \ a number of matches.\n    // You are given two arrays of scores and guesses\
    \ of equal length, where each index shows a match. \n    // Return an array of\
    \ the same length denoting how far off each guess was. If they have guessed correctly,\n\
    \    // the value is 0, and if not, the value is the absolute difference between\
    \ the guess and the score.\n    // example:\n    public static List<long> Compare(List<long>\
    \ game, List<long> guess) {\n        List<long> result = new List<long>();\n \
    \       long score = 0;\n        long guess = 0;\n        long diff = 0;\n   \
    \     foreach (var item in game) {\n            score = item;\n            guess\
    \ = guess[game.IndexOf(item)]; // get the guess from the index\n            diff\
    \ = guess - score;\n            result.Add(diff);\n        }\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Compare((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})),\
    \ (new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L,\
    \ (long)-2L}))).Equals((new List<long>(new long[]{(long)0L, (long)0L, (long)0L,\
    \ (long)0L, (long)3L, (long)3L}))));\n    Debug.Assert(Compare((new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L})), (new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))));\n\
    \    Debug.Assert(Compare((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})),\
    \ (new List<long>(new long[]{(long)-1L, (long)-2L, (long)-3L}))).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)4L, (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L,\
    \ (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)0L, (long)0L, (long)1L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp14nqqjkt.cs(20,14): error CS0136: A local or parameter named ''guess''
    cannot be declared in this scope because that name is used in an enclosing local
    scope to define a local or parameter

    /tmp/tmp14nqqjkt.cs(24,21): error CS0021: Cannot apply indexing with [] to an
    expression of type ''long''

    '
  timestamp: 1659976340
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // I think we all remember that feeling when the result of\
    \ some long-awaited\n    // event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    // definitely worth noting down and comparing.\n\
    \    // Your task is to determine if a person correctly guessed the results of\
    \ a number of matches.\n    // You are given two arrays of scores and guesses\
    \ of equal length, where each index shows a match. \n    // Return an array of\
    \ the same length denoting how far off each guess was. If they have guessed correctly,\n\
    \    // the value is 0, and if not, the value is the absolute difference between\
    \ the guess and the score.\n    // example:\n    public static List<long> Compare(List<long>\
    \ game, List<long> guess) {\n        List<long> result = new List<long>();\n \
    \       long total = 0;\n        long totalGuess = 0;\n        long totalGuessed\
    \ = 0;\n        long totalGuessedCorrectly = 0;\n        long totalGuessedIncorrectly\
    \ = 0;\n        long totalGuessedIncorrectlyCorrectly = 0;\n        long totalGuessedIncorrectlyIncorrectly\
    \ = 0;\n        long totalGuessedIncorrectlyIncorrectlyCorrectly = 0;\n      \
    \  long totalGuessedIncorrectlyIncorrectlyIncorrectly = 0;\n        long totalGuessedIncorrectlyIncorrectlyIncorrectlyCorrectly\
    \ = 0;\n        long totalGuessedIncorrectlyIncorrectlyIncorrectlyIncorrectly\
    \ = 0;\n        long totalGuessedIncorrectlyIncorrectlyIncorrectlyIncorrectlyCorrectly\
    \ = 0;\n        long totalGuessedIncorrectlyIncorrectlyIncorrectlyIncorrectlyIncorrectly\
    \ = 0;\n        long totalGuessedIncorrectlyIncorrectlyIncorrectlyIncorrectlyIncorrectly\
    \ = 0;\n        long totalGuessedIncorrectlyIncorrectlyIncorrectlyIncorrectlyIncorrectlyCorrectly\
    \ = 0;\n        long totalGuessedIncorrectlyIncorrectlyIncorrectlyIncorrectlyIncorrectlyIncorrectly\
    \ = 0;\n        long totalGuessedIncorrectlyIncorrectlyIncorrectlyIncorrectlyIncorrectlyIncorrectly\
    \ = 0;\n        long totalGuessedIncorrectlyIncorrectlyIncorrectlyIncorrectlyIncorrectlyIncorrectly\
    \ = 0;\n        long totalGuessedIncorrectlyIncorrectlyIncorrectlyIncorrectlyIncorrectlyIncorrectly\
    \ = 0;\n        long totalGuessedIncorrectlyIncorrectlyIncorrectlyIncorrectlyIncorrectlyIncorrectly\
    \ = 0;\n        long totalGuessedIncorrectlyIncorrectlyIncorrectlyIncorrectlyIncorrectlyIncorrectly\
    \ = 0;\n        long totalGuessedIncorrectlyIncorrectlyIncorrectlyIncorrectlyIncorrectlyIncorrectly\
    \ = 0;\n        long totalGuessedIncorrectlyIncorrectlyIncorrectlyIncorrectlyIncorrectlyIncorrectly\
    \ = 0;\n        long totalGuessedIncorrectlyIncorrectlyIncorrectlyIncorrectlyIncorrectlyIncorrectly\
    \ = 0;\n        long totalGuessedIncorrectlyIncorrectlyIncorrectlyIncorrectlyIncorrectlyIncorrectly\
    \ = 0;\n        long totalGuessedIncorrectlyIncorrectlyIncorrectlyIncorrectlyIncorrectlyIncorrectly\
    \ = 0;\n        long totalGuessedIncorrectlyIncorrectlyIncorrectlyIncorrectlyIncorrectlyIncorrectly\
    \ = 0;\n        long totalGuessedIncorrectlyIncorrectlyIncorrectlyIncorrectlyIncorrectlyIncorrectly\
    \ = 0;\n        long totalGuessedIncorrectlyIncorrectlyIncorrectlyIncorrectlyIncorrectlyIncorrectly\
    \ = 0;\n        long totalGuessedIncorrectlyIncorrectlyIncorrectlyIncorrectlyIncorrectlyIncorrectly\
    \ = 0;\n        long totalG\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L, (long)5L, (long)1L})), (new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)2L, (long)-2L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))));\n    Debug.Assert(Compare((new\
    \ List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L})),\
    \ (new List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L,\
    \ (long)0L}))).Equals((new List<long>(new long[]{(long)0L, (long)0L, (long)0L,\
    \ (long)0L, (long)0L, (long)0L}))));\n    Debug.Assert(Compare((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L})), (new List<long>(new long[]{(long)-1L,\
    \ (long)-2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,\
    \ (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L, (long)2L,\
    \ (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)0L,\
    \ (long)0L, (long)1L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpc4yc6wq3.cs(49,20): error CS1002: ; expected

    '
  timestamp: 1659976340
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // I think we all remember that feeling when the result of\
    \ some long-awaited\n    // event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    // definitely worth noting down and comparing.\n\
    \    // Your task is to determine if a person correctly guessed the results of\
    \ a number of matches.\n    // You are given two arrays of scores and guesses\
    \ of equal length, where each index shows a match. \n    // Return an array of\
    \ the same length denoting how far off each guess was. If they have guessed correctly,\n\
    \    // the value is 0, and if not, the value is the absolute difference between\
    \ the guess and the score.\n    // example:\n    public static List<long> Compare(List<long>\
    \ game, List<long> guess) {\n        List<long> result = new List<long>();\n \
    \       long score = 0;\n        long difference = 0;\n        foreach (long guess\
    \ in guess) {\n            score = game.Sum(x => x);\n            difference =\
    \ guess - score;\n            result.Add(difference);\n        }\n        return\
    \ result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Compare((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})),\
    \ (new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L,\
    \ (long)-2L}))).Equals((new List<long>(new long[]{(long)0L, (long)0L, (long)0L,\
    \ (long)0L, (long)3L, (long)3L}))));\n    Debug.Assert(Compare((new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L})), (new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))));\n\
    \    Debug.Assert(Compare((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})),\
    \ (new List<long>(new long[]{(long)-1L, (long)-2L, (long)-3L}))).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)4L, (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L,\
    \ (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)0L, (long)0L, (long)1L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpdo0xoxe9.cs(21,23): error CS0136: A local or parameter named ''guess''
    cannot be declared in this scope because that name is used in an enclosing local
    scope to define a local or parameter

    '
  timestamp: 1659976335
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // I think we all remember that feeling when the result of\
    \ some long-awaited\n    // event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    // definitely worth noting down and comparing.\n\
    \    // Your task is to determine if a person correctly guessed the results of\
    \ a number of matches.\n    // You are given two arrays of scores and guesses\
    \ of equal length, where each index shows a match. \n    // Return an array of\
    \ the same length denoting how far off each guess was. If they have guessed correctly,\n\
    \    // the value is 0, and if not, the value is the absolute difference between\
    \ the guess and the score.\n    // example:\n    public static List<long> Compare(List<long>\
    \ game, List<long> guess) {\n        // TODO: Write your code here\n        List<long>\
    \ result = new List<long>();\n        foreach (long score in game) {\n       \
    \     long guess = guess.FirstOrDefault();\n            if (guess == score) {\n\
    \                result.Add(0);\n            }\n            else {\n         \
    \       result.Add(Math.Abs(guess - score));\n            }\n        }\n     \
    \   return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Compare((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})),\
    \ (new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L,\
    \ (long)-2L}))).Equals((new List<long>(new long[]{(long)0L, (long)0L, (long)0L,\
    \ (long)0L, (long)3L, (long)3L}))));\n    Debug.Assert(Compare((new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L})), (new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))));\n\
    \    Debug.Assert(Compare((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})),\
    \ (new List<long>(new long[]{(long)-1L, (long)-2L, (long)-3L}))).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)4L, (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L,\
    \ (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)0L, (long)0L, (long)1L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp73wjyk73.cs(21,18): error CS0136: A local or parameter named ''guess''
    cannot be declared in this scope because that name is used in an enclosing local
    scope to define a local or parameter

    /tmp/tmp73wjyk73.cs(21,32): error CS1061: ''long'' does not contain a definition
    for ''FirstOrDefault'' and no accessible extension method ''FirstOrDefault'' accepting
    a first argument of type ''long'' could be found (are you missing a using directive
    or an assembly reference?)

    /tmp/tmp73wjyk73.cs(21,26): error CS0165: Use of unassigned local variable ''guess''

    '
  timestamp: 1659976340
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // I think we all remember that feeling when the result of\
    \ some long-awaited\n    // event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    // definitely worth noting down and comparing.\n\
    \    // Your task is to determine if a person correctly guessed the results of\
    \ a number of matches.\n    // You are given two arrays of scores and guesses\
    \ of equal length, where each index shows a match. \n    // Return an array of\
    \ the same length denoting how far off each guess was. If they have guessed correctly,\n\
    \    // the value is 0, and if not, the value is the absolute difference between\
    \ the guess and the score.\n    // example:\n    public static List<long> Compare(List<long>\
    \ game, List<long> guess) {\n        var result = new List<long>();\n        foreach\
    \ (var g in game) {\n            var gDiff = Math.Abs(g - guess[game.IndexOf(g)]);\n\
    \            result.Add(gDiff);\n        }\n        return result;\n    }\n  \
    \  public static void Main(string[] args) {\n    Debug.Assert(Compare((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))));\n\
    \    Debug.Assert(Compare((new List<long>(new long[]{(long)0L, (long)0L, (long)0L,\
    \ (long)0L, (long)0L, (long)0L})), (new List<long>(new long[]{(long)0L, (long)0L,\
    \ (long)0L, (long)0L, (long)0L, (long)0L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))));\n    Debug.Assert(Compare((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (new List<long>(new long[]{(long)-1L,\
    \ (long)-2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,\
    \ (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L, (long)2L,\
    \ (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)0L,\
    \ (long)0L, (long)1L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <abbedf5d0420462ca67aa76d2759fc22>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <abbedf5d0420462ca67aa76d2759fc22>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976340
