name: HumanEval_137_compare_one
language: rb
prompt: "# Create a function that takes integers, floats, or strings representing\n\
  # real numbers, and returns the larger variable in its given variable type.\n# Return\
  \ nil if the values are equal.\n# Note: If a real number is represented as a string,\
  \ the floating point might be . or ,\n# >>> compare_one.call(1, 2.5)\n# 2.5\n# >>>\
  \ compare_one.call(1, \"2,3\")\n# \"2,3\"\n# >>> compare_one.call(\"5,1\", \"6\"\
  )\n# \"6\"\n# >>> compare_one.call(\"1\", 1)\n# nil\ndef compare_one(a, b)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_compare_one\n\
  \    candidate = method(:compare_one)\n    assert_equal(2, candidate.call(1, 2))\n\
  \    assert_equal(2.5, candidate.call(1, 2.5))\n    assert_equal(3, candidate.call(2,\
  \ 3))\n    assert_equal(6, candidate.call(5, 6))\n    assert_equal(\"2,3\", candidate.call(1,\
  \ \"2,3\"))\n    assert_equal(\"6\", candidate.call(\"5,1\", \"6\"))\n    assert_equal(\"\
  2\", candidate.call(\"1\", \"2\"))\n    assert_equal(nil, candidate.call(\"1\",\
  \ 1))\n  end\nend\n"
completions: ["  case a\n  when Numeric\n    case b\n    when Numeric\n      a.to_f\
    \ > b.to_f ? a : b\n    else\n      a\n    else\n      b\n    else\n      \"#{a}\
    \ is #{b}\"\n    else\n      \"#{b} is #{a}\"\n    else\n      \"#{a} is #{b}\"\
    \n  when String\n    case b\n    when Numeric\n      compare_one(a.to_f, b)\n\
    \    else\n      if a.to_s.include?(b.to_s)\n        a\n      else\n        b\n\
    \      end\n    else\n      \"#{a} is #{b}\"\n    else\n      \"#{b} is #{a}\"\
    \n    else\n      \"#{a} is #{b}\"\n  else\n    nil\n  end\nend", "  case a\n\
    \  when Numeric then compare_numeric(a, b)\n  when Float then compare_float(a,\
    \ b)\n  when String then compare_strings(a, b)\n  when NilClass then return nil\n\
    \  else return nil\n  end\nend", "  case a\n    when Numeric\n      b.to_f\n \
    \   when String\n      a.split(\",\").map {|x| x.to_f}.max\n    when Float\n \
    \     a.to_f <=> b.to_f\n    else\n      a <=> b\n  end\nend", "  if a == b\n\
    \    return a\n  elsif a.to_i == b.to_i\n    return a\n  elsif a.to_f.round(7)\
    \ == b.to_f.round(7)\n    return a\n  else\n    return nil\n  end\nend", "  return\
    \ nil if a == b\n  \n  return a if (a * 1 != b * 1) or (a != nil and a * 0 ==\
    \ b * 0)", "  if a.is_a?(String) || b.is_a?(String)\n    return nil if a == b\n\
    \    return nil if a.length == b.length\n    \n  elsif a.is_a?(Numeric) && b.is_a?(Numeric)\n\
    \    to_a = a.to_f || a.to_i\n    to_b = b.to_f || b.to_i\n    \n    if a.is_a?(Numeric)\n\
    \      return to_b if to_a < to_b\n      return to_a if to_a > to_b\n      return\
    \ to_a if to_a == to_b\n      return to_b if to_b < to_a\n      return to_b if\
    \ to_b > to_a\n    end\n    \n    if b.is_a?(Numeric)\n      return to_a if to_a\
    \ < to_b\n      return to_b if to_a > to_b\n      return to_a if to_a == to_b\n\
    \      return to_b if to_b < to_a\n      return to_b if to_b > to_a\n    end\n\
    \    \n    if a.is_a?(Numeric)\n      to_a = a.to_f || a.to_i\n      to_b = b.to_f\
    \ || b.to_i\n      return to_a if to_b < to_a\n      return to_b if to_b > to_a\n\
    \      return to_a if to_a == to_b\n      return to_b if to_b < to_a\n      return\
    \ to_b if to_b > to_a\n    end\n    \n    if b.is_a?(Numeric)\n      to_a = a.to_f\
    \ || a.to_i\n      to_b = b.to_f || b.to_i\n      return to_a if to_a < to_b\n\
    \      return to_b if to_a > to_b\n      return to_a if to_a == to_b\n      return\
    \ to_b if to_b < to_a\n      return to_b if to_b > to_a\n    end\n    \n  elsif\
    \ a.is_a?(Integer) && b.is_a?(Integer)\n    return a > b ? 1 : a < b ? -1 : 0\n\
    \  elsif a.is_a?(Float) && b.is_a?(Float)\n    return a.to_f > b.to_f ? 1 : a.to_f\
    \ < b.to_f ? -1 : 0\n  else\n    return nil\n  end\nend", "  if a == b\n    return\
    \ a\n  elsif a.nil? || b.nil?\n    return nil\n  elsif a.is_a?(Integer) && b.is_a?(Integer)\n\
    \    if a > b\n      return a\n    end\n    elsif a < b\n      return b\n    end\n\
    \  elsif a.is_a?(Float) && b.is_a?(Float)\n    a, b = a.to_f, b.to_f\n    if a\
    \ > b\n      return a\n    end\n    elsif a < b\n      return b\n    end\n  elsif\
    \ a.is_a?(String) && b.is_a?(String)\n    a, b = a.gsub(/[\\.,]/, ''), b.gsub(/[\\\
    .,]/, '')\n    if a > b\n      return a\n    end\n    elsif a < b\n      return\
    \ b\n    end\n  else\n    return nil\n  end\nend\n</code>\n<|/ a |>\n<| c |>\n\
    This is actually a great solution for my problem, thank you!\n<|/ c |>\n<| a tags=ruby,comparison,ruby-on-rails\
    \ dscore=0 |>\nI'd just do it with a string comparison if you're only expecting\
    \ integers.  If the numbers are floats then just parse them and compare them directly.\n\
    <code>", "  if a.is_a?(Numeric) && b.is_a?(Numeric)\n    if a.eql? b\n      return\
    \ nil\n    else\n      return a > b ? a : b\n    end\n  elsif a.is_a?(String)\
    \ && b.is_a?(String)\n    if a.downcase == b.downcase\n      return nil\n    else\n\
    \      return a.downcase > b.downcase ? a.downcase : b.downcase\n    end\n  else\n\
    \    return nil\n  end\nend", "  if a == b\n    return a\n  elsif a.kind_of? String\n\
    \    if b.kind_of? String\n      if a == \"NaN\" || b == \"NaN\" || a == \".\"\
    \ || b == \".\"\n        return nil\n      end\n    end\n  end", "  if a == b\n\
    \    return nil\n  elsif !a.kind_of?(Numeric) &&\n         !b.kind_of?(Numeric)\n\
    \    return nil\n  end\n  a = a.to_f\n  b = b.to_f\n  return a.abs > b.abs ?\n\
    \    a.to_i :\n    b.to_i\nend", "  if a.kind_of? Numeric\n    if b.kind_of? Numeric\n\
    \      return a > b ? a : b\n    elsif b.kind_of? String\n      return b.to_f\
    \ > a.to_f ? b.to_f : a.to_f\n    else\n      return a.to_f > b.to_f ? a.to_f\
    \ : b.to_f\n    end\n  else\n    if b.kind_of? Numeric\n      return a.to_f >\
    \ b.to_f ? a.to_f : b.to_f\n    elsif b.kind_of? String\n      return b.to_f >\
    \ a.to_f ? b.to_f : a.to_f\n    else\n      return a.to_f > b.to_f ? a.to_f :\
    \ b.to_f\n    end\n  end\nend", "  if a.is_a? Fixnum && b.is_a? Fixnum\n    if\
    \ a == b\n      return a\n    else\n      return nil\n    end\n  elsif a.is_a?\
    \ BigDecimal && b.is_a? BigDecimal\n    if a.to_s == b.to_s\n      return a.to_s\n\
    \    else\n      return nil\n    end\n  elsif a.is_a? BigInteger && b.is_a? BigInteger\n\
    \    if a.to_i == b.to_i\n      return a.to_s\n    else\n      return nil\n  \
    \  end\n  elsif a.is_a? String && b.is_a? String\n    if a == b\n      return\
    \ a\n    else\n      return nil\n    end\n  elsif a.is_a? Float && b.is_a? Float\n\
    \    if a == b\n      return a\n    else\n      return nil\n    end\n  else\n\
    \    nil\n  end\nend", "  case a\n    when Numeric\n      if b <= a\n        a\n\
    \      else\n        b\n      end\n    when Float\n      if a.to_f <= b.to_f\n\
    \        a\n      else\n        b\n      end\n    when String\n      if a.to_f\
    \ <= b.to_f\n        a\n      else\n        b\n      end\n  end\nend", "  return\
    \ nil unless a.class == b.class\n  return nil unless a.class == String or a.class\
    \ == Fixnum or a.class == Bignum\n  a.to_f > b.to_f ? a : b\nend", "  if a ==\
    \ b\n    return nil\n  elsif is_number(a)\n    if is_number(b)\n      return a.to_f\
    \ <=> b.to_f\n    elsif a.is_a?(Float) || b.is_a?(Float)\n      return a.to_s\
    \ <=> b.to_s\n    end\n  elsif a.is_a?(String) || b.is_a?(String)\n    if a.empty?\
    \ && b.empty?\n      return nil\n    elsif a.empty? || b.empty?\n      return\
    \ a\n    elsif a == b\n      return nil\n    end\n  end", "  if a.to_i == b.to_i\n\
    \    b\n  elsif a.to_s == b.to_s\n    b\n  elsif a.to_f == b.to_f\n    b\n  else\n\
    \    nil\n  end\nend", "    if a.kind_of?(String) || b.kind_of?(String)\n    \
    \    return a.to_i == b.to_i\n    else\n        return a.to_f > b.to_f ? a : b\n\
    \    end\nend\n</cell>\n<cell>\ncompare_one.call(1, 2)\n</cell>\n<cell>\ncompare_one.call(1,\
    \ \"2,3\")\n</cell>\n<cell>\ncompare_one.call(\"5,1\", \"6\")\n</cell>\n<cell>\n\
    compare_one.call(\"1\", 1)\n</cell>\n<text>\nLet's do some more work with hashes.",
  "  case a\n  when Numeric, Complex, Float, Rational\n    case b\n    when Numeric,\
    \ Complex, Float, Rational\n      return a > b ? a : b\n    when Numeric\n   \
    \   return nil\n    when Complex, Float, Rational\n      return a.__cmp__(b) >\
    \ 0 ? a : b\n    else\n      return nil\n    end\n  when String\n    case b\n\
    \    when Numeric, Complex, Float, Rational\n      return nil\n    when Numeric\n\
    \      return a > b ? a : b\n    when Complex, Float, Rational\n      return a.__cmp__(b)\
    \ > 0 ? a : b\n    else\n      return nil\n    end\n  else\n    if a.kind_of?(Array)\
    \ && a.size > 0\n      return compare_one(b.to_a, a.to_a)\n    end\n    return\
    \ nil\n  end\nend", "  case a\n  when Integer\n    case b\n    when Integer\n\
    \      b > a\n    when Float\n      b > a\n    else\n      nil\n    end\n  when\
    \ Float\n    case b\n    when Integer\n      b > a\n    when Float\n      b >\
    \ a\n    else\n      nil\n    end\n  when String\n    case b\n    when Integer\n\
    \      b > a\n    when Float\n      b > a\n    else\n      nil\n    end\n  else\n\
    \    nil\n  end\nend", "  if a.kind_of? Numeric\n    if b.kind_of? Numeric\n \
    \     return a > b ? a : b\n    elsif b.kind_of? String\n      return a > b ?\
    \ 1 : -1\n    elsif a.kind_of? String\n      return a < b ? 1 : -1\n    end\n\
    \  elsif a.kind_of? String\n    if b.kind_of? Numeric\n      return a.to_i > b.to_i\
    \ ? a.to_i : b.to_i\n    elsif b.kind_of? String\n      return a.to_i > b.to_i\
    \ ? 1 : -1\n    elsif b.kind_of? String\n      return a.to_i < b.to_i ? 1 : -1\n\
    \    end\n  end\nend", "  case a\n    when Numeric\n      a.to_f <=> b.to_f\n\
    \    when String\n      a.to_f <=> b.to_f\n    when Float\n      a.to_f <=> b.to_f\n\
    \    when nil\n      nil\n    else\n      nil\n  end\nend", "  case a\n  when\
    \ Numeric\n    case b\n    when Numeric\n      a > b ? b : a\n    else\n     \
    \ to_float(a) > to_float(b) ? to_float(b) : to_float(a)\n    end\n  when String\n\
    \    case b\n    when String\n      a.to_i > b.to_i ? b.to_i : a.to_i\n    else\n\
    \      to_float(a) > to_float(b) ? to_float(b) : to_float(a)\n    end\n  else\n\
    \    to_float(a) > to_float(b) ? to_float(b) : to_float(a)\n  end\nend", "  a_to_s\
    \ = a\n  b_to_s = b\n  return nil if a_to_s == b_to_s\n  a_to_f = a\n  b_to_f\
    \ = b\n  a_to_f.is_a?(Fixnum) ? a_to_f : a_to_s\n  b_to_f.is_a?(Fixnum) ? b_to_f\
    \ : b_to_s\nend", "  if a.to_i && a.to_i < b.to_i || b.to_i && a.to_i > b.to_i\n\
    \    return nil\n  elsif a.to_i == b.to_i && a.to_s.include?(\",\") && !b.to_s.include?(\"\
    ,\")\n    return nil\n  else\n    return b\n  end\nend", "  case a\n  when String\n\
    \    if a == \".\"\n      a = nil\n    else\n      a = b.to_f\n    end\n  when\
    \ Float\n    if a == \".\"\n      a = nil\n    else\n      a = b.to_f\n    end\n\
    \  when Integer\n    if a == \".\"\n      a = nil\n    else\n      a = b.to_i\n\
    \    end\n  else\n    a = nil\n  end\n  case b\n  when String\n    if b == \"\
    .\"\n      b = nil\n    else\n      b = a.to_f\n    end\n  when Float\n    if\
    \ b == \".\"\n      b = nil\n    else\n      b = a.to_f\n    end\n  when Integer\n\
    \    if b == \".\"\n      b = nil\n    else\n      b = a.to_i\n    end\n  else\n\
    \    b = nil\n  end\n  a > b ? a : b\nend", "  if a.kind_of?(Float) || b.kind_of?(Float)\n\
    \    if a.kind_of?(Float)\n      a = a.to_f\n    end\n    if b.kind_of?(Float)\n\
    \      b = b.to_f\n    end\n    if a == b\n      nil\n    elsif a < b\n      a\n\
    \    else\n      b\n    end\n  elsif a.kind_of?(String) || b.kind_of?(String)\n\
    \    if a.kind_of?(String)\n      a = a.replace \".\", \",\"\n    end\n    if\
    \ b.kind_of?(String)\n      b = b.replace \".\", \",\"\n    end\n    if a == b\n\
    \      nil\n    elsif a < b\n      a\n    else\n      b\n    end\n  else\n   \
    \ if a == b\n      nil\n    elsif a < b\n      a\n    else\n      b\n    end\n\
    \  end\nend", "  if a.class == Float\n    a.to_i\n  else\n    a.to_s\n  end\n\
    end", "  if a.kind_of? String and b.kind_of? String\n    if a != b\n      a.to_f\n\
    \    end\n  elsif a.kind_of? Float and b.kind_of? Float\n    if a > b\n      a\n\
    \    end\n  elsif a.kind_of? Integer and b.kind_of? Integer\n    if a > b\n  \
    \    a\n    end\n  else\n    nil\n  end\nend", "  if a.kind_of?(Numeric) && b.kind_of?(Numeric)\n\
    \    case a\n      when Numeric\n        a == b\n      when String\n        a.to_i\
    \ == b.to_i\n      when Float\n        a == b\n      when Fixnum\n        a ==\
    \ b\n      when Bignum\n        a == b\n    end\n  elsif a.kind_of?(String) &&\
    \ b.kind_of?(String)\n    case a\n      when Numeric\n        a.to_i == b.to_i\n\
    \      when String\n        a.to_i == b.to_i\n      when Float\n        a.to_i\
    \ == b.to_i\n      when Fixnum\n        a.to_i == b.to_i\n      when Bignum\n\
    \        a.to_i == b.to_i\n    end\n  else\n    a.kind_of?(Fixnum) ? a : nil\n\
    \  end\nend", "  case a\n  when Numeric, Float, String, Symbol\n    if a == b\n\
    \      nil\n    elsif a.to_s == b.to_s\n      nil\n    elsif a.to_f == b.to_f\n\
    \      nil\n    else\n      a\n    end\n  when Numeric, Float\n    if a.to_f ==\
    \ b.to_f\n      nil\n    else\n      a\n    end\n  else\n    a\n  end\nend", " \
    \ case a\n  when Numeric\n    case b\n    when Numeric\n      if a > b\n     \
    \   a\n      elsif a < b\n        b\n      else\n        nil\n      end\n    when\
    \ Integer\n      if a > b\n        a\n      elsif a < b\n        b\n      else\n\
    \        nil\n      end\n    when Float\n      if a > b\n        a\n      elsif\
    \ a < b\n        b\n      else\n        nil\n      end\n    else\n      # If all\
    \ else fails\n      nil\n    end\n  else\n    # If the arguments are strings,\
    \ convert to numbers.\n    a = a.to_f\n    b = b.to_f", "  case a\n    when Numeric\n\
    \      a\n    when String\n      b = b.to_f\n      a = a.to_f\n      if a < b\n\
    \        compare_one(b, a)\n      elsif a > b\n        compare_one(a, b)\n   \
    \   else\n        a\n      end\n    when Numeric\n      b\n    when String\n \
    \     b = b.to_f\n      a = a.to_f\n      if a < b\n        compare_one(a, b)\n\
    \      elsif a > b\n        compare_one(b, a)\n      else\n        nil\n     \
    \ end\n    else\n      nil\n  end\nend", "  case a\n    when Numeric\n      if\
    \ b.kind_of? Numeric\n        a.to_f <=> b.to_f\n      else\n        a = a.to_f\n\
    \        b = b.to_f\n        a.kind_of? Float ? a <=> b : a.to_s <=> b.to_s\n\
    \      end\n    when Float\n      if b.kind_of? Numeric\n        b.to_f <=> a.to_f\n\
    \      else\n        b = b.to_f\n        a = a.to_f\n        b.kind_of? Float\
    \ ? b <=> a : b.to_s <=> a.to_s\n      end\n    when String\n      if b.kind_of?\
    \ Numeric\n        b.to_f <=> a.to_f\n      else\n        b = b.to_f\n       \
    \ a = a.to_f\n        b.kind_of? Float ? b <=> a : b.to_s <=> a.to_s\n      end\n\
    \  else\n    a = a.to_s\n    b = b.to_s\n    a.kind_of? Float ? a <=> b : a.to_s\
    \ <=> b.to_s\n  end\nend", "  if a.is_a? String\n    b = b.split(\",\")\n    return\
    \ b.max {|c| c.to_f }\n  elsif b.is_a? String\n    a = a.split(\",\")\n    return\
    \ a.max {|c| c.to_f }\n  elsif a.is_a? Fixnum\n    b = b.to_f\n    return b if\
    \ b && a.eql?(b)\n  end\n  return nil\nend", "  # The variable types we have\n\
    \  a_type = case a\n  when Integer\n    Integer\n  when Float\n    Float\n  when\
    \ String\n    Float\n  else\n    raise \"Could not compare #{a.class} and #{b.class}\"\
    \n  end\n  b_type = case b\n  when Integer\n    Integer\n  when Float\n    Float\n\
    \  when String\n    Float\n  else\n    raise \"Could not compare #{a.class} and\
    \ #{b.class}\"\n  end\n  # Compare them\n  if a_type == b_type\n    return a\n\
    \  else\n    # Convert the real number to an integer.\n    if a_type == Float\n\
    \      return \"#{a}\".to_f\n    elsif b_type == Float\n      return \"#{b}\"\
    .to_f\n    elsif a_type == String\n      return \"#{a}\".to_f\n    elsif b_type\
    \ == String\n      return \"#{b}\".to_f\n    elsif a_type == Integer\n      return\
    \ \"#{a}\".to_i\n    elsif b_type == Integer\n      return \"#{b}\".to_i\n   \
    \ else\n      return nil\n    end\n  end\nend", "  if a == b\n    return nil\n\
    \  end", "  if a.is_a?(Fixnum) && a.to_i == b\n    b.is_a?(Fixnum) && b.to_i ==\
    \ a\n  elsif a.is_a?(String) && a.match?(/^\\d+(\\.\\d*)?$/)\n    a.to_i <=> b\n\
    \  elsif a.is_a?(Float)\n    a.to_f <=> b\n  else\n    a.to_s <=> b\n  end\nend",
  "  if a.is_a?(String) || b.is_a?(String)\n    if a.to_i == b.to_i\n      nil\n \
    \   elsif a.to_f == b.to_f\n      nil\n    elsif a.to_s == b.to_s\n      nil\n\
    \    elsif a.to_i != b.to_i\n      a\n    else\n      b\n    end\n  elsif a.to_i\
    \ == b.to_i\n    a\n  elsif a.to_f == b.to_f\n    a\n  elsif a.to_s == b.to_s\n\
    \    a\n  elsif a.to_i != b.to_i\n    b\n  else\n    b\n  end\nend", "  case a\n\
    \  when Fixnum\n    case b\n    when Fixnum\n      a == b\n    else\n      a.to_f\
    \ > b.to_f\n    end\n  when Float\n    case b\n    when Fixnum\n      a == b\n\
    \    else\n      a.to_f > b.to_f\n    end\n  when String\n    case b\n    when\
    \ Fixnum\n      a == b\n    else\n      a.to_f > b.to_f\n    end\n  when nil\n\
    \    case b\n    when Fixnum\n      a == b\n    else\n      true\n    end\n  else\n\
    \    case a\n    when Fixnum\n      compare_one(b, a)\n    else\n      false\n\
    \    end\n  end\nend", "  if a.is_a?(Numeric) && (a.is_a?(Float) || a.is_a?(Integer))\n\
    \    return a > b\n  elsif a.is_a?(String) && b.is_a?(String)\n    return a.to_i\
    \ > b.to_i\n  elsif a.is_a?(String) && b.is_a?(Numeric)\n    return a.to_i > b.to_i\n\
    \  elsif a.is_a?(Numeric) && b.is_a?(String)\n    return a.to_i > b.to_i\n  elsif\
    \ a.is_a?(Numeric) && (a.is_a?(Integer) || a.is_a?(Float))\n    return a.to_i\
    \ > b\n  end\n  return nil\nend", "  if a == b\n    return nil\n  elsif a.is_a?(Numeric)\n\
    \    if b.is_a?(Numeric)\n      if a.is_a?(Float)\n        return b\n      else\n\
    \        return a.to_f\n      end\n    elsif b.is_a?(Float)\n      return a\n\
    \    else\n      if a.is_a?(Float)\n        return b\n      else\n        return\
    \ a.to_f\n      end\n    end\n  elsif a.is_a?(Float)\n    if b.is_a?(Numeric)\n\
    \      if b.is_a?(Float)\n        return a\n      else\n        return b.to_f\n\
    \      end\n    elsif b.is_a?(Float)\n      return a\n    else\n      if b.is_a?(Float)\n\
    \        return b\n      else\n        return b.to_f\n      end\n    end\n  elsif\
    \ a.is_a?(Float)\n    if b.is_a?(Numeric)\n      if b.is_a?(Float)\n        return\
    \ a\n      else\n        return b.to_f\n      end\n    elsif b.is_a?(Float)\n\
    \      return a\n    else\n      if b.is_a?(Float)\n        return b\n      else\n\
    \        return b.to_f\n      end\n    end\n  else\n    if b.is_a?(Numeric)\n\
    \      if b.is_a?(Float)\n        return a\n      else\n        return b.to_f\n\
    \      end\n    elsif b.is_a?(Float)\n      return a\n    else\n      if b.is_a?(Float)\n\
    \        return b\n      else\n        return b.to_f\n      end\n    end\n  end\n\
    end\n</code>\n<|/ a tags=sorting,ruby |>\n<| c |>\nthank you! Can you explain\
    \ how this works? Specifically the `a.is_a?(Numeric)` and `b.is_a?(Numeric)` comparisons\n\
    <|/ c |>\n<| c |>\n`Numeric` refers to any class that has a `to_f` method (e.g.\
    \ `Float`, `BigDecimal`, etc). Since you only care about the numeric values, `Numeric`\
    \ is the most reliable way to do it. The `a.is_a?(Numeric)` test ensures that\
    \ the values you are comparing are of a class that has a `to_f` method (e.g. `Float`,\
    \ `BigDecimal`, etc).\n<|/ c |>\n<| a tags=sorting,ruby |>\nIn Ruby, sort takes\
    \ a comparator function. The function must return the <=> ", "  case a\n  when\
    \ Numeric then compare_one(b, a)\n  when String then compare_one(b, (a <=> b).to_s)\n\
    \  when Array\n    compare_one b.first, a.first\n    compare_one(a.last, b.last)\n\
    \  when Hash then compare_one b.keys, a.keys\n  when nil then return nil\n  end",
  "  if a.is_a? String then a = a.to_f\n  elsif a.is_a? Float then a = a.to_f\n  elsif\
    \ a.is_a? Integer then a = a\n  end if a.is_a? String\n  if b.is_a? String then\
    \ b = b.to_f\n  elsif b.is_a? Float then b = b.to_f\n  elsif b.is_a? Integer then\
    \ b = b\n  end if b.is_a? String\n  if a == b then return a\n  if a.nil? or b.nil?\
    \ then return nil\n  elsif a.nil? and b.nil? then return b\n  elsif a.class !=\
    \ b.class then return nil\n  end if a.nil? or b.nil?\n  if a.class == String then\
    \ return compare_one(a.to_f, b)\n  elsif b.class == String then return compare_one(a,\
    \ b) \n  else return compare_one(a, b) \n  end if a.class == String or b.class\
    \ == String\n  a = (a == b ? a : nil)\n  a = (a.nil? ? nil : a)\n  if a.nil? then\
    \ return b\n  elsif b.nil? then return a\n  end if a.nil? or b.nil?\n  return\
    \ compare_one(a, b) unless a.class == String or b.class == String\n  if a < b\n\
    \  else return a \n  end\nend", "  if a.to_f == b.to_f\n    a\n  elsif a.to_s\
    \ == b.to_s\n    a\n  else\n    b\n  end\nend\n</code>\n<|/ a |>\n<| c |>\nI added\
    \ my own answer after reading this post. Thank you for the feedback.\n<|/ c |>\n\
    <| a |>\nThe question was \"why doesn't it work?\", the answer is \"because it's\
    \ not really a method\". Methods are defined using def and end keywords. If you\
    \ try to use them in other ways, they're not methods. The closest thing is a block,\
    \ which are surrounded with {...} brackets. \n<code>", "  if a.kind_of? String\
    \ and b.kind_of? String\n    a.to_f <=> b.to_f\n  else\n    b <=> a\n  end\nend",
  "  if a == b\n    return a\n  elsif a.to_i == b.to_i\n    return a.to_f\n  elsif\
    \ a.to_f == b.to_f\n    return a\n  else\n    return nil\n  end\nend", "  if a.nil?\
    \ and b.nil?\n    true\n  else\n    if a == b\n      true\n    elsif a.is_a?(String)\
    \ && b.is_a?(String)\n      compare_one_with_strings(a, b)\n    else\n      compare_one_with_floats(a,\
    \ b)\n    end\n  end\nend", "  if a.kind_of?(Numeric) && a.zero? && a.kind_of?(Numeric)\n\
    \    a.to_f\n  else\n    b\n  end\nend", "  return nil if a == b\n  case a\n \
    \ when Rational\n    case b\n    when Rational\n      a.r > b.r ? a : b\n    else\n\
    \      a\n    end\n  when Numeric\n    case b\n    when Numeric\n      a > b ?\
    \ a : b\n    else\n      a\n    end\n  else\n    a\n  end\nend", "  case a\n \
    \ when Integer\n    case b\n    when Integer\n      return a <=> b\n    when Float\n\
    \      return a <=> b\n    else\n      raise ArgumentError, \"Only Integers and\
    \ Floats are supported.\"\n    end\n  when Float\n    case b\n    when Integer\n\
    \      return a <=> b\n    when Float\n      return a <=> b\n    else\n      raise\
    \ ArgumentError, \"Only Integers and Floats are supported.\"\n    end\n  when\
    \ String\n    case b\n    when Integer\n      return a.to_i <=> b.to_i\n    when\
    \ Float\n      return a.to_f <=> b.to_f\n    else\n      raise ArgumentError,\
    \ \"Only Integers and Floats are supported.\"\n    end\n  when Fixnum\n    case\
    \ b\n    when Integer\n      return a <=> b\n    when Float\n      return a <=>\
    \ b\n    else\n      raise ArgumentError, \"Only Integers and Floats are supported.\"\
    \n    end\n  else\n    return nil\n  end\nend", "  case a\n  when Numeric\n  \
    \  if b == b\n      a\n    elsif b.to_i != b.to_i\n      b\n    else\n      a\n\
    \    end\n  when String\n    if b != b\n      b\n    else\n      a\n    end\n\
    \  when Numeric, String\n    if b == b\n      a\n    elsif b == b\n      b\n \
    \   elsif a.to_i != a.to_i\n      b\n    elsif b.to_i != b.to_i\n      a\n   \
    \ else\n      nil\n    end\n  else\n    a\n  end\nend", "  if a.kind_of?(Fixnum)\
    \ && a.kind_of?(Float) && a.to_f == b.to_f\n    a\n  elsif a.kind_of?(String)\
    \ && a.to_f == b.to_f\n    a\n  elsif b.kind_of?(Fixnum) && b.kind_of?(Float)\
    \ && b.to_f == a.to_f\n    b\n  elsif b.kind_of?(String) && a.to_f == b.to_f\n\
    \    b\n  else\n    nil\n  end\nend\n</code>\n<|/ a |>\n<| a |>\nThis seems to\
    \ work:\n<code>", "    if a.class == Float\n        if a == b\n            nil\n\
    \        else\n            a.to_f\n        end\n    elsif a.class == String\n\
    \        if a == b\n            nil\n        else\n            a\n        end\n\
    \    else\n        a\n    end\nend", "  case a\n    when Numeric\n      if b ==\
    \ 0.0\n        a\n      else\n        b\n      end\n    when String\n      b.to_f\n\
    \    else\n      a\n  end\nend\n</code>\n<|/ a |>\n<| a dscore=0 tags=ruby |>\n\
    One liner:\n<code>\n(1..5).reverse_each.inject(:<=>)", "  if a == b\n    return\
    \ nil\n  elsif a.is_a? Numeric\n    return a.>(b) ? a : b\n  elsif b.is_a? Numeric\n\
    \    return a.<(b) ? a : b\n  elsif a.is_a? String\n    return a.to_i <=> b.to_i\n\
    \  elsif b.is_a? String\n    return a.to_i <=> b.to_i\n  else\n    return nil\n\
    \  end\nend", "  case a\n  when Integer\n    case b\n    when Integer, Float\n\
    \      return b\n    else\n      return nil\n    end\n  when Float\n    case b\n\
    \    when Integer, Float\n      return b\n    else\n      return nil\n    end\n\
    \  when String\n    case b\n    when Integer, Float\n      return b\n    else\n\
    \      return nil\n    end\n  else\n    case b\n    when Integer, Float\n    \
    \  return b\n    else\n      return nil\n    end\n  end\nend", "  unless [a, b].all?\
    \ { |e| e.is_a?(Numeric) || e.is_a?(String) || e.is_a?(Fixnum) }\n    raise ArgumentError,\
    \ \"Non-numeric values are not comparable\"\n  end\n  return a > b ? 1 : b > a\
    \ ? -1 : 0\nend", "  return a if b == a || b == Float(b) || b == String(b) \n\
    \  return nil\nend", "  case a\n    when Float\n      return (b if b > a) \n \
    \   when Fixnum, String\n      return (b if b > a.to_i) \n    when NilClass\n\
    \      a\n    when Numeric\n      return (b if b > a)\n    else\n      nil\n \
    \ end\nend", "  if a.class == b.class\n    if a.class == Fixnum\n      compare_one(a.to_f,\
    \ b.to_f)\n    else\n      compare_one(a.to_s, b.to_s)\n    end\n  else\n    nil\n\
    \  end\nend", "  case a\n  when Numeric, Float, NilClass then return b\n  when\
    \ String, Fixnum, Bignum, BigDecimal then return a\n  else return nil\n  end\n\
    end", "  case a\n  when Numeric\n    a.to_f <=> b.to_f\n  when Float, Fixnum,\
    \ Bignum\n    a.to_f <=> b.to_f\n  when String\n    a.to_s <=> b.to_s\n  end\n\
    end", "  return nil unless a.is_a?(Numeric) and b.is_a?(Numeric)\n  if a.class\
    \ == b.class && a == b\n    return a\n  elsif a.class == Float\n    return b if\
    \ a.zero? || b.zero?\n    a.abs\n  elsif b.class == Float\n    return a if b.zero?\
    \ || a.zero?\n    b.abs\n  elsif a.class == String\n    return b if a == b\n \
    \   a.split(',').map { |e| e.to_i }.max\n  elsif b.class == String\n    return\
    \ a if a == b\n    a.split(',').map { |e| e.to_i }.min\n  else\n    return nil\n\
    \  end\nend", "  case a\n    when Numeric\n      if b == b\n        a\n      else\n\
    \        b\n      end\n    when Numeric\n      if b == b\n        b\n      else\n\
    \        a\n      end\n    when Numeric\n      b\n    when String\n      if a.to_i\
    \ == b.to_i\n        a\n      else\n        b\n      end\n    when Numeric\n \
    \     if a.to_i == b.to_i\n        a\n      else\n        b\n      end\n    when\
    \ String\n      if a.to_f == b.to_f\n        a\n      else\n        b\n      end\n\
    \    when String\n      b\n    else\n      if a.to_i == b.to_i\n        a\n  \
    \    else\n        b\n      end\n  end\nend", "  if a.class == b.class then\n\
    \    if a == \".\" then\n      return b\n    elsif b == \",\" then\n      return\
    \ a\n    end\n  end\n  return nil\nend", "  case\n  when a.nil? and b.nil?\n \
    \   nil\n  when a.nil? or b.nil?\n    \"nil\"\n  when a.is_a?(String)\n    case\
    \ b\n    when String\n      a\n    when Float\n      case a\n      when Float\n\
    \        b\n      when Fixnum\n        b.to_s\n      when Bignum\n        b.to_s\n\
    \      when Rational\n        # Ruby 1.9 has a bug in Rational which leads to\
    \ Float::INFINITY\n        # being returned instead of Rational(1,0)\n       \
    \ b.to_s\n      else\n        b.to_s\n      end\n    when Float\n      a > b ?\
    \ a : b\n    when Fixnum\n      a > b ? a : b\n    when Bignum\n      a > b ?\
    \ a : b\n    when Rational\n      # Ruby 1.9 has a bug in Rational which leads\
    \ to Float::INFINITY\n      # being returned instead of Rational(1,0)\n      a.to_s\
    \ > b.to_s ? a.to_s : b.to_s\n    end\n  when a.is_a?(Float)\n    case b\n   \
    \ when String\n      a\n    when Float\n      b\n    when Fixnum\n      b.to_f\n\
    \    when Bignum\n      b.to_f\n    when Rational\n      # Ruby 1.9 has a bug\
    \ in Rational which leads to Float::INFINITY\n      # being returned instead of\
    \ Rational(1,0)\n      b.to_f\n    end\n  when a.is_a?(Integer)\n    case b\n\
    \    when String\n      a\n    when Float\n      b\n    when Fixnum\n      b.to_i\n\
    \    when Bignum\n      b.to_i\n    when Rational\n      # Ruby 1.9 has a bug\
    \ in Rational which leads to Float::INFINITY\n      # being returned instead of\
    \ Rational(1,0)\n      b.to_i\n    end\n  else\n    case b\n    when String\n\
    \      a\n    when Float\n      b\n    when Fixnum\n      b.to_s\n    when Bignum\n\
    \      b.to_s\n    when Rational\n      # Ruby 1.9 has a bug in Rational which\
    \ leads to Float::INFINITY\n      # being returned instead of Rational(1,0)\n\
    \      b.to_s\n    end\n  end\nend", "  return nil unless a.class == b.class\n\
    \  return nil if a.is_a?(String) or b.is_a?(String) or a.is_a?(Symbol) or b.is_a?(Symbol)\
    \ or a.class == Float\n  if a.is_a?(Integer) and b.is_a?(Integer)\n    return\
    \ a.to_i > b.to_i\n  elsif a.is_a?(Integer) and b.is_a?(Float)\n    return a.to_i\
    \ > b.to_f\n  elsif a.is_a?(Float) and b.is_a?(Integer)\n    return a.to_f > b.to_i\n\
    \  elsif a.is_a?(Float) and b.is_a?(Float)\n    return a.to_f > b.to_f\n  end\n\
    \  return nil\nend", "  case a\n    when Numeric then b > a\n    when Numeric,\
    \ String then b.to_i > a.to_i\n    when Numeric, NilClass then b.to_i > a.to_i\n\
    \    when String, NilClass then b.to_i > a.to_i\n    when NilClass then b.to_i\
    \ > a.to_i\n    else return nil\n  end\nend", "  case a\n  when Float, Fixnum,\
    \ Integer\n    if a.kind_of? Float\n      a > b ? a : b\n    else\n      a > b\
    \ ? a : b\n    end\n  else\n    a > b ? a : b\n  end\nend", "  case a\n  when\
    \ Numeric\n    case b\n    when Numeric\n      a > b ? a : b\n    else\n     \
    \ a.to_f > b.to_f ? a : b\n    end\n  when Float\n    case b\n    when Numeric\n\
    \      a > b ? a : b\n    else\n      a > b.to_f ? a : b\n    end\n  when String\n\
    \    case b\n    when Numeric\n      a > b ? a : b\n    else\n      a.to_f > b.to_f\
    \ ? a.to_s : b.to_s\n    end\n  else\n    nil\n  end\nend", "  if a == b\n   \
    \ return nil\n  elsif a.kind_of?(Numeric) && b.kind_of?(Numeric)\n    if a.to_f\
    \ == b.to_f\n      return a\n    elsif a.to_f > b.to_f\n      return b\n    else\n\
    \      return a\n    end\n  elsif a.kind_of?(String) && b.kind_of?(String)\n \
    \   if a.to_f == b.to_f\n      return a\n    elsif a.to_f > b.to_f\n      return\
    \ b\n    else\n      return a\n    end\n  elsif a.kind_of?(Float) && b.kind_of?(Float)\n\
    \    if a.to_f == b.to_f\n      return a\n    elsif a.to_f > b.to_f\n      return\
    \ b\n    else\n      return a\n    end\n  else\n    return nil\n  end\nend", " \
    \ if a.kind_of?(Float) or a.kind_of?(BigDecimal)\n    b = b.to_f\n  end\n  if\
    \ b.kind_of?(Float) or b.kind_of?(BigDecimal)\n    a = a.to_f\n  end\n  return\
    \ a > b ? a : b\nend", "  if a.is_a?(Float)\n    if b.is_a?(Float)\n      comp\
    \ = a.compare(b)\n    elsif b.is_a?(Integer)\n      comp = (a.to_f / b.to_f).ceil\n\
    \    else\n      comp = (b.to_f / a.to_f).ceil\n    end\n  else\n    comp = (a.to_f\
    \ / b.to_f).ceil\n  end\n  return comp\nend\n</code>\n<|/ a |>\n<| c |>\nGood\
    \ answer, but this doesn't work for integers below 1, and it fails for decimals.\
    \ You should use `a.is_a?(Integer)` and `b.is_a?(Integer)` and also `b.is_a?(Float)`.\n\
    <|/ c |>\n<| a dscore=0 |>\nThis code works for all kinds of numbers.\n<code>",
  "  return b if (a < b)\n  a if (a > b)\n  return nil\nend\n</code>\n<|/ a dscore=0\
    \ tags=ruby,ruby-on-rails |>\n<| a dscore=0 tags=ruby,ruby-on-rails |>\nIf you\
    \ need to test whether a string is a valid integer or float, you can use the builtin\
    \ Integer class or Float.\n<code>\nif Float(arg1) && Float(arg2).is_a? Integer\n\
    \  puts arg1 #=> \"0.5\"\n  puts arg2 #=> \"0.5\"\nelse\n  puts \"The argument\
    \ is not an integer\"\nend\n</code>\n<|/ a |>\n<| c |>\nThis does not answer the\
    \ question asked. It merely checks whether the argument is *numeric* but does\
    \ not check whether the string is *representable* in its variable type.\n<|/ c\
    \ |>\n<| c |>\nThank you for pointing this out. I updated my answer to include\
    \ the other aspect of the question.\n<|/ c |>\n<| a tags=ruby,ruby-on-rails |>\n\
    The answers here already seem to cover all your needs. I assume you do not need\
    \ to also handle decimal numbers. If you need to also handle decimal numbers,\
    \ please see the following answer.\n<code>", "  if a.kind_of? Integer && a.to_s\
    \ == b.to_s\n    return a\n  elsif a.kind_of? Float && a.to_f == b.to_f\n    return\
    \ a\n  elsif a.kind_of? String && a.to_s == b.to_s\n    return a\n  else\n   \
    \ return nil\n  end\nend\n</cell>\n<text>\nAnd here are the functions we created\
    \ above for comparing two integers and two floats.", "  if a.kind_of?(Float)\n\
    \    if b.kind_of?(Float)\n      return (a > b) ? a : b\n    elsif b.kind_of?(String)\n\
    \      return (a > b.to_f) ? a : b.to_f\n    elsif b.kind_of?(Fixnum)\n      return\
    \ (a > b) ? a : b\n    end\n  elsif b.kind_of?(Float)\n    if a.kind_of?(Float)\n\
    \      return (a > b) ? a : b\n    elsif a.kind_of?(String)\n      return (a >\
    \ b.to_f) ? a : b.to_f\n    elsif a.kind_of?(Fixnum)\n      return (a > b) ? a\
    \ : b\n    end\n  elsif a.kind_of?(String)\n    if b.kind_of?(String)\n      return\
    \ (a > b) ? a : b\n    elsif b.kind_of?(Fixnum)\n      return (a > b) ? a : b\n\
    \    end\n  elsif b.kind_of?(String)\n    if a.kind_of?(String)\n      return\
    \ (a > b) ? a : b\n    elsif b.kind_of?(Fixnum)\n      return (a > b) ? a : b\n\
    \    end\n  end\n  return nil\nend", "  return nil if a == b\n  if a.is_a?(Integer)\
    \ && b.is_a?(Integer)\n    a>b ? a : b\n  elsif a.is_a?(Float) && b.is_a?(Float)\n\
    \    a>b ? a : b\n  elsif a.is_a?(String) && b.is_a?(String)\n    a>b ? a : b\n\
    \  else\n    nil\n  end\nend", "  if a == b\n    return nil\n  elsif a.is_a?(Float)\n\
    \    if a.to_s == b.to_s\n      return nil\n    end\n  elsif b.is_a?(Float)\n\
    \    if a.to_s == b.to_s\n      return nil\n    end\n  end", "  if a.to_f == b.to_f\n\
    \    return a.to_f\n  elsif a.is_a?(Float) && b.is_a?(Float)\n    return a.to_f\
    \ > b.to_f ? 1 : a.to_f < b.to_f ? -1 : 0\n  elsif a.is_a?(String) && b.is_a?(String)\n\
    \    if a == \"#{b.gsub(',', '.')}\"\n      return 0\n    else\n      return a.to_f\
    \ < b.to_f ? 1 : a.to_f > b.to_f ? -1 : 0\n    end\n  elsif a.is_a?(Integer) &&\
    \ b.is_a?(Integer)\n    return a.to_i > b.to_i ? 1 : a.to_i < b.to_i ? -1 : 0\n\
    \  elsif a.is_a?(Float) && b.is_a?(String)\n    if a.to_f < b.to_f\n      return\
    \ -1\n    elsif a.to_f > b.to_f\n      return 1\n    end\n  else\n    return nil\n\
    \  end\nend", "  if a.nil? || b.nil?\n    true\n  elsif a.kind_of? String\n  \
    \  a = a.split(\",\").map { |v| v.to_i }\n    b = b.split(\",\").map { |v| v.to_i\
    \ }\n  elsif a.kind_of? Float\n    a = a.to_i\n    b = b.to_i\n  elsif a.kind_of?\
    \ Integer\n    a = a.to_i\n  end\n  a > b ? a : b\nend", "  if a.kind_of? String\n\
    \    if b.kind_of? String\n      a = a.split \", \"\n      b = b.split \", \"\n\
    \      a = a.map { |n| n.to_i }\n      b = b.map { |n| n.to_i }\n      result\
    \ = b.max\n      a.zip(b.zip).each { |n, m| result = result if n > m }\n     \
    \ result\n    else\n      a = [a.to_i].max\n      result = a\n    end\n  else\n\
    \    if b.kind_of? String\n      b = [b.to_i].max\n      result = b\n    else\n\
    \      a = [a.to_f].max\n      result = a\n    end\n  end\nend", "  case a\n \
    \ when Numeric, String\n    if b.kind_of? Numeric\n      return b.send(:<=>, a)\n\
    \    else\n      return nil if a == b\n      return nil if a.to_s.include?(\"\
    .\")\n      return nil if a.to_s.include?(\",\")\n    end\n  else\n    return\
    \ nil if a == b\n    return nil if a.kind_of? Numeric\n  end\n  return nil\nend",
  "  if a.is_a? String\n    return b unless a.match(/.*\\..*/) and b.is_a? String\n\
    \    a = a[0..a.index(\".\")-2]\n    b = b[0..b.index(\".\")-2]\n  end\n  if a.is_a?\
    \ Fixnum and b.is_a? Fixnum\n    if a > b\n      a\n    else\n      b\n    end\n\
    \  elsif a.is_a? String\n    b = b.to_f\n  else\n    a = a.to_f\n  end\n  if a\
    \ > b\n    a\n  else\n    b\n  end\nend", "  return b.send(a.class.to_s) >= a.send(b.class.to_s)\
    \ ? b : nil\nend", "  return nil if a == b\n  case a\n  when ::Float\n    if a.round(*b)\
    \ == 0\n      return b\n    end\n  when ::String\n    if a.include?('.')\n   \
    \   return b\n    end\n  when Integer\n    if b == a\n      return nil\n    end\n\
    \  when Symbol\n    return b if b == a\n  end\nend", "  return nil if a.nil? ||\
    \ b.nil?\n  return a > b ? a : b\nend", "  return nil if a == b\n  if a.kind_of?(Numeric)\
    \ && b.kind_of?(Numeric)\n    if a.is_a? Numeric\n      a = a.to_f\n    elsif\
    \ b.is_a? Numeric\n      b = b.to_f\n    end\n    if a == b\n      a\n    elsif\
    \ a > b\n      a\n    else\n      b\n    end\n  elsif a.kind_of?(String) && b.kind_of?(String)\n\
    \    if a == b\n      a\n    elsif a.include?(\",\")\n      b = b.gsub(\",\",\
    \ \".\") unless b.include?(\",\")\n      b = b.gsub(\"\\.\", \".\")\n      b =\
    \ b.gsub(\"e\", \"E\")\n      a = a.gsub(\",\", \".\") unless a.include?(\",\"\
    )\n      a = a.gsub(\"\\.\", \".\")\n      a = a.gsub(\"e\", \"E\")\n      if\
    \ a.to_f == b.to_f\n        a\n      else\n        b\n      end\n    elsif a.include?(\"\
    .\")\n      b = b.gsub(\",\", \".\") unless b.include?(\",\")\n      b = b.gsub(\"\
    \\.\", \".\")\n      b = b.gsub(\"e\", \"E\")\n      a = a.gsub(\",\", \".\")\
    \ unless a.include?(\",\")\n      a = a.gsub(\"\\.\", \".\")\n      a = a.gsub(\"\
    e\", \"E\")\n      if a.to_f == b.to_f\n        b\n      else\n        a\n   \
    \   end\n    elsif a.include?(\"-\")\n      b = b.gsub(\",\", \".\") unless b.include?(\"\
    ,\")\n      b = b.gsub(\"\\.\", \".\")\n      b = b.gsub(\"e\", \"E\")\n     \
    \ a = a.gsub(\",\", \".\") unless a.include?(\",\")\n      a = a.gsub(\"\\.\"\
    , \".\")\n      a = a.gsub(\"e\", \"E\")\n      if a.to_f == b.to_f\n        a\n\
    \      else\n        b\n      end\n    elsif a.include?(\"+\")\n      b = b.gsub(\"\
    ,\", \".\") unless b.include?(\",\")\n      b = b.gsub(\"\\.\", \".\")\n     \
    \ b = b.gsub(\"e\", \"E\")\n      a = a.gsub(\",\", \".\") unless a.include?(\"\
    ,\")\n      a = a.gsub(\"\\.\", \".\")\n      a = a.gsub(\"e\", \"E\")\n     \
    \ if a.to_", "  if a.to_i == b.to_i\n    a\n  else\n    b\n  end\nend", "  return\
    \ a > b ? a : b\nend", "  case a\n  when Numeric\n    return b if a.to_f < b.to_f\n\
    \    return a if a.to_f > b.to_f\n  when Float\n    return b if a.to_f < b.to_f\n\
    \    return a if a.to_f > b.to_f\n  else\n    return b if a.to_s < b.to_s\n  \
    \  return a if a.to_s > b.to_s\n  end\nend", "  case a\n  when Numeric\n    case(b)\n\
    \    when Numeric\n      a>b? a.ceil : a.floor\n    when String\n      begin\n\
    \        a = a.gsub(/[^\\d\\.\\-]/, '').to_f\n        b = b.gsub(/[^\\d\\.\\-]/,\
    \ '').to_f\n      rescue ArgumentError\n        return nil\n      end\n      if\
    \ a.nan?\n        return nil\n      end\n      if b.nan?\n        return nil\n\
    \      end\n      a>b? a.ceil : a.floor\n    when Fixnum\n      b\n    when String\n\
    \      begin\n        b = b.gsub(/[^\\d\\.\\-]/, '').to_f\n      rescue ArgumentError\n\
    \        return nil\n      end\n      if a.nan?\n        return nil\n      end\n\
    \      if b.nan?\n        return nil\n      end\n      a.to_f > b.to_f? a.ceil\
    \ : a.floor\n    when Fixnum\n      a\n    when Numeric\n      begin\n       \
    \ a = a.gsub(/[^\\d\\.\\-]/, '').to_f\n      rescue ArgumentError\n        return\
    \ nil\n      end\n      if a.nan?\n        return nil\n      end\n      if b.nan?\n\
    \        return nil\n      end\n      a>b? a.ceil : a.floor\n    else\n      return\
    \ nil\n  end\nend", "  return b.nil? if a.is_a? Fixnum && b.is_a? Fixnum\n  return\
    \ b.nil? if a.is_a? String && b.is_a? String\n  return a.nil? if a.is_a? String\
    \ && b.is_a? Fixnum\n  return b.nil? if a.is_a? Fixnum && b.is_a? String\n  return\
    \ b.nil? if a.is_a? Fixnum && b.is_a? Fixnum\n  return a if a.is_a? String\n \
    \ return b\nend", "  # The two values passed in can be nil so we need to check\
    \ for that.\n  return nil unless a.nil? || b.nil?", "  if a.to_i <=> b.to_i\n\
    \    a.to_i\n  elsif a.to_s ==  b.to_s\n    a.to_s\n  else\n    b\n  end\nend",
  "  case a\n  when Float, Fixnum, Fixnum::Float then return a.>(b) ? a : b\n  when\
    \ String, Symbol then return b.eql?(a) ? a : b\n  when Integer, Fixnum, String\
    \ then return b.to_i.>(a.to_i) ? a : b\n  when nil then return nil\n  end\nend",
  "  return a > b ? a : b\nend\n</cell>\n<code language=ruby-3>", "  return nil if\
    \ a.nil? || b.nil?\n  return a.to_i > b.to_i ? a : b unless a.is_a? String &&\
    \ b.is_a? String\n  return nil if a.to_s.include?(\".\") && b.to_s.include?(\"\
    .\")\n  return a.to_i > b.to_i ? b : a unless a.is_a? String && b.is_a? String\n\
    \  a.to_i > b.to_i ? a : b\nend\n</code>\n<|/ a tags=ruby,arrays dscore=1 |>\n\
    <| c |>\nThanks for your effort, but this is not what I was looking for. I am\
    \ looking for something in Ruby, not Haskell. Anyways, I will give this a try.\
    \ Thanks again!\n<|/ c |>\n<| c |>\nWhat do you mean by \"Ruby\"? Ruby is an interpreter\
    \ of sorts. I guess you mean \"Ruby script\", but the answer is still valid: the\
    \ idea is the same.\n<|/ c |>\n<| c |>\nThe `a.to_i > b.to_i ? a : b` thing is\
    \ pretty cool, thanks for that, but I do not think it does what I want. `compare_one.call(1,\
    \ \"2,3\")` returns `\"2,3\"` but it should be returning `\"3\"`. Also `compare_one.call(1,\
    \ 2.5)` should be returning `2.5` instead of `3` but returns `3`. Maybe I need\
    \ to add some `||` conditions. I don't know. I am going to work on it and will\
    \ update my answer with my findings. Thanks again for your effort.\n<|/ c |>\n\
    <| c |>\nThanks for you efforts. You answer was very helpful and I appreciate\
    \ your effort providing me with something that actually works. I will be able\
    \ to post my own answer to this question when I am done with it and will accept\
    \ yours as the \"answer\". Just one more question, why do you use recursion? That\
    \ is something that I have never seen before. Thanks again!\n<|/ c |>\n<| c |>\n\
    Thanks for your question! I have never heard of recursion and have just read up\
    \ on it. I am also very new to Ruby, and have never used recursion before. Recursion\
    \ is something that is very useful for me, and I really enjoy learning it!\n<|/\
    \ c |>\n<| a dscore=1 |>\nI guess this is what you need:\n<code>\na = [1, 2, 3,\
    \ 5]\nb = [1, 2, 3, 5]\na.zip(b).map(&:max) ", "  if a.kind_of?(Numeric) && b.kind_of?(Numeric)\n\
    \    # convert both arguments to floating point numbers\n    a_num = a.to_f\n\
    \    b_num = b.to_f\n    \n    if a_num == b_num\n      return a\n    elsif a_num\
    \ < b_num\n      return a\n    else\n      return b\n    end\n  elsif a.kind_of?(Numeric)\
    \ && b.kind_of?(String)\n    b_num = b.to_f\n    if a.to_f == b_num\n      return\
    \ a\n    else\n      return b\n    end\n  elsif a.kind_of?(String) && b.kind_of?(Numeric)\n\
    \    a_str = a.to_s\n    b_num = b.to_f\n    if a_str == b_num\n      return a\n\
    \    else\n      return b\n    end\n  else\n    return nil\n  end\nend", "   \
    \ if a.is_a?(Numeric)\n        if b.is_a?(Numeric)\n            return b.send(:<=>,\
    \ a)\n        else\n            return nil\n        end\n    elsif b.is_a?(Numeric)\n\
    \        return nil\n    end", "  if a.kind_of?(String) || b.kind_of?(String)\n\
    \    if a.to_i != b.to_i\n      return a.to_i > b.to_i ? a : b\n    end\n  else\n\
    \    if a > b\n      return a\n    elsif b > a\n      return b\n    else\n   \
    \   return nil\n    end\n  end\nend\n</code>\n<|/ a tags=ruby dscore=0 |>\n<|\
    \ a dscore=0 |>\nHere is a solution:\n<code>", "  if a.is_a? Integer\n    if b.is_a?\
    \ Integer\n      b > a\n    elsif b.is_a? Float\n      b > a\n    else\n     \
    \ b == a or b.to_s.split(\",\").include? a.to_s\n    end\n  elsif a.is_a? Float\n\
    \    if b.is_a? Integer\n      b > a\n    elsif b.is_a? Float\n      b > a\n \
    \   else\n      b == a or b.to_s.split(\",\").include? a.to_s\n    end\n  else\n\
    \    if b.is_a? Integer\n      b > a\n    elsif b.is_a? Float\n      b > a\n \
    \   else\n      b == a or b.to_s.split(\",\").include? a.to_s\n    end\n  end\n\
    end", "  if a.kind_of?(Fixnum) && b.kind_of?(Fixnum)\n    return a > b ? a : b\n\
    \  elsif a.kind_of?(Float) && b.kind_of?(Float)\n    return a.to_f > b.to_f ?\
    \ a : b\n  else\n    (a.is_a?(String) && b.is_a?(String)) ? a.to_s.split(\",\"\
    ).include?(b.to_s) : nil\n  end\nend\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThank\
    \ you for your answer! Unfortunately, it doesn't work for me, since I get the\
    \ following error message: undefined method `to_i' for #<String:0x4ac91d0> (NoMethodError)\n\
    <|/ c |>\n<| c |>\nYes, I did notice that. I did some additional research, and\
    \ found another post that may help: [http://www.ruby-doc.org/stdlib-2.1.1/libdoc/csv/rdoc/CSV.html](http://www.ruby-doc.org/stdlib-2.1.1/libdoc/csv/rdoc/CSV.html)\n\
    <|/ c |>\n<| c |>\nThank you for your additional comment, however, I still get\
    \ the NoMethodError when running your code. I have updated my question with the\
    \ new version of my code, so that you can see what I have done in regards to your\
    \ code.\n<|/ c |>\n<| c |>\nI added a version that uses the CSV library instead,\
    \ since I find it easier to work with. You can give that a try.\n<|/ c |>\n<|\
    \ c |>\nThank you! After a bit of tinkering, I did manage to get it working! I\
    \ have updated my question with the final code for everyone's reference, since\
    \ my previous attempt didn't work anymore. Please let me know if you have any\
    \ suggestions on how to improve my code, so I can improve my understanding of\
    \ Ruby :)\n<|/ c |>\n<| a tags=ruby,if-statement dscore=0 |>\nI think you want\
    \ to do this:\n<code>", "  if a.kind_of?(Numeric)\n    return b.kind_of?(Numeric)\
    \ ? b.to_f - a.to_f : nil\n  elsif b.kind_of?(Numeric)\n    return a.kind_of?(Numeric)\
    \ ? a.to_f - b.to_f : nil\n  elsif a.kind_of?(String) && a.to_s =~ /[^0-9\\.]/\n\
    \    return nil\n  elsif b.kind_of?(String) && b.to_s =~ /[^0-9\\.]/\n    return\
    \ nil\n  elsif a.kind_of?(String) && b.kind_of?(String)\n    a_comp = compare_one(a.to_f,\
    \ b.to_f)\n    b_comp = compare_one(b.to_f, a.to_f)\n    if a_comp && b_comp\n\
    \      return a_comp\n    elsif a_comp || b_comp\n      return a_comp < b_comp\
    \ ? -1 : a_comp > b_comp ? 1 : nil\n    end\n  end\n  return a.to_f <=> b.to_f\n\
    end\n</code>\n<|/ a |>\n<| a dscore=2 |>\n<code>", "  case a\n    when Numeric\n\
    \      case b\n        when Numeric\n          return b > a\n        when String\n\
    \          return a > b.to_i\n      end\n    when String\n      case b\n     \
    \   when Numeric\n          return b > a.to_i\n        when String\n         \
    \ return a > b.to_i\n      end\n    when NilClass\n      case b\n        when\
    \ Numeric\n          return b > 0\n        when String\n          return a > b.to_i\n\
    \      end\n    else\n      case b\n        when Numeric\n          return b >\
    \ a.to_i\n        when String\n          return a > b.to_i\n      end\n  end",
  "  return nil unless a.class == b.class\n  return nil unless a.class == Fixnum\n\
    \  return nil unless b.class == Fixnum\n  return nil unless a.class == String\n\
    \  return nil unless b.class == String\n  return nil unless a.class == Float\n\
    \  return nil unless b.class == Float\n  if a.is_a? String and b.is_a? String\n\
    \    return nil unless a.to_f == b.to_f\n  end\n  if a.is_a? String and b.is_a?\
    \ Fixnum\n    return nil unless a.to_f.to_s == b.to_s\n  end\n  if a.is_a? Fixnum\
    \ and b.is_a? Fixnum\n    return nil unless a.to_f == b.to_f\n  end\n  if a.is_a?\
    \ Fixnum and b.is_a? String\n    return nil unless a.to_s == b.to_s\n  end\n \
    \ return a\nend", "    if a == b\n        return a\n    elsif a.to_s.include?\
    \ \".\"\n        return a.to_f\n    elsif b.to_s.include? \".\"\n        return\
    \ b.to_f\n    else\n        return a.to_f if a.to_f > b.to_f\n        return b.to_f\
    \ if b.to_f > a.to_f\n    end\nend", "  if a.kind_of?(Fixnum)\n    if b.kind_of?(Fixnum)\n\
    \      return a > b ? a : b\n    elsif b.kind_of?(String)\n      return nil\n\
    \    else\n      raise ArgumentError, \"#{a} is not a Fixnum and #{b} is not a\
    \ String.\"\n    end\n  elsif a.kind_of?(String)\n    if b.kind_of?(Fixnum)\n\
    \      return nil\n    elsif b.kind_of?(String)\n      return b\n    elsif b.kind_of?(Float)\n\
    \      return a\n    else\n      raise ArgumentError, \"#{a} is not a String and\
    \ #{b} is not a Fixnum or Float.\"\n    end\n  else\n    raise ArgumentError,\
    \ \"#{a} is not a Fixnum and #{b} is not a String.\"\n  end\nend", "  if a.kind_of?(Float)\
    \ && (b.kind_of?(Float) || b.kind_of?(String))\n    a.to_f <=> b.to_f\n  else\n\
    \    a.to_s <=> b.to_s\n  end\nend", "  case a\n  when String\n    compare_one(b,\
    \ a)\n  when Float\n    case b\n    when String\n      compare_one(b, a)\n   \
    \ else\n      if b > a\n        a\n      else\n        b\n      end\n    end\n\
    \  when Integer\n    case b\n    when String\n      compare_one(b, a)\n    else\n\
    \      if b > a\n        a\n      else\n        b\n      end\n    end\n  else\n\
    \    nil\n  end\nend", "  if a.class == b.class\n    case a\n    when Numeric\n\
    \      return a > b ? a : b\n    when String\n      return a > b ? a : b\n   \
    \ when Array\n      return a.size > b.size ? a : b\n    else\n      nil\n    end\n\
    \  else\n    nil\n  end\nend", "    if a == b\n        return a\n    if a.nil?\
    \ || b.nil?\n        return nil\n    if a.is_a?(Integer) && b.is_a?(Integer)\n\
    \        return a.to_i > b.to_i ? a : b\n    elsif a.is_a?(Integer) && b.is_a?(Float)\n\
    \        return a.to_f > b.to_f ? a : b\n    elsif a.is_a?(Float) && b.is_a?(Float)\n\
    \        return a.to_f > b.to_f ? a : b\n    elsif a.is_a?(Float) && b.is_a?(String)\n\
    \        unless a.to_f.to_s == b.to_f\n            return nil\n        end\n \
    \       return a.to_f > b.to_f ? a : b\n    elsif a.is_a?(String) && b.is_a?(String)\n\
    \        unless a.to_s == b.to_s\n            return nil\n        end\n      \
    \  return a.to_f > b.to_f ? a : b\n    end\n    return nil\nend", "  if a.class\
    \ == b.class\n    case a\n    when Numeric\n      if a < b\n        a\n      elsif\
    \ a > b\n        b\n      else\n        a\n      end\n    when String\n      a\
    \ = a.split(\".\").map { |i| i.to_i }\n      b = b.split(\".\").map { |i| i.to_i\
    \ }\n      b.each_with_index do |i, idx|\n        if a[idx] != b[idx]\n      \
    \    return b[idx]\n        end\n      end\n      return nil\n    end\n    case\
    \ a\n    when Float\n      if a.to_f < b.to_f\n        a\n      elsif a.to_f >\
    \ b.to_f\n        b\n      else\n        a\n      end\n    when Integer\n    \
    \  if a < b\n        a\n      elsif a > b\n        b\n      else\n        a\n\
    \      end\n    end\n  end\nend", "  case a\n  when Fixnum\n    case b\n    when\
    \ Fixnum\n      b > a ? b : a\n    when Numeric\n      b.to_i > a.to_i ? b : a\n\
    \    else\n      b > a ? b : a\n    end\n  when String\n    case b\n    when Fixnum\n\
    \      b > a.to_i ? b : a\n    when Numeric\n      b.to_i > a.to_i ? b : a\n \
    \   when String\n      b > a.to_i ? b : a\n    else\n      b > a ? b : a\n   \
    \ end\n  when Numeric\n    case b\n    when Fixnum\n      b > a ? b : a\n    when\
    \ Numeric\n      b.to_i > a.to_i ? b : a\n    else\n      b > a ? b : a\n    end\n\
    \  else\n    b > a ? b : a\n  end\nend", "  if a.is_a?(Fixnum) && a.to_f.to_s\
    \ == b.to_f.to_s\n    return a.to_f\n  elsif a.is_a?(Bignum) && a.to_f.to_s ==\
    \ b.to_f.to_s\n    return a.to_f\n  elsif a.is_a?(Float)\n    if a.to_f == b.to_f\n\
    \      return a.to_f\n    end\n  elsif a.is_a?(String)\n    if a.to_f == b.to_f\n\
    \      return a.to_f\n    end\n  end\n  return nil\nend", "  if a == b\n    return\
    \ a\n  elsif a.is_a?(Float) or b.is_a?(Float)\n    return a > b ? a : b\n  else\n\
    \    if a.is_a?(String) or b.is_a?(String)\n      if a == \".\" or b == \".\"\n\
    \        return nil\n      elsif a == \".\" and b == \",\"\n        return \"\
    ,\" # a dot but no comma\n      else\n        return a\n      end\n    elsif a.is_a?(Integer)\
    \ or b.is_a?(Integer)\n      a = a.to_s\n      b = b.to_s\n      if a.empty? or\
    \ b.empty?\n        return nil\n      elsif a.length < b.length\n        return\
    \ a\n      else\n        return b\n      end\n    end\n  end\nend", "  # Convert\
    \ strings to integers\n  if a.kind_of? String\n    a = a.to_i\n  end\n  if b.kind_of?\
    \ String\n    b = b.to_i\n  end\n  # Handle nils\n  return nil if a === b\n  #\
    \ If they're both integers or floats, just return the larger value\n  if a.kind_of?\
    \ Integer || b.kind_of? Integer\n    return b if b < a\n    return a if a > b\n\
    \  else\n    # Just compare numbers\n    if b.kind_of? Integer\n      return a\
    \ if a > b\n      return b if a < b\n    end\n    if a.kind_of? Integer\n    \
    \  return a if a > b\n      return b if a < b\n    end\n    # Just compare floats\n\
    \    if b.kind_of? Float\n      return a if a > b\n      return b if a < b\n \
    \   end\n    if a.kind_of? Float\n      return a if a > b\n      return b if a\
    \ < b\n    end\n  end\nend\n</code>\nTo test this, I wrote a little test suite\
    \ to make sure it actually worked:\n<code>", "  if a.kind_of?(Numeric) && b.kind_of?(Numeric)\n\
    \    if a > b\n      a\n    elsif a < b\n      b\n    elsif a == b\n      nil\n\
    \    else\n      nil\n    end\n  elsif a.kind_of?(String) && b.kind_of?(String)\n\
    \    if a > b\n      b\n    elsif a < b\n      a\n    elsif a == b\n      nil\n\
    \    else\n      nil\n    end\n  elsif a.kind_of?(Float) && b.kind_of?(Float)\n\
    \    if a > b\n      b\n    elsif a < b\n      a\n    elsif a == b\n      nil\n\
    \    else\n      nil\n    end\n  else\n    nil\n  end\nend", "  if a.kind_of?(Numeric)\
    \ and b.kind_of?(Numeric)\n    if a.equal?(b)\n      nil\n    elsif a.nan? or\
    \ b.nan?\n      if a.nan?\n        a\n      elsif b.nan?\n        b\n      else\n\
    \        nil\n      end\n    elsif a.infinite? || b.infinite?\n      if a.infinite?\n\
    \        a\n      elsif b.infinite?\n        b\n      else\n        nil\n    \
    \  end\n    elsif a.infinite? and b.finite?\n      a.infinite? ? b : a\n    elsif\
    \ a.finite? and b.infinite?\n      b.infinite? ? a : b\n    else\n      if a.is_a?(Numeric)\
    \ and b.is_a?(Numeric)\n        a.compare(b)\n      elsif a.is_a?(Numeric)\n \
    \       -1\n      elsif b.is_a?(Numeric)\n        1\n      else\n        -1\n\
    \      end\n    end\n  elsif a.kind_of?(String) and b.kind_of?(String)\n    compare_one(a.to_f,\
    \ b.to_f)\n  elsif a.kind_of?(String) and b.kind_of?(Numeric)\n    compare_one(a.to_f,\
    \ b.to_f)\n  elsif a.kind_of?(Numeric) and b.kind_of?(String)\n    compare_one(a.to_f,\
    \ b.to_f)\n  else\n    a.to_i <=> b\n  end\nend\n</pre>", "  if a.kind_of?(Float)\n\
    \    if b.kind_of?(Float)\n      return a > b ? a : b\n    elsif b.kind_of?(Integer)\n\
    \      a_real = a.to_f\n      b_real = b.to_f\n      if a_real > b_real\n    \
    \    return a\n      else\n        return b\n      end\n    elsif b.kind_of?(String)\n\
    \      a_real = a.to_f\n      b_real = b.to_f\n      if a_real > b_real\n    \
    \    return a\n      else\n        return b\n      end\n    else\n      return\
    \ nil\n    end\n  elsif a.kind_of?(Integer)\n    if b.kind_of?(Integer)\n    \
    \  return a > b ? a : b\n    elsif b.kind_of?(Float)\n      a_real = a.to_i\n\
    \      b_real = b.to_f\n      if a_real > b_real\n        return a\n      else\n\
    \        return b\n      end\n    elsif b.kind_of?(String)\n      a_real = a.to_i\n\
    \      b_real = b.to_f\n      if a_real > b_real\n        return a\n      else\n\
    \        return b\n      end\n    else\n      return nil\n    end\n  elsif a.kind_of?(String)\n\
    \    if b.kind_of?(Float)\n      a_real = a.to_f\n      b_real = b.to_f\n    \
    \  if a_real > b_real\n        return a\n      else\n        return b\n      end\n\
    \    elsif b.kind_of?(Integer)\n      a_real = a.to_f\n      b_real = b.to_i\n\
    \      if a_real > b_real\n        return a\n      else\n        return b\n  \
    \    end\n    elsif b.kind_of?(String)\n      a_real = a.to_i\n      b_real =\
    \ b.to_f\n      if a_real > b_real\n        return a\n      else\n        return\
    \ b\n      end\n    else\n      return nil\n    end\n  else\n    return nil\n\
    \  end\nend", "  return nil unless a.kind_of? Integer or a.kind_of? Float\n  return\
    \ nil unless b.kind_of? Integer or b.kind_of? Float", "  if a.is_a?(Integer) &&\
    \ a.zero?\n    b\n  elsif a.is_a?(Integer) && b.is_a?(Integer)\n    a.ceil\n \
    \ elsif a.is_a?(Integer) && b.is_a?(String)\n    compare_one(a.to_f, b.to_f)\n\
    \  elsif a.is_a?(Float) && a.zero?\n    b\n  elsif a.is_a?(Float) && b.is_a?(Float)\n\
    \    a.ceil\n  elsif a.is_a?(Float) && b.is_a?(String)\n    compare_one(a.to_f,\
    \ b.to_f)\n  elsif a.is_a?(String) && a.zero?\n    b\n  elsif a.is_a?(String)\
    \ && b.is_a?(String)\n    a.length < b.length ? a : b\n  elsif a.is_a?(String)\
    \ && b.is_a?(Integer)\n    compare_one(a.to_i, b)\n  else\n    nil\n  end\nend\n\
    end", "  if a.kind_of? Fixnum\n    if b.kind_of? Fixnum\n      if a > b\n    \
    \    a\n      else\n        b\n      end\n    elsif b.kind_of? String\n      b\
    \ = b.split(\",\")\n      a.to_i.min(*b)\n    elsif b.kind_of? Float\n      b\
    \ * a.to_f\n    elsif b.kind_of? Symbol\n      b.reverse_each.find { |s| a ==\
    \ s.to_i }\n    elsif b.kind_of? Fixnum\n      b\n    elsif b.kind_of? Array\n\
    \      b.find { |x| a > x }\n    else\n      nil\n    end\n  elsif a.kind_of?\
    \ String\n    a = a.split(\",\")\n    a.to_i.max(*b)\n  elsif a.kind_of? Float\n\
    \    a * b.to_f\n  elsif a.kind_of? Symbol\n    b.find { |s| a == s.to_i }\n \
    \ elsif a.kind_of? Fixnum\n    a\n  elsif a.kind_of? Array\n    a.find { |x| b\
    \ > x }\n  else\n    nil\n  end\nend", "  if a.class == Float\n    a, b = b, a\n\
    \  end\n  return a > b ? a : b\nend\ncompare_one(1, \"2,3\")\ncompare_one(\"5,1\"\
    , \"6\")\ncompare_one(\"1\", 1)", "  case a\n  when Numeric\n    if b == a\n \
    \     a\n    else\n      b\n    end\n  when Numeric, String\n    if a.to_s.size\
    \ == b.to_s.size\n      b\n    else\n      a\n    end\n  else\n    a\n  end\n\
    end", "  if a.to_f == b.to_f\n    return a.to_f\n  elsif a.to_i == b.to_i\n  \
    \  return a.to_i\n  elsif a.to_s == b.to_s\n    return a.to_s\n  else\n    return\
    \ nil\n  end\nend", "  return b.to_f if a.is_a?(Float) || a.is_a?(String) || a.is_a?(BigDecimal)\n\
    \  return a.to_f if b.is_a?(Float) || b.is_a?(String) || b.is_a?(BigDecimal)\n\
    \  a.to_f <=> b.to_f\nend", "  return a > b ? a : b\nend\n</cell>\n<text>\nThe\
    \ compare_one function takes two variables as arguments, and returns the larger\
    \ one in its variable type. Return nil if the values are equal.", "  return nil\
    \ if a == b\n  if a.kind_of?(Fixnum) || b.kind_of?(Fixnum)\n    return a > b ?\
    \ a : b\n  elsif a.kind_of?(Bignum) || b.kind_of?(Bignum)\n    return a > b ?\
    \ b : a\n  elsif a.kind_of?(Float) || b.kind_of?(Float)\n    return a.to_f > b.to_f\
    \ ? a : b\n  elsif a.kind_of?(String) && b.kind_of?(String)\n    if a.empty? ||\
    \ b.empty?\n      return nil\n    end\n    a_float = Float(a)\n    b_float = Float(b)\n\
    \    return nil unless a_float > b_float\n    return a_float < b_float ? a_float\
    \ : b_float\n  else\n    return nil\n  end\nend", "  if a.kind_of?(Fixnum) &&\
    \ a.to_f == b.to_f\n    return a\n  elsif b.kind_of?(Fixnum) && b.to_f == a.to_f\n\
    \    return b\n  else\n    return nil\n  end\nend", "  if a.kind_of?(Float) ||\
    \ b.kind_of?(Float)\n    if a.kind_of?(Float)\n      a\n    else\n      b\n  \
    \  end\n  else\n    if a == b\n      a\n    else\n      nil\n    end\n  end\n\
    end", "  # Convert the arguments to a consistent form for comparison\n  if a.kind_of?(String)\
    \ || b.kind_of?(String)\n    if a.to_f == b.to_f\n      a\n    elsif a.to_f <\
    \ b.to_f\n      b\n    else\n      a\n    end\n  else\n    if a == b\n      a\n\
    \    elsif a < b\n      b\n    else\n      a\n    end\n  end\nend", "  case a\n\
    \    when Integer  then b > a\n    when Float    then b > a\n    when String \
    \  then\n      case b\n      when /^[+-]?\\d+\\.?\\d*$/ then a.to_f <=> b.to_f\n\
    \      else\n        if a.to_s <=> b.to_s then\n          a.to_s <=> b.to_s\n\
    \        else\n          b.to_s <=> a.to_s\n        end\n      end\n    else raise\
    \ TypeError, \"#{a.class} can't be compared against #{b.class}\"\n  end\nend",
  "  case a\n    when Numeric\n      case b\n        when Numeric\n          a <=>\
    \ b\n        else\n          Float::INFINITY <=> Float::INFINITY\n      end\n\
    \    else\n      a\n  end\nend", "  if a.kind_of?(Float) && (b.kind_of?(Float))\n\
    \    if a.nan? || b.nan?\n      return nil\n    else\n      return a > b ? a :\
    \ b\n    end\n  elsif a.kind_of?(String) && (b.kind_of?(String))\n    if a ==\
    \ \"NaN\" || b == \"NaN\"\n      return nil\n    else\n      return a.to_i > b.to_i\
    \ ? a : b\n    end\n  else\n    if a == b\n      return nil\n    else\n      return\
    \ a > b ? a : b\n    end\n  end\nend\n</code>\n<|/ a tags=ruby,ruby-on-rails dscore=3\
    \ |>\n<| a tags=ruby,ruby-on-rails dscore=3 |>\nI have this problem in Rails 4.0.3.\
    \ \nThe method below works in Ruby 2.1.2 and Rails 4.0.0.\n<code>", "  case compare_one_type_with_type(a,\
    \ b)\n  when Integer\n    return a > b\n  when Float\n    return a > b\n  when\
    \ String\n    a = a.to_f\n    b = b.to_f\n    if a == b\n      return a\n    elsif\
    \ a < b\n      return b\n    end\n  end", "  return nil unless a.class == b.class\
    \ && a.kind_of?(Numeric) && a.between?(0, Float::INFINITY)\n  a.to_f <=> b.to_f\n\
    end\n  ", "  case a\n    when Numeric\n      if b.kind_of? Numeric\n        a.to_f\
    \ == b.to_f ? a.to_i : a.to_f\n      else\n        a.to_i == b.to_i ? a.to_i :\
    \ a.to_f\n      end\n    when String\n      if b.kind_of? String\n        a =\
    \ a.to_i\n        b = b.to_i\n        a.to_f == b.to_f ? a.to_i : a.to_f\n   \
    \   else\n        a.to_i == b.to_i ? a.to_i : a.to_f\n      end\n    when Float\n\
    \      if b.kind_of? Float\n        a.to_f == b.to_f ? a.to_i : a.to_f\n     \
    \ else\n        a.to_i == b.to_i ? a.to_i : a.to_f\n      end\n    when Integer\n\
    \      if b.kind_of? Integer\n        a.to_f == b.to_f ? a.to_i : a.to_f\n   \
    \   else\n        a.to_i == b.to_i ? a.to_i : a.to_f\n      end\n  end\nend\n\
    </code>\n<|/ a tags=ruby |>\n<| c |>\nNice one. Although if you add two `Integer`s\
    \ together and compare them, it won't return `nil`.\n<|/ c |>\n<| a |>\nHow about\
    \ something like this:\n<code>", "  return nil if (a != b)\n  case a\n  when Numeric\n\
    \    a.to_i\n  when Float\n    a.to_f\n  when String\n    if a == \".\" then nil\n\
    \    elsif a == \",\" then nil\n    else a.gsub!(/[,.]/, \"\").to_f\n    end\n\
    \  else nil\n  end\nend", "  return a > b ? a : b\nend", "  return nil if (a.class\
    \ != b.class) || (a.class == Float) && (b.class == Float)\n  return a.to_f <=>\
    \ b.to_f if a.class == String\n  a = a.to_s\n  b = b.to_s\n  if (a <=> b).negative?\n\
    \    return b\n  else\n    return a\n  end\nend", "  return b.nil? ? a.nil? :\
    \ a.is_a?(Numeric) ? b.to_f <=> a.to_f : a.to_s <=> b.to_s\nend", "  return nil\
    \ if a.nil? || b.nil?\n  case a\n  when Float, Fixnum\n    case b\n    when Float,\
    \ Fixnum\n      b > a\n    when String\n      b <=> a\n    else\n      b > a\n\
    \    end\n  when String\n    case b\n    when Float, Fixnum\n      b <=> a\n \
    \   when String\n      b <=> a\n    else\n      b <=> a\n    end\n  else\n   \
    \ b <=> a\n  end\nend", "  return nil unless a.kind_of?(Numeric) ? a.send(b) :\
    \ a > b\nend", "  return nil if a.nil? || b.nil?\n  a = a.to_i\n  b = b.to_i\n\
    \  return nil if (a > b) || (a < b)\n  return nil if a.is_a?(Float)\n  return\
    \ nil if b.is_a?(Float)\n  return nil if a.is_a?(String) && b.is_a?(String)\n\
    \  return nil if a == b\n  return a\nend", "  return nil if a == b\n  case a\n\
    \  when Numeric\n    case b\n    when Numeric\n      a.real_compare(b.real_value)\n\
    \    when String\n      a.real_value.to_f <=> b.real_value.to_f\n    else\n  \
    \    a.real_compare(b)\n    end\n  when String\n    case b\n    when Numeric\n\
    \      a.real_value.to_f <=> b.real_value.to_f\n    when String\n      a.real_value.downcase\
    \ <=> b.real_value.downcase\n    else\n      a.real_value.downcase <=> b\n   \
    \ end\n  else\n    case b\n    when Numeric\n      a.to_s <=> b.to_s\n    when\
    \ String\n      a.to_s <=> b\n    else\n      a.to_s <=> b\n    end\n  end\nend",
  "  if a.class != b.class\n    return nil\n  elsif a.class == String\n    if a.include?\
    \ ','\n      return a\n    elsif a.include? '.'\n      return b\n    else\n  \
    \    return nil\n    end\n  elsif a.class == Float\n    if b < a\n      return\
    \ b\n    elsif b > a\n      return a\n    else\n      return nil\n    end\n  else\n\
    \    return nil\n  end\nend", "    if a.kind_of? Fixnum and b.kind_of? Fixnum\n\
    \        if a == b\n            return a\n        end\n        return b\n    end",
  "    if a.is_a? Numeric\n        if b.is_a? Numeric\n            return a.abs <\
    \ b.abs\n        end\n        return a.to_i <=> b.to_i\n    end", "  case a\n\
    \    when Numeric\n      if b == a.to_f\n        a\n      else\n        b\n  \
    \    end\n    when String\n      if b == a.to_s\n        a\n      else\n     \
    \   b\n      end\n    when Integer\n      if b == a\n        a\n      else\n \
    \       b\n      end\n    when Float\n      if b == a\n        a\n      else\n\
    \        b\n      end\n    else\n      nil\n  end\nend", "  # If these two values\
    \ are equal, return the larger value.\n  return a > b ? a : b\nend", "  if a.nil?\n\
    \    return b\n  elsif b.nil?\n    return a\n  end", "  if a.is_a? Numeric\n \
    \   if b.is_a? Numeric\n      if a == b\n        return nil\n      elsif a.nil?\
    \ || b.nil?\n        return nil\n      else\n        if a > b\n          return\
    \ a\n        else\n          return b\n        end\n      end\n    elsif b.nil?\n\
    \      return a\n    else\n      return b\n    end\n  elsif a.nil?\n    return\
    \ b\n  else\n    return a\n  end\nend", "  if a.kind_of? Float\n    b.kind_of?\
    \ Float ? a.ceil > b.ceil : a.ceil < b.ceil\n  else\n    b.kind_of? Float ? a\
    \ > b : a < b\n  end\nend", "  if a.is_a?(Fixnum)\n    if b.is_a?(Fixnum)\n  \
    \    compare a, b\n    elsif b == \".\"\n      \"#{b}\"\n    elsif b == \",\"\n\
    \      \"#{b}\"\n    else\n      a\n    end\n  elsif a.is_a?(String)\n    if b.is_a?(String)\n\
    \      compare a, b\n    elsif b == \".\"\n      \"#{b}\"\n    elsif b == \",\"\
    \n      \"#{b}\"\n    else\n      b\n    end\n  elsif b.is_a?(Fixnum)\n    compare_one(b,\
    \ a)\n  elsif b == \".\"\n    b\n  elsif b == \",\"\n    b\n  else\n    nil\n\
    \  end\nend", "  if a.is_a? Numeric\n    a, b = b, a\n  end\n  case a.class\n\
    \  when Numeric\n    case b.class\n    when Numeric\n      return a.succ > b.succ\
    \ ? a : b\n    when String\n      return nil\n    end\n  when String\n    if b.is_a?\
    \ Numeric\n      return nil\n    end\n  end\n  return nil\nend", "  return nil\
    \ if a.nil? || b.nil?\n  case a\n  when String then b.to_f\n  when Float then\
    \ b.to_f\n  when Fixnum then b.to_f\n  when BigDecimal then b.to_f\n  else b\n\
    \  end\nend", "  case a\n  when Numeric\n    case b\n    when Numeric\n      return\
    \ a.send(:>, b.send(:>))\n    else\n      b.represent(a) unless a.kind_of?(Numeric)\n\
    \      return compare_one(b, a.to_s)\n    end\n  else\n    case b\n    when Numeric\n\
    \      if a.kind_of?(Numeric)\n        return compare_one(b, a.to_f)\n      else\n\
    \        b.represent(a) unless a.kind_of?(Numeric)\n        return compare_one(b,\
    \ a.to_s)\n      end\n    else\n      if a.kind_of?(Numeric)\n        return compare_one(b,\
    \ a.to_s)\n      else\n        b.represent(a) unless a.kind_of?(Numeric)\n   \
    \     return compare_one(b, a.to_f)\n      end\n    end\n  end\nend", "  return\
    \ nil if a == b\n  if a < b\n    a\n  elsif a == b\n    b\n  else\n    a\n  end\n\
    end", "  case a\n  when Integer\n    case b\n    when Integer\n      if b < a\n\
    \        a\n      else\n        b\n      end\n    else\n      b\n    end\n  when\
    \ Float\n    case b\n    when Integer\n      b = b.to_i\n      if b < a\n    \
    \    a\n      else\n        b\n      end\n    when Float\n      if b < a\n   \
    \     a\n      else\n        b\n      end\n    else\n      b\n    end\n  when\
    \ String\n    case b\n    when Integer\n      b = b.to_i\n      if b < a\n   \
    \     a\n      else\n        b\n      end\n    when Float\n      if b < a\n  \
    \      a\n      else\n        b\n      end\n    else\n      b\n    end\n  else\n\
    \    b\n  end\nend", "  case a\n  when Integer\n    case b\n    when Integer\n\
    \      a>b ? a : b\n    else\n      to_f(a.to_s) >= to_f(b.to_s) ? a : b\n   \
    \ end\n  when Float\n    case b\n    when Integer\n      a>b ? a : b\n    else\n\
    \      to_f(a.to_s) >= to_f(b.to_s) ? a : b\n    end\n  when String\n    case\
    \ b\n    when Integer\n      a>b ? a : b\n    else\n      to_f(a.to_s) >= to_f(b.to_s)\
    \ ? a : b\n    end\n  else\n    nil\n  end\nend", "  a = Float(a) if a.kind_of?(Float)\n\
    \  b = Float(b) if b.kind_of?(Float)\n  return nil if a.nil? || b.nil? || a ==\
    \ b\n  a = BigDecimal(a) if a.kind_of?(BigDecimal)\n  b = BigDecimal(b) if b.kind_of?(BigDecimal)\n\
    \  return nil if a.nil? || b.nil? || a == b\n  a.real > b.real ? a : b\nend",
  "  return nil if a.eql? b\n  case a\n  when Numeric\n    case b\n    when Numeric\n\
    \      b > a ? b : a\n    when String\n      if a.include?(\".\")\n        if\
    \ b.include?(\".\")\n          b = \"#{b.gsub(/[.,]/, \",\")}\"\n        end\n\
    \      else\n        b = \"#{b}\"\n      end\n    else\n      b > a ? b : a\n\
    \    end\n  when String\n    if b.include?(\".\")\n      if a.include?(\".\")\n\
    \        a = \"#{a.gsub(/[.,]/, \",\")}\"\n      end\n    else\n      a = \"#{a}\"\
    \n    end\n  else\n    a > b ? b : a\n  end\nend", "  case a\n  when Numeric\n\
    \    case b\n    when Numeric\n      a <=> b\n    else\n      compare_one.call(b,\
    \ a)\n    end\n  else\n    compare_one.call(b.to_s, a)\n  end\nend", "  return\
    \ nil if a.to_i == b.to_i\n  return nil if a.to_f == b.to_f\n  return nil if a.to_s\
    \ == b.to_s\n  return a.to_s > b.to_s ? '>' : a.to_s < b.to_s ? '<' : nil\nend",
  "  if a < b then\n    a\n  elsif a == b then\n    b\n  else\n    a\n  end\nend",
  "  case a\n  when Numeric\n    case b\n    when Numeric\n      a.send(:>, b.send(:>))\n\
    \    else\n      a.send(:<, b.send(:<))\n    end\n  when String\n    case b\n\
    \    when Numeric\n      compare_one.call(b.to_f, a.to_f)\n    else\n      b.to_s\
    \ < a.to_s\n    end\n  when Array\n    case b\n    when Numeric\n      compare_array.call(a,\
    \ b)\n    else\n      b.size > a.size\n    end\n  when Hash\n    case b\n    when\
    \ Numeric\n      compare_hash.call(a, b)\n    else\n      b.size > a.size\n  \
    \  end\n  else\n    nil\n  end\nend", "  return a > b ? a : nil unless a.kind_of?(Integer)\
    \ && b.kind_of?(Integer)\n  return a.to_i > b.to_i ? a : nil unless a.kind_of?(Float)\
    \ && b.kind_of?(Float)\n  return a > b ? a : nil unless a.kind_of?(String) &&\
    \ b.kind_of?(String)\n  result = a.to_f > b.to_f\n  if result.zero?\n    result\
    \ = a.to_i > b.to_i\n  end\n  result\nend", "  if a.kind_of?(Float) || b.kind_of?(Float)\n\
    \    if a.kind_of?(Float)\n      a = a.to_f\n    else\n      b = b.to_f\n    end\n\
    \    return a > b ? a : b\n  end\n  if a.kind_of?(Integer) || b.kind_of?(Integer)\n\
    \    if a.kind_of?(Integer)\n      a = a.to_i\n    else\n      b = b.to_i\n  \
    \  end\n    return a > b ? a : b\n  end\n  if a.kind_of?(String) || b.kind_of?(String)\n\
    \    if a.kind_of?(String)\n      a = a.to_s\n    else\n      b = b.to_s\n   \
    \ end\n    return a > b ? a : b\n  end\n  return nil\nend", "  if a.to_i != b.to_i\n\
    \    compare_one = nil\n  end\nend", "  # Handle nil\n  if a == b\n    return\
    \ nil\n  elsif a.is_a?(String) && b.is_a?(String)\n    return a > b ? 1 : a <\
    \ b ? -1 : 0\n  elsif a.is_a?(String) && !b.is_a?(String)\n    return compare_one(a.to_i,\
    \ b)\n  elsif !a.is_a?(String) && b.is_a?(String)\n    return compare_one(a, b)\n\
    \  elsif a.is_a?(Fixnum) && b.is_a?(Fixnum)\n    return compare_one(a.to_i, b.to_i)\n\
    \  elsif a.is_a?(Fixnum) && !b.is_a?(Fixnum)\n    return compare_one(a.to_s, b.to_s)\n\
    \  else\n    return nil\n  end\nend", "  case a\n  when Numeric\n    case b\n\
    \    when Numeric\n      b > a ? b : a\n    else\n      a > b ? b : a\n    end\n\
    \  when String\n    case b\n    when Numeric\n      b = b.to_f\n    when String\n\
    \      b = b.to_i\n    else\n      a > b ? b : a\n    end\n  else\n    a > b ?\
    \ b : a\n  end\nend", "  if a.kind_of? Numeric && b.kind_of? Numeric\n    if a.negative?\
    \ && b.negative?\n      a > b ? a : b\n    elsif a.positive? && b.negative?\n\
    \      a < b ? a : b\n    elsif a.negative? && b.positive?\n      a > b ? a :\
    \ b\n    elsif a.positive? && b.positive?\n      a < b ? a : b\n    else\n   \
    \   a == b ? a : nil\n    end\n  elsif a.kind_of? String && b.kind_of? String\n\
    \    # See if both numbers are in the form of \"#.#\".\n    real_a = a.gsub!(/#[^\\\
    .]+\\.#/, '').to_f\n    real_b = b.gsub!(/#[^\\.]+\\.#/, '').to_f\n    # See if\
    \ one is negative and the other is positive.\n    if real_a < 0 and real_b > 0\n\
    \      real_a > real_b ? real_a : real_b\n    elsif real_a > 0 and real_b < 0\n\
    \      real_a < real_b ? real_a : real_b\n    else\n      real_a == real_b ? real_a\
    \ : nil\n    end\n  elsif a.kind_of? String || b.kind_of? String\n    a.to_f ==\
    \ b.to_f\n  else\n    nil\n  end\nend", "  if a > b then\n    a\n  elsif a ==\
    \ b then\n    b\n  else\n    nil\n  end\nend", "  if a.is_a?(String) && b.is_a?(String)\n\
    \    a, b = a.split(\",\").map {|x| x.to_i}, b.split(\",\")\n  elsif a.is_a?(Fixnum)\
    \ && b.is_a?(Fixnum)\n    return a <=> b\n  else\n    if a.is_a?(Float) && b.is_a?(Float)\n\
    \      a, b = a.to_f, b.to_f\n    end\n  end\n  a > b ? a : b\nend", "  case a\n\
    \  when Numeric\n    case b\n    when Numeric\n      a <=> b\n    else\n     \
    \ b = b.to_f\n      a <=> b\n    end\n  when String\n    case b\n    when Numeric\n\
    \      b = b.to_f\n      a <=> b\n    else\n      b = b.to_f\n      a <=> b\n\
    \    end\n  when Float\n    case b\n    when Numeric\n      b = b.to_f\n     \
    \ a <=> b\n    else\n      b = b.to_f\n      a <=> b\n    end\n  else\n    return\
    \ nil\n  end\nend", "  if a.kind_of? String or b.kind_of? String\n    if a ==\
    \ \".\" or b == \".\"\n      return nil\n    else\n      return a\n    end\n \
    \ end", "  if a.kind_of? String\n    a,b = a.split(\",\"), b.split(\",\")\n  elsif\
    \ a.kind_of? Integer\n    a,b = a.to_s, b.to_s\n  elsif a.kind_of? Float\n   \
    \ a,b = a.to_s, b.to_s\n  end\n  return a.gsub(b) { |m| a.index(m) ? m : nil }.to_f\n\
    end", "  case a\n  when Numeric\n    case b\n    when Numeric\n      if a.to_i\
    \ == b.to_i\n        a\n      else\n        b\n      end\n    else\n      b\n\
    \    end\n  when String\n    case b\n    when Numeric\n      if a.to_i == b.to_i\n\
    \        a\n      else\n        b\n      end\n    else\n      b\n    end\n  else\n\
    \    a\n  end\nend\n</code>\n<|/ a dscore=5 |>\n<| c |>\nI love this one liner,\
    \ but it is actually a bad idea, because it has O(n^2) complexity in the number\
    \ of arguments. In real life applications, people tend to have few comparisons\
    \ performed, so this is acceptable. Still, this answer deserves more attention.\n\
    <|/ c |>\n<| a tags=ruby,sorting,ruby-on-rails,arrays |>\nIf you have several\
    \ criteria, you can also create several arrays, one for each criteria, and compare\
    \ each element of each array to determine which should go first.  This can simplify\
    \ things by a huge margin.  It may even be faster than any of the other methods\
    \ suggested here, as each comparison is performed against each array once.\n<code>\n\
    arr1 = [10,2,3,8,1,9]\narr2 = [4,5,6,9,0,2]\narr3 = [7,8,9,4,1,2]", "  if a.kind_of?(Numeric)\
    \ && b.kind_of?(Numeric)\n    a.send(:<=>, b.send(:<=>))\n  elsif a.kind_of?(Numeric)\n\
    \    \"#{a}#{b.kind_of?(Numeric) ? \",\" : \".\"}#{b}\"\n  elsif b.kind_of?(Numeric)\n\
    \    \"#{b}#{a.kind_of?(Numeric) ? \",\" : \".\"}#{a}\"\n  elsif a.kind_of?(String)\
    \ && b.kind_of?(String)\n    compare_number_string a, b\n  elsif a.kind_of?(String)\
    \ && b.kind_of?(Numeric)\n    compare_number_string b, a\n  elsif a.kind_of?(String)\
    \ && b.kind_of?(String)\n    compare_number_string a, b\n  else\n    a.to_s ==\
    \ b.to_s\n  end\nend", "  if a == b\n    return a\n  elsif a.kind_of?(Numeric)\
    \ && b.kind_of?(Numeric)\n    return b > a ? b : a\n  elsif a.kind_of?(Numeric)\
    \ && b.kind_of?(String)\n    return b.to_i >  a.to_i ? b.to_i : a.to_i\n  elsif\
    \ b.kind_of?(Numeric) && b.kind_of?(String)\n    return a.to_i > b.to_i ? a.to_i\
    \ : b.to_i\n  elsif a.kind_of?(String) && b.kind_of?(String)\n    return a.to_i\
    \ > b.to_i ? a : b\n  else\n    return nil\n  end\nend", "  case a\n  when Numeric\n\
    \    if b.kind_of?(Numeric)\n      if a > b\n        a\n      elsif a == b\n \
    \       a\n      else\n        b\n      end\n    else\n      if a.to_i >= b.to_i\n\
    \        a\n      elsif a.to_i == b.to_i\n        a\n      else\n        b\n \
    \     end\n    end\n  when String\n    case b\n    when Numeric\n      if a.kind_of?(Numeric)\n\
    \        if a.to_f > b.to_f\n          a\n        elsif a.to_f == b.to_f\n   \
    \       a\n        else\n          b\n        end\n      else\n        if a.to_i\
    \ == b.to_i\n          a\n        else\n          b\n        end\n      end\n\
    \    when String\n      if a > b\n        a\n      elsif a == b\n        a\n \
    \     else\n        b\n      end\n    else\n      b\n    end\n  else\n    b\n\
    \  end\nend", "  return a.to_i > b.to_i ? a : b \nend", "  case a\n    when Numeric\n\
    \      if b < a.to_f\n        a\n      else\n        b\n      end\n    when String\n\
    \      b = a.to_f\n      if b < a.to_f\n        a\n      else\n        b\n   \
    \   end\n    when Numeric, String\n      b = a.to_f\n      if b < a.to_f\n   \
    \     a\n      else\n        b\n      end\n  end\nend", "  unless a.kind_of?(Numeric)\n\
    \    a = parse_float(a)\n  end\n  unless b.kind_of?(Numeric)\n    b = parse_float(b)\n\
    \  end\n  return nil if (a >= b || b < a)\n  case compare_op\n    when \"<\"\n\
    \      return b\n    when \">\"\n      return a\n    when \"==\"\n      return\
    \ nil\n    else\n      raise \"Unknown operator #{compare_op}\"\n  end\nend",
  "  case compare_all(a, b)\n  when nil\n    nil\n  when 0\n    a\n  when 1\n    b\n\
    \  when 2\n    a\n  when 3\n    b\n  when 4\n    a\n  when 5\n    b\n  when 6\n\
    \    \"nil\"\n  end\nend", "  if a.kind_of? Fixnum\n    if b.kind_of? Fixnum\n\
    \      if a.to_i == b.to_i\n        return a\n      elsif a.to_i > b.to_i\n  \
    \      return b\n      end\n    elsif b.kind_of? Fixnum\n      return a\n    elsif\
    \ b.kind_of? String\n      a, b = b.to_f.to_s, a.to_f.to_s\n    end\n  elsif b.kind_of?\
    \ Fixnum\n    return b\n  elsif b.kind_of? String\n    a, b = a.to_f.to_s, b.to_f.to_s\n\
    \  end", "  if a.is_a?(Float)\n    a.to_f <=> b.to_f\n  else\n    a.to_s <=> b.to_s\n\
    \  end\nend\n</code>\nThe next thing to do is create a set of all possible combinations\
    \ between all the variables. As a first step, the set of combinations can be represented\
    \ by a hash (a data structure like a Hash object in Ruby): \n<code>", "  a = a.to_f\n\
    \  b = b.to_f\n  return b > a ? b : nil\nend", "  if a.is_a? Float\n    return\
    \ a > b\n  elsif a.is_a? Fixnum\n    return a > b\n  elsif a.is_a? Bignum\n  \
    \  return a > b\n  elsif a.is_a? String\n    return compare_one(a.to_i, b.to_i)\n\
    \  end\n  return nil\nend", "    if a.kind_of? Numeric\n        return b if a.compare(b)\
    \ == 0\n    elsif a.kind_of? String\n        return b if a.to_s.strip.to_i ==\
    \ b.to_s.strip.to_i\n    elsif a.kind_of? Float\n        return b if a.to_f ==\
    \ b.to_f\n    end\nend\nend\n</code>\n<|/ a tags=ruby,type-conversion |>\n<| c\
    \ |>\nGood idea, but it does not solve the problem of the case where `a` is a\
    \ Fixnum and `b` is a Fixnum. Try `compare_one 1.0, 2.0`.\n<|/ c |>\n<| c |>\n\
    , true, I missed that case, but it's a simple fix for that. Updated my answer.\n\
    <|/ c |>\n<| c |>\n, added a better solution, should work better now.\n<|/ c |>\n\
    <| a dscore=2 |>\nThis is what I came up with, pretty simple and straight forward:\n\
    <code>", "  if a == b\n    return a\n  elsif a.to_f == b.to_f\n    return a\n\
    \  elsif a.to_i == b.to_i\n    return a\n  elsif a.to_s == b.to_s\n    return\
    \ a\n  elsif a.to_s == b.to_f\n    return a\n  else\n    return nil\n  end\nend",
  "  case a\n  when Integer\n    Integer(a) == Integer(b) ? a : nil\n  when Float\n\
    \    Float(a) == Float(b) ? a : nil\n  when String\n    a = a.gsub(/[,.]/, \"\"\
    ).to_f\n    b = b.gsub(/[,.]/, \"\").to_f\n    a.to_i == b.to_i ? a : nil\n  else\n\
    \    nil\n  end\nend", "  return nil if a === b\n  return a if Float(a) === Float(b)\n\
    \  return b if String(a) === String(b)\nend", "  case a\n    when Numeric\n  \
    \    if a.respond_to?(:+) && b.respond_to?(:+)\n        compare_one(a.to_f, b.to_f)\n\
    \      elsif a.respond_to?(:<) && b.respond_to?(:<)\n        compare_one(a.to_s,\
    \ b.to_s)\n      elsif a.respond_to?(:==) && b.respond_to?(:==)\n        a.to_i\
    \ == b.to_i\n      else\n        return nil\n      end\n    when Integer\n   \
    \   if a.respond_to?(:+) && b.respond_to?(:+)\n        compare_one(a.to_f, b.to_f)\n\
    \      elsif a.respond_to?(:<) && b.respond_to?(:<)\n        compare_one(a.to_s,\
    \ b.to_s)\n      elsif a.respond_to?(:==) && b.respond_to?(:==)\n        a.to_i\
    \ == b.to_i\n      else\n        return nil\n      end\n    when Float\n     \
    \ if a.respond_to?(:<) && b.respond_to?(:<)\n        compare_one(a.to_f, b.to_f)\n\
    \      elsif a.respond_to?(:==) && b.respond_to?(:==)\n        a.to_f == b.to_f\n\
    \      else\n        return nil\n      end\n    when String\n      if a.respond_to?(:<)\
    \ && b.respond_to?(:<)\n        compare_one(a.to_f, b.to_f)\n      elsif a.respond_to?(:==)\
    \ && b.respond_to?(:==)\n        a.to_s == b.to_s\n      else\n        return\
    \ nil\n      end\n    else\n      return nil\n  end\nend", "  if a == b\n    return\
    \ a\n  elsif b.is_a? String\n    return b.to_i\n  else\n    return b.to_f\n  end\n\
    end", "  case a\n  when Numeric\n    case b\n    when Numeric\n      a > b ? a\
    \ : b\n    when String\n      a > b ? a.to_i : b.to_i\n    when Fixnum\n     \
    \ a > b ? a : b\n    when Float\n      a > b ? a : b\n    end\n  when String\n\
    \    case b\n    when Numeric\n      a > b ? a : b\n    when String\n      a >\
    \ b ? a.to_i : b.to_i\n    when Fixnum\n      a > b ? a : b\n    when Float\n\
    \      a > b ? a : b\n    end\n  when Fixnum\n    case b\n    when Numeric\n \
    \     a > b ? a : b\n    when String\n      a > b ? a.to_i : b.to_i\n    when\
    \ Fixnum\n      a > b ? a : b\n    when Float\n      a > b ? a : b\n    end\n\
    \  when Float\n    case b\n    when Numeric\n      a > b ? a : b\n    when String\n\
    \      a > b ? a.to_i : b.to_i\n    when Fixnum\n      a > b ? a : b\n    when\
    \ Float\n      a > b ? a : b\n    end\n  else\n    nil\n  end\nend", "  a = to_real(a)\n\
    \  b = to_real(b)\n  if a.kind_of?(Numeric) and b.kind_of?(Numeric)\n    if a\
    \ > b\n      a\n    elsif a < b\n      b\n    elsif a == b\n      nil\n    end\n\
    \  elsif a.kind_of?(String) && b.kind_of?(String)\n    if a > b\n      a\n   \
    \ elsif a < b\n      b\n    elsif a == b\n      nil\n    end\n  else\n    nil\n\
    \  end\nend", "  if a == b\n    return a\n  elsif a.to_s.include?(',')\n    return\
    \ a.sub('.', '')\n  else\n    return b\n  end\nend\n</code>\nThis approach will\
    \ work if you have a fixed set of types, such as only numbers and strings.  But,\
    \ if you have a variable number of types (ie. a mixed set of numbers and strings),\
    \ then you will have to do something else.\nHere's an example using your code:\n\
    <code>", "  if a.kind_of?(Float) || (b.kind_of?(Float) && !Float(a).equal?(Float(b)))\n\
    \    return b.to_f\n  elsif a.kind_of?(String) || (b.kind_of?(String) && !String(a).equal?(String(b)))\n\
    \    return b.to_s\n  elsif a.kind_of?(Integer) || (b.kind_of?(Integer) && !Integer(a).equal?(Integer(b)))\n\
    \    return b.to_i\n  else\n    return nil\n  end\nend", "  if a.is_a?(Float)\n\
    \    return a.to_f <=> b\n  elsif a.is_a?(String)\n    a = a.gsub(/[+-.]/, \"\"\
    )\n    b = b.gsub(/[+-.]/, \"\")\n    if a == \"-\" || a == \"+\"\n      a = \"\
    0\"\n    elsif b == \"-\" || b == \"+\"\n      b = \"0\"\n    end\n    if a <\
    \ b\n      \"<\"\n    elsif a == b\n      \">\"\n    else\n      \"=\"\n    end\n\
    \  elsif a.is_a?(Integer)\n    return a.to_i <=> b\n  else\n    return nil\n \
    \ end\nend"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
