name: HumanEval_157_right_angle_triangle
language: rb
prompt: "# Given the lengths of the three sides of a triangle. Return true if the\
  \ three\n# sides form a right-angled triangle, false otherwise.\n# A right-angled\
  \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n#\
  \ Example:\n# >>> right_angle_triangle.call(3, 4, 5)\n# true\n# >>> right_angle_triangle.call(1,\
  \ 2, 3)\n# false\ndef right_angle_triangle(a, b, c)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n\
  \    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3,\
  \ 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true,\
  \ candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n\
  \    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10,\
  \ 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true,\
  \ candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n\
  \    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2,\
  \ 2, 10))\n  end\nend\n"
completions: ["\treturn (((b * b) + (c * a)) - ((a + b) * (b - c)) < (2 * (a * b)))\n\
    end", "  return (b**2 + c**2 - (a**2 + b**2 - c**2)**2)\nend", "  return b >=\
    \ c and b >= a or c >= a and c >= b\nend", "\treturn (((b**2) - (c**2)) < (a*c))\
    \ and ((b**2) - (a**2)) < 0\n\t", "\treturn (b - a) * ((c + a) * (c - b)) <= 0\n\
    end", "    delta = (b - a) * (c - b)\n    if delta < 0\n        return true\n\
    \    elsif delta == 0\n        return true\n    elsif delta > 0\n        return\
    \ false\n    else\n        return true\nend", '  return b > 0 and c > 0 and a
    + b > c and a + c > b', "\treturn (b * c) / a == (a + b * c) / b\nend", "  ((b\
    \ - c) * (c + a) * (c - b)).eql? 0\nend", "    (a, b) = a.to_i, b.to_i\n    (c,\
    \ a) = c.to_i, a.to_i", '  return (b ** 2 + c ** 2 - (a ** 2) * (c < b)) == 0.0',
  "  return (b**2 + c**2 == a**2 + b**2 > c**2 + a**2 )\nend", "\treturn (b - a) *\
    \ (c - b) <= 0\nend\n</cell>\n<cell>", "  if a == b == c\n    false\n  elsif a\
    \ == c\n    true\n  elsif b == c\n    true\n  elsif a > c\n    true\n  elsif a\
    \ < c\n    false\n  elsif a > b\n    true\n  elsif b > c\n    true\n  else\n \
    \   false\n  end\nend\n</cell>\n<cell>", "  return (a**2 + b**2 == c**2 + a *\
    \ b == 0)\nend", "  return (b * b - 4 * a * c).to_i <= 0\nend", "  return a *\
    \ b > c * b # && c > b # || a + c > b * a # || a + b > c * a # || a + b > c *\
    \ b # || b + c > a * b # || b + c > a * c # || b + a > c * b # || a + a > c *\
    \ c\nend", "  return (b * b == c * c and a != 0)\n  ", "  ab_c = sqrt(a**2 + b**2\
    \ - c**2)\n  angle = (atan2(ab_c, sqrt(a**2 - ab_c**2)) + 180.)\n  angle = angle\
    \ % 360.\n  return ((angle > 90.) and (angle < 270.))\nend\n</cell>\n<code language=julia-0.6>\n\
    @assert right_angle_triangle(3, 4, 5) == true\n@assert right_angle_triangle(1,\
    \ 2, 3) == false\n</cell>\n<text>\n4.4 Quadratic Equations\nA quadratic equation\
    \ is a equation that has two variables, and that has $n$ equations.", "  return\
    \ (b**2 + c**2 - a**2) ** 0.5 == 0.0\nend", "  if a == 0 and b == 0 and c == 0\n\
    \    return true\n  elsif a != 0 and b == 0 and c != 0\n    return true\n  elsif\
    \ a != 0 and b != 0 and c != 0\n    return (b * b) - ((math.sqrt((b * b) - math.sqr((a\
    \ * a) - (b * b)))) * math.sqrt((a * a) - (b * b)))\n  else\n    return false\n\
    end", "  if ((a < b) != (a > c))\n    return false\n  elsif ((b < c) != (b > a))\n\
    \    return false\n  else\n    return true\nend", "  \n  # Write your logic here\n\
    \  puts \"False\" if a + b == c or b + c == a or c + a == b\n  \nend", '  return
    (((a + b) > c) or ((c + b) > a) or ((a + c) > b)) ', "\t\n\tif a == b and c ==\
    \ a or b == c and a == b then return true\n\treturn false\nend", "  if a == 0\
    \ and b == 0 and c == 0:\n    return True\n  if a == 0 and b == 0 and c == 1:\n\
    \    return False\n  if a == 0 and b == 1 and c == 0:\n    return False\n  if\
    \ a == 0 and b == 1 and c == 1:\n    return True\n  if a == 0 and b == 0 and c\
    \ == 1 or a == 0 and b == 1 and c == 0:\n    return False\n  if a == 0 and b ==\
    \ 1 and c == 1:\n    return False\n  if a == 1 and b == 0 and c == 0:\n    return\
    \ False\n  if a == 1 and b == 0 and c == 1:\n    return True\n  if a == 1 and\
    \ b == 1 and c == 0:\n    return True\n  if a == 1 and b == 1 and c == 1:\n  \
    \  return False\n  if a == 1 and b == 0 and c == 1:\n    return False\n  if a\
    \ == 1 and b == 1 and c == 1:\n    return True\n  \n  if a == 0 and b == 0 and\
    \ c > 0:\n    return False\n  if a == 0 and b == 1 and c < 0:\n    return False\n\
    \  if a == 1 and b == 0 and c < 0:\n    return False\n  if a == 1 and b == 1 and\
    \ c < 0:\n    return False\n  if a == 1 and b == 0 and c > 0:\n    return True\n\
    \  \n  if a == 0 and b == 0 and c < 0:\n    return True\n  if a == 1 and b ==\
    \ 0 and c > 0:\n    return True\n  if a == 0 and b == 1 and c > 0:\n    return\
    \ False\n  if a == 1 and b == 1 and c > 0:\n    return True\n  if a == 0 and b\
    \ == 1 and c < 0:\n    return False\n  if a == 1 and b == 1 and c < 0:\n    return\
    \ False\n  \n  if a == 0 and b == 1 and c < 0:\n    return False\n  if a == 1\
    \ and b == 1 and c > 0:\n    return True\n  \n  if a == 0 and b == 0 and c > 0:\n\
    \    return False\n  if a == 1 and b == 0 and c < 0:\n    return True\n  if a\
    \ == 1 and b == 1 and c > 0:\n    return False\n  \n  if a == 0 and b == 0 and\
    \ c < 0:\n    return True\n  if a == 1 and b == 0 and c > 0:\n    return False\n\
    \  \n  if a == 1 and b == 0 and c < 0:\n    return True\n  \n  if a == 1 and b\
    \ == 1 and c < 0:\n    return True\n  \n  if a == 0 and b == 1 and c > 0:\n  \
    \  return True\n  \n  if a == 1 and b == 1 and c > 0:\n    return True\n  \n \
    \ if a == 0 and b == 1 and c < 0:\n    return True\n  \n  if a == 1 and b == 1\
    \ and c < 0:\n    return True\n  \n  if a == 0 and b == 0 and c > 0:\n    return\
    \ False\n  if a == 1 and b == 0 and c < 0:\n    return False\n  \n  if a == 0\
    \ and b == 1 and c < 0:\n    return True\n  \n  if a == 1 and b == 1 and c > 0:\n\
    \    return True\n  \n  if a == 0 and b == 0 and c < 0:\n    return True\n  \n\
    \  if a == 1 and b == 1 and c > 0:\n    return True\n  \n  if a == 0 and b ==\
    \ 0 and c < 0:", "\tif b*b-4*a*c < 0 then return false\n\tif b*b-4*a*c > 0 then\
    \ return true\n\ta = b+((b*b+c)*0.5)\n\tif 2*a*c > b*b then return true\n\treturn\
    \ false\nend", "  ab, bc = b-a, c-b\n  return ab and bc == ab*bc\nend", "  return\
    \ (b**2 - a*c**2 <= 0)\nend", "  return (b ** 2 + c ** 2 >= 4 * a * c) && (b **\
    \ 2 + a ** 2 >= 4 * a * b) \nend", "  side1 = abs(a)\n  side2 = abs(b)\n  side3\
    \ = abs(c)\n  triangle_side = side1 + side2 + side3\n  return triangle_side ==\
    \ (side1 + side2 if side1 > side2 else side1 +\n    side3) if triangle_side %\
    \ 2 == 0 else triangle_side > 0 and\n    triangle_side == (side1 + side3 if side1\
    \ > side3 else side1 +\n    side2)\nend\n</code>\n<|/ a tags=ruby dscore=1 |>\n\
    <| c |>\nThe OP does not want to check the angles of a triangle, but whether they\
    \ are right angles (see the note at the end of his question). Your code only checks\
    \ the three sides.\n<|/ c |>\n<| a tags=ruby |>\nFor this solution, I use the\
    \ Ruby standard library Rational in place of Float to simplify the solution a\
    \ bit more. \nWe use the triangle inequality (ie. a triangle with three sides\
    \ a, b, and c must have one of the sides equals its length). Therefore we have:\n\
    <code>", "  triangle_side_lengths = triangle_side_lengths(a,b,c)\n  right_angled_triangle\
    \ = triangle_side_lengths > 0 ", "  ab, bc, ca = a*b + b*c, a*c + b*c, a*b + c*c\
    \ \n  ab == ca\nend", "    (a * b) == (c * a)\nend", "  if a == b or a == c or\
    \ a == c or b == c\n    return true\n  else\n    return false\nend", "  (c-a ==\
    \ b) || (c-a == -c) || (b-a == -c) || (b-a == b)\nend", "  return (b * b - 4 *\
    \ a * c) == 0 or ((b * b - 4 * a * c) == (b * b + 4 * a * c))\nend\n</pre>\n</div>\n\
    </div>\n</div>\n</div>\n</div>\n</div>\n</div>\n<div id=\"footer\">\n<div id=\"\
    footer-text\">\nLast updated 2021-08-24 20:12:54\n</div>\n</div>\n<div id=\"postamble\"\
    \ class=\"status\">\n<p class=\"author\">Author: Abhishek Sarkar</p>\n<p class=\"\
    date\">Created: 2021-08-24 20:12:54</p>\n<p class=\"creator\"><a href=\"http://www.gnu.org/software/emacs/\"\
    >Emacs</a> 25.1.1 (<a href=\"http://orgmode.org\">Org</a> mode 8.2.10)</p>\n<p\
    \ class=\"validation\"><a href=\"http://validator.w3.org/check?uri=referer\">Validate</a></p>\n\
    </div>\n</body>\n</html>", "  return (b - c) * ((a + b) >= (c * a)) and (a - b)\
    \ * ((a + b) >= (c * a))\nend\n</cell>\n<code language=julia-1.6>", "  return\
    \ a == b or a == c or b == c\nend\n</cell>\n<code language=julia-1.0>\nright_angle_triangle(5,\
    \ 3, 1)\n</cell>\n<code language=julia-1.0>", "  return (((a + b) > c) and (abs(a\
    \ - b) > c) and (abs(b - a) > c))\nend", "  triangle_sides(a, b, c)\n  return\
    \ (b * b) + ((90 - a) * c) == (b * c)\nend", "  if a > b > c\n    true\n  else\n\
    \    c > a > b\n  end\nend", "  triangle_angle_formula = (( (b * b) - (4 * a *\
    \ c)) % (2*(Math.sqrt(a**2 + b**2))))\n  return triangle_angle_formula > 0 \n\
    end", "  triangle_sides = (a, b, c)\n  return right_angle(triangle_sides)\nend",
  '  return abs(b - c) <= (a if a == b else (a * a + b * b - c * c) ) / 2', "  ((a\
    \ + b) * (b + c) * (c + a)) < 0\nend", "    sides = [a, b, c]\n    sides.sort(key\
    \ = lambda x:x)\n    return len(sides) == 3\nend", "\treturn (b**2 + c**2 - (a**2\
    \ + b**2) ** 2) == 0\nend", "  ((b - a) * (b - c)) - ((a - b) * (c - a)) > 0\n\
    end", "    triangle_inequalities = (a, b, c)\n    if (a > b and a > c) and (a\
    \ > c and a > b) and (c > b and c > a) and (c > a and\n        c > b):\n     \
    \   return True\n    elif (b > a and b > c) and (b > c and a > b) and (a > c and\
    \ a > b):\n        return True\n    elif (c > a and c > b) and (c > b and b >\
    \ a):\n        return True\n    else:\n        return False", "  (a * b) % 360\
    \ < 180\nend", "    abc = a + b + c\n    abc3 = abc * 3\n    abc2 = abc / 2\n\
    \    abc1 = abc / 3\n    bca = b - c\n    bc3 = bc * 3\n    bc2 = bc / 2\n   \
    \ bc1 = bc / 3\n    cba = c - a\n    cba3 = cba * 3\n    cba2 = cba / 2\n    cba1\
    \ = cba / 3\n    angle1 = bc / c\n    angle2 = 2 * a * b * c\n    angle3 = bc\
    \ / a\n    return ((angle1 > 90 or angle3 > 90) and\n            (angle2 > 90\
    \ or angle1 > 90))\nend\n</code>\n<|/ a dscore=0 |>\n<| c |>\nI don't really see\
    \ how your code would be different from the code in the question. Why are you\
    \ multiplying angle1, angle2, and angle3 by the square root of the sum of squares\
    \ of sides? How would this be faster than the code in the question?\n<|/ c |>\n\
    <| c |>\nI agree with your point. However, the question is asking to check if\
    \ a triangle is right angle. Hence, multiplying by the square root of the sum\
    \ of squares of sides doesn't make sense. Also, I think it is quite fast. At least\
    \ compared to other solutions.\n<|/ c |>\n<| a tags=ruby,algorithm,math |>\n<code>",
  "  return (a*a + b*b == c*c)\nend", "  triangle_sides = (a + b + c).to_i\n  if triangle_sides\
    \ == 0 \n  or triangle_sides % 2 \n  then false\n  else (triangle_sides ** 0.5).to_i\
    \ == triangle_sides\nend", "  if b < c && a < c\n    true\n  else\n    false\n\
    \  end\nend", "  (a * b) > 0 && (a * b) <= (c * b)\nend\n</code>\n<|/ a tags=ruby\
    \ |>\n<| a dscore=0 tags=ruby |>\nHere's a way using recursion:\n<code>", "\t\
    return ((a * b) <=> ((a + b) * (c - b)) <=> ((a + c) * (b - c))) == true\nend",
  "  if a + b > c\n    false\n  elsif a + c > b\n    false\n  elsif b + c > a\n  \
    \  false\n  else\n    a = a - b\n    b = b - a\n    c = c - a\n    true\n  end\n\
    end", "  puts \"A: #{a}\"\n  puts \"B: #{b}\"\n  puts \"C: #{c}\"\n  return (a\
    \ * b) == (a + b + c) or a * b == (a + b) or a * b == (a - b) or b * a == b *\
    \ c - a * b\nend", "    triangle_area = calculate_area_triangle(a, b, c) #Calculates\
    \ area of triangle\n    right_triangle = (triangle_area < math.pi / 2) #Check\
    \ whether it is right angle\n    return right_triangle\n</code>\nThis can be tested\
    \ as follows:\n<code>\n>>> right_angle_triangle.call(3, 4, 5)\nTrue\n>>> right_angle_triangle.call(1,\
    \ 2, 3)\nFalse\n</code>\nA more robust implementation that also checks for colinear\
    \ points can also be implemented.\n<|/ a tags=geometry,python,math dscore=1 |>\n\
    <| a dscore=1 tags=geometry,python,math |>\nThe answer is basically the same as\
    \ previous answers except with some small changes in implementation.\nFirst create\
    \ a function to calculate area of a triangle:\n<code>", "    # Write your code\
    \ here\n    return ((a + b > c) and ((a + c) > b) and ((b + c) > a))", "  return\
    \ (b**2 + a**2 +c**2)**.5 == ((b**2+c**2) **.5) - ((a**2+c**2) **.5)\nend\n</code>\n\
    For a right-angled triangle, all sides are equal, so if both sides are equal,\
    \ the triangle is right-angled.\n<|/ a dscore=3 tags=ruby,ruby-on-rails,algorithm\
    \ |>\n<| c |>\nYour algorithm doesn't work for this triangle: http://www.geometrictools.com/Documentation/Triangle/RightAngledTriangle.aspx,\
    \ the right angle triangle is obviously not right angled.\n<|/ c |>\n<| c |>\n\
    Thanks for the info. I added the link to my answer.\n<|/ c |>\n<| c |>\nI added\
    \ a JavaScript implementation below to implement the algorithm from Geometrictools.com.\
    \ Feel free to compare against it.\n<|/ c |>\n<| a |>\nHere's the JavaScript implementation\
    \ from Geometrictools.com - it returns true if the triangle is right-angled, false\
    \ otherwise:\n<code>\nfunction isRightAngled(a, b)\n{\n  var c = (a + b) * (a\
    \ + b + 1) * (b + a + 1);\n  var s = Math.sqrt(c - (b * b) * (c - a * a));\n \
    \ var result = (s === a) || (s === b) || (s === c);\n  return result;\n}", " \
    \   (a**2 + b**2 == c**2) or (a*b + a*c == b*c)\nend\n</code>\nThe function left_angle_triangle(a,\
    \ b, c) will return true if the three sides of a triangle are the same, or b is\
    \ the same, or c is the same.\nThe function right_angle_triangle(a, b, c) will\
    \ return true if the three sides of a triangle are the same, or a is the same,\
    \ or c is the same.\n<code>", "    if a * b > c * c\n        true\n    else\n\
    \        if b * c > a * a \n            true\n        else\n            if c *\
    \ c > b * b\n                true\n            else\n                false\n \
    \           end\n        end\n    end\nend\n</cell>\n<code language=julia-0.4>\n\
    right_angle_triangle.(3, 4, 5)\n</cell>\n<code language=julia-0.4>\nright_angle_triangle.(1,\
    \ 4, 3)\n</cell>\n<text>\nExercise: Find all right angle triangles in the given\
    \ triangle set. Test these functions with values from the book.", '  return a
    >= b and b >= c and abs(a - c) < b ', "    if b < c and a < c then\n        if\
    \ b == c then return true\n        else return false\n    else if b <= c or c\
    \ <= a then \n        return false\n    else \n        return true\n    end\n\
    end\n</code>\n<|/ a tags=ruby |>\n<| a dscore=1 |>\n<code>", "  # TODO: Use an\
    \ if-else statement to check if the triangle is right angled.\n  ((a == 0 and\
    \ b == 0) or (b == 0 and c == 0) or (c == 0 and a == 0))\nend", "  if a + b <\
    \ c or a + c < b or b + c < a\n    false\n  else\n    true\n  end\nend", "\tif\
    \ a == b or a == c or b == c\n\t\tputs \"All sides are equal except for a common\
    \ side which is common\"\n\t\treturn true\n\telse\n\t\treturn ((a + b > c and\
    \ b > a) or (b > a and b > c) or (c > a and c > b))\n\tend\nend", "  (a + b >\
    \ c) && (a + c > b) && (b + c > a)\nend", "    \n    ab = a**2 + b**2\n    if\
    \ ab != 0:\n        cd = c**2 + d**2\n        if cd == ab:\n            return\
    \ True\n        elif cd < ab:\n            return False\n        else:\n     \
    \       return True\n    else:\n        return True\n    \n    ", "  a == b and\
    \ b == c or a == c and b == c or b == a and c == a or c == b and a == b\nend",
  "  (a >= 0 and b >= 0 and c >= 0 and a + b + c == 100)\nend", "  # Check that the\
    \ lengths are non-zero.\n  if a == 0 || b == 0 || c == 0 then\n    return false\n\
    \  end\n  # Use Pythagorus formula to determine if a triangle is right angled.\n\
    \  r_square = math.sqrt(a**2 + b**2 + c**2)\n  if r_square < 1 then\n    return\
    \ false\n  end\n  \n  # The hypotenuse of a right angled triangle is twice the\
    \ hypotenuse of \n  # the adjacent sides.\n  r_hypotenuse = math.sqrt(a**2+b**2)\n\
    \  if r_hypotenuse < 1 then\n    return false\n  end\n  # The area of a right\
    \ angled triangle is hypotenuse/2, rounded up.\n  r_area = r_hypotenuse/2\n  \n\
    \  # If r_area is divisible by 90 the triangle is right angled.\n  if r_area %\
    \ 90 then\n    return true\n  end\n  \n  # If the area is even, there are two\
    \ solutions.\n  if r_area % 2 = 0 then\n    return true\n  end\n  \n  # If the\
    \ area is odd, the triangle is not right angled.\n  return false\nend\n</cell>\n\
    <code language=julia-0.6>", "  return (a * b) == (c * b)\nend", "  return ( b\
    \ > c and b > a ) or ( c > a and c > b ) or ( a > b and a > c )\nend", "  a >\
    \ b and b > c and c > a and b**2 + c**2 <= a*c\nend", "    if a + b > c\n    \
    \    a == c or b == c or a == b\n        return true\n    false\nend", "  if a\
    \ + b > c\n    a + b\n  else\n    c + b\n  end\nend", "  return (a**2 - b**2 -\
    \ c**2 == 0) or \n        ((b**2 - c**2 == 0) and (a**2 + c**2 == b))\nend", " \
    \ return (b==c or a==c or b==a or c==a)\nend", "\treturn (a > b and a > c) or\
    \ (a == b and c == b)\nend", "  (a >= 0 and b >= 0 and c >= 0\n   or b >= 0 and\
    \ c >= 0 and a >= 0\n   or c >= 0 and a >= 0 and b >= 0\n   or b >= 0 and c >=\
    \ 0 and a >= 0\n   or c >= 0 and b >= 0 and a >= 0\n   or c >= 0 and b >= 0 and\
    \ a >= 0)\nend\n  ", "  triangle(a, b, c)\n  is_right_angle(a, b, c)\nend", " \
    \ if b**2 - 4*a*c > 0\n  then \n    true\n  else\n    false\n  end\nend", "  (b\
    \ * b) - (4 * c * c)  <= 0\nend", "  (a >= 0 and b >= 0 and c >= 0 and (a+b+c)\
    \ == 180)\nend", '  triangle_side_length(a, b, c)', "  if(b <= a or c <= a or\
    \ c <= b) \n    puts \"Sorry triangles cannot be right angled.\"\n  elsif(b ==\
    \ a or c == b or c == a)\n    puts \"Sorry triangles cannot be right angled.\"\
    \n  else\n    puts \"true\"\n  end\nend", "  sides = [a, b, c]\n  min_length =\
    \ float (Math.min (Math.abs (a), Math.abs (b), Math.abs (c)))\n  return min_length\
    \ == math.sqrt (min_length * min_length - sides.reduce (Math::pow))\nend", " \
    \   if a == 0 and b == 0 and c == 0\n        return true\n    \n    if a == 0\
    \ and b != 0 and c != 0\n        return false\n    \n    if a != 0 and b != 0\
    \ and c != 0\n        return false\n    \n    if a == b == c\n        return true\n\
    \    \n    return false\nend", '  return (b**2 - 4 * a * c) == 0 or ((b**2 - 4
    * a * c) != 0 and ((b**2 - 4*a*c) % 360) == 0)', "  case a * b > c * b \n  when\
    \ true then true \n  when false then false\n  else false\n  end\nend\n</cell>\n\
    <code language=julia-1.5>\nright_angle_triangle(4, 4, 5)\n</cell>\n<code language=julia-1.5>\n\
    right_angle_triangle(4, 5, 4)\n</cell>\n<code language=julia-1.5>\nright_angle_triangle(4,\
    \ 4, 6)\n</cell>\n<code language=julia-1.5>\nright_angle_triangle(1, 1, 1)\n</cell>\n\
    <code language=julia-1.5>\nright_angle_triangle(2, 3, 2)\n</cell>\n<code language=julia-1.5>\n\
    right_angle_triangle(2, 3, 4)\n</cell>\n<code language=julia-1.5>\nright_angle_triangle(2,\
    \ 3, 5)\n</cell>\n<code language=julia-1.5>\nright_angle_triangle(2, 3, 6)\n</cell>\n\
    <code language=julia-1.5>\nright_angle_triangle(6, 5, 2)\n</cell>\n<code language=julia-1.5>\n\
    right_angle_triangle(5, 6, 2)\n</cell>\n<code language=julia-1.5>\nright_angle_triangle(3,\
    \ 5, 4)\n</cell>\n<code language=julia-1.5>\nright_angle_triangle(8, 2, 3)\n</cell>\n\
    <code language=julia-1.5>\nright_angle_triangle(7, 1, 4)\n</cell>\n<code language=julia-1.5>\n\
    right_angle_triangle(8, 5, 3)\n</cell>\n<code language=julia-1.5>\nright_angle_triangle(9,\
    \ 3, 4)\n</cell>\n<code language=julia-1.5>\nright_angle_triangle(3, 7, 6)\n</cell>\n\
    <code language=julia-1.5>\nright_angle_triangle(8, 3, 1)\n</cell>\n<code language=julia-1.5>\n\
    right_angle_triangle(5, 1, 4)\n</cell>\n<code language=julia-1.5>\nright_angle_triangle(5,\
    \ 2, 6)\n</cell>\n<code language=julia-1.5>\nright_angle_triangle(6, 2, 1)\n</cell>\n\
    <code language=julia-1.5>\nright_angle_triangle(9, 5, 4)\n</cell>\n<code language=julia-1.5>\n\
    right_angle_triangle(9, 3, 6)\n</cell>\n<code language=julia-1.5>\nright_angle_triangle(6,\
    \ 2, 9)\n</cell>\n<code language=julia-1.5>\nright_angle_triangle(8, 5, 9)\n</cell>\n\
    <code language=julia-1.5>\nright_angle_triangle(7, 1, 6)\n</cell>\n<code language=julia-1.5>\n\
    right_angle_triangle(7, 2, 5)\n</cell>\n<code language=julia-1.5>\nright_angle_triangle(7,\
    \ 7, 1)\n</cell>\n<code language=julia-1.5>\nright_", "    sideA = abs(a-b)\n\
    \    sideB = abs(b-c)\n    sideC = abs(c-a)", "    if a == 0 or (b**2) - (4*a*c)\
    \ < 0:\n        return False\n    else:\n        return True", "  (a + b >= c)\
    \ && (a + c >= b) && (b + c >= a)\nend", "    # Write your code here\n    if a\
    \ == b and a == c:\n        return True\n    elif a != b or b != c or c != a:\n\
    \        return False\n    return True", "  a == b or a == c or b == c\nend\n\
    </code>\n<|/ q |>\n<| a |>\n<code>", "\tputs \"a: \" + a.to_s + \", b: \" + b.to_s\
    \ + \", c: \" + c.to_s\n\tsides_a = Math.sqrt(a * a * 3.0 + b * b)\n\tsides_b\
    \ = Math.sqrt(c * c * 3.0 + a * a)\n\tsides_c = Math.sqrt(c * c * 3.0 + b * b)\n\
    \tif sides_a < sides_b and sides_b < sides_c\n\t\treturn true\n\telse\n\t\treturn\
    \ false\nend", "  a == b or a == c or b == c\nend", "  return b**2+c**2 == (a*a+b*b-c*c)\
    \ or b**2+c**2 == (a*a-b*b+c*c) and ((a+b)**2+(c+a)**2) != 0\nend", "    ad =\
    \ b*a-c*b\n    if ad > 0: return True\n    if ad < 0: return False", "  (b - a).zero?\
    \ && return false \n  (c - b).zero? && return false\n  Math.acos ((b * b) + (c\
    \ * c)).to_int > Pi\nend", "  ab = a * b\n  ac = a * c\n  ad = a * d\n  bc = b\
    \ * c\n  bd = b * d\n  cd = c * d\n  return (((ab > ac) and (ab > ad)) and (ac\
    \ > bc)\n      and (ad > bd)\n      and (ac > bc)\n      and (ad > bd))\nend",
  "    d_x = abs(b-c)\n    d_y = abs(a-c)\n    d_z = abs(b-a)\n    \n    if d_x >\
    \ d_y and d_x > d_z:\n        return true\n    elif d_y > d_z:\n        return\
    \ true\n    else:\n        return false\n    \n</cell>\n<cell>", "  return ( (a\
    \ > b and a > c) or (a == b and c == b) or (a == c and b == c) )\nend", "  case\
    \ a <= 0 or b <= 0 or c <= 0\n  when true\n    false\n  when a == b\n    c > 0\n\
    \  when b == c\n    a > 0\n  when c == a or c == b or c == (a + b)\n    false\n\
    \  else\n    (((a + b) - c) % (b - a)) == 0 or (((a + b) - c) % (b - a))\nend",
  "  if a + b > c\n    return false\n  end\n  if a + c > b\n    return true\n  end\n\
    \  if b + c > a\n    return true\n  end\n  return false\nend", "  \n  # Write\
    \ your code here.\n  a = float(a)\n  b = float(b)\n  c = float(c)\n  if(a + b\
    \ > c):\n    return False\n  elif(a + b < c):\n    return True\n  else:\n    if(a\
    \ + c > b):\n      return False\n    elif(a + c < b):\n      return True\n   \
    \ else:\n      if(b + c > a):\n        return False\n      elif(b + c < a):\n\
    \        return True\n      else:\n        if(b + c > a):\n          return True\n\
    \        elif(b + c < a):\n          return False\n        ", "  right_side =\
    \ 0\n  if b >= c\n    if b < c\n      if a + c > b\n        right_side = 1\n \
    \     else\n        if a + c > b + b\n          right_side = 2\n        else\n\
    \          if a + b > c + c\n            right_side = 3\n          else\n    \
    \        right_side = 4\n        end\n      end\n    else\n      if a + b > c\n\
    \        right_side = 1\n      else\n        if a + b > c + c\n          right_side\
    \ = 2\n        else\n          if a + c > b + b\n            right_side = 3\n\
    \          else\n            right_side = 4\n        end\n      end\n    end\n\
    \  else\n    if b < c\n      if a + c > b\n        right_side = 1\n      else\n\
    \        if a + c > b + b\n          right_side = 2\n        else\n          if\
    \ a + b > c + c\n            right_side = 3\n          else\n            right_side\
    \ = 4\n        end\n      end\n    else\n      if a + b > c\n        right_side\
    \ = 1\n      else\n        if a + b > c + c\n          right_side = 2\n      \
    \  else\n          if a + c > b + b\n            right_side = 3\n          else\n\
    \            right_side = 4\n        end\n      end\n    end\n  end", "  \n  \n\
    end", "  is_triangle(a, b, c) ? true : \n    is_triangle(a, c, b) ? true :\n \
    \   is_triangle(b, a, c) ? true :\n    false\nend", "    # write your code here\n\
    \    if a >= b >= c\n        return true\n    end", "  if a == 0 and b > 0 and\
    \ c > 0 then return false\n  if a == 0 and b > 0 and c < 0 then return false\n\
    \  if a == 0 and b < 0 and c > 0 then return false\n  if a == 0 and b < 0 and\
    \ c < 0 then return false\n  if a == 0 and b > 0 and c == 0 then return true\n\
    \  if a == 0 and b < 0 and c == 0 then return true\n  if a == 0 and b > 0 and\
    \ c == 0 then return true\n  if a == 0 and b < 0 and c == 0 then return true\n\
    \  if a == b and b == c and c == a  then return false\n  if a == 0 and b > 0 and\
    \ c == 0  then return true\n  if a == 0 and b < 0 and c == 0  then return true\n\
    \  if a == 0 and b > 0 and c == 0  then return true\n  if a == 0 and b < 0 and\
    \ c == 0  then return true\n  if a == b and b == 0 and c == a  then return false\n\
    \  return true\nend", "  return (b ** 2 + c ** 2 - (a * c) ** 2) < 0\nend ", "\t\
    a * b > c\nend", "  a==b || a==c || b==c || ((a>b) && (b>c) && (c>a))\nend", " \
    \ return ((b - a) * (c - b) ==\n          (c - a) * (b - a))\nend", "  (a, b)\
    \ = normalize(a, b)\n  (c, a) = normalize(c, a)\n  \n  nab = norm (a - b)\n  nac\
    \ = norm (a - c)\n  nac = norm (b - c)\n  return (nab >= nac) and (nab >= 0)\n\
    end", "  a==b or a==c or b==c ? false : (a==b and b==c) ? true : (a==b or a==c)\
    \ ? true : false\nend", "\treturn ((a**2 + b**2 <= c**2) and\n\t\t\t((a**2 + c**2\
    \ <= b**2) or\n\t\t\t (a**2 <= c**2 <= b**2))", "  triangle_side_length(a, b,\
    \ c)\n  return triangle_side_length(a, b, c) == triangle_side_length(b, a, c)\n\
    end\n</cell>\n<code language=julia-0.3>", "    if a == 0 and b == 0 and c == 0\n\
    \        true\n    else\n        if a == 0 and b == c and c == -b\n          \
    \  true\n        else\n            if a == 0 and b != c and b != -c\n        \
    \        true\n            else\n                if a != 0 and b != 0 and c !=\
    \ 0\n                    true\n                else\n                    if a\
    \ != 0 and b == 0 and c == -a/b\n                        true\n              \
    \      else\n                        if a == 0 and b != 0 and c != 0\n       \
    \                     true\n                        else\n                   \
    \         if a != 0 and b != 0 and c == 0\n                                true\n\
    \                        end\n                    end\n                end\n \
    \           end\n        end\n    end\nend\n</code>\n<|/ a |>\n<| c |>\nThis is\
    \ just what I was looking for.  Very simple and elegant.  Thank you!\n<|/ c |>\n\
    <| a dscore=4 |>\n<code>", "  (a == b) or (a == c) or (b == c)\nend", "  if a\
    \ == b && b == c || a == c && c == b\n    return true\n  else\n    return false\n\
    end", "    (a-b) * (c-a) <= 0\nend", "  x = (a+b)**0.5\n  y = (b+c)**0.5\n  z\
    \ = (c+a)**0.5\n  d = math.sqrt(x**2+y**2+z**2)\n  return d > math.sqrt((x-1)**2+(y-1)**2+(z-1)**2)\n\
    end", "  if a < b and b < c and a * b == c * b then return true\n  else return\
    \ false\nend", "  return ( a + b > c ) or ( a + c > b )\nend", "  b <= a\n  c\
    \ <= b\n  a + b > c\n  a + c > b\n  c + b > a\n  return a + b == c + b\nend",
  "  return (b**2 + c**2 - a**2) ** 0.5 == 0 \nend", "    # Write your code here\n\
    \    if a * b * c == a * b * c + a * b + a * c\n        return true\n    return\
    \ false", "  a == b or a == c\nend", "\ta = float(a)\n\tb = float(b)\n\tc = float(c)\n\
    \tif ((a * b) == (c * a))\n\t\treturn True\n\treturn False", "  return b == 0\
    \ and (abs(a * b - c * c) > abs(a * c - b * b)) or \\\n      a == 0 and (abs(b\
    \ * b - a * c) > abs(a * c - b * b)) or \\\n      c == 0 and (abs(b * b - a *\
    \ a) > abs(a * c - b * b))", "  ab = [a, b]\n  bc = [b, c]\n  ac = [a, c]\n  ab.each\
    \ {|e| return false if e > b or e < a}\n  bc.each {|e| return false if e > c or\
    \ e < b}\n  ac.each {|e| return false if e > a or e < c}\n  true\nend", "  (b**2).to_s\
    \ == ((a**2).to_s + (c**2).to_s).to_s\nend", "  sides = [a, b, c]\n  is_right_angled_triangle\
    \ = sides.all? { |side| \n    triangle_side(side, sides[1], sides[2]).positive?\
    \ \n  } \n  is_right_angled_triangle\nend", "    difference = (a * a + b * b)\
    \ - Math.sqrt((b * b) - (a * a))\n    if difference < 0\n        difference =\
    \ -difference\n    \n    if a != b\n        difference /= a\n    \n    return\
    \ difference < 0\nend", "  if ((a + b > c) and (b + c > a)) or ((a + c > b) and\
    \ (c + b > a))\n      return true\n  else\n      return false\nend\n</code>\n\
    <|/ a dscore=0 tags=ruby,ruby-on-rails,algorithm,math |>\n<| a tags=ruby,ruby-on-rails,algorithm,math\
    \ dscore=0 |>\nThis is an old post so I'm gonna add some Ruby code to show how\
    \ I solved the problem.\n<code>", "    if a == b or a == c or b == c\n       \
    \ return true\n    if a == b\n        return false\n    if a == c\n        return\
    \ false\n    if b == c\n        return false\n    \n    d_ab = a - b\n    d_ac\
    \ = a - c\n    d_bc = b - c\n    \n    d_ab_2 = d_ab * d_ab\n    d_ac_2 = d_ac\
    \ * d_ac\n    d_bc_2 = d_bc * d_bc\n    \n    d_ab_3 = d_ab_2 * d_ab\n    d_ac_3\
    \ = d_ac_2 * d_ac\n    d_bc_3 = d_bc_2 * d_bc\n    \n    d_ab_4 = d_ab_3 * d_ab\n\
    \    d_ac_4 = d_ac_3 * d_ac\n    d_bc_4 = d_bc_3 * d_bc\n    \n    d_ab_5 = d_ab_4\
    \ * d_ab\n    d_ac_5 = d_ac_4 * d_ac\n    d_bc_5 = d_bc_4 * d_bc\n    \n    d_ab_6\
    \ = d_ab_5 * d_ab\n    d_ac_6 = d_ac_5 * d_ac\n    d_bc_6 = d_bc_5 * d_bc\n  \
    \  \n    d_ab_7 = d_ab_6 * d_ab\n    d_ac_7 = d_ac_6 * d_ac\n    d_bc_7 = d_bc_6\
    \ * d_bc\n    \n    d_ab_8 = d_ab_7 * d_ab\n    d_ac_8 = d_ac_7 * d_ac\n    d_bc_8\
    \ = d_bc_7 * d_bc\n    \n    d_ab_9 = d_ab_8 * d_ab\n    d_ac_9 = d_ac_8 * d_ac\n\
    \    d_bc_9 = d_bc_8 * d_bc\n    \n    d_ab_10 = d_ab_9 * d_ab\n    d_ac_10 =\
    \ d_ac_9 * d_ac\n    d_bc_10 = d_bc_9 * d_bc\n    \n    d_ab_11 = d_ab_10 * d_ab\n\
    \    d_ac_11 = d_ac_10 * d_ac\n    d_bc_11 = d_bc_10 * d_bc\n    \n    d_ab_12\
    \ = d_ab_11 * d_ab\n    d_ac_12 = d_ac_11 * d_ac\n    d_bc_12 = d_bc_11 * d_bc\n\
    \    \n    d_ab_13 = d_ab_12 * d_ab\n    d_ac_13 = d_ac_12 * d_ac\n    d_bc_13\
    \ = d_bc_12 * d_bc\n    \n    d_", "  ((a.cos + b.sin > c.cos + a.sin) or (a.cos\
    \ > b.sin + c.sin or (a.cos == b.cos and a.sin == c.sin)))\nend", "  if a * b\
    \ > c\n    true\n  else\n    b > c / a\n  end\nend", "  if((a > b) and (b > c)\
    \ and (c > a))\n    true\n  else\n    false\nend", "  return ((b - a) ^ (c - b))\
    \ < 0\nend", "\treturn (a == b or c == b or a == c or b == c)", "  ( a + b > c\
    \ ) && ( b + c > a ) && ( a + c > b )\nend\n</code>\n<|/ a |>\n<| c |>\nThis code\
    \ looks pretty neat. Could you elaborate on how this works? It looks like it might\
    \ be the best solution, but would like an explanation of how it works.\n<|/ c\
    \ |>\n<| c |>\nAdded comments, I hope that helps you understand what it is doing.\n\
    <|/ c |>\n<| c |>\nVery neat solution, thanks. One note, though: it is `<=` and\
    \ not `<`. With `<` you get `false` for even numbers, while with `<=` you get\
    \ `true` for `1, 3, 4` and `1, 4, 5`. Also, `==` should be used instead of `eq`,\
    \ since it makes more sense when you're comparing values.\n<|/ c |>\n<| c |>\n\
    Thanks again.  I agree that \"eq\" is better when you're comparing values.\n<|/\
    \ c |>\n<| c |>\nI think you're also missing a check for the case that all three\
    \ sides are equal. I think you meant `<` instead of `<=` there.\n<|/ c |>\n<|\
    \ a |>\n<code>", "  if b * c - a * c != 0\n    puts \"Sorry, that is not a right\
    \ angle triangle!\"\n    exit\n  end\n  if a == b and b == c\n    puts \"The triangle\
    \ is a right angle triangle!\"\n    exit\n  end\nend", "  return (b**2+c**2-a**2)\
    \ < 0\nend", "  (a * b) % 360 != 0\nend", "  ab_num = b*b - 4*a*c\n  abs_ab_num\
    \ = ab_num / float((b-a) * (c+a) )\n  if ab_num < 0 \n    return False\n  else\n\
    \    return True if abs_ab_num > 0 \n    else False", "  (a**2 + b**2 == c**2\
    \ and b**2 == a*c)\nend", "  (a * b > c) and ((a + b + c) == (sqrt(a ** 2 + b\
    \ ** 2)))\nend", "  ( a + b + c).modulo(2).zero? || a == (a + b).modulo(2).zero?\
    \ || a == (a + c).modulo(2).zero? || b == (a + b).modulo(2).zero? || b == (a +\
    \ c).modulo(2).zero? || c == (a + b).modulo(2).zero? || c == (a + c).modulo(2).zero?\
    \ || a == b || a == c || b == c || a == b || b == c || c == b || a == c || b ==\
    \ c || c == a\nend\n</code>\n<|/ a dscore=2 |>\n<| a dscore=0 tags=ruby,trigonometry\
    \ |>\nThis is my solution:\n<code>", "  if b - a > c - b\n  then return true\n\
    \  else return false\nend", "  if a + b >= c and b + c >= a and c + a >= b\n \
    \   true\n  else\n    false\n  end\nend\n</cell>\n<cell>", "  (a + b > c) && (b\
    \ > c) && (c > a)\nend", "  (a * b) == (a * c)\nend", "  ab, bc, ac = a - b, c\
    \ - b, c - a\n  abbc, abac = ab * ab, ab * bc, ab * ac\n  acbc, acab = ac * ac,\
    \ ac * bc, ac * ab\n  abac, abbc = abac - abbc, abac + abbc\n  (abac - acbc) *\
    \ (abac + abbc) - (abbc * acab)\nend", "    \n    # Only for positive numbers.\
    \ \n    if a < 0 or b < 0 or c < 0\n        return false\n    end\n    \n    #\
    \ Check if triangle is already right\n    \n    if a + b <= c and b + c <= a and\
    \ c + a <= b\n        return true\n    end\n    \n    # Check if the triangle\
    \ is right (diagonal)\n    \n    if a + b > c and b + c > a and c + a > b\n  \
    \      return true\n    end\n    \n    return false\nend\n</cell>\n<cell>", " \
    \ return (b-a)*(c-a)>0 and ((b-c)*(a-c))>=0 and ((b-a)*(c-a))>=0 and ((b-a)*(a-c))>=0\n\
    end", "    ab, bc, cd = b - a, c - b, d - c\n    return ab * cd - bc * ab == 0\n\
    end", "  if ((b - a + c) ** (0.5) == 0)\n    puts \"The triangle is colinear with\
    \ the axes of the rectangle!\"\n  else\n    puts \"The triangle is not a right-angled\
    \ triangle with a side. Try again!\"\n  end\nend\n</cell>\n<text>\nNotice how\
    \ we had to call right_angle_triangle(a,b,c) before we could call right_angle_triangle(b,c,d).\
    \ Let's try doing that now!", "  return ((b**2 - 4*a*c)/(b**2 - 4*a*b)).is_integer\n\
    end\n</cell>\n<code language=julia-1.4>", "  b_length = sqrt(b*b - a*c)\n  a_length\
    \ = sqrt(a*a - b*b)\n  c_length = sqrt(c*c - a*a)\n  return b_length > 0 and a_length\
    \ > 0 and c_length > 0 and (b_length == c_length or b_length == a_length)\nend",
  "  return (b-a)*(c-a)==(c+a)-a or b==a\nend", "\tif a + b > c\n\t\treturn false\n\
    \treturn ((b * b) - (4 * a * c)) > ((c * c) - (2 * a * b)) \nend", "    if a ==\
    \ 0 and b == 0 and c == 0\n        return true\n    if a == b and b == c\n   \
    \     return true\n    if a == 0 and b != 0 and c != 0\n        return false\n\
    \    if a != 0 and b != 0 and c != 0\n        return true\n    if a != b and b\
    \ != c and c != a\n        return false\n    return true\n</code>\n<|/ a tags=ruby\
    \ dscore=2 |>\n<| c |>\nI think this might be a better answer. Can you explain\
    \ why you chose to implement `right_angle_triangle` this way?\n<|/ c |>\n<| c\
    \ |>\n: I first implemented it this way because I didn't know about methods in\
    \ ruby, so I thought I would just write an answer and then see what others would\
    \ come up with.\n<|/ c |>\n<| c |>\nI guess the downside to this approach is that\
    \ you need to call it like this `right_angle_triangle(3,4,5)`, which might be\
    \ inconvenient. I'd probably just use an if-statement for this specific case.\
    \ Thanks for your input though, it's a good approach.\n<|/ c |>\n<| a dscore=2\
    \ |>\nYou can use the trigonometric functions in Math:\n<code>", "  a == b or\
    \ a == c or b == c\nend", "  return (b**2 - c**2) ** 0.5 == ( a + b ) * ( c +\
    \ b )\nend", "  (a + b) > c? (a + c) > b? (b + c) > a? true : false: false\nend",
  "  tri_angle = Math::PI - Math::acos((sqrt(a^2 + b^2 - c^2) / (a * b)) * a)\n  tri_angle\
    \ < Math::PI / 2 or tri_angle > 3 * Math::PI / 2\nend\n</code>\n<|/ a dscore=1\
    \ |>\n<| a tags=ruby |>\nA Ruby solution that doesn't require any conditionals\
    \ and doesn't require you to make an arbitrary precision floating point number.\n\
    <code>", '    return ((b ** 2) + ((9 * b * c) - (9 * a * c))) / ((b ** 2) + ((a
    ** 2) + (b ** 2)))', "  return (b ** 2) + ((2 * a * c) ** 2) - ((a * b) **2) \
    \ <= 0\nend", "  ra = abs(a - b)\n  rb = abs(b - c)\n  rc = abs(c - a)\n  return\
    \ ra + rb == rc\nend", "  ab, bc, cd = a, b, c\n  abc = ab + bc + cd\n  if abc\
    \ == 0 \n    return false\n  abd = ab - bc - cd\n  acd = ac - bc - ad\n  bcd =\
    \ bc - ad - bc\n  abde = ab + bd + e\n  acdf = ac - bd + f\n  bcdf = bc - df -\
    \ bc\n  cdfe = cd - fe - cd\n  abdf = ab - df - ab\n  cdef = cd - ef - cd\n  return\
    \ abde == acdf and abcd == bcdf and abdf == cdef\nend\n</cell>\n<cell>\n%debug\n\
    </cell>\n<cell>\n%time right_angle_triangle.call({}, 4, 3, 6)\n</cell>\n<cell>",
  "  if a <= 0 or b <= 0 or c <= 0 \n  or b == 0 or c == 0 \n  or b == c \n  or b\
    \ != a and b != c and c != a\n  then false\n  else (a == b and a == c) or (a ==\
    \ b or a == c and b == c)\nend\n</code>\n<|/ q |>\n<| c |>\nHINT: Your `right_angle_triangle`\
    \ checks the wrong sides.\n<|/ c |>\n<| c |>\nDo you know how to check if two\
    \ sides are equal? If so, then you have your answer in your last code block.\n\
    <|/ c |>\n<| a tags=ruby,recursion,ruby-on-rails |>\nAssuming you know how to\
    \ check whether two sides are equal, you can use a recursive function to solve\
    \ this. The function checks whether a triangle is valid by testing all cases of\
    \ lengths and whether they are equal.\n<code>", "  return (b ** 2 == (c - a) *\
    \ (a - b)) and (b ** 2 < (a - c) * (b - c))\nend", "  if((b**2) + (c**2) - (a**2))\
    \ < 0\n    puts \"false\"\n  else\n    puts \"true\"\n  end\nend\n</cell>\n<cell>",
  "  return (b**2 - a**2 == c**2 - b**2 + a*c**2 > 0)\nend", "  \n  sides = [a, b,\
    \ c]\n  \n  for i in 0...sides.size\n    \n    if sides[i] == sides[i + 1]\n \
    \     return false\n    \n  end\n  return true\nend\n</cell>\n<cell>\n%pushnote\
    \ is_right_angle_triangle completed.", "  if(a == b && b == c) return true\n \
    \ if((a != b && b != c) || (a != c && c != b)) return false\n  return ((a == b)\
    \ || (a == c) || (b == c))\nend", "\tif((b * b) - (4 * a * c) == 0)\n\t\treturn\
    \ true\n\treturn false\nend", "  # Write your code here.\n  if a * b * c == 0\
    \ \n  \treturn true\n  \treturn false\nend", "  triangle_sides(a, b, c)\n  return\
    \ triangle_sides(b, c, a).include?(:right)\nend", "  return (b <= c and (b <=\
    \ a or c <= a))\nend", "  right_triangle = (a.abs < (b.abs + c.abs))\n  right_triangle\
    \ = right_triangle || (a.abs == b.abs && b.abs == c.abs)\n  right_triangle = right_triangle\
    \ || (a.abs == b.abs && c.abs == a.abs)\n  right_triangle = right_triangle ||\
    \ (a.abs == c.abs && b.abs == c.abs)\n  right_triangle = right_triangle || (a.abs\
    \ == c.abs && c.abs == b.abs)\n  right_triangle = right_triangle || (a.abs ==\
    \ b.abs && b.abs == a.abs)\n  right_triangle = right_triangle || (a.abs == b.abs\
    \ && b.abs == c.abs)\n  right_triangle = right_triangle || (a.abs == b.abs &&\
    \ c.abs == b.abs)\n  right_triangle = right_triangle || (a.abs == c.abs && c.abs\
    \ == b.abs)\n  right_triangle = right_triangle || (a.abs == c.abs && c.abs ==\
    \ a.abs)\n  right_triangle = right_triangle || (a.abs == b.abs && b.abs == a.abs)\n\
    \  right_triangle = right_triangle || (a.abs == b.abs && b.abs == c.abs)\n  right_triangle\
    \ = right_triangle || (a.abs == c.abs && c.abs == a.abs)\n  right_triangle = right_triangle\
    \ || (a.abs == c.abs && c.abs == b.abs)\n  right_triangle = right_triangle ||\
    \ (b.abs == c.abs && c.abs == a.abs)\n  right_triangle = right_triangle || (b.abs\
    \ == c.abs && c.abs == b.abs)\n  right_triangle = right_triangle || (b.abs ==\
    \ a.abs && c.abs == b.abs)\n  right_triangle = right_triangle || (b.abs == a.abs\
    \ && c.abs == c.abs)\n  right_triangle = right_triangle || (b.abs == b.abs &&\
    \ a.abs == c.abs)\n  right_triangle = right_triangle || (b.abs == b.abs && a.abs\
    \ == a.abs)\n  right_triangle = right_triangle || (b.abs == b.abs && a.abs ==\
    \ c.abs)\n  right_triangle = right_triangle || (b.abs == a.abs && c.abs == a.abs)\n\
    \  right_triangle = right_triangle || (b.abs == a.abs && c.abs == c.abs)\n  right_triangle\
    \ = right_triangle || (b.abs == c.abs && a.abs == a.abs)\n  right_triangle = right_triangle\
    \ || (b.abs == c.abs && ", "    # Write your solution here\n    if a > b and a\
    \ > c and b > c\n        true\n    else\n        false\n    end\nend\n</code>\n\
    <|/ a tags=ruby,ruby-on-rails |>\n<| c |>\nThis is good, but if you need to do\
    \ this with more arguments you would need to write `...(a, b, c) && ...(b, c,\
    \ a)`, etc. Also this doesn't take into account that the triangle could be a right\
    \ triangle or equilateral triangle, or something like that.\n<|/ c |>\n<| a dscore=1\
    \ |>\n<code>", "  return a == b and b == c or a == c and b == c or b == a and\
    \ c == a\nend", "  ( a + b ) > c && ( b + c ) > a && ( c + a ) > b\nend\n</code>\n\
    <|/ a tags=ruby,ruby-on-rails-3,ruby-on-rails,erb,ruby-on-rails-3.1 dscore=3 |>\n\
    <| a dscore=2 tags=ruby,ruby-on-rails-3,ruby-on-rails,erb,ruby-on-rails-3.1 |>\n\
    <code>", "  sides = [a, b, c].sort\n  return sides[0] == sides[1] or sides[0]\
    \ == sides[2]\nend", "  (c-a, b-(c-a), a-b) <=> (b+a)-(a+c), (a+c)-(c+b), (c+b)-a\n\
    \  a, b, c <=> a > b and a > c\n  true\nend", "  return (b ** 2 + c ** 2 == (a**2\
    \ + b**2 - c**2)) \nend", "  a == 0 || b == 0 || c == 0 || a > b || a > c || b\
    \ > c\nend", "  ab = (b - a)\n  ac = (c - a)", "  triangle_side(a, b) == triangle_side(b,\
    \ c)\nend", "  return (b**2 - a**2)**0.5 >= (c**2 - b**2)**0.5\nend", "  case\
    \ a * b * c\n    when 0\n      false\n    when 1\n      true\n    when -1\n  \
    \    true\n    when a * b\n      a == c\n    when a * b * c\n      a == b or a\
    \ == c\n    else\n      false\n  end\nend\n</cell>\n<cell>", "    left_side =\
    \ (a, b)\n    right_side = (c, b)\n    \n    triangle_right_side = left_side +\
    \ right_side\n    triangle_left_side = right_side + left_side\n    \n    return\
    \ triangle_left_side.sort[0] == triangle_right_side.sort[0]\nend\n</cell>\n<code\
    \ language=julia-1.4>", "  (a * b + c * sqrt ((a*a + b*b + c*c)) ** .5) == 0\n\
    end\n</cell>\n<text>\nGiven the lengths of the sides of a triangle, return True\
    \ if the triangle is equilateral, False otherwise. For example, are the following\
    \ triangle equilateral?"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
