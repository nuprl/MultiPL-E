name: HumanEval_114_minSubArraySum
language: rb
prompt: "# Given an array of integers nums, find the minimum sum of any non-empty\
  \ sub-array\n# of nums.\n# Example\n# >>> minSubArraySum.call([2, 3, 4, 1, 2, 4])\n\
  # 1\n# >>> minSubArraySum.call([-1, -2, -3])\n# -6\ndef minSubArraySum(nums)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_minSubArraySum\n\
  \    candidate = method(:minSubArraySum)\n    assert_equal(1, candidate.call([2,\
  \ 3, 4, 1, 2, 4]))\n    assert_equal(-6, candidate.call([-1, -2, -3]))\n    assert_equal(-14,\
  \ candidate.call([-1, -2, -3, 2, -10]))\n    assert_equal(-9999999999999999, candidate.call([-9999999999999999]))\n\
  \    assert_equal(0, candidate.call([0, 10, 20, 1000000]))\n    assert_equal(-6,\
  \ candidate.call([-1, -2, -3, 10, -5]))\n    assert_equal(-6, candidate.call([100,\
  \ -1, -2, -3, 10, -5]))\n    assert_equal(3, candidate.call([10, 11, 13, 8, 3, 4]))\n\
  \    assert_equal(-33, candidate.call([100, -33, 32, -1, 0, -2]))\n    assert_equal(-10,\
  \ candidate.call([-10]))\n    assert_equal(7, candidate.call([7]))\n    assert_equal(-1,\
  \ candidate.call([1, -1]))\n  end\nend\n"
completions: ["  nums.map{|x| x-=0 if x<0}.min\nend", "  nums.sort.each_with_index\
    \ do |n,i|\n    if n > 0\n      min = nums.slice!(i)\n      nums.each_index do\
    \ |i|\n        if nums[i] > min then\n          min = nums[i]\n        end\n \
    \     end\n      min\n    end\n  end\nend", "    nums.length < 1 ? \"Not enough\
    \ numbers\" : minSubArraySum(Array[Int](nums))\n    nums.dropWhile(_ < 0).toArray.sum\n\
    end\n</cell>\n<code language=julia-0.5>", "  nums.each do |x|\n    min = nil\n\
    \    (min ||= x) + 1 while min < x && (min = x - min)\n  end\n  min\nend", " \
    \ min, max = nums.min, nums.max\n  sum =  min + max\n  for i in (0...nums.size-1)\
    \ do\n    min += nums[i]\n    max -= nums[i]\n    sum += min\n  end\n  sum\nend",
  "    minimum = nil\n    sum = 0\n    \n    loop do\n        sum = sum + nums.shift\n\
    \        break if nums.empty?\n        minimum = sum if sum < minimum || sum ==\
    \ minimum\n    end\n    \n    return minimum\nend\n</cell>\n<code language=julia-1.5>\n\
    minSubArraySum([-1, -2, -3])\n</cell>\n<code language=julia-1.5>\nminSubArraySum([-1,\
    \ 2, -3])\n</cell>\n<text>\nGiven an array of integers nums, find the maximum\
    \ product of any subarray of nums.\nExample\n>>> maxProduct.call([2, 3, 4, 1,\
    \ 2, 4])\n24\n>>> maxProduct.call([-1, -2, -3])\n-6", "  return minimumSubArraySum(nums,\
    \ 0)\nend", "\tn = nums.size\n\tif n == 0\n\t\treturn 0\n\t\n\tmin_sum = nums[0]\n\
    \t\n\tfor i in 1..n\n\t\tmin_sum = min_sum + nums[i]\n\t\tif min_sum > nums[n-1]\n\
    \t\t\tmin_sum = nums[n-1]\n\t\tend\n\t\n\treturn min_sum\nend", "\tsum = 0\n\t\
    n = nums.length\n\tmin = nums[0]\n\tfor i in 1..n\n\t\tsum +=  (nums[i] - min)\n\
    \t\tif (sum < min)\n\t\t\tmin = sum\n\tsum\nend", "    sum = 0\n    begin = 0\n\
    \    end = nums.length - 1\n    while begin < end do\n        sum += nums[begin]\n\
    \        begin = begin + 1\n        end = end - 1\n    end\n    return sum\nend",
  "  sum = 0 \n  nums.each do |n|\n    sum += n\n  end\n  sum\nend\n</code>\n<|/ a\
    \ dscore=0 |>\n<| c |>\nWhat about `[1,2,-3,-2,-4]`?\n<|/ c |>\n<| a dscore=0\
    \ |>\n<code>", "    smallest_sum = nums.reduce(0) {|x, y| x + y}\n    smallest_sum\
    \ = smallest_sum.nonzero? ? smallest_sum : 0\n    nums.each do |num|\n       \
    \ smallest_sum = smallest_sum - num if smallest_sum > num\n    end\n    smallest_sum\n\
    end", "    min = nil\n    i = nums.size\n    \n    # loop through all sub-arrays\
    \ of nums, \n    # and find the smallest sum.\n    while i > 0\n        min =\
    \ nums[0]\n        i = i-1\n        \n        # for each sub-array, loop through\
    \ it again and find \n        # smallest sum.\n        while i > 0\n         \
    \   min = min + nums[i]\n            i = i-1\n        end\n    end\n    \n   \
    \ min\nend", "  # TODO: Your code here.\n  return nil\nend", "  nums.each_index.min_by\
    \ { |i| nums[i + 1] - nums[i] }\nend\n</code>\n<|/ a tags=algorithm,ruby dscore=5\
    \ |>\n<| c |>\nMine is not O(n). Mine is O(n^2) (because of the nested loop).\
    \ O(n^2) is the best you can do.\n<|/ c |>\n<| c |>\nI agree. O(n^2) is not the\
    \ best you can do for this.\n<|/ c |>\n<| a dscore=4 |>\n<code>", "  return nums.inject(0,\
    \ :+).min_by(&:it1).last\nend\n</cell>\n<code language=julia-0.5>", "    minimum\
    \ = nums[0]\n    sum = 0\n    \n    for i in nums\n        if i >= 0\n       \
    \     sum += i\n        else\n            minimum = i\n            \n    return\
    \ minimum + sum\nend", "  return nums.reduce(&:+).min\nend", "  n = nums.size\n\
    \  min_sum = nil\n  \n  nums.each do |num|\n    mins = nil\n    i = n-1\n    \n\
    \    until i >= 0 and nums[i] < num\n      i -= 1\n    end\n    \n    until i\
    \ < 0 or nums[i] < num\n      mins = nil\n      \n      mins ||= nums[i+1]\n \
    \     mins -= nums[i]\n      \n      unless mins > min_sum\n        min_sum =\
    \ mins\n      end\n      \n      i -= 1\n    end\n  end\n  \n  min_sum\nend\n\
    </code>\n<|/ a tags=arrays,ruby,algorithm |>\n<| c |>\nI'm a little confused what\
    \ you are saying.  You say that \"it is necessary to iterate through the whole\
    \ array\", but your code only iterates over the first half of the array.  How\
    \ would you do this without iterating through the whole array?  Would you use\
    \ a for loop?  If so, how?\n<|/ c |>\n<| c |>\nI believe you are right.  My apologies.\
    \  I've updated the code accordingly.\n<|/ c |>\n<| a |>\n<code>", "  nums.reduce(:+)\n\
    end", "  result = nums.reduce(0, :<<)\n  loop do\n    min_sum = result\n    loop\
    \ do\n      result += nums.reduce(:<<)\n      break unless result < min_sum\n\
    \      result = result-nums.reduce(:<<)\n    end\n    break unless min_sum > result\n\
    \    result = min_sum\n  end\n  result\nend", "    return nil\nend", "  nums.reduce(0)\
    \ {|sum, value| return sum + value if sum < value }\nend", "  nums.sort.reverse\n\
    \  return nums.inject(:+)\nend", "  min = 0\n  n = nums.length\n  for i in 0..(n-1)\n\
    \    min = min + nums[i]\n    if min > nums[n-1]\n      min = nums[n-1]\n    end\n\
    \  end\n  min\nend", "  nums.min\nend", "  ans = -1\n  for x in nums\n    ans\
    \ = ans + x\n  end\n  return ans\nend", "  sum = nums.reduce(0, :+)\n  (nums.size).times\
    \ do\n    sum = nums.reduce { |sum, e| sum + e } if nums.any?\n  end\n  sum\n\
    end", "    nums.sort!\n    return nums.inject(:+)\nend", "    nums = nums.sort\n\
    \    s = nums[0]\n    ans = s\n    prev = nums[0]\n    \n    for n in nums[1..-1]\n\
    \        if n - prev > ans\n            ans = n - prev\n        prev = n\n   \
    \ end\n    ans\nend", "  # TODO: Write your code here.\n  minSum = nums.inject(0)\
    \ {|sum, i| sum + i}\n  (nums.size - 1).downto(0) {|i| minSum = minSum if nums[i]\
    \ <= nums[minSum]; minSum = i}\n  minSum\nend", "    sum = nums.reduce(:+)\n \
    \   minimum = sum\n    minimums.each_with_index do |number, index|\n        minimum\
    \ = minimum if number < minimum\n        minimums[index] = minimum\n    end\n\
    \    minimums.reduce(:+)\nend", "    \n    # Base case\n    if nums.empty?\n \
    \       return 0", '    minimum = 0', "  nums.reduce!{|sum, num| sum + num}\n\
    end", "    sum = 0\n    for i in 0...nums.size\n        if i > nums.size\n   \
    \         sum += nums[i]\n        else # i > nums.size\n            sum += nums[i]\
    \ + nums[i+1]\n    end\n    sum\nend\n</cell>\n<cell>\nminSubArraySum([1, 2, 3,\
    \ 4, 5, 6, 7])\n</cell>\n<cell>\nminSubArraySum.([2, 3, 4, 1, 2, 4])\n</cell>\n\
    <cell>\nminSubArraySum.([-1, -2, -3])\n</cell>\n<cell>\nminSubArraySum.([1, 2,\
    \ 3, 4, 5, 6, 7])\n</cell>\n<cell>\nminSubArraySum([4, 3, 7, 2])\n</cell>\n<cell>\n\
    minSubArraySum([-1, -2, -3, 4])\n</cell>\n<cell>\nminSubArraySum([-4, -3, -2,\
    \ -1, 1, 2])\n</cell>\n<cell>", "  n = nums.length\n  return if n == 0\n  minsum\
    \ = nums[0]\n  (minsum,subsum) = nums.partition { |x| x > 0? x : nil }\n  minsum\
    \ + minSubArraySum(subsum)\nend", "  # This should return 0 if all numbers are\
    \ 0.\n  return 0 if nums.empty? else nums.min { |a,b| a + b }\nend", "  min =\
    \ nums.reduce(:+)\n  nums.each do |num|\n    min = min - num\n  end\n  min\nend\n\
    </cell>\n<cell>", "  num = nums.reduce{|a,b| a+b}\n  i = 0\n  while i < nums.length\n\
    \    j =  i + 1\n    while j < nums.length && nums[j] <= num\n      j += 1\n \
    \   if j > i\n      num = nums[i] + nums[j]\n      i = j\n    else\n      i +=\
    \ 1\n    end\n  end\n  num\nend", "  # Find the sum of all numbers in the subarray\n\
    \  sum = 0\n  n = nums.length\n  for i in 0...n\n    sum = sum + nums[i]\n  end",
  "    \n    min_sum = nil\n    \n    until nums.empty? do\n        min_sum = nil\n\
    \        \n        nums.each do |i|\n            \n            current_sum = nums.sum\n\
    \            \n            if current_sum > min_sum\n                min_sum =\
    \ current_sum\n            end\n        end\n    end\n    \n    min_sum\nend",
  "    return nums.inject(:+)\nend", "  \n  # This is an alternative method\n  # that\
    \ does not use recursion (using while) \n  # which might be faster in some cases,\
    \ but\n  # I did not time it myself.\n  \n  # If no sub-array is formed, return\
    \ 0\n  return 0 if nums.empty? \n  \n  # Get the minimum number in the first sub-array\n\
    \  min = nums.first\n  \n  # If there is only one number, return it as the sum\
    \ of the whole array\n  return nums.sum if nums.length == 1\n  \n  # Get the minimum\
    \ sum in the sub-array\n  min_sum = nums[0] + minSubArraySum(nums[1..nums.length-1])\n\
    \  \n  # Return the minimum sum if any number in the sub-array is smaller than\
    \ the min \n  # number, otherwise return min\n  return min_sum if nums.any? {\
    \ |num| num < min }\nend\n</cell>\n<cell>", "\tmin_sum = nums[0]\n\tmin_max_sum\
    \ = nums[0]\n\tfor num in nums[1..-1]\n\t\tmax_sum = num\n\t\tmax_sum = num +\
    \ max_sum\n\t\tmin_sum = num - max_sum\n\t\tif min_sum < min_max_sum\n\t\t\tmin_max_sum\
    \ = min_sum\n\t\tend\n\tend\n\tmin_max_sum\nend", "  return minSubArraySumRecursive(nums,\
    \ 0, -1, 0)\nend", "  n = nums.length\n  \n  min_sum = nums[0]\n  \n  (0...n).each\
    \ do |i|\n    sub_sum = nums[i..n].inject(:+) - min_sum\n    min_sum = sub_sum\
    \ if sub_sum < min_sum\n  end\n  \n  min_sum\nend", "    min = nums.max\n    prev\
    \ = nums[0]\n    sum = 0\n    nums.each do |x|\n        sum += prev\n        min\
    \ = min if sum < x\n        prev = x if sum == x\n    end\n    min\nend", "  result\
    \ = 0\n  i = 0\n  while i < nums.length\n    j = i + 1\n    while j < nums.length\n\
    \      if nums[j] < 0\n        j = j + 1\n      else\n        result += nums[j]\n\
    \        j += 1\n    end\n    i += 1\n  end\n  return result\nend", "  min = Integer.MAX_VALUE\n\
    \  for x in nums\n    min = min > x ? min : x\n  end\n  min\nend", "  return min_sub_array_sum(nums,\
    \ 0, nums.length)\nend", "  nums.sort!\n  return nums[0] if nums.size < 3 else\
    \ nums.min { |a, b| a + b }\nend", "  nums.each do |num|\n    sum = 0\n    sum\
    \ -= num\n    sum += 1\n    sum %= num\n    break sum if sum == 0\n  end\nend\n\
    </cell>\n<cell>\nminSubArraySum.call([2, 3, 4, 1, 2, 4])\n</cell>\n<cell>\nminSubArraySum.call([-1,\
    \ -2, -3])\n</cell>\n<text>\nThe Python keyword break\nA keyword break is an exit\
    \ point from within a loop. The break keyword breaks out of the innermost loop,\
    \ skipping the rest of the loop.", "  return 0 unless nums.length > 0\n  return\
    \ nums.reduce(:+).min if nums.any? { |n| n.to_i != n }\n  nums.reduce(:+).min\
    \ - nums[0] if nums.size <= 2\nend", "  smallest = nums[0]\n  smallest_sum = 0\n\
    \  (min_val, min_idx) = nil\n  nums.each_with_index do |n, i|\n    if i < min_idx\n\
    \      min_val = n\n      min_idx = i\n    end\n    smallest_sum += n\n    smallest_sum\
    \ = smallest_sum.abs unless smallest_sum < smallest\n    smallest = smallest_sum\n\
    \  end\n  smallest_sum\nend", "  nums.each_index do |i|\n    min_so_far = nums[i]\n\
    \    j = i + 1\n    until j < nums.length do\n      min_so_far = min_so_far +\
    \ nums[j] if nums[j] < min_so_far\n      j += 1 unless j >= nums.length\n    end\n\
    \    yield min_so_far\n  end\nend", "  if nums.is_empty?\n    0\n  elsif nums.length\
    \ == 1\n    nums[0]\n  elsif nums.size == 1\n    nums[0] + minSubArraySum(nums[1..-1])\n\
    \  else\n    smallest = nums.sort\n    smallest_sum = -smallest[-1]\n    other_sum\
    \ = smallest_sum + minSubArraySum(smallest[0...-1]) + smallest[-1]\n    smallest_sum\
    \ < other_sum ? smallest_sum : other_sum\n  end\nend", "  nums.each_index {|i|\
    \ return i if nums[i] == 0}\n  nums.each do |n|\n    return n if n == 0\n    sum\
    \ = 0\n    n.times do |i|\n      sum += nums[i]\n    end\n    return sum if sum\
    \ < 0\n  end\n  0\nend", "  return nums.reduce do |a, b|\n    p a, b\n    (a ||\
    \ 0) + (b || 0)\n  end\nend", "  return nums.reduce(:+)\nend", "  minimum = -(2\
    \ ** 30)\n  for i in 0...nums.length - 1\n    minimum = nums[i] + minimum\n  end\n\
    \  return minimum\nend", '  nums.min', "  return nums.inject(0) {|min, i| min\
    \ += i if min.nil? || i > min }\nend", "\tmin_sum = nil\n\ti = 0\n\twhile i <\
    \ nums.length\n\t\tsum = nums[i]\n\t\ti += 1\n\t\twhile i < nums.length\n\t\t\t\
    sum += nums[i]\n\t\t\ti += 1\n\t\t\tmin_sum = sum if min_sum == nil || sum < min_sum\n\
    \t\tend\n\tend\n\tmin_sum\nend", "  return nums.inject([]) do |sum, num|\n   \
    \ sum += num\n    sum\n  end if nums.empty?\n  \n  result = nums.inject(0) do\
    \ |sum, num|\n    break if sum >= 0\n    sum += num\n    sum\n  end\n  \n  result\n\
    end", "  nums.each_with_index do |number, index|\n    next_num = nums[index +\
    \ 1] if index + 1 < nums.size\n    previous_num = nums[index - 1] if index > 0\n\
    \    number\n  end\nend", "  nums.inject{|m,x| m < x ? x : m}\nend", "  nums.sort!\n\
    \  return nums.reduce(:+).min\nend\n</cell>\n<code language=julia-1.5>", "  sum=0\n\
    \  min=0\n  max_num=nums[nums.length-1]\n  (0..nums.length-1).each do |i|\n  \
    \  sum+=nums[i]\n    if sum<min then\n      min=sum\n    end\n    if sum>max then\n\
    \      max=sum\n    end\n  end\n  min\nend", "    len = nums.count\n    minSum\
    \ = nums[0]\n    min = nums[0]\n    max = nums[0]\n    for num in nums\n     \
    \   sum += num\n        if sum < min\n            min = sum\n        if sum >\
    \ max\n            max = sum\n    max = nums[0]\n    for num in nums\n       \
    \ if num > max\n            max = num\n    if max >= min then\n        min = max\n\
    \    for num in nums\n        if num < min\n            min = num\n    return\
    \ min", "  return nums.reduce{|sum, elem| sum + elem}\nend\n</cell>\n<cell>\n\
    minSubArraySum([2, 3, 4, 1, 2, 4]) # 1\n</cell>\n<cell>\nminSubArraySum([-1, -2,\
    \ -3]) # -6\n</cell>\n<cell>\nnums.reduce{|sum, elem| sum + elem}\n</cell>\n<text>\n\
    map", "  \n  result = nums.inject{ |sum, elem| sum + elem }\n  \n  min = -Float::INFINITY\n\
    \  \n  until result.nil? or sum < min\n    \n    min.times do |i|\n      sum =\
    \ sum - nums[i]\n      if sum < min\n        min = sum\n      end\n    end\n \
    \   \n    result += nums.inject{ |sum, elem| sum + elem }\n  end\n  \n  min\n\
    end\n</cell>\n<code language=julia-1.5>\nminSubArraySum([2, 3, 4, 1, 2, 4])\n\
    </cell>\n<code language=julia-1.5>\nminSubArraySum([-1, -2, -3])\n</cell>\n<text>\n\
    Find the product of n numbers taken k at a time.", "  nums.reduce(:+).min\nend",
  "    count = 0\n    max_so_far = nums[0]\n    for num in nums\n        if num >\
    \ max_so_far\n            max_so_far = num\n        count += 1\n    return max_so_far\
    \ + count\n</code>\n<|/ a tags=ruby,algorithm dscore=1 |>\n<| c |>\nI think this\
    \ doesn't take into account the requirement for not being allowed to add extra\
    \ numbers to the sum\n<|/ c |>\n<| c |>\nHi John, I agree and this is what I was\
    \ thinking but I wasn't sure and I couldn't find a better way to solve it then\
    \ iterating through all the numbers (O(n)). The trick is that you only have to\
    \ go through each number once. Good luck!\n<|/ c |>\n<| a tags=ruby,algorithm\
    \ |>\nThe solution uses O(|n|) time and O(|n|) space:\n<code>", "  nums.reduce(:+)\n\
    end", "    arr = nums.sort_by { |n| n }\n    i = j = 0\n    (arr.length / 2).downto(0)\
    \ do |n|\n        if j == i\n            arr[j] += arr[i]\n            i -= 1\n\
    \        elsif arr[j] > arr[i]\n            j += 1\n        else\n           \
    \ i += 1\n        end\n    end\n    arr[i..j].inject(0) { |res, v| res + v }\n\
    end", "  arr = nums.sort\n  smallest = arr[0]\n  for i in 1..nums.length\n   \
    \ smallest = arr[i] - smallest\n  end\n  smallest\nend", "    \n    # Write your\
    \ code here.\n    minSum = nums[0]\n    for i in nums\n        if i < minSum\n\
    \            minSum = i\n    return minSum\n    ", "  min_sum = nil\n  cur_sum\
    \ = 0\n  \n  nums.each do |num|\n    min_sum = num if min_sum.nil?\n    cur_sum\
    \ += num\n    if cur_sum < min_sum \n      min_sum = cur_sum\n    end\n  end\n\
    \  \n  return min_sum\nend\n</cell>\n<code language=julia-1.0>\nminSubArraySum.call([2,\
    \ 3, 4, 1, 2, 4])\n</cell>\n<code language=julia-1.0>\nminSubArraySum.call([-1,\
    \ -2, -3])\n</cell>\n<code language=julia-1.0>\nfunction minSubArraySum(nums)\n\
    \  min_sum = nums[end]\n  \n  for i in nums[end:-1]\n    min_sum = min(min_sum,\
    \ i+nums[i+1:end])\n  end\n  return min_sum\nend\n</cell>\n<code language=julia-1.0>\n\
    minSubArraySum.call([-1, -2, -3])\n</cell>\n<code language=julia-1.0>", "  return\
    \ min_sub_array_sum(nums, 0, -1, nil)\nend", "    sum = 0\n    lenght = 0", " \
    \ min = Array.new\n  (0..nums.size).each do |i|\n    sum =  nums.max\n    sum\
    \ -= nums[i]\n    sum += i\n    min.push(sum)\n  end\n  min.min\nend", "  nums.sort!\n\
    \  nums.inject(0) { |sum, e| sum + e }\nend", "  return Solution.minimumSubArraySum(nums)\n\
    end", "  # Base case\n  if nums.size <= 1\n    return nums.first\n  # Recurse\n\
    \  min_sum = nums.first\n  num_rest = nums[1..-1]\n  min_sum = min_sum + minSubArraySum(num_rest)\n\
    end", "  minNum = nums.max\n  minSum = 0\n  nums.each do |num|\n    minSum = minSum\
    \ + num\n    if num < minNum\n      minNum = num\n    end\n  end\n  minSum\nend",
  "  return nums.inject(:+)\nend", "    nums.sort {|a,b| a <=> b}\n    smallest =\
    \ nums[0]\n    smallest_sum = 0\n    largest_sum = nums.last\n    largest_sum_pos\
    \ = 0\n    \n    (nums.size-1).times do |i|\n        smallest_sum = smallest_sum\
    \ + nums[i]\n        if smallest_sum > largest_sum\n            largest_sum =\
    \ smallest_sum\n            largest_sum_pos = i\n        end\n    end\n    \n\
    \    return smallest_sum\nend", "  min = Integer.new(nums[0])\n  for i in 0...nums.length-1\n\
    \    min = min.max( nums[i] + min )\n  end\n  return min\nend", "  return if nums.empty?\n\
    \  min = nums.first\n  for i in 1..nums.length - 1\n    current =  min + nums[i]\n\
    \    min      = current if current < min end\n  end\n  min\nend", "  minSum =\
    \ 0\n  nums.each do |n|\n    if minSum > n\n      minSum = n\n    end\n  end\n\
    \  return minSum\nend", "  return nums.reduce(:+)\nend", "  min = nums[0]\n  for\
    \ i in 1..nums.length - 1\n    min = min + (nums[i] - nums[i - 1]) / i\n  end\n\
    \  return min\nend", "  nums.sort {|a, b| return a - b }\n  sum = 0\n  i = 0\n\
    \  while i < nums.length\n    sum = sum + nums[i]\n    while sum > 0\n      i\
    \ -= 1\n      sum += nums[i]\n    end\n    i += 1\n  end\n  sum\nend\n</cell>\n\
    <text>\n6.7 Find the Second Largest Element", "  nums.each do |num|\n    min =\
    \ num\n    next if nums.count > 1\n    nums.each do |other|\n      min += other\
    \ if other > num\n    end\n    return min\n  end\nend\n</code>\n<|/ a |>\n<| a\
    \ |>\nThis is a classic algorithmic problem in computer science and is known as\
    \ the Traveling Salesman problem. Unfortunately, there is no known efficient solution\
    \ to this problem, so you may wish to use a different approach. The Wikipedia\
    \ article gives a good description of the algorithm and provides the following\
    \ pseudocode:\n<code>\nfunction TSP_solve(cities)\n  tsp = [cities.length]\n \
    \ tsp[0] = infinity\n  for i = 1 to cities.length\n    for j = 1 to i\n      if\
    \ cities[j] < tsp[i]\n        tsp[i] = cities[j]\n      else\n        tsp[j] =\
    \ min(tsp[j], tsp[i])\n    end\n  end\n  return tsp\nend\n</code>\n<|/ a tags=arrays,ruby,algorithm\
    \ dscore=2 |>\n<| c |>\nThis should be the accepted answer since it actually gives\
    \ an actual answer (for Ruby at least).\n<|/ c |>\n<| a tags=arrays,ruby,algorithm\
    \ |>\n<code>\nrequire 'set'", "  sum = 0\n  nums.each do |n|\n    if sum > n\n\
    \      sum -= n\n    end\n  end\n  sum\nend", "  return nums.reduce {|a,b| a +\
    \ (b<0 ? -b : b)}\nend\n</code>\n<|/ a tags=ruby,arrays dscore=2 |>\n<| a tags=ruby,arrays\
    \ dscore=2 |>\nHere's a solution I came up with for finding the minimum number\
    \ in an array:\n<code>", "  nums.each_with_index {|num, i| nums[i] = -num if num.negative?\
    \ }\n  nums.reduce(:+)\nend", "    nums.sort! # Sort the array\n    i = j = 0\n\
    \    sum = nums.reduce(0, :+) # Initialize the sum", "    nums.each do |num|\n\
    \        smallest_sum = -num\n        smallest_sum until num == smallest_sum\n\
    \    end\nend\n</code>\n<|/ a |>\n<| a |>\n<code>", "    # Write your code here.\n\
    \    minimum = nums[0]\n    minimum_i = 1\n    maximum_i = 0\n    maximum_j =\
    \ len(nums) - 1", "    return nums.sort.reduce(:+)\nend", "  nums = nums.sort\n\
    \  min = nums[0]\n  min = min + nums[0] if min > 0 else 0\n  nums.each do |num|\n\
    \    min = num + min if num > min\n  end\n  min\nend", "    \n    # Write your\
    \ code here.\n    sum_array = 0\n    \n    for i in range(0,len(nums)-1)\n   \
    \     sum_array += nums[i]\n        \n    \n    return sum_array\n    \n    \n\
    \    ", "  nums.each do |num|\n    break if sum == 0\n    sum += num\n  end\n\
    \  return sum\nend\n</cell>\n<cell>", "  nums.each do |num|\n    sub_sum = num\n\
    \    temp_sum = 0\n    sub_num = 1\n    temp_num = 1\n    while sub_sum >= temp_sum\n\
    \      temp_sum += sub_num\n      sub_sum += (sub_num * temp_num)\n      sub_num\
    \ *= nums[sub_num - 1]\n      temp_num *= nums[temp_num - 1]\n    end\n    if\
    \ sub_sum < temp_sum\n      temp_sum = sub_sum\n      sub_sum = temp_sum\n   \
    \ end\n    puts \"The minimum sum is #{sub_sum}\"\n  end\nend", '  return nums.inject(0,
    :+).min', "  sums = nums.reduce(:+)\n  nums.each do |i|\n    sums, n = sums, nums.index(i)\
    \ + 1\n  end\n  sums\nend", "  result = 0\n  n = nums.length\n  for i in 0...n\n\
    \    result += nums[i]\n    result -= nums.min\n  end\n  result\nend", "  nums.inject(0,\
    \ &:+)\n  nums.min\nend", "    nums.sort! # Sort the array first\n    min = nums[0]\n\
    \    max = nums[0]\n    sum = 0\n    i = 0\n    # Loop through each element to\
    \ find the max and min sums\n    while i < nums.length\n        sum += nums[i]\n\
    \        if sum < min\n            min = sum\n        elsif sum > max\n      \
    \      max = sum\n        end\n        i += 1\n    end", "  sum, idx = minSubArraySum_aux(0,\
    \ 0, nums)\n  sum\nend", "  result = nil\n  nums.each {|n| result ||= n}\n  result\n\
    end", "  nums.reduce! {|sum, el| sum + el}\nend", "  nums.each_index {|i|\n  \
    \  if nums[i] == 0\n      nums[i] = 1\n      return\n    end\n    left = 0\n \
    \   right = 0\n    while left < nums.length and right < nums.length\n      sum\
    \ = nums[left] + nums[right]\n      if sum < 0\n        nums[left] = 0\n     \
    \   left += 1\n      elsif sum > 0\n        nums[right] = 0\n        right +=\
    \ 1\n      else\n        nums[left], nums[right] = nums[right], nums[left]\n \
    \       left += 1\n        right += 1\n      end\n    end\n  }\n  nums.inject(0,\
    \ :+).min\nend", "  nums.to_a.reverse.inject(0) do |acc, n|\n    acc += n\n  \
    \  (acc -= n if n < 0).nonzero? || acc\n  end\nend", "  nums.reduce(:+)\nend",
  "  return -nums.reduce(:+)\nend", "  minimum_sum = nums[0]\n  minimum_sum2 = nums[0]\n\
    \  \n  for i in 1...nums.length\n    minimum = nums[i]\n    minimum2 = nums[i]\n\
    \    minimum = minimum + minimum2\n    \n    if minimum > minimum_sum\n      minimum_sum\
    \ = minimum\n    elsif minimum2 > minimum_sum2\n      minimum_sum2 = minimum2\n\
    \    end\n  end\n  \n  minimum_sum\nend", "  n = nums.length - 1\n  min = nums[n]\n\
    \  for i in n..nums.length - 1 do\n    min = min > nums[i] ? min : nums[i]\n \
    \ end\n  return min\nend", "  min = nil\n  sum = nil\n  nums.each do |n|\n   \
    \ sum += n\n    if min == nil || sum < min\n      min = sum\n    end\n  end\n\
    \  min\nend", "  sum = 0\n  for i in 0...nums.length-1\n    sum += nums[i]\n \
    \   return sum if sum < 0 else nil\nend", "  return nums.reduce(:+)\nend", " \
    \ nums.inject(0) { |memo, num| memo + num if num >= 0 }\nend", "  return nums.min.each_with_object(0,\
    \ &:sum)\nend", "  return nums.inject(0, :+)\nend\n</cell>\n<cell>\nminSubArraySum.call([2,\
    \ 3, 4, 1, 2, 4])\n</cell>\n<text>\nExercise\nCalculate the minimum sum of any\
    \ non-empty sub-array of nums given by nums.", "  return nums.reduce(:+)\nend",
  "  min, max_val, min_index = [], 0, 0\n  arr.each_with_index do |x, i|\n    if x\
    \ > max_val\n      max_val = x\n      min_index = i\n    end\n  end\n  for i in\
    \ 0..nums.length - 1\n    if nums[i] == max_val\n      min << min_val\n      max_val\
    \ -= min_val\n    else\n      min_val = nums[i]\n    end\n  end\n  min\nend\n\
    </code>\n<|/ a |>\n<| a dscore=0 tags=arrays,algorithm,ruby |>\n<code>", "  min_sum\
    \ = nums.reduce(:+)\n  nums.each do |n|\n    min_sum = min_sum - n if min_sum\
    \ < 0\n  end\n  min_sum\nend", "  return -nums.inject(:+).min\nend", "  sum =\
    \ 0\n  nums.each do |n|\n    sum += n\n  end\n  sum\nend\n</code>\n<|/ a dscore=3\
    \ |>\n<| c |>\nThanks for the answer. Could you please explain it more in detail?\
    \ Thanks a lot.\n<|/ c |>\n<| c |>\nI added the code in a gist, https://gist.github.com/miketheman/7068776\
    \ . The code is a bit verbose.\n<|/ c |>\n<| c |>\nI thought of something like\
    \ a binary search tree (which would give me O(logn) time complexity)? The first\
    \ element would be the minimum element and every next element would be the element\
    \ of the array that has maximum sum + the element of the array that has minimum\
    \ sum - the two elements of the binary search tree that I'm referring to would\
    \ be the min and max elements of the original array?\n<|/ c |>\n<| c |>\n, no,\
    \ a binary search tree is no good because you still have to do a `O(logn)` operation\
    \ for each element in the tree, which makes the overall complexity still `O(nlogn)`\n\
    <|/ c |>\n<| c |>\nThis can be solved faster with a dynamic programming solution:\
    \ See my answer below.\n<|/ c |>\n<| a tags=ruby,arrays,algorithm |>\nHere is\
    \ my attempt at solving it. It uses dynamic programming and does not need any\
    \ kind of sorting (but of course it does need some sorting). It can handle multiple\
    \ sub-arrays of any length (so long as they all have the same length).\n<code>",
  "  minimum = 0\n  index = 0\n  while index < nums.length\n    minimum = nums[index]\
    \ unless minimum == 0\n    minimum, index = minimum - nums[index], index + 1\n\
    \  end\n  return minimum\nend", "  min_sum = nil\n  \n  nums.each do |n|\n   \
    \ min_sum = n if min_sum == nil or min_sum + n < min_sum\n    min_sum = n if min_sum\
    \ == nil or min_sum + n < min_sum\n    min_sum = n if min_sum == nil or min_sum\
    \ + n < min_sum\n    min_sum = n if min_sum == nil or min_sum + n < min_sum\n\
    \    min_sum = n if min_sum == nil or min_sum + n < min_sum\n    min_sum = n if\
    \ min_sum == nil or min_sum + n < min_sum\n    min_sum = n if min_sum == nil or\
    \ min_sum + n < min_sum\n    min_sum = n if min_sum == nil or min_sum + n < min_sum\n\
    \    min_sum = n if min_sum == nil or min_sum + n < min_sum\n    min_sum = n if\
    \ min_sum == nil or min_sum + n < min_sum\n    min_sum = n if min_sum == nil or\
    \ min_sum + n < min_sum\n    min_sum = n if min_sum == nil or min_sum + n < min_sum\n\
    \    min_sum = n if min_sum == nil or min_sum + n < min_sum\n    min_sum = n if\
    \ min_sum == nil or min_sum + n < min_sum\n    min_sum = n if min_sum == nil or\
    \ min_sum + n < min_sum\n    min_sum = n if min_sum == nil or min_sum + n < min_sum\n\
    \    min_sum = n if min_sum == nil or min_sum + n < min_sum\n    min_sum = n if\
    \ min_sum == nil or min_sum + n < min_sum\n    min_sum = n if min_sum == nil or\
    \ min_sum + n < min_sum\n    min_sum = n if min_sum == nil or min_sum + n < min_sum\n\
    \    min_sum = n if min_sum == nil or min_sum + n < min_sum\n    min_sum = n if\
    \ min_sum == nil or min_sum + n < min_sum\n    min_sum = n if min_sum == nil or\
    \ min_sum + n < min_sum\n    min_sum = n if min_sum == nil or min_sum + n < min_sum\n\
    \    min_sum = n if min_sum == nil or min_sum + n < min_sum\n    min_sum = n if\
    \ min_sum == nil or min_sum + n < min_sum\n    min_sum = n if min_sum == nil or\
    \ min_sum + n < min_sum\n    min_sum = n if min_sum == nil or min_sum + n < min_sum\n\
    \    min_sum = n if min_sum == nil or min_sum + n < min_sum\n    min_sum = n if\
    \ min_sum == nil or min_sum + n < min_sum\n    min_sum = n if min_sum == nil or\
    \ min_sum + n < min_sum\n    min_", "    sum = nums.reduce(:+)\n    \n    minimum\
    \ = -Float::INFINITY\n    minimum_index = nil\n    nums.each_with_index do |n,\
    \ i|\n        minimum = min minimum, n - sum + i\n        minimum_index = i if\
    \ minimum == minimum\n    end\n    \n    return minimum_index\nend", "  minNum,\
    \ curSum = nums[0], 0\n  nums.each do |n|\n    curSum = curSum + n\n    if curSum\
    \ > minNum then\n      minNum = curSum\n    end\n  end\n  minNum\nend", "  return\
    \ nums.reduce(:+) || 0\nend", "  if nums.length <= 1\n    return nums[0]\n  minimum\
    \ = -math.inf\n  minimumIndex = nil\n  for i in 0...nums.length\n    sum = nums[i]\
    \ + minimum\n    if sum < minimum\n      minimumIndex = i\n      minimum = sum\n\
    \    end\n  end\n  return minimum\nend", "  nums.sort { |a,b| b <=> a }\n  nums.reduce(:+).min\n\
    end", "  min = nums.inject(0, :+)\n  nums.each do |x|\n    min = x.abs > min ?\
    \ x.abs : min\n  end\n  min\nend", "\tlocal minimum = nums[1]\n\tlocal sum = 0\n\
    \tfor i = 2, #nums do\n\t\tsum = sum + nums[i]\n\t\tif sum < minimum then\n\t\t\
    \tminimum = sum\n\t\tend\n\tend\n\treturn minimum\nend", "  nums.each { |num|\
    \ minSum(num) }\nend", "\tmin = Integer.MAX_VALUE\n\tfor i in (0..nums.length-1)\n\
    \t\tif nums[i] > 0\n\t\t\tmin = min + nums[i]\n\t\tend\n\tend\n\treturn min\n\
    end", "  \n    sum = 0\n    len = nums.length\n    \n    return nums[0...len-1].reduce(:+)\n\
    end", "  nums.reduce(:+)\nend", "  return nums.reduce(0, :+).minimum\nend", " \
    \   i, min = 0, nums[0]\n    while i < nums.length\n        min = nums[i] + nums[min]\
    \ if nums[i] < nums[min] else nums[min]\n        i += 1\n    end\n    min\nend",
  "  nums.compact.inject(0) {|sum, value| sum + value }\nend", "  nums.reduce(0) {|sum,\
    \ num|\n    sum += if num > 0 then num else -num\n  }\nend", "  minSum = -Number.new(0)\n\
    \  nums.each {|el| minSum = minSum + el} \n  minSum\nend", "  return nums.min_by\
    \ { |i| nums.slice!(i..i + nums.size) }.sum\nend", "  maxsum = nums.inject(0)\
    \ { |sum, el| sum + el }\n  minsum = maxsum\n  nums.each_with_index { |el, idx|\
    \ minsum = el if sum < minsum }\n  minsum\nend", "    sum = 0\n    \n    \n  \
    \  for n in nums:\n        sum += n\n        \n    \n    return sum", "    # Write\
    \ your code here.\n    sum = nums.min\n    i = 0\n    while i < nums.length\n\
    \        sum += nums[i]\n        i += 1\n    return sum\n</cell>\n<cell>\n%timeit\
    \ minSubArraySum.call([2, 3, 4, 1, 2, 4])\n%timeit minSubArraySum.call([-1, -2,\
    \ -3])\n</cell>\n<text>\nProblem 3", "  nums.each_with_index do |x, i|\n    nums.slice!(i+1)\n\
    \    nums.slice!(i)\n  end\n  nums.min\nend", "  return minSubArraySumHelper(nums,\
    \ 0, nums.length - 1)\nend", "  nums.reverse!\n  minsum = nums.inject(0, :+)\n\
    \  nums.each { |n| minsum -= n }\n  minsum\nend", '  minimum, sum = 0, []', " \
    \ if nums.size < 1\n    -1\n  else\n    minimum(find_minimum(nums, 0, nums.size))\n\
    \  end\nend", "\tnums.sort()\n\tanswer = 0\n\tn = nums.length - 1", "  min = nil\n\
    \  nums.each do |n|\n    min = nil if min == nil || n < min \n    min = n if min\
    \ == nil || min < n\n  end\n  min\nend", "    return nums.inject(0, :+)\nend",
  "  minSum ||= nums[0]\n  nums.each_index do |i|\n    min = i\n    nums.each_index\
    \ do |j|\n      minSum = nums[j] if nums[j] <= nums[i]\n      minSum = nums[j]\
    \ if minSum >= nums[i] or minSum == nums[i]\n    end\n    minSum\n  end\nend",
  "  return nums.reduce{|sum, x| sum + x}\nend", "  min_sum, best_sum = 0, 0\n  nums.each\
    \ do |n|\n    current_sum = best_sum + n\n    if current_sum < min_sum\n     \
    \ min_sum = current_sum\n    end\n  end\n  min_sum\nend\n</code>\n<|/ a |>\n<|\
    \ a tags=ruby dscore=2 |>\n<code>", "    i = 0\n    sum = 0", "  nums.reduce(:+)\n\
    end", "  return if nums.length == 0\n  nums.each_with_index {|x, i|\n    j = i\
    \ + 1\n    break if j == nums.length\n    nums.slice!(i..j-1)\n    break if nums.empty?\n\
    \    sum = nums.inject(:+) + i\n    break if sum < min\n    min  = sum\n  }\n\
    \  min\nend", "    sum_of_array = sum(nums)\n    sum_of_subarrays = sum_of_array",
  "    # Write your code here.\n    nums.reverse\n    i = 0\n    sum = 0\n    total\
    \ = 0\n    while i < nums.length\n        sum = nums[i] + sum\n        if sum\
    \ > total\n            total = sum\n        end\n        i += 1\n    end\n   \
    \ return total\nend\n</cell>\n<code language=julia-0.5>\nminSubArraySum([2, 3,\
    \ 4, 1, 2, 4])\n</cell>\n<code language=julia-0.5>\nminSubArraySum([-1, -2, -3])\n\
    </cell>\n<code language=julia-0.5>\nminSubArraySum([-1, -2, 2, -2, 0])\n</cell>\n\
    <code language=julia-0.5>\nminSubArraySum([-1, -2, 2, -2, 0])\n</cell>\n<code\
    \ language=julia-0.5>\nminSubArraySum([-1, -2, 2, -2, 0])\n</cell>\n<code language=julia-0.5>\n\
    minSubArraySum([-1, -2, 2, -2, 0])\n</cell>\n<code language=julia-0.5>\nminSubArraySum([-1,\
    \ -2, 2, -2, 0])\n</cell>\n<code language=julia-0.5>\nminSubArraySum([-1, -2,\
    \ 2, -2, 0])\n</cell>\n<code language=julia-0.5>\nminSubArraySum([-1, -2, 2, -2,\
    \ 0])\n</cell>\n<code language=julia-0.5>\nminSubArraySum([-1, -2, 2, -2, 0])\n\
    </cell>\n<code language=julia-0.5>\nminSubArraySum([-1, -2, 2, -2, 0])\n</cell>\n\
    <code language=julia-0.5>\nminSubArraySum([-1, -2, 2, -2, 0])\n</cell>\n<code\
    \ language=julia-0.5>\nminSubArraySum([-1, -2, 2, -2, 0])\n</cell>\n<code language=julia-0.5>\n\
    minSubArraySum([-1, -2, 2, -2, 0])\n</cell>\n<code language=julia-0.5>\nminSubArraySum([-1,\
    \ -2, 2, -2, 0])\n</cell>\n<code language=julia-0.5>\nminSubArraySum([-1, -2,\
    \ 2, -2, 0])\n</cell>\n<code language=julia-0.5>\nminSubArraySum([-1, -2, 2, -2,\
    \ 0])\n</cell>\n<code language=julia-0.5>\nminSubArraySum([-1, -2, 2, -2, 0])\n\
    </cell>\n<code language=julia-0.5>\nminSubArraySum([-1, -2, 2, -2, 0])\n</cell>\n\
    <code language=julia-0.5>\nminSubArraySum([-1, -2, 2, -2, 0])\n</cell>\n<code\
    \ language=julia-0.5>\nminSubArraySum([-1, -2, 2, -2, 0])\n</cell>\n<code language=julia-0.5>\n\
    minSubArraySum([-1, -2, 2, -2, 0])", "    nums.each_with_index do |x, i|\n   \
    \     sum = 0\n        nums.each_with_index do |y, j|\n            sum += nums[i+j]\n\
    \        end\n        if sum < x\n            min = sum\n        end\n    end\n\
    \    return min\nend\n</code>\n<|/ a |>\n<| c |>\nThe recursive version will work.\
    \  But an iterative version (`each_with_index` and a variable `sum`) would give\
    \ the best performance.\n<|/ c |>\n<| c |>\n- Okay, good to know. But I feel like\
    \ there's some mathematical reason why this would be the best for performance,\
    \ though.\n<|/ c |>\n<| c |>\nThe reason is because the subarrays of size n are\
    \ all the same.  So you only need to calculate the sum for one size n.\n<|/ c\
    \ |>\n<| c |>\nIt's not so much that the subarrays are all the same size, but\
    \ that the sum of the subarrays is equal to the sum of the original array.  So\
    \ instead of iterating through the entire array at each iteration, we only iterate\
    \ through each size n.\n<|/ c |>\n<| c |>\n- I guess I thought that might be the\
    \ case but didn't really think of it until I actually looked it up.  Good catch.\n\
    <|/ c |>\n<| a dscore=0 |>\nHere is a solution that I wrote, which is very similar\
    \ to Jared's answer. I didn't use each_with_index, but instead used the built-in\
    \ index method on a range, which is a more efficient way to iterate through an\
    \ array than using each_with_index and index. I also used the built-in min function,\
    \ which finds the minimum value of an array without using an explicit for loop.\n\
    <code>", "  return nums.min.inject(:+) || -1\nend\n</code>\n<|/ a dscore=3 tags=ruby,sum,arrays\
    \ |>\n<| c |>\nI like this answer, but it is less efficient than the solutions\
    \ posted previously.\n<|/ c |>\n<| c |>\nI ran both on large arrays. Your solution\
    \ was slightly faster than mine. Had to run it a couple of times. Your solution\
    \ was faster by 0.05 seconds. Mine was faster by 0.17 seconds.\n<|/ c |>\n<| a\
    \ tags=ruby,sum,arrays |>\n<code>", "  sum = nums.reduce(0, :+) # sum from left\
    \ side\n  sum = nums.reduce(sum, :+) # sum from right side\n  sum.min # minimum\
    \ value of both sums\nend", "  minSum, minimumSum = nums.min, 0\n  nums.each do\
    \ |num|\n    minimumSum += num\n    if minimumSum < minSum\n      minSum, minimumSum\
    \ = minimumSum, minSum\n    end\n  end\n  minimumSum\nend", "  return nums.min.each_cons(2).map(&:sum).reduce(:+)\n\
    end", "  i = 0\n  total = 0\n  while i < nums.length do\n    current = nums[i]\n\
    \    if current > 0 then\n      total = total + current\n      i = i + 1\n   \
    \ else\n      j = i + 1\n      while j < nums.length do\n        current = nums[j]\
    \ - current\n        if current > 0 then\n          total = total + current\n\
    \          i = i + 1\n          break\n        else\n          j = j + 1\n   \
    \     end\n      end\n    end\n  end\n  return total\nend", "  \n  min_sum = -100\n\
    \  min_sub = -1", "  sum = nums.reduce(0, :+)\n  while nums.length > 0\n    min_sum\
    \ = nums.reduce(0, :+) - sum\n    sum -= nums[0]\n    nums.shift\n    return min_sum\
    \ if min_sum >= 0 else 0\n  end\nend", "  if nums.length == 0 or nums.length ==\
    \ 1\n    nums[0] = 0\n    return nums[0]\n  end", "  min = nums.reduce(0, :+).min\
    \ # Find min of array\n  return min if nums.all?{|x| x <= min} # Return min if\
    \ all elements in array are less than min\n  nums.inject(0, :+).min # Find min\
    \ of array\nend\n</cell>\n<code language=conda-root-py>\nminSubArraySum.call([2,\
    \ 3, 4, 1, 2, 4])\n</cell>\n<code language=conda-root-py>\nminSubArraySum.call([-1,\
    \ -2, -3])\n</cell>\n<code language=conda-root-py>", "  return nums.reduce {|sum,\
    \ elem| sum + elem}\nend", "  # Write your code here.\n  return nil\nend", " \
    \ result = nums.max\n  nums.max.times do\n    result -= nums.min\n    result -=\
    \ nums.max unless nums.max.odd? and nums.min > -1\n  end\n  result\nend", "  nums.sort_by!(&:abs)\n\
    \  i = 0\n  sum = 0\n  while i < nums.length\n    sum = sum + nums[i]\n    i +=\
    \ 1\n  end\n  sum\nend", "  sum = 0\n  \n  for i in (0...nums.length)\n    sum\
    \ = sum + nums[i]\n  end\n  \n  sum = sum + nums[0]\n  return sum\nend\n</cell>\n\
    <code language=julia-0.5>\nminSubArraySum([-1, -2, -3])\n</cell>\n<code language=julia-0.5>",
  "\tmin_sum = nums[0]\n\tmin_val = nums[0]\n\ti = 1\n\twhile i < nums.length\n\t\t\
    sum = nums[i] + nums[i + 1]\n\t\tif sum > min_sum\n\t\t\tmin_sum = sum\n\t\t\t\
    min_val = nums[i]\n\t\ti += 2\n\treturn min_val\nend", "  minSum, minIndex = -nums.max,\
    \ -1\n  nums.each do |num|\n    if minSum > num\n      minSum, minIndex = num,\
    \ num\n    elsif minSum < num\n      break\n    end\n  end\n  minIndex\nend\n\
    </cell>\n<code language=julia-1.0>\nusing Test", "  minimum = 0\n  for i in 0...nums.length\n\
    \    minimum = minimum > nums[i] ? minimum : nums[i]\n  end\n  return minimum\n\
    end", "  min = nil\n  min = nums[0]\n  for i in (0..(nums.size-1))\n    currentSum\
    \ = nums[i] + nums[i+1]\n    if min > currentSum\n      min = currentSum\n   \
    \ end\n  end\n  min\nend", "  nums.each_with_index do |n, i|\n    min_sum = n\n\
    \    nums.slice!(0, i).each do |j|\n      min_sum = min_sum + j\n    end\n   \
    \ min_sum = min_sum.abs\n    if min_sum < nums[i]\n      min_sum = nums[i]\n \
    \   end\n    nums[i] = min_sum\n  end\n  nums.sum\nend", "    minimum = nums[0]\n\
    \    for num in nums[1..-1]\n        minimum = num if minimum > num else minimum\n\
    \    end\n    minimum\nend", "    arr = (1..nums.count)\n    arr.each { |i| nums.delete_at(nums.index(i))\
    \ }\n    arr.each { |i| nums.insert(i, 0) }\n    i = nums.index(Math.max(nums))\
    \ + 1\n    sum = (1..i).inject(0) { |s, i| s + nums[i] }\n    sum == nums.inject(0)\
    \ { |s, i| s + nums[i] } ? i : -1\nend", "    sum = nums.reduce(0, :+)\n    nums.each\
    \ do |el|\n        el > sum ? sum = el : sum = sum - el\n    end\n    sum\nend",
  "  # Your code here\n  return nums.inject(0) {|sum,x| sum + x }\nend", "  nums.each\
    \ { |n| return n if n.zero? }\n  nums.each { |n| return n if n == 0 }\n  nums.each\
    \ { |n| return n if n < 0 }\n  nums.each { |n| return n if n >= 0 }\n  nums.min\n\
    end\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 tags=ruby,arrays |>\nHere is a\
    \ solution using Hash.\n<code>", "  result = nums[0]\n  minimum = nums[0]\n  for\
    \ i in 1..nums.length\n    minimum = minimum if nums[i] < minimum else nums[i]\n\
    \    result += minimum\n  end\n  result\nend", "    min, i, j = nums[0], 1, 0\n\
    \    min = nums[0]\n    while (i < nums.length)\n        sum = nums[i] + nums[j]\n\
    \        if (sum < min)\n            min = sum\n        i += 1\n        j += 1\n\
    \    return min", "  sum = 0\n  for i in 0...nums.length - 1\n    sum = sum +\
    \ nums[i]\n    sum = (sum > nums[i+1] ? sum : nums[i+1])\n  end\n  sum\nend",
  "\tsum = 0\n\tfor i in nums\n\t\tsum += i\n\treturn sum\nend\nend\n</cell>\n<text>\n\
    The next function takes a list of positive integers, removes any negative numbers,\
    \ and returns the remaining numbers in sorted order. The negative numbers are\
    \ removed from the list first, then sorted. The final result is returned.", " \
    \ return nums.min_by { |x| x.abs }\nend", "    array.sort_by { |e| e } nums.min\n\
    end\n</code>\n<|/ a |>\n<| c |>\n`array.sort_by { |e| e } nums.min` can be replaced\
    \ by `nums.min`. Your code does the same, but is less readable.\n<|/ c |>\n<|\
    \ a |>\nHere's a solution using array methods (as pointed out by others) and recursion:\n\
    <code>"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
