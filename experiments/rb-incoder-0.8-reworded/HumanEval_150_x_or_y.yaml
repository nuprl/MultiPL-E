name: HumanEval_150_x_or_y
language: rb
prompt: "# A simple program which should return the value of x if n is \n# a prime\
  \ number and should return the value of y otherwise.\n# Examples:\n# >>> x_or_y.call(7,\
  \ 34, 12)\n# 34\n# >>> x_or_y.call(15, 8, 5)\n# 5\ndef x_or_y(n, x, y)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_x_or_y\n\
  \    candidate = method(:x_or_y)\n    assert_equal(34, candidate.call(7, 34, 12))\n\
  \    assert_equal(5, candidate.call(15, 8, 5))\n    assert_equal(33, candidate.call(3,\
  \ 33, 5212))\n    assert_equal(3, candidate.call(1259, 3, 52))\n    assert_equal(-1,\
  \ candidate.call(7919, -1, 12))\n    assert_equal(583, candidate.call(3609, 1245,\
  \ 583))\n    assert_equal(129, candidate.call(91, 56, 129))\n    assert_equal(1234,\
  \ candidate.call(6, 34, 1234))\n    assert_equal(0, candidate.call(1, 2, 0))\n \
  \   assert_equal(2, candidate.call(2, 2, 0))\n  end\nend\n"
completions: ["  if n <= 1 && y > 0\n    y\n  elsif n <= 1 && y < 0\n    -x\n  elsif\
    \ n <= 1\n    x\n  else\n    x - y\n  end\nend", "    if n % 3 == 0\n        y\n\
    \    else\n        x\n    end\nend\n</code>\n<code>", "  if n.is_a? Integer\n\
    \    n >= 2 && n <= x ? x : y\n  end\nend", "  if n % 15 == 0\n    return y\n\
    \  end\n  return x\nend\n</cell>\n<text>\nThe first thing to notice is that this\
    \ program has no if statements. Instead, it just checks whether the n is divisible\
    \ by 15. If it is, it returns y, otherwise it returns x. Notice that this is a\
    \ \"condensed\" version of the program in which we simply return y if the n is\
    \ divisible by 15, and return x otherwise. One of the reasons we would do this\
    \ is because we can make use of the if statement to return the value of y directly\
    \ when the n is divisible by 15, and we could use else to return the value of\
    \ x when it is not divisible by 15.", "    if n == 1\n        x\n    else\n  \
    \      y\n    end\nend", "  x == y ? x : n\nend", "  x if is_prime(n) ? y : x\n\
    end\n</code>\nThen the entire method becomes:\n<code>", "  case n when is_prime\
    \ then\n    x\n  else\n    y\n  end\nend", "  puts x < n ? x : y\nend", "  x ==\
    \ n ? y : 0\nend\n</cell>\n<text>\nExercise 3\nWrite a program which accepts two\
    \ numbers from the user and prints the product of the two numbers.\nThis product\
    \ should be printed on the next line of the output.", "  if n == x && is_prime(n)\n\
    \    x\n  else\n    y\n  end\nend\n</cell>\n<text>\nNow we define a function to\
    \ compute n! using the recursive function factorial. We'll use the function factorial\
    \ in the following exercises.", "  x == y ? x : y\nend", "    if n == 1\n    \
    \    puts y\n    else\n        x_or_y(n-1, x, y)\n    end\nend", '  return y if
    n.is_prime? else x', "  case n.is_a? Integer\n  when true\n    if n.is_a? Numeric\n\
    \      if n.even?\n        x\n      else\n        y\n      end\n    end\n  else\n\
    \    n\n  end\nend", "  case n \n  when prime?\n    return y\n  else\n    return\
    \ x\n  end\nend", "  case n\n  when Prime.prime? n then y\n  else x\n  end\nend",
  "  x == 2 || y == 2 ? n : x_or_y(n, x-1, y-1)\nend", "  if n % x==0 && n % y==0\
    \ then n end\n  y\nend", "  return if n == 0\n  x_or_y(n - 1, x, y + 1)  if n\
    \ % x == 0\n  x_or_y(n - 1, y, x + 1) if n % y == 0\n  x\nend", "  if n % 2 ==\
    \ 0\n    return y\n  else\n    return x\nend\n</cell>\n<code language=julia-1.5>\n\
    x_or_y(7, 34, 12)\n</cell>\n<text>\n3. Conditional Execution\nThe conditional\
    \ expression in Julia works as follows: if a conditional expression evaluates\
    \ to true, the corresponding block of code is executed.", "  case n when is_prime?\
    \ then x else y\nend", "  x == y ? n : y\nend\n</pre>", "  if n % 2 == 0\n   \
    \ x\n  else\n    y\n  end\nend", "  case x\n  when n\n    x\n  else\n    y\n \
    \ end\nend", "  if n == 0 then \n    return x\n  else \n    return y\nend", " \
    \ x == y ? n : y\nend\n</pre>\n    <p>\n      Now that we have a function that\
    \ can check if a number is prime, we need to implement a way of finding all prime\
    \ numbers up to a given number. The first step is to make a function that returns\
    \ true or false depending on whether or not the number passed is prime, which\
    \ is straightforward:\n    </p>\n    <pre class=\"ruby\">", "  if n % 11 == 0\
    \ # 11 is prime number\n    puts x\n  else\n    puts y\n  end\nend", "  x_or_y.call(n,\
    \ x-y, x+y)\nend", "  if n == prime? n\n    y || y\n  else\n    x || x\n  end\n\
    end\n</pre>\n  <pre class=\"highlight ruby\">", "  n % x == 0 ? x : y\nend\n</code>\n\
    <|/ a |>\n<| a tags=ternary-operator,ruby |>\nI find myself using the following\
    \ a lot:\n<code>\nresult = some_method ? another_method : some_other_method\n\
    </code>\nThe only catch is that if the result is a boolean, it might not be evaluated\
    \ as you'd expect, and you'll get an undefined method error if some_method or\
    \ another_method don't exist or are undefined. For example:\n<code>\nresult =\
    \ some_method ? true : \"Hello\"", "  return x if n <= y else y\nend\n</cell>\n\
    <cell>", "  if n == 1 && y == 1\n    return x\n  end\n  if n % x == 0 && n % (y)\
    \ == 0\n    return y\n  end\n  if n % y == 0 && n % (x) == 0\n    return x\n \
    \ end\nend", "  if n <= 1\n    return x\n  else\n    return y\nend", "  if n %\
    \ 2 == 0\n    puts y\n  else\n    puts x\n  end\nend", "  if n == 2\n    y\n \
    \ else\n    x\n  end\nend\n</code>\n<|/ a dscore=1 tags=ruby |>\n<| a tags=ruby\
    \ |>\nOne way of doing it would be to create an array of the primes up to the\
    \ number you're checking. The first prime number will be 1, the second 2, and\
    \ so on. The first time you come across the number you're checking, the program\
    \ will add itself to the array. Then you can check for the rest of the numbers,\
    \ and compare each to see if it's in the array.\nHere's an example of an algorithm\
    \ for a prime number checker using arrays:\n<code>", "  if n < 7\n    return x\n\
    \  else\n    return y\n  end\nend\nputs x_or_y.call(7, 34, 12)\nputs x_or_y.call(15,\
    \ 8, 5)", "  return n <= x and n <= y ? n : nil\nend\n</code>\n<|/ a dscore=2\
    \ tags=ruby,ruby-on-rails,ruby-on-rails-4 |>\n<| a dscore=2 |>\nIn case someone\
    \ is looking for something more idiomatic than a custom method, here is my solution:\n\
    <code>", "  return n if prime?(n) then y else x end\nend", "  if n % 10 == 1\n\
    \    return y\n  else if n % 10 == 0 \n    return x\n  else\n    raise ArgumentError(\"\
    n is not a prime number\")\nend", "  if n != 2\n    return n\n  else\n    return\
    \ y\nend", "  x == n ? y : x\nend\nend\n</code>\n<|/ a |>\n<| c |>\nPlease consider\
    \ including relevant code from other answers to improve your answer.\n<|/ c |>\n\
    <| c |>\nThis answer doesn't seem to address the question. Also, this isn't a\
    \ very useful answer - it would be more helpful to explain how to write the code\
    \ in the question.\n<|/ c |>\n<| a dscore=1 tags=ruby,ruby-on-rails,ruby-on-rails-4,activerecord\
    \ |>\n<code>", "  if n % 2 == 0\n  then\n    return y\n  else\n    return x\n\
    \  end\nend", "  case n when is_prime? then\n    return y\n  else\n    return\
    \ x\n  end\nend", "  n == x ? y : x\nend", "  case n when is_prime? then x\n \
    \          else           y\n  end\nend", "  if n == 2\n    return x\n  else\n\
    \    return y", "  if prime? n\n    x\n  else\n    y\n  end\nend", "  if n !=\
    \ 0 && (n % 2 == 0 || n % 3 == 0)\n    n /= 2\n  else\n    n /= 3\n  end\n  if\
    \ n == 0 then \n    return y\n  else\n    return x \n  end\nend\n</cell>\n<text>\n\
    The above code shows a very simple function which returns the value of x if n\
    \ is divisible by 2 or y is divisible by 3. The next sections show how to define\
    \ recursive functions. A recursive function is a function which is designed to\
    \ call itself and which is used inside a loop.", "    x, y = x, y = n, y\n   \
    \ return x if y % x == 0 else y\nend\n</code>\n<|/ a tags=math,ruby |>\n<| a dscore=2\
    \ tags=math,ruby |>\n<code>", "  if n == 2\n    y\n  else\n    x\n  end\nend",
  "  case n when 2\n    y \n  when 3\n    x\n  when 4\n    y\n  else\n    x_or_y(n\
    \ - 1, x, y)\nend", "  if n == 0\n    puts y\n  elsif n == 1\n    puts x\n  else\n\
    \    x_or_y(n - 1, x, x + y)\n  end\nend\n</cell>\n<text>\nLet's execute the program\
    \ and see what happens.", "  x == n ? y : (y == n ? x : nil)\nend", "  x == n\
    \ ? y : x\nend\n</cell>\n<text>\nNow that we've defined our functions, we can\
    \ test them:", "  if n == x && n == y\n    x\n  else\n    y\n  end\nend", "  if\
    \ is_prime(n)\n    x\n  else\n    y\n  end\nend", "  if n == 0\n    x\n  else\n\
    \    y\n  end\nend", "  if n % x == 0\n    puts \"#{n} is a prime number\"\n \
    \ else\n    puts \"#{n} is not a prime number\"\n  end\nend", "  case x when n\
    \ % y\n    then y\n    else x\n  end\nend\n</cell>\n<text>\nNotice that I've used\
    \ the case construct to define the function. The case construct takes a value\
    \ (in this case x or y) and a case expression that decides which branch of the\
    \ case expression to execute based on the value of the expression. In our case\
    \ we have:", "  return x if n <= 1 \n  y if n >= 5\n  ", "  case n\n    when 3\n\
    \      y\n    else\n      x\n  end\nend", "  if n == 1 \n    x\n  else\n    y\n\
    \  end\nend\n</cell>\n<cell>\n%load x_or_y.rb\n</cell>\n<text>\nLet's try to run\
    \ our x_or_y function with the numbers we used above.", "    puts \"#{n} is a\
    \ prime number\" if n.is_a? Integer\n    puts \"#{n} is not a prime number\" if\
    \ n.is_a? Integer\nend", "  case n % x\n  when 0\n    y\n  else\n    x\n  end\n\
    end\n</code>\nThis function is much easier to read and understand. Now let's try\
    \ the function x_or_y:\n<code>", '  return y if n==x else x', "  if n % x != 0\n\
    \  then\n    return y\n  else\n    return x\n  end\nend", "  if n % 10 == 1\n\
    \    x # return x\n  else\n    y # return y\n  end\nend", "  if n == 1\n    x\
    \ \n  else\n    y_or_x(n - 1, x, y)\n  end\nend", "  if n % 12 == 1 || n % 12\
    \ == 5\n    x\n  else\n    y\n  end\nend", "  if is_prime(n)\n    x\n  else\n\
    \    y\n  end\nend\n</cell>\n<text>\nTesting the code above\nExercise 2\nWrite\
    \ a test that prints out the values of x and y when n = 7 and n = 15. How would\
    \ you go about doing this? How would you write a test that prints out the values\
    \ of x and y when n = 4 and n = 9?", "  case n when is_prime then\n    x\n  else\n\
    \    y\n  end\nend", "  if n >= 2 and n % 2 == 0:\n    return y\n  return x",
  "  x == y || n <= 1 ?\n    x : \n    n >= 2 ?\n      y : \n      x_or_y(n - 1, y,\
    \ x)\nend", "  if n % x == 0\n    return y\n  else\n    return x\nend\n</cell>\n\
    <text>\nLet's test our functions:", "  x == n ? x : y\nend", "    if x == 0 and\
    \ y == 0 \n        then n \n        else y\n    else \n        x\nend\n</cell>\n\
    <cell>\nx_or_y(5, 34, 12)\n</cell>\n<text>\nPart 4\nNow we create a function that\
    \ returns its argument if n is even, otherwise it returns its argument * 3:",
  "  case n % 2\n  when 0, 1\n    y \n  else\n    x\n  end\nend", "  return (((n==1)\
    \ && y) ? x :\n         ((n==1) ? y :\n         ((n%2)==0 ? x_or_y(n-1, x, y)\
    \ :\n                        x_or_y(n-1, y, x))))\nend", "  case n\n  when prime\
    \ then\n    x\n  else\n    y\n  end\nend", "  return x if n % x == 0 else  y\n\
    end", "  if n == prime?\n    return y\n  else\n    return x\nend\n</code>\nI hope\
    \ that clears things up and that you understand how it works.\n<|/ a dscore=0\
    \ |>\n<| c |>\nI appreciate your answer but i am not trying to solve the problem\
    \ i am just curious as to how ruby can do it\n<|/ c |>\n<| c |>\nI edited my answer\
    \ to address your question. Sorry for not clarifying.\n<|/ c |>\n<| c |>\nYeah\
    \ it does and thanks again it really helped me\n<|/ c |>\n<| a dscore=0 |>\nThis\
    \ problem is similar to the prime factorization  \n<code>", "  return n if is_prime(n)\
    \ ? x : y\nend", "  if n == 2\n    y\n  else\n    x\n  end\nend", "  if n == 2\n\
    \    return y\n  else\n    return x", "  \n  # If the value is an odd number...\n\
    \  if n % 2 == 1\n    return x\n  else\n    return y\nend\n</code>\n<|/ a |>\n\
    <| c |>\nI appreciate your answer. One thing I noticed, I used the x_or_y program\
    \ to find the value of `x if n` is a prime number and `y` if `n` is not a prime\
    \ number. But, when I run your code it gives me a value of `y` which is correct.\
    \ But, I need to get the `x` value. If I use `return y` then it will give me the\
    \ `y` value. But, when I use `return x` then it gives me an error, because `x`\
    \ is nil. So, is there a way that I can get the `x` value from the `y` value?\n\
    <|/ c |>\n<| c |>\nI updated my answer to give a more detailed example. Hopefully,\
    \ that helps.\n<|/ c |>\n<| c |>\nThank you very much for your explanation. I've\
    \ marked your answer as the correct one. But, please note my comments in that\
    \ answer and the comments of other answers. Your answer is very helpful to me.\
    \ But, I don't understand the reason why someone gave you a down vote. I appreciate\
    \ your efforts.\n<|/ c |>\n<| c |>\nI'm glad to hear that you found it helpful.\
    \ Thank you for voting me up too. Not sure I understand why you got down votes.\
    \ In any case, good luck on your project.\n<|/ c |>\n<| c |>\n, why did you use\
    \ \"if n.odd?\" in the x_or_y function? I thought we should just use \"if n%2\"\
    ? Or am I wrong? Thank you.\n<|/ c |>\n<| a tags=ruby |>\nIf you want to call\
    \ function only on even numbers, you can check its oddness like this\n<code>",
  "  x == n ? y : x\nend\n</cell>\n<code language=julia-1.3>", "  return n if prime?\
    \ n and n != 2 \\\n         else y\nend\n</cell>\n<text>\nNow lets test the program\
    \ out to make sure it returns the right value for all the inputs.  We'll also\
    \ give a little bit of extra help by giving our code a pretty header.", "  if\
    \ n % 2 == 0\n    y \n  else\n    x\n  end\nend", "  x\n  y\n  n\n  return if\
    \ n % 2 == 0\n  return if n % 3 == 0\n  \n  # x or y\n  x\n  y\nend", "  case\
    \ n\n  when 11\n    y\n  else\n    x\n  end\nend", "  n >= x ? x : y\nend", " \
    \ if is_prime(n)\n    x\n  else\n    y\n  end\nend", "  if n == 0\n    return\
    \ y\n  else\n    return x_or_y(n - 1, y, x)\nend", "  if n == 1 then \n    return\
    \ y\n  else\n    return x\n  end\nend", "    if n % 2 == 0 \n        puts y\n\
    \    else \n        puts x\nend\nx_or_y.call(5, 3, 12)\nx_or_y.call(5, 3, 5)\n\
    x_or_y.call(5, 3, 7)\nx_or_y.call(5, 3, 11)\nx_or_y.call(5, 3, 6)", "  if n ==\
    \ 1\n    return x\n  else \n    return y\nend", "  return ((n==1 and y == 1) or\
    \ (n%2==0 and y%2==0))\nend\n</code>\n<|/ q dscore=2 |>\n<| a tags=ruby,ruby-on-rails\
    \ |>\nYour code looks fine, except that the y variable is not used anywhere in\
    \ the function, only used as a return value. That is why you get the error.\n\
    This should work:\n<code>", "  x == y ? x : n\nend", "  if is_prime(n)\n    return\
    \ y\n  else\n    return x\nend", "  if n == 2\n    y\n  else\n    x\n  end\nend",
  "  case n when is_prime? then x else y end\nend", "    \n    n ? x : y\nend", " \
    \ if n % 2 == 0 and n > 1 \n    y \n  else\n    x\nend", "  if n == 1 then return\
    \ x\n  else if n % 2 == 0 then return y\n  else return x\nend", "  x if is_prime(n)\
    \ ? y : x\nend", "  x == n ? x : y\nend", "  n <= 0 || y <= 0 ? x : y\nend", " \
    \ if n == 1\n    return x\n  else\n    y\n  end\nend", "  n == 0 ? 'x' : y ==\
    \ 0 ? 'y' : 'y'\nend", "  if n == 2 && x != 0\n    y\n  elsif n % 2 == 1 && n!=\
    \ 1 && x != 0\n    x\n  else\n    y\n  end\nend", "  if n % 1 == 0 or n % 2 ==\
    \ 0\n    return y\n  return x\nend\n</cell>\n<cell>", '  return n==1 or n==2 or
    n==3 or n==5 or n==7 or n==11 or n==13 or n==17 or n==19 or n==23 or n==29 or
    n==31 or n==37 or n==43 or n==53 or n==59 or n==61 or n==67 or n==71 or n==73
    or n==79 or n==83', "  if n == 2 or n == 3 then\n    y\n  else\n    x\n  end\n\
    end", "  x == y ? n : x\nend\n</cell>\n<cell>", "  x == y ? x : (n & 1 == 1 ?\
    \ y : x)\nend\n</code>\n<|/ a tags=ruby,primes dscore=1 |>\n<| a |>\n<code>",
  "  if is_prime(n)\n    return x\n  else\n    return y\nend", "  return n if prime?(n)\
    \ \n  x\nend", "  x == n ? x : (y == n ? y : nil)\nend", "  if n % 2 == 0 and\
    \ n != 1 and n % 3 == 0\n    return x\n  else\n    return y\nend\n</cell>\n<text>\n\
    Let's test it:", "  x == y ? x : y \nend", "  n.zero? ? x : y\nend", "  if n ==\
    \ 2\n    return x\n  else\n    y\n  end\nend", "  return x if n % 2 == 0 or y\
    \ == nil\n  y\nend", "  x == y ? x : n\nend", "    return n if n.is_a? Integer\n\
    \    y if n.is_a? Float\nend\n</cell>\n<cell>", "  if n % 2 == 0\n    return y\n\
    \  else\n    return x\nend", "  x == 0 ? y : x\nend", "  x if n <= 1 && n >= 0\
    \ || ( y if n <= 0 && n >= 1 )\nend", '    return (n==0 and y) or n', "  if n\
    \ < 2 \n    n \n  elsif n == 2\n    y\n  else\n    x_or_y(n - 1, x, y)\n  end\n\
    end\n</cell>\n<cell>", "  x == y ? n : x_or_y(n, y, x)\nend\n</cell>\n<cell>",
  "    if n == 1 && x == 1 && y == 1\n        return x\n    \n    if n == 1 && x ==\
    \ 1 && y == 0\n        return y\n    \n    if n == 0 && x == 1 && y == 1\n   \
    \     return x\n    \n    if n == 0 && x == 1 && y == 0\n        return y\n  \
    \  \n    if n == 1 && x == 0 && y == 1\n        return x\n    \n    if n == 1\
    \ && x == 0 && y == 0\n        return y\n    \n    if n == 0 && x == 0 && y ==\
    \ 1\n        return x\n    \n    if n == 0 && x == 0 && y == 0\n        return\
    \ y\n    \n    if n % 2 == 0 && n != 1 && x != 0 && y != 0\n        return x\n\
    \    \n    if n % 2 == 1 && n != 1 && x != 0 && y != 0\n        return y\n   \
    \ \n    if n == 1 && !x_or_y.call(n / 2, x, y, true)\n        return x\n    \n\
    \    if n == 1 && !x_or_y.call(n / 2, x, y, false)\n        return y\n    \n \
    \   if x != 0 && y != 0\n        return x\n    \n    if x != 0 && y == 0\n   \
    \     return y\n    \n    if x != 0 && y == 1\n        return x\n    \n    if\
    \ x == 0 && y == 0\n        return x\n    \n    if x == 0 && y == 1\n        return\
    \ y\nend", "  return y if is_prime?(n) then x else y\nend", "  case n when\n \
    \   2 | 3 | 5 | 7 | 11 | 13 | 17 | 19 | 23 | 29 | 31 => y\n    4 | 6  | 8 | 12\
    \  => x\n    n | p => x_or_y(n, x || y, y)\n  end\nend", "  n == 1 ? y : x\nend",
  "    p if n % x == 0 else y\nend\n</cell>\n<cell>", "  x == n ? y : x\nend", " \
    \ x == y ? x : n\nend", "  return n if n % 12 == 0 # n is a prime number\n  else\n\
    \    return y\nend\n</cell>\n<cell>", "  if n == 1\n    x\n  elsif n % 1 == 0\n\
    \    y\n  else\n    x\n  end\nend\n</cell>\n<code language=julia-1.1>", "  case\
    \ n % 3\n    when 0, 2\n      x\n    when 1\n      y\n    else\n      x_or_y(n-1,\
    \ x, z)\n  end\nend", "  if n == 2\n    y \n  else\n    x\n  end\nend", "  if\
    \ n != 0\n    x or y\n  end\nend\n</cell>\n<code language=julia-0.6>", "  return\
    \ y if n == 2 or n == 3 or n == 5 \n  else x\nend\n</cell>\n<text>\nWrite a function\
    \ named x_or_z that will return the value of x if n is \na prime number or y otherwise.\n\
    Examples:\n>>> x_or_z.call(7, 34, 12)\n34\n>>> x_or_z.call(15, 8, 5)\n8", "  case\
    \ n\n  when 0, 1 then x\n  when 2 then y\n  else n\n  end\nend", "  x if prime?\
    \ n || y \nend", "    if n % 2 == 0\n        puts x\n    else\n        puts y\n\
    \    end\nend", "  x == y ? x : 0\nend", "  if n == 1\n    x\n  else\n    y\n\
    \  end\nend\n</code></pre>", "  if n % x != 0 \n    return y\n  end\n  return\
    \ n\nend", "  n == y ? x : y\nend", "  return n if n <= max_x && n > max_y ? x\
    \ : y\nend", "  case (n) do\n    when prime?(n) then x\n    else y\n  end\nend",
  "  n.is_a?(Fixnum) ? x : y\nend", "  case n\n    when prime then x\n    else y\n\
    \  end\nend", "  return n if n % x == 0 else y\nend", "    if n % 2 == 0 and n\
    \ != 2:\n        return x\n    else:\n        return y", "  x == n ? y \n    :\
    \ y\nend", "  if n == 2\n    y\n  else\n    x\n  end\nend", "  if n % 2 == 0 &&\
    \ n != 2\n  else\n    y\n  end\nend", "  case x == n \n  when true\n    return\
    \ y\n  when false\n    return x\n  end\nend\n</code>\n<|/ a tags=functional-programming,ruby\
    \ |>\n<| a dscore=0 tags=functional-programming,ruby |>\n<code>", "  if is_prime(n)\n\
    \    x\n  else\n    y\n  end\nend", "  if n == 1 # n is a prime number\n    return\
    \ x\n  else\n    return y\nend", "  x_value = x || y\n  if n == 2\n    x_value\n\
    \  else\n    x_or_y(n - 1, y, x_value)\n  end\nend", "  case x == n && y == n\
    \ then n\n  else x\nend", "  x == 0 ? y : x\nend", "  return x if is_prime(n)\
    \ ? y : x\nend\n</pre>\n</div>\n<div class=\"section\">\n<h1><span class=\"header-section-number\"\
    >2</span> Write a program to find all primes below two million.</h1>\n<pre class=\"\
    prettyprint lang-lua\">\n-- This program finds all the prime numbers below a certain\
    \ number.\n-- A prime number is a natural number greater than 1 that has no \n\
    -- two distinct prime factors (a factor being a pair of numbers \n-- whose product\
    \ is one). For instance, the number 3 is not a prime \n-- number because three\
    \ factors (1, and 3) do not have distinct \n-- prime factors (and are thus not\
    \ a prime number).\n-- The program uses a sieve of Eratosthenes to do this.\n\
    -- This program is part of the <a href=\"https://github.com/jberger/primes\">primes\
    \ library</a>.\n-- The program runs in 0.02 seconds on my computer.", "  return\
    \ x if n == y else y\nend", "  if n == 0\n    y \n  else\n    x\n  end\nend",
  "  case n\n  when prime then\n    x\n  else\n    y\n  end\nend", "  if prime?(n)\n\
    \    x\n  else\n    y\n  end\nend", "  case n\n  when prime then\n    return x\n\
    \  else\n    return y\n  end\nend", "  if n == 2\n    y\n  else\n    x\n  end\n\
    end", "  x == n ? y : x\nend", "  if n == 2\n    y\n  else\n    x\n  end\nend",
  "  case n\n  when 1, y\n  when x > y\n    x \n  when x == y\n    y\n  end\nend",
  "  x == y ? n : x\nend", "  if is_prime?(n)\n    return x\n  else\n    return y\n\
    end", "  return y if n.prime? else x\nend", "  if is_prime?(n)\n    x\n  else\n\
    \    y\n  end\nend", "  if n % x == 0 and n % y == 0\n    return x\n  else\n \
    \   return y\nend", "  if n % 3 == 0\n    return y\n  else\n    return x\n  end\n\
    end", "  case (n % x ? x : y)\n    when 0 then raise \"n must be greater than\
    \ 0\"\n    when 1 then return x\n    when 2 then return y\n    else x_or_y(n-1,\
    \ x, y-1)\n  end\nend", "  x == n ? x : y == n ? y : n\nend", "  case true\n \
    \ when n % x == 0\n  then y\n  else x\n  end\nend", "  if n % x == 0\n    return\
    \ y\n  else\n    return x\n  end\nend", "  n >= 0 && y >= 0 && (n <= y) ? n :\
    \ y\nend", "  if n % x == 0\n    y\n  else\n    x\n  end\nend", "    return x\
    \ if is_prime(n) then y else x\nend\n</cell>\n<cell>", "  return n if is_prime\
    \ n\n  x\nend", "  if n < 2\n    puts x\n  else\n    puts y\n  end\nend", "  if\
    \ n == prime?\n    x\n  else\n    y\n  end\nend", "  if is_prime?(n)\n    x\n\
    \  else\n    y\n  end\nend", '  return n if is_prime(n) else y', "  return n if\
    \ prime? n\n  y\nend", "  return n if is_prime(n) then y else x\nend", "  case\
    \ n.is_a? Integer\n  when n.is_a?(Fixnum)\n    if n == 2 or n == 3\n      return\
    \ y\n    elsif n.even? and n > 2\n      return y\n    else\n      return x\n \
    \   end\n  when n.is_a?(Float)\n    if n % 2 == 0\n      return y\n    else\n\
    \      return x\n    end\n  end\nend\n</cell>\n<code language=julia-0.5>\nx_or_y(7,\
    \ 34, 12)\n</cell>\n<text>\nExercise 5\nWhat is the value of n? What is y? Can\
    \ you tell me by looking at the function definition that x_or_y returns the value\
    \ n if n is prime, and y otherwise? How would you call this function?", "  x ==\
    \ n ? y : x\nend", "  \n  return n if is_prime(n) \n  else y \nend"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
