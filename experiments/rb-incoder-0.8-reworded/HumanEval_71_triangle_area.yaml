name: HumanEval_71_triangle_area
language: rb
prompt: "# Given the lengths of the three sides of a triangle. Return the area of\n\
  # the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
  \ \n# Otherwise return -1\n# Three sides make a valid triangle when the sum of any\
  \ two sides is greater \n# than the third side.\n# Example:\n# >>> triangle_area.call(3,\
  \ 4, 5)\n# 6.0\n# >>> triangle_area.call(1, 2, 10)\n# -1\ndef triangle_area(a, b,\
  \ c)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_triangle_area\n\
  \    candidate = method(:triangle_area)\n    assert_equal(6.0, candidate.call(3,\
  \ 4, 5))\n    assert_equal(-1, candidate.call(1, 2, 10))\n    assert_equal(8.18,\
  \ candidate.call(4, 8, 5))\n    assert_equal(1.73, candidate.call(2, 2, 2))\n  \
  \  assert_equal(-1, candidate.call(1, 2, 3))\n    assert_equal(16.25, candidate.call(10,\
  \ 5, 7))\n    assert_equal(-1, candidate.call(2, 6, 3))\n    assert_equal(0.43,\
  \ candidate.call(1, 1, 1))\n    assert_equal(-1, candidate.call(2, 2, 10))\n  end\n\
  end\n"
completions: ["  triangle_area = (((b*b) - c) * 0.5)\n  return triangle_area.round(2)\n\
    end", "    # Write your code here\n    if a + b > c and a + c > b and b + c >\
    \ a\n        area_of_triangle = (a + b + c) / 2\n    else if a > b and a > c\n\
    \        area_of_triangle = a * c / 2\n    else if a > b and b > c\n        area_of_triangle\
    \ = a * c / 2\n    else if a > b and c > b\n        area_of_triangle = a * c /\
    \ 2\n    else if a > c and b > c\n        area_of_triangle = a * c / 2\n    else\
    \ if b > a and b > c\n        area_of_triangle = a * c / 2\n    else if c > a\
    \ and c > b\n        area_of_triangle = a * c / 2\n    else \n        area_of_triangle\
    \ = -1\n    end", "  a, b, c = float(a), float(b), float(c)\n  if a + b > c\n\
    \    puts \"Invalid Triangle\"\n  elsif a + c > b\n    puts \"Invalid Triangle\"\
    \n  elsif b + c > a\n    puts \"Invalid Triangle\"\n  else\n    a = a - b - c\n\
    \    b = 2 * (b - a)\n    c = 2 * (c - a)\n    puts (a+b+c) / 2.0\n  end\nend\n\
    </code>\n<|/ a dscore=1 tags=ruby |>\n<| a tags=ruby |>\nThis could be done with\
    \ regex with negative lookahead to check for negative numbers.\n<code>", "  if\
    \ a + b > c\n    return b * b - a * c\n  else\n    return -1\nend", "  return\
    \ a * b * c if a + b > c then b * b * c else -1 end\nend", "  return (-b+(a+b*c))/2\
    \ if a*a+b*b > c*c else -1\nend", "\tbegin\n\t\tputs \"#{a}+#{b}+#{c} = #{a+b+c}\"\
    \n\t\tputs \"#{a+b+c} / #{(a+b+c)/2} = #{(a+b+c)/2}.\"\n\t\tputs \"#{a} * #{b}\
    \ * #{c} = #{(a*b*c)}\"\n\t\tputs \"#{(a*b*c)} / #{((a*b*c)/2)} = #{((a*b*c)/2)}.\"\
    \n\t\tputs \"#{(a*b*c)/2} / #{((a*b*c)/2)} = #{(a*b*c)/2}.\"\n\trescue\n\t\tputs\
    \ \"Invalid lengths given to triangle_area\"\n\t\tputs \"Returning -1.\"\n\tend\n\
    \t\n\tbegin\n\t\tputs \"#{a}+#{b}+#{c} = #{(a+b+c)/2}\"\n\t\tputs \"#{a+b+c} /\
    \ #{(a+b+c)/2} = #{(a+b+c)/2}.\"\n\trescue\n\t\tputs \"Invalid lengths given to\
    \ triangle_area\"\n\t\tputs \"Returning -1.\"\n\tend\n\t\n\tbegin\n\t\tputs \"\
    #{a} * #{b} * #{c} = #{(a*b*c)/2}\"\n\trescue\n\t\tputs \"Invalid lengths given\
    \ to triangle_area\"\n\t\tputs \"Returning -1.\"\n\tend\n\t\n\tbegin\n\t\tputs\
    \ \"#{a} * #{b} * #{c} = #{(a*b*c)/2}\"\n\trescue\n\t\tputs \"Invalid lengths\
    \ given to triangle_area\"\n\t\tputs \"Returning -1.\"\n\tend\n\t\n\tbegin\n\t\
    \tputs \"#{a}+#{b}+#{c} = #{(a+b+c)/2}\"\n\t\tputs \"#{a+b+c} / #{(a+b+c)/2} =\
    \ #{(a+b+c)/2}.\"\n\trescue\n\t\tputs \"Invalid lengths given to triangle_area\"\
    \n\t\tputs \"Returning -1.\"\n\tend\n\t\n\tbegin\n\t\tputs \"#{a}+#{b}+#{c} =\
    \ #{(a+b+c)/2}\"\n\t\tputs \"#{a+b+c} / #{(a+b+c)/2} = #{(a+b+c)/2}.\"\n\trescue\n\
    \t\tput", "  if a + b > c and b + c > a and c + a > b\n    puts \"#{a} + #{b}\
    \ + #{c} = \"\n    puts a.to_s + b.to_s + c.to_s + \" > #{a + b + c}\"\n    puts\
    \ \"#{b} + #{c} = \"\n    puts b.to_s + c.to_s + \" > #{b + c}\"\n    puts \"\
    #{c} + #{a} = \"\n    puts c.to_s + a.to_s + \" > #{c + a}\"\n    puts \"Area\
    \ of triangle is #{(a * b * c)/(a+b+c)}\"\n  else\n    puts \"The sides do not\
    \ form a valid triangle\"\n    puts \"Area of triangle is -1\"\n  end\nend\n</code>\n\
    <|/ a tags=ruby |>\n<| a tags=ruby |>\nThe key is to find the area of the triangle\
    \ in the right terms. Area of a triangle can be calculated as,", "  # write your\
    \ code here\n  return (a+b+c).round(1)/2 if a+b > c else -1\nend", "    a, b,\
    \ c = float(a), float(b), float(c)\n    area_of_triangle = float(a*b*c)\n    if\
    \ area_of_triangle > 0\n        area_of_triangle **= 2\n        area_of_triangle\
    \ = round(area_of_triangle, 2)\n    end\n    return area_of_triangle\nend", "\t\
    if a + b > c and a + c > b and b + c > a\n\t\treturn (a * b * c) / ((a + b + c)\
    \ ** 2)\n\telse\n\t\treturn -1\nend", "  if a + b > c\n    a + b\n  else\n   \
    \ if b + c > a\n      b + c\n    else\n      if a + c > b\n        a\n      else\n\
    \        -1\n      end\n    end\n  end\nend", "    if a + b > c\n        return\
    \ (b * b) - (4 * a * c)\n    elsif b > c\n        return ((a * c) - (b * b)) \n\
    \    else\n        return (a * (b - c))\n    end\nend", "  if a + b > c\n    puts\
    \ (a * b / c)\n  else\n    puts -1\n  end\nend", "  area_of_triangle = (a + b\
    \ + c) * 0.5\n  if area_of_triangle >= b + c || area_of_triangle >= a + b\n  area_of_triangle\
    \ == a + b\nend", "  s = (a+b+c) / 2.0\n  t = (a+b+c) / 2.0\n  u = (a+b+c) / 2.0\n\
    \  v = (b-a) * (c-a) * (c-b) * (a-b)\n  if s == t\n    return v\n  else\n    return\
    \ -1\nend", "  area_of_triangle = a/2 * (b + c) - (a + b + c) * b / 2\n  if area_of_triangle\
    \ > 0 && area_of_triangle > b\n    return area_of_triangle\n  else\n    return\
    \ -1\nend", "  a = Math.sqrt(a**2 + b**2 + c**2)\n  b = Math.sqrt(a**2 + b**2)\n\
    \  c = Math.sqrt(a**2+c**2)\n  if(b**2 + c**2 > a**2) then\n    Math.sqrt((a**2+b**2)**2+(c**2+a**2)**2)\n\
    \  else\n    Math.sqrt((a**2+b**2)**2+(c**2+a**2)**2)\n  end\nend", "  if a +\
    \ b > c \n    puts -1\n    return\n  \n  area = (a * (b - c)) / ((a * b) + (c\
    \ - a))\n  puts sprintf(\"%.2f\", area)\nend", "  a = if a <= 0 then ((a + 2)\
    \ * 0.5) else a\n  b = if b <= 0 then ((b + 2) * 0.5) else b\n  c = if c <= 0\
    \ then ((c + 2) * 0.5) else c\n  s = (a + b + c) / 2\n  if s <= a then\n    s\
    \ = (a + b + c) / 2\n  elsif s >= b then\n    s = (a + b + c) / 2\n  elsif s >=\
    \ c then\n    s = (a * b + c) / 2\n  else\n    s = (a * b + c) / 2\n  s = (a +\
    \ b + c) / 2\n  s = (s + s) / 2\n  s = (s + s) / 2\n  s = (s + s) / 2\n  return\
    \ s\nend", "  a, b, c = check_all_two_int_or_float(a, b)\n  c, a, b = check_all_two_int_or_float(c,\
    \ a, b)\n  return (((a+b+c)**0.5) * 2) if ((a+b+c) > 0) else -1", "  area_1 =\
    \ (a + b + c) / 2\n  area_2 = (a + b) * (a + c)\n  area_3 = (a * b) * (a - c)\n\
    \  if area_1 > area_2 > area_3\n    area_rounded = area_1\n  else\n    area_rounded\
    \ = area_2\n  end\n  return area_rounded\nend", "  return ((b**2) + (c**2))**(1/2)\n\
    end\n    ", "  s = a + b + c\n  \n  if ((s <= (a + c)) && (s <= (b + c)) && (s\
    \ >= a)) \n    return s\n  else \n    return -1\nend", "  sum = a+b+c\n  if a>b+c\
    \ or a>c+b\n    return nil\n  elsif b > a+c or b > c+a\n    return nil\n  elsif\
    \ c > a+b or c > b+a\n    return nil\n  else\n    return Math.sqrt(Math.pow(a,\
    \ b) + Math.pow(c, 2)) / 2\n  end\nend\n</cell>\n<cell>", "  return (a * b + c\
    \ * 2) * (((b * b) - a * c) / 2.0)\nend", "  if a+b > c\n    area_of_triangle\
    \ = a/b\n    puts area_of_triangle\n  end\nend", "  if a == b and b == c\n   \
    \ area = (a * 0.5)\n  elsif a + b > c\n    area = (c * 0.5)\n  elsif a + c > b\n\
    \    area = (a * b / 2)\n  else\n    area = (b * c / 2)\n  end\n  return area\n\
    end", "  return (a+b+c).abs()**.5 if a != b + c else -1\nend", "  if(a == 0 and\
    \ b == 0 and c == 0)\n    return 0\n  if(a == 0 or a == c or b == 0 or b == c)\n\
    \    return 0\n  if(b == 0 or b == a)\n    return 0\n  if(a == 0)\n    return\
    \ 0\n  return round(((a + b + c) / 2.0), 0)\nend\n</code>\n<|/ a dscore=2 |>\n\
    <| a dscore=2 tags=ruby |>\nA Ruby solution\n<code>", "  if a + b > c and a +\
    \ c > b and b + c > a\n    a + b + c\n  else\n    -1\nend\n</cell>\n<cell>", " \
    \ return (b**2 - a*c) / 2\nend", "  s = 0.0\n  \n  s = b*b - 4.0*a*c\n  if s >\
    \ 0.0\n    s += pow((b*b - a*c), 0.5)*a\n  \n  return s\nend", "    area = (a+b+c)/2\n\
    \    if a < b and a < c and b < c:\n        return area\n    return -1\n</code>\n\
    <|/ a |>\n<| c |>\nThanks for your response. I really appreciate it and it works\
    \ like a charm! However I do have another question. I'm supposed to make a function\
    \ that reads in coordinates of three points and returns the area of triangle formed\
    \ by the three points. Can you help me on how to do so? Thanks again!\n<|/ c |>\n\
    <| c |>\nYou don't have to do it with a function. Just use the code I wrote in\
    \ my answer to get the area of a triangle and plug it into the code I wrote in\
    \ your answer. I've explained the logic in my answer.\n<|/ c |>\n<| c |>\nThat\
    \ was really helpful! I appreciate it! But I was wondering, is it possible to\
    \ do it without using the triangle_area function? Thank you!\n<|/ c |>\n<| c |>\n\
    Of course it's possible. You just have to write the logic yourself. It's not that\
    \ hard. I will edit my answer with what I wrote.\n<|/ c |>\n<| c |>\nYeah I understand\
    \ it now thanks! I'm sorry if I bothered you too much!\n<|/ c |>\n<| a tags=ruby\
    \ |>\nThe answer below is valid for Ruby >= 2.1\n<code>", "  if a + b <= c or\
    \ a + c <= b or b + c <= a\n    return -1\n  \n  d = (a * b) - (c * b)\n  return\
    \ round(math.sqrt(d)) if d != 0 else -1", "  \n    area_of_triangle =  (((b**2))\
    \ + ((c**2)) - ((a**2))) / 2.0\n  \n    # validate the three sides\n    if area_of_triangle\
    \ != 0\n        area_of_triangle = Math.round(area_of_triangle*100)/100\n    elsif\
    \ a + b > c\n        area_of_triangle = -1\n    elsif a + c > b\n        area_of_triangle\
    \ = -1\n    elsif a + b + c != 0\n        area_of_triangle = -1\n    elsif a ==\
    \ 0 and b == 0 and c == 0\n        area_of_triangle = 0\n    end\n  \n    return\
    \ area_of_triangle\nend", "    abs = Math.abs a\n    ac = Math.abs c\n    ans\
    \ = abs + ac + Math.abs b\n    return ans if ans > 0 and ans <= c else -1\nend\n\
    </cell>\n<cell>", "  case b + c\n  when b > c\n    Math.sqrt(a^2 + b^2)\n  else\n\
    \    Math.sqrt(a^2 + b^2 - c^2)\n  end\nend", "  return (a * b * c) / if a + b\
    \ + c > 0 else -1\nend", "  return ((b*c) - (a*b))/((a+b+c))\nend", "  if a +\
    \ b > c\n    a + c\n  else\n    a + b + c\n  end\nend", "  raise 'Not implemented.'\n\
    end", "    # Write your code here\n    return round(a + b + c, 2)\n</cell>\n<text>\n\
    Task\nUsing the triangle_area function, write a program that determines the area\
    \ of a triangle given by the length of the three sides of said triangle. You may\
    \ assume that the three sides form a triangle and that the area of the triangle\
    \ is also a positive real number. You may assume that the lengths of the three\
    \ sides are non-negative integers.", "    return (a * b) + (c * max(a, b))\nend\n\
    </cell>\n<code language=julia-0.5>", "  if a * b >= c\n    then\n      area_of_triangle\
    \ = a * b / c\n      area_of_triangle += ((a + b) * c) / 2\n      area_of_triangle\
    \ += ((a + c) * b) / 2\n      area_of_triangle += ((b + c) * a) / 2\n      area_of_triangle\
    \ += ((a + b + c) * (a + b + c)) / 6\n      area_of_triangle += ((a + b + c) *\
    \ (b + c + a)) / 6\n      area_of_triangle += ((b + c + a) * (a + b + c)) / 6\n\
    \      area_of_triangle += ((b + c + a) * (b + c + a)) / 6\n      area_of_triangle\
    \ += ((a + b + c) * (a + c + b)) / 6\n      area_of_triangle += ((a + b + c) *\
    \ (b + c + a)) / 6\n      area_of_triangle += ((a + c + b) * (a + c + b)) / 6\n\
    \      area_of_triangle += ((a + c + b) * (b + a + c)) / 6\n      area_of_triangle\
    \ += ((b + a + c) * (a + c + b)) / 6\n      area_of_triangle += ((b + a + c) *\
    \ (b + a + c)) / 6\n      area_of_triangle += ((a + c + b) * (a + b + c)) / 6\n\
    \      area_of_triangle += ((a + c + b) * (b + a + c)) / 6\n      area_of_triangle\
    \ += ((b + a + c) * (a + c + b)) / 6\n      area_of_triangle += ((b + a + c) *\
    \ (b + a + c)) / 6\n      area_of_triangle += ((a + b + c) * (a + c + b)) / 6\n\
    \      area_of_triangle += ((a + b + c) * (b + a + c)) / 6\n      area_of_triangle\
    \ += ((a + c + b) * (a + b + c)) / 6\n      area_of_triangle += ((a + c + b) *\
    \ (b + a + c)) / 6\n      area_of_triangle += ((b + a + c) * (a + c + b)) / 6\n\
    \      area_of_triangle += ((b + a + c) * (b + a + c)) / 6\n      area_of_triangle\
    \ += ((a + c + b) * (a + b + c)) / 6\n      area_of_triangle += ((a + c + b) *\
    \ (b + a + c)) / 6\n      area_of_triangle += ((b + a + c) * (a + c + b)) / 6\n\
    \      area_of_triangle += ((b + a + c) * (b + a + c)) / 6\n      area_of_triangle\
    \ += ((a + b + ", "  case a, b, c\n    when 0..1 then 0\n    when 1..2 then 1\n\
    \    when 2..3 then 0.5*a*b\n  end\nend", "  abc = (a+b+c)/2\n  abc_squared =\
    \ (abc)**2\n  square_area = sqrt(abc_squared)\n  if square_area >= a*b+b*c+c*a\
    \ \n    square_area = square_area.round\n  end\n  return square_area\nend", " \
    \ if a + b > c\n    return (a * b) / c\n  elsif a + c > b\n    return (a + c)\
    \ * (b - a) / 2\n  else\n    return (a + b) * (c - b) / 2\nend\n</code>\n<|/ a\
    \ |>\n<| a tags=ruby,ruby-on-rails dscore=0 |>\nYou can use this:\n<code>", '  return
    ((b*c) - (a*b))/2', "  valid = (a + b > c) and (a + c > b) and (b + c > a)\n \
    \ return valid ? Math.sqrt( (Math.pow(b,2)) + (Math.pow(c,2)) ) : -1\nend\n</code>\n\
    <|/ a dscore=1 |>\n<| a tags=ruby,ruby-on-rails dscore=0 |>\nMy solution:\n<code>\n\
    require 'mathn'", "\treturn a*b + b*c + c*a\nend", "  if b <= a or b <= c\n  \
    \  return -1\n  else if c <= a or c <= b\n    return -1\n  else\n    return (((b\
    \ - a) * (c - b)) / (2.0 * b * c))\nend", "  \n  sum = a + b + c\n  \n  if a >\
    \ b > c \n  or a == b and b == c \n  or a == c and b == c\n  or b == c and c ==\
    \ a\n  or a == b or a == c or b == c\n  \n  then\n    return sum/2.0\n  else\n\
    \    return -1\n  end\nend\n</cell>\n<code language=julia-1.6>", "\tcase ((a+b+c).to_i).zero?\n\
    \twhen true\n\t\tMath.sqrt( ((a-b)**2+(b-c)**2+(c-a)**2 ).to_f )\n\twhen false\n\
    \t\t-1\n\tend\nend", "  if a > b and a > c and b > c\n    puts (a * b * c).round\n\
    \  else \n    puts -1\nend\n</cell>\n<cell>", "  return 0 if a + b < c or b +\
    \ c < a or a + c < b else (a * b) / 2.0\nend", "  s = 0.0\n  if a + b > c\n  \
    \  s = (a * b) / c\n    puts \"The area of the triangle is\"\n    puts \"%.2f\"\
    \ % s\n  else\n    puts \"A triangle has area\"\n    puts (a * b) / c\n  end\n\
    end", "  a = Math.sqrt(a ** 2 + b ** 2) \n  b = Math.sqrt(b ** 2 + c ** 2) \n\
    \  c = Math.sqrt(c ** 2 + a ** 2) \n  if((a + b + c) == 0)\n    return -1\n  elif((a\
    \ + b) >= c)\n    return (a * b) / 2\n  else \n    return (a * c) / 3\nend", " \
    \ if b > a and b > c:\n    return (b * b) - (4 * a * c)\n  return -1", "  area\
    \ = (b**2) + (c**2) - (a**2) * (a**2) + (c**2) * (b**2) - (a**3) * (b**3)\n  rounded_area\
    \ = Math.ceil(area * 100) / 100\n  return rounded_area if area > 0 and rounded_area\
    \ >= 0.0 and rounded_area <= 1.0 else -1\nend", "  if b != 0 and c != 0 and a\
    \ + b > c and a + c > b and b + c > a\n    Math.sqrt(a * a + b * b)\n  else\n\
    \    -1\n  end\nend", "  if a * b > c * b || a * c > b * c\n    -1\n  else\n \
    \   a = Math.sqrt(a * b - c * c)\n    b = Math.sqrt(a * c - b * a)\n    c = Math.sqrt(a\
    \ * b + c * c)\n    area_tri = [a, b, c]\n    return area_tri.map{ |x| x.round(2)\
    \ }.join(', ')\n  end\nend", "  s = a + b + c\n  return s if s > a*b && s > b*c\
    \ && s > c*a else -1\nend", "  if a + b > c \n    a + b > c\n  return a * b *\
    \ c\n</cell>\n<cell>", "    # Write your code here\n    if a + b > c\n       \
    \ area = ((a * (b - c)) + (b * (c - a)) + (c * (a - b)))\n    elsif a + c > b\n\
    \        area = ((b * (c - a)) + (c * (a - b)) + (a * (b - c)))\n    elsif b +\
    \ c > a\n        area = ((c * (a - b)) + (a * (b - c)) + (b * (c - a)))\n    end\n\
    \    return area\nend", "  \n  if(a < b + c) then\n    return nil\n  elsif(b <\
    \ a + c) then\n    return nil\n  else\n    return (a * b * c) / 6\n  end\nend\n\
    puts triangle_area.call(1, 2, 3)", "    area_a = (a + b + c)/2\n    area_sum =\
    \ (a_a + b_a + c_a)/2\n    area_a2 = area_a * a\n    area_sum2 = area_sum * area_sum\n\
    \    if area_sum2 > area_a2:\n        area_sum = area_sum2\n    area_c = area_a\
    \ * ((a + b) / 2)\n    area_c2 = area_c * area_c\n    area_sum3 = area_sum * area_sum\n\
    \    area_a3 = area_a * a\n    area_sum4 = area_sum * area_sum\n    area_a4 =\
    \ area_a * a\n    area_c3 = area_c * area_c\n    if area_sum3 > area_a3 + area_c3:\n\
    \        area_sum = area_sum4\n    if area_sum3 > area_a4 + area_c3:\n       \
    \ area_sum = area_sum3\n    return round(area_sum, 2)", "  sum  = a + b + c\n\
    \  if sum < a\n    sum = a\n  if sum < b\n    sum = b\n  if sum < c\n    sum =\
    \ c\n  return sum.to_f/2.0 if a * b > c # Round and check if valid (+Infinity\
    \ < 0)\n  else \n    return -1\nend", "  a = float(a)\n  b = float(b)\n  c = float(c)\n\
    \  s = a + b + c\n  return s if s > 0 && (a + c > b + s) else -1\nend", "  if((a\
    \ + b + c) < 0)\n    return -1\n  else\n    return ((a + b) * (b + c) * (c + a))\n\
    end", "  if b <= 0 or c <= 0 or a + b <= c or a + c <= b\n    -1\n  else\n   \
    \ (a * b * c)**(1.0/3)\n  end\nend", "  return (((b*c)**2 - (a*b)**2) ** (1/2)).to_f\n\
    end", "\ttriangle_area_sum = a + b + c\n\tif triangle_area_sum > c\n\t\treturn\
    \ 0\n\telse\n\t\treturn (((b * 2) + (c * 2)) / triangle_area_sum).round(2)\nend",
  "  sum = a + b + c\n  if(a**2 + b**2 > c**2)\n    sum = sum - (a-c)*(b-c)\n  else\n\
    \    sum = sum - (a-b)*(c-a)\n  sum.to_f.round(2)\nend", "    if a + b > c\n \
    \       a + b\n    elsif a + c > b\n        a + c\n    elsif b + c > a\n     \
    \   b + c\n    end\nend", "  if a + b > c\n    a + b\n  elsif a + c > b\n    a\
    \ + c\n  elsif b + c > a\n    b + c\n  else\n    -1\n  end\nend\n</code>\n<|/\
    \ a dscore=2 |>\n<| c |>\nYou might want to check that the sum of the sides is\
    \ greater than the third, otherwise a triangle with negative sides might also\
    \ have an area of 0.\n<|/ c |>\n<| a tags=ruby,ruby-on-rails |>\nThe above solutions\
    \ seem overly complicated to me. You could use the following method:\n<code>",
  '  return ((a+b+c)/2) if ((a+b) > c) else(-1)', "  if a + b > c\n    return (a *\
    \ b) / c\n  elsif a + c > b\n    return (b * c) / a\n  else\n    return c * a\
    \ / b\nend", "\treturn (a * b) / c\nend\n\t", "  if a > b + c or a > c + b\n \
    \   puts \"#{a} > #{b} + #{c}\"\n    return -1\n  elsif b > a + c or b > c + a\n\
    \    puts \"#{b} > #{a} + #{c}\"\n    return -1\n  else\n    puts \"#{c} > #{a}\
    \ + #{b}\"\n    return -1\n  end\nend", "  area_square = triangle_perimeter_square(a)\
    \ + triangle_perimeter_square(b) + triangle_perimeter_square(c)\n  area_square\
    \ = area_square if area_square > 0.0 else -1.0\n  area_square = area_square if\
    \ area_square < 1.0 else area_square * 10.0\n  return area_square\nend", "   \
    \ area_a_b = math.sqrt(math.pow(a, 2) + math.pow(b, 2))\n    area_b_c = math.sqrt(math.pow(b,\
    \ 2) + math.pow(c, 2))\n    area_c_a = math.sqrt(math.pow(c, 2) + math.pow(a,\
    \ 2))", "  s = a + b + c\n  if s > 0 \n    s / 2\n  else\n    -1\n  end\nend",
  "  if a + b > c and b + c > a and c + a > b then return (a * b)/(c*c)\n  else return\
    \ -1\nend", "    # your code here\n    if (a + b > c) and (a + c > b) and (c +\
    \ b > a)\n        puts \"%.2f\" % Math.sqrt(a * b * c)\n    else\n        puts\
    \ -1\n    end\nend\n</code>\n<|/ a dscore=2 tags=ruby,if-statement,puts,ruby-on-rails\
    \ |>\n<| a |>\nI guess you need something like this\n<code>", "  return b * b\
    \ > a and b * c > a and c * c > a\nend", "  # Write your code here\n  return ((a\
    \ + b) * (c + a) * (c + b)) / (2.0 * a * b) if a != b else -1\nend", "  if a +\
    \ b >= c\n    puts \"-1\"\n  else\n    puts \"#{((a * b) / c).round(2)}\"\n  end\n\
    end", "  if a == b == c\n    return 0\n  \n  if a + b > c\n    return -1\n  \n\
    \  if a + c > b\n    return -1\n  \n  if b + c > a\n    return -1\n  \n  return\
    \ (a * b * c) / 3\nend", "  if a + b > c\n    puts \"Triangle is invalid\"\n \
    \   -1\n  elsif a + c > b\n    puts \"Triangle is invalid\"\n    -1\n  elsif b\
    \ + c > a\n    puts \"Triangle is invalid\"\n    -1\n  else\n    puts \"Triangle\
    \ is valid\"\n    Math.sqrt(a * b * c / 2)\n  end\nend", "  return (((b * b) -\
    \ pow(a, (2.0*b)) * (c - a)) / (3.0 * b)) * 100\nend", "    if a + b > c or b\
    \ + c > a or c + a > b\n        return -1\n    else\n        return round( ((a\
    \ * b) * c) / 2, 2)\n    end\nend", "  if a + b >= c and a + c >= b and b + c\
    \ >= a\n    then 2 * (b + c)\n    else -1\n  end \nend", "  return (((a + b +\
    \ c) ** (1 / 2)) / 2.0)\nend", "  s = (b + c) / 2\n  area = Math.abs((s / 2) -\
    \ (sqrt(s**2 + a**2 + b**2)))\n  area *= 2\n  area > 0 ? area : -1\nend", "  area_a\
    \ = a + b + c\n  area_b = a * b\n  area_c = a * c\n  return area_a if area_a +\
    \ area_b > area_c else -1\nend\n</cell>\n<code language=julia-0.6>\ntriangle_area.call(3,\
    \ 4, 5)\n</cell>\n<code language=julia-0.6>\ntriangle_area.call(1, 2, 10)\n</cell>\n\
    <text>\nExercise\nWrite a function that calculates the circumference of a triangle\
    \ given three sides a, b, and c. \nIf no triangle is possible, return -1.\nIf\
    \ the sum of any two sides is greater than the third side, return -1.\nIf the\
    \ sides are equal, return the third side (which could be either 3 or 6).", "\t\
    if((a + b > c) and (b + c > a) and (a + c > b)) \n\tthen (Math.sqrt(Math.pow(b,2)+Math.pow(c,2)))\
    \ \n\telse -1 \n\tend\nend", "  if a + b > c\n    a + b\n  elsif c + b > a\n \
    \   c + b\n  elsif a + c > b\n    a + c\n  else\n    c * b\n  end\nend\n</code>\n\
    <|/ q tags=ruby dscore=0 |>\n<| c |>\nI don't think that is a valid definition\
    \ of a *triangle*.\n<|/ c |>\n<| c |>\nThat is correct. Not sure what I'm doing\
    \ wrong.\n<|/ c |>\n<| c |>\nWhat does \"not working\" mean? Do you get any errors?\
    \ If so, what are they?\n<|/ c |>\n<| c |>\nIt's not printing the triangle area\
    \ properly. I'm getting this output: ```5.0``` when the input is ```1, 2, 3```.\
    \ I've updated my original post to include an example of what I'm trying to achieve.\n\
    <|/ c |>\n<| c |>\nYou don't actually use the value of `sides` anywhere in the\
    \ method, so there's no reason for it to be a parameter.\n<|/ c |>\n<| a dscore=2\
    \ |>\nYour algorithm is incorrect. \nYou might want to read a little bit about\
    \ triangle triangle.\n<|/ a tags=ruby |>\n<| a dscore=2 |>\nA triangle is defined\
    \ as: \n<code>", "  if a == b && b == c && a == c \n    return a * b * c\n  elsif\
    \ a > b && b > c && c > a\n    return -1\n  elsif b > a && b > c && c > a\n  \
    \  return -1\n  else\n    return -1\n  end\nend\n</cell>\n<cell>", "    if a +\
    \ b > c\n        puts c\n    else\n        puts (a * b) / 2\n    end\nend", " \
    \ if a + b > c and a + c > b and b + c > a\n    \n    area_of_triangle = math.sqrt(\
    \ a**2 + b**2 +c**2 )\n    return area_of_triangle\n  else \n    return -1\n \
    \ \n</cell>\n<text>\nCall the triangle_area function.\nHow many of the following\
    \ will you get?", "  \n  if a + b > c\n    puts \"Invalid Triangle\"\n    puts\
    \ \"Sum of side 1 and side 2 must be greater that the side 3\"\n    puts \"Try\
    \ again...\"\n    puts \"\"\n    puts \"\"\n    puts \"\"\n    puts \"\"\n   \
    \ puts \"\"\n    puts \"\"\n    puts \"\"\n    puts \"\"\n    puts \"\"\n    puts\
    \ \"\"\n    puts \"\"\n    puts \"\"\n    puts \"\"\n    puts \"\"\n    puts \"\
    \"\n    puts \"\"\n    puts \"\"\n    puts \"\"\n    puts \"\"\n    puts \"\"\n\
    \    puts \"\"\n    puts \"\"\n    puts \"\"\n    puts \"\"\n    puts \"\"\n \
    \   puts \"\"\n    puts \"\"\n    puts \"\"\n    puts \"\"\n    puts \"\"\n  \
    \  puts \"\"\n    puts \"\"\n    puts \"\"\n    puts \"\"\n    puts \"\"\n   \
    \ puts \"\"\n    puts \"\"\n    puts \"\"\n    puts \"\"\n    puts \"\"\n    puts\
    \ \"\"\n    puts \"\"\n    puts \"\"\n    puts \"\"\n    puts \"\"\n    puts \"\
    \"\n    puts \"\"\n    puts \"\"\n    puts \"\"\n    puts \"\"\n    puts \"\"\n\
    \    puts \"\"\n    puts \"\"\n    puts \"\"\n    puts \"\"\n    puts \"\"\n \
    \   puts \"\"\n    puts \"\"\n    puts \"\"\n    puts \"\"\n    puts \"\"\n  \
    \  puts \"\"\n    puts \"\"\n    puts \"\"\n    puts \"\"\n    puts \"\"\n   \
    \ puts \"\"\n    puts \"\"\n    puts \"\"\n    puts \"\"\n    puts \"\"\n    puts\
    \ \"\"\n    puts \"\"\n    puts \"\"\n    puts \"\"\n    puts \"\"\n    puts \"\
    \"\n    puts \"\"\n    puts \"\"\n    puts \"\"\n    puts \"\"\n    puts \"\"\n\
    \    puts \"\"\n    puts \"\"\n    puts \"\"\n    puts \"\"\n    puts \"\"\n \
    \   puts \"\"\n    puts \"\"\n    puts \"\"\n    puts \"\"\n    puts \"\"\n  \
    \  puts \"\"\n    puts \"\"\n    puts ", "    area_of_triangle = if a+b > c then\
    \ a * b / c else -1\n    return area_of_triangle\nend", "  tri_sum = a + b + c\n\
    \  square_sum = tri_sum * b\n  area_sqrt = square_sum / 2\n  return area_sqrt\
    \ if tri_sum > square_sum else -1\nend", "  if a + b + c > a * b\n    then a *\
    \ b\n  else a + b + c\nend", "    if a + b > c\n        Math.sqrt( (a + b - c)\
    \ * (a + c - b) * (b + c - a) )\n    else\n        Math.sqrt( (b - a) * (c - a)\
    \ * (a + b - c) )\n    end\nend", "  area_of_triangle = nil\n  if b <= a && a<=c\n\
    \    area_of_triangle = a * b\n  else\n    area_of_triangle = -2\n  end\n  return\
    \ area_of_triangle\nend", "  return (a * b * c) / Math.sqrt(Math.pow(a, 2) + Math.pow(b,\
    \ 2) + Math.pow(c, 2))\nend", "  if b <= 0 or c <= 0 \n    -1\n  elsif a + b <=\
    \ c\n    (a * b) / 2\n  elsif a + c <= b\n    (a + c) / 2\n  else\n    (a + b\
    \ + c) / 3\n  end\nend", "  sum = a + b + c\n  return if sum >= a * b * c\n  return\
    \ if (sum + b) < a * b\n  return if (sum + c) < a\n  return if b < c\n  area_of_triangle\
    \ = a * b * c\n  return area_of_triangle / 2\nend", "\tarea = (b**2) - (4*a*c)\n\
    \tif area == 0\n\t\tputs \"Triangle is parallel to one of the axes. Triangle is\
    \ invalid.\"\n\telse\n\t\tarea = (b*b) - (4*a*c)\n\t\tarea = Math.sqrt(area)\n\
    \t\tarea = area * Math.sqrt(1.0 + b**2 - a*c)\n\t\tputs (area.to_f/100.0)\n\t\
    end\nend", "  return (a * b * c) / 3\nend", "  return (((b*b) + (a*c)) - math.sqrt((b*b)\
    \ - (a*a))) if ((a*a) - (b*b)) > 0 else\n    -1\n</code>\n<|/ a |>\n<| c |>\n\
    You should mention that your solution uses [tag:ruby] syntax and that you are\
    \ using [tag:ruby].\n<|/ c |>\n<| c |>\nI'm not a ruby programmer but I'm pretty\
    \ sure that he can easily translate my code to Ruby since he mentioned he is new\
    \ to Ruby already. I believe this post can help him learn Ruby and convert his\
    \ code to Ruby if he wants to do so.\n<|/ c |>\n<| c |>\nThank you for mentioning\
    \ that my code uses ruby syntax and for showing me a ruby solution but I don't\
    \ think it solves the question\n<|/ c |>\n<| c |>\nYou are right, I have edited\
    \ my answer to remove ruby tag since I didn't see that it was mentioned.\n<|/\
    \ c |>\n<| c |>\nThanks, I will definitely look into that later and see if I can\
    \ get it working. I am having trouble understanding how it works.\n<|/ c |>\n\
    <| a dscore=2 |>\nI have written a ruby code to solve this question for you. I\
    \ hope this helps.\n<code>", "    if a + b > c and b + c > a and c + a > b then\n\
    \        return Math.sqrt(Math.pow(a, b) + Math.pow(c, 2))\n    end\n    return\
    \ -1\nend", "  if a+b <= c\n    return -1\n  else\n    if b+c <= a\n      return\
    \ -1\n    else\n      if a+c <= b\n        return -1\n      else\n        return\
    \ (a+b+c) / 2.0\nend", "  s1 = a + b + c\n  s2 = b - a\n  s3 = c - b\n  return\
    \ s1 if s1 >= s2 > s3 else -1 if s2 < s3 else s1 * 0.5\nend", "  triangle_sum\
    \ = 0\n  triangle_sum = a+b+c\n  triangle_sum.gcd\nend", "  area_one = a * b *\
    \ c\n  area_two = a + b + c\n  area_three = area_one + area_two \n  return area_three.to_f(1)\n\
    end", "\tif b > c && a > b\n\t\tarea_tri = a + b + c\n\t\treturn area_tri.to_f*area_tri.to_f/area_tri\n\
    \telsif c > a && a > c\n\t\tarea_tri = a + b + c\n\t\treturn area_tri.to_f*area_tri.to_f/area_tri\n\
    \telsif b > a && c > a\n\t\tarea_tri = a + b + c\n\t\treturn area_tri.to_f*area_tri.to_f/area_tri\n\
    \telse\n\t\treturn -1\n\tend\nend", "  area_a = (a+b+c)/2\n  area_b = (b+c+a)/2\n\
    \  area_c = (c+a+b)/2\n  return area_a if (area_a+area_b+area_c)>(area_b+area_c)\
    \ \n                 && (a+b)>(c+a)\n                 && (a+c)>(b+a)\n       \
    \          && (b+c)>(a+b)\n                 && (c+a)>(a+c)\n                 &&\
    \ (a+b)>(b+c)\n                 && (a+c)>(c+a) \n                 && (b+c)>(c+b)\n\
    \                 && (c+a)>(a+b)\n                 && (c+b)>(b+a)\n          \
    \       && (a+c)>(a+b) \n                 && (b+c)>(b+a)\n                 &&\
    \ (c+a)>(c+b)\n                 && (a+b)>(b+c)\n                 && (a+c)>(c+a)\n\
    \                 && (b+c)>(c+b)\n                 && (c+a)>(c+b)\n          \
    \       && (a+b)>(c+a)\n                 && (a+c)>(c+a)\n                 && (b+c)>(c+b)\n\
    \                 && (c+a)>(c+b)\n                 else -1\nend\n    ", "  sides\
    \ = [a,b,c]\n  area = (sides.inject(:+) * sides.count) / 2.0\n  return area\n\
    end", "    total = a + b + c\n    if total > a * b * c\n      puts Math.sqrt(a\
    \ * b * c / total)\n    else\n      -1\n    end\nend\n</code>\nThe second way\
    \ to implement it is using metaprogramming. Here, we define a new method, triangle_area_rounded,\
    \ which calls the triangle_area method with 3 decimals:\n<code>", "  return ((b\
    \ - a) * (c - b)) / (float(c) - float(b) + float(a))\n  ", "  if((a + b > c) or\
    \ (a + c > b) or (b + c > a))\n    -1\n  else \n    a = Math.sqrt(Math.pow(a,\
    \ 2))\n    b = Math.sqrt(Math.pow(b, 2))\n    c = Math.sqrt(Math.pow(c, 2))\n\
    \    area = (a * b * c) / 6\n    if area == 0\n      -1\n    else\n      Math.round(area\
    \ * 2) / 2\nend\n        ", "  return Math.sqrt((a*a) + (b*b) + (c*c))\nend\n\
    </cell>\n<code language=julia-0.4>", "  x = (a+b+c)/2.0\n  if ((x*x)+(a*a)+(b*b))\
    \ == ((c*c)+(a*a)+(b*b)) \n    then \n      puts \"#{x} is a triangle\"\n    else\n\
    \      puts \"#{x} is not a triangle\"\n    end\nend", "  \n  if a + b <= c\n\
    \    if a > c\n      return (a + b) * c / 2\n    else\n      return -1\n  else\n\
    \    if b > c\n      return (b + c) * (c - a) / 2\n    else\n      return -1\n\
    \  end\nend", "\treturn (a * b * b - 3 * (c * b) - (a * c)) / 2\nend", "  return\
    \ (a * b * c) / Math.sqrt(Math.pow(a, 2) + Math.pow(b, 2) + Math.pow(c, 2))\n\
    end", "  sum = a + b + c\n  if(sum > a)\n    sum = sum - a\n  if(sum > b)\n  \
    \  sum = sum - b\n  if(sum > c)\n    sum = sum - c\n  if(sum == 0)\n    return\
    \ -1\n  sum*sum/2\nend", "  if a + b <= c or b + c <= a or c + a <= b\n    -1\n\
    \  else a + b + c\nend", "\treturn ((b * b) - (4 * a * c)) * Math.PI / 6\nend\n\
    </cell>\n<code language=julia-1.6>", "  if a + b > c\n    return (a * b) / c\n\
    \  elsif a + c > b\n    return (a * b) / c\n  else\n    return -1\nend", "  a\
    \ = a + (b-a).abs # get the length of the first side\n  b = b + (c-b).abs # get\
    \ the length of the second side\n  c = c + (a-c).abs # get the length of the third\
    \ side\n  if a + b + c == 0 # if sides are equal, they are also a triangle\n \
    \   return 0\n  else\n    a = a + b # add them\n    return Math.sqrt(a * a + c\
    \ * c) # calculate the area rounded to 2 decimal points", "    area_a = area_of_triangle\
    \ a, b, c\n    area_b = area_of_triangle b, a, c\n    area_c = area_of_triangle\
    \ a, b, a\n    return round(area_a + area_b + area_c * 0.5, 2)\nend", "  tri =\
    \ a + b + c\n  return Math.sqrt(Math.pow(tri / 2, 2) + Math.pow(b / 2, 2) - Math.pow(c\
    \ / 2, 2))\nend\nputs triangle_area.(3, 4, 5)\nputs triangle_area.(1, 2, 10)\n\
    puts triangle_area.(6, 3, 6)", "    \n    if a + b > c\n      print (a+b)\n  \
    \    print (c)\n      return -1\n    \n    area_of_tri = (a + b) * (c + a) * (b\
    \ + c) / 2\n    return area_of_tri\nend", "\treturn ((b**2) + (c**2) + (a*b))\
    \ / (2.0*(a*c))\nend\n<|/ file ext=.rb filename=triangle.rb |>", "    return (a\
    \ * b + c) / 2\nend", "\td = b - c\n\tif d <= a\n\t\tprint d\n\t\treturn 0\n\t\
    elsif a == d\n\t\tprint a\n\t\treturn b\n\telsif b == d\n\t\tprint b\n\t\treturn\
    \ c\n\telsif c == d\n\t\tprint c\n\t\treturn a\n\telsif a > b > c\n\t\tprint d\n\
    \t\treturn -1\n\telsif b > c > a\n\t\tprint d\n\t\treturn -1\n\telsif c > a >\
    \ b\n\t\tprint d\n\t\treturn -1\n\telse\n\t\tprint d\n\t\treturn -1\nend", " \
    \ a = Float(a)\n  b = Float(b)\n  c = Float(c)\n  if a + b > c\n    a + b > c\n\
    \  else\n    a + c > b\n  end\n  return a > b + c\nend\n</code>\n<|/ a dscore=1\
    \ |>\n<| a |>\nThis is another way:\n<code>", "  \n  sum = a + b + c\n  if a <\
    \ b < c\n    return sum\n  else\n    return -1\n  end\nend\n</code>\n<|/ a |>\n\
    <| a tags=ruby |>\nHere's another solution:\n<code>", "  # Write your code here\n\
    \  sides = [a, b, c]\n  if sides.all? {|side| side > 0} \n    sides.reduce(:+)\n\
    \  else\n    return -1\n  end\nend", "\treturn (a+b+c) / 2.0\nend", "  if a ==\
    \ 0 and b == 0 and c == 0\n    return 0\n  abc = a + b + c\n  return 0 if abc\
    \ == 0 else abc ** 0.5\nend", "  if a > b+c or b > a+c or c > a+b \n    return\
    \ -1\n  else \n    a = a*0.5;\n    b = b*0.5;\n    c = c*0.5;\n    return (a +\
    \ b + c)/2\nend\n</cell>\n<text>\n\U0001F6E0 Exercise: Write a function that takes\
    \ a binary string (e.g., '1010') representing a binary number, and returns whether\
    \ or not the number is a palindrome. For example, binary_palindrome.call('1010')\
    \ should return true, and binary_palindrome.call('1010101') should return true.",
  "  if a + b > c\n    a + b > c \n    a + b > c\n  else\n    a + b > c\n    a + b\
    \ > c\n    a + b > c\n  end \nend", "  if a + b > c\n    return a + b - c\n  return\
    \ -1\nend", "  s1 = b - a\n  s2 = c - b\n  s3 = a + b - c\n  return ((s1 * s2)\
    \ * (s1 * s3))/2.0\nend", "    if a + b > c\n        return (a * b) / 2.0\n  \
    \  else\n        return -1\nend\n</cell>\n<text>\nQuestion 4\nWrite a function\
    \ that takes a triangle side, an angle and a distance as arguments and returns\
    \ the area of that triangle at a given angle.", "  if a >= b >= c\n    puts \"\
    a >= b >= c is true\"\n  end\n  return (a * b * c) / 2\nend", "  if a == b and\
    \ b == c or a == c and a == b then\n    return a * b\n  else if a == b or b ==\
    \ c then \n    return -1\n  else\n    return -1\n  end\nend", "  sum = (a + b\
    \ + c) / 2\n  if a > b > c\n    a + b + c\n  elsif a == b\n    c + b\n  elsif\
    \ a == c\n    a * b\n  else\n    b * c\n  end\nend", "  \n  return (((b * b) -\
    \ math.sqrt((b*b) - 4*a*c)) / (2*a))\nend", "    if a + b <= c or b + c <= a or\
    \ c + a <= b\n        0\n    else\n        (a + b + c) / 2\n    end\nend", " \
    \ area_a_b_c =  a * b * c\n  return area_a_b_c\nend", "    if a + b > c\n    \
    \    a + b - c\n    else a + b\n    if a + c > b\n        a + c - b\n    else\
    \ a + c\n    if b + c > a\n        b + c - a\n    else b + c\n    if a + b ==\
    \ c\n        a * b\n    else (a + b) * (b + c)\n    area_sum\nend", "    if a\
    \ + b > c\n        area = (a * b) / 2.0\n    else if a + c > b\n        area =\
    \ (a + b) * c\n    else\n        area = (a + c) * b\n    return rounded_number(area)\n\
    end", "\tif ((a + b > c) and (a + c > b) and (a + b > c)) then\n\t\treturn (a\
    \ * b * c) / 2\n\telse\n\t\treturn -1\n\tend\nend", "  area = 0\n  area += a *\
    \ b\n  area -= a * c\n  area += b * c", "  if a >= b + c\n    then return 0\n\
    \  elsif a + b >= c + a\n    then return (b * c) - (a * b)\n  else\n    return\
    \ -1\n  end\nend\n</cell>\n<code language=julia-1.0>", "  (a+b+c).to_f.reduce(:+).to_f\n\
    end", "  return ((a**2) * (b**2)) * ((c**2) - (a * c * b))\nend", "  raise \"\
    Implement me\"\nend", "    # Your code here!\n    if a + b > c or a + c > b or\
    \ b + c > a\n        return -1\n    else\n        return (a + b + c)/2\nend",
  "  if a + b > c\n    return (a * b) / 2.0\n  else\n    return -1\nend", "  if a+b\
    \ > c\n    a + b - c\n  else\n    Math.sqrt(a*a + b*b - c*c) \n  end\nend\n</code>\n\
    <|/ a tags=ruby,ruby-on-rails,ruby-on-rails-3,ruby-on-rails-4 |>\n<| a dscore=0\
    \ |>\nI hope it helps you:\n<code>", "  area_of_triangle = (b + c) - (a * c)\n\
    \  area_of_triangle = area_of_triangle / 2\n  area_of_triangle = area_of_triangle\
    \ if area_of_triangle > b && area_of_triangle < c\n  return area_of_triangle\n\
    end", "  \n  # Create a variable that holds the area of triangle \n  # rounded\
    \ to two decimal places.\n  area = Math.sqrt(Math.pow((b*b) - (a*c)), 2)", " \
    \ area_to_rounded_two_dps = Math.sqrt((b*b + c*c - a*a).to_f)\n  return area_to_rounded_two_dps\
    \ if area_to_rounded_two_dps >=0 else None\nend", "    if b > c && b > (a + c)\n\
    \        return (b - a) * (c - (b + c)) / 2\n    end\n    return -1\nend\n</cell>\n\
    <code language=julia-0.6>", "  a + b > c ? nil : (a + c) * (b - c)\nend", "\t\
    return ((b*c) - (c*a) - (a*b)) / (2.0 * b * c)\nend\n</cell>\n<code language=julia-1.5>",
  "  area_sum = a + b + c\n  if area_sum < a + b\n    area_sum += a + b\n  elsif area_sum\
    \ < a + c\n    area_sum += a + c\n  elsif area_sum < b + c\n    area_sum += b\
    \ + c\n  end\n  area_sum.round(2)\nend", "    # Initialize area_a\n    area_a\
    \ = float(a * b / 2)", "    ab = a + b\n    cb = c + b\n    if ab > cb\n    a\
    \ + c\n    else\n    b + c\n    end\nend", "  return( ( (a + b + c) * (a + c -\
    \ b) * (b + c - a) ) / 2 ) if a + b + c >= a + c - b and a + b + c >= b + c -\
    \ a\n  return( ( (a + b + c) * (a + c - b) * (b + c - a) ) ) if a + b + c >= a\
    \ + c - b and a + b + c >= b + c - a\n  return( ( (a + b + c) * (a + c - b) *\
    \ (b + c - a) ) ) if a + b + c >= a + c - b and a + b + c >= b + c - a\n  return(\
    \ ( (a + b + c) * (a + c - b) * (b + c - a) ) ) if a + b + c >= a + c - b and\
    \ a + b + c >= b + c - a\n  return( ( (a + b + c) * (a + c - b) * (b + c - a)\
    \ ) ) if a + b + c >= a + c - b and a + b + c >= b + c - a\n  return( ( (a + b\
    \ + c) * (a + c - b) * (b + c - a) ) ) if a + b + c >= a + c - b and a + b + c\
    \ >= b + c - a\n  return( ( (a + b + c) * (a + c - b) * (b + c - a) ) ) if a +\
    \ b + c >= a + c - b and a + b + c >= b + c - a\n  return( ( (a + b + c) * (a\
    \ + c - b) * (b + c - a) ) ) if a + b + c >= a + c - b and a + b + c >= b + c\
    \ - a\n  return( ( (a + b + c) * (a + c - b) * (b + c - a) ) ) if a + b + c >=\
    \ a + c - b and a + b + c >= b + c - a\n  return( ( (a + b + c) * (a + c - b)\
    \ * (b + c - a) ) ) if a + b + c >= a + c - b and a + b + c >= b + c - a\n  return(\
    \ ( (a + b + c) * (a + c - b) * (b + c - a) ) ) if a + b + c >= a + c - b and\
    \ a + b + c >= b + c - a\n  return( ( (a + b + c) * (a + c - b) * (b + c - a)\
    \ ) ) if a + b + c >= a + c - b and a + b + c >= b + c - a\n  return( ( (a + b\
    \ + c) * (a + c - b) * (b + c - a) ) ) if a + b + c >= a + c - b and a + ", " \
    \ a = a.to_f\n  b = b.to_f\n  c = c.to_f\n  \n  if a + b > c\n    a > b ? b >\
    \ c ? a + b > c ? a + b : -1 : 0\n  else\n    a > c ? a > b ? a + c : -1 : 0\n\
    \  end\nend", "  if a + b > c\n    area = (a * b) / 2.0\n  else\n    if a + c\
    \ > b\n      area = (b * c) / 2.0\n    else\n      if b + c > a\n        area\
    \ = (c * a) / 2.0\n      else\n        area = (0)\n    end\n  end\n  \n  puts\
    \ area\n  \n  return area\nend", "\ta * b * c\n\t\n\t# valid triangles must have\
    \ a + b > c\n\tif a + b > c\n\t\tputs -1\n\t\t\n\t# valid triangles must have\
    \ a + b < c\n\tif a + b < c\n\t\tputs -1\n\t\t\n\t# valid triangles must have\
    \ a > b + c\n\tif a + b < c + a\n\t\tputs -1\n\t\t\n\t# valid triangles must have\
    \ a > a + b + c\n\tif a + b < c + a + b\n\t\tputs -1\n\t\t\n\t# valid triangles\
    \ must have a + c > b\n\tif a + c > b\n\t\tputs -1\n\t\t\n\t# valid triangles\
    \ must have a + c < b\n\tif a + c < b\n\t\tputs -1\n\telse\n\t\tputs (a * b *\
    \ c) / 2.0\nend", "  valid = true\n  if a + b <= c\n    valid = false\n  end\n\
    \  if a + c <= b\n    valid = false\n  end\n  if b + c <= a\n    valid = false\n\
    \  end\n  if valid\n    area_a = a*a\n    area_b = b*b\n    area_c = c*c\n   \
    \ area_total = area_a + area_b + area_c\n    area_rounded = Math.sqrt(area_total)\n\
    \    area_rounded = area_rounded * 2\n  end\n  return area_rounded\nend\n</code>\n\
    <|/ a tags=ruby,ruby-on-rails |>\n<| c |>\nI like this. I just wish you had posted\
    \ the solution you came up with in the meantime!\n<|/ c |>\n<| c |>\nHah you're\
    \ right. :) I forgot I still had this answer on my todo list :D\n<|/ c |>\n<|\
    \ c |>\n, your solution is more concise than mine and, if you want more performance,\
    \ you should consider using BigDecimal instead of Float\n<|/ c |>\n<| c |>\nI\
    \ like this solution too.\n<|/ c |>\n<| a dscore=3 |>\nUsing Math.sqrt is the\
    \ way to go, but you might want to consider the area calculation as a special\
    \ case where you just want the result. Here is how you would do that (the code\
    \ is written for Ruby 1.8):\n<code>", "    if a + b > c and a + c > b and b +\
    \ c > a\n      Math.sqrt(a^2 + b^2 + c^2)\n    else -1\nend", "    return (a**2\
    \ + b**2 - c**2) / 2\nend", '  return (((b*2) + (c*2)) > (a+c))', "  area_of_triangle\
    \ = (b*c - a*b) / (a*c)\n  area_of_triangle = area_of_triangle.round(2)\n  area_of_triangle\
    \ = a*b*area_of_triangle if area_of_triangle > 0 && a*b*area_of_triangle <= 1\
    \ && a*b*area_of_triangle >= -1 || a == 0 || b == 0 || c == 0 else area_of_triangle\n\
    \  return area_of_triangle\nend\n</cell>\n<code language=julia-0.6>\ntriangle_area(3,\
    \ 4, 5)\n</cell>\n<code language=julia-0.6>\ntriangle_area(1, 2, 10)\n</cell>\n\
    <code language=julia-0.6>\ntriangle_area(20, 20, 20)\n</cell>\n<code language=julia-0.6>",
  "  # Write your code here\n  return (a * b + c * b) / 2 if (a + b > c) else -1",
  "  if(a + b <= c or c <= b or b <= a)\n    return -1\n  else\n    return (2.0 *\
    \ a * b) / Math.sqrt(Math.pow((a + b), 2.0) + Math.pow((c), 2.0))\nend\n</cell>\n\
    <code language=julia-0.6>\ntriangle_area.(1,2,10)\n</cell>\n<code language=julia-0.6>",
  "\tif a == 0 and b > 0 and c > 0\n\t\treturn a / b / c\n\telsif b == 0 and c > 0\n\
    \t\treturn a / c\n\telsif c == 0 and a > 0\n\t\treturn a \n\telse\n\t\treturn\
    \ -1\nend", "  (a * b) * (c / 2)\nend", "  if a == b and b == c then\n    return\
    \ a\n  end", "  area_of_triangle = (a + b + c).to_f/2\n  return area_of_triangle\
    \ if area_of_triangle < a * b * c else -1\nend", "  if b > c and a > c \n  then\
    \ a * b * c / 2 \n  else -1\nend\n</cell>\n<text>\nExercise 5\nWrite a function\
    \ that returns the area of a triangle that is rounded up to the nearest whole\
    \ number.\nFor example triangle sides 3, 4, 5 would return 7.", "  return ((a\
    \ + b + c) ** (1/2)) if a + b > c else -1\nend", "  \n  # BEGIN Question 4\n \
    \ return triangle_area_helper(a + b, a + c, b + c) if a + b <= c + a && a + c\
    \ <= b + c \n                                    && b + c <= a + b \n        \
    \                            && a + c <= b + c \n                            \
    \        && b + c <= a + b \n                                    && a + b <= c\
    \ + a\n  # END Question 4\nend\n</cell>\n<code language=julia-1.0>", "  # Write\
    \ your code here\n  return a * b * c\nend\n</cell>\n<code language=julia-1.0>",
  "  area = 0\n  if((b**2) + (c**2) > a**2)\n    return -1\n  else\n  \ta1 = (b**2)+(c**2)\n\
    \  \ta2 = (a**2)+(c**2)\n  \ta3 = a1+a2\n  \tarea = (a3*((b+c)/2))\n  return (area)\n\
    end", "  if a + b > c and a + c > b and b + c > a\n    area_of_triangle = (a +\
    \ b + c) / 2\n  else\n    area_of_triangle = -1\n  end\n  puts area_of_triangle\n\
    end\n</cell>\n<cell>", "  return a * b * c if (a + b > c) else -1\nend", "  (a\
    \ * b * c).round / Math.sqrt(a * b * c + a * a * b).round\nend", "    return (a+b+c)\
    \ if a+b+c <= a*c else -1\nend"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
