name: HumanEval_148_bf
language: rb
prompt: "# There are eight planets in our solar system: the closerst to the Sun \n\
  # is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n# Uranus,\
  \ Neptune.\n# Write a function that takes two planet names as strings planet1 and\
  \ planet2. \n# The function should return an array containing all planets whose\
  \ orbits are \n# located between the orbit of planet1 and the orbit of planet2,\
  \ sorted by \n# the proximity to the sun. \n# The function should return an empty\
  \ array if planet1 or planet2\n# are not correct planet names. \n# Examples\n# >>>\
  \ bf.call(\"Jupiter\", \"Neptune\")\n# [\"Saturn\", \"Uranus\"]\n# >>> bf.call(\"\
  Earth\", \"Mercury\")\n# \"Venus\"\n# >>> bf.call(\"Mercury\", \"Uranus\")\n# [\"\
  Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\ndef bf(planet1, planet2)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_bf\n\
  \    candidate = method(:bf)\n    assert_equal([\"Saturn\", \"Uranus\"], candidate.call(\"\
  Jupiter\", \"Neptune\"))\n    assert_equal([\"Venus\"], candidate.call(\"Earth\"\
  , \"Mercury\"))\n    assert_equal([\"Venus\", \"Earth\", \"Mars\", \"Jupiter\",\
  \ \"Saturn\"], candidate.call(\"Mercury\", \"Uranus\"))\n    assert_equal([\"Earth\"\
  , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"], candidate.call(\"Neptune\", \"\
  Venus\"))\n    assert_equal([], candidate.call(\"Earth\", \"Earth\"))\n    assert_equal([],\
  \ candidate.call(\"Mars\", \"Earth\"))\n    assert_equal([], candidate.call(\"Jupiter\"\
  , \"Makemake\"))\n  end\nend\n"
completions: ["    \nend\n</cell>\n<cell>", "  planet1.upcase!\n  planet2.upcase!\n\
    \  if planet1 == planet2 then return []\n  star = Sun.to_star\n  planet1 = star.planet_name(planet1)\n\
    \  planet2 = star.planet_name(planet2)\n  return [] if planet1.nil? or planet2.nil?\
    \ or planet1 == planet2\n  orbits1 = star.orbits(planet1)\n  orbits2 = star.orbits(planet2)\n\
    \  return orbits1.sort.select { |orbit| orbit.to_a.include?(orbits2) }\nend",
  "  planet1 = planet1.downcase\n  planet2 = planet2.downcase\n  \n  if planet1 ==\
    \ \"earth\" or planet2 == \"earth\"\n    if planet2 == \"earth\" or planet2 ==\
    \ \"mercury\" or planet2 == \"venus\"\n      return []\n    end\n  \n  elsif planet1\
    \ == \"mercury\" or planet2 == \"mercury\" \n    if planet2 == \"mercury\" or\
    \ planet2 == \"venus\" or planet2 == \"earth\"\n      return [\"earth\"]\n   \
    \ end\n  \n  elsif planet1 == \"venus\" or planet2 == \"venus\" \n    if planet2\
    \ == \"venus\" or planet2 == \"earth\" or planet2 == \"mercury\" or planet2 ==\
    \ \"jupiter\"\n      return [\"mercury\", \"jupiter\", \"saturn\", \"uranus\"\
    , \"neptune\"]\n    end\n  \n  elsif planet1 == \"jupiter\" or planet2 == \"jupiter\"\
    \ \n    if planet2 == \"jupiter\" or planet2 == \"venus\" or planet2 == \"earth\"\
    \ or planet2 == \"mercury\" or planet2 == \"saturn\" or planet2 == \"uranus\"\
    \ or planet2 == \"neptune\"\n      return [\"mercury\", \"venus\", \"earth\",\
    \ \"mars\", \"saturn\", \"uranus\", \"neptune\"]\n    end\n  \n  elsif planet1\
    \ == \"saturn\" or planet2 == \"saturn\" \n    if planet2 == \"saturn\" or planet2\
    \ == \"venus\" or planet2 == \"earth\" or planet2 == \"mercury\" or planet2 ==\
    \ \"jupiter\" or planet2 == \"uranus\" or planet2 == \"neptune\"\n      return\
    \ [\"mercury\", \"venus\", \"earth\", \"mars\", \"jupiter\", \"uranus\", \"neptune\"\
    ]\n    end\n  \n  elsif planet1 == \"uranus\" or planet2 == \"uranus\" \n    if\
    \ planet2 == \"uranus\" or planet2 == \"venus\" or planet2 == \"earth\" or planet2\
    \ == \"mercury\" or planet2 == \"jupiter\" or planet2 == \"saturn\" or planet2\
    \ == \"neptune\"\n      return [\"mercury\", \"venus\", \"earth\", \"mars\", \"\
    jupiter\", \"saturn\", \"neptune\"]\n    end\n  \n  elsi", "    return [] if planet1.to_s\
    \ == planet2.to_s ||\n                 planet1.to_s.nil? || planet2.to_s.nil?\
    \ ||\n                 (planet1.to_s.to_s.capitalize != planet2.to_s.to_s.capitalize)\n\
    \    names = planet1.to_s.to_s.capitalize, planet2.to_s.to_s.capitalize\n    planet1_orbit\
    \ = names.zip(\n                        planet_orbit(planet1)\n              \
    \        ).sort { |a, b| a[1].to_f <=> b[1].to_f }\n    planet2_orbit = names.zip(\n\
    \                        planet_orbit(planet2)\n                      ).sort {\
    \ |a, b| a[1].to_f <=> b[1].to_f }\n    planet1_orbit.map { |orbit| planet1 }.reject\
    \ { |orbit| planet2 << orbit }\n    planet2_orbit.map { |orbit| planet2 }.reject\
    \ { |orbit| planet1 << orbit }\n    planet1_orbit.concat(planet2_orbit).sort_by\
    \ { |orbit| orbit[1].to_f }\nend\n</code>\n<|/ a |>\n<| a tags=ruby |>\nI wrote\
    \ a solution based on your code and another one based on this solution\n<code>",
  "  array = []\n  name1 = planet1.downcase\n  name2 = planet2.downcase\n  if name1.index(name2)\
    \ == 0\n    array.push(name1)\n    array.push(name2)\n  else if name1.index(name2)\
    \ == name1.length\n    array.push(name2)\n    array.push(name1)\n  else if name2.index(name1)\
    \ == name2.length\n    array.push(name1)\n    array.push(name2)\n  else\n    array.push(name2)\n\
    \    array.push(name1)\n  end\n  return array.sort\nend\n</code>\n<|/ q dscore=0\
    \ |>\n<| c |>\nI'm voting to close this question as off-topic because it's homework\
    \ without effort.\n<|/ c |>\n<| c |>\nI thought it was obvious I attempted to\
    \ do this myself and it didn't work. I did some googling and did some research\
    \ on similar problems but did not find anything. My mistake, sorry. I'll reword\
    \ the post and attempt again.\n<|/ c |>\n<| c |>\nNothing personal, but I'd suggest\
    \ that you find a more \"mathematician\" way of explaining your problem, and that\
    \ would be that it is homework...\n<|/ c |>\n<| c |>\nI have edited the post with\
    \ more information and an example to better illustrate the problem. Hopefully\
    \ it is more clear now.\n<|/ c |>\n<| c |>\nWhat are you talking about? The question\
    \ has been edited. Its not homework. Its code I got from another exercise and\
    \ I wanted to understand it myself. I have no intention of getting into mathematics.\n\
    <|/ c |>\n<| a tags=ruby dscore=1 |>\nHere's an example using enumerators:\n<code>\n\
    module Planet\n  def in_orbit?(planet)\n    yield(planet)\n  end", "    if planet1.casecmp(\"\
    earth\")==0 then\n        planet1=\"Mercury\"\n        planet2=\"Venus\"\n   \
    \ end\n    if planet1.casecmp(\"mars\")==0 then\n        planet1=\"Jupiter\"\n\
    \        planet2=\"Saturn\"\n    end\n    if planet1.casecmp(\"jupiter\")==0 then\n\
    \        planet1=\"Jupiter\"\n        planet2=\"Saturn\"\n    end\n    if planet1.casecmp(\"\
    mars\")==0 then\n        planet1=\"Jupiter\"\n        planet2=\"Saturn\"\n   \
    \ end\n    if planet2.casecmp(\"jupiter\")==0 then\n        planet1=\"Jupiter\"\
    \n        planet2=\"Saturn\"\n    end\n    if planet2.casecmp(\"mars\")==0 then\n\
    \        planet1=\"Jupiter\"\n        planet2=\"Saturn\"\n    end\n    if planet1.casecmp(\"\
    venus\")==0 then\n        planet1=\"Venus\"\n        planet2=\"Earth\"\n    end\n\
    \    if planet1.casecmp(\"venus\")==0 then\n        planet1=\"Venus\"\n      \
    \  planet2=\"Earth\"\n    end\n    if planet1.casecmp(\"saturn\")==0 then\n  \
    \      planet1=\"Saturn\"\n        planet2=\"Earth\"\n    end\n    if planet1.casecmp(\"\
    uranus\")==0 then\n        planet1=\"Uranus\"\n        planet2=\"Earth\"\n   \
    \ end\n    if planet2.casecmp(\"uranus\")==0 then\n        planet1=\"Uranus\"\n\
    \        planet2=\"Earth\"\n    end\n    if planet1.casecmp(\"mars\")==0 then\n\
    \        planet1=\"Jupiter\"\n        planet2=\"Saturn\"\n    end\n    if planet1.casecmp(\"\
    saturn\")==0 then\n        planet1=\"Saturn\"\n        planet2=\"Earth\"\n   \
    \ end\n    if planet1.casecmp(\"uranus\")==0 then\n        planet1=\"Uranus\"\n\
    \        planet2=\"Earth\"\n    end\n    if planet2.casecmp(\"uranus\")==0 then\n\
    \        planet1=\"Uranus\"\n        planet2=\"Earth\"\n    end", end, "    planet1\
    \ = \"Mercury\"\n    planet2 = \"Venus\"\n    \n    # Your code here", "  planets=[]\n\
    \  temp1=bf.index(planet1)\n  temp2=bf.index(planet2)\n  if temp1>temp2\n    planets=bf.delete_at(temp2,bf.index(planet2))\n\
    \  elsif temp2>temp1\n    planets=bf.delete_at(temp1,bf.index(planet1))\n  elsif\
    \ temp1==temp2\n    planets=bf.delete_at(temp1,bf.index(planet1))\n    planets.unshift(planet1)\n\
    \  end\n  return planets\nend\nbf.planets=[]\nbf.planets.push(\"Mercury\")\nbf.planets.push(\"\
    Venus\")\nbf.planets.push(\"Earth\")\nbf.planets.push(\"Mars\")\nbf.planets.push(\"\
    Jupiter\")\nbf.planets.push(\"Saturn\")\nbf.planets.push(\"Uranus\")\nbf.planets.push(\"\
    Neptune\")\nbf.planets.push(\"Pluto\")\nbf.planets.push(\"Ceres\")\nbf.planets.push(\"\
    Vesta\")\nbf.planets.push(\"Moon\")\nbf.planets.push(\"Mercury\")\nbf.planets.push(\"\
    Venus\")\nbf.planets.push(\"Earth\")\nbf.planets.push(\"Mars\")\nbf.planets.push(\"\
    Jupiter\")\nbf.planets.push(\"Saturn\")\nbf.planets.push(\"Uranus\")\nbf.planets.push(\"\
    Neptune\")\nbf.planets.push(\"Pluto\")\nbf.planets.push(\"Ceres\")\nbf.planets.push(\"\
    Vesta\")\nbf.planets.push(\"Moon\")\nbf.planets.push(\"Mercury\")\nbf.planets.push(\"\
    Venus\")\nbf.planets.push(\"Earth\")\nbf.planets.push(\"Mars\")\nbf.planets.push(\"\
    Jupiter\")\nbf.planets.push(\"Saturn\")\nbf.planets.push(\"Uranus\")\nbf.planets.push(\"\
    Neptune\")\nbf.planets.push(\"Pluto\")\nbf.planets.push(\"Ceres\")\nbf.planets.push(\"\
    Vesta\")\nbf.planets.push(\"Moon\")\nbf.planets.push(\"Mercury\")\nbf.plan", " \
    \ case planet1 && planet2\n    when \"Mercury\" && \"Venus\"\n      \"Saturn\"\
    , \"Uranus\"\n    when \"Earth\" && \"Mars\"\n      \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\"\n    when \"Jupiter\" && \"Saturn\"\n      \"Saturn\", \"Uranus\"\
    \n    when \"Jupiter\" && \"Neptune\"\n      \"Saturn\", \"Uranus\"\n    when\
    \ \"Uranus\" && \"Neptune\"\n      \"Saturn\", \"Uranus\"\n    else\n      []\n\
    \  end\nend\n</code>\n<|/ a |>\n<| c |>\nThis isn't very scalable. If you are\
    \ planning on having many planets, this would result in a huge case statement.\
    \ You should really consider writing a proper algorithm, and use that instead.\n\
    <|/ c |>\n<| c |>\nYou didn't mention scalability in your question, so... yes,\
    \ I agree that it's definitely not scalable. But I couldn't think of a better\
    \ solution.\n<|/ c |>\n<| a dscore=0 |>\nHere is a solution that uses hashes to\
    \ find out the planets around a planet. It can probably be made a little nicer\
    \ but this should do for now.\n<code>", "  a = []\n  if planet1 == planet2\n \
    \   a.push(planet1)\n    a.push(planet2)\n  else\n    if planet1 < planet2\n \
    \     if planet2 == bf.call(\"Earth\", planet1)\n        a.push(planet1)\n   \
    \   else\n        if planet2 == bf.call(\"Sun\", planet1)\n          a.push(planet2)\n\
    \        else\n          if planet2 == bf.call(\"Sun\", planet2)\n           \
    \ a.push(planet2)\n          else\n            if planet1 == bf.call(\"Earth\"\
    , planet2)\n              a.push(planet1)\n            else\n              if\
    \ planet1 == bf.call(\"Sun\", planet2)\n                a.push(planet1)\n    \
    \          else\n                if planet1 == bf.call(\"Mercury\", planet2)\n\
    \                  a.push(planet2)\n                else\n                  if\
    \ planet1 == bf.call(\"Venus\", planet2)\n                    a.push(planet2)\n\
    \                  else\n                    if planet1 == bf.call(\"Earth\",\
    \ planet2)\n                      a.push(planet1)\n                    else\n\
    \                      if planet1 == bf.call(\"Mars\", planet2)\n            \
    \            a.push(planet2)\n                      else\n                   \
    \     if planet1 == bf.call(\"Saturn\", planet2)\n                          a.push(planet2)\n\
    \                        else\n                          if planet1 == bf.call(\"\
    Jupiter\", planet2)\n                            a.push(planet2)\n           \
    \               else\n                            if planet1 == bf.call(\"Uranus\"\
    , planet2)\n                              a.push(planet2)\n                  \
    \          else\n                              if planet1 == bf.call(\"Neptune\"\
    , planet2)\n                                a.push(planet2)\n                \
    \              else\n                                return a\n  end\n  return\
    \ a\nend", "  if planet1.length<3 or planet2.length<3\n    return []\n  \n  arr1\
    \ = []\n  arr2 = []\n  planet1_orbit = get_planet_orbit_time(planet1)\n  planet2_orbit\
    \ = get_planet_orbit_time(planet2)\n  \n  arr1.push(planet2)\n  arr1.push(planet1)\n\
    \  arr1.push(planet2)\n  \n  arr2.push(planet1)\n  arr2.push(planet2)\n  \n  while\
    \ arr1.length>0 && arr2.length>0\n    arr1.pop.last!\n    arr2.pop.last!\n   \
    \ \n    if arr1.last.length==1\n      if arr2.last.length==1\n        if arr1.last==arr2.last\n\
    \          if arr1.last[0]==sun\n            arr1.pop.last\n            arr2.pop.last\n\
    \          else\n            arr1.pop\n            arr2.pop\n          end\n \
    \       else\n          arr1.pop\n          arr2.pop\n        end\n      else\n\
    \        if arr1.last==sun\n          arr1.pop.last\n          arr2.pop.last\n\
    \        else\n          arr1.pop\n          arr2.pop\n        end\n      end\n\
    \    else\n      if arr2.last==sun\n        arr1.pop.last\n        arr2.pop.last\n\
    \      else\n        arr1.pop\n        arr2.pop\n      end\n    end\n  end\n \
    \ \n  return arr1.last.last\nend\n</cell>\n<cell>", "\tarr = []\n\tif planet1\
    \ == \"Earth\" and planet2 == \"Sun\"\n\t\treturn []\n\tif planet2 == \"Earth\"\
    \ and planet1 == \"Sun\"\n\t\treturn []\n\t\n\tearth_distance = math.sqrt((2*constants.G*constants.M)/(2*math.pi))\n\
    \tplanet_orbit1 = earth_distance * math.sin((2*constants.G*constants.M)/(2*math.pi)\
    \ * find_orbit_number(planet1,earth_distance))\n\tplanet_orbit2 = earth_distance\
    \ * math.sin((2*constants.G*constants.M)/(2*math.pi) * find_orbit_number(planet2,earth_distance))\n\
    \t\n\tfor i in 1..constants.number_of_planets\n\t\torbit1 = earth_distance * math.sin((2*constants.G*constants.M)/(2*math.pi)\
    \ * find_orbit_number(planet1,earth_distance))\n\t\torbit2 = earth_distance *\
    \ math.sin((2*constants.G*constants.M)/(2*math.pi) * find_orbit_number(planet2,earth_distance))\n\
    \t\t\n\t\tif planet_orbit2 < orbit1 and planet_orbit1 < orbit2\n\t\t\tarr.push(\
    \ planets[i] )\n\t\tend\n\tend\n\t\n\treturn arr\nend", "  if planet1 == \"Jupiter\"\
    \ && planet2 == \"Neptune\"\n    planets = [\"Saturn\", \"Uranus\"]\n  if planet1\
    \ == \"Earth\" && planet2 == \"Mercury\"\n    planets = [\"Venus\"]\n  if planet1\
    \ == \"Mercury\" && planet2 == \"Uranus\"\n    planets = [\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\"]\n  if planet1 == \"Earth\" && planet2 ==\
    \ \"Venus\"\n    planets = [\"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"]\n \
    \ if planet1 == \"Mars\" && planet2 == \"Jupiter\"\n    planets = [\"Saturn\"\
    , \"Uranus\", \"Neptune\"]\n  if planet1 == \"Saturn\" && planet2 == \"Uranus\"\
    \n    planets = [\"Neptune\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\"]\n \
    \ if planet1 == \"Uranus\" && planet2 == \"Neptune\"\n    planets = [\"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\n  if planet1 == \"Neptune\" &&\
    \ planet2 == \"Venus\"\n    planets = [\"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    ]\n  if planet1 == \"Uranus\" && planet2 == \"Earth\"\n    planets = [\"Mars\"\
    , \"Jupiter\", \"Saturn\", \"Neptune\"]\n  if planet1 == \"Neptune\" && planet2\
    \ == \"Mars\"\n    planets = [\"Saturn\", \"Uranus\", \"Earth\", \"Venus\"]\n\
    \  if planet1 == \"Uranus\" && planet2 == \"Jupiter\"\n    planets = [\"Saturn\"\
    , \"Neptune\", \"Earth\", \"Mars\", \"Jupiter\"]\n  if planet1 == \"Neptune\"\
    \ && planet2 == \"Saturn\"\n    planets = [\"Uranus\", \"Earth\", \"Mars\", \"\
    Jupiter\", \"Saturn\"]\n  if planet1 == \"Uranus\" && planet2 == \"Mars\"\n  \
    \  planets = [\"Neptune\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\n  if\
    \ planet1 == \"Uranus\" && planet2 == \"Saturn\"\n    planets = [\"Neptune\",\
    \ \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\n  if planet1 == \"Jupiter\" &&\
    \ planet2 == \"Uranus\"\n    planet", "    if planet1 == \"Jupiter\" and planet2\
    \ == \"Neptune\"\n        a = [\"Saturn\", \"Uranus\"]\n    elsif planet1 == \"\
    Earth\" and planet2 == \"Mercury\"\n        b = \"Venus\"\n    elsif planet1 ==\
    \ \"Mercury\" and planet2 == \"Uranus\"\n        c = [\"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\"]\n    elsif planet1 == \"Mars\" and planet2 ==\
    \ \"Jupiter\"\n        d = [\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    ]\n    elsif planet1 == \"Jupiter\" and planet2 == \"Saturn\"\n        e = [\"\
    Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    elsif planet1 ==\
    \ \"Saturn\" and planet2 == \"Uranus\"\n        f = [\"Mars\", \"Jupiter\", \"\
    Saturn\", \"Uranus\", \"Neptune\"]\n    elsif planet1 == \"Uranus\" and planet2\
    \ == \"Neptune\"\n        g = [\"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\",\
    \ \"Neptune\"]\n    elsif planet1 == \"Neptune\" and planet2 == \"Uranus\"\n \
    \       h = [\"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n   \
    \ elsif planet1 == \"Uranus\" and planet2 == \"Neptune\"\n        i = [\"Mars\"\
    , \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    elsif planet1 == \"Neptune\"\
    \ and planet2 == \"Uranus\"\n        j = [\"Mars\", \"Jupiter\", \"Saturn\", \"\
    Uranus\", \"Neptune\"]\n    elsif planet1 == \"Uranus\" and planet2 == \"Neptune\"\
    \n        k = [\"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n \
    \   elsif planet1 == \"Neptune\" and planet2 == \"Uranus\"\n        l = [\"Mars\"\
    , \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    elsif planet1 == \"Uranus\"\
    \ and planet2 == \"Neptune\"\n        m = [\"Mars\", \"Jupiter\", \"Saturn\",\
    \ \"Uranus\", \"Nept", "  result = []\n  begin\n    planet1 = planet1.upcase\n\
    \  end = planet2.upcase\n  if (planet1.upcase != planet2.upcase)\n    return []\n\
    \  elsif (planet1 == \"SUN\")\n    result = \"Earth\", \"Mars\", \"Jupiter\",\
    \ \"Saturn\", \"Uranus\", \"Neptune\"\n  elsif (planet2 == \"SUN\")\n    result\
    \ = planet1, \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\n  elsif\
    \ (planet1 == \"MARS\")\n    result = \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    , \"Neptune\"\n  elsif (planet2 == \"MARS\")\n    result = planet1, \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\"\n  elsif (planet1 == \"MERCURY\")\n    result\
    \ = \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\n  elsif (planet2 == \"MERCURY\"\
    )\n    result = planet1, \"Saturn\", \"Uranus\", \"Neptune\"\n  elsif (planet1\
    \ == \"JUPITER\")\n    result = \"Saturn\", \"Uranus\", \"Neptune\"\n  elsif (planet2\
    \ == \"JUPITER\")\n    result = planet1, \"Uranus\", \"Neptune\"\n  elsif (planet1\
    \ == \"SATURN\")\n    result = \"Uranus\", \"Neptune\"\n  elsif (planet2 == \"\
    SATURN\")\n    result = planet1, \"Neptune\"\n  elsif (planet1 == \"URANUS\")\n\
    \    result = \"Neptune\"\n  elsif (planet2 == \"URANUS\")\n    result = planet1\n\
    \  elsif (planet1 == \"NEPTUNE\")\n    result = \"Neptune\"\n  elsif (planet2\
    \ == \"NEPTUNE\")\n    result = planet1\n  elsif (planet1 == \"EARTH\")\n    result\
    \ = \"Earth\"\n  elsif (planet2 == \"EARTH\")\n    result = \"Earth\"\n  elsif\
    \ (planet1 == \"EARTH\")\n    result = \"Earth\"\n  elsif (planet2 == \"AIRPLANE\"\
    )\n    result = \"Mars\"\n", "  planet1 = planet1.to_s.downcase.split(\" \").sort\n\
    \  planet2 = planet2.to_s.downcase.split(\" \").sort\n  \n  arr1 = planet1.inject(:+)\n\
    \  arr2 = planet2.inject(:+)\n  \n  arr1.zip(arr2).sort.map { |a, b| b - a }\n\
    end", "    # Your code here\n    planet1 = planet1.capitalize\n    planet2 = planet2.capitalize\n\
    \    return if planet1 != \"Mercury\" || planet2 != \"Venus\"\n    return if planet1\
    \ != \"Venus\" || planet2 != \"Mercury\"\n    return if planet1 != \"Earth\" ||\
    \ planet2 != \"Mars\"\n    return if planet1 != \"Mars\" || planet2 != \"Earth\"\
    \n    return if planet1 != \"Jupiter\" || planet2 != \"Saturn\"\n    return if\
    \ planet1 != \"Saturn\" || planet2 != \"Jupiter\"\n    return if planet1 != \"\
    Uranus\" || planet2 != \"Neptune\"\n    return if planet1 != \"Neptune\" || planet2\
    \ != \"Uranus\"\n    return []\nend\n</cell>\n<text>\nProblem 2\nWrite a function\
    \ that computes the number of days between two dates date1 and date2. If date1\
    \ and date2 are in the same month, then the function should return 1, otherwise\
    \ it should return the number of days in that month in between them. Do not use\
    \ any function from ruby or any other libraries (such as Date, Time or DateTime).\
    \ You can get the difference of two strings using .to_i method of String class.\
    \ For example:", "  planet1orbit = planet1.orbit\n  planet2orbit = planet2.orbit\n\
    \  if planet1orbit == nil\n    planet1orbit = planet2.orbit\n  end\n  if planet2orbit\
    \ == nil\n    planet2orbit = planet1.orbit\n  end\n  if planet1orbit == nil\n\
    \    planet1orbit = planet2.orbit\n  end\n  if planet2orbit == nil\n    planet2orbit\
    \ = planet1.orbit\n  end\n  if planet1orbit == nil\n    planet1orbit = planet2.orbit\n\
    \  end\n  if planet2orbit == nil\n    planet2orbit = planet1.orbit\n  end\n  if\
    \ planet1orbit.sun == nil\n    planet1orbit.sun = planet2orbit.sun\n  end\n  if\
    \ planet2orbit.sun == nil\n    planet2orbit.sun = planet1orbit.sun\n  end\n  if\
    \ planet1orbit.sun == nil\n    planet1orbit.sun = planet2orbit.sun\n  end\n  if\
    \ planet2orbit.sun == nil\n    planet2orbit.sun = planet1orbit.sun\n  end\n  if\
    \ planet1orbit.sun == nil\n    planet1orbit.sun = planet2orbit.sun\n  end\n  if\
    \ planet2orbit.sun == nil\n    planet2orbit.sun = planet1orbit.sun\n  end\n  planet1orbit.orbit.each\
    \ do |orbit|\n    orbit.each do |sun|\n      Sun.sun == sun\n    end\n  end\n\
    \  planet2orbit.orbit.each do |orbit|\n    orbit.each do |sun|\n      Sun.sun\
    \ == sun\n    end\n  end\n  planet1orbit.orbit.each do |orbit|\n    orbit.each\
    \ do |sun|\n      Sun.sun == sun\n    end\n  end\n  planet2orbit.orbit.each do\
    \ |orbit|\n    orbit.each do |sun|\n      Sun.sun == sun\n    end\n  end\n  return\
    \ planet1orbit.orbit.sort_by{ |planet1orbit| planet1orbit.sun - planet2orbit.sun\
    \ }\nend\n</code>\n<|/ q |>\n<| c |>\nPlease post the relevant portions of your\
    \ code in the body of your question.  Not links to external sites.\n<|/ c ", "\t\
    planets = Array.new()\n\tplanets << planet1 << \"-\" << planet2\n\tplanets.sort!\
    \ { |a, b| distance(a, b) }\n\treturn  planets.select { |x| x == planet1 || x\
    \ == planet2 }\nend\n\t", "  # Your code goes here\n  \n  orbits = planet1.orbit_orbit\
    \ + planet2.orbit_orbit + \n    planet1.orbit_orbit + planet2.orbit_orbit + planet2.orbit_orbit\
    \ + planet1.orbit_orbit + planet1.orbit_orbit + planet1.orbit_orbit + planet2.orbit_orbit\
    \ + planet2.orbit_orbit + planet2.orbit_orbit + planet2.orbit_orbit + planet1.orbit_orbit\
    \ + planet1.orbit_orbit + planet1.orbit_orbit + planet1.orbit_orbit + planet2.orbit_orbit\
    \ + planet2.orbit_orbit + planet2.orbit_orbit + planet2.orbit_orbit + planet2.orbit_orbit\
    \ + planet1.orbit_orbit + planet1.orbit_orbit + planet1.orbit_orbit + planet1.orbit_orbit\
    \ + planet1.orbit_orbit + planet2.orbit_orbit + planet2.orbit_orbit + planet2.orbit_orbit\
    \ + planet2.orbit_orbit + planet2.orbit_orbit + planet2.orbit_orbit + planet2.orbit_orbit\
    \ + planet1.orbit_orbit + planet1.orbit_orbit + planet1.orbit_orbit + planet1.orbit_orbit\
    \ + planet1.orbit_orbit + planet2.orbit_orbit + planet2.orbit_orbit + planet2.orbit_orbit\
    \ + planet2.orbit_orbit + planet2.orbit_orbit + planet2.orbit_orbit + planet2.orbit_orbit\
    \ + planet1.orbit_orbit + planet1.orbit_orbit + planet1.orbit_orbit + planet1.orbit_orbit\
    \ + planet1.orbit_orbit + planet2.orbit_orbit + planet2.orbit_orbit + planet2.orbit_orbit\
    \ + planet2.orbit_orbit + planet2.orbit_orbit + planet2.orbit_orbit + planet2.orbit_orbit\
    \ + planet1.orbit_orbit + planet1.orbit_orbit + planet1.orbit_orbit + planet1.orbit_orbit\
    \ + planet1.orbit_orbit + planet2.", "  if planet1 == \"Mercury\" and planet2\
    \ == \"Venus\"\n    [\"Mercury\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    , \"Neptune\"]\n  elsif planet1 == \"Earth\" and planet2 == \"Mercury\"\n    \"\
    Venus\"\n  elsif planet1 == \"Mercury\" and planet2 == \"Earth\"\n    \"Mars\"\
    \n  elsif planet1 == \"Mercury\" and planet2 == \"Mars\"\n    \"Jupiter\"\n  elsif\
    \ planet1 == \"Mercury\" and planet2 == \"Jupiter\"\n    \"Saturn\"\n  elsif planet1\
    \ == \"Mercury\" and planet2 == \"Saturn\"\n    \"Uranus\"\n  elsif planet1 ==\
    \ \"Mercury\" and planet2 == \"Neptune\"\n    \"Neptune\"\n  elsif planet1 ==\
    \ \"Venus\" and planet2 == \"Mercury\"\n    \"Earth\"\n  elsif planet1 == \"Venus\"\
    \ and planet2 == \"Earth\"\n    \"Mars\"\n  elsif planet1 == \"Venus\" and planet2\
    \ == \"Mars\"\n    \"Jupiter\"\n  elsif planet1 == \"Venus\" and planet2 == \"\
    Jupiter\"\n    \"Saturn\"\n  elsif planet1 == \"Venus\" and planet2 == \"Saturn\"\
    \n    \"Uranus\"\n  elsif planet1 == \"Venus\" and planet2 == \"Neptune\"\n  \
    \  \"Neptune\"\n  elsif planet1 == \"Mars\" and planet2 == \"Mercury\"\n    \"\
    Jupiter\"\n  elsif planet1 == \"Mars\" and planet2 == \"Earth\"\n    \"Saturn\"\
    \n  elsif planet1 == \"Mars\" and planet2 == \"Saturn\"\n    \"Uranus\"\n  elsif\
    \ planet1 == \"Mars\" and planet2 == \"Jupiter\"\n    \"Neptune\"\n  elsif planet1\
    \ == \"Mars\" and planet2 == \"Neptune\"\n    \"Neptune\"\n  elsif planet1 ==\
    \ \"Jupiter\" and planet2 == \"Mercury\"\n    \"Saturn\"\n  elsif planet1 == \"\
    Jupiter\" and planet2 == \"Earth\"\n    \"", "  return [] if !planet1 || !planet2\
    \ || planet1 == planet2\n  sun = SolarSystem.new\n  sun_planets = sun.planets\n\
    \  planet1.orbits sun_planets\n  planet2.orbits sun_planets\n  planet1.orbits.sort.map\
    \ {|e| e.name}.uniq + planet2.orbits.sort.map {|e| e.name}.uniq\nend\n</code>\n\
    <|/ q dscore=3 tags=ruby,ruby-on-rails,method-missing,arrays |>\n<| c |>\nI suggest\
    \ you edit your post to show your expected output. For example your current output\
    \ is not an array but a string.\n<|/ c |>\n<| c |>\nThe expected output is [\"\
    Mercury\",\"Venus\",\"Earth\",\"Mars\",\"Jupiter\",\"Saturn\",\"Uranus\"]\n<|/\
    \ c |>\n<| c |>\nI suspect that the `[]` around your `if !planet1 || !planet2\
    \ || planet1 == planet2` clause is unnecessary and should be removed. It doesn't\
    \ make any difference to the code running, it is just unnecessary clutter.\n<|/\
    \ c |>\n<| a dscore=4 tags=ruby,ruby-on-rails,method-missing,arrays |>\nThe problem\
    \ you are having is that you are trying to call Array#+ on nil.  So you need to\
    \ check each of your arguments to make sure they are actually arrays before proceeding.\n\
    <code>", "  planet1=planet1.downcase.to_sym\n  planet2=planet2.downcase.to_sym\n\
    \  if planet1==:mercury || planet1==:venus || planet1==:mars || planet1==:jupiter\
    \ ||planet1==:saturn || planet1==:uranus || planet1==:neptune\n    orbits=[planet1,\
    \ planet2]\n  elsif planet2==:mercury || planet2==:venus || planet2==:mars ||\
    \ planet2==:jupiter ||planet2==:saturn || planet2==:uranus || planet2==:neptune\n\
    \    orbits=[planet2, planet1]\n  elsif planet1==:sun || planet2==:sun\n    orbits=[]\n\
    \  elsif planet1==planet2\n    orbits=[]\n  else\n    orbits=[planet1, planet2]\n\
    \  end\n  orbits.sort_by{|orbit| bf.distance(orbits.first,orbit)} \nend", "  \
    \  if planet1 == \"Mercury\" or planet2 == \"Mercury\"\n        orbit = planet1_orbit\
    \ + planet2_orbit\n        planet1_orbit = planet1_orbit - planet2_orbit\n   \
    \     planet2_orbit = planet2_orbit - planet1_orbit\n        \n        if planet1_orbit\
    \ == 0\n            orbits = planet1_orbit.to_s\n        elsif planet2_orbit ==\
    \ 0\n            orbits = planet2_orbit.to_s\n        elsif planet1_orbit < planet2_orbit\n\
    \            orbits = [planet1_orbit.to_s, planet2_orbit.to_s]\n        else\n\
    \            orbits = [planet2_orbit.to_s, planet1_orbit.to_s]\n        \n   \
    \ elsif planet1 == \"Venus\" or planet2 == \"Venus\"\n        orbit = planet1_orbit\
    \ + planet2_orbit\n        planet1_orbit = planet1_orbit - planet2_orbit\n   \
    \     planet2_orbit = planet2_orbit - planet1_orbit\n        \n        if planet1_orbit\
    \ == 0\n            orbits = planet1_orbit.to_s\n        elsif planet2_orbit ==\
    \ 0\n            orbits = planet2_orbit.to_s\n        elsif planet1_orbit < planet2_orbit\n\
    \            orbits = [planet1_orbit.to_s, planet2_orbit.to_s]\n        else\n\
    \            orbits = [planet2_orbit.to_s, planet1_orbit.to_s]\n        \n   \
    \ elsif planet1 == \"Earth\" or planet2 == \"Earth\"\n        orbit = planet1_orbit\
    \ + planet2_orbit\n        planet1_orbit = planet1_orbit - planet2_orbit\n   \
    \     planet2_orbit = planet2_orbit - planet1_orbit\n        \n        if planet1_orbit\
    \ == 0\n            orbits = planet1_orbit.to_s\n        elsif planet2_orbit ==\
    \ 0\n            orbits = planet2_orbit.to_s\n        elsif planet1_orbit < planet2_orbit\n\
    \            orbits = [planet1_orbit.to_s, planet2_orbit.to_s]\n        else\n\
    \            orbits = [planet2_orbit.to_s, planet1_orbit.to_s]\n        \n   \
    \ elsif planet1 == \"Mars\" or planet2 == \"Mars\"\n        orbit = planet1_orbit\
    \ + planet2_orbit\n        ", "  planet1 = planet1.downcase\n  planet2 = planet2.downcase\n\
    \  if planet1 == \"sun\" or planet2 == \"sun\"\n    puts \"#{planet1}\"\n    return\n\
    \  end\n  if planet1 == planet2\n    puts \"#{planet1}\"\n    return\n  end\n\
    \  if planet1.nil? or planet2.nil?\n    puts \"#{planet1}\"\n    return\n  end\n\
    \  planets = Array.new\n  while planet1 != planet2\n    planets << planet1\n \
    \   planet1 = planet1.next\n  end\n  planets = planets.reverse\n  planets.each_with_index\
    \ { |planet, i| puts \"#{planet} in orbit\" if (i = 0) or ((planet == planets.last)\
    \ & ((planets.count - i) != 1)) }\nend\n</cell>\n<text>\nThe next few code cells\
    \ contain explanations for the code in the prior sections. You only need to run\
    \ code cells if you want to see the answers.", "  if(planet1 == planet2) \n  \
    \  puts \"#{planet1} and #{planet2} are the same planet\"\n  elsif(planet1 > planet2)\n\
    \    puts \"#{planet1} is nearest to #{planet2}\"\n  else\n    puts \"#{planet2}\
    \ is nearest to #{planet1}\"\n  end\nend", "  result = []\n  p ||= planet1\n \
    \ q ||= planet2\n  if p != q\n    if p == :Mercury\n      if q == :Venus\n   \
    \     result = [planet1, planet2]\n      elsif q == :Earth\n        result = [planet1,\
    \ planet2]\n      elsif q == :Mars\n        result = [planet1, planet2]\n    \
    \  elsif q == :Jupiter\n        result = [planet1, planet2]\n      elsif q ==\
    \ :Saturn\n        result = [planet1, planet2]\n      elsif q == :Uranus\n   \
    \     result = [planet1, planet2]\n      elsif q == :Neptune\n        result =\
    \ [planet1, planet2]\n      end\n    elsif p == :Earth\n      if q == :Venus\n\
    \        result = [planet1, planet2]\n      elsif q == :Mars\n        result =\
    \ [planet1, planet2]\n      elsif q == :Jupiter\n        result = [planet1, planet2]\n\
    \      elsif q == :Saturn\n        result = [planet1, planet2]\n      elsif q\
    \ == :Uranus\n        result = [planet1, planet2]\n      elsif q == :Neptune\n\
    \        result = [planet1, planet2]\n      end\n    elsif p == :Mars\n      if\
    \ q == :Venus\n        result = [planet1, planet2]\n      elsif q == :Mercury\n\
    \        result = [planet1, planet2]\n      elsif q == :Jupiter\n        result\
    \ = [planet1, planet2]\n      elsif q == :Saturn\n        result = [planet1, planet2]\n\
    \      elsif q == :Uranus\n        result = [planet1, planet2]\n      elsif q\
    \ == :Neptune\n        result = [planet1, planet2]\n      end\n    elsif p ==\
    \ :Jupiter\n      if q == :Venus\n        result = [planet1, planet2]\n      elsif\
    \ q == :Mars\n        result = [planet1, planet2]\n      elsif q == :Earth\n \
    \       result = [planet1, planet2]\n      elsif q == :Saturn\n        result\
    \ = [planet1, planet2]\n      elsif ", "  # raise NotImplementedError\n  planet1\
    \ = planet1.upcase\n  planet2 = planet2.upcase\n  \n  case planet1.length \n \
    \ when 1\n    planet1 = planet1.upcase\n  when 2\n    planet1 = planet1.upcase\
    \ + planet1.downcase\n  end\n  \n  case planet2.length \n  when 1\n    planet2\
    \ = planet2.upcase\n  when 2\n    planet2 = planet2.upcase + planet2.downcase\n\
    \  end\n  \n  planet1 = planet1.split('')\n  planet2 = planet2.split('')\n  \n\
    \  difference = [planet1[0]]\n  difference = difference.concat(planet1[0...1]).map\
    \ do |letter|\n    letter = letter.upcase\n    if letter == \"M\"\n      letter\
    \ = letter.upcase + \"M\"\n    end\n    if letter == \"E\"\n      letter = letter.upcase\
    \ + \"E\"\n    end\n    if letter == \"J\"\n      letter = letter.upcase + \"\
    J\"\n    end\n    if letter == \"S\"\n      letter = letter.upcase + \"S\"\n \
    \   end\n    if letter == \"U\"\n      letter = letter.upcase + \"U\"\n    end\n\
    \    if letter == \"N\"\n      letter = letter.upcase + \"N\"\n    end\n    if\
    \ letter == \"D\"\n      letter = letter.upcase + \"D\"\n    end\n    letter\n\
    \  end\n  difference = difference.concat(planet1[0...1]).map do |letter|\n   \
    \ letter = letter.upcase\n    if letter == \"M\"\n      letter = letter.upcase\
    \ + \"M\"\n    end\n    if letter == \"E\"\n      letter = letter.upcase + \"\
    E\"\n    end\n    if letter == \"J\"\n      letter = letter.upcase + \"J\"\n \
    \   end\n    if letter == \"S\"\n      letter = letter.upcase + \"S\"\n    end\n\
    \    if letter == \"U\"\n      letter = letter.upcase + \"U\"\n    end\n    if\
    \ letter == \"N\"\n      letter = letter.upcase + \"N\"\n    end\n    if letter\
    \ == \"D\"\n      letter = letter.upcase + \"D\"\n    end\n    letter\n  end\n\
    \  difference = difference.concat(planet1[0...1]).map do |letter|\n    letter\
    \ = letter.upcase\n    if letter == \"M\"\n      letter = letter.up", "  raise\
    \ NotImplementedError\nend\n</cell>\n<code language=julia-1.3>\n@testset \"Problem\
    \ 1\" begin\n  planets1 = bf.call(\"Jupiter\", \"Neptune\")\n  @test is_sorted(planets1,\
    \ by=distance)\n  @test length(planets1)==3\n  @test planets1[1]==planets1[2]\n\
    \  @test planets1[2]==planets1[3]\nend\n</cell>\n<code language=julia-1.3>", " \
    \ if planet1.class != String or planet2.class != String\n    return []\n  result\
    \ = []\n  if planet1.include? \"Mercury\" or planet2.include? \"Mercury\"\n  \
    \  result<<\"Mercury\"\n  end\n  if planet1.include? \"Venus\" or planet2.include?\
    \ \"Venus\"\n    result<<\"Venus\"\n  end\n  if planet1.include? \"Earth\" or\
    \ planet2.include? \"Earth\"\n    result<<\"Earth\"\n  end\n  if planet1.include?\
    \ \"Mars\" or planet2.include? \"Mars\"\n    result<<\"Mars\"\n  end\n  if planet1.include?\
    \ \"Jupiter\" or planet2.include? \"Jupiter\"\n    result<<\"Jupiter\"\n  end\n\
    \  if planet1.include? \"Saturn\" or planet2.include? \"Saturn\"\n    result<<\"\
    Saturn\"\n  end\n  if planet1.include? \"Uranus\" or planet2.include? \"Uranus\"\
    \n    result<<\"Uranus\"\n  end\n  if planet1.include? \"Neptune\" or planet2.include?\
    \ \"Neptune\"\n    result<<\"Neptune\"\n  end\n  result.sort\nend", "    planet1\
    \ = bf.call(\"Earth\", planet1)\n    planet2 = bf.call(\"Earth\", planet2)\n \
    \   \n    return planets.select{|planet| planets.index(planet) == planets.index(planet1)\
    \ || planets.index(planet) == planets.index(planet2)}\nend", "  orbits = Array.new\n\
    \  if planet1 == planet2 then\n    return orbits\n  end\n  planet1 = planet1.capitalize\n\
    \  planet2 = planet2.capitalize\n  case planet1.length\n  when 1 then \n    case\
    \ planet2.length\n    when 1 then\n      return orbits\n    end\n  end\n  case\
    \ planet2.length\n  when 1 then\n    case planet1.length\n    when 1 then\n  \
    \    return orbits\n    end\n  end\n  case planet1.length\n  when 2 then \n  \
    \  case planet2.length\n    when 1 then\n      orbits.push(planet1)\n      return\
    \ orbits\n    end\n  end\n  case planet2.length\n  when 2 then\n    case planet1.length\n\
    \    when 1 then\n      orbits.push(planet2)\n      return orbits\n    end\n \
    \ end\n  return orbits\nend", "  if planet1 == planet2\n    puts [\"Planet names\
    \ are the same\"]\n  else \n    if planet1 > planet2\n      puts [\"Planet names\
    \ are opposite (#{planet1} > #{planet2})\"]\n    else \n      puts [\"Planet names\
    \ are opposite (#{planet1} < #{planet2})\"]\n    end\n  end\nend", "  if([planet1,\
    \ planet2].include? planet1)\n    p =[planet1, planet2]\n    if(p[1] == planet1)\n\
    \      p << p[0]\n    end\n    if(p[0] == planet1)\n      p << p[1]\n    end\n\
    \    if(p[0] == planet2)\n      p << p[1]\n    end\n    if(p[1] == planet2)\n\
    \      p << p[0]\n    end\n    if(p[0] == planet2)\n      p << p[0]\n    end\n\
    \    if(p[1] == planet1)\n      p << p[0]\n    end\n    if(p[0] == planet1)\n\
    \      p << p[1]\n    end\n    if(p[0] == planet2)\n      p << p[1]\n    end\n\
    \    if(p[1] == planet2)\n      p << p[0]\n    end\n    p << p[1]\n    p << p[0]\n\
    \    p.sort\n    if(p[0] == planet1)\n      p << p[1]\n    end\n    if(p[1] ==\
    \ planet1)\n      p << p[0]\n    end\n    if(p[0] == planet2)\n      p << p[1]\n\
    \    end\n    if(p[1] == planet2)\n      p << p[0]\n    end\n    p << p[1]\n \
    \   p << p[0]\n    p.sort\n    p\n  else\n    p = []\n    p = []\n    return p\n\
    \  end\nend\nputs bf.call(\"Jupiter\", \"Neptune\")\n</code>\n<|/ a tags=ruby\
    \ |>\n<| a tags=ruby dscore=0 |>\n<code>", "  unless planet1.include?('Jupiter')\n\
    \    return []\n  end\n  unless planet2.include?('Neptune')\n    return []\n \
    \ end\n  planet1 = planet1.gsub(\"Jupiter\", \"Saturn\")\n  planet2 = planet2.gsub(\"\
    Neptune\", \"Uranus\")\n  planet1 = planet1.gsub(\"Earth\", \"Venus\")\n  planet2\
    \ = planet2.gsub(\"Mercury\", \"Venus\")\n  planet1 = planet1.gsub(\"Mars\", \"\
    Earth\")\n  planet2 = planet2.gsub(\"Venus\", \"Mars\")\n  planet1 = planet1.gsub(\"\
    Saturn\", \"Mars\")\n  planet2 = planet2.gsub(\"Uranus\", \"Saturn\")\n  planet1\
    \ = planet1.gsub(\"Neptune\", \"Jupiter\")\n  planet2 = planet2.gsub(\"Mercury\"\
    , \"Jupiter\")\n  planet1 = planet1.gsub(\"Uranus\", \"Neptune\")\n  planet2 =\
    \ planet2.gsub(\"Earth\", \"Neptune\")\n  planet1 = planet1.gsub(\"Mars\", \"\
    Uranus\")\n  planet2 = planet2.gsub(\"Mercury\", \"Uranus\")\n  planet1 = planet1.gsub(\"\
    Saturn\", \"Uranus\")\n  planet2 = planet2.gsub(\"Venus\", \"Saturn\")\n  planet1\
    \ = planet1.gsub(\"Earth\", \"Mercury\")\n  planet2 = planet2.gsub(\"Venus\",\
    \ \"Mercury\")\n  planet1 = planet1.gsub(\"Jupiter\", \"Saturn\")\n  planet2 =\
    \ planet2.gsub(\"Mercury\", \"Jupiter\")\n  planet1 = planet1.gsub(\"Uranus\"\
    , \"Neptune\")\n  planet2 = planet2.gsub(\"Earth\", \"Neptune\")\n  planet1 =\
    \ planet1.gsub(\"Mars\", \"Uranus\")\n  planet2 = planet2.gsub(\"Mercury\", \"\
    Uranus\")\n  planet1 = planet1.gsub(\"Saturn\", \"Uranus\")\n  planet2 = planet2.gsub(\"\
    Venus\", \"Saturn\")\n  planet1 = planet1.gsub(\"Earth\", \"Mercury\")\n", " \
    \   return []\nend\n</cell>\n<code language=julia-1.0>", "  if planet1.casecmp(\"\
    Mercury\") == 0\n    planet1 = \"Mercury\"\n  end\n  if planet2.casecmp(\"Neptune\"\
    ) == 0\n    planet2 = \"Neptune\"\n  end\n  if planet1.casecmp(\"Jupiter\") ==\
    \ 0\n    planet1 = \"Jupiter\"\n  end\n  if planet2.casecmp(\"Saturn\") == 0\n\
    \    planet2 = \"Saturn\"\n  end\n  if planet1.casecmp(\"Earth\") == 0\n    planet1\
    \ = \"Earth\"\n  end\n  if planet2.casecmp(\"Uranus\") == 0\n    planet2 = \"\
    Uranus\"\n  end\n  if planet1.casecmp(\"Venus\") == 0\n    planet1 = \"Venus\"\
    \n  end\n  if planet2.casecmp(\"Mars\") == 0\n    planet2 = \"Mars\"\n  end\n\
    \  if planet1.casecmp(\"Neptune\") == 0\n    planet1 = \"Neptune\"\n  end\n  if\
    \ planet2.casecmp(\"Jupiter\") == 0\n    planet2 = \"Jupiter\"\n  end\n  if planet1.casecmp(\"\
    Saturn\") == 0\n    planet1 = \"Saturn\"\n  end\n  if planet2.casecmp(\"Uranus\"\
    ) == 0\n    planet2 = \"Uranus\"\n  end\n  if planet1.casecmp(\"Mercury\") ==\
    \ 0\n    planet1 = \"Mercury\"\n  end\n  if planet2.casecmp(\"Earth\") == 0\n\
    \    planet2 = \"Earth\"\n  end\n  if planet1.casecmp(\"Uranus\") == 0\n    planet1\
    \ = \"Uranus\"\n  end\n  if planet2.casecmp(\"Mars\") == 0\n    planet2 = \"Mars\"\
    \n  end\n  if planet1.casecmp(\"Venus\") == 0\n    planet1 = \"Venus\"\n  end\n\
    \  if planet2.casecmp(\"Mercury\") == 0\n    planet2 = \"Mercury\"\n  end\n  if\
    \ planet1.casecmp(\"Mars\") == 0\n    planet1 = \"Mars\"\n  end\n  if planet2.casecmp(\"\
    Saturn\") == 0\n    planet2 = \"Saturn\"\n  end\n  if planet1.casecmp(\"Earth\"\
    ) == 0\n    planet1 = \"Earth\"\n  end\n  if planet2.casecmp(\"Neptune\") == 0\n\
    \    planet2 = \"Neptune", "  return([p for p in planets if \n    p > planet1\
    \ and p < planet2 and\n    abs(p-1) == abs(p-2)]\n  end\nend\n</code>\n<|/ a |>\n\
    <| a dscore=2 |>\nI used recursion to solve this. First I sorted the planets by\
    \ distance from the sun (distance from the sun is the distance in AU). The next\
    \ step is to sort the planets by distance from the sun. \n<code>", "    planet1\
    \ = planet1.upcase\n    planet2 = planet2.upcase\n    array = []\n    \n    if\
    \ planet1 == planet2\n        puts \"Invalid inputs!\"\n    else\n        array\
    \ << planet1\n        array << planet2\n    end\n    \n    return array.sort\n\
    end", "  a = planet1.upcase \n  b = planet2.upcase\n  sol = planet1 + \" \" +\
    \ planet2\n  sol = sol.split(\" \")\n  sol.delete(planet1)\n  sol.delete(planet2)\n\
    \  sol.delete(\"\")\n  sol.delete(a)\n  sol.delete(b)\n  sol.sort\n  sol.delete(\"\
    Mercury\")\n  sol.delete(\"Earth\")\n  sol.delete(\"Venus\")\n  sol.delete(\"\
    Mars\")\n  sol.delete(\"Saturn\")\n  sol.delete(\"Jupiter\")\n  sol.delete(\"\
    Uranus\")\n  sol.delete(\"Neptune\")\n  sol.delete(\"Mercury\")\n  sol.delete(\"\
    Earth\")\n  sol.delete(\"Venus\")\n  sol.delete(\"Mars\")\n  sol.delete(\"Saturn\"\
    )\n  sol.delete(\"Jupiter\")\n  sol.delete(\"Uranus\")\n  sol.delete(\"Neptune\"\
    )\n  sol.delete(\"Mercury\")\n  sol.delete(\"Earth\")\n  sol.delete(\"Venus\"\
    )\n  sol.delete(\"Mars\")\n  sol.delete(\"Saturn\")\n  sol.delete(\"Jupiter\"\
    )\n  sol.delete(\"Uranus\")\n  sol.delete(\"Neptune\")\n  sol.delete(\"Mercury\"\
    )\n  sol.delete(\"Earth\")\n  sol.delete(\"Venus\")\n  sol.delete(\"Mars\")\n\
    \  sol.delete(\"Saturn\")\n  sol.delete(\"Jupiter\")\n  sol.delete(\"Uranus\"\
    )\n  sol.delete(\"Neptune\")\n  sol.delete(\"Mercury\")\n  sol.delete(\"Earth\"\
    )\n  sol.delete(\"Venus\")\n  sol.delete(\"Mars\")\n  sol.delete(\"Saturn\")\n\
    \  sol.delete(\"Jupiter\")\n  sol.delete(\"Uranus\")\n  sol.delete(\"Neptune\"\
    )\n  sol.delete(\"Mercury\")\n  sol.delete(\"Earth\")\n  sol.delete(\"Venus\"\
    )\n  sol.delete(\"Mars\")\n  sol.delete(\"Saturn\")\n  sol.delete(\"Jupiter\"\
    )\n  sol.delete(\"Uranus\")\n  sol.delete(\"Neptune\")\n  sol.delete(\"Mercury\"\
    )\n  sol.delete(\"Earth\")\n  sol.delete(\"Venus\")\n  sol.delete(\"Mars\")\n\
    \  sol.delete(\"Saturn\")\n  sol.delete(\"J", "    if planet1 == planet2\n   \
    \     return planet1\n    \n    sun = org.jogl.util.Vector3(sun.x, sun.y, sun.z)\n\
    \    planet1 = org.jogl.util.Vector3(planet1.x, planet1.y, planet1.z)\n    planet2\
    \ = org.jogl.util.Vector3(planet2.x, planet2.y, planet2.z)\n    \n    orbit1 =\
    \ sun.sub2(planet1)\n    orbit2 = sun.sub2(planet2)\n    \n    return orbit1.sort(orbit2)\n\
    end", "    distances = []\n    orbits = getOrbits(planet1, planet2)", "  planet1\
    \ = planet1.upcase\n  planet2 = planet2.upcase", "    orb1, orb2, orb3, orb4,\
    \ orb5, orb6, orb7, orb8 = [], [], [], [], [], [], [], []\n    \n    if planet1\
    \ == planet2\n        [planet1, planet2] = [planet2, planet1]\n    end\n    \n\
    \    planet1_radius = planet1_distance(planet1)\n    planet2_radius = planet2_distance(planet2)\n\
    \    \n    if planet1_radius < planet2_radius\n        planet1, planet2 = [planet2,\
    \ planet1]\n    end\n    \n    if planet1 == planet2\n        \n        # Jupiter\
    \ - Neptune = Saturn Uranus\n        if planet1 == \"Jupiter\" and planet2 ==\
    \ \"Neptune\"\n            orb1 << planet2\n            orb2 << planet2\n    \
    \        orb3 << planet2\n            orb4 << planet2\n            orb5 << planet2\n\
    \            orb6 << planet2\n            orb7 << planet2\n            orb8 <<\
    \ planet2\n        \n        # Jupiter - Uranus = Earth Mars Jupiter Saturn\n\
    \        elif planet1 == \"Jupiter\" and planet2 == \"Uranus\"\n            orb1\
    \ << planet1\n            orb3 << planet1\n            orb5 << planet1\n     \
    \       orb7 << planet1\n            orb8 << planet1\n            orb2 << planet2\n\
    \        \n        # Neptune - Uranus = Earth Mars Jupiter Saturn\n        elif\
    \ planet2 == \"Neptune\" and planet1 == \"Uranus\"\n            orb1 << planet1\n\
    \            orb3 << planet1\n            orb5 << planet1\n            orb7 <<\
    \ planet1\n            orb8 << planet1\n            orb2 << planet2\n        \n\
    \        # Mercury - Jupiter = Earth Mars Venus Jupiter Saturn\n        elif planet1\
    \ == \"Mercury\" and planet2 == \"Jupiter\"\n            orb1 << planet1\n   \
    \         orb3 << planet1\n            orb5 << planet1\n            orb7 << planet1\n\
    \            orb8 << planet1\n            ", "  planets = Array.new\n  planets\
    \ << Array.new\n  planets << Array.new\n  planets << Array.new\n  planets << Array.new\n\
    \  planets << Array.new\n  planets << Array.new\n  planets << Array.new\n  planets\
    \ << Array.new\n  planets << Array.new\n  planets << Array.new\n  planets << Array.new\n\
    \  planets << Array.new\n  planets << Array.new\n  planets << Array.new\n  planets\
    \ << Array.new\n  planets << Array.new\n  planets << Array.new\n  planets << Array.new\n\
    \  planets << Array.new\n  planets << Array.new\n  planets << Array.new\n  planets\
    \ << Array.new\n  planets << Array.new\n  planets << Array.new\n  planets << Array.new\n\
    \  planets << Array.new\n  planets << Array.new\n  planets << Array.new\n  planets\
    \ << Array.new\n  planets << Array.new\n  planets << Array.new\n  planets << Array.new\n\
    \  planets << Array.new\n  planets << Array.new\n  planets << Array.new\n  planets\
    \ << Array.new\n  planets << Array.new\n  planets << Array.new\n  planets << Array.new\n\
    \  planets << Array.new\n  planets << Array.new\n  planets << Array.new\n  planets\
    \ << Array.new\n  planets << Array.new\n  planets << Array.new\n  planets << Array.new\n\
    \  planets << Array.new\n  planets << Array.new\n  planets << Array.new\n  planets\
    \ << Array.new\n  planets << Array.new\n  planets << Array.new\n  planets << Array.new\n\
    \  planets << Array.new\n  planets << Array.new\n  planets << Array.new\n  planets\
    \ << Array.new\n  planets << Array.new\n  planets << Array.new\n  planets << Array.new\n\
    \  planets << Array.new\n  planets << Array.new\n  planets << Array.new\n  ",
  "  planet1 = planet.split(planet1)[0]\n  planet2 = planet.split(planet2)[0]\n  orbits\
    \ = find_orbits(planet1, planet2)\n  orbits.each do |orbit|\n    distances = find_distances(orbit[1],\
    \ orbit[2])\n    distances.sort_by { |d| d.to_f }.reverse\n    \n    return orbit[1]\
    \ if distances[0] < distances[1]\n    return orbit[2] if distances[1] < distances[0]\n\
    \  end\n  return []\nend", "  if planet1 == planet2\n    planet = planet1\n  \
    \  planet1 = planet\n  elsif planet1 == planet = planet2\n    planet = planet2\n\
    \    planet2 = planet\n  else \n    planet1 = planet1.upcase\n    planet2 = planet2.upcase\n\
    \    planet = planet1 <=> planet2\n  end", "    \n    # Write your code below\
    \ this line\n    \n    return []\n    ", "    planets = [planet1, planet2]\n \
    \   planet1 = planet1.capitalize\n    planet2 = planet2.capitalize\n    planet1orb\
    \ = \"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \\\n\
    \            \"Uranus\", \"Neptune\"\n    planet2orb = \"Mercury\", \"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \\\n            \"Uranus\", \"\
    Neptune\"\n    if planet1 in planet1orb and planet2 in planet2orb\n        planets\
    \ = []\n        return planets\n    planet1orb = planet1orb + planet2orb\n   \
    \ planet1orb.each do |planet|\n        planets.push planet if planet != planet1\
    \ and planet != planet2\n    end\n    planets = planets.sort.uniq.map{|planet|\
    \ planet.capitalize }\n    planets.empty? ? planets : planets\nend\n</code>\n\
    <|/ a tags=ruby,sorting,arrays |>\n<| c |>\nPlease do not post answers with code\
    \ only. Either explain the code or write comments in the code to explain the code.\n\
    <|/ c |>\n<| c |>\nI agree with, please add some explanation\n<|/ c |>\n<| c |>\n\
    Thanks Josh, I have edited the answer to include a brief explanation.\n<|/ c |>\n\
    <| a tags=ruby,sorting,arrays |>\n<code>", "  # Create an array to store the planet\
    \ orbits\n  orbits = []\n  # Create a variable to store the distance between the\
    \ planet and sun\n  distance = 0\n  # Get the names of the planets\n  planet1\
    \ = getPlanetName(planet1)\n  planet2 = getPlanetName(planet2)\n  \n  if(planet1\
    \ == planet2)\n    return [planet1]\n  \n  # Find distance between the planet\
    \ and sun\n  distance = calculateDistance(planet1, planet2)\n  \n  # Iterate through\
    \ planets\n  orbits = getPlanetOrbits(planet1, planet2, distance)\n  \n  # Return\
    \ array sorted by proximity to sun\n  orbits.sort!\n  return orbits\nend", " \
    \   planet1 = planet1.strip\n    planet2 = planet2.strip\n    \n    orbit1 = bf.planet_orbit_info(planet1)\n\
    \    orbit2 = bf.planet_orbit_info(planet2)\n    \n    solar = bf.planet_orbits_between(planet1,\
    \ planet2)\n    \n    orbit1.each do |orbit|\n        if !orbit2.include?(orbit)\n\
    \            solar.delete(orbit)\n        end\n    end\n    \n    orbit2.each\
    \ do |orbit|\n        if !orbit1.include?(orbit)\n            solar.delete(orbit)\n\
    \        end\n    end\n    \n    solar.sort_by! do |orbit|\n        if planet1.include?(orbit.sun_name)\n\
    \            0\n        elsif planet2.include?(orbit.sun_name)\n            1\n\
    \        else\n            2\n        end\n    end\n    \n    solar.empty? ? []\
    \ : solar\nend", "  planet1 = planet1.downcase.to_sym\n  planet2 = planet2.downcase.to_sym\n\
    \  if planet1.upcase == planet2\n    planets = planet1.upcase\n  elsif planet1\
    \ > planet2\n    planets = planet1.upcase << planet2.upcase\n  elsif planet1 <\
    \ planet2\n    planets = planet2.upcase << planet1.upcase\n  else\n    planets\
    \ = []\n  end\n  \n  if planets == [\"sun\"]\n    planets = []\n  elsif planet1\
    \ == planet2\n    planets << \"#{planet1}\"\n  end\n  \n  planets.sort_by!{|planet|\
    \ planet.distance_to_sun}\n  return planets\nend", "  # your code here\n  return\
    \ []\nend\n</cell>\n<text>\nTo complete the exercise for this question we need\
    \ the module Math which contains all the methods that we can use for our calculations.\
    \ These methods include the module Math which contains the functions sqrt which\
    \ calculates the square root of the argument and round which rounds a number to\
    \ a given precision (the second argument). To use these methods we first need\
    \ to require the module and assign the values to variables. We also need to require\
    \ the module to use them.", "  sol1 = bf(planet1)\n  sol2 = bf(planet2)\n  return\
    \ sol1 + sol2[sol1.index(planet1) + 1 .. sol2.index(planet2)]\nend", "    arr=[]\n\
    \    if planet1 == \"Mercury\" or planet1 == \"Venus\" or planet1 == \"Earth\"\
    \ or planet1 == \"Mars\" or planet1 == \"Jupiter\" or planet1 == \"Saturn\" or\
    \ planet1 == \"Uranus\" or planet1 == \"Neptune\" or planet2 == \"Mercury\" or\
    \ planet2 == \"Venus\" or planet2 == \"Earth\" or planet2 == \"Mars\" or planet2\
    \ == \"Jupiter\" or planet2 == \"Saturn\" or planet2 == \"Uranus\" or planet2\
    \ == \"Neptune\" then\n       arr =[planet1, planet2]\n    end\n    return arr\n\
    end", '  result = []', "  planets = Array.new\n  if (planet1.downcase == \"mercury\"\
    \ && planet2.downcase == \"neptune\") \n    planets << [\"Venus\", \"Earth\",\
    \ \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n  elsif (planet1.downcase\
    \ == \"earth\" && planet2.downcase == \"mercury\")\n    planets << [\"Mercury\"\
    , \"Venus\"]\n  elsif (planet1.downcase == \"mars\" && planet2.downcase == \"\
    earth\")\n    planets << [\"Earth\", \"Mars\"]\n  elsif (planet1.downcase == \"\
    jupiter\" && planet2.downcase == \"mars\")\n    planets << [\"Mars\", \"Jupiter\"\
    ]\n  elsif (planet1.downcase == \"saturn\" && planet2.downcase == \"jupiter\"\
    )\n    planets << [\"Jupiter\", \"Saturn\"]\n  elsif (planet1.downcase == \"uranus\"\
    \ && planet2.downcase == \"saturn\")\n    planets << [\"Saturn\", \"Uranus\"]\n\
    \  elsif (planet1.downcase == \"neptune\" && planet2.downcase == \"uranus\")\n\
    \    planets << [\"Uranus\", \"Neptune\"]\n  elsif (planet1.downcase == \"venus\"\
    \ && planet2.downcase == \"uranus\")\n    planets << [\"Uranus\", \"Venus\"]\n\
    \  elsif (planet1.downcase == \"earth\" && planet2.downcase == \"venus\")\n  \
    \  planets << [\"Venus\", \"Earth\"]\n  elsif (planet1.downcase == \"mars\" &&\
    \ planet2.downcase == \"venus\")\n    planets << [\"Venus\", \"Mars\"]\n  elsif\
    \ (planet1.downcase == \"jupiter\" && planet2.downcase == \"venus\")\n    planets\
    \ << [\"Venus\", \"Jupiter\"]\n  elsif (planet1.downcase == \"saturn\" && planet2.downcase\
    \ == \"jupiter\")\n    planets << [\"Jupiter\", \"Saturn\"]\n  elsif (planet1.downcase\
    \ == \"uranus\" && planet2.downcase == \"saturn\")\n    planets << [\"Saturn\"\
    , \"Uran", "\torbit_list = []\n\tplanet1.orbit_name\n\tplanet2.orbit_name\n\t\
    planet1.orbit.period\n\tplanet2.orbit.period\n\tplanet1.orbit.aphelion\n\tplanet2.orbit.aphelion\n\
    \tplanet1.orbit.aphelion\n\tplanet2.orbit.aphelion\n\tplanet1.orbit.eccentricity\n\
    \tplanet2.orbit.eccentricity\n\tplanet1.orbit.equation_of_time\n\tplanet2.orbit.equation_of_time\n\
    \tplanet1.orbit.inclination\n\tplanet2.orbit.inclination\n\tplanet1.orbit.longitude\n\
    \tplanet2.orbit.longitude\n\tplanet1.orbit.latitude\n\tplanet2.orbit.latitude\n\
    \tplanet1.orbit.distance\n\tplanet2.orbit.distance\n\tif planet1.orbit_name ==\
    \ \"Mercury\"\n\t\torbit_list = [planet1, planet2]\n\t\treturn orbit_list.sort{|x,y|\
    \ x.orbit.aphelion<=>y.orbit.aphelion}\n\tend\n\tif planet2.orbit_name == \"Mercury\"\
    \n\t\torbit_list = [planet1, planet2]\n\t\treturn orbit_list.sort{|x,y| x.orbit.aphelion<=>y.orbit.aphelion}\n\
    \tend\n\tif planet1.orbit_name == \"Venus\"\n\t\torbit_list = [planet1, planet2]\n\
    \t\treturn orbit_list.sort{|x,y| x.orbit.aphelion<=>y.orbit.aphelion}\n\tend\n\
    \tif planet2.orbit_name == \"Venus\"\n\t\torbit_list = [planet1, planet2]\n\t\t\
    return orbit_list.sort{|x,y| x.orbit.aphelion<=>y.orbit.aphelion}\n\tend\n\tif\
    \ planet1.orbit_name == \"Earth\"\n\t\torbit_list = [planet1, planet2]\n\t\treturn\
    \ orbit_list.sort{|x,y| x.orbit.aphelion<=>y.orbit.aphelion}\n\tend\n\tif planet2.orbit_name\
    \ == \"Earth\"\n\t\torbit_list = [planet1, planet2]\n\t\treturn orbit_list.sort{|x,y|\
    \ x.orbit.aphelion<=>y.orbit.aphelion}\n\tend\n\tif planet1.or", "  if planet1.eql?(planet2)\n\
    \    planet1\n  elsif planet1.eql?(\"Mercury\")\n    [\"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n  elsif planet1.eql?(\"\
    Venus\")\n    [\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    ]\n  elsif planet1.eql?(\"Earth\")\n    [\"Mars\", \"Jupiter\", \"Saturn\", \"\
    Uranus\", \"Neptune\"]\n  elsif planet1.eql?(\"Mars\")\n    [\"Jupiter\", \"Saturn\"\
    , \"Uranus\", \"Neptune\"]\n  elsif planet1.eql?(\"Jupiter\")\n    [\"Saturn\"\
    , \"Uranus\", \"Neptune\"]\n  elsif planet1.eql?(\"Saturn\")\n    [\"Uranus\"\
    , \"Neptune\"]\n  elsif planet1.eql?(\"Uranus\")\n    [\"Neptune\"]\n  elsif planet1.eql?(\"\
    Neptune\")\n    []\n  end\nend", "  begin\n  puts \"The orbit of #{planet1} is\
    \ #{orbit(planet1)}. \\\nThe orbit of #{planet2} is #{orbit(planet2)}.\"\nend",
  "  case (planet1 == planet2) \n    when true\n      planets\n    when false \n \
    \     []\n  end\nend", "    solar_planets = []\n    if planet1.eql?(planet2)\n\
    \        solar_planets.push(planet1)\n    else\n        solar_planets.push(planet1)\n\
    \        solar_planets.push(planet2)\n    end\n    \n    solar_planets.sort{|a,b|\
    \ getDistance(a,b) < getDistance(b,a)}\n    solar_planets\nend\n</code>\n<|/ a\
    \ dscore=1 |>\n<| c |>\nWhile your answer does answer the question, it might be\
    \ better to include the explanation instead of just pasting the code into a snippet.\n\
    <|/ c |>\n<| c |>\nThank you. My bad - I thought it was self explanatory. I'll\
    \ do that next time.\n<|/ c |>\n<| a dscore=1 |>\nI like to use hash tables for\
    \ this sort of thing:\n<code>\nrequire 'set'", "  if planet1.to_s.strip.eql?(\"\
    earth\") && planet2.to_s.strip.eql?(\"sun\") then\n    return []\n  end\n  if\
    \ planet1.to_s.strip.eql?(\"sun\") && planet2.to_s.strip.eql?(\"earth\") then\n\
    \    return []\n  end\n  if planet1.to_s.strip.eql?(\"mars\") && planet2.to_s.strip.eql?(\"\
    earth\") then\n    return []\n  end\n  if planet1.to_s.strip.eql?(\"earth\") &&\
    \ planet2.to_s.strip.eql?(\"mars\") then\n    return []\n  end\n  if planet1.to_s.strip.eql?(\"\
    jupiter\") && planet2.to_s.strip.eql?(\"saturn\") then\n    return []\n  end\n\
    \  if planet1.to_s.strip.eql?(\"saturn\") && planet2.to_s.strip.eql?(\"jupiter\"\
    ) then\n    return []\n  end\n  if planet1.to_s.strip.eql?(\"uranus\") && planet2.to_s.strip.eql?(\"\
    neptune\") then\n    return []\n  end\n  if planet1.to_s.strip.eql?(\"neptune\"\
    ) && planet2.to_s.strip.eql?(\"uranus\") then\n    return []\n  end\n  if planet1.to_s.strip.eql?(\"\
    venus\") && planet2.to_s.strip.eql?(\"earth\") then\n    return []\n  end\n  if\
    \ planet1.to_s.strip.eql?(\"mars\") && planet2.to_s.strip.eql?(\"venus\") then\n\
    \    return []\n  end\n  if planet1.to_s.strip.eql?(\"jupiter\") && planet2.to_s.strip.eql?(\"\
    mars\") then\n    return []\n  end\n  if planet1.to_s.strip.eql?(\"saturn\") &&\
    \ planet2.to_s.strip.eql?(\"jupiter\") then\n    return []\n  end\n  if planet1.to_s.strip.eql?(\"\
    uranus\") && planet2.to_s.strip.eql?(\"venus\") then\n    return []\n  end\n \
    \ if planet1.to_s.strip.eql?(\"neptune\") && planet2.to_s.strip.eql", "\tplanet1\
    \ = planet1.upcase\n\tplanet2 = planet2.upcase\n\tif planet1 == planet2\n\t\t\
    return\n\treturn[planet1,planet2]\nend\nputs bf.call(\"Jupiter\", \"Neptune\"\
    )\nputs bf.call(\"Earth\", \"Mercury\")\nputs bf.call(\"Mercury\", \"Uranus\"\
    )\n<|/ file ext=.rb source=gitlab filename=day2.rb |>\n<| c |>\nAwesome! This\
    \ is an interesting problem, and one that's fun to think about.\n<|/ c |>\n<|\
    \ c |>\nYou're welcome! I'm glad I could help :) Good luck!\n<|/ c |>\n<| c |>\n\
    I forgot to mention that you're welcome to check out my solution for this problem\
    \ in Ruby :)\n<|/ c |>\n<| c |>\nAwesome! Thanks so much for you help!\n<|/ c\
    \ |>\n<| c |>\nYou're welcome! I'm glad I could help!\n<|/ c |>\n<| a dscore=0\
    \ |>\n<code>", "    planet1_orbit = planet1.split(\"(\")[0]\n    planet2_orbit\
    \ = planet2.split(\"(\")[0]\n    planet1_planet_distance = []\n    planet2_planet_distance\
    \ = []\n    \n    planet1_orbit.split(\"_\")\n    planet2_orbit.split(\"_\")\n\
    \    \n    if planet1_orbit[1] == \"sun\"\n        planet1_orbit = planet1_orbit[0]\n\
    \    \n    if planet2_orbit[1] == \"sun\"\n        planet2_orbit = planet2_orbit[0]\n\
    \    \n    if planet1_orbit < planet2_orbit \n        return planet1_planet_distance\n\
    \    \n    if planet1_orbit > planet2_orbit \n        return planet2_planet_distance\n\
    \    \n    if planet1_orbit > planet2_orbit\n        return planet1_planet_distance\n\
    \    \n    planet1_planet_distance = []\n    planet2_planet_distance = []\n  \
    \  \n    planet1_orbit.split(\"_\")\n    planet2_orbit.split(\"_\")\n    \n  \
    \  for planet in [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"\
    Saturn\", \"Uranus\", \"Neptune\", \"Halley\"]\n        if planet in planet1_orbit\
    \ \n            planet1_planet_distance.push(planet)\n    \n        if planet\
    \ in planet2_orbit\n            planet2_planet_distance.push(planet)\n    \n \
    \   planet1_planet_distance.sort() # Sort by proximity to the sun\n    planet2_planet_distance.sort()\n\
    \    \n    planet1_planet_distance.push(planet1_orbit)\n    planet2_planet_distance.push(planet2_orbit)\n\
    \    \n    return planet1_planet_distance\n</code>\n<|/ a dscore=0 |>\n<| a |>\n\
    Here is one more way to do it. It returns an array containing the names of the\
    \ planets whose orbits are between planet1 and planet2:\n<code>", "    # raise\
    \ NotImplementedError()\n    planets = [planet1, planet2]\n    planets = []\n\
    \    planets.each do |planet|\n        distances = Array.new\n        distances\
    \ << distance_of_planets(planet, planet1)\n        distances << distance_of_planets(planet,\
    \ planet2)\n        distances << distance_of_planets(planet, planet1.capitalize)\n\
    \        distances << distance_of_planets(planet, planet2.capitalize)\n      \
    \  distances << distance_of_planets(planet, planet.capitalize)\n        distances\
    \ << distance_of_planets(planet, planet.capitalize.capitalize)\n        distances\
    \ << distance_of_planets(planet, planet.capitalize.capitalize.capitalize)\n  \
    \      distances << distance_of_planets(planet, planet.capitalize.capitalize.capitalize.capitalize)\n\
    \        distances << distance_of_planets(planet, planet.capitalize.capitalize.capitalize.capitalize.capitalize)\n\
    \        distances.sort! { |a, b| b <=> a }\n        distances = distances.select{|a|\
    \ a > 0 }\n        planets = planets.reject {|planet| planet == distances.first}\n\
    \    end\n    planets\nend\n</code>\nFor clarity's sake I made the function output\
    \ the distances instead of returning them as the return value of the function\
    \ would be void. Here's the code for that.\n<code>", "  # Your code here\n  \n\
    \  return []\nend", "    orbit1 = [\n        [\"Mercury\", 245],\n        [\"\
    Venus\", 245],\n        [\"Earth\", 245],\n        [\"Mars\", 245],\n        [\"\
    Jupiter\", 245],\n        [\"Saturn\", 245],\n        [\"Uranus\", 245],\n   \
    \     [\"Neptune\", 245],\n        [\"Moon\", 245],\n        [\"Mercury\", 245],\n\
    \        [\"Venus\", 245],\n        [\"Earth\", 245],\n        [\"Mars\", 245],\n\
    \        [\"Jupiter\", 245],\n        [\"Saturn\", 245],\n        [\"Uranus\"\
    , 245],\n        [\"Neptune\", 245],\n        [\"Moon\", 245],\n        [\"Mercury\"\
    , 245],\n        [\"Venus\", 245],\n        [\"Earth\", 245],\n        [\"Mars\"\
    , 245],\n        [\"Jupiter\", 245],\n        [\"Saturn\", 245],\n        [\"\
    Uranus\", 245],\n        [\"Neptune\", 245],\n        [\"Moon\", 245],\n     \
    \   [\"Mercury\", 245],\n        [\"Venus\", 245],\n        [\"Earth\", 245],\n\
    \        [\"Mars\", 245],\n        [\"Jupiter\", 245],\n        [\"Saturn\", 245],\n\
    \        [\"Uranus\", 245],\n        [\"Neptune\", 245],\n        [\"Moon\", 245],\n\
    \        [\"Mercury\", 245],\n        [\"Venus\", 245],\n        [\"Earth\", 245],\n\
    \        [\"Mars\", 245],\n        [\"Jupiter\", 245],\n        [\"Saturn\", 245],\n\
    \        [\"Uranus\", 245],\n        [\"Neptune\", 245],\n        [\"Moon\", 245],\n\
    \        [\"Mercury\", 245],\n        [\"Venus\", 245],\n        [\"Earth\", 245],\n\
    \        [\"Mars\", 245],\n        [\"Jupiter\", 245],\n        [\"Saturn\", 245],\n\
    \        [\"Uranus\", 245],\n        [\"Neptune\", 245],\n        [\"Moon\", 245],\n\
    \        [\"Mercury\", 245],\n        [\"Venus\", 245],\n        [\"Earth\", 245],\n\
    \        [\"Mars\", 245],\n        [\"Jupiter\", 245],\n        [\"Saturn\", 245],\n\
    \        [\"Uranus\", 245],\n        [\"Neptune\", ", "  if planet1 == \"Earth\"\
    \ or planet1 == \"Sun\" or planet2 == \"Earth\" or planet2 == \"Sun\"\n    []\n\
    \  else \n    planet1 = \"Sun\"\n    planet2 = \"Sun\"\n    orbit = orbit(planet1,\
    \ planet2)\n    distance = [planet1 + \"-\" + planet2, planet1 + \"-\" + planet2]\n\
    \    i = 0\n    while i < distance.size - 1\n      distance[i + 1] = [distance[i][0],\
    \ distance[i + 1][0]]\n      i += 1\n    distance.delete_at(0)\n    distance =\
    \ distance.sort { |a, b| a[0].to_i <=> b[0].to_i }\n    distance.delete_at(0)\n\
    \    distance.each { |x| puts x[0] }\nend", "  # Use a hashmap to store the planets'\
    \ orbits\n  map1 = HashMap()\n  map2 = HashMap()", "  orbit_sun1 = getPlanetOrbit(planet1)\n\
    \  orbit_sun2 = getPlanetOrbit(planet2)\n  orbit_all = orbit_sun1.zip(orbit_sun2)\n\
    \  sun_proximity = orbit_all.map { |x| x.map(&:distance).min }\n  sun_proximity\
    \ = sun_proximity.select { |x| x >= 0 }\n  return sun_proximity if sun_proximity.present?\n\
    \  return []\nend", "  planet1 = planet1.downcase\n  planet2 = planet2.downcase\n\
    \  planet1 = planet1.upcase\n  planet2 = planet2.upcase\n  return [planet1, planet2]\
    \ + bf.planets(planet1, planet2).uniq.sort_by{|a| bf.distance(planet1, planet2,\
    \ a)}\nend", "    \n  \n    planet1_orb = planet1_orb()\n    planet2_orb = planet2_orb()\n\
    \  \n    if planet1.downcase != \"jupiter\" or planet2.downcase != \"neptune\"\
    \n      return []\n    \n    orbits = planet1_orb.merge(planet2_orb).sort\n  \
    \  \n  \n    planets = []\n    i = 0\n    while i < orbits.length - 1 and orbits[i\
    \ + 1] > orbits[i]\n      planets << orbits[i].name\n      i += 1\n    \n    return\
    \ planets\n  end", " \n    return planet1, planet2\nend\n</cell>\n<cell>", " \
    \ return [] if (planet1 == nil || planet2 == nil) || (planet1.length != 1) \n\
    \            || (planet2.length != 1) || (planet1.downcase !~ /[a-z]/ || \n  \
    \                  planet2.downcase !~ /[a-z]/)\n  [\"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\"].map { |planet|\n    [planet, \"#{planet1}\
    \ #{planet2}\"].map { |orbit|\n      planet = orbit.strip.downcase\n      planet.gsub!(/[^a-z]/,\
    \ \"\")\n      [planet, orbit.gsub!(/[a-z]/, planet).to_i]\n    }.sort_by(&:last).map\
    \ { |planet, i|\n      i if planet.include?(planet1) && planet.include?(planet2)\n\
    \    }\n  }.flatten.compact\nend\n</code>\n<|/ a dscore=1 tags=ruby,arrays |>\n\
    <| c |>\nThis is a really elegant solution. I was trying to find an answer that\
    \ didn't use regex. Good job!\n<|/ c |>\n<| c |>\nThe only downside to this is\
    \ that it does not return an empty array if planet1 or planet2 are not correct\
    \ planet names. It seems to me that the solution should still use regex, but I'm\
    \ probably missing something here.\n<|/ c |>\n<| c |>\nThank you for pointing\
    \ this out. I edited my answer accordingly.\n<|/ c |>\n<| c |>\nThank you for\
    \ posting the answer! I posted an answer that uses the regex you provided. I am\
    \ not sure why it returns an empty array if planet1 or planet2 are not correct\
    \ planet names, but I appreciate the answer!\n<|/ c |>\n<| a dscore=0 |>\nHere's\
    \ a solution using regex:\n<code>\nbf.call(\"Jupiter\", \"Neptune\")\n  #=> [\"\
    Saturn\", \"Uranus\"] \nbf.call(\"Earth\", \"Mercury\")\n  #=> \"Venus\" \nbf.call(\"\
    Mercury\", \"Uranus\")\n  #=> [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"\
    Saturn\"] \n</code>\nCode\n<code>", "  \n  planets1 =[planet1,planet2,\"Earth\"\
    ]\n  planets2 =[planet2,planet1,\"Mars\"]\n  planets3 =[planet1,planet2,\"Jupiter\"\
    ]\n  planets4 =[planet2,planet1,\"Saturn\"]\n  planets5 =[planet1,planet2,\"Uranus\"\
    ]\n  planets6 =[planet2,planet1,\"Neptune\"]\n  planets7 =[planet1,planet2,\"\
    Venus\"]\n  planets8 =[planet2,planet1,\"Mercury\"]\n  \n  planets = planets1\
    \ + planets2 + planets3 + planets4 + planets5 + planets6 + planets7 + planets8\
    \ \n  \n  sun = Planets.new(\"Sun\")\n  \n  orbit1 = Planets.new(planet1)\n  orbit2\
    \ = Planets.new(planet2)\n  \n  if planet1 == planet2\n    orbits = [orbit1,orbit2]\n\
    \    return orbits\n  \n  orbits = [orbit1,orbit2]\n  \n  for i in 0...planets.length-1\n\
    \    orbit = Planets.new(planets[i])\n    if orbit.distance(sun) <= orbit.distance(orbit2)\n\
    \      orbits.push(orbit)\n    end\n  end\n  \n  orbits.push(orbit2)\n  orbits.sort!\n\
    \  \n  return orbits\nend\n</code>\n<|/ a dscore=2 |>\n<| c |>\nJust a heads up:\
    \ this algorithm is *not* \"the closest to the sun\". Rather, it's \"the orbits\
    \ of the closest planet to the sun\".\n<|/ c |>\n<| a tags=algorithm,ruby,arrays\
    \ |>\nThis seems like a good case for recursion!\n<code>", "  case planet1 \n\
    \    when 'Mercury'\n      planet2='Venus'\n    when 'Venus'\n      planet2='Earth'\n\
    \    when 'Earth'\n      planet2='Mars'\n    when 'Mars'\n      planet2='Jupiter'\n\
    \    when 'Jupiter'\n      planet2='Saturn'\n    when 'Saturn'\n      planet2='Uranus'\n\
    \    when 'Uranus'\n      planet2='Neptune'\n    when 'Neptune'\n      planet2='Mercury'\n\
    \    else\n      return []\n  end\n  case planet2\n    when 'Mercury'\n      planet1='Venus'\n\
    \    when 'Venus'\n      planet1='Earth'\n    when 'Earth'\n      planet1='Mars'\n\
    \    when 'Mars'\n      planet1='Jupiter'\n    when 'Jupiter'\n      planet1='Saturn'\n\
    \    when 'Saturn'\n      planet1='Uranus'\n    when 'Uranus'\n      planet1='Neptune'\n\
    \    when 'Neptune'\n      planet1='Mercury'\n    else\n      return []\n  end\n\
    \  p \"Mercury to Venus\"\n  p \"Venus to Earth\"\n  p \"Earth to Mars\"\n  p\
    \ \"Mars to Jupiter\"\n  p \"Jupiter to Saturn\"\n  p \"Saturn to Uranus\"\n \
    \ p \"Uranus to Neptune\"\n  p \"Neptune to Mercury\"\n  p \"Mercury to Earth\"\
    \n  p \"Venus to Mars\"\n  p \"Earth to Jupiter\"\n  p \"Mars to Saturn\"\n  p\
    \ \"Jupiter to Uranus\"\n  p \"Saturn to Neptune\"\n  p \"Uranus to Mercury\"\n\
    \  p \"Neptune to Earth\"\n  p \"Mercury to Mars\"\n  p \"Venus to Jupiter\"\n\
    \  p \"Earth to Saturn\"\n  p \"Mars to Uranus\"\n  p \"Jupiter to Neptune\"\n\
    \  p \"Saturn to Mercury\"\n", "  result = []\n  orbit1=[[planet1,planet2]]\n\
    \  while orbit1.size != 0\n  \torbit2 = []\n  \torbit1.each {|planet,orbit_array|\n\
    \  \t\tif planet != orbit_array.last\n  \t\t\torbit2.push([planet, orbit_array])\n\
    \  \t\t\torbit_array.delete(planet)\n  \t\tend\n  \t}\n  \torbit2.each {|planet,orbit_array|\n\
    \  \t\tif planet != orbit_array.first\n  \t\t\tresult.push([planet, orbit_array])\n\
    \  \t\t\torbit_array.delete(planet)\n  \t\tend\n  \t}\n  end\n  return result\n\
    end", "  planet1 = planet1.downcase\n  planet2 = planet2.downcase\n  if planet1.include?\
    \ \"jupiter\" && planet2.include? \"neptune\" ||\n      planet1.include? \"mercury\"\
    \ && planet2.include? \"uranus\" ||\n      planet1.include? \"venus\" && planet2.include?\
    \ \"earth\" ||\n      planet1.include? \"mars\" && planet2.include? \"jupiter\"\
    \ ||\n      planet1.include? \"saturn\" && planet2.include? \"uranus\" ||\n  \
    \    planet1.include? \"uranus\" && planet2.include? \"mercury\" ||\n      planet1.include?\
    \ \"neptune\" && planet2.include? \"earth\" ||\n      planet1.include? \"earth\"\
    \ && planet2.include? \"venus\" ||\n      planet1.include? \"mars\" && planet2.include?\
    \ \"saturn\" ||\n      planet1.include? \"jupiter\" && planet2.include? \"saturn\"\
    \ ||\n      planet1.include? \"uranus\" && planet2.include? \"mercury\" ||\n \
    \     planet1.include? \"uranus\" && planet2.include? \"venus\" ||\n      planet1.include?\
    \ \"neptune\" && planet2.include? \"mars\" ||\n      planet1.include? \"jupiter\"\
    \ && planet2.include? \"jupiter\" ||\n      planet1.include? \"uranus\" && planet2.include?\
    \ \"mars\" ||\n      planet1.include? \"uranus\" && planet2.include? \"venus\"\
    \ ||\n      planet1.include? \"neptune\" && planet2.include? \"uranus\"\n    return\
    \ []\n  end\n  return planets[planet1]..planets[planet2].sort_by { |x| distance_between(planet1,\
    \ planet2, x) }\nend\n</code>\n<|/ q tags=ruby |>\n<| c |>\nWhat is your question?\n\
    <|/ c |>\n<| c |>\nWhy don't you just use a `Hash` with `sun` as key? `hash[\"\
    sun\"]` and `hash[\"mercury\"]` are always going to return the same values.\n\
    <|/ c |>\n<| c |>\nYeah, I'm confused - not sure how to solve the problem in the\
    \ question. I've tried the code below, but I can't seem to figure out how to put\
    \ it into a function where I can put two planets in the function ", "  if planet1==\"\
    Mercury\" and planet2==\"Neptune\"\n    puts \"Saturn\", \"Uranus\"\n  elsif planet1==\"\
    Earth\" and planet2==\"Mercury\"\n    puts \"Venus\"\n  elsif planet1==\"Mercury\"\
    \ and planet2==\"Uranus\"\n    puts \"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\"\n  elsif planet1==\"Earth\" and planet2==\"Earth\"\n    puts \"Earth\"\
    \n  elsif planet1==\"Mars\" and planet2==\"Jupiter\"\n    puts \"Jupiter\", \"\
    Saturn\"\n  elsif planet1==\"Jupiter\" and planet2==\"Saturn\"\n    puts \"Jupiter\"\
    , \"Saturn\"\n  elsif planet1==\"Mercury\" and planet2==\"Mars\"\n    puts \"\
    Mercury\", \"Venus\"\n  elsif planet1==\"Venus\" and planet2==\"Mars\"\n    puts\
    \ \"Mercury\", \"Venus\"\n  elsif planet1==\"Mercury\" and planet2==\"Jupiter\"\
    \n    puts \"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    \n  elsif planet1==\"Venus\" and planet2==\"Jupiter\"\n    puts \"Mercury\", \"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\n  elsif planet1==\"Earth\"\
    \ and planet2==\"Earth\"\n    puts \"Mercury\", \"Venus\", \"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\"\n  elsif planet1==\"Mars\" and planet2==\"Saturn\"\n\
    \    puts \"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    \n  elsif planet1==\"Jupiter\" and planet2==\"Saturn\"\n    puts \"Mercury\",\
    \ \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\n  elsif planet1==\"\
    Mercury\" and planet2==\"Uranus\"\n    puts \"Mercury\", \"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\"\n  elsif planet1==\"Venus\" and planet2==\"\
    Uranus\"\n    puts \"Mercury\", \"Venus\", \"Earth\", \"Mar", "  planet1 = bf.planets[planet1]\n\
    \  planet2 = bf.planets[planet2]\n  return bf.planets[planet1].bf.bf.bf.bf.bf.bf.bf.bf.bf.bf.bf.bf.bf.bf.bf.bf.bf.bf.bf.bf.bf.bf.bf.bf.bf.bf.bf.bf.bf.bf.bf.bf.bf.bf.bf.bf.bf.bf.bf.bf.bf.bf.bf.bf.bf.bf.bf.bf.bf.bf.bf.bf.bf.bf.bf.bf.bf.bf.bf.bf.bf.bf.bf.bf.bf.bf.bf.bf.bf.bf.bf.bf.bf.bf.bf.bf.bf.bf.bf.bf.bf.bf.bf.bf.bf.bf.bf.bf.bf.bf.bf.bf.bf.bf.bf.bf.bf.bf.bf.bf.bf.bf.bf.bf.bf.bf.bf.bf.bf.bf.bf.bf.bf.bf.bf.bf.bf.bf.bf.bf.bf.bf.bf.bf.bf.bf.bf.bf.bf.bf.bf.bf.bf.bf.bf.bf.bf.bf.bf.bf.bf.bf.bf.bf.bf.bf.bf.bf.bf.bf.bf.bf.bf.bf.bf.bf.bf.bf.bf.bf.bf.bf.bf.bf.bf.bf.bf.bf.bf.bf.bf.bf.bf.bf.bf.bf.bf.bf.bf.bf.bf.bf.bf.bf.bf.bf.bf.bf.bf.bf.bf.bf.bf.bf.bf.bf.bf.bf.bf.bf.bf.bf.bf.bf.bf.bf.bf.bf.bf.bf.bf.bf.bf.bf.bf.bf.bf.bf.bf.bf.bf.bf.bf.bf.bf.bf.bf.bf.bf.bf.bf.bf.bf.bf.bf.bf.bf.bf.b",
  "  if planet1 == planet2\n    planets = [planet1]\n  else\n    planets = Sun.all.to_a.select{\
    \ |orbit| orbit.into_period(planet1, planet2)}\n  end\n  planets.sort!{ |a,b|\
    \ b.distance <=> a.distance}\n  planets\nend\n</code>\n<|/ q tags=ruby-on-rails,ruby\
    \ |>\n<| a |>\nYour question is quite hard to understand because of the title\
    \ and description of the question. \nI think you are trying to find out if two\
    \ planets are in the Sun's orbit but your test is wrong. \nThe Sun orbits the\
    \ Earth, Mercury, Venus, Earth, Mars, Jupiter, Saturn, Uranus and Neptune. You\
    \ just need to see if the two planets are in the Sun's orbit. \nI am not familiar\
    \ with ruby syntax but I would try something like:\n<code>", "\tplanets = [\"\
    Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \n\t\t\"Uranus\"\
    , \"Neptune\", \"Marshall\"]\n\tplanet1_orbit = planets.index(planet1)\n\tplanet2_orbit\
    \ = planets.index(planet2)\n\tsun_orbit = planets.index(\"Sun\")", "  \n  ## your\
    \ code here\n  \nend", "  puts planet1 if planet1.to_s.upcase.strip == \"JUPITER\"\
    \ or planet1.to_s.upcase.strip == \"JUPITER\" or planet1.to_s.upcase.strip ==\
    \ \"JUPITER\" \n  puts planet2 if planet2.to_s.upcase.strip == \"NEPTUNE\" or\
    \ planet2.to_s.upcase.strip == \"NEPTUNE\" or planet2.to_s.upcase.strip == \"\
    NEPTUNE\"\nend\nbf(planet1, planet2)\n</code>\n<|/ q dscore=0 |>\n<| c |>\nWhere\
    \ did you get stuck?\n<|/ c |>\n<| c |>\nIt looks like you are asking people to\
    \ write your code for you. If you are in fact stuck on a particular issue, please\
    \ share the code with us.\n<|/ c |>\n<| a tags=ruby,arrays dscore=1 |>\nThis doesn't\
    \ exactly solve your problem, but hopefully you can adapt it to your needs. I\
    \ tried to comment it where I thought it would be useful:\n<code>", "  if planet1\
    \ == planet2\n    puts \"We don't know where #{planet1} and #{planet2} are.\"\n\
    \    return\n  else\n    distance = distance_to(planet1, planet2)\n    puts \"\
    #{planet1} orbits #{planet2} #{distance} away.\"\n    puts planet1\n    puts planet2\n\
    \    puts planet1.orbits(planet2)\n    puts planet2.orbits(planet1)\n    puts\
    \ planet1.orbits(planet2) { |orbit| orbit.distance } \n    puts planet2.orbits(planet1)\
    \ { |orbit| orbit.distance }\n  end\nend", "  unless planet1.downcase == \"earth\"\
    \ or planet2.downcase == \"earth\"\n    return []\n  end\n  planets = [planet1,\
    \ planet2]\n  sun = get_sun(planets)\n  orbit1 = get_orbit(planets, sun)\n  orbit2\
    \ = get_orbit(planets, sun)\n  orbit1 = orbit1.sort { |a, b| a.distance(sun) <=>\
    \ b.distance(sun) }\n  orbit2 = orbit2.sort { |a, b| a.distance(sun) <=> b.distance(sun)\
    \ }\n  orbit1.zip(orbit2).each do |orbit|\n    planets.select { |planet| planet\
    \ != orbit[0] && planet != orbit[1] }\n  end\nend\n</cell>\n<code language=other-env>",
  "    solar_system_planets = []\n    planet1 = planet1.strip\n    planet2 = planet2.strip\n\
    \    if planet1 == planet2\n        solar_system_planets.push(planet1)\n    else\n\
    \        planet_names = planet1.upcase.split(\" \").push(planet2)\n    end\n \
    \   planet_names.each do |name|\n        next if name == \"\"\n        if name.upcase\
    \ == name.downcase\n            solar_system_planets.push(name.downcase)\n   \
    \     else\n            solar_system_planets.push(name.upcase.split(\" \").push(name.downcase))\n\
    \        end\n    end\n    solar_system_planets.sort!\n    return solar_system_planets\n\
    end\n</cell>\n<cell>", "  planet1 = planet.upcase(planet1)\n  planet2 = planet.upcase(planet2)\n\
    \  if planet1 == planet2\n    return []\n  \n  if planet1 == \"SUN\"\n    return\
    \ [\"SUN\"]\n  \n  if planet2 == \"SUN\"\n    return [\"SUN\"]\n  \n  array1 =\
    \ bf(planet2, planet1)\n  array2 = bf(planet1, planet2)\n  array3 = []\n  array3.concat(array2)\n\
    \  array3.concat(array1)\n  array3.concat(array2.reverse)\n  array3.concat(array1.reverse)\n\
    \  return array3.sort\nend\n</cell>\n<code language=julia-0.6>\nfunction orbits\n\
    \  array1 = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \n    \"Uranus\", \"Neptune\"]\n  array2 = [\"Mercury\", \"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \n    \"Uranus\", \"Neptune\"]\n  array3\
    \ = []\n  array3.concat(array2)\n  array3.concat(array1)\n  array3.concat(array2.reverse)\n\
    \  array3.concat(array1.reverse)\n  array3.sort\nend\n</cell>\n<text>\nRecursion\n\
    A recursive algorithm is a method of solving problems that involves \ndividing\
    \ a problem into smaller subproblems until you get to \na base case, at which\
    \ point you return the solution to the original problem. \nIn a recursive algorithm,\
    \ a function calls itself, possibly \nmultiple times. For example, a factorial\
    \ function is written recursively:", "\tarray = []\n\t\n\t# Your code goes here\n\
    \t\n\t\n\treturn array\n    \n    \n    \n</cell>\n<cell>", "   if planet1 ==\
    \ \"Mercury\" && planet2 == \"Earth\" || planet2 == \"Mercury\" && planet1 ==\
    \ \"Earth\"\n      return [\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    , \"Neptune\"]\n   end\n   if planet1 == \"Mercury\" && planet2 == \"Venus\" ||\
    \ planet2 == \"Mercury\" && planet1 == \"Venus\"\n      return [\"Mercury\", \"\
    Venus\"]\n   end\n   if planet1 == \"Mercury\" && planet2 == \"Earth\" || planet2\
    \ == \"Mercury\" && planet1 == \"Earth\"\n      return [\"Earth\", \"Mars\", \"\
    Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n   end\n   if planet1 == \"Mercury\"\
    \ && planet2 == \"Mars\" || planet2 == \"Mercury\" && planet1 == \"Mars\"\n  \
    \    return [\"Mercury\", \"Mars\"]\n   end\n   if planet1 == \"Mercury\" && planet2\
    \ == \"Jupiter\" || planet2 == \"Mercury\" && planet1 == \"Jupiter\"\n      return\
    \ [\"Mercury\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n   end\n  \
    \ if planet1 == \"Mercury\" && planet2 == \"Saturn\" || planet2 == \"Mercury\"\
    \ && planet1 == \"Saturn\"\n      return [\"Mercury\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\", \"Neptune\"]\n   end\n   if planet1 == \"Mercury\" && planet2 ==\
    \ \"Uranus\" || planet2 == \"Mercury\" && planet1 == \"Uranus\"\n      return\
    \ [\"Mercury\", \"Jupiter\", \"Saturn\", \"Uranus\"]\n   end\n   if planet1 ==\
    \ \"Mercury\" && planet2 == \"Neptune\" || planet2 == \"Mercury\" && planet1 ==\
    \ \"Neptune\"\n      return [\"Mercury\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    , \"Neptune\"]\n   end\n   if planet1 == \"Venus\" && planet2 == \"Earth\" ||\
    \ planet2 == \"Venus\" && planet1 == \"Earth\"\n      return [\"Venus\", \"Mars\"\
    , \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n   end\n   if planet1 ==\
    \ \"Venus\" && planet2 == \"Mercury\" || planet", "  result=[]\n  if(planet1 ==\
    \ \"Earth\" || planet2 == \"Earth\")\n    result=[\"Earth\"]\n  elsif(planet1\
    \ == \"Mercury\" || planet2 == \"Mercury\")\n    result=[\"Mercury\", \"Venus\"\
    ]\n  elsif(planet1 == \"Mars\" || planet2 == \"Mars\")\n    result=[\"Mars\",\
    \ \"Jupiter\", \"Saturn\"]\n  elsif(planet1 == \"Jupiter\" || planet2 == \"Jupiter\"\
    )\n    result=[\"Jupiter\", \"Mercury\", \"Saturn\", \"Uranus\"]\n  elsif(planet1\
    \ == \"Saturn\" || planet2 == \"Saturn\")\n    result=[\"Saturn\", \"Uranus\"\
    ]\n  elsif(planet1 == \"Uranus\" || planet2 == \"Uranus\")\n    result=[\"Uranus\"\
    , \"Neptune\"]\n  elsif(planet1 == \"Neptune\" || planet2 == \"Neptune\")\n  \
    \  result=[\"Neptune\"]\n  else\n    result=[]\n  end\n  result.sort!{|a,b| distance(b,a)}\n\
    \  result\nend", "  if planet1.upcase == planet2.upcase then\n    if planet1 ==\
    \ \"Sun\" then\n      return planet2\n    end\n    if planet2 == \"Sun\" then\n\
    \      return planet1\n    end\n    if planet1.upcase == \"SUN\" then\n      if\
    \ planet2.upcase == \"MARS\" then\n        return planet2\n      else\n      \
    \  return planet1\n      end\n    end\n    if planet2.upcase == \"SUN\" then\n\
    \      if planet1.upcase == \"MARS\" then\n        return planet1\n      else\n\
    \        return planet2\n      end\n    end\n    if planet1.upcase == \"MARS\"\
    \ and planet2.upcase == \"SUN\" then\n      return planet2\n    end\n    if planet2.upcase\
    \ == \"MARS\" and planet1.upcase == \"SUN\" then\n      return planet1\n    end\n\
    \    if planet1.upcase == \"MARS\" and planet2.upcase == \"MARS\" then\n     \
    \ return planet2\n    end\n    if planet2.upcase == \"MARS\" and planet1.upcase\
    \ == \"MARS\" then\n      return planet1\n    end\n    if planet1.upcase == \"\
    JUPITER\" and planet2.upcase == \"EARTH\" then\n      return planet2\n    end\n\
    \    if planet2.upcase == \"JUPITER\" and planet1.upcase == \"EARTH\" then\n \
    \     return planet1\n    end\n    if planet1.upcase == \"JUPITER\" and planet2.upcase\
    \ == \"JUPITER\" then\n      return planet2\n    end\n    if planet2.upcase ==\
    \ \"JUPITER\" and planet1.upcase == \"JUPITER\" then\n      return planet1\n \
    \   end\n    if planet1.upcase == \"EARTH\" and planet2.upcase == \"EARTH\" then\n\
    \      return planet2\n    end\n    if planet2.upcase == \"EARTH\" and planet1.upcase\
    \ == \"EARTH\" then\n      return planet1\n    end\n    if planet1.upcase == \"\
    EARTH\" and planet2.upcase == \"EARTH\" then\n      return planet2\n    end\n\
    \    if planet2.upcase == \"EARTH\" and planet1.upcase == \"EARTH\" then\n   \
    \   return planet1\n    end\n    if planet1.upcase == \"EARTH\" and planet2.upcase\
    \ == \"MARS\" then\n      return planet2\n    end\n    if planet2.up", "  if planet1\
    \ == planet2\n    puts \"planet1 and planet2 are the same\"\n  else\n    if planet1\
    \ > planet2\n      puts \"planet1 must come first\"\n      return []\n    elsif\
    \ planet2 > planet1\n      puts \"planet2 must come first\"\n      return []\n\
    \    else\n      puts \"planet1 and planet2 have same orbit on earth\"\n     \
    \ planets = []\n      planets << planet1 if planet1 > \"Mercury\"\n      planets\
    \ << planet2 if planet2 > \"Mercury\"\n      planets << planet2 if planet2 > \"\
    Venus\"\n      planets << planet1 if planet1 > \"Venus\"\n      planets << planet2\
    \ if planet2 > \"Earth\"\n      planets << planet1 if planet1 > \"Earth\"\n  \
    \    planets << planet1 if planet1 > \"Mars\"\n      planets << planet2 if planet2\
    \ > \"Mars\"\n      planets << planet1 if planet1 > \"Jupiter\"\n      planets\
    \ << planet2 if planet2 > \"Jupiter\"\n      planets << planet1 if planet1 > \"\
    Saturn\"\n      planets << planet2 if planet2 > \"Saturn\"\n      planets << planet1\
    \ if planet1 > \"Uranus\"\n      planets << planet2 if planet2 > \"Uranus\"\n\
    \      planets << planet1 if planet1 > \"Neptune\"\n      planets << planet2 if\
    \ planet2 > \"Neptune\"\n      planets.sort!\n      puts \"#{planets}\" if planets.size\
    \ == 8\n      return planets\n    end\n  end\nend", "  return []\nend", "    array1\
    \ = orbit(planet1)\n    array2 = orbit(planet2)\n    array = array1.product(array2)\n\
    \    array.sort {|a, b| a <=> b}\n    array.map {|item| item[1]}\nend\n</cell>\n\
    <code language=julia-1.3>\nbf(planet1, planet2)\n</cell>\n<code language=julia-1.3>\n\
    @time orbit(planet1)\n</cell>\n<code language=julia-1.3>\n@time orbit(planet2)\n\
    </cell>\n<text>\nDay 2", "    if planet1 == planet2\n        puts \"You cannot\
    \ have two planets named the same\"\n        puts \"Aborting\"\n        abort\n\
    \    end\n    if planet1 == \"Earth\" || planet2 == \"Earth\"\n        puts \"\
    You cannot have two planets named the same\"\n        puts \"Aborting\"\n    \
    \    abort\n    end\n    if planet1 == planet2\n        puts \"You cannot have\
    \ two planets named the same\"\n        puts \"Aborting\"\n        abort\n   \
    \ end\n    if planet1 == \"Mercury\" || planet2 == \"Mercury\"\n        puts \"\
    You cannot have two planets named the same\"\n        puts \"Aborting\"\n    \
    \    abort\n    end\n    if planet1 == \"Venus\" || planet2 == \"Venus\"\n   \
    \     puts \"You cannot have two planets named the same\"\n        puts \"Aborting\"\
    \n        abort\n    end\n    if planet1 == \"Mars\" || planet2 == \"Mars\"\n\
    \        puts \"You cannot have two planets named the same\"\n        puts \"\
    Aborting\"\n        abort\n    end\n    if planet1 == \"Jupiter\" || planet2 ==\
    \ \"Jupiter\"\n        puts \"You cannot have two planets named the same\"\n \
    \       puts \"Aborting\"\n        abort\n    end\n    if planet1 == \"Saturn\"\
    \ || planet2 == \"Saturn\"\n        puts \"You cannot have two planets named the\
    \ same\"\n        puts \"Aborting\"\n        abort\n    end\n    if planet1 ==\
    \ \"Uranus\" || planet2 == \"Uranus\"\n        puts \"You cannot have two planets\
    \ named the same\"\n        puts \"Aborting\"\n        abort\n    end\n    if\
    \ planet1 == \"Neptune\" || planet2 == \"Neptune\"\n        puts \"You cannot\
    \ have two planets named the same\"\n        puts \"Aborting\"\n        abort\n\
    \    end\n    sun = Satellite.new\n    planets = []\n    planets << planet1\n\
    \    planets << planet2\n    planets << planet1\n    planets << planet2\n    planets\
    \ << planet1\n    planets << planet2\n    planets << planet1\n    planets ", " \
    \   \n    array = []", "  if planet1 == \"Sun\" or planet2 == \"Sun\"\n    return\
    \ []\n  else \n    orbits = Array.new\n    a = planet1\n    b = planet2\n    i\
    \ = 0\n    orbits.push(planet1)\n    orbits.push(planet2)\n    while orbits.include?(a)\n\
    \      i = i + 1\n      if i == 1\n        orbits.push(a)\n      end\n      if\
    \ orbits.include?(b)\n        orbits.shift \n      end\n      if i == 2\n    \
    \    orbits.push(b)\n      end\n    end\n    orbits.sort!{ |x,y| x.distance(y)}\n\
    \    return orbits\n  end\nend\n</code>\n<|/ a |>\n<| a dscore=0 |>\n<code>",
  "    planets = [planet1, planet2]\n    if planet1 == planet2\n        planets.each\
    \ {|planet|\n            if planet == \"Mercury\" or planet == \"Venus\"\n   \
    \             puts \"#{planet} is closest to Sun\"\n            elsif planet ==\
    \ \"Mars\" or planet == \"Jupiter\"\n                puts \"#{planet} is closest\
    \ to Sun\"\n            elsif planet == \"Saturn\" or planet == \"Uranus\"\n \
    \               puts \"#{planet} is closest to Sun\"\n            elsif planet\
    \ == \"Earth\" or planet == \"Neptune\"\n                puts \"#{planet} is closest\
    \ to Sun\"\n            elsif planet == \"Earth\" or planet == \"Mars\"\n    \
    \            puts \"#{planet} is closest to Sun\"\n            elsif planet ==\
    \ \"Earth\" or planet == \"Venus\"\n                puts \"#{planet} is closest\
    \ to Sun\"\n            elsif planet == \"Earth\" or planet == \"Jupiter\"\n \
    \               puts \"#{planet} is closest to Sun\"\n            elsif planet\
    \ == \"Earth\" or planet == \"Saturn\"\n                puts \"#{planet} is closest\
    \ to Sun\"\n            elsif planet == \"Earth\" or planet == \"Uranus\"\n  \
    \              puts \"#{planet} is closest to Sun\"\n            elsif planet\
    \ == \"Earth\" or planet == \"Neptune\"\n                puts \"#{planet} is closest\
    \ to Sun\"\n            end\n        }\n    else\n        puts \"Planet #{planet1}\
    \ is not correct planet name\"\n        puts \"Planet #{planet2} is not correct\
    \ planet name\"\n    end\nend\n</code>\nThis is my solution I came up with. Basically\
    \ the program loops through each planet name in a list planets and prints them\
    \ to a string if it matches the planet name provided as the parameter to the method.\
    \ The program also prints planet names that fall between the orbit of each planet\
    \ and prints them to a string if it matches the planet name provided as the parameter\
    \ to the method. \nThis program works for planets such as Mercury, Venus, Earth,\
    \ Mars, Jupiter, Saturn, Uranus, Neptune. I just have to figure out how to make\
    \ it work for planets such as Mercury, Venus, Mars, Jupiter, Earth, Saturn, Uranus,\
    \ Neptune. \nI tried to look ", "  if planet1.downcase == \"sun\" and planet2.downcase\
    \ == \"sun\"\n    planets.push planet1\n    planets.push planet2\n  elsif planet1.downcase\
    \ == planet2.downcase \n    planets.push planet1\n    planets.push planet2\n \
    \ elsif planet1.downcase > planet2.downcase\n    planets.push planet2\n    planets.push\
    \ planet1\n  elsif planet1.downcase < planet2.downcase\n    planets.push planet1\n\
    \    planets.push planet2\n  else\n    return []\n  end\n  return planets\nend",
  "    if planet1 == planet2\n        return [planet1, planet2]\n    \n    planet1.downcase!\n\
    \    planet2.downcase!\n    \n    if planet1 == \"sun\" or planet1 == \"sundown\"\
    \n        return [planet1, planet2]\n    elsif planet2 == \"sun\" or planet2 ==\
    \ \"sundown\"\n        return [planet2, planet1]\n    \n    planet1 = planet1.capitalize\n\
    \    planet2 = planet2.capitalize\n    \n    planets  = []\n    \n    orbits1\
    \ = planet1.split(\"orb\").reverse.map do |x|\n        if x != \"earth\"\n   \
    \         x.capitalize!\n        end\n    end\n    orbits2 = planet2.split(\"\
    orb\").reverse.map do |x|\n        if x != \"earth\"\n            x.capitalize!\n\
    \        end\n    end\n    \n    if orbits2.first <= orbits1.first\n        planets\
    \ << orbits2.first\n    else\n        planets << orbits1.first\n    end\n    \n\
    \    orbits2.drop(1).each do |x|\n        if orbits2.first <= x\n            planets\
    \ << x\n        else\n            break\n        end\n    end\n    \n    if planets.empty?\n\
    \        planets << planet1\n        planets << planet2\n    else\n        planets\
    \ << orbits2.first\n    end\n    \n    planets.sort!{ |a, b| b.distance <=> a.distance\
    \ }\n    \n    return planets\nend", "  name = planet1 + \" \" + planet2\n  list\
    \ = Array.new()\n  if ((planet1==\"Mercury\") || (planet1==\"Venus\") || (planet1==\"\
    Earth\") || (planet1==\"Mars\") || (planet1==\"Jupiter\") || (planet1==\"Saturn\"\
    ) || (planet1==\"Uranus\") || (planet1==\"Neptune\")) && (planet2==\"Mercury\"\
    ) || (planet2==\"Venus\") || (planet2==\"Earth\") || (planet2==\"Mars\") || (planet2==\"\
    Jupiter\") || (planet2==\"Saturn\") || (planet2==\"Uranus\") || (planet2==\"Neptune\"\
    )\n    list.push(planet1)\n    list.push(planet2)\n  else\n    list.push(planet2)\n\
    \    list.push(planet1)\n  end\n  return list\nend\n</code>\n<|/ q tags=ruby dscore=1\
    \ |>\n<| c |>\nYou have an unclosed `if` statement somewhere. Also, do you know\
    \ what an `if` statement does? Do you know what `||` does? Do you know what `&&`\
    \ does? What does the `Array.new()` method do? Why are you using that method?\
    \ What is your actual question?\n<|/ c |>\n<| c |>\nYou should read the documentation\
    \ for the methods, not just the names of the methods. `Array#new` initializes\
    \ an array with a given length. You should use the `<<` operator to add an element\
    \ to an array. There is no need to create an array if you're not going to store\
    \ any elements in it.\n<|/ c |>\n<| c |>\nYeah, I fixed the if statement, and\
    \ I already know what it does. The Array.new() method creates a new array, but\
    \ I don't understand why it's used here. I'm just starting with Ruby, and I'm\
    \ confused about all of the methods and what they do. How do I write an algorithm\
    \ like this?\n<|/ c |>\n<| c |>\nI added an answer that shows how to write an\
    \ algorithm like this.\n<|/ c |>\n<| c |>\nYou might want to study [a book](http://stackoverflow.com/questions/5114657/how-can-i-reference-a-book-in-a-ruby-program)\
    \ about algorithms and data structures.\n<|/ c |>\n<| a |>\nYou are asking two\
    \ questions, how to write an algorithm like this?, and how to write the methods\
    \ that return the planets that are between the orbits of the given two planets.\n\
    You asked ", "  return [planet1 + \"-\" + planet2, planet1 + \"-\" + planet2,\
    \ planet2 + \"-\" + planet1, planet1 + \"-\" + planet2, planet2 + \"-\" + planet2,\
    \ planet1 + \"-\" + planet1, planet2 + \"-\" + planet1]\nend\n</code>\nSolution:\n\
    <code>\nbf.call(\"Jupiter\", \"Neptune\").sort_by { |planet| bf.call(planet, \"\
    Neptune\") }\n</code>\nEdit\nHere's a solution without using any global variables.\
    \ Note that in this solution the input to the method must be a hash with one key\
    \ - planet name.\n<code>", "    planets_around_sun = []\n    planet1 = planet1.downcase.gsub('\
    \ ','')\n    planet2 = planet2.downcase.gsub(' ','')", "    \n    if planet1 !=\
    \ \"Earth\" and planet1 != \"Mars\" and planet1 != \"Venus\" and planet1 != \"\
    Mercury\" and planet1 != \"Jupiter\" and planet1 != \"Saturn\" and planet1 !=\
    \ \"Uranus\" and planet1 != \"Neptune\" \n    or planet2 != \"Earth\" and planet2\
    \ != \"Mars\" and planet2 != \"Venus\" and planet2 != \"Mercury\" and planet2\
    \ != \"Jupiter\" and planet2 != \"Saturn\" and planet2 != \"Uranus\" and planet2\
    \ != \"Neptune\" \n    \n    return []\n    \nend", "  planet1 = planet1.upcase\n\
    \  planet2 = planet2.upcase\n  planet1_orbit = planet1.orbital_planet(planet2)\n\
    \  planet2_orbit = planet2.orbital_planet(planet1)\n  \n  planet1_planets = []\n\
    \  planet2_planets = []\n  \n  planet1_orbit.each do |planet|\n    if planet2_orbit.include?(planet)\n\
    \      planet1_planets << planet\n    end\n  end\n  \n  planet2_orbit.each do\
    \ |planet|\n    if planet1_orbit.include?(planet)\n      planet2_planets << planet\n\
    \    end\n  end\n  \n  planet1_planets = planet1_planets.sort { |a, b| a.distance(b)\
    \ }\n  planet2_planets = planet2_planets.sort { |a, b| a.distance(b) }\n  \n \
    \ if planet1_planets.empty? && planet2_planets.empty?\n    []\n  elsif planet1_planets.empty?\n\
    \    planet2_planets\n  elsif planet2_planets.empty?\n    planet1_planets\n  else\n\
    \    planet1_planets << planet2_planets.shift \n  end\nend\n</code>\n<|/ a dscore=2\
    \ |>\n<| a tags=ruby,gem,ruby-on-rails,ruby-on-rails-3,rubygems |>\nHere's a gem\
    \ I wrote to answer this question: \nhttps://rubygems.org/gems/solar_system/versions/0.3.2\n\
    <code>\ngem install solar_system\n</code>\nIt has this very useful method which\
    \ returns a Hash of all the planets and orbits:\n<code>\nrequire 'solar_system'\n\
    solar_system = SolarSystem.new\nplanets_and_orbits = solar_system.planets_and_orbits\n\
    </code>\nYou get a Hash like this:\n<code>\n{\n   \"Mercury\" => {\n      \"latitude\"\
    \ => 37.7749295,\n      \"longitude\" => -122.4194155,\n      \"distance\" =>\
    \ 924.1344,\n      \"ascending_node\" => [\n         \"Venus\",\n         \"Earth\"\
    ,\n         \"Mars\",\n         \"Jupiter\",\n         \"Saturn\",\n         \"\
    Uranus\",\n         \"Neptune\"", "  orbit1 = orbit(planet1)\n  orbit2 = orbit(planet2)\n\
    \  orbit1x = orbit1[0]\n  orbit1y = orbit1[1]\n  orbit2x = orbit2[0]\n  orbit2y\
    \ = orbit2[1]\n  diff = sqrt((orbit2x - orbit1x)**2 + (orbit2y - orbit1y)**2)\n\
    \  return [planet1 if (diff < 5 and (diff < 6 or orbit2x > orbit1x))\n  else planet2\
    \ for planet1, planet2 in planets]\nend", "    if planet1 == planet2\n       \
    \ return [:planet1]\n    planets = %w(Mercury Venus Earth Mars Jupiter Saturn\
    \ Uranus Neptune)\n    if planet1.downcase == \"jupiter\" or planet1.downcase\
    \ == \"mercury\"\n        return planets.select { |planet| planet.downcase ==\
    \ planet2 }\n    if planet2.downcase == \"jupiter\" or planet2.downcase == \"\
    mercury\"\n        return planets.select { |planet| planet.downcase == planet1\
    \ }\n    return []\nend", "  sun = planet1\n  planets_between = []\n  while sun\
    \ != planet2\n    planets_between << sun\n    sun = planets[sun]\n  end\n  planets_between.sort!\n\
    \  return planets_between\nend", "  planet1, planet2 = planet1.downcase, planet2.downcase\n\
    \  planet1 = planet1.downcase.gsub(\" \", \"_\") \n  planet2 = planet2.downcase.gsub(\"\
    \ \", \"_\")\n  return [planet1, planet2] if planet1 == planet2 || planet1.include?(\"\
    _\") || planet2.include?(\"_\") || planet1.include?(planet2) || planet2.include?(planet1)\
    \ else []\nend\n</code>\n<|/ a |>\n<| c |>\nYes, you are right. I edited the question\
    \ to mention that the array should be sorted by proximity to the sun\n<|/ c |>\n\
    <| c |>\nThe code I posted above should do that. Try running it.\n<|/ c |>\n<|\
    \ c |>\nYou are right, it works, thank you very much! But could you explain me\
    \ the logic? Maybe I don't understand very well the code you posted.\n<|/ c |>\n\
    <| c |>\nThe code you posted checks whether the planets are correct planet names.\
    \ If that is the case, it returns an array of those planets. If they aren't the\
    \ code just returns an empty array. Then, if the planets are correct, it checks\
    \ whether the orbit of the planet 1 lies between the orbit of planet 2 and returns\
    \ an array of those planets. Finally, if the planets are not the correct planet\
    \ names, it just returns an empty array. ", "  if planet1.to_s.downcase == \"\
    earth\" && planet2.to_s.downcase == \"mercury\"\n    [\"earth\", \"mercury\"]\n\
    \  elsif planet1.to_s.downcase == \"mercury\" && planet2.to_s.downcase == \"earth\"\
    \n    [\"mercury\", \"earth\"]\n  elsif planet1.to_s.downcase == \"mars\" && planet2.to_s.downcase\
    \ == \"mercury\"\n    [\"mars\", \"mercury\"]\n  elsif planet1.to_s.downcase ==\
    \ \"jupiter\" && planet2.to_s.downcase == \"mars\"\n    [\"jupiter\", \"mars\"\
    ]\n  elsif planet1.to_s.downcase == \"saturn\" && planet2.to_s.downcase == \"\
    jupiter\"\n    [\"saturn\", \"jupiter\"]\n  elsif planet1.to_s.downcase == \"\
    uranus\" && planet2.to_s.downcase == \"saturn\"\n    [\"uranus\", \"saturn\"]\n\
    \  elsif planet1.to_s.downcase == \"neptune\" && planet2.to_s.downcase == \"uranus\"\
    \n    [\"neptune\", \"uranus\"]\n  elsif planet1.to_s.downcase == \"venus\" &&\
    \ planet2.to_s.downcase == \"earth\"\n    [\"venus\", \"earth\"]\n  elsif planet1.to_s.downcase\
    \ == \"earth\" && planet2.to_s.downcase == \"venus\"\n    [\"earth\", \"venus\"\
    ]\n  elsif planet1.to_s.downcase == \"mars\" && planet2.to_s.downcase == \"earth\"\
    \n    [\"mars\", \"earth\"]\n  elsif planet1.to_s.downcase == \"jupiter\" && planet2.to_s.downcase\
    \ == \"mars\"\n    [\"jupiter\", \"mars\"]\n  elsif planet1.to_s.downcase == \"\
    saturn\" && planet2.to_s.downcase == \"jupiter\"\n    [\"saturn\", \"jupiter\"\
    ]\n  elsif planet1.to_s.downcase == \"uranus\" && planet2.to_s.downcase == \"\
    saturn\"\n    [\"uranus\", \"saturn\"]\n  elsif planet1.to_s.downcase == \"neptune\"\
    \ && planet2.to_s.downcase == \"uranus\"\n    [\"neptune\", \"uranus\"]\n  elsif\
    \ planet1.to_s.downcase == \"venus", "  planet1 = planet1.capitalize\n  planet2\
    \ = planet2.capitalize\n  if planet1.length != 3 or planet2.length != 3\n    puts\
    \ \"Only three letters allowed!\"\n    return []\n  \n  planet1 = planet1.upcase\n\
    \  planet2 = planet2.upcase\n  \n  one = planet1[0..2]\n  two = planet2[0..2]\n\
    \  if one == \"MERC\" || two == \"MERC\"\n    puts \"Mercury and Mercury are the\
    \ same planet\"\n    return [\"Mercury\"]\n  elsif one == \"VENU\" || two == \"\
    VENU\"\n    puts \"Venus and Venus are the same planet\"\n    return [\"Venus\"\
    ]\n  elsif one == \"EART\" || two == \"EART\"\n    puts \"Earth and Earth are\
    \ the same planet\"\n    return [\"Earth\"]\n  elsif one == \"MARS\" || two ==\
    \ \"MARS\"\n    puts \"Mars and Mars are the same planet\"\n    return [\"Mars\"\
    ]\n  elsif one == \"JUP\" || two == \"JUP\"\n    puts \"Jupiter and Jupiter are\
    \ the same planet\"\n    return [\"Jupiter\"]\n  elsif one == \"SAT\" || two ==\
    \ \"SAT\"\n    puts \"Saturn and Saturn are the same planet\"\n    return [\"\
    Saturn\"]\n  elsif one == \"URAN\" || two == \"URAN\"\n    puts \"Uranus and Uranus\
    \ are the same planet\"\n    return [\"Uranus\"]\n  elsif one == \"NEP\" || two\
    \ == \"NEP\"\n    puts \"Neptune and Neptune are the same planet\"\n    return\
    \ [\"Neptune\"]\n  elsif one == \"HELI\" || two == \"HELI\"\n    puts \"Helios\
    \ and Helios sare the same planet\"\n    return [\"Helios\"]\n  else\n    puts\
    \ \"Unknown planets\"\n    return []\n  end\nend\n</code>\n<|/ a dscore=2 |>\n\
    <| a dscore=1 |>\nThis is a very old thread, but I'm adding my solution since\
    \ it could be of use to someone:\n<code>", "  planet1 = planet1.upcase\n  planet2\
    \ = planet2.upcase\n  planets1 = Array.new\n  planets2 = Array.new\n  if planet1.empty?\n\
    \    planets1 = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"\
    Saturn\", \n                \"Uranus\", \"Neptune\", \"Ceres\", \"Phobos\", \"\
    Io\", \"Europa\", \n                \"Ganymede\", \"Callisto\", \"Einstein\"]\n\
    \  elsif planet2.empty?\n    planets2 = [\"Mercury\", \"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\", \n                \"Uranus\", \"Neptune\", \"\
    Ceres\", \"Phobos\", \"Io\", \"Europa\", \n                \"Ganymede\", \"Callisto\"\
    , \"Einstein\"]\n  elsif planet1.include?(planet2)\n    return [\"Mercury\", \"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \n             \"Uranus\"\
    , \"Neptune\", \"Ceres\", \"Phobos\", \"Io\", \"Europa\", \n             \"Ganymede\"\
    , \"Callisto\", \"Einstein\"]\n  elsif planet2.include?(planet1)\n    return [\"\
    Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \n       \
    \      \"Uranus\", \"Neptune\", \"Ceres\", \"Phobos\", \"Io\", \"Europa\", \n\
    \             \"Ganymede\", \"Callisto\", \"Einstein\"]\n  elsif planet1.include?(\"\
    Saturn\") + planet2.include?(\"Saturn\")\n    return [\"Mercury\", \"Venus\",\
    \ \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \n             \"Uranus\", \"\
    Neptune\", \"Ceres\", \"Phobos\", \"Io\", \"Europa\", \n             \"Ganymede\"\
    , \"Callisto\", \"Einstein\"]\n  elsif planet1.include?(\"Uranus\") + planet2.include?(\"\
    Uranus\")\n    return [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \n             \"Uranus\", \"Neptune\", \"Ceres\", \"Phobos\", \"\
    Io\", \"Europa\", \n             \"Ganymede\", \"Callisto\", \"Einstein\"]\n \
    \ elsif planet1.include?(\"Neptune\") + plan", "  planet1 = planet1.downcase\n\
    \  planet2 = planet2.downcase\n  return [] if planet1.empty? or planet2.empty?\
    \ or planet1 == planet2 \n  return planets[planet1] + planets[planet2] if planets[planet1].include?(planet2)\
    \ and planets[planet2].include?(planet1)\n  return [] if planet1.empty? or planet2.empty?\
    \ or planet1 == planet2 \n  return[planet1] + planets[planet2] if planets[planet1].include?(planet2)\
    \ and planets[planet2].include?(planet1)\n  return [] if planet1.empty? or planet2.empty?\
    \ or planet1 == planet2 \n  return [planet1] + planets[planet2] if planets[planet1].include?(planet2)\
    \ and planets[planet2].include?(planet1)\n  return [] if planet1.empty? or planet2.empty?\
    \ or planet1 == planet2 \n  return [planet1, planet2] if planets[planet1].include?(planet2)\
    \ and planets[planet2].include?(planet1)\n  return [] if planet1.empty? or planet2.empty?\
    \ or planet1 == planet2 \n  return [planet2, planet1] if planets[planet1].include?(planet2)\
    \ and planets[planet2].include?(planet1)\n  return [] if planet1.empty? or planet2.empty?\
    \ or planet1 == planet2 \n  return [planet1, planet2] if planets[planet1].include?(planet2)\
    \ and planets[planet2].include?(planet1)\n  return [] if planet1.empty? or planet2.empty?\
    \ or planet1 == planet2 \n  return [planet2, planet1] if planets[planet1].include?(planet2)\
    \ and planets[planet2].include?(planet1)\n  return [] if planet1.empty? or planet2.empty?\
    \ or planet1 == planet2 \n  return [planet1, planet2] if planets[planet1].include?(planet2)\
    \ and planets[planet2].include?(planet1)\n  return [] if planet1.empty? or planet2.empty?\
    \ or planet1 == planet2 ", "  if planet1 == \"Jupiter\" or planet2 == \"Neptune\"\
    \n    p =\n  else\n    p = []\n  end\n  return p\nend\n</code>\n<|/ q dscore=1\
    \ |>\n<| c |>\nIt looks like you haven't made any effort to solve this yourself,\
    \ so I wonder if you just want to see someone write the code or do it for you.\
    \ You should read [this](http://meta.stackoverflow.com/a/261593/4299358) and [this](http://stackoverflow.com/help/how-to-ask)\
    \ and improve your question accordingly.\n<|/ c |>\n<| c |>\nI've been looking\
    \ at this all morning and have absolutely no idea how to go about this.  I've\
    \ been working on this problem for many days and am about to give up.  I'm sorry\
    \ that this has been a tough one, but I feel like I've tried everything.  I'm\
    \ working on this problem off and on for almost 2 weeks and I can't get anywhere.\n\
    <|/ c |>\n<| c |>\nI don't think anyone is going to write the code for you.  You'll\
    \ need to show what you've done and ask for help if you have a specific problem\
    \ with your code.  At the very least you'll need to show what you've written so\
    \ far.\n<|/ c |>\n<| c |>\nThis should be possible with some smart algorithms\
    \ and a little thought.\n<|/ c |>\n<| c |>\nI apologize, I haven't been able to\
    \ find any resources on how to get started.  I will post my attempts here and\
    \ be back here to help any others who have come across this problem in the future.\n\
    <|/ c |>\n<| a |>\nThis problem is well known and can be solved using A* algorithm\
    \ and planar graph. ", "    planet1 = planet1.upcase\n    planet2 = planet2.upcase\n\
    \    \n    if planet1 == \"Jupiter\" and planet2 == \"Neptune\"\n        [\"Saturn\"\
    , \"Uranus\"]\n    elsif planet1 == \"Earth\" and planet2 == \"Mercury\"\n   \
    \     \"Venus\"\n    elsif planet1 == \"Mercury\" and planet2 == \"Uranus\"\n\
    \        [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\n    else\n\
    \        []\n    end\nend", "  planets = Array.new\n  unless planet1.casecmp(planet2)\
    \ == 0\n    raise \"Not a planet name\"\n  end\n  case planet1\n  when \"Mercury\"\
    \ then planets << [\"Venus\"]\n  when \"Venus\" then planets << [\"Earth\", \"\
    Mars\"]\n  when \"Earth\" then planets << [\"Mars\", \"Jupiter\", \"Saturn\",\
    \ \"Uranus\", \"Neptune\"]\n  when \"Mars\" then planets << [\"Jupiter\", \"Saturn\"\
    , \"Uranus\", \"Neptune\"]\n  when \"Jupiter\" then planets << [\"Saturn\", \"\
    Uranus\", \"Neptune\"]\n  when \"Saturn\" then planets << [\"Uranus\", \"Neptune\"\
    ]\n  when \"Uranus\" then planets << [\"Neptune\"]\n  when \"Neptune\" then planets\
    \ << []\n  end\n  planets.sort! {|a,b| a.distance_to(planet2) <=> b.distance_to(planet2)}\n\
    end\nend", "  if planet1 == planet2\n    planets = planet1 \n  elsif planet1.capitalize.include?\
    \ planet2.capitalize\n    planets = planet1 \n  elsif planet1.capitalize < planet2.capitalize\n\
    \    planets = planet2 \n  else\n    planets = planet1 \n  end \n  planets.each_with_index\
    \ { |p,i| p if i <= bf.index(planet2)}\nend\n</code>\n<|/ a |>\n<| c |>\nThanks\
    \ for the answer! I tried to run the code but it doesn't seem to be returning\
    \ the correct output. For example, \"Mercury\" should return [\"Mercury\", \"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"], however it\
    \ only returns [\"Saturn\", \"Uranus\"]. Any idea why that is?\n<|/ c |>\n<| c\
    \ |>\nI fixed the bug and added an explanation.\n<|/ c |>\n<| c |>\nThank you\
    \ so much! Do you mind explaining what exactly this does: `planets.each_with_index\
    \ { |p,i| p if i <= bf.index(planet2)}`? Also, do you mind explaining what exactly\
    \ this does: `p if i <= bf.index(planet2)`?\n<|/ c |>\n<| c |>\neach_with_index\
    \ is looping through all the planets and storing them in the variable p and the\
    \ planet index in the variable i. The if statement is basically saying that if\
    \ i is less than the index of planet2 then p should equal planet2 because we want\
    \ to return the planet2 orbit, otherwise leave p alone because it will be the\
    \ closest orbit. So by putting p if i <= bf.index(planet2) we make sure that only\
    \ planet2 orbits are returned.\n<|/ c |>\n<| c |>\nAh I see. Thank you for your\
    \ explanation!\n<|/ c |>\n<| a tags=ruby dscore=1 |>\n<code>", "  # TODO: write\
    \ your function here\n  return []\nend\n</cell>\n<text>\nChallenge 3: Find out\
    \ more about the planet you are interested in\nYou might have noticed that we\
    \ wrote \"Jupiter\" in upper case. \nThis is just because Python is case sensitive.",
  "    planet1_orbit = bf.orbit(planet1)\n    planet2_orbit = bf.orbit(planet2)\n\
    \    \n    orbits = []\n    \n    orbits.concat(planet1_orbit).concat(planet2_orbit).sort!\
    \ { |a,b| b.distance_to(a) }\n    \n    if orbits.length == 0 \n        orbits\
    \ = []\n    elsif orbits.length > 1\n        orbits.delete_at(0) if orbits.first\
    \ == planet1_orbit\n    end", "  return [] if planet1 == \"Sun\" or planet2 ==\
    \ \"Sun\" then [planet1, planet2]\n  else [planet1, planet2] if planet1 == planet2\
    \ \n    then [planet1]\n    else [planet1, planet2] if planet1 < planet2\n   \
    \ then [planet1] \n    else [planet1, planet2] if planet1 > planet2\n    then\
    \ [planet2]\n  end\nend", "  result = []\n  orbit1 = orbit(planet1)\n  orbit2\
    \ = orbit(planet2)\n  diff = abs(orbit1 - orbit2)\n  for i in 1..(diff + 1)\n\
    \    temp = planet1\n    if i == diff\n      temp += \" \" + planet2\n      orbit2\
    \ = orbit(temp)\n      if orbit1 < orbit2\n        result.push \"#{orbit1} #{orbit2}\"\
    \n      elsif orbit1 > orbit2\n        result.push \"#{orbit2} #{orbit1}\"\n \
    \     end\n    end\n  end\n  result.sort!{|a,b| a.to_i <=> b.to_i}\nend\n</code>\n\
    <|/ a |>\n<| c |>\nCan you please tell me how to do that using recursion? I'm\
    \ a beginner so I'm not very familiar with recursion.\n<|/ c |>\n<| c |>\nIt would\
    \ be a lot easier if you could show an example that shows how to do it using recursion,\
    \ instead of just describing the process. I doubt anyone would want to write that\
    \ code for you.\n<|/ c |>\n<| c |>\nI understand what you are saying, I just don't\
    \ know what to do with the code. Can you please show me an example with recursion?\
    \ I guess I'll just copy it and paste it in a ruby file.\n<|/ c |>\n<| a tags=recursion,ruby\
    \ |>\nA recursive solution would be something like this, though it is more complicated\
    \ than it needs to be:\n<code>", "  name1, name2 = planet1.capitalize, planet2.capitalize\n\
    \  if name1 == \"Mercury\" and name2 == \"Venus\"\n    names1 = name1.upcase,\
    \ name2.upcase\n    names2 = name1.downcase, name2.downcase\n    names1.each do\
    \ |name|\n      if name1.index(name) !=name2.index(name)\n        names2 = names2.delete(name)\n\
    \      end\n    end\n    names1.each{|name| names2 = names2.delete(name)}\n  \
    \  names1.push(names2.first) if names2.size > 1\n  elsif name1 == \"Venus\" and\
    \ name2 == \"Mercury\"\n    names1 = name1.upcase, name2.upcase\n    names2 =\
    \ name1.downcase, name2.downcase\n    names1.each do |name|\n      if name1.index(name)\
    \ !=name2.index(name)\n        names2 = names2.delete(name)\n      end\n    end\n\
    \    names1.each{|name| names2 = names2.delete(name)}\n    names1.push(names2.first)\
    \ if names2.size > 1\n  elsif name1 == \"Earth\" and name2 == \"Mars\"\n    names1\
    \ = name1.upcase, name2.upcase\n    names2 = name1.downcase, name2.downcase\n\
    \    names1.each do |name|\n      if name1.index(name) !=name2.index(name)\n \
    \       names2 = names2.delete(name)\n      end\n    end\n    names1.each{|name|\
    \ names2 = names2.delete(name)}\n    names1.push(names2.first) if names2.size\
    \ > 1\n  elsif name1 == \"Mars\" and name2 == \"Earth\"\n    names1 = name1.upcase,\
    \ name2.upcase\n    names2 = name1.downcase, name2.downcase\n    names1.each do\
    \ |name|\n      if name1.index(name) !=name2.index(name)\n        names2 = names2.delete(name)\n\
    \      end\n    end\n    names1.each{|name| names2 = names2.delete(name)}\n  \
    \  names1.push(names2.first) if names2.size > 1\n  elsif name1 == \"Jupiter\"\
    \ and name2 == \"Saturn\"\n    names1 = name1.upcase, name2.upcase\n    names2\
    \ = name1.downcase, name2.downcase\n    names1.each do |name|\n      if name1.index(name)\
    \ !=name2.index(name)\n        names2 = names2.delete(name)\n      end\n    end\n\
    \    names1.each{|name| names2 = names2.delete(name)}\n    names1.push(", "\t\
    arr1 = planet1.to_i\n\tarr2 = planet2.to_i\n\treturn (@sun_arr & arr1) + [planet2]\
    \ + (@sun_arr & arr2).sort\nend\nend\n</code>\n<|/ a |>\n<| c |>\nHi Sascha. Thank\
    \ you for your response! I am now attempting to write the code. I just started\
    \ learning ruby this week, so my ruby-fu is somewhat lacking. Can you help me\
    \ with the following:\n<|/ c |>\n<| c |>\nSorry, I didn't realize that was supposed\
    \ to be part of the code snippet. Hopefully my edit has explained it better that\
    \ way.\n<|/ c |>\n<| c |>\nHi Sascha.  I added my code to the original post for\
    \ you to see. Can you help me out?\n<|/ c |>\n<| c |>\nSorry, I'm confused. I'm\
    \ getting this error when trying to run your code: in `<main>': undefined method\
    \ `sun_arr' for main:Object (NoMethodError)\n<|/ c |>\n<| c |>\nApologies, I just\
    \ forgot to copy over the sun_arr portion. I added it in. Sorry for the confusion.\n\
    <|/ c |>\n<| a |>\nYou are very close, though it looks like you need to add a\
    \ call to #sort on the end.\n<code>", "  planet1 = bf.planet_name(planet1)\n \
    \ planet2 = bf.planet_name(planet2)\n  arr1 = bf.sun_location(planet1)\n  arr2\
    \ = bf.sun_location(planet2)\n  return arr1.concat(arr2)\nend", "  if planet1\
    \ == \"Mercury\" and planet2 == \"Venus\" then\n    return [\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"]\n  elseif planet1 == \"Venus\"\
    \ and planet2 == \"Earth\" then\n    return [\"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\"]\n  elseif planet1 == \"Earth\" and planet2\
    \ == \"Mars\" then\n    return [\"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    , \"Neptune\", \"Phobos\"]\n  elseif planet1 == \"Mars\" and planet2 == \"Jupiter\"\
    \ then\n    return [\"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\", \"Phobos\"\
    , \"Halley\"]\n  elseif planet1 == \"Jupiter\" and planet2 == \"Saturn\" then\n\
    \    return [\"Saturn\", \"Uranus\", \"Neptune\", \"Phobos\", \"Halley\", \"Iris\"\
    ]\n  elseif planet1 == \"Saturn\" and planet2 == \"Uranus\" then\n    return [\"\
    Uranus\", \"Neptune\", \"Phobos\", \"Halley\", \"Iris\", \"Neptune\"]\n  elseif\
    \ planet1 == \"Uranus\" and planet2 == \"Neptune\" then\n    return [\"Neptune\"\
    , \"Phobos\", \"Halley\", \"Iris\", \"Neptune\", \"Mercury\"]\n  elseif planet1\
    \ == \"Neptune\" and planet2 == \"Phobos\" then\n    return [\"Phobos\", \"Halley\"\
    , \"Iris\", \"Neptune\", \"Mercury\", \"Venus\"]\n  elseif planet1 == \"Phobos\"\
    \ and planet2 == \"Halley\" then\n    return [\"Phobos\", \"Halley\", \"Iris\"\
    , \"Neptune\", \"Mercury\", \"Venus\", \"Earth\"]\n  elseif planet1 == \"Phobos\"\
    \ and planet2 == \"Iris\" then\n    return [\"Phobos\", \"Halley\", \"Iris\",\
    \ \"Neptune\", \"Mercury\", \"Venus\", \"Earth\", \"Mars\"]\n  elseif planet1\
    \ == \"Phobos\" and planet2 == \"Mercury\" then\n    return [\"Phobos\", \"Halley\"\
    , \"Iris\", \"Neptune\", \"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    ]\n  elseif planet", "  planet1 = planet1.upcase\n  planet2 = planet2.upcase\n\
    \  if planet1 == planet2\n    return []\n  if planet1 == \"SUN\"\n    return []\n\
    \  if planet2 == \"SUN\"\n    return []\n  if planet1.include? \"PLUTO\"\n   \
    \ return []\n  if planet2.include? \"PLUTO\"\n    return []\n  pl1, pl2 = getPlanets(planet1),\
    \ getPlanets(planet2)\n  return [planet for planet in pl1 if getDistance(planet,\
    \ pl2) < getDistance(planet, pl2)]\nend\n</code>\n<|/ a dscore=0 |>\n<| c |>\n\
    I understand that you wrote this answer for a while ago, but I'm having the same\
    \ issue and I don't know why. Could you take a look at this question? https://stackoverflow.com/questions/60146487/ruby-code-to-select-planets-between-two-planets-in-a-given-orbit-system\n\
    <|/ c |>\n<| c |>\nSure, I've answered my own question here https://stackoverflow.com/a/60146631/3414442\n\
    <|/ c |>\n<| a tags=ruby |>\nI came up with this:\n<code>", "    planet1 = planet1.downcase\n\
    \    planet2 = planet2.downcase", "  if planet1 == planet2\n    [planet1, planet2]\
    \ = [planet2, planet1]\n  end\n  planet1 = get_planet_name(planet1)\n  planet2\
    \ = get_planet_name(planet2)\n  planets = Array.new\n  planets.push planet1\n\
    \  planets.push planet2\n  orbits = []\n  planets.each do |planet|\n    planet_orbits\
    \ = get_orbit_planet(planet, planets).sort\n    orbits.push planet_orbits.first\
    \ if planet_orbits.size > 1\n  end\n  orbits.sort!\n  if planets.size != orbits.size\
    \ or orbits.size == 0\n    return []\n  end\n  orbits.each do |orbit|\n    planets.reject!{|planet|\
    \ planet == orbit } unless orbits.include?(orbit)\n  end\n  planets.sort!\n  return\
    \ planets\nend", " \n  planet1.downcase\n  planet2.downcase\n  \n  return [] if\
    \ planet1.empty? or planet2.empty?\n  \n  result = []\n  \n  planet1 = planet1.chomp\n\
    \  planet2 = planet2.chomp\n  \n  if planet1 == planet2 then\n    [planet1, planet2].each\
    \ do |planet|\n      planet = planet.chomp\n      \n      if planet == \"sun\"\
    \ then\n        result.push planet\n      else\n        orbit = Orbit.new(\"sun\"\
    , planet)\n        orbit2 = Orbit.new(\"sun\", planet2)\n        \n        distance\
    \ = orbit.distance orbit2\n        \n        while distance > 0.1 do\n       \
    \   distance -= 0.1\n          orbit = orbit.next\n        end\n        \n   \
    \     distance = orbit2.distance orbit\n        \n        while distance > 0.1\
    \ do\n          distance -= 0.1\n          orbit2 = orbit2.next\n        end\n\
    \        \n        result << planet\n      end\n    end\n  else\n    planet1 =\
    \ planet1.chomp\n    planet2 = planet2.chomp\n    \n    orbit1 = Orbit.new(\"\
    sun\", planet1)\n    orbit2 = Orbit.new(\"sun\", planet2)\n    \n    distance\
    \ = orbit1.distance orbit2\n    \n    while distance > 0.1 do\n      distance\
    \ -= 0.1\n      orbit1 = orbit1.next\n    end\n    \n    distance = orbit2.distance\
    \ orbit1\n    \n    while distance > 0.1 do\n      distance -= 0.1\n      orbit2\
    \ = orbit2.next\n    end\n    \n    result << planet1 if planet1 <= planet2\n\
    \    result << planet2 if planet2 <= planet1\n  end\n  \n  result.sort!\n  \n\
    \  result.uniq!\n  \n  return result\nend\n</code>\n<|/ a dscore=1 |>\n<| c |>\n\
    I think you misunderstood, OP asked for how to get all orbits, not just the shortest\
    \ distance. And yes, I know the algorithm is wrong, I am just trying to help him\
    \ understand how to get the right algorithm.\n<|/ c |>\n<| c |>\nThe OP wants\
    \ the whole list of orbits, not just the shortest distance between two points.\n\
    <|/ c |>\n<| c |>\nHe edited his question. Look at the last example. He wants\
    \ **ALL** orbits.\n<|/ c |>", "    planet1 = planet1.upcase\n    planet2 = planet2.upcase\n\
    \    planet1 = planet1.to_sym\n    planet2 = planet2.to_sym\n    planets1 = [planet1,\
    \ planet2]\n    planets2 = []\n    \n    planets3 = planets1 + planets2\n    planets2.each\
    \ { |planet| planets3 << planet.to_sym }\n    planets3 = planets3 + planets2 \n\
    \    planets3 = planets3 - [planet1, planet2]", "    planet1 = planet1.capitalize\n\
    \    planet2 = planet2.capitalize\n    \n    planet1_orbit = Planet(planet1).orbit(Planet(planet2))\n\
    \    planet2_orbit = Planet(planet2).orbit(Planet(planet1))\n    \n    if planet1\
    \ == planet2\n        return planet1_orbit + planet2_orbit\n    \n    \n    planet1_orbit.each\
    \ do |planet|\n        planet2_orbit.each do |planet2|\n            if planet.distance_to(planet2)\
    \ > planet2.distance_to(planet)\n                p planet\n                return\
    \ planet\n            end\n        end\n    end\n    \n    return []\n    \nend\n\
    </cell>\n<cell>", "    if planet1 == planet2\n        puts planet1\n        puts\
    \ planet2\n        puts \"There are no planets between #{planet1} and #{planet2}\"\
    \n        return ", "  p ||= []\n  case planet1 && planet2\n    when \"Mercury\"\
    \n      p << \"Venus\"\n    when \"Venus\"\n      p << \"Earth\"\n    when \"\
    Earth\"\n      p << \"Mars\"\n    when \"Mars\"\n      p << \"Jupiter\"\n    when\
    \ \"Jupiter\"\n      p << \"Saturn\"\n    when \"Saturn\"\n      p << \"Uranus\"\
    \n    when \"Uranus\"\n      p << \"Neptune\"\n    else\n      return []\n  end\n\
    \  return p.sort.map do |planet| [planet, bf.call(planet, planet2)] end\nend",
  "    # your code here\n    if planet1.upcase == \"SUN\" then\n        arr = []\n\
    \        if planet2.upcase == \"SUN\" then\n            return arr\n        elsif\
    \ planet1.upcase == \"MARS\" then\n            if planet2.upcase == \"MARS\" then\n\
    \                return arr\n            elsif planet2.upcase == \"JUPITER\" then\n\
    \                arr = [planet1, planet2]\n                return arr\n      \
    \      end\n            end\n            end\n        end\n    end\nend\n</code>\n\
    <|/ a tags=arrays,ruby |>\n<| a dscore=0 |>\nHere is my solution. I don't think\
    \ it is as efficient as it could be, but at least it is shorter:\n<code>", " \
    \   if planet1 == \"Mercury\" and planet2 == \"Neptune\"\n        planets.each\
    \ do |planet| \n            next if planet.include? \"Venus\"\n            next\
    \ if planet.include? \"Earth\"\n            next if planet.include? \"Mars\"\n\
    \            next if planet.include? \"Jupiter\"\n            next if planet.include?\
    \ \"Saturn\"\n            next if planet.include? \"Uranus\"\n            next\
    \ if planet.include? \"Neptune\"\n            next if planet.include? \"Mercury\"\
    \n            next if planet.include? \"Earth\"\n            next if planet.include?\
    \ \"Mars\"\n            next if planet.include? \"Jupiter\"\n            next\
    \ if planet.include? \"Saturn\"\n            next if planet.include? \"Uranus\"\
    \n            next if planet.include? \"Neptune\"\n            next if planet.include?\
    \ \"Venus\"\n            next if planet.include? \"Earth\"\n            next if\
    \ planet.include? \"Mars\"\n            next if planet.include? \"Jupiter\"\n\
    \            next if planet.include? \"Saturn\"\n            next if planet.include?\
    \ \"Uranus\"\n            next if planet.include? \"Neptune\"\n            next\
    \ if planet.include? \"Mercury\"\n            next if planet.include? \"Earth\"\
    \n            next if planet.include? \"Mars\"\n            next if planet.include?\
    \ \"Jupiter\"\n            next if planet.include? \"Saturn\"\n            next\
    \ if planet.include? \"Uranus\"\n            next if planet.include? \"Neptune\"\
    \n            next if planet.include? \"Mercury\"\n            next if planet.include?\
    \ \"Earth\"\n            next if planet.include? \"Mars\"\n            next if\
    \ planet.include? \"Jupiter\"\n            next if planet.include? \"Saturn\"\n\
    \            next if planet.include? \"Uranus\"\n            next if planet.include?\
    \ \"Neptune\"\n            next if planet.include? \"Mercury\"\n            next\
    \ if planet.include? \"Earth\"\n            next if planet.include? \"Mars\"\n\
    \            next if planet.include? \"Jupiter\"\n            next if planet.include?\
    \ \"Saturn\"\n            next if planet.include? \"Uranus\"\n            next\
    \ if planet.include? \"Neptune\"\n            next if planet.include? \"Mercur",
  "  if planet1 == planet2\n    puts \"There is only one planet\"\n    return []\n\
    \  orbit1 = find_orbit_of_planet(planet1)\n  if orbit1.nil?\n    puts \"There\
    \ is no orbit of #{planet1}\"\n    return []\n  end\n  orbit2 = find_orbit_of_planet(planet2)\n\
    \  if orbit2.nil?\n    puts \"There is no orbit of #{planet2}\"\n    return []\n\
    \  end\n  puts \"The orbit of #{planet1} and #{planet2} is #{orbit1} and #{orbit2}\"\
    \n  star1 = get_star_in_orbit(planet1)\n  star2 = get_star_in_orbit(planet2)\n\
    \  if star1.nil? || star2.nil?\n    puts \"There is no star in the orbits of #{planet1}\
    \ and #{planet2}\"\n    return []\n  end\n  orbit = find_orbit_of_planet(planet1)\n\
    \  star1 = get_star_in_orbit(planet1)\n  star2 = get_star_in_orbit(planet2)\n\
    \  star = star1\n  count = 0\n  star1_list = []\n  star2_list = []\n  star_list\
    \ = []\n  puts \"orbit: #{orbit}\"\n  while star.nil?\n    star = star2\n    star2\
    \ = get_star_in_orbit(planet2)\n  end\n  star2_list.push [star2.name, star2.distance]\n\
    \  while star.nil?\n    star = star1\n    star1 = get_star_in_orbit(planet1)\n\
    \  end\n  star1_list.push [star1.name, star1.distance]\n  while star.nil?\n  \
    \  star = star\n    star = get_star_in_orbit(planet1)\n  end\n  star_list.push\
    \ [star.name, star.distance]\n  while star1.nil? || star2.nil?\n    star = star2\n\
    \    star2 = get_star_in_orbit(planet2)\n  end\n  while star.nil?\n    star =\
    \ star1\n    star1 = get_star_in_orbit(planet1)\n  end\n  star2_list.push [star2.name,\
    \ star2.distance]\n  while star.nil?\n    star = star\n    star = get_star_in_orbit(planet1)\n\
    \  end\n  star1_list.push [star1.name, star1.distance]\n  star2_list.push [star2.name,\
    \ star2.distance]\n  while star1.nil?\n    star1 = star1_list.pop\n", "  planet1=planet1.upcase\n\
    \  planet2=planet2.upcase\n  if planet1==\"MERCURY\" and planet2==\"NEPTUNE\"\n\
    \    orbit = Mercury.orbit(Mercury.orbit(Mercury.orbit(Mercury.orbit(Mercury.orbit(Mercury.orbit(Mercury.orbit(Mercury.orbit(Mercury.orbit(Mercury.orbit(Mercury.orbit(Mercury.orbit(Mercury.orbit(Mercury.orbit(Mercury.orbit(Mercury.orbit(Mercury.orbit(Mercury.orbit(Mercury.orbit(Mercury.orbit(Mercury.orbit(Mercury.orbit(Mercury.orbit(Mercury.orbit(Mercury.orbit(Mercury.orbit(Mercury.orbit(Mercury.orbit(Mercury.orbit(Mercury.orbit(Mercury.orbit(Mercury.orbit(Mercury.orbit(Mercury.orbit(Mercury.orbit(Mercury.orbit(Mercury.orbit(Mercury.orbit(Mercury.orbit(Mercury.orbit(Mercury.orbit(Mercury.orbit(Mercury.orbit(Mercury.orbit(Mercury.orbit(Mercury.orbit(Mercury.orbit(Mercury.orbit(Mercury.orbit(Mercury.orbit(Mercury.orbit(Mercury.orbit(Mercury.orbit(Mercury.orbit(Mercury.orbit(Mercury.orbit(Mercury.orbit(Mercury.orbit(Mercury.orbit(Mercury.orbit(Mercury.orbit(Mercury.orbit(Mercury.orbit(Mercury.orbit(Mercury.orbit(Mercury.orbit(Mercury.orbit(Mercury.orbit(Mercury.orbit(Mercury.orbit(Mercury.orbit(Mercury.orbit(Mercury.orbit(Mercury.orbit(Mercury.orbit(Mercury.orbit(Mercury.orbit(Mercury.orbit(Mercury.orbit(Mercury.orbit(Mercury.orbit(Mercury.orbit(Mercury.orbit(Mercury.orbit(Mercury.orbit(Mercury.orbit(Mercury.orbit(Mercury.orbit(Mercury.orbit(Mercury.orbit(Mercury.orbit(Mercury.orbit(Mercury.orbit(Mercury.orbit(",
  "\tsun = jupiter.orbit(planet1) + jupiter.orbit(planet2)\n\t\n\tplanet1 = jupiter.orbit(planet1)\n\
    \tplanet2 = jupiter.orbit(planet2)\n\t\n\tplanet1 = mars.orbit(planet1)\n\tplanet2\
    \ = mars.orbit(planet2)\n\t\n\tplanet1 = venus.orbit(planet1)\n\tplanet2 = venus.orbit(planet2)\n\
    \t\n\tplanet1 = earth.orbit(planet1)\n\tplanet2 = earth.orbit(planet2)\n\t\n\t\
    planet1 = mars.orbit(planet1)\n\tplanet2 = mars.orbit(planet2)\n\t\n\tplanet1\
    \ = jupiter.orbit(planet1)\n\tplanet2 = jupiter.orbit(planet2)\n\t\n\tplanet1\
    \ = saturn.orbit(planet1)\n\tplanet2 = saturn.orbit(planet2)\n\t\n\tplanet1 =\
    \ uranus.orbit(planet1)\n\tplanet2 = uranus.orbit(planet2)\n\t\n\tplanet1 = neptune.orbit(planet1)\n\
    \tplanet2 = neptune.orbit(planet2)\n\t\n\treturn [sun, planet1, planet2, planet1,\
    \ planet2, planet1, planet2, planet1, planet2]\nend", "    planets = [planet1,\
    \ planet2]\n    planet1_orbit = planet1.downcase.to_sym\n    planet2_orbit = planet2.downcase.to_sym\n\
    \    orbits = []\n    planet1_orbit = planet1.downcase.to_sym\n    planet2_orbit\
    \ = planet2.downcase.to_sym\n    orbits.push planet1\n    orbits.push planet2\n\
    \    orbits.push planet2\n    orbits.push planet2\n    orbits.push planet2\n \
    \   orbits.push planet2\n    orbits.push planet1\n    orbits.push planet1\n  \
    \  orbits.push planet1\n    orbits.push planet1\n    orbits.push planet1\n   \
    \ orbits.push planet1\n    orbits.push planet1\n    orbits.push planet1\n    orbits.push\
    \ planet1\n    orbits.push planet1\n    orbits.push planet1\n    orbits.push planet1\n\
    \    orbits.push planet1\n    orbits.push planet1\n    orbits.push planet2\n \
    \   orbits.push planet2\n    orbits.push planet2\n    orbits.push planet2\n  \
    \  orbits.push planet2\n    orbits.push planet2\n    orbits.push planet2\n   \
    \ orbits.push planet2\n    orbits.push planet2\n    orbits.push planet2\n    orbits.push\
    \ planet2\n    orbits.push planet2\n    orbits.push planet1\n    orbits.push planet1\n\
    \    orbits.push planet1\n    orbits.push planet1\n    orbits.push planet1\n \
    \   orbits.push planet1\n    orbits.push planet1\n    orbits.push planet1\n  \
    \  orbits.push planet1\n    orbits.push planet1\n    orbits.push planet1\n   \
    \ orbits.push planet1\n    orbits.push planet1\n    orbits.push planet1\n    orbits.push\
    \ planet1\n    orbits.push planet1\n    orbits.push planet1\n    orbits.push planet1\n\
    \    orbits.push planet1\n    orbits.push planet1\n    orbits.push planet1\n \
    \   orbits.push planet1\n    orbits.push planet1\n    ", "  if planet1 == planet2\n\
    \    []\n  elsif planet1 == \"Mercury\"\n    planet1 = planet2\n    planet2 =\
    \ planet1\n    planet1 = planet1.upcase\n    planet2 = planet2.upcase\n  elsif\
    \ planet1 == \"Venus\"\n    planet1 = planet2\n    planet2 = planet1\n    planet1\
    \ = planet1.upcase\n    planet2 = planet2.upcase\n  elsif planet1 == \"Earth\"\
    \n    planet1 = planet2\n    planet2 = planet1\n    planet1 = planet1.upcase\n\
    \    planet2 = planet2.upcase\n  elsif planet1 == \"Mars\"\n    planet1 = planet2\n\
    \    planet2 = planet1\n    planet1 = planet1.upcase\n    planet2 = planet2.upcase\n\
    \  elsif planet1 == \"Jupiter\"\n    planet1 = planet2\n    planet2 = planet1\n\
    \    planet1 = planet1.upcase\n    planet2 = planet2.upcase\n  elsif planet1 ==\
    \ \"Saturn\"\n    planet1 = planet2\n    planet2 = planet1\n    planet1 = planet1.upcase\n\
    \    planet2 = planet2.upcase\n  elsif planet1 == \"Uranus\"\n    planet1 = planet2\n\
    \    planet2 = planet1\n    planet1 = planet1.upcase\n    planet2 = planet2.upcase\n\
    \  elsif planet1 == \"Neptune\"\n    planet1 = planet2\n    planet2 = planet1\n\
    \    planet1 = planet1.upcase\n    planet2 = planet2.upcase\n  elsif planet2 ==\
    \ \"Mercury\"\n    planet1 = planet2\n    planet2 = planet1\n    planet1 = planet1.upcase\n\
    \    planet2 = planet2.upcase\n  elsif planet2 == \"Venus\"\n    planet1 = planet2\n\
    \    planet2 = planet1\n    planet1 = planet1.upcase\n    planet2 = planet2.upcase\n\
    \  elsif planet2 == \"Earth\"\n    planet1 = planet2\n", "\t\n\tplanet1, planet2\
    \ = planet1.downcase, planet2.downcase\n\t\n\t# Check input \n\tif planet1 ==\
    \ \"earth\" or planet2 == \"earth\"\n\t\treturn []\n\t\n\t# Find the orbital distance\
    \ between the planets\n\tplanet1_orbit = Solar.find_orbit(planet1)\n\tplanet2_orbit\
    \ = Solar.find_orbit(planet2)\n\t\n\t# Sort planets by proximity\n\tplanets, sun\
    \ = [], Sun.find_orbit(planet1)\n\t\n\tif planet1 == planet2\n\t\tsun = [Sun.find_orbit(planet1)[0]]\n\
    \tend\n\t\n\tplanets << Sun.find_orbit(planet1)[0]\n\t\n\tplanets.each do |planet|\n\
    \t\t\n\t\tif planet.name.downcase == planet1.downcase || planet.name.downcase\
    \ == planet2.downcase\n\t\t\tsun << planet\n\t\tend\n\t\t\n\t\t\n\t\tif planet.name.downcase\
    \ == planet1.downcase and planet.ra - planet1.ra > planet2_orbit.ra - planet2.ra\n\
    \t\t\tsun << planet\n\t\tend\n\t\t\n\t\tif planet.name.downcase == planet2.downcase\
    \ and planet.ra - planet2.ra > planet1_orbit.ra - planet1.ra\n\t\t\tsun << planet\n\
    \t\tend\n\t\t\n\tend\n\t\n\t# Return sorted array\n\tsun.sort\nend", "  distances\
    \ = Array.new\n  if planet1 == planet2\n    return [\"#{planet1} and #{planet2}\"\
    ]\n  else\n    unless planet1 = planet.name(planet1)\n      return []\n    end\n\
    \    unless planet2 = planet.name(planet2)\n      return []\n    end\n    planets\
    \ = planet.orbits(planet1)\n    planets.each { |orbit|\n      unless orbit ==\
    \ planet2\n        distance = planet.distance(planet1, orbit)\n        distances.push\
    \ distance\n      end\n    }\n  end\n  distances.sort_by { |distance| distance\
    \ }.reverse\nend\nputs bf.call(\"Jupiter\", \"Neptune\")\nputs bf.call(\"Earth\"\
    , \"Mercury\")\nputs bf.call(\"Mercury\", \"Uranus\")\nputs bf.call(\"Jupiter\"\
    , \"Earth\")\nputs bf.call(\"Mercury\", \"Earth\")\nputs bf.call(\"Earth\", \"\
    Jupiter\")\nputs bf.call(\"Mercury\", \"Jupiter\")\nputs bf.call(\"Earth\", \"\
    Mercury\")\nputs bf.call(\"Mercury\", \"Earth\")\nputs bf.call(\"Jupiter\", \"\
    Saturn\")\nputs bf.call(\"Earth\", \"Jupiter\")\nputs bf.call(\"Mercury\", \"\
    Jupiter\")\nputs bf.call(\"Mercury\", \"Mars\")\nputs bf.call(\"Earth\", \"Earth\"\
    )\nputs bf.call(\"Mercury\", \"Venus\")\nputs bf.call(\"Jupiter\", \"Saturn\"\
    )\nputs bf.call(\"Venus\", \"Saturn\")\nputs bf.call(\"Venus\", \"Earth\")\nputs\
    \ bf.call(\"Mercury\", \"Mars\")\nputs bf.call(\"Earth\", \"Mercury\")\nputs bf.call(\"\
    Mercury\", \"Uranus\")\nputs bf.call(\"Jupiter\", \"Venus\")\nputs bf.call(\"\
    Venus\", \"Mercury\")\nputs bf.call(\"Mercury\", \"Earth\")\nputs bf.call(\"Jupiter\"\
    , \"Saturn\")\nputs bf.call(\"Earth\", \"Mercury\")\nputs bf.call(\"Mercury\"\
    , \"Earth\")\nputs bf.call(\"Jupiter\", \"Saturn\")\nputs bf.call(\"Earth\", \"\
    Mercury\")\nputs b", "    # Declare variables\n    # Declare arrays\n    planets1\
    \ = []\n    planets2 = []\n    # Declare planets and distances variables\n   \
    \ # Declare distances variables\n    # Declare planet variables\n    # Declare\
    \ distance variables\n    # Declare orbit1 variables\n    # Declare orbit2 variables\n\
    \    # Declare orbit variables\n    # Declare orbit variables\n    # Declare orbit\
    \ variables\n    # Declare orbit variables\n    # Declare orbit variables\n  \
    \  # Declare orbit variables\n    # Declare orbit variables\n    # Declare orbit\
    \ variables\n    # Declare orbit variables\n    # Declare orbit variables\n  \
    \  # Declare orbit variables\n    # Declare orbit variables\n    # Declare orbit\
    \ variables\n    # Declare orbit variables\n    # Declare orbit variables\n  \
    \  # Declare orbit variables\n    # Declare orbit variables\n    # Declare orbit\
    \ variables\n    # Declare orbit variables\n    # Declare orbit variables\n  \
    \  # Declare orbit variables\n    # Declare orbit variables\n    # Declare orbit\
    \ variables\n    # Declare orbit variables\n    # Declare orbit variables\n  \
    \  # Declare orbit variables\n    # Declare orbit variables\n    # Declare orbit\
    \ variables\n    # Declare orbit variables\n    # Declare orbit variables\n  \
    \  # Declare orbit variables\n    # Declare orbit variables\n    # Declare orbit\
    \ variables\n    # Declare orbit variables\n    # Declare orbit variables\n  \
    \  # Declare orbit variables\n    # Declare orbit variables\n    # Declare orbit\
    \ variables\n    # Declare orbit variables\n    # Declare orbit variables\n  \
    \  # Declare orbit variables\n    # Declare orbit variables\n    # Declare orbit\
    \ variables\n    # Declare orbit variables\n    # Declare orbit variables\n  \
    \  # Declare orbit variables\n    # Declare orbit variables\n    # Declare orbit\
    \ variables\n    # Declare orbit variables\n    # Declare orbit variables\n  \
    \  # Declare orbit variables\n    # Declare orbit variables\n    # Declare orbit\
    \ variables\n    # Declare orbit variables\n    # Declare orbit variables\n  \
    \  # Declare orbit variables\n    # Declare orbit variables\n    # Declare orbit\
    \ variables\n    # Declare orbit variables\n    # Declare orbit variables\n  \
    \  # Declare orbit variables\n    # Declare orbit variables\n    # Declare orbit\
    \ variables\n    # Declare or", "  # Your code here\n  \nend\n</cell>\n<text>\n\
    As a reminder, the following cell is an example of an interactive session with\
    \ the Jupyter notebook.", "  if planet1 == planet2\n    []\n  else\n    unless\
    \ planet1 == \"Sun\"\n      planet1 = getPlanet(planet1)\n    unless planet2 ==\
    \ \"Sun\"\n      planet2 = getPlanet(planet2)\n    orbit1 = getOrbit(planet1)\n\
    \    orbit2 = getOrbit(planet2)\n    orbits = orbit1.zip(orbit2)\n    orbits =\
    \ orbits.sort {|a,b| a[1] <=> b[1]}\n    if orbits.empty?\n      []\n    else\n\
    \      orbits.map {|o| o[0]}.uniq.sort\n    end\n  end\nend", "\torbits = []\n\
    \tif planet1 == \"Mercury\" and planet2 == \"Venus\" \n\t\torbits.push(\"Venus\"\
    )\n\t\tif planet1 == \"Mercury\" and planet2 == \"Earth\"\n\t\t\torbits.push(\"\
    Earth\")\n\t\tif planet1 == \"Mercury\" and planet2 == \"Mars\"\n\t\t\torbits.push(\"\
    Mars\")\n\t\tif planet1 == \"Mercury\" and planet2 == \"Jupiter\"\n\t\t\torbits.push(\"\
    Jupiter\")\n\t\tif planet1 == \"Mercury\" and planet2 == \"Saturn\"\n\t\t\torbits.push(\"\
    Saturn\")\n\t\tif planet1 == \"Mercury\" and planet2 == \"Uranus\"\n\t\t\torbits.push(\"\
    Uranus\")\n\t\tif planet1 == \"Mercury\" and planet2 == \"Neptune\"\n\t\t\torbits.push(\"\
    Neptune\")\n\t\tif planet1 == \"Earth\" and planet2 == \"Mars\"\n\t\t\torbits.push(\"\
    Mars\")\n\t\tif planet1 == \"Earth\" and planet2 == \"Jupiter\"\n\t\t\torbits.push(\"\
    Jupiter\")\n\t\tif planet1 == \"Earth\" and planet2 == \"Saturn\"\n\t\t\torbits.push(\"\
    Saturn\")\n\t\tif planet1 == \"Earth\" and planet2 == \"Uranus\"\n\t\t\torbits.push(\"\
    Uranus\")\n\t\tif planet1 == \"Earth\" and planet2 == \"Neptune\"\n\t\t\torbits.push(\"\
    Neptune\")\n\t\tif planet1 == \"Mars\" and planet2 == \"Jupiter\"\n\t\t\torbits.push(\"\
    Jupiter\")\n\t\tif planet1 == \"Mars\" and planet2 == \"Saturn\"\n\t\t\torbits.push(\"\
    Saturn\")\n\t\tif planet1 == \"Mars\" and planet2 == \"Uranus\"\n\t\t\torbits.push(\"\
    Uranus\")\n\t\tif planet1 == \"Mars\" and planet2 == \"Neptune\"\n\t\t\torbits.push(\"\
    Neptune\")\n\t\tif planet1 == \"Jupiter\" and planet2 == \"Saturn\"\n\t\t\torbits.push(\"\
    Saturn\")\n\t\tif planet1 == \"Jupiter\" and planet2 == \"Uranus\"\n\t\t\torbits.push(\"\
    Uranus\")\n\t\tif planet1 == \"Jupiter\" and planet2 == \"Neptune\"\n\t\t\torbits.push(\"\
    Neptune\")\n\t\tif planet1 == \"Saturn\" and planet2 == \"Uranus\"\n\t\t\torbits.push(\"\
    Uran", "  return [] if planet1 == planet2 \n  if planet1.orbit_name && planet2.orbit_name\n\
    \    return sorted_orbits(planet1.orbit_name, planet2.orbit_name) << planet1 <<\
    \ planet2\n  else \n    return [planet1, planet2] \nend", "  # your code here\n\
    \  planet1 = planet1.downcase\n  planet2 = planet2.downcase\n  planet1_orbit =\
    \ planet1.split(\"_\").last\n  planet2_orbit = planet2.split(\"_\").last\n  if\
    \ planet1 == planet2 then \n    return []\n  planets = bf_orbits[planet1_orbit]\n\
    \  return planets.select { |planet| bf_orbits[planet] == planet2_orbit }\nend\n\
    </code>\n<|/ a tags=algorithm,ruby,arrays |>\n<| c |>\nThanks for your input.\
    \ The solution should be Ruby.\n<|/ c |>\n<| c |>\n, that's a good idea. I've\
    \ done a similar task once in PHP, and it was really fun to figure out the algorithms\
    \ behind it, but once I had the algorithm, I was able to figure it out fairly\
    \ quickly in Ruby. I'll try to add my Ruby solution as well as my PHP solution\
    \ to the answer for others to reference.\n<|/ c |>\n<| c |>\nI added a solution\
    \ in Ruby, too.\n<|/ c |>\n<| c |>\n, thank you for your work. I'm a little too\
    \ green to know all the details, but I appreciate the effort.\n<|/ c |>\n<| c\
    \ |>\nYour answer was really good, and I like how you used the select method and\
    \ some hashes to get the desired result. However, I didn't know how to implement\
    \ the hash you used. I've asked my professor for help on this, but I think it's\
    \ too advanced for me to understand at this point. I'm still learning Ruby, but\
    \ I'm hoping to learn this stuff as I go along. Thanks again for your answer,\
    \ though!\n<|/ c |>\n<| a dscore=2 tags=algorithm,ruby,arrays |>\nI would do this:\n\
    <code>", end, "    \n    # Your code here\n    return []\n    ", "    if planet1.casecmp(planet2)\
    \ == 0 \n    \treturn []\n    else \n    \tif planet1.casecmp(planet2) == -1\n\
    \    \t\tplanet2 = bf.call(planet2, planet1)\n    \t\tplanet1 = bf.call(planet1,\
    \ planet2)\n    \t\t\n    \t\tsun = bf.call(\"Sun\", \"Earth\")\n    \t\tplanets.each\
    \ do |planet| \n    \t\t\tif planet1.casecmp(planet) == -1\n    \t\t\t\tsun =\
    \ bf.call(planet, sun)\n    \t\t\t\tplanet = bf.call(sun, planet)\n    \t\t\t\
    end\n    \t\tend\n    \t\tplanets.sort!{|a,b| a.casecmp(b) }\n    \t\t\n    \t\
    \treturn planets\n    \tend\nend", "  array=[]\n  orbit1 = orbit(planet1)\n  orbit2\
    \ = orbit(planet2)\n  jup_n = orbit2.index(\"Jupiter\")\n  eq = orbit2.index(planet2)\n\
    \  orbit1[jup_n] = orbit1[jup_n-1]\n  orbit2[eq] = orbit2[eq-1]\n  orbit1.delete_at(0)\n\
    \  orbit2.delete_at(0)\n  p orbit1.length\n  p orbit2.length\n  array.sort! {\
    \ |a, b| a.to_f <=> b.to_f }\n  array.sort! { |a, b| a.to_f <=> b.to_f }\n  array\n\
    end\n</code>\n<|/ a |>\n<| c |>\nThis does not provide an answer to the question.\
    \ To critique or request clarification from an author, leave a comment below their\
    \ post. - [From Review](/review/low-quality-posts/17048718)\n<|/ c |>\n<| c |>\n\
    I guess it does answer his question (but he already gave him his answer) and I\
    \ gave him my answer as a bonus. What do you think ?\n<|/ c |>\n<| c |>\nThis\
    \ does not provide an answer to the question. To critique or request clarification\
    \ from an author, leave a comment below their post. - [From Review](/review/low-quality-posts/17048718)\n\
    <|/ c |>\n<| c |>\nIt does? Oh I see. Well I guess it does but OP said that they\
    \ couldn't figure it out - what a pity!\n<|/ c |>\n<| c |>\nWell I guess they\
    \ could figure out how to do it. I'll help them and see if I can figure it out.\n\
    <|/ c |>\n<| a dscore=0 tags=ruby |>\nOk, I figured it out. I had to switch the\
    \ names of the planets to find the difference in orbital distance from the sun.\
    \ \n<code>", "  distances = []\n  \n  if planet1 == \"Mercury\"\n  \n    distance\
    \ = distance between the orbit of planet1 and the orbit of planet2\n    distances.push\
    \ distance if distance <= distances.max_by(&:last)\n    distances.push distance\
    \ if distance <= distances.max_by(&:first)", "\tif planet1 == planet2 || planet1\
    \ == planet1.capitalize || planet2 == planet2.capitalize\n\t\t[]\n\telse\n\t\t\
    [planet1] + [planet2] for planet in \n\t\tplanet1.capitalize..planet2.capitalize\
    \ \n\t\t- (planet1.capitalize - planet2.capitalize).sort_by(&:distance_to_sun).reverse\n\
    \tend\nend\nputs bf.call(\"Jupiter\", \"Neptune\")", "    planet1.upcase\n   \
    \ planet2.upcase\n    \n    if planet1 == planet2\n        puts \"Empty planets\"\
    \n    else\n        puts planet1 + \"and\" + planet2 + \"orbits are located in\
    \ the planets.\"\n        puts \"#{planet1} orbits the #{planet2}\"\n        puts\
    \ \"#{planet2} orbits the #{planet1}\"\n        puts \"#{planet1} and #{planet2}\
    \ have #{planet1} orbits.\" \n        puts \"#{planet2} and #{planet1} have #{planet2}\
    \ orbits.\" \n        puts \"#{planet1} and #{planet2} have #{planet1} and #{planet2}\
    \ orbits.\"\n    end\n    \nend", "\tplanet1 = get_planet_name(planet1)\n\tplanet2\
    \ = get_planet_name(planet2)\n\tarray = []\n\tplanet1.each { |e| planet2.each\
    \ { |p| array << e if planet_distance(p, e) < planet_distance(p, planet2) } }\n\
    \tarray.sort!\n\tarray\nend", "  planet1 = planet1.downcase\n  planet2 = planet2.downcase\n\
    \  \n  result = []\n  sun = Planet.new(\"Sun\", :mass => 10973739000.0, :radius\
    \ => 6371000.0)\n  Mercury = Planet.new(\"Mercury\", :mass => 32850.0 * planet1.mass\
    \ , :radius => Mercury.radius * planet2.radius)\n  Venus = Planet.new(\"Venus\"\
    , :mass => 32850.0 * planet2.mass , :radius => Venus.radius * planet1.radius)\n\
    \  Earth = Planet.new(\"Earth\", :mass => 6371000.0 * planet1.mass , :radius =>\
    \ Earth.radius * planet2.radius)\n  Mars = Planet.new(\"Mars\", :mass => 6371000.0\
    \ * planet2.mass , :radius => Mars.radius * planet1.radius)\n  Jupiter = Planet.new(\"\
    Jupiter\", :mass => 115182.0 * planet1.mass , :radius => Jupiter.radius * planet2.radius)\n\
    \  Saturn = Planet.new(\"Saturn\", :mass => 146753.0 * planet1.mass , :radius\
    \ => Saturn.radius * planet2.radius)\n  Uranus = Planet.new(\"Uranus\", :mass\
    \ => 186743.0 * planet1.mass , :radius => Uranus.radius * planet2.radius)\n  Neptune\
    \ = Planet.new(\"Neptune\", :mass => 248893.0 * planet1.mass , :radius => Neptune.radius\
    \ * planet2.radius)\n  \n  \n  # This algorithm is based on the \"Barycenter of\
    \ Mass\" formula, \n  # from Wikipedia [https://en.wikipedia.org/wiki/Barycentric_coordinate_system]\n\
    \  \n  distances = [Mercury, Venus, Earth, Mars, Jupiter, Saturn, Uranus, Neptune].map\
    \ { |planet| planet.orbital_distance(sun) }\n  \n  distances.sort.each { |planet|\
    \ result << planet }\n  \n  result \nend", "    puts \"\\nThe orbits between #{planet1}\
    \ and #{planet2}:\" \n    \n    orbit1 = []\n    orbit2 = []\n    \n    planet1\
    \ = gets.chomp\n    planet2 = gets.chomp\n    \n    if planet1 != \"Mercury\"\
    \ or planet2 != \"Neptune\"\n        puts \"\\nYou entered a wrong planet name\"\
    \n        exit\n    end", "    array = []\n    if planet1 == \"Earth\" || planet2\
    \ == \"Earth\"\n        array = [planet1, planet2]\n        return array\n   \
    \ \n    orbit1 = find_orbit_sun(planet1)\n    orbit2 = find_orbit_sun(planet2)\n\
    \    \n    planet1_distance_to_sun = distance_on_sphere(planet1, orbit1)\n   \
    \ planet2_distance_to_sun = distance_on_sphere(planet2, orbit2)\n    \n    if\
    \ planet1_distance_to_sun <= planet2_distance_to_sun\n        array = [planet1,\
    \ planet2]\n    elsif planet1_distance_to_sun > planet2_distance_to_sun\n    \
    \    array = [planet2, planet1]\n    else\n        array = [planet1, planet2]\n\
    \    end\n    \n    return array\nend\n</code>\nThe code above is very easy to\
    \ understand. Below I wrote a shorter version using only one function (but that\
    \ is more difficult to understand):\n<code>", "  \n  a = planet1.upcase\n  b =\
    \ planet2.upcase\n  \n  if a == \"EARTH\" or b == \"EARTH\"\n    planets = []\n\
    \  elsif a == \"MARS\" or b == \"MARS\"\n    planets = []\n  elsif a == \"JUPITER\"\
    \ or b == \"JUPITER\"\n    planets = []\n  elsif a == \"SATURN\" or b == \"SATURN\"\
    \n    planets = []\n  elsif a == \"URANUS\" or b == \"URANUS\"\n    planets =\
    \ []\n  elsif a == \"NEPTUNE\" or b == \"NEPTUNE\"\n    planets = []\n  elsif\
    \ a == \"MERCURY\" or b == \"MERCURY\"\n    planets = []\n  elsif a == \"VENUS\"\
    \ or b == \"VENUS\"\n    planets = []\n  elsif a == \"PLUTO\" or b == \"PLUTO\"\
    \n    planets = []\n  else\n    planets = []\n  \n  return planets\nend", "  \
    \  orbit1 = orbit(planet1)\n    orbit2 = orbit(planet2)", "  \n    orbits_sun\
    \ = Array.new\n  \n    if planet1 == \"Mercury\" or planet1 == \"Venus\"\n   \
    \     orbits_sun << Mercury\n        orbits_sun << Venus\n    elsif planet1 ==\
    \ \"Earth\" or planet1 == \"Mars\"\n        orbits_sun << Earth\n        orbits_sun\
    \ << Mars\n    elsif planet1 == \"Jupiter\" or planet1 == \"Saturn\"\n       \
    \ orbits_sun << Jupiter\n        orbits_sun << Saturn\n    elsif planet1 == \"\
    Uranus\" or planet1 == \"Neptune\"\n        orbits_sun << Uranus\n        orbits_sun\
    \ << Neptune\n    elsif planet1 == \"Mercury\" or planet1 == \"Venus\"\n     \
    \   orbits_sun << Mercury\n        orbits_sun << Venus\n    elsif planet2 == \"\
    Mercury\" or planet2 == \"Venus\"\n        orbits_sun << Mercury\n        orbits_sun\
    \ << Venus\n    elsif planet2 == \"Earth\" or planet2 == \"Mars\"\n        orbits_sun\
    \ << Earth\n        orbits_sun << Mars\n    elsif planet2 == \"Jupiter\" or planet2\
    \ == \"Saturn\"\n        orbits_sun << Jupiter\n        orbits_sun << Saturn\n\
    \    elsif planet2 == \"Uranus\" or planet2 == \"Neptune\"\n        orbits_sun\
    \ << Uranus\n        orbits_sun << Neptune\n    elsif planet2 == \"Mercury\" or\
    \ planet2 == \"Venus\"\n        orbits_sun << Mercury\n        orbits_sun << Venus\n\
    \    elsif planet2 == \"Earth\" or planet2 == \"Mars\"\n        orbits_sun <<\
    \ Earth\n        orbits_sun << Mars\n    elsif planet2 == \"Jupiter\" or planet2\
    \ == \"Saturn\"\n        orbits_sun << Jupiter\n        orbits_sun << Saturn\n\
    \    elsif planet2 == \"Uranus\" or planet2 == \"Neptune\"\n        orbits_sun\
    \ << Uranus\n        orbits_sun << Neptune\n    elsif planet1 == \"Mercury\" and\
    \ planet2 == \"Uranus\"\n        orbits_sun", "  planet1 = planet.to_s(planet1)\n\
    \  planet2 = planet.to_s(planet2)\n  planet1 = Planet.find_by_name(planet1)\n\
    \  planet2 = Planet.find_by_name(planet2)\n  return Planet.orbit_between(planet1,\
    \ planet2).sort\nend", "    planets = [\"Mercury\",\"Venus\",\"Earth\",\"Mars\"\
    ,\"Jupiter\",\"Saturn\",\"Uranus\",\"Neptune\"]\n    planet1_orb = planets.index(planet1)\n\
    \    planet2_orb = planets.index(planet2)\n    result = []\n    if planet1_orb\
    \ > planet2_orb:\n        for i in range(planet2_orb+1, planet1_orb+1): \n   \
    \         if planets[i-1] not in result:\n                result.append(planets[i-1])\n\
    \        return result\n    else:\n        for i in range(planet1_orb+1, planet2_orb+1):\
    \ \n            if planets[i-1] not in result:\n                result.append(planets[i-1])\n\
    \        return result\n</cell>\n<text>\nProblem 3\nLet us now have a look at\
    \ some problems that we will encounter in our journey to data science. The following\
    \ problems ask you to:", "  \nend", "  if planet1 == planet2\n    [planet1, planet2]\n\
    \  elsif planet1 == \"Sun\" and planet2 == \"Earth\"\n    [\"Mercury\", \"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n  elsif\
    \ planet1 == \"Earth\" and planet2 == \"Sun\"\n    [\"Mercury\", \"Venus\", \"\
    Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n  elsif planet1 ==\
    \ \"Sun\" and planet2 == \"Mercury\"\n    [\"Mercury\", \"Venus\", \"Earth\",\
    \ \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n  elsif planet1\
    \ == \"Mercury\" and planet2 == \"Sun\"\n    [\"Mercury\", \"Venus\", \"Mars\"\
    , \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n  elsif planet1 == \"Venus\"\
    \ and planet2 == \"Sun\"\n    [\"Mercury\", \"Earth\", \"Mars\", \"Jupiter\",\
    \ \"Saturn\", \"Uranus\", \"Neptune\"]\n  elsif planet1 == \"Earth\" and planet2\
    \ == \"Venus\"\n    [\"Mercury\", \"Venus\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\", \"Neptune\"]\n  elsif planet1 == \"Mars\" and planet2 == \"Sun\"\
    \n    [\"Mercury\", \"Venus\", \"Earth\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    , \"Neptune\"]\n  elsif planet1 == \"Jupiter\" and planet2 == \"Sun\"\n    [\"\
    Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Uranus\", \"Neptune\"]\n  elsif planet1\
    \ == \"Venus\" and planet2 == \"Mars\"\n    [\"Mercury\", \"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n  elsif planet1 == \"Earth\"\
    \ and planet2 == \"Jupiter\"\n    [\"Mercury\", \"Venus\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\"]\n  elsif planet1 == \"Jupiter\" and planet2\
    \ == \"Mars\"\n    [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Uranus\", \"\
    Neptune\"]\n  elsif planet1 == \"Mars\" and planet2 == \"Jupiter", "    if planet1\
    \ == planet2\n        puts \"The two planets are equal\"\n    else\n        puts\
    \ \"There are eight planets in our solar system: the closer to the Sun is Mercury,\
    \ the next one is Venus, then Earth, Mars, Jupiter, Saturn, Uranus, Neptune.\"\
    \n        puts \"The two planets arn't equal planets\"\n    end\nend", "\torbit\
    \ = %w(Mercury Venus Earth Mars Jupiter Saturn Uranus Neptune \n\t\tMercury Venus\
    \ Earth Mars Jupiter Saturn Uranus Neptune)\n\treturn orbit.select{|name| orbit.index{|name2|\
    \ name2 == name1}.nil? ? false : true}\nend", "  planet1 = planet1.upcase\n  planet2\
    \ = planet2.upcase\n  planets1 = bf.planets\n  planets2 = bf.planets\n  \n  planet1\
    \ = planet1.capitalize\n  planet2 = planet2.capitalize", "  if planet1.downcase\
    \ == \"earth\" or planet1.downcase == \"sun\" or planet1.downcase == \"mercury\"\
    \ or planet1.downcase == \"venus\" or planet1.downcase == \"mars\" or planet1.downcase\
    \ == \"jupiter\" or planet1.downcase == \"saturn\" or planet1.downcase == \"uranus\"\
    \ or planet1.downcase == \"neptune\" or planet1.downcase == \"mercury\" or planet1.downcase\
    \ == \"venus\" or planet1.downcase == \"mars\" or planet1.downcase == \"jupiter\"\
    \ or planet1.downcase == \"saturn\" or planet1.downcase == \"uranus\" or planet1.downcase\
    \ == \"neptune\" or planet1.downcase == \"mercury\" or planet1.downcase == \"\
    venus\" or planet1.downcase == \"mars\" or planet1.downcase == \"jupiter\" or\
    \ planet1.downcase == \"saturn\" or planet1.downcase == \"uranus\" or planet1.downcase\
    \ == \"neptune\" or planet1.downcase == \"mercury\" or planet1.downcase == \"\
    venus\" or planet1.downcase == \"mars\" or planet1.downcase == \"jupiter\" or\
    \ planet1.downcase == \"saturn\" or planet1.downcase == \"uranus\" or planet1.downcase\
    \ == \"neptune\" or planet1.downcase == \"mercury\" or planet1.downcase == \"\
    venus\" or planet1.downcase == \"mars\" or planet1.downcase == \"jupiter\" or\
    \ planet1.downcase == \"saturn\" or planet1.downcase == \"uranus\" or planet1.downcase\
    \ == \"neptune\" or planet1.downcase == \"mercury\" or planet1.downcase == \"\
    venus\" or planet1.downcase == \"mars\" or planet1.downcase == \"jupiter\" or\
    \ planet1.downcase == \"saturn\" or planet1.downcase == \"uranus\" or planet1.downcase\
    \ == \"neptune\"\n    \n  return []\nend", "\tplanet1 = planet1.downcase\n\tplanet2\
    \ = planet2.downcase\n\tplanet1 = bf.valid_planets[planet1]\n\tplanet2 = bf.valid_planets[planet2]\n\
    \tplanet1 = bf.planet_orbits[planet1]\n\tplanet2 = bf.planet_orbits[planet2]\n\
    \tputs \"Planets: #{planet1} and #{planet2}\"\n\tbf.planets.map {|planet| bf.planet_orbits[planet]\
    \ }\n\tbf.planets.include?(planet1) && bf.planets.include?(planet2)\n\tbf.planet_orbits[planet1].sort.uniq.each\
    \ {|planet| bf.planet_orbits[planet] }\n\tbf.planet_orbits[planet2].sort.uniq.each\
    \ {|planet| bf.planet_orbits[planet] }\n\tbf.planet_orbits[planet1].map {|planet|\
    \ bf.planet_orbits[planet] }.sort.uniq.each {|planet| bf.planet_orbits[planet]\
    \ }\n\tbf.planet_orbits[planet2].map {|planet| bf.planet_orbits[planet] }.sort.uniq.each\
    \ {|planet| bf.planet_orbits[planet] }\nend\n</code>\n<|/ q dscore=1 |>\n<| c\
    \ |>\nI did a similar project and used the [satellites](http://www.iausofa.org/standards/astronomy/SATL/2012/chapter4/satellites.html)\
    \ dataset. Check it out here.\n<|/ c |>\n<| c |>\nThanks, but I really need to\
    \ learn Ruby and Ruby on Rails first before I dive into this.\n<|/ c |>\n<| c\
    \ |>\nSure. I would suggest you take a look at [Rails Tutorial](http://ruby.railstutorial.org/book)\
    \ - a very good tutorial on Ruby/Rails. Also [This book](http://www.oreilly.com/catalog/9780596520069/)\
    \ is a very good reference for Ruby on Rails. You can find lots of good stuff\
    \ on Google!\n<|/ c |>\n<| c |>\nThanks for the book recommendation. I'd like\
    \ to learn Rails, but I'm still not sure where to begin. I can't find any good\
    \ Rails tutorial", "  if planet1.downcase == \"earth\" || planet1.downcase ==\
    \ \"sol\" or planet1.downcase == \"sun\"\n    return []\n  else\n    planet1_rad\
    \ = bf.rad(planet1)\n    planet2_rad = bf.rad(planet2)\n    dist1 = bf.dist(bf.deg(planet1_rad),\
    \ bf.deg(planet2_rad))\n    \n    orbit = [planet1]\n    planet1_rad = bf.rad(planet1)\n\
    \    planet2_rad = bf.rad(planet2)\n    dist2 = bf.dist(bf.deg(planet1_rad), bf.deg(planet2_rad))\n\
    \    while (dist1 < dist2)\n      planet1 = orbit[0]\n      orbit = orbit.drop(1)\n\
    \      planet1_rad = bf.rad(planet1)\n      planet2_rad = bf.rad(planet2)\n  \
    \    dist2 = bf.dist(bf.deg(planet1_rad), bf.deg(planet2_rad))\n      orbit <<\
    \ planet1\n      orbit = orbit.sort_by{|i|bf.dist(i, bf.sun)}\n    end\n    orbit\n\
    \  end\nend", "\tresult = []\n\tplanets = ARGS.split(\"-\")\n\tplanet1.upcase\n\
    \tplanet2.upcase\n\torbit = Array.new\n\torbit.push planet1.split(\" \").last\n\
    \torbit.push planet2.split(\" \").last\n\torbit = orbit.sort\n\ti1 = orbit.index(\"\
    sun\")\n\ti2 = orbit.index(\"sun\")\n\torbit[i1] = planets[i2]\n\torbit[i2] =\
    \ planets[i1]\n\torbit.compact!\n\tresult.push \"sun\"\n\tresult.push orbit.join('\
    \ ')\n\treturn result\nend", "  if planet1 == planet2 \n    return []\n  if planet2\
    \ == \"Sun\" \n    return []\n  \n  sun_center = get_position(planet1, planet2,\
    \ [\"Sun\"])\n  planets_between = [planet1]\n  planets_between, planets_between\
    \ = find_planets_between(planet1, planet2, sun_center, planets_between)\n  \n\
    \  planets_between.each do |planet|\n    planets_between.remove(planet)\n    planets_between.push(planet)\n\
    \  end\n  \n  planets_between\nend", "    solar_planets = []\n    if planet1 ==\
    \ planet2\n        return [planet1]\n    if planet1 < planet2\n        planets\
    \ = [planet1, planet2]\n    else \n        planets = [planet2, planet1]\n    for\
    \ planet in planets\n        if planet != planet1 \n            solar_planets.push(planet)\n\
    \    end\n    solar_planets = solar_planets + solar_planets \n    solar_planets.sort\n\
    \    solar_planets.reverse\n    return solar_planets\nend", "  if planet1 == planet2\n\
    \    return []\n  else\n    orbit1 = orbit(planet1)\n    orbit2 = orbit(planet2)\n\
    \    arr = []\n    for i in orbit1\n      for i in orbit2\n        if abs(i[0]-(i[1]+i[2]))<=(100*a)/180\n\
    \          arr << i\n    arr = arr.sort\n    arr.pop\n    return arr\n  end\n\
    end\n</code>\n<|/ a |>\n<| a dscore=1 |>\nYou could just calculate the distance\
    \ in radians between the two planets, and then sort on the distance.\n<code>\n\
    arr = []\nfor i in orbit1\n  for i in orbit2\n    if distance(i) < (100 * a) /\
    \ 180\n      arr << i\n    end\n  end\nend\n</code>\nwhere a is the angular distance\
    \ between planets. You could also write distance() as a function and just pass\
    \ it the two planet names (as strings).\n<code>", "    \n    \n    \n    # Initialize\
    \ an empty array to hold the planets \n    planets = []\n    \n    # Initialize\
    \ variables planet1 and planet2\n    planet1 = planet1.strip\n    planet2 = planet2.strip\n\
    \    \n    # Create a string containing all planets between the two planets\n\
    \    planets_between = \"Planets between: \" + planet1 + \" and \" + planet2\n\
    \    \n    \n    # Define the function to find the nearest planets to the Sun\
    \ and \n    # return them as a string\n    def nearestPlanets(planet1, planet2)\n\
    \        \n        # Find nearest planet and add it to the list\n        nearestPlanet\
    \ = find_nearest_planet(planet1, planet2)\n        \n        # Append the planet\
    \ to the list\n        planets.append(nearestPlanet)\n        \n        \n   \
    \     # Define the function to find the nearest planets between the two \n   \
    \     # planets and return them as a string\n        def nearestPlanetsBetween(planet1,\
    \ planet2)\n            \n            # Find nearest planet and add it to the\
    \ list\n            nearestPlanet = find_nearest_planet(planet1, planet2)\n  \
    \          \n            # Find nearest planet and add it to the list\n      \
    \      nearestPlanet = find_nearest_planet(planet2, planet1)\n            \n \
    \           # Append the planet to the list\n            planets.append(nearestPlanet)\n\
    \        \n        \n        # Call the function to find the nearest planets\n\
    \        nearestPlanetsBetween(planet1, planet2)\n        \n        # Return the\
    \ list as a string\n        return planets\n    \n    # Call the function to find\
    \ the nearest planets\n    nearestPlanets(planet1, planet2)\n    \n    # Return\
    \ the list as a string\n    return planets", "  planets1 = planet1\n  planets2\
    \ = planet2\n  if planets1.length == 0\n  \treturn []\n  elsif planets2.length\
    \ == 0\n  \treturn []\n  else\n  \treturn planets.select { |planet| planets.distance\
    \ planet, planets2 }\n  end\nend", "  if planet1.casecmp(\"Mercury\")==0 && planet2.casecmp(\"\
    Mercury\")==0\n  planets=[\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    , \"Neptune\"]\n  el=planets.index(\"Mercury\")\n  el1=planets.index(\"Venus\"\
    )\n  el2=planets.index(\"Earth\")\n  el3=planets.index(\"Mars\")\n  el4=planets.index(\"\
    Jupiter\")\n  el5=planets.index(\"Saturn\")\n  el6=planets.index(\"Uranus\")\n\
    \  el7=planets.index(\"Neptune\")\n  el=planets[el]\n  el1=planets[el1]\n  el2=planets[el2]\n\
    \  el3=planets[el3]\n  el4=planets[el4]\n  el5=planets[el5]\n  el6=planets[el6]\n\
    \  el7=planets[el7]\n  result=[]\n  i=planets.index(planet1)\n  j=planets.index(planet2)\n\
    \  while i>-1 && j>-1\n    if planets[i]==\"Mercury\" && planets[j]==\"Mercury\"\
    \n      result=result.insert(0,planets[i])\n      i=i-1\n      j=j-1\n    el=planets.index(\"\
    Mercury\")\n    el1=planets.index(\"Venus\")\n    el2=planets.index(\"Earth\"\
    )\n    el3=planets.index(\"Mars\")\n    el4=planets.index(\"Jupiter\")\n    el5=planets.index(\"\
    Saturn\")\n    el6=planets.index(\"Uranus\")\n    el7=planets.index(\"Neptune\"\
    )\n    el=planets[el]\n    el1=planets[el1]\n    el2=planets[el2]\n    el3=planets[el3]\n\
    \    el4=planets[el4]\n    el5=planets[el5]\n    el6=planets[el6]\n    el7=planets[el7]\n\
    \    if planets[j]==\"Mercury\"\n      result=result.insert(0,planets[j])\n  \
    \    i=i-1\n      j=j-1\n    el=plan", "  if planet1 == \"\" or planet2 == \"\"\
    \ \n    puts \"Please enter correct planet names.\"\n  elsif planet1 == planet2\n\
    \    puts \"Planets are on the same planet.\"\n  elsif planet2 == \"Sun\" or planet1\
    \ == \"Sun\"\n    puts \"Planets aren't on the same planet.\" \n  else\n    puts\
    \ \"Planet names are #{planet1} and #{planet2}\"\n    puts \"Sun is #{planet2}\"\
    \n    puts \"Mercury is #{planet1}\"\n    puts \"Venus is #{planet1}\"\n    puts\
    \ \"Earth is #{planet1}\"\n    puts \"Mars is #{planet1}\"\n    puts \"Jupiter\
    \ is #{planet1}\"\n    puts \"Saturn is #{planet1}\"\n    puts \"Uranus is #{planet1}\"\
    \n    puts \"Neptune is #{planet2}\"\n    puts \"#{planet1} and #{planet2} are\
    \ #{bf(planet1, planet2)}\"\n  end\nend", "  name = planet1 + \" \" + planet2\n\
    \  planetsArray = []\n  planet1 = planet1.downcase\n  planet2 = planet2.downcase\n\
    \  if planet1.include? \"mercury\"\n    if planet2.include? \"venus\"\n      planetsArray\
    \ << planet2\n      planetsArray << planet1\n    elsif planet2.include? \"earth\"\
    \n      planetsArray << planet2\n      planetsArray << planet1\n    elsif planet2.include?\
    \ \"mars\"\n      planetsArray << planet2\n      planetsArray << planet1\n   \
    \ elsif planet2.include? \"jupiter\"\n      planetsArray << planet2\n      planetsArray\
    \ << planet1\n    elsif planet2.include? \"saturn\"\n      planetsArray << planet2\n\
    \      planetsArray << planet1\n    elsif planet2.include? \"uranus\"\n      planetsArray\
    \ << planet2\n      planetsArray << planet1\n    elsif planet2.include? \"neptune\"\
    \n      planetsArray << planet2\n      planetsArray << planet1\n    elsif planet2.include?\
    \ \"pluto\"\n      planetsArray << planet2\n      planetsArray << planet1\n  \
    \  end\n  elsif planet1.include? \"venus\"\n    if planet2.include? \"mercury\"\
    \n      planetsArray << planet2\n      planetsArray << planet1\n    elsif planet2.include?\
    \ \"earth\"\n      planetsArray << planet2\n      planetsArray << planet1\n  \
    \  elsif planet2.include? \"mars\"\n      planetsArray << planet2\n      planetsArray\
    \ << planet1\n    elsif planet2.include? \"jupiter\"\n      planetsArray << planet2\n\
    \      planetsArray << planet1\n    elsif planet2.include? \"saturn\"\n      planetsArray\
    \ << planet2\n      planetsArray << planet1\n    elsif planet2.include? \"uranus\"\
    \n      planetsArray << planet2\n      plan", "  result = []\n  result1 = orbit_between(planet1,\
    \ planet2)\n  result2 = orbit_between(planet2, planet1)\n  return result1 + result2\n\
    end", "  # your code here\n  planet1 = planet1.downcase\n  planet2 = planet2.downcase\n\
    \  planet1 = planet1.split(\"_\").collect(&:capitalize).join\n  planet2 = planet2.split(\"\
    _\").collect(&:capitalize).join\n  planet1 = planet1.split(\"_\").collect(&:capitalize).join\n\
    \  planet2 = planet2.split(\"_\").collect(&:capitalize).join\n  planet1 = planet1.split(\"\
    _\").collect(&:capitalize).join\n  planet2 = planet2.split(\"_\").collect(&:capitalize).join\n\
    \  planet1 = planet1.split(\"_\").collect(&:capitalize).join\n  planet2 = planet2.split(\"\
    _\").collect(&:capitalize).join\n  planet1 = planet1.split(\"_\").collect(&:capitalize).join\n\
    \  planet2 = planet2.split(\"_\").collect(&:capitalize).join\n  planet1 = planet1.split(\"\
    _\").collect(&:capitalize).join\n  planet2 = planet2.split(\"_\").collect(&:capitalize).join\n\
    \  planet1 = planet1.split(\"_\").collect(&:capitalize).join\n  planet2 = planet2.split(\"\
    _\").collect(&:capitalize).join\n  planet1 = planet1.split(\"_\").collect(&:capitalize).join\n\
    \  planet2 = planet2.split(\"_\").collect(&:capitalize).join\n  planet1 = planet1.split(\"\
    _\").collect(&:capitalize).join\n  planet2 = planet2.split(\"_\").collect(&:capitalize).join\n\
    \  planet1 = planet1.split(\"_\").collect(&:capitalize).join\n  planet2 = planet2.split(\"\
    _\").collect(&:capitalize).join\n  planet1 = planet1.split(\"_\").collect(&:capitalize).join\n\
    \  planet2 = planet2.split(\"_\").collect(&:capitalize).join\n  planet1 = planet1.split(\"\
    _\").collect(&:capitalize).join\n  planet2 = planet2.split(\"_\").collect(&:capitalize).join\n\
    \  planet1 = planet1.split(\"_\").collect(&:capitalize).join\n  planet2 = planet2.split(\"\
    _\").collect(&:capitalize).join\n  planet1 = planet1.split(\"_\").collect(&:capitalize).join\n\
    \  plan", "  if planet1 == 'Mercury' && planet2 == 'Venus'\n    p =['Mercury',\
    \ 'Jupiter', 'Saturn', 'Uranus', 'Neptune']\n  elsif planet1 == 'Earth' && planet2\
    \ == 'Mercury'\n    p = ['Earth', 'Venus', 'Mars', 'Jupiter', 'Saturn', 'Uranus',\
    \ 'Neptune']\n  elsif planet1 == 'Mars' && planet2 == 'Earth'\n    p = ['Mars',\
    \ 'Jupiter', 'Saturn', 'Uranus', 'Neptune', 'Earth', 'Venus']\n  elsif planet1\
    \ == 'Jupiter' && planet2 == 'Mars'\n    p = ['Jupiter', 'Saturn', 'Uranus', 'Neptune',\
    \ 'Earth', 'Venus', 'Mars']\n  elsif planet1 == 'Saturn' && planet2 == 'Jupiter'\n\
    \    p = ['Saturn', 'Uranus', 'Neptune', 'Earth', 'Venus', 'Mars', 'Jupiter']\n\
    \  elsif planet1 == 'Uranus' && planet2 == 'Saturn'\n    p = ['Uranus', 'Neptune',\
    \ 'Earth', 'Venus', 'Mars', 'Jupiter', 'Saturn']\n  elsif planet1 == 'Neptune'\
    \ && planet2 == 'Uranus'\n    p = ['Neptune', 'Earth', 'Venus', 'Mars', 'Jupiter',\
    \ 'Saturn', 'Uranus']\n  elsif planet1 == 'Venus' && planet2 == 'Earth'\n    p\
    \ = ['Venus', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune', 'Earth']\n  elsif\
    \ planet1 == 'Earth' && planet2 == 'Mars'\n    p = ['Earth', 'Mars', 'Jupiter',\
    \ 'Saturn', 'Uranus', 'Neptune', 'Venus']\n  elsif planet1 == 'Mars' && planet2\
    \ == 'Earth'\n    p = ['Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune', 'Earth',\
    \ 'Venus']\n  elsif planet1 == 'Jupiter' && planet2 == 'Mars'\n    p = ['Jupiter',\
    \ 'Saturn', 'Uranus', 'Neptune', 'Earth', 'Venus', 'Mars']\n  elsif planet1 ==\
    \ 'Saturn' && planet2 == 'Jupiter'\n    p = ['Saturn', 'Uranus', 'Neptun", " \
    \ arr = []\n  if (planet1 == planet2)\n    arr << planet1\n  elsif (planet1 ==\
    \ \"Mercury\" and planet2 == \"Venus\")\n    arr << planet2\n  elsif (planet1\
    \ == \"Venus\" and planet2 == \"Earth\")\n    arr << planet2\n  elsif (planet1\
    \ == \"Earth\" and planet2 == \"Mars\")\n    arr << planet2\n  elsif (planet1\
    \ == \"Mars\" and planet2 == \"Jupiter\")\n    arr << planet2\n  elsif (planet1\
    \ == \"Jupiter\" and planet2 == \"Saturn\")\n    arr << planet2\n  elsif (planet1\
    \ == \"Saturn\" and planet2 == \"Uranus\")\n    arr << planet2\n  elsif (planet1\
    \ == \"Uranus\" and planet2 == \"Neptune\")\n    arr << planet2\n  elsif (planet1\
    \ == \"Mercury\" and planet2 == \"Earth\")\n    arr << planet1\n  elsif (planet1\
    \ == \"Venus\" and planet2 == \"Earth\")\n    arr << planet1\n  elsif (planet1\
    \ == \"Earth\" and planet2 == \"Mars\")\n    arr << planet1\n  elsif (planet1\
    \ == \"Mars\" and planet2 == \"Jupiter\")\n    arr << planet1\n  elsif (planet1\
    \ == \"Jupiter\" and planet2 == \"Saturn\")\n    arr << planet1\n  elsif (planet1\
    \ == \"Saturn\" and planet2 == \"Uranus\")\n    arr << planet1\n  elsif (planet1\
    \ == \"Uranus\" and planet2 == \"Neptune\")\n    arr << planet1\n  elsif (planet1\
    \ == \"Mercury\" and planet2 == \"Mars\")\n    arr << planet2\n  elsif (planet1\
    \ == \"Venus\" and planet2 == \"Mars\")\n    arr << planet2\n  elsif (planet1\
    \ == \"Earth\" and planet2 == \"Jupiter\")\n    arr << planet2\n  elsif (planet1\
    \ == \"Mars\" and planet2 == \"Jupiter\")\n    arr << planet2\n", "  planet1 =\
    \ planet1.to_s\n  planet2 = planet2.to_s\n  if planet1 == planet2\n    planet1\
    \ = get_planet(planet1)\n    planet2 = get_planet(planet2)\n    orbits1 = get_orbits(planet1)\n\
    \    orbits2 = get_orbits(planet2)\n    \n    orbits1.each do |orbit|\n      next\
    \ if orbit2 == orbit\n      next if orbit1 == orbit\n      orbits_between = orbits_between(orbit,\
    \ orbit2)\n      \n      orbits_between.each do |orbit2|\n        if planet1.to_s\
    \ == orbit2.to_s\n          planets = get_planets_between(orbit, orbit2)\n   \
    \       \n          planets.sort_by! { |planet| planet.to_s }\n          \n  \
    \        return planets\n        end\n      end\n    end\n    \n    []\n  end\n\
    end\n</code>\n<|/ q dscore=0 |>\n<| c |>\nWhat have you tried so far and what\
    \ are you having problems with?\n<|/ c |>\n<| c |>\nI have tried to solve it but\
    \ it is not working. What I did was to find the orbits of planet1 and planet2\
    \ and get the planets that come in between them. But it is not working.\n<|/ c\
    \ |>\n<| c |>\nWhat is `orbits_between`?\n<|/ c |>\n<| c |>\nI have included that\
    \ method in the question\n<|/ c |>\n<| c |>\nI believe your logic here is flawed.\
    \ Why should `\"Earth\"` be returned when `\"Mercury\"` and `\"Neptune\"` are\
    \ within the orbit of `\"Jupiter\"`? What if `\"Mars\"`, `\"Jupiter\"`, and `\"\
    Saturn\"` were within orbit of `\"Uranus\"`?\n<|/ c |>\n<| a |>\nThe method orbits_between\
    \ is really straightforward. \nIt calculates the distance between a planet and\
    \ its orbit and returns the distance of every orbit of the planet to the sun between\
    \ the two orbits. \n<code>", "    \n    if planet1.downcase == \"jupiter\" or\
    \ planet1.downcase == \"mercury\" or planet1.downcase == \"venus\" or planet1.downcase\
    \ == \"earth\"\n    then\n        puts planet1.downcase + \"'s orbit orbits the\
    \ sun\"\n        puts planet2.downcase + \"'s orbit orbits the sun\"\n       \
    \ \n    elsif planet2.downcase == \"jupiter\" or planet2.downcase == \"mercury\"\
    \ or planet2.downcase == \"venus\" or planet2.downcase == \"earth\"\n    then\n\
    \        puts planet1.downcase + \"'s orbit orbits the sun\"\n        puts planet2.downcase\
    \ + \"'s orbit orbits the sun\"\n    \n    elsif planet1.downcase == \"mars\"\
    \ or planet1.downcase == \"jupiter\" or planet1.downcase == \"saturn\" or planet1.downcase\
    \ == \"uranus\" or planet1.downcase == \"neptune\"\n    then\n        puts planet1.downcase\
    \ + \"'s orbit orbits the sun\"\n        puts planet2.downcase + \"'s orbit orbits\
    \ the sun\"\n    \n    elsif planet2.downcase == \"mars\" or planet2.downcase\
    \ == \"jupiter\" or planet2.downcase == \"saturn\" or planet2.downcase == \"uranus\"\
    \ or planet2.downcase == \"neptune\"\n    then\n        puts planet1.downcase\
    \ + \"'s orbit orbits the sun\"\n        puts planet2.downcase + \"'s orbit orbits\
    \ the sun\"\n    \n    elsif planet1.downcase == \"sun\" or planet1.downcase ==\
    \ \"earth\" or planet1.downcase == \"mars\" or planet1.downcase == \"jupiter\"\
    \ or planet1.downcase == \"saturn\" or planet1.downcase == \"uranus\" or planet1.downcase\
    \ == \"neptune\"\n    then\n        puts planet1.downcase + \"'s orbit orbits\
    \ the sun\"\n        puts planet2.downcase + \"'s orbit orbits the sun\"\n   \
    \ \n    elsif planet2.downcase == \"sun\" or planet2.downcase == \"earth\" or\
    \ planet2.downcase == \"mars\" or planet2.downcase == \"jupiter\" or planet2.downcase\
    \ == \"saturn\" or planet2.downcase == \"uran", "\tif planet1 == planet2\n\t\t\
    return []\n\telse \n\t\tsun_r = Sun.r\n\t\tsun_i = Sun.i\n\t\tsun_v = Sun.v\n\t\
    \tplanet_r = Planets[planet1].r\n\t\tplanet_i = Planets[planet1].i\n\t\tplanet_v\
    \ = Planets[planet1].v\n\t\tplanet_v_r = Planets[planet2].r\n\t\tplanet_v_i =\
    \ Planets[planet2].i\n\t\tplanet_v_v = Planets[planet2].v\n\t\ta = (planet_r *\
    \ planet_v_r) - (planet_i * planet_v_i)\n\t\tb = (planet_r * planet_v_v) - (planet_i\
    \ * planet_v_r)\n\t\tc = planet_r * planet_i\n\t\td = planet_v * planet_i\n\t\t\
    e = (planet_r * planet_i) - (planet_i * planet_r)\n\t\tf = (planet_r * planet_v)\
    \ - (planet_i * planet_v)\n\t\tg = planet_r * planet_v\n\t\th = planet_i * planet_v\n\
    \t\ti = planet_v_r * planet_i\n\t\tj = planet_v_i * planet_r\n\t\tk = planet_v_v\
    \ * planet_r\n\t\tl = planet_v_i * planet_v\n\t\tm = planet_r * planet_i\n\t\t\
    n = planet_i * planet_r\n\t\to = (planet_r * planet_v) - (planet_i * planet_v)\n\
    \t\tp = sun_r * sun_i * sun_v\n\t\tq = sun_i * sun_r * sun_v\n\t\tr = (sun_r *\
    \ sun_i * sun_v) - (sun_i * sun_r * sun_v)\n\t\ts = sun_r * sun_v\n\t\tsun_planets\
    \ = []\n\t\tsun_planets << Planets[planet1]\n\t\tsun_planets << Planets[planet2]\n\
    \t\tsun_planets.uniq.sort!", "    planet1\n    planet2\n    planet1 = planet1.capitalize\n\
    \    planet2 = planet2.capitalize\n    planet1 = planet1.split(\", \")\n    planet2\
    \ = planet2.split(\", \")\n    \n    if planet1.include?(planet2) && planet2.include?(planet1)\n\
    \        planet1.include?(planet2) && planet2.include?(planet1) \n        \n \
    \       planet1 = planet1.select{|x| bf.call(x,planet2) }\n        planet2 = planet2.select{|x|\
    \ bf.call(x,planet1) }\n        \n    elsif planet1.include?(planet2)\n      \
    \  planet1.include?(planet2) \n        \n        planet1 = planet1.select{|x|\
    \ bf.call(x,planet2) }\n        \n    elsif planet2.include?(planet1)\n      \
    \  planet2.include?(planet1) \n        \n        planet2 = planet2.select{|x|\
    \ bf.call(x,planet1) }\n        \n    else\n        []\n    end\nend", "    planets\
    \ = [planet1, planet2]\n    planets.each do |planet|\n        if planet == \"\
    Mercury\" \n            planet1 = \"Earth\"\n            planet2 = \"Venus\"\n\
    \        elsif planet == \"Venus\" \n            planet1 = \"Earth\"\n       \
    \     planet2 = \"Mercury\"\n        elsif planet == \"Earth\"\n            planet1\
    \ = \"Mars\"\n            planet2 = \"Jupiter\"\n        elsif planet == \"Mars\"\
    \ \n            planet1 = \"Jupiter\"\n            planet2 = \"Earth\"\n     \
    \   elsif planet == \"Jupiter\" \n            planet1 = \"Saturn\"\n         \
    \   planet2 = \"Uranus\"\n        elsif planet == \"Saturn\" \n            planet1\
    \ = \"Uranus\"\n            planet2 = \"Neptune\"\n        elsif planet == \"\
    Uranus\" \n            planet1 = \"Neptune\"\n            planet2 = \"Mars\"\n\
    \        elsif planet == \"Neptune\" \n            planet1 = \"Mercury\"\n   \
    \         planet2 = \"Mercury\"\n        else\n            planet1 = \"Mercury\"\
    \n            planet2 = \"Venus\"\n        end\n    end\n    planet1 = [\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    ]\n    planet2 = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"\
    Saturn\", \"Uranus\", \"Neptune\"]\n    planet3 = [\"Mercury\", \"Venus\", \"\
    Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    planet4\
    \ = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"\
    Uranus\", \"Neptune\"]\n    planet5 = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    planet6 = [\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    ]\n    planet7 = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"\
    Saturn\", \"Uranus\", \"Neptune\"]\n    planet8 = [\"Mercury\", \"", "  \n  #\
    \ Your code here.\n  return []\nend\n</cell>\n<cell>", "  if planet1 == planet2\n\
    \    puts []\n  elsif planet1 == \"Sun\" or planet2 == \"Sun\"\n    puts [\"Sun\"\
    ]\n  else\n    puts [planet1] + bf(planet2, planet1)\n  end\nend", "  puts planet1\
    \ + \" \" + planet2 \n  planet1.to_i + planet2.to_i\n  puts \"Planets are #{planet1}\
    \ and #{planet2}\"\n  if planet1 == planet2\n    puts \"Planets are the same\"\
    \n  elsif planet1 == planet1.to_i || planet1 == planet1.to_i + 1\n    puts \"\
    Planet #{planet1} is less than #{planet1}\"\n  elsif planet1 == planet2.to_i ||\
    \ planet1 == planet2.to_i + 1\n    puts \"Planet #{planet2} is less than #{planet2}\"\
    \n  else\n    puts \"No such planets\"\n  end\n  \n  if planet1 == planet1.to_i\
    \ || planet1 == planet1.to_i + 1\n    puts \"Planet #{planet1} is less than #{planet1}\"\
    \n  elsif planet2 == planet2.to_i || planet2 == planet2.to_i + 1\n    puts \"\
    Planet #{planet2} is less than #{planet2}\"\n  else\n    puts \"No such planets\"\
    \n  end\n  \n  planet1 = gets.chomp\n  planet2 = gets.chomp\n  \n  i = planet1.to_i\n\
    \  j = planet2.to_i\n  \n  while i < j\n    puts i\n    puts j\n    puts \"Planets\
    \ are #{planet1} and #{planet2}\"\n    if planet1 == planet2\n      puts \"Planets\
    \ are the same\"\n    elsif planet1 == planet1.to_i || planet1 == planet1.to_i\
    \ + 1\n      puts \"Planet #{planet1} is less than #{planet1}\"\n    elsif planet1\
    \ == planet2.to_i || planet1 == planet2.to_i + 1\n      puts \"Planet #{planet2}\
    \ is less than #{planet2}\"\n    else\n      puts \"No such planets\"\n    end\n\
    \    \n    if planet1 == planet1.to_i || planet1 == planet1.to_i + 1\n      puts\
    \ \"Planet #{planet1} is less than #{planet1}\"\n    elsif planet2 == planet2.to_i\
    \ || planet2 == planet2.to_i + 1\n      puts \"Planet #{planet2} is less than\
    \ #{planet2}\"\n    else\n      puts \"No such planets\"\n    end\n    \n", " \
    \   planet1orbit = []\n    planet2orbit = []\n    sunorbit = []\n    planet1orbit\
    \ << Mercury\n    planet1orbit << Venus\n    planet1orbit << Earth\n    planet1orbit\
    \ << Mars\n    planet1orbit << Jupiter\n    planet1orbit << Saturn\n    planet1orbit\
    \ << Uranus\n    planet1orbit << Neptune\n    planet2orbit << Mercury\n    planet2orbit\
    \ << Venus\n    planet2orbit << Earth\n    planet2orbit << Mars\n    planet2orbit\
    \ << Jupiter\n    planet2orbit << Saturn\n    planet2orbit << Uranus\n    planet2orbit\
    \ << Neptune\n    sunorbit << Mercury\n    sunorbit << Venus\n    sunorbit <<\
    \ Earth\n    sunorbit << Mars\n    sunorbit << Jupiter\n    sunorbit << Saturn\n\
    \    sunorbit << Uranus\n    sunorbit << Neptune\n    orbit1 = planet1orbit.find_all\
    \ {|orbit| planet1.to_i == orbit.to_i }\n    orbit2 = planet2orbit.find_all {|orbit|\
    \ planet2.to_i == orbit.to_i }\n    orbits = sunorbit + orbit1 + orbit2\n    orbits\
    \ = orbits.sort{|a, b| a.to_i - b.to_i}\n    orbits.reverse!\n    orbits\nend\n\
    </code>\n<|/ a tags=ruby |>\n<| c |>\nYou do realize that this doesn't really\
    \ answer the question?\n<|/ c |>\n<| c |>\nI didn't realize that I had to sort\
    \ all the orbits! Thanks so much!\n<|/ c |>\n<| c |>\n, no problem! Sorry, I forgot\
    \ to mention that in cases like this, the Ruby community has a bit of helpful\
    \ tools to aid in your debugging efforts. I tend to just `puts` statements instead\
    \ of `puts orbits` because it is easy to read the output, and if there are any\
    \ errors it becomes obvious.\n<|/ c |>\n<| a |>\n<code>", "  if planet1 == \"\
    Mars\" or planet1 == \"Mercury\" or planet1 == \"Jupiter\" or planet1 == \"Saturn\"\
    \ or planet1 == \"Uranus\" or planet1 == \"Neptune\" or planet1 == \"Earth\" or\
    \ planet1 == \"Venus\"\n    planet1.upcase!=\"MERCURY\" and planet1.upcase!=\"\
    JUPITER\" and planet1.upcase!=\"SATURN\" and planet1.upcase!=\"URANUS\" and planet1.upcase!=\"\
    NEPTUNE\" and planet1.upcase!=\"EARTH\" and planet1.upcase!=\"VENUS\"\n  end\n\
    \  if planet2 == \"Mars\" or planet2 == \"Mercury\" or planet2 == \"Jupiter\"\
    \ or planet2 == \"Saturn\" or planet2 == \"Uranus\" or planet2 == \"Neptune\"\
    \ or planet2 == \"Earth\" or planet2 == \"Venus\"\n    planet2.upcase!=\"MERCURY\"\
    \ and planet2.upcase!=\"JUPITER\" and planet2.upcase!=\"SATURN\" and planet2.upcase!=\"\
    URANUS\" and planet2.upcase!=\"NEPTUNE\" and planet2.upcase!=\"EARTH\" and planet2.upcase!=\"\
    VENUS\"\n  end\n  if planet1 == planet2\n    []\n  elsif planet1.upcase == planet2.upcase\n\
    \    [planet1]\n  else\n    planet1.upcase!=\"MERCURY\" and planet1.upcase!=\"\
    JUPITER\" and planet1.upcase!=\"SATURN\" and planet1.upcase!=\"URANUS\" and planet1.upcase!=\"\
    NEPTUNE\" and planet1.upcase!=\"EARTH\" and planet1.upcase!=\"VENUS\"\n    planet2.upcase!=\"\
    MERCURY\" and planet2.upcase!=\"JUPITER\" and planet2.upcase!=\"SATURN\" and planet2.upcase!=\"\
    URANUS\" and planet2.upcase!=\"NEPTUNE\" and planet2.upcase!=\"EARTH\" and planet2.upcase!=\"\
    VENUS\"\n    \n    orbit_of_planet1=planet1.orbit(Date.today)\n    orbit_of_planet2=planet2.orbit(",
  "end\n</cell>\n<text>\nQuestions\nWhat's the number of orbits in the Sun? \nWhat\
    \ is the number of orbits in the moon?\nWhat is the total orbital distance between\
    \ the Sun and the moon? \nHow many orbital distances are there between the moon\
    \ and the Earth?\nAre there two planets called Earth that have exactly the same\
    \ orbital distance? If yes, why? \nHow many times are there an orbit in the moon?\n\
    How many times are there an orbit in the Sun?\nGiven the name of a planet, how\
    \ would you find the distance to the moon in that planet?\nWhat is the distance\
    \ between the Moon and the Sun? \nHow many days are there between the Sun and\
    \ the Moon?\nWhat's the distance to the nearest planet?\nWhat is the distance\
    \ to the nearest planet?\nWrite a function that takes two planet names as strings\
    \ as input parameters. \nThe function should return an array containing all planets\
    \ whose orbits are \nlocated between the orbit of planet1 and the orbit of planet2,\
    \ sorted by \nthe proximity to the sun. \nThe function should return an empty\
    \ array if planet1 or planet2\nare not correct planet names. \nExamples\n>>> bf.call(\"\
    Jupiter\", \"Neptune\")\n[\"Saturn\", \"Uranus\"]\n>>> bf.call(\"Earth\", \"Mercury\"\
    )\n\"Venus\"\n>>> bf.call(\"Mercury\", \"Uranus\")\n[\"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\"]\nWhat is the name of the planet that is the nearest\
    \ planet to Earth?\nHow many days are there between the Sun and the Moon?\nWhat's\
    \ the distance to the nearest planet?\nWrite a function that takes two planet\
    \ names as strings as input parameters. \nThe function should return an array\
    \ containing all planets whose orbits are \nlocated between the orbit of planet1\
    \ and the orbit of planet2, sorted by \nthe proximity to the sun. \nThe function\
    \ should return an empty array if planet1 or planet2\nare not correct planet names.\
    \ \nExamples\n>>> bf.call(\"Jupiter\", \"Neptune\")\n[\"Saturn\", \"Uranus\"]\n\
    >>> bf.call(\"Earth\", \"Mercury\")\n\"Venus\"\n>>> bf.call(\"Mercury\", \"Uranus\"\
    )\n[\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\nWhat is the name\
    \ of the planet that is the nearest planet to Earth?\nWrite a function that takes\
    \ two ", "\torbit1= planet1[:3].upcase\n\torbit2= planet2[:3].upcase\n\tif orbit1\
    \ == orbit2\n\t\tif orbit1.downcase == \"SUN\"\n\t\t\tputs \"Sun\"\n\t\t\treturn\
    \ []\n\t\telse \n\t\t\tputs orbit1 + orbit2 + \" in orbit\"\n\t\t\treturn orbit1\n\
    \telse \n\t\tif orbit1 ==\"SUN\"\n\t\t\tif orbit2.downcase == \"SUN\"\n\t\t\t\t\
    puts \"Sun\"\n\t\t\t\treturn []\n\t\t\telse \n\t\t\t\tputs \"Earth\"\n\t\t\t\t\
    return \"Venus\"\n\t\telsif orbit2.downcase == \"SUN\"\n\t\t\tputs \"Sun\"\n\t\
    \t\treturn []\n\t\telse \n\t\t\tputs orbit1 + orbit2 + \" in orbit\"\n\t\t\treturn\
    \ orbit2\n\tend\nend"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
