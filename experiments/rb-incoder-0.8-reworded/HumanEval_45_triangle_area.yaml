name: HumanEval_45_triangle_area
language: rb
prompt: "# Given length of a side and high return area for a triangle.\n# >>> triangle_area.call(5,\
  \ 3)\n# 7.5\ndef triangle_area(a, h)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_triangle_area\n\
  \    candidate = method(:triangle_area)\n    assert_equal(7.5, candidate.call(5,\
  \ 3))\n    assert_equal(2.0, candidate.call(2, 2))\n    assert_equal(40.0, candidate.call(10,\
  \ 8))\n  end\nend\n"
completions: ["  return 2.0 * a * a * h / 3\nend", "\tarea = a * (sin (a/2)*cos (h/2))\n\
    \treturn area\nend", "  s = (a + h) / 2.0\n  area = s * (s - a) * (s - h)\n  puts\
    \ \"#{area}\".to_i\nend", "\t(a*h)/2\nend", "  return (a * h * 0.5) / 3.0 # Given\
    \ length of a side and high return area for a triangle.\nend", "  (a * (b * h))\
    \ / 2\nend", "  (a * (h ** 2)) / 2\nend", "  return (a**0.5) * Math.tan(Math.PI*(a/h))\n\
    end\n</cell>\n<code language=julia-1.5>\n@assert triangle_area(5, 3) == 7.5\n\
    </cell>\n<text>\n5.3 Exercise 5.22: Area of a right triangle with sides given\
    \ as (length,height) and return area of the triangle", "  (a*h*h)/2\nend", " \
    \ (h**2)*(0.5*(2*a-h)**2+(a+h)**2)\nend\n</cell>\n<code language=julia-1.5>",
  "  return a * (sqrt(3) * (h + h / 2) - (h / 2))\nend", "  (a**2).floor * h\nend",
  "  (a * a * h) / (3 * (2 * a))\nend", "  ((h * h) - (a * a)) * Math.sqrt(Math.pow(h\
    \ / 2, 2) + Math.pow((h * h) / 2, 2))\nend", "  m = (2*h)/a\n  area_tri = 2*h*sqrt(3)/(a*(a-1))\n\
    \  area_tri = area_tri * m\n  return area_tri\nend\n\"\"\"\n  ", "  a**2 - h*h\n\
    end", "  return a/2 * sqrt(h**2 / 4 - a*h)\nend", "  (a*h*h)/2\nend", "  r = a\
    \ * math.sqrt(3)\n  area = (h * h * r) - (r * r)\nend\n</cell>\n<text>\nWe define\
    \ the area of triangles of length $a$ and height $h$ as follows:\n$$\n\\begin{align}\n\
    \ area & = ah^2 \\\n           &= \\frac{h^2}{3} \\left( \\sqrt{3} + \\sqrt{3}\
    \ + \\sqrt{3} \\right) \\\n           & = \\frac{h^2}{12}\n\\end{align}\n$$",
  "  a * a * (1 - Math.sqrt(1 - (h / a) ** 2))\nend", "  # Straight line equation\
    \ of a triangle is a*x + b*y + c*z + d = 0\n  # Find a, b, c and d\n  a,b,c,d\
    \ = [a || 0, b || 0, c || 0, d || 0]\n  # Return a*h*b/(a+b+c)*h\n  a * h * b\
    \ / (a+b+c) * h\nend", "  (a * h) / 2\nend", "  (a.length + h) * sqrt(3)\nend",
  "  return a * h / b * b\nend\n</code>\nAnd we add some tests for our new function\
    \ :\n<code>", "  (a*h).to_f*(a*h+2*a).to_f/3\nend", "  (a*h**2).to_f\nend", " \
    \ (f * h).to_i\nend\n</pre>\n        </div>\n      </div>\n      <div id=\"section-examples\"\
    >\n        <div id=\"examples\" class=\"section\">\n          <h2>Examples</h2>\n\
    \          <p>\n            There are three examples that you can see below.\n\
    \          </p>\n          <table id=\"examples-table\">\n            <tr>\n \
    \             <th>Example</th>\n              <th>Result</th>\n            </tr>\n\
    \            <tr>\n              <td>\n                <code>triangle_area(2,\
    \ 3)</code>\n              </td>\n              <td><code>5</code>\n         \
    \     </td>\n            </tr>\n            <tr>\n              <td>\n       \
    \         <code>triangle_area(3, 2)</code>\n              </td>\n            \
    \  <td><code>5</code>\n              </td>\n            </tr>\n            <tr>\n\
    \              <td>\n                <code>triangle_area(10, 5)</code>\n     \
    \         </td>\n              <td><code>25</code>\n              </td>\n    \
    \        </tr>\n          </table>\n        </div>\n      </div>\n      <div id=\"\
    section-documentation\">\n        <div id=\"documentation\" class=\"section\"\
    >\n          <h2>Documentation</h2>\n          <ul>\n            <li>\n      \
    \        <a href=\"http://rubydoc.info/github/pratikf/ruby_maths/master/RubyMaths/Maths.html\"\
    >\n                RubyMaths\n              </a>\n            </li>\n        \
    \    <li>\n              <a href=\"http://github.com/pratikf/ruby_maths\">\n \
    \               RubyMaths GitHub\n              </a>\n            </li>\n    \
    \      </ul>\n        </div>\n      </div>\n      <div id=\"section-license\"\
    >\n        <div id=\"license\" class=\"section\">\n          <h2>License</h2>\n\
    \          <p>\n            The MIT License\n          </p>\n          <p>\n \
    \           Copyright (c) 2005 Patrik P. Minko\n          </p>\n          <p>\n\
    \            Permission is hereby granted, free of charge, to any person\n   \
    \         obtaining a copy of this software and associated documentation\n   \
    \         files (the \"Software\"), to deal in the Software without\n        \
    \    limitation , including without limitation the rights to use,\n          \
    \  copy, modify, merge, publish, distribute, sublicense, and/or sell\n       \
    \     copies of the Software, and to permit persons to whom the\n            Software\
    \ is furnished to do so, subject to the following\n            conditions:\n \
    \         </p>\n          <p>\n            The above copyright notice and this\
    \ permission notice shall be\n            included in all copies or substantial\
    \ portions of the Software.\n          </p>\n          <p>\n            THE SOFTWARE\
    \ IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n            EXPRESS OR\
    \ IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES\n            OF MERCHANTABILITY,\
    \ FITNESS FOR A PARTICULAR PURPOSE AND\n            NONINFRINGEMENT. IN NO EVENT\
    \ SHALL THE AUTHORS OR COPYRIGHT\n            HOLDERS BE LIABLE FOR ANY CLAIM,\
    \ DAMAGES OR OTHER LIABILITY,\n            WHETHER IN AN ACTION OF CONTRACT, TORT\
    \ OR OTHERWISE, ARISING\n            FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE\
    \ OR THE USE OR\n            OTHER DEALINGS IN THE SOFTWARE.\n          </p>\n\
    \        </div>\n      </div>\n    </div>\n    <div id=\"footer\">\n      <div\
    \ id=\"footer-copy\">\n        Copyright &copy; 2005-2011 Sam Potter\n      </div>\n\
    \    </div>\n  </div>\n  <script id=\"footer-source\" type=\"text/javascript\"\
    >\n    (function() {\n      var src = (document.location.protocol || \"http:\"\
    ) + \"//\" +\n          (document.location.hostname || document.location.", " \
    \ (a*h*sqrt(3)).to_f\nend", "  ((b - a + h) / 2, 2 * b * h + a)\nend", "  (a *\
    \ b / Math.sqrt(3 * a * b / h)).floor\nend\n</cell>\n<code language=julia-0.6>",
  "  (a**2 / (h**2)).floor\nend", "  t = a/h\n  s = (t - math.sqrt(t*t) - t*t)*0.5\n\
    \  return s\nend", "  (a ** 2 + h ** 2) * (1 + a / 3 + h / 4) / Math.sqrt(a **\
    \ 2 + h ** 2)\nend\n</cell>\n<code language=julia-0.6>", "\treturn a*h / (a*a\
    \ + h*h / 2)\nend", "  (a*h)/2\nend", "  return a * (sin ( 2 * pi * h / a ))\n\
    end", "  (a*b)*(a*h-b*h)\nend", "  (a * a * h / 3).to_f\nend", "  (a * h) / 2\n\
    end", "  s = (a * h) / 2\n  h2 = (s * s) / 2\n  s2 = (h2 * s) / 2\n  area = s2\
    \ + a2\n  return area\nend", "  (a * h) / 2\nend", "  return (a**2) * (h**2) /\
    \ (4 * 3.14 * Math::PI)\nend", '  return a*(sin((pi*h)/2))**.5', "  (a^2 + h^2)^0.5\n\
    end", "  area_of_triangle = 2*(a+h)*(a+h)\n  area_of_triangle * Math.sqrt(a/(2*a\
    \ + h))\nend", "  (a * h) / ((2 * a) + h)\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert triangle_area(2, 1) == 0.5\n@assert triangle_area(3, 2) == 0.75\n@assert\
    \ triangle_area(2.5, 1) == 1.5\n@assert triangle_area(5, 3) == 7.5\n@assert triangle_area(2.5,\
    \ 3.5) == 2\n@assert triangle_area(5, 2.5) == 3\n@assert triangle_area(10, 5)\
    \ == 30\n</cell>\n<text>\nExercise 7\nWrite a function that creates a triangle.\n\
    Write a function called is_triangle that returns a Bool.\nWrite a function called\
    \ area that returns the area of the triangle.\nWrite a function called perimeter\
    \ that returns the perimeter of the triangle.\nWrite a function called length\
    \ that returns the length of the triangle.\nWrite a function called volume that\
    \ returns the volume of the triangle.", "  return (a * h) / 2\nend", "    (a **\
    \ 2) * h \nend\nputs triangle_area.call(5, 3)", "  (2 * a * h) / 2\nend", "  (a\
    \ ** 2) * h / 2\nend\n</code>\n<|/ a dscore=1 |>\n<| c |>\nIt would be helpful\
    \ to show some pseudocode.\n<|/ c |>\n<| a dscore=1 |>\n<code>", "  (a * a * h\
    \ - b * b * h) / ((a * b) + (b * a))\nend", "  (a * b * SQRT2) / SQRT2 * SQRT2\n\
    end", "  a**2 + h**2 - (a + h)**2\nend", "  (a**2.0 + h**2.0)**0.5\nend", "  ((a\
    \ * b) - (a * h)) / 2\nend", "  (a**2 - h**2)**.5\nend", "  (a * (b ** (h / 3)\
    \ - a * a * h / 3)) * math.sin(180 / (h * (b ** (h / 3) - a * a * h / 3)))\nend",
  "    area = (h * h) - (a * a)\n    return area\nend", "  return (a * ((4*h + 5**0.5)/3**0.5)**0.5)\n\
    end", "    a + b + c + d\nend", "    (a * h) / 2\nend", "\treturn (a*h)/2\nend",
  "  h / 2.0 - a * Math.sin(a * Math::PI/180)\nend", "  # Convert length to radians.\n\
    \  rad = (a * (2 * Math::PI)) / 180", "  tri_area_calc = (math.sqrt(2)/2)*a*(h*h/2-a*a/2)\n\
    \  puts tri_area_calc\nend", "  h / (0.5 * Math::sqrt(3 * a * a)) * Math::sin(Math::PI\
    \ / 3)\nend\n</code>\n<|/ a tags=ruby,methods dscore=2 |>\n<| a dscore=2 tags=ruby,methods\
    \ |>\nHere's a solution which uses no global variables, no class variables, and\
    \ no recursion.\n<code>", "  s = (a/2)*((h/2)**2)\n  c = (s/2) - (a/2)\n  area\
    \ = (s*(s+c))/2\n  return area\nend", "  m = (2**a).to_f / h\n  a = a / 2\n  \n\
    \  (2 * m**2).to_f * h \nend", "  (a * h / 2).to_f\nend\n</code>\n<|/ a dscore=0\
    \ |>\n<| a |>\nThis is my first post here, sorry if I don't include enough information.\
    \ I'm trying to build a ruby program that can find the area of a triangle given\
    \ three lengths. I tried to break it down into two parts, one that can find the\
    \ area of a triangle given three lengths, and another that can find the area of\
    \ a triangle given two lengths, and then combine the two together and find an\
    \ area given only one length, but I keep getting an error that says \"undefined\
    \ method `/' for nil:NilClass\". I'm not sure why this is.\n<code>", "  return\
    \ h * sqrt(a * (4 - a))\nend", "  (a * a * Math.sqrt(3) / 2.0).to_f\nend", " \
    \ return (a**h / 2) ** (1.0/3)\nend", "  # Write your code here.\n  return a*h/2;",
  "  (a**2 - h*(a-2)).to_f / (2.*a).to_f\nend\n</code>\n<|/ a dscore=2 |>\n<| c |>\n\
    The OP is asking for a **triangle** and not a regular shape. Your solution won't\
    \ work.\n<|/ c |>\n<| c |>\nYes, you can, by changing the line `(a*a*(1-a))` to\
    \ `(a*a*(1+a))` and the line `((1+a)*a*(1+a))` to `((1+a)*a*(1-a))`. See [here](https://rubberduckdebugging.com/s/awesome-lol)\
    \ for an explanation of how it works.\n<|/ c |>\n<| a tags=ruby |>\nAnother approach:\n\
    <code>", "  (a ** 2) + ((a + h) ** 2) * h\nend", "  return a * b / sqrt((a **\
    \ 2) + (b ** 2) + (c ** 2))\nend", "  (a**2)*(h**2)\nend", "  a_res = a * a #\
    \ squared side length\n  h_diff = h - a_res # difference of height of triangle\
    \ from base\n  area_tri = (h_diff / 2) / math.sqrt(a_res * h_diff * h_diff)\n\
    \  area_tri.round(2)\nend", "  (a*h*h)/2\nend", "  (a**2-4*h**2)/3\nend", "  (h\
    \ - 2 + a**2) * (3 * a) / (2*math.sqrt(h))\nend", "  if h == 0 then return 0\n\
    \  else if h > 0 then return a * sqrt(3) / 2 * sin( a / 2 ) * sin( h / 2 )\n \
    \ else if h < 0 then return a * sqrt(3) / 2 * cos( a / 2 ) * cos( h / 2 )\n  else\
    \ return 0\nend\n</code>\nI used the triangle_area function here because it's\
    \ an easy one. But if you wanted to do this with some other equation, then you\
    \ can use the same pattern:\n<code>", "  area_a = triangle_side_length(a) * h\n\
    \  area_b = triangle_side_length(h) * 2 * a\n  area_c = triangle_side_length(h)\
    \ * 2 * a\n  area_d = triangle_side_length(h) * 2 * a", "  ((a**2 + b**2) / 2,\
    \ ((a * b) - (a * h)) / 2)\nend", "  raise NotImplementedError\nend", "  a * a\
    \ * Math.sqrt(1 + (h / a) * (h / a))\nend", "  h ||= a\n  a * (h / 2.0 - sqrt(h**2\
    \ - 4.0 * a * h)) / (2.0 * (h + 2.0 * a))\nend", "  return a * h / 2\nend", " \
    \ a * h / 2\nend\n</cell>\n<text>\nWe can now run some tests to verify that it\
    \ works:", "  h += h/2\n  a1 = a**2 - h**2\n  a2 = a1 + h**2\n  a3 = a1 + a\n\
    \  a4 = a2 + h\n  a5 = a2 + a\n  a6 = a3 + h\n  a7 = a3 + a\n  a8 =a4 + h\n  a9\
    \ = a4 + a\n  a10 =a5 + a\n  a11 = a5 + h\n  a12 = a6 + a\n  a13 = a6 + h\n  a14\
    \ = a7 + a\n  a15 = a7 + h\n  a16 = a8 + a\n  a17 = a8 + h\n  a18 = a9 + a\n \
    \ a19 = a9 + h\n  a20 = a10 + a\n  a21 = a10 + h\n  a22 = a11 + a\n  a23 = a11\
    \ + h\n  a24 = a12 + a\n  a25 = a12 + h\n  a26 = a13 + a\n  a27 = a13 + h\n  a28\
    \ = a14 + a\n  a29 = a14 + h\n  a30 = a15 + a\n  a31 = a15 + h\n  a32 = a16 +\
    \ a\n  a33 = a16 + h\n  a34 = a17 + a\n  a35 = a17 + h\n  a36 = a18 + a\n  a37\
    \ = a18 + h\n  a38 = a19 + a\n  a39 = a19 + h\n  a40 = a20 + a\n  a41 = a20 +\
    \ h\n  a42 = a21 + a\n  a43 = a21 + h\n  a44 = a22 + a\n  a45 = a22 + h\n  a46\
    \ = a23 + a\n  a47 = a23 + h\n  a48 = a24 + a\n  a49 = a24 + h\n  a50 = a25 +\
    \ a\n  a51 = a25 + h\n  a52 = a26 + a\n  a53 = a26 + h\n  a54 = a27 + a\n  a55\
    \ = a27 + h\n  a56 = a28 + a\n  a57 = a28 + h\n  a58 = a29 + a\n  a59 = a29 +\
    \ h\n  a60 = a30 + a\n  a61 = a30 + h\n  a62 = a31 +a\n  a63 = a31+ h\n  a64 =\
    \ a32 + a\n  a65 = a32 + h\n  a66 = a33 + a\n  a67 = a33 + h\n  a68 = a34 + a\n\
    \  a69 = a", "    triangle_length = triangle_perimeter * a\n    return triangle_length\
    \ * h / a\nend\n</code>\nNow we know triangle_perimeter and triangle_area. We\
    \ can use them to find the area of a triangle by calculating it's area using the\
    \ formula:\n<code>\narea = triangle_area / 2\n</code>\nLet's see what that looks\
    \ like.\n<code>\n3.14159265358979323846264338327950288419716939937510582097494459230781640628620899862803482534211706798214808651328230664709384460955058223172535940812848111745028410270193852110555964462294895493038196442881097566593344612847564823378678316527120190914564856692346034861045432664821339360726024914127372458700660631558817488152092096282925409171536436789259036001133053054882046652138414695194151160943305727036575959195309218611738193261179310511854807446237996274956735188575272489122793818301194912983367336244065664308602139494639522473719070217986094370277053921717629317675508953857126026375529444833799801\n\
    </code>\nOkay, not exactly what we expected. Let's see where things went wrong.\n\
    <code>\n3.1415926535897932384626433832795028841971693993751058209749445923078164062862089986280348253421170679821480865132823066470938446095505822317253594081284811174502841027019385211055596446229489549303819644288109756659334461284756482337867831652712019091456485669234603486104543266482133936072602491412737245870066063155881748815209209628292540917",
  "  triangle_area = h * Math.sqrt(3) / 2 / a\n  return triangle_area\nend\n  ", "\t\
    tri = a + h\n\ts = a * (a + b + c) / 6\n\treturn s\nend", "  a = math.floor(a)\n\
    \  h = math.floor(h)\n  area = 0.0;\n  for i in 0...a\n    for j in 0...h\n  \
    \    area += (i+j) * (i+j+1)\n    area = math.floor(area)\n  end\n  return area\n\
    end", "  (a ** 2) * h / (4 * Math::PI)\nend", "  (h * a) * (2 * a - h) * 0.5\n\
    end", "  return (a**2.0 + h**2.0) * (1.0/3.0) * (1.0/7.5)\nend\n</code>\nThe area\
    \ of a triangle is defined as the product of the sides and the height of a triangle.\
    \ Now we will calculate the perimeter of a triangle using the formula for the\
    \ area of a triangle. The formula for the perimeter of a triangle is the sum of\
    \ all the sides plus half the height of the triangle. Here is the code for the\
    \ perimeter calculation:\n<code>", "  c1 = area_of_triangle(a, b, h) / 2.0\n \
    \ c2 = area_of_triangle(a, c, h) / 2.0\n  c3 = area_of_triangle(a, d, h) / 2.0\n\
    \  c1 = (c1 + c2) / 2\n  c2 = (c3 + c4) / 2\n  return abs(c1 - c2)\nend", "  area\
    \ = a * (h / 2)\n  return\nend", "  (a * h) / 2\nend", "  (a**2) * (h/2 * (h/2-a))\n\
    end", "  ((a**2) * h) / 6\nend", "  # >>> triangle_area(5, 3)\n  # 7.5\n  return\
    \ ( a * (b + c) ) / b + h * ( a * (c - b) ) / c \nend", "  s = 0.5 * a * a * h\
    \ * h / 12\n  area_sq = s * s\n  area_c = sqrt(area_sq * 2 - area_sq / 2)\n  area\
    \ = area_c * area_c / 4\n  return area\nend", "  ((a.length*h)/2)*Math.PI\nend",
  "  a2 = a * a\n  h = h * a", "  (a * b) / 2\nend", "  return a ** 2 + h ** 2 - (2\
    \ * (a + h)) ** 2\nend", "  a * a * ((h - b) / a)\nend\n</code>\n<|/ a tags=ruby\
    \ dscore=0 |>\n<| a tags=ruby dscore=0 |>\nHere's a purely functional implementation\
    \ in Ruby 1.8.7\n<code>", "  (a^2) * h / (3. * a * a)\nend", "  case when h is\
    \ null then 0\n  else abs( sqrt( a^2 + h^2 ) - a ) / h end\nend\n</cell>\n<code\
    \ language=julia-1.3>", "  (a+h)*(a+2*h+h)/2\nend", "  (1/2*(a+h)*sin(a+h)) +\
    \ (1/2*h*sin(a))\nend\n</cell>\n<text>\nExercise 1\nWrite a function that takes\
    \ an angle $\\theta$ and returns the area of a triangle of given side lengths\
    \ $a$ and $b$ using the formula above. Test your function by plotting two triangles\
    \ whose side lengths you have previously defined.", "  h = h * 0.5\n  a = 3.14159265358979323846\n\
    \  sa = (a**2 - h*h)\n  sb = (a**2 - h) / 2\n  sc = (h - a**2) / (2*h)\n  sd =\
    \ (a - h) / 2\n  sa += h\n  sa -= sa/2\n  sa -= sa/2\n  sb += sa/2\n  sb -= sb/2\n\
    \  sb -= sb/2\n  sc += sb/2\n  sc -= sc/2\n  sc -= sc/2\n  sd += sc/2\n  sd -=\
    \ sd /2\n  sd -= sd /2\n  sa *= sa\n  sb *= sb\n  sc *= sc\n  sd *= sd\n  sa *=\
    \ sa\n  sb *= sb\n  sc *= sc\n  sd *= sd\n  sa *= sa\n  sb *= sb\n  sc *= sc\n\
    \  sd *= sd\n  sa *= sa\n  sb *= sb\n  sc *= sc\n  sd *= sd\n  sa *= sa\n  sb\
    \ *= sb\n  sc *= sc\n  sd *= sd\n  sa *= sa\n  sb *= sb\n  sc *= sc\n  sd *= sd\n\
    \  sa *= sa\n  sb *= sb\n  sc *= sc\n  sd *= sd\n  sa *= sa\n  sb *= sb\n  sc\
    \ *= sc\n  sd *= sd\n  sa *= sa\n  sb *= sb\n  sc *= sc\n  sd *= sd\n  sa *= sa\n\
    \  sb *= sb\n  sc *= sc\n  sd *= sd\n  sa *= sa\n  sb *= sb\n  sc *= sc\n  sd\
    \ *= sd\n  sa *= sa\n  sb *= sb\n  sc *= sc\n  sd *= sd\n  sa *= sa\n  sb *= sb\n\
    \  sc *= sc\n  sd *= sd\n  sa *= sa\n  sb *= sb\n  sc *= sc\n  sd *= sd\n  sa\
    \ *= sa\n  sb *= sb\n  sc *= sc\n  sd *= sd\n  sa *= sa\n  sb *= sb\n  sc *= sc\n\
    \  sd *= sd\n  sa *= sa\n  sb *= sb\n  sc *= sc\n  sd *= sd\n  sa *= sa\n  sb\
    \ *= sb\n  sc *= sc\n  sd *= sd", "  ((b+a) * h) / 2\nend", "  (a+b+c)/2 * Math.sqrt(a*a+b*b+c*c)\
    \ - h\nend\n</cell>\n<cell>", "  area_triangle = 5.0/6.0 * a * a * (h * h + 2\
    \ * h)\n  area_triangle * area_triangle\nend", "  h = h.to_f\n  return a * ((a\
    \ * ((h / 2) * h)) - (h / 2)) / 6\nend", "  (a * h)/2\nend", "  a**2 / 4 + h**2\
    \ / 4\nend\n</cell>\n<cell>", "  a = a.to_f\n  h = h.to_f\n  area_of_triangle\
    \ = a*h/2.0 - h*h/2.0\n  if area_of_triangle < 0.0\n    area_of_triangle = 0.0\n\
    \  area_of_triangle\nend", '  return (a**3)/((h)**2)', "  # Write your code here\n\
    \  return a*h/2\nend", "  h = h || a\n  return a * ((sqrt(9*h)/8) - sqrt(h/8))\n\
    end", "  area_triangle = a + b * h # Area of Triangle\n  area_triangle += a *\
    \ b * h # Area of Right Triangle\n  area_triangle += a * b * h # Area of Left\
    \ Triangle\n  return area_triangle\nend\n</pre>\n</div>", "  h * a\nend", "  #\
    \ Check if both sides are equal\n  b = if a == h then 0.0 else a/h\n  # Check\
    \ if side is greater than the second side\n  if a < h then \n    q = if b > h\
    \ then b + h else b + a \n  else \n    q = if b < a then b + a else b + h\n  #\
    \ Return triangle area\n  return(q)\nend\n</code></pre>\n    <pre><code class=\"\
    language-julia\"><script type=\"text/julia\"># Given length of a side and high\
    \ return area for a triangle.", "  (a*h) / 2\nend", "  return 3.1415926535897932384626433/(2*a*h*h)\
    \ - 0.00000000001\nend", "  (a*h)/2\nend\n</cell>\n<cell>", "  return a*h/2\n\
    end\n</cell>\n<cell>", "  return (a+h)*(a+h)*(a+h)\nend", "  h = a\n  a = 3.141592653589793\n\
    \  c = 2.0 * math.asin(h / a)\n  t = 1.0 / 3.0\n  area = t * c * (2.0/3.0 - 2.0*math.sin(2.0*c))\n\
    \  area\nend", "  (1/(2*a*h))**0.5\nend\n</cell>\n<code language=julia-1.5>",
  "  a * Math.sqrt(3)/2 + h * Math.sqrt(3)/2\nend", "  a * h * 0.5\nend", "  (( 2\
    \ * a * h) - ( 3 * a * h ))\nend", "  (a**2 - (a-h)**2)**0.5\nend", "  a /= 2\n\
    \  h /= 2\n  2 * (Math.sqrt((a + h) * ((2 * h) + (a * b))))\nend", "  a = Math.round(a\
    \ * 10^6)\n  h = Math.round(h * 10^6)\n  c = Math.sqrt((a - h) * (a + h) * (h\
    \ - a) * (h - a))\n  return c\nend", "  ((h**2 * a) / 4) - ((a**2) * (h**2))\n\
    end", "  raise NotImplementedError\nend", "  (a**2+h**2-a**2)/2.0\nend", "  (triangle_height(a,\
    \ h)/2) * (1/3) * (1/2)\nend\n</cell>\n<code language=julia-1.5>", "  (a * h *\
    \ 0.5).to_f\nend", "  (a * b * h) / 2\nend\n</code></pre>\n<pre><code class=\"\
    language-bash\">$ ruby hello_world.rb\n5\n7.5\n</code></pre>\n<p>This code is\
    \ a little bit hard to read. Ruby has a simple way to solve this problem: you\
    \ can use a method name as a variable name:</p>\n<pre><code class=\"language-erlang\"\
    >triangle(Area) = ((Area * Area) * 0.5).round(2)\n</code></pre>\n<pre><code class=\"\
    language-erlang\">3\n3\n</code></pre>\n<p>But how does this look like in Ruby?\
    \ Ruby allows you to use a method as a variable name:</p>\n<pre><code class=\"\
    language-ruby\">triangle(Area) = Area.mul(Area).mul(0.5).round(2)\n</code></pre>\n\
    <pre><code class=\"language-ruby\">3\n3\n</code></pre>\n<p>A Ruby method can receive\
    \ arguments and return values:</p>\n<pre><code class=\"language-ruby\">def triangle(Area)\n\
    \  Area.mul(Area).mul(0.5).round(2)\nend", "  (a*h)/Math.sqrt(a**2 -(a*h)/2)\n\
    end\n</cell>\n<text>\nNotice that area is passed in the height and length which\
    \ you used to make the triangle.", '  return a*h/2', "  if h == 0\n    0\n  else\n\
    \    (a + h) * ((0.5 * h) + ((2 * (a - h)) / (3 * (a - h))))\nend", '  return
    (a*h)**0.5', "  area_triangle(sqrt(a**2 - h**2), a, h)\nend", "  (2.0 * a + h\
    \ * (b - a) * (c - a) * (d - b) * (e - c) * (f - d) * (g - e) * (h - f) * (i -\
    \ g) * (j - h) * (k - i) * (l - j) * (m - k) * (n - l) * (o - m))\nend", "  Math.sqrt(Math::pow(h,\
    \ 2) / Math.pow(a, 2))\nend\n</cell>\n<text>\nWe can call triangle_area with our\
    \ required length and high return area for a triangle.", "  area_of_triangle =\
    \ h + (0.5 * a)\n  area_of_triangle\nend\n</cell>\n<cell>", "  (a * h) / 2\nend",
  "  (2 * a * a) - (h * h)\nend", "  s = (0.5**a)*(h**2) * (1-(0.5**a))\n  s/= ((2\
    \ * pi)**a)\n  s\nend", "  (a * (h ** 2)) / (2 * (a + h))\nend", "  area = 0\n\
    \  area_of_triangle = 0.0", "  puts \"The area of the triangle is #{(a+h)*(a+h+h)/2}\"\
    \nend", "  return (a*h)/2\nend", "  (a * (h - a) / 2) + 0.5 * h * ((3 * a + h)\
    \ / 2)\nend", "  h = h\n  a1 = a\n  a2 = h / 2\n  a3 = -h / 2\n  a4 = a1 + a2\n\
    \  a5 = a1 + a3\n  a6 = a1 + a4\n  a7 = a5 - a6\n  a8 = h / 6\n  a9 = a1 - a4\n\
    \  a10 = a1 + a6\n  a11 = a1 - a7\n  a12 = a2 + a3\n  a13 = a2 - a6\n  a14 = a2\
    \ + a4\n  a15 = a3 - a6\n  a16 = a3 - a5\n  a17 = a3 - a5\n  a18 = a5 - a6\n \
    \ a19 = a5 - a3\n  a20 = a5 - a7\n  a21 = a1 - a2\n  a22 = a1 + a3\n  a23 = a1\
    \ - a4\n  a24 = a2 + a4\n  a25 = a2 - a3\n  a26 = a2 - a4\n  a27 = a3 + a4\n \
    \ a28 = a3 - a2\n  a29 = a3 - a7\n  a30 = a5 - a5\n  a31 = a1 - a1\n  a32 = a1\
    \ - a2\n  a33 = a1 + a3\n  a34 = a1 - a4\n  a35 = a2 - a3\n  a36 = a2 - a4\n \
    \ a37 = a3 + a4\n  a38 = a3 - a2\n  a39 = a3 - a7\n  a40 = a5 - a5\n  a41 = a1\
    \ - a1\n  a42 = a1 - a2\n  a43 = a1 + a3\n  a44 = a1 - a4\n  a45 = a2 - a3\n \
    \ a46 = a2 - a4\n  a47 = a3 + a4\n  a48 = a3 - a2\n  a49 = a3 - a7\n  a50 = a5\
    \ - a5\n  a51 = a1 - a1\n  a52 = a1 - a2\n  a53 = a1 + a3\n  a54 = a1 - a4\n \
    \ a55 = a2 - a3\n  a56 = a2 - a4\n  a57 = a3 + a4\n  a58 = a3 - a2\n  a59 = a3\
    \ - a7\n  a60 = a5 - a5\n  a61 = a1 - a1\n  a62 = a1 - a2\n  a63 = a1 + a3\n \
    \ a64 = a1 - a4\n  a65 = a2 - a3\n  a66 = a2 - a4\n  a67 = a3 + a4\n  a68 = a3\
    \ - a2\n  a69 = a3 - a7\n  a70 = a5 - a5\n  a71 = a1 - a1\n  a72 = a1 - a2\n \
    \ a73 = a1 + ", "  ((area1 = h * h) - (area2 = h * a) - (area3 = a * a)) / 2\n\
    end", "  (a ** 2 + h ** 2) * (0.5 * a * h)\nend", "  (a*h*h)/6.0\nend", "  area_squared\
    \ = h*h*(a*a + h*h)\n  return Math.sqrt(area_squared)\nend", "  (h - a + 1)**2\
    \ / 2\nend", "  (a**2 - h**2)/2.0\nend", "  return (a**2 - (h/2)**2) * ((2*h)\
    \ - a*h)\nend", "  (a+h)*(a+h+1)*(a+h+2)/6\nend", "  ((a**2 + h**2) ** (1/2))/2\n\
    end\n</code>\nAnd now we can use this function to get the area of a triangle of\
    \ any side:\n<code>\ntriangle_area.call(5, 3) ", "  (a**2) * (1/3) * (h**3)\n\
    end", "  a / (1 + Math.sin(h * (Math.PI / 2)))\nend", "  a * h / sqrt(a * a +\
    \ h * h)\nend", "  area_per_side = a / h\n  area_per_triangle_side = area_per_side\
    \ * area_per_side\n  area_per_triangle = area_per_triangle_side * area_per_side\n\
    \  return area_per_triangle\nend", "  (h*h) - (a*a) / (sqrt(h*h+a*a))\nend", " \
    \ (a**2 - h**2) / (2 * a)\nend\n</cell>\n<code language=julia-1.6>\n@show triangle_area(2,\
    \ 4)\n@show triangle_area(2, 1)\n@show triangle_area(2, 3)\n@show triangle_area(6,\
    \ 2)\n@show triangle_area(6, 3)\n@show triangle_area(10, 1)\n@show triangle_area(9,\
    \ 2)\n</cell>\n<text>\nTask\nCalculate area of a triangle. Using this formula,\
    \ you may calculate area of any triangle of any dimensions.\nFor some test cases\
    \ below you can see correct output and incorrect output.", "  (a * h * h) / 2.0\n\
    end", "  (a * (a ** (1 / 3) / 2) ** (1 / 2)) / (((h / 2) ** 2) ** 0.5)\nend\n\
    </cell>\n<cell>", "  a * h / 6\nend", '  return (a*h)/2', "    h = h / (2 * a)\n\
    \    \n    if a == 2 or h < 2:\n        return 2 * h\n    \n    sides = [triangle_area(a,\
    \ h / 2) for i in range(3)]\n    return 2 * sum(sides)", "  ((h-a)*h)/2.0\nend\n\
    </code></pre>\n            </div>\n          </section>", "  return a*h/2\nend",
  "  (a * h * h / 4) - Math.sqrt(a * a + h * h + 4)\nend", "  return a * ((1-(2*a/h)**2))\n\
    end", "  s = (a + b) / 2\n  a1 = h - s\n  b1 = h - a\n  a2 = h - a\n  b2 = h -\
    \ b\n  a3 = h - s\n  b3 = h - b\n  return (b1 * b2 + a2 * b3 + a1 * b3)/2.0\n\
    end", "  (a*(a+h))/(2+a**2-h**2)\nend", "  return (a*h)/2.\nend", "  return sqrt(a**2\
    \ + h**2) # <-- this returns 6 for the given sides\nend\n</cell>\n<cell>", " \
    \ h /= 2.0\n  a2 = a ** 2\n  b2 = b ** 2\n  c2 = c ** 2\n  d = sqrt(a2 + b2 +\
    \ c2)\n  area = (a * b * c * d - 2.0 * c * (a2 + b2 - d * c2 + sqrt(d2) ** 2)\
    \ - \n         (b - a) * (c - d) * sqrt(d2 - c2 * b2 - a2 * c2)) / (2.0 * a *\
    \ b * c)\n  \n  return area\nend", "  (a**2 + h**2 - a*h) / 2\nend", "    side\
    \ = sqrt(a ** 2 + h ** 2)\n    area_tri = (2 * ((side - a) / side) ^ 2) + (2 *\
    \ (side - h) / side)\n    return area_tri\nend\n</cell>\n<code language=julia-1.6>",
  "  raise \"unimplemented\"\nend", "  ((h / 6) * a ** 3) / ((2 * b) - a)\nend", " \
    \ # Using Heron's formula to calculate the area of our triangle.\n  # This formula\
    \ will give us the area of our triangle with base\n  # equal to the length of\
    \ side, height equal to the given height,\n  # and height divided by the base\
    \ (the base is length).\n  # Here we can use Ruby's puts method to print out the\
    \ results.\n  puts (a * (h/3)**2).to_s\nend", "  (a**2) * (h**2) / (4.0*Math::sqrt(a**2))\n\
    end", "  return a * h / 2\nend", "  a * h / 2\nend"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
