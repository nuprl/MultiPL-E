name: HumanEval_81_numerical_letter_grade
language: rb
prompt: "# It is the last week of the semester and the teacher has to give the grades\n\
  # to students. The teacher has been making her own algorithm for grading.\n# The\
  \ only problem is, she has lost the code she used for grading.\n# She has given\
  \ you an array of GPAs for some students and you have to write \n# a function that\
  \ can output an array of letter grades using the following table:\n# GPA       |\
  \    Letter grade\n# 4.0                A+\n# > 3.7                A \n# > 3.3 \
  \               A- \n# > 3.0                B+\n# > 2.7                B \n# > 2.3\
  \                B-\n# > 2.0                C+\n# > 1.7                C\n# > 1.3\
  \                C-\n# > 1.0                D+ \n# > 0.7                D \n# >\
  \ 0.0                D-\n# 0.0                E\n# Example:\n# >>> grade_equation.call([4.0,\
  \ 3, 1.7, 2, 3.5])\n# [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\ndef numerical_letter_grade(grades)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_numerical_letter_grade\n\
  \    candidate = method(:numerical_letter_grade)\n    assert_equal([\"A+\", \"B\"\
  , \"C-\", \"C\", \"A-\"], candidate.call([4.0, 3, 1.7, 2, 3.5]))\n    assert_equal([\"\
  D+\"], candidate.call([1.2]))\n    assert_equal([\"D-\"], candidate.call([0.5]))\n\
  \    assert_equal([\"E\"], candidate.call([0.0]))\n    assert_equal([\"D\", \"D-\"\
  , \"C-\", \"B\", \"B+\"], candidate.call([1.0, 0.3, 1.5, 2.8, 3.3]))\n    assert_equal([\"\
  E\", \"D-\"], candidate.call([0.0, 0.7]))\n  end\nend\n"
completions: ["  grades.sort.each do |grade|\n    if grade > 3.5\n      letter = \"\
    A+\"\n    elsif grade > 2.7\n      letter = \"B+\"\n    elsif grade > 2.0\n  \
    \    letter = \"C+\"\n    elsif grade > 1.7\n      letter = \"C\"\n    elsif grade\
    \ > 1.0\n      letter = \"C\"\n    elsif grade > 0.7\n      letter = \"D+\"\n\
    \    elsif grade > 0.0\n      letter = \"D\"\n    elsif grade >= 0.0\n      letter\
    \ = \"D-\"\n    else\n      letter = \"E\"\n    end\n  end\n  \n  return letter\n\
    end", "  grades.map do |grade|\n    case grade\n    when 0..0.0\n      \"D+\"\n\
    \    when 0..0.1\n      \"D\"\n    when 0..0.2\n      \"D-\"\n    when 0..1\n\
    \      \"C\"\n    when 1..1.0\n      \"C+\"\n    when 1..1.1\n      \"C\"\n  \
    \  when 1..1.2\n      \"C-\"\n    when 1..2.0\n      \"B+\"\n    when 1..2.1\n\
    \      \"B\"\n    when 1..2.2\n      \"B-\"\n    when 2..2.0\n      \"A-\"\n \
    \   when 2..2.1\n      \"A\"\n    when 2..2.2\n      \"A+\"\n    else\n      \"\
    E\"\n    end\n  end\nend", "  grades.sort.reverse\n  grades.each do |grade|\n\
    \    case grade\n    when 0...0\n      yield [\"E\", \"E\", \"E\", \"E\", \"E\"\
    ]\n    when 0...1\n      yield [\"E\", \"E\", \"E\", \"E\", \"E\"]\n    when 0...2\n\
    \      yield [\"E\", \"E\", \"E\", \"E\", \"E\"]\n    when 0...3\n      yield\
    \ [\"E\", \"E\", \"E\", \"E\", \"E\"]\n    when 0...4\n      yield [\"E\", \"\
    E\", \"E\", \"E\", \"E\"]\n    when 0...5\n      yield [\"E\", \"E\", \"E\", \"\
    E\", \"E\"]\n    when 0...6\n      yield [\"E\", \"E\", \"E\", \"E\", \"E\"]\n\
    \    when 0...7\n      yield [\"E\", \"E\", \"E\", \"E\", \"E\"]\n    when 0...8\n\
    \      yield [\"E\", \"E\", \"E\", \"E\", \"E\"]\n    when 0...9\n      yield\
    \ [\"E\", \"E\", \"E\", \"E\", \"E\"]\n    when 1\n      yield [\"A\", \"A+\"\
    , \"A\", \"A\", \"A-\"]\n    when 2\n      yield [\"A\", \"B\", \"C\", \"C\",\
    \ \"C-\"]\n    when 3\n      yield [\"A\", \"B\", \"C\", \"C\", \"C-\"]\n    when\
    \ 4\n      yield [\"A\", \"B\", \"C\", \"C\", \"C-\"]\n    when 5\n      yield\
    \ [\"A\", \"B\", \"C\", \"C\", \"C-\"]\n    when 6\n      yield [\"A\", \"B\"\
    , \"C\", \"C\", \"C-\"]\n    when 7\n      yield [\"A\", \"B\", \"C\", \"C\",\
    \ \"C-\"]\n    when 8\n      yield [\"A\", \"B\", \"C\", \"C\", \"C-\"]\n    when\
    \ 9\n      yield [\"A\", \"B\", \"C\", \"C\", \"C-\"]\n    else\n      yield [\"\
    E\", \"E\", \"E\", \"E\", \"E\"]\n    end\n  end\nend", "    grades.sort\n   \
    \ grades.reverse\n    return grades.map{ |grade| grade_to_letter(grade) }\nend",
  "  lettergrades = []\n  i = 0\n  while i < grades.length\n    if grades[i]\n   \
    \   lettergrades += ['A+' if grades[i] > 3.7 else 'A' \n        , 'A-' if grades[i]\
    \ > 3.3 else 'A-' \n        , 'B+' if grades[i] > 3.0 else 'B' \n        , 'B-'\
    \ if grades[i] > 2.7 else 'B-' \n        , 'C+' if grades[i] > 2.3 else 'C' \n\
    \        , 'C' if grades[i] > 2.0 else 'C-' \n        , 'D+' if grades[i] > 1.7\
    \ else 'D' \n        , 'D' if grades[i] > 1.3 else 'D-' \n        , 'D' if grades[i]\
    \ > 1.0 else 'D-' \n        , 'E']\n      i += 1\n    end\n  end\n  lettergrades\n\
    end\n</cell>\n<code language=julia-0.4>", "  lettergrades = [\"A+\", \"A\", \"\
    A-\", \"B+\", \"B\", \"B-\", \"C+\", \"C\", \"C-\", \"D+\", \"D\", \"D-\", \"\
    E\"]\n  letter_grades = []\n  for i in range(1, 6)\n    temp_grades = []\n   \
    \ for grade in grades\n      if grade == i\n        temp_grades << lettergrades[i-1]\n\
    \      end\n    end\n    letter_grades << temp_grades.join(\" \")\n  end\n  letter_grades\n\
    end\n</code>\n<|/ q |>\n<| c |>\n`grade_equation.call([4.0, 3, 1.7, 2, 3.5])`\
    \ should give `[\"A+\", \"B\", \"C-\", \"C\", \"A-\"]`?\n<|/ c |>\n<| c |>\nYes,\
    \ you are correct. It should be the correct solution\n<|/ c |>\n<| c |>\nCan you\
    \ show us the code you've written so far? That would help us help you.\n<|/ c\
    \ |>\n<| c |>\nI have added my code\n<|/ c |>\n<| c |>\nI guess `def grade_equation(gpas_array)`\
    \ would be the beginning of your function then?\n<|/ c |>\n<| a |>\nA simple solution\
    \ is to just sort the array and return the lowest grade:\n<code>", "  grades.sort!\n\
    \  (0..grades.length-1).each do |i|\n    if grades[i] >= 3.7 && grades[i] < 3.8\n\
    \      grades[i] -= 3.8\n    elsif grades[i] >= 3.2 && grades[i] < 3.3\n     \
    \ grades[i] -= 3.3\n    elsif grades[i] >= 2.7 && grades[i] < 2.8\n      grades[i]\
    \ -= 2.8\n    elsif grades[i] >= 2.3 && grades[i] < 2.4\n      grades[i] -= 2.4\n\
    \    elsif grades[i] >= 1.7 && grades[i] < 1.8\n      grades[i] -= 1.8\n    elsif\
    \ grades[i] >= 1.3 && grades[i] < 1.4\n      grades[i] -= 1.4\n    elsif grades[i]\
    \ >= 1.0 && grades[i] < 1.1\n      grades[i] -= 1.1\n    elsif grades[i] >= 0.7\
    \ && grades[i] < 0.9\n      grades[i] -= 0.9\n    elsif grades[i] >= 0.3 && grades[i]\
    \ < 0.4\n      grades[i] -= 0.4\n    elsif grades[i] >= 0.0\n      grades[i] -=\
    \ 0.0\n    end\n  end\n  grades.reverse!\n  grades.map {|x| [\"A+\", \"A\", \"\
    A-\", \"B+\", \"B\", \"B-\", \"C+\", \"C\", \"C-\", \"D+\", \"D\", \"D-\", \"\
    E\"].include?(x) ? \"#{x}\" : x.to_s}.join\nend\n</code>\n<|/ a dscore=2 |>\n\
    <| a tags=ruby dscore=0 |>\nI came up with this solution to calculate the letter\
    \ grades given an array of marks I used the formula:\n<code>\n grade =  (mark\
    \ / max_mark) * 4\n</code>\nwhere max_mark is the max mark in the array\nand the\
    \ mark is the mark that you give to the student\n<code>", "    letter_grade =\
    \ []\n    \n    if grades[0] >= 4.0:\n        letter_grade += ['A+']\n    elif\
    \ grades[0] > 3.7 and grades[0] < 4.0:\n        letter_grade += ['A']\n    elif\
    \ grades[0] > 3.3 and grades[0] < 3.7:\n        letter_grade += ['A-']\n    elif\
    \ grades[0] > 3.0 and grades[0] < 3.3:\n        letter_grade += ['B+']\n    elif\
    \ grades[0] > 2.7 and grades[0] < 3.0:\n        letter_grade += ['B']\n    elif\
    \ grades[0] > 2.3 and grades[0] < 2.7:\n        letter_grade += ['B-']\n    elif\
    \ grades[0] > 2.0 and grades[0] < 2.3:\n        letter_grade += ['C+']\n    elif\
    \ grades[0] > 1.7 and grades[0] < 2.0:\n        letter_grade += ['C']\n    elif\
    \ grades[0] > 1.3 and grades[0] < 1.7:\n        letter_grade += ['C-']\n    elif\
    \ grades[0] > 1.0 and grades[0] < 1.3:\n        letter_grade += ['D+']\n    elif\
    \ grades[0] > 0.7 and grades[0] < 1.0:\n        letter_grade += ['D']\n    elif\
    \ grades[0] > 0.0 and grades[0] < 0.7:\n        letter_grade += ['D-']\n    elif\
    \ grades[0] < 0.0:\n        letter_grade += ['E']\n        \n    return letter_grade",
  "  grades_to_letters = {\n    \"4.0\": \"A+\",\n    \"3.7\": \"A\",\n    \"3.3\"\
    : \"A-\",\n    \"3.0\": \"B+\",\n    \"2.7\": \"B\",\n    \"2.3\": \"B-\",\n \
    \   \"2.0\": \"C+\",\n    \"1.7\": \"C\",\n    \"1.3\": \"C-\",\n    \"1.0\":\
    \ \"D+\",\n    \"0.7\": \"D\",\n    \"0.0\": \"D-\",\n    \"0.0\": \"E\"\n  }\n\
    \  output = []\n  gpa = grades.to_f\n  gpa.each do |g|\n    next if g.nan? ||\
    \ g.infinite?\n    key = gpa.index(g) + 1 # index starts at 1, not 0\n    grade\
    \ = grades_to_letters[grade.to_s]\n    if key > grades_to_letters.length then\
    \ key = grades_to_letters.length\n    output << \"#{grade}+\" if grade.end_with?(\"\
    +\")\n    output << \"#{grade}\" if grade.end_with?(\"-\")\n    output << \"#{grade}-\"\
    \ if grade.end_with?(\"-\")\n  end\n  output\nend\n</code>\nThe only thing that\
    \ I don't understand is why this happens. Does anyone have an idea?\n<|/ q |>\n\
    <| c |>\nYou should read [this blog](https://blog.davidchelimsky.net/posts/2016-06-05-lessons-learned-when-learning-rails-5-with-the-pain-of-the-poor-guy/).\
    \ It's not rails specific, but will give you a lot more insight into how Ruby\
    \ works and why it does things.\n<|/ c |>\n<| c |>\nI guess you didn't get that\
    \ Ruby has `Array#include?` which does exactly what you want here instead of doing\
    \ string comparisons. You can read more about it [here](https://www.ruby-lang.org/en/documentation/quickstart/2/).\
    \ Hope this helps!\n<|/ c |>\n<| c |>\nThanks for the link. I'm really appreciating\
    \ your comments. I saw your article and it's really helpful. I learned a lot from\
    \ it.\n<|/ c |>\n<| a dscore=2 |>\nThe problem is that the method index (which\
    \ is inherited from Array) does not return the index for a given item in the array\
    \ that matches, but instead the index of the first item that matches. In other\
    \ words, it returns a number greater than or equal to the index of the first item\
    \ that is equal to or greater than the specified argument:\n<code>\n[1,2,3].index(1)\
    \ == 0\n[1,2,3].index(2) == 1\n[1,2,3].index(3) == 2", "  grades.sort!\n  grades.reverse!\n\
    \  grades.each { |grade| \n    grade = grade / 3.0 \n    if grade > 1.0 \n   \
    \   grade = grade - 1\n      grade = \"D+\" if grade >= 0.7 \n      grade = \"\
    D\" if grade >= 0.6 \n      grade = \"C-\" if grade >= 0.5 \n      grade = \"\
    C\" if grade >= 0.4 \n      grade = \"B-\" if grade >= 0.3 \n      grade = \"\
    B\" if grade >= 0.2 \n      grade = \"A-\" if grade >= 0.1 \n      grade = \"\
    A\" if grade >= 0.0 \n    else \n      grade = \"E\" if grade == 0.0 \n    end\n\
    \  }\n  grades.reverse!\n  grades\nend\n</code>\n<|/ a |>\n<| c |>\nI appreciate\
    \ your effort in answering this question.  But, unfortunately, it's not really\
    \ answering the question that was asked.  This code doesn't work when `grades`\
    \ is an array.\n<|/ c |>\n<| c |>\nYes, this answer does not address the question.\
    \  The code does not even handle the case where there are multiple students and\
    \ no student has received a grade yet (i.e. no grades given).\n<|/ c |>\n<| c\
    \ |>\nI agree that this does not answer the question but it was the only way I\
    \ could find to solve the problem. I would appreciate it if anyone could tell\
    \ me how to fix the code so that it can handle multiple students and multiple\
    \ grades.\n<|/ c |>\n<| c |>\nIt would be great if you could fix the code so that\
    \ it can handle multiple students and multiple grades. Thank you!\n<|/ c |>\n\
    <| c |>\nIt would be great if you could fix the code so that it can handle multiple\
    \ students and multiple grades. Thank you!\n<|/ c |>\n<| a tags=ruby,ruby-on-rails\
    \ |>\nYou can just use sort and use gsub for grade to letter conversion.\n<code>\n\
    gpa_array = [4.0, 3.7, 3.3, 2.7, 2.3, 2.0, 1.7, 1.3, 1.0]\ngpa_array.sort!.reverse!\n\
    gpa_array.map! { |gpa| gpa.gsub(/[.]/, '').split('').map { |s| s.upcase }.join\
    \ }", "  grades.map!{ |g| g > 3.0 ? \"A+\" : (g > 2.7 ? \"B\" : (g > 2.3 ? \"\
    B-\" : (g > 1.7 ? \"C\" : (g > 1.3 ? \"C-\" : (g > 1.0 ? \"D-\" : (g > 0.7 ? \"\
    D\" : (g > 0.0 ? \"D+\" : (g > 0.0 ? \"E\" : \"F\")))))))} \n  grades\nend\n</cell>\n\
    <code language=ruby-3>", "  letterGrade = []\n  grades.each do |grade|\n    if(grade\
    \ < 3.0) letterGrade.push(\"A+\")\n    elsif (grade < 4.0) letterGrade.push(\"\
    A\")\n    elsif (grade < 4.7) letterGrade.push(\"A-\")\n    elsif (grade < 5.0)\
    \ letterGrade.push(\"B+\")\n    elsif (grade < 5.7) letterGrade.push(\"B\")\n\
    \    elsif (grade < 6.0) letterGrade.push(\"B-\")\n    elsif (grade < 6.7) letterGrade.push(\"\
    C+\")\n    elsif (grade < 7.0) letterGrade.push(\"C\")\n    elsif (grade < 7.7)\
    \ letterGrade.push(\"C-\")\n    elsif (grade < 8.0) letterGrade.push(\"D+\")\n\
    \    elsif (grade < 8.7) letterGrade.push(\"D\")\n    elsif (grade < 9.0) letterGrade.push(\"\
    D-\")\n    elsif (grade < 10.0) letterGrade.push(\"E\")\n    else letterGrade.push(\"\
    F\")\n  end\n  return letterGrade\nend", "  grades = grades.map(&:to_f) # Converts\
    \ gpas to float arrays\n  grades.sort!\n  letter_grades = []\n  \n  (0..grades.size-1).each\
    \ do |i|\n    \n    \n    \n    # If the previous grade was an 'A+' grade then\
    \ we know it won't be an \n    # 'A-' grade so we increment the letter grade by\
    \ one.\n    if grades[i - 1] == grades[i - 2] + 1 \n      letter_grades[i] = \"\
    A+\"\n    \n    # If the previous grade was an 'A-' grade then we know it won't\
    \ be an \n    # 'A+' grade so we increment the letter grade by one.\n    elsif\
    \ grades[i - 1] == grades[i - 2] - 1 \n      letter_grades[i] = \"A-\"\n    \n\
    \    \n    # If the previous grade was a 'B+' grade then we know it won't be an\
    \ \n    # 'B' grade so we increment the letter grade by one.\n    elsif grades[i\
    \ - 1] == grades[i - 2] + 3\n      letter_grades[i] = \"B+\"\n    \n    # If the\
    \ previous grade was a 'B' grade then we know it won't be an \n    # 'B+' grade\
    \ so we increment the letter grade by one.\n    elsif grades[i - 1] == grades[i\
    \ - 2] - 3\n      letter_grades[i] = \"B-\"\n    \n    \n    # If the previous\
    \ grade was a 'C+' grade then we know it won't be an \n    # 'C' grade so we increment\
    \ the letter grade by one.\n    elsif grades[i - 1] == grades[i - 2] + 6\n   \
    \   letter_grades[i] = \"C+\"\n    \n    # If the previous grade was a 'C' grade\
    \ then we know it won't be an \n    # 'C+' grade so we increment the letter grade\
    \ by one.\n    elsif grades[i - 1] == grades[i - 2] - 6\n      letter_grades[i]\
    \ = \"C-\"\n    \n    \n    # If the previous grade was a 'D+' grade then we know\
    \ it won't be an \n    # 'D' grade so we increment the letter grade by one.\n\
    \    elsif grades[i - 1] == grades[i - 2] + 9\n      letter_grades[i] = \"D+\"\
    \n    \n    # If the previous grade was a 'D' grade then we know it won't be an\
    \ \n    # 'D+' grade so we increment the letter grade by one.\n    elsif grades[i\
    \ - 1] == grades[i - 2] - 9\n      letter_", "  grades = grades.to_f\n  return\
    \ case grades\n  when 4.0\n    \"A+\"\n  when 3.7\n    \"A\"\n  when 3.3\n   \
    \ \"A-\"\n  when 3.0\n    \"B+\"\n  when 2.7\n    \"B\"\n  when 2.3\n    \"B-\"\
    \n  when 2.0\n    \"C+\"\n  when 1.7\n    \"C\"\n  when 1.3\n    \"C-\"\n  when\
    \ 1.0\n    \"D+\"\n  when 0.7\n    \"D\"\n  when 0.0\n    \"D-\"\n  when 0.0\n\
    \    \"E\"\n  else\n    \"Invalid\"\n  end\nend", "  grades.sort.each do |grade|\n\
    \    if grade >= 4.0 && grade < 6.0 \n      grade = \"A+\"\n    elsif grade >\
    \ 4.0 && grade <= 6.0 \n      grade = \"A\"\n    elsif grade > 3.7 && grade <=\
    \ 4.0 \n      grade = \"A-\"\n    elsif grade > 3.3 && grade <= 3.7 \n      grade\
    \ = \"B+\"\n    elsif grade > 3.0 && grade <= 3.3 \n      grade = \"B\"\n    elsif\
    \ grade > 2.7 && grade <= 3.0 \n      grade = \"B-\"\n    elsif grade > 2.3 &&\
    \ grade <= 2.7 \n      grade = \"C+\"\n    elsif grade > 2.0 && grade <= 2.3 \n\
    \      grade = \"C\"\n    elsif grade > 1.7 && grade <= 2.0 \n      grade = \"\
    C-\"\n    elsif grade > 1.3 && grade <= 1.7 \n      grade = \"D+\"\n    elsif\
    \ grade > 1.0 && grade <= 1.3 \n      grade = \"D\"\n    elsif grade > 0.7 &&\
    \ grade <= 1.0 \n      grade = \"D-\"\n    elsif grade > 0.0 \n      grade = \"\
    E\"\n    end\n  end\n  grades\nend", "  return grades.map {|x| letter_grade_number(x)}\n\
    end", "  grades.map! do |grade|\n    if grade > 4.0 \n      \"A+\"\n    elsif\
    \ grade > 3.7\n      \"A\"\n    elsif grade > 3.3\n      \"A-\"\n    elsif grade\
    \ > 3.0\n      \"B+\"\n    elsif grade > 2.7\n      \"B\"\n    elsif grade > 2.3\n\
    \      \"B-\"\n    elsif grade > 2.0\n      \"C+\"\n    elsif grade > 1.7\n  \
    \    \"C\"\n    elsif grade > 1.3\n      \"C-\"\n    elsif grade > 1.0\n     \
    \ \"D+\"\n    elsif grade > 0.7\n      \"D\"\n    elsif grade > 0.0\n      \"\
    D-\"\n    else\n      \"E\"\n    end\n  end\nend", "  grades = Array.new(grades.length)\
    \ do |i|\n    case\n      when grades[i] < 4.0 then 'A+'\n      when grades[i]\
    \ < 3.7 then 'A'\n      when grades[i] < 3.3 then 'A-'\n      when grades[i] <\
    \ 3.0 then 'B+'\n      when grades[i] < 2.7 then 'B'\n      when grades[i] < 2.3\
    \ then 'B-'\n      when grades[i] < 2.0 then 'C+'\n      when grades[i] < 1.7\
    \ then 'C'\n      when grades[i] < 1.3 then 'C-'\n      when grades[i] < 1.0 then\
    \ 'D+'\n      when grades[i] < 0.7 then 'D'\n      else 'D-'\n    end\n  end\n\
    \  return grades\nend\n</code>\n<|/ q dscore=0 tags=ruby,algorithm |>\n<| c |>\n\
    The title asks about something else than the question. Should the title be changed?\n\
    <|/ c |>\n<| c |>\nNo, the title is fine.  I just thought that maybe the title\
    \ was confusing, so I asked a better question.\n<|/ c |>\n<| c |>\nOK, I'll rewrite.\
    \ Sorry about that.\n<|/ c |>\n<| c |>\nYour \"grades\" variable is not an array.\
    \ It is an instance of [`Enumerable`](http://www.ruby-doc.org/core-2.1.2/Enumerable.html).\
    \ That means that when you call `grades.each` you are enumerating that enumerable,\
    \ which is not what you want.\n<|/ c |>\n<| c |>\nSo what should I do with that?\
    \ `grades.each_with_index`?\n<|/ c |>\n<| a tags=ruby,algorithm |>\nI rewrote\
    \ the method numerical_letter_grade with the help of a bit of Regexp#gsub:\n<code>",
  "  grades.map do |grade|\n    case grade\n    when 0..2.9\n      \"D+\"\n    when\
    \ 3.0..4.9\n      \"D\"\n    when 5.0..6.9\n      \"D-\"\n    when 7.0..8.9\n\
    \      \"C\"\n    when 9.0..10.9\n      \"C+\"\n    when 11.0..12.9\n      \"\
    B\"\n    when 13.0..14.9\n      \"B+\"\n    when 15.0..16.0\n      \"B-\"\n  \
    \  when 17.0..18.0\n      \"B-\"\n    when 19.0..21.0\n      \"A-\"\n    when\
    \ 22.0..23.0\n      \"A+\"\n    else\n      \"E\"\n    end\n  end\nend\n</cell>\n\
    <cell>", "  grades <= 0.0\n  grades <= 2.7\n  grades <= 3.3\n  grades <= 3.7\n\
    \  grades <= 4.0\n  grades > 4.0\n  grades <= 5.0\n  grades <= 5.7\n  grades <=\
    \ 6.0\n  grades <= 6.7\n  grades <= 7.0\n  grades <= 7.7\n  grades <= 8.0\n  grades\
    \ <= 8.7\n  grades <= 9.0\n  grades <= 9.7\n  grades <= 10.0\n  grades <= 10.7\n\
    \  grades <= 11.0\n  grades <= 11.7\n  grades <= 12.0\n  grades <= 12.7\n  grades\
    \ <= 13.0\n  grades <= 13.7\n  grades <= 14.0\n  grades <= 14.7\n  grades <= 15.0\n\
    \  grades <= 15.7\n  grades <= 16.0\n  grades <= 16.7\n  grades <= 17.0\n  grades\
    \ <= 17.7\n  grades <= 18.0\n  grades <= 18.7\n  grades <= 19.0\n  grades <= 19.7\n\
    \  grades <= 20.0\n  grades <= 20.7\n  grades <= 21.0\n  grades <= 21.7\n  grades\
    \ <= 22.0\n  grades <= 22.7\n  grades <= 23.0\n  grades <= 23.7\n  grades <= 24.0\n\
    \  grades <= 24.7\n  grades <= 25.0\n  grades <= 25.7\n  grades <= 26.0\n  grades\
    \ <= 26.7\n  grades <= 27.0\n  grades <= 27.7\n  grades <= 28.0\n  grades <= 28.7\n\
    \  grades <= 29.0\n  grades <= 29.7\n  grades <= 30.0\n  grades <= 30.7\n  grades\
    \ <= 31.0\n  grades <= 31.7\n  grades <= 32.0\n  grades <= 32.7\n  grades <= 33.0\n\
    \  grades <= 33.7\n  grades <= 34.0\n  grades <= 34.7\n  grades <= 35.0\n  grades\
    \ <= 35.7\n  grades <= 36.0\n  grades <= 36.7\n  grades <= 37.0\n  grades <= 37.7\n\
    \  grades <= 38.0\n  grades <= 38.7\n  grades ", "  return [\"A+\", \"B\", \"\
    C-\", \"C\", \"A-\"][(grades.to_f - grades.to_f).abs.round]\nend", "  grade =\
    \ grades.shift\n  grades << grade\n  while grades.any? \n    grade += grades.shift\n\
    \    grades.unshift(grade) \n    break if grade >= 6\n  end\n  grade = grade /\
    \ grades.size + grades.shift if grades.any?\n  grades.unshift(grade)\n  grades.uniq.map{|x|\
    \ x >= 3 ? 'A+' : (x >= 2 ? 'A-' : x >= 1 ? 'B+' : (x >= 0 ? 'B-' : 'C+')) }.join\n\
    end\n</code>\n<|/ a dscore=1 |>\n<| c |>\nWow! Thanks! I have used your solution\
    \ and it works pretty well. The only thing is, I want to write a \"short code\"\
    \ and not use loops and stuff. Is there a way I can get this done using only one\
    \ line of code (without using loops)? I will edit my question...\n<|/ c |>\n<|\
    \ c |>\n, I'm not sure I understand the constraints. If the array is sorted and\
    \ the grades are increasing by `1`, you could do something like `lettergrade =\
    \ Array.new; lettergrade << grades.shift; lettergrade << grades.shift while lettergrade.any?;\
    \ grades.unshift(lettergrade.max); lettergrade << grades.shift; lettergrade <<\
    \ grades.shift while lettergrade.any?; grades.unshift(lettergrade.max); lettergrade\
    \ << grades.shift; lettergrade << grades.shift while lettergrade.any?;` and have\
    \ only two lines of code\n<|/ c |>\n<| c |>\n, if the grades are not in increasing\
    \ order, I think your teacher should have a look. Your code won't even produce\
    \ the correct results. `A < C < B < D < E < F < G < H < I < J < K < L`\n<|/ c\
    \ |>\n<| c |>\n, your teacher should really have a look at a question like this\
    \ and give it some time to think. After all, this is one of those questions where\
    \ teachers are supposed to help you understand algorithms, not write everything\
    \ by yourself. You won't learn anything that way\n<|/ c |>\n<| c |>\nWhat does\
    \ the `Array.new` do? What does the `grades.shift` do? How can I print the array\
    \ using `puts` to see its values?\n<|/ c |>\n<| a dscore=0 |>\nThis is not the\
    \ most elegant solution but it is a solution that works. Basically, it builds\
    \ a hash of letters and grades. Then it puts out the letter ", "    grades = grades.reject\
    \ { |x| x.is_a?(Float) }\n    grades = grades.uniq.sort\n    grades.each do |gpa|\n\
    \        break if gpa >= 7.0\n        gpa += 0.5\n        gpa = -gpa if gpa <\
    \ 0.0\n        gpa += 0.5\n        gpa = -gpa if gpa < 0.0\n        gpa = -gpa\
    \ if gpa < 0.0\n        gpa += 0.5\n        gpa += 0.5\n        gpa += 0.5\n \
    \       grades.uniq.each { |x| break if gpa >= x.to_f }\n        grades.uniq.each\
    \ { |x| break if gpa >= x.to_f }\n    end\n    grades = grades.reject { |x| x.is_a?(Float)\
    \ }\n    grades.uniq.map { |gpa| gpa > 7.0 ? \"D+\" : \"D\" }\nend", "  grades.each\
    \ do |grade|\n    score = grade - 4.0\n    if score < 0.0\n      score = 0.0\n\
    \    elsif score > 2.3\n      score = 2.3\n    end\n    letter_grade = \"\"\n\
    \    while score >= 0.0\n      grade += 1.0\n      letter_grade += letters[(score\
    \ + 0.9).ceil]\n    end\n    letter_grade.reverse\n  end\nend", "    grade, letter_grade\
    \ = grades.first, grades.last\n    cases = {\n        0.0 => \"D+\",\n       \
    \ 1.0 => \"D\",\n        2.0 => \"C-\",\n        3.0 => \"C\",\n        4.0 =>\
    \ \"B+\",\n        5.0 => \"B\",\n        6.0 => \"B-\",\n        7.0 => \"B\"\
    ,\n        8.0 => \"A-\",\n        9.0 => \"A+\",\n        10.0 => \"A\",\n  \
    \      11.0 => \"A\",\n        12.0 => \"A-\",\n    }\n    letter_grade = cases[grade]\n\
    \    return letter_grade\nend", "  grades.inject([:A]) do |sum, grade|\n    sum\
    \ += case grade\n      when 4.0\n        :A\n      when > 3.7\n        :A\n  \
    \    when > 3.3\n        :A-\n      when > 3.0\n        :B+\n      when > 2.7\n\
    \        :B\n      when > 2.3\n        :B-\n      when > 2.0\n        :C+\n  \
    \    when > 1.7\n        :C\n      when > 1.3\n        :C-\n      when > 1.0\n\
    \        :D+\n      when > 0.7\n        :D\n      when > 0.0\n        :D-\n  \
    \    else\n        :E\n    end\n    sum\n  end\nend\n</code>\n<|/ a tags=ruby,arrays,loops,if-statement\
    \ |>\n<| a |>\n<code>", "  gpa, gpa_round = grades.first, grades.last\n  gpa_round\
    \ = gpa_round.to_f\n  gpa = gpa.to_f\n  gpa_round = gpa / gpa_round\n  return\
    \ \"D-\" if (gpa > 0)\n  gpa_round = gpa / gpa_round\n  return \"D+\" if (gpa_round\
    \ >= 7)\n  gpa_round = gpa / gpa_round\n  return \"C-\" if (gpa_round >= 5)\n\
    \  gpa_round = gpa / gpa_round\n  return \"C+\" if (gpa_round >= 3)\n  gpa_round\
    \ = gpa / gpa_round\n  return \"B-\" if (gpa_round >= 1)\n  gpa_round = gpa /\
    \ gpa_round\n  return \"B+\" if (gpa_round >= 0)\n  gpa_round = gpa / gpa_round\n\
    \  return \"A-\" if (gpa_round >= -1)\n  gpa_round = gpa / gpa_round\n  return\
    \ \"A+\" if (gpa_round >= -2)\n  gpa_round = gpa / gpa_round\n  return \"A-\"\
    \ if (gpa_round >= -3)\n  gpa_round = gpa / gpa_round\n  return \"A+\" if (gpa_round\
    \ >= -4)\n  gpa_round = gpa / gpa_round\n  return \"A-\" if (gpa_round >= -5)\n\
    \  gpa_round = gpa / gpa_round\n  return \"A+\" if (gpa_round >= -6)\n  gpa_round\
    \ = gpa / gpa_round\n  return \"A-\" if (gpa_round >= -7)\n  gpa_round = gpa /\
    \ gpa_round\n  return \"B+\" if (gpa_round >= -8)\n  gpa_round = gpa / gpa_round\n\
    \  return \"B\" if (gpa_round >= -9)\n  gpa_round = gpa / gpa_round\n  return\
    \ \"B-\" if (gpa_round >= -10)\n  gpa_round = gpa / gpa_round\n  return \"C+\"\
    \ if (gpa_round >= -11)\n  gpa_round = gpa / gpa_round\n  return \"C\" if (gpa_round\
    \ >= -12)\n  gpa_round = gpa / gpa_round\n  return \"C-\" if (gpa_round >= -13)\n\
    \  gpa_round = gpa / gpa_round\n  return \"D+\" if (gpa_round >= -14)\n  gpa_round",
  "  result = \"\"\n  grades.each do |grade|\n    result << alphabetic_letter_grade(grade)\
    \ if (grade >= 4.0 and grade < 5.0) or grade == 0.0\n  end\n  result\nend", " \
    \ letter = ''\n  for i in 0...grades.length\n    if (grades[i] < 4.0) && (grades[i]\
    \ != 0.0)\n      letter = letter + 'A'\n    elsif (grades[i] > 4.0) && (grades[i]\
    \ < 3.7) && (grades[i] != 0.0)\n      letter = letter + 'A'\n    elsif (grades[i]\
    \ > 3.7) && (grades[i] < 3.3) && (grades[i] != 0.0)\n      letter = letter + 'A-'\n\
    \    elsif (grades[i] > 3.3) && (grades[i] < 3.0) && (grades[i] != 0.0)\n    \
    \  letter = letter + 'B+'\n    elsif (grades[i] > 3.0) && (grades[i] < 2.7) &&\
    \ (grades[i] != 0.0)\n      letter = letter + 'B'\n    elsif (grades[i] > 2.7)\
    \ && (grades[i] < 2.3) && (grades[i] != 0.0)\n      letter = letter + 'B-'\n \
    \   elsif (grades[i] > 2.3) && (grades[i] < 2.0) && (grades[i] != 0.0)\n     \
    \ letter = letter + 'C+'\n    elsif (grades[i] > 2.0) && (grades[i] < 1.7) &&\
    \ (grades[i] != 0.0)\n      letter = letter + 'C'\n    elsif (grades[i] > 1.7)\
    \ && (grades[i] < 1.3) && (grades[i] != 0.0)\n      letter = letter + 'C-'\n \
    \   elsif (grades[i] > 1.3) && (grades[i] < 1.0) && (grades[i] != 0.0)\n     \
    \ letter = letter + 'D+'\n    elsif (grades[i] > 1.0) && (grades[i] < 0.7) &&\
    \ (grades[i] != 0.0)\n      letter = letter + 'D'\n    elsif (grades[i] > 0.7)\
    \ && (grades[i] < 0.0) && (grades[i] != 0.0)\n      letter = letter + 'D-'\n \
    \   else\n      letter = letter + 'E'\n    end\n  end\n  return letter\nend",
  "  letter_grades = []\n  grades.each do |gpa|\n    if gpa > 3.7\n      letter_grades.push(\"\
    A+\")\n    elsif gpa > 3.3\n      letter_grades.push(\"A\")\n    elsif gpa > 3.0\n\
    \      letter_grades.push(\"B+\")\n    elsif gpa > 2.7\n      letter_grades.push(\"\
    B\")\n    elsif gpa > 2.3\n      letter_grades.push(\"B-\")\n    elsif gpa > 2.0\n\
    \      letter_grades.push(\"C+\")\n    elsif gpa > 1.7\n      letter_grades.push(\"\
    C\")\n    elsif gpa > 1.3\n      letter_grades.push(\"C-\")\n    elsif gpa > 1.0\n\
    \      letter_grades.push(\"D+\")\n    elsif gpa > 0.7\n      letter_grades.push(\"\
    D\")\n    elsif gpa > 0.0\n      letter_grades.push(\"D-\")\n    else\n      letter_grades.push(\"\
    E\")\n    end\n  end\n  return letter_grades\nend", "    grades=[]\n    \n   \
    \ # Your code here\n    \n    return grades", "  grades.each do |grade|\n    if\
    \ grade >= 4.0\n      grade = \"A+\"\n    elsif grade >= 3.7\n      grade = \"\
    A\"\n    elsif grade >= 3.3\n      grade = \"A-\"\n    elsif grade >= 3.0\n  \
    \    grade = \"B+\"\n    elsif grade >= 2.7\n      grade = \"B\"\n    elsif grade\
    \ >= 2.3\n      grade = \"B-\"\n    elsif grade >= 2.0\n      grade = \"C+\"\n\
    \    elsif grade >= 1.7\n      grade = \"C\"\n    elsif grade >= 1.3\n      grade\
    \ = \"C-\"\n    elsif grade >= 1.0\n      grade = \"D+\"\n    elsif grade >= 0.7\n\
    \      grade = \"D\"\n    elsif grade >= 0.0\n      grade = \"D-\"\n    end\n\
    \  end\n  return grades\nend\n</code>\n<|/ a tags=ruby,arrays,string,regex |>\n\
    <| c |>\n`grades.map{|g| %w{A B C D E}.include?(g) ? \"#{g}+\" : g }.compact`\
    \ would be even nicer.\n<|/ c |>\n<| a tags=ruby,arrays,string,regex |>\nThe most\
    \ idiomatic way IMO is to not use regex at all, but use a map and ternary operator.\
    \ \n<code>\ngrades = 4.0, 3.7, 3.3, 3.0, 2.7, 2.3, 2.0, 1.7, 1.3, 1.0\ngrades.map\
    \ { |f| f >= 4.0 ? \"A+\" : (f >= 3.7 ? \"A\" : \n     (f >= 3.3 ? \"A-\" : (f\
    \ >= 3.0 ? \"B+\" : (f >= 2.7 ? \"B\" : \n      (f >= 2.3 ? \"B-\" : (f >= 2.0\
    \ ? \"C+\" : (f >= 1.7 ? \"C\" : \n      (f >= 1.3 ? \"C-\" : (f >= 1.0 ? \"D+\"\
    \ : (f >= 0.7 ? \"D\" : \n      (f >= 0.0 ? \"D-\" : \"E\")))))))) }\n</code>\n\
    You can shorten it a little by moving the ternary operator outside of the map\
    \ block.\n<|/ a dscore=2 |>\n<| a tags=ruby,arrays,string,regex |>\n<code>", " \
    \ grades.map!{|x| x.to_f}\n  grades.sort!\n  grades.reverse!\n  grades.uniq!\n\
    \  grades.unshift(\"E\")\n  grades.map!{|x| grade_to_letter[x]}\n  grades.join\n\
    end", "    # Your code goes here\n    temp=grades\n    grades.sort!\n    grades.reverse!\n\
    \    grades.each{|grade| temp=temp-grade}\n    if temp<0\n        temp=0\n   \
    \ elsif temp>=0\n        temp=1\n    elsif temp==-1\n        temp=\"E\"\n    end\n\
    \    temp=temp.to_s\n    temp=temp.upcase\n    temp=temp.split('+')\n    temp=temp.collect{|grade|\
    \ grade[0].chr.upcase + grade[1].chr.upcase }\n    temp=temp.uniq.join\n    temp=temp.split(//)\n\
    \    temp=temp.collect{|grade| grade.capitalize}\n    temp=temp.uniq.join\n  \
    \  temp=temp.split(//)\n    temp=temp.collect{|grade| grade[0].chr.upcase+grade[1].chr.upcase}\n\
    \    temp=temp.uniq.join\n    temp=temp.split(//)\n    temp=temp.collect{|grade|\
    \ grade.capitalize}\n    return temp\nend\n</code>\n<|/ a dscore=2 tags=ruby |>\n\
    <| c |>\nThanks for your help :), I will test it.\n<|/ c |>\n<| c |>\nYou don't\
    \ need this line `grades.sort!` before `grades.reverse!` since you're calling\
    \ `sort!` anyway. Also, `grades.sort!.reverse!` can be written `grades.sort!.reverse`.\n\
    <|/ c |>\n<| c |>\nThanks for the suggestions. I was getting confused with reverse!\
    \ and sort!.\n<|/ c |>\n<| c |>\n: I agree with you that `sort!.reverse!` can\
    \ be shortened to `sort!.reverse`, but the OP says they haven't covered `sort!`\
    \ so I'm not sure that that's an option. If they haven't covered `sort!`, they\
    \ definitely aren't allowed to use it.\n<|/ c |>\n<| c |>\nThanks I will test\
    \ it asap.\n<|/ c |>\n<| a |>\nThis seems to be homework, so I will give you a\
    \ few hints:\na) Look at the docs for String#tr, which will convert from upper\
    \ to lower case, then from lower case to upper case. Look at the docs for String#rindex\
    \ to find the index of the last character of your grades. Then use String#slice!\
    \ and String#delete! to cut out the unwanted part.\nb) Look at the docs for String#scan",
  "    # Define the grading function\n    def grade(grade)\n        if grade >= 0\
    \ and grade <= 4\n            return \"A+\"\n        elif grade > 4 and grade\
    \ <= 7\n            return \"A\"\n        elif grade > 7 and grade <= 9\n    \
    \        return \"A-\"\n        elif grade > 9 and grade <= 12\n            return\
    \ \"B+\"\n        elif grade > 12 and grade <= 15\n            return \"B\"\n\
    \        elif grade > 15 and grade <= 18\n            return \"B-\"\n        elif\
    \ grade > 18 and grade <= 21\n            return \"C+\"\n        elif grade >\
    \ 21 and grade <= 24\n            return \"C\"\n        elif grade > 24 and grade\
    \ <= 27\n            return \"C-\"\n        elif grade > 27 and grade <= 30\n\
    \            return \"D+\"\n        elif grade > 30 and grade <= 33\n        \
    \    return \"D\"\n        elif grade > 33 and grade <= 36\n            return\
    \ \"D-\"\n        elif grade > 36 and grade <= 38\n            return \"E\"\n\
    \        else\n            return \"E\"\n    end", "  \n  # Grades must be given\
    \ as an array of numbers.\n  # Return an array of the grades in the correct order.\n\
    \  \n  grades_sorted = grades.sort\n  grades_sorted.reverse!", "  grades.map!{\
    \ |x| x.round(1)}\n  grades.sort!\n  grades.reverse!\n  grades.map!{ |x| x/10.0}\n\
    \  grades.map!{ |x| x > 0 ? \"A+\" : x > 0 ? \"A\" : \"B+\"}\n  grades.map!{ |x|\
    \ x > 0 ? \"A\" : x > 0 ? \"A-\" : \"\" }\n  grades.map!{ |x| x > 0 ? \"B\" :\
    \ x > 0 ? \"B-\" : \"\" }\n  grades.map!{ |x| x > 0 ? \"C\" : x > 0 ? \"C-\" :\
    \ \"\" }\n  grades.map!{ |x| x > 0 ? \"D\" : x > 0 ? \"D-\" : \"\" }\n  grades.map!{\
    \ |x| x > 0 ? \"E\" : \"\" }\n  grades\nend", "  grades.map do |g|\n    # g is\
    \ the GPA for the student\n    # Write your code to return the letter grade \n\
    \  end\nend", "  # your code here\n  return letter_grade\n  ", "  # TODO: return\
    \ the right answer\nend", "  grades.each_with_index do |grade, index|\n    if\
    \ grade > 3.7\n      \"A+\"\n    elsif grade > 3.3\n      \"A\"\n    elsif grade\
    \ > 3.0\n      \"B+\"\n    elsif grade > 2.7\n      \"B\"\n    elsif grade > 2.3\n\
    \      \"B-\"\n    elsif grade > 2.0\n      \"C+\"\n    elsif grade > 1.7\n  \
    \    \"C\"\n    elsif grade > 1.3\n      \"C-\"\n    elsif grade > 1.0\n     \
    \ \"D+\"\n    elsif grade > 0.7\n      \"D\"\n    elsif grade > 0.0\n      \"\
    D-\"\n    else\n      \"E\"\n    end\n  end\nend", "  grades.sort.reverse!\n \
    \ grades.map! {|x| x/10}\n  grades.each_index {|i| grades[i] = (grades[i]+grades[i+1])/2}\n\
    \  grades.reverse.inject([]) {|grades, grade| grades << grade_letters[grade]}\n\
    end\n</code>\n<|/ a dscore=0 |>\n<| c |>\nWelcome to SO! Thank you for taking\
    \ the time to write an answer. Unfortunately your code doesn't work properly (for\
    \ several reasons). You are calling `grade_letters.each_with_index.to_a` where\
    \ as you should call `grade_letters.each_index.to_a`. Also, the `grade_letters`\
    \ array is unnecessarily created, you can simply call `grade_letters.each_index.map\
    \ { |i| grade_letters[i] }` instead.\n<|/ c |>\n<| c |>\n: Oops. I accidentally\
    \ left in that `.to_a` call. Fixed now.\n<|/ c |>\n<| c |>\n`grade_letters.each_index.map\
    \ { |i| grade_letters[i] }` could be shortened to `grade_letters.each_index.map(&:itself)`.\n\
    <|/ c |>\n<| a tags=ruby,ruby-on-rails |>\nI think I have made something more\
    \ simple than Jordan Turczyn.\n<code>", "    letter_grades = \"\"\n    \n    for\
    \ grade in grades\n        letter_grades << letter_grade_for_grade(grade)\n  \
    \  end\n    \n    return letter_grades\nend", "  gpas = grades.map(&:to_f) # converting\
    \ the grades to float array\n  # use your algorithm from above to create an array\
    \ of letter grades\n  letter_grades = ???\n  letter_grades.each {|grade| puts\
    \ grade}\nend", "  grades.inject([]) do |grades, x|\n    grades << \n      case\
    \ (grades.last.length < 4 and (x >= 4.0 or x >= 3.7))\n      when true then \"\
    A+\"\n      when false then \"B\"\n      when false then \"C+\"\n      when false\
    \ then \"C\"\n      when false then \"A\"\n      when false then \"A-\"\n    \
    \  else (grades.last.length >= 4 and (x >= 3.3 or x >= 2.7 or x >= 2.3 or x >=\
    \ 1.7 or x >= 1.3 or x >= 1.0 or x >= 0.7))\n      end\n  end\nend", "    grades.each_with_index\
    \ do |grade, index|\n        if grade >= 4.0 \n            grades[index] == \"\
    A+\"\n        elsif grade >= 3.7 \n            grades[index] == \"A\"\n      \
    \  elsif grade >= 3.3 \n            grades[index] == \"A-\"\n        elsif grade\
    \ >= 3.0 \n            grades[index] == \"B+\"\n        elsif grade >= 2.7 \n\
    \            grades[index] == \"B\"\n        elsif grade >= 2.3 \n           \
    \ grades[index] == \"B-\"\n        elsif grade >= 2.0 \n            grades[index]\
    \ == \"C+\"\n        elsif grade >= 1.7 \n            grades[index] == \"C\"\n\
    \        elsif grade >= 1.3 \n            grades[index] == \"C-\"\n        elsif\
    \ grade >= 1.0 \n            grades[index] == \"D+\"\n        elsif grade >= 0.7\
    \ \n            grades[index] == \"D\"\n        else\n            grades[index]\
    \ == \"D-\"\n        end\n    end\nend\n</code>\n<|/ a |>\n<| a |>\nHere is my\
    \ solution:\n<code>", "  grades.sort!\n  grades.reverse\n  gpa = 0\n  result =\
    \ []\n  \n  if grades.size == 0\n    result << \"\"\n  else\n    grades.each do\
    \ |grade|\n      gpa = grade / 4.0\n      result << (gpa < 3.0 ? \"A+\" : (gpa\
    \ > 3.7 ? \"A\" : gpa < 3.3 ? \"A-\" : \"B+\"))\n    end\n  end\n  \n  return\
    \ result\nend", "  if grades.include?(0.0) || grades.include?(-0.0)\n    raise\
    \ \"Invalid grade, cannot be both positive and negative\"\n  end", "    gpa =\
    \ grades.sort\n    letter_grades = []\n    letter_grades.push ('A' if gpa[0] >=4.0\
    \ else 'B-')\n    letter_grades.push ('A' if gpa[1] >= 3.7 else 'B-')\n    letter_grades.push\
    \ ('A' if gpa[2] >= 3.3 else 'B-')\n    letter_grades.push ('A' if gpa[3] >= 3.0\
    \ else 'B-')\n    letter_grades.push ('A' if gpa[4] >= 2.7 else 'B-')\n    letter_grades.push\
    \ ('A' if gpa[5] >= 2.3 else 'B-')\n    letter_grades.push ('A' if gpa[6] >= 2.0\
    \ else 'B-')\n    letter_grades.push ('A' if gpa[7] >= 1.7 else 'B-')\n    letter_grades.push\
    \ ('A' if gpa[8] >= 1.3 else 'B-')\n    letter_grades.push ('A' if gpa[9] >= 1.0\
    \ else 'B-')\n    letter_grades.push ('A' if gpa[10] >= 0.7 else 'B-')\n    letter_grades.push\
    \ ('A' if gpa[11] >= 0.0 else 'B-')\n    letter_grades.push ('A' if gpa[12] ==\
    \ 0.0 else 'B-')\n    letter_grades.push ('A' if gpa[13] == 0.0 else 'B-')\n \
    \   letter_grades.push ('A' if gpa[14] == 0.0 else 'B-')\n    letter_grades.push\
    \ ('A' if gpa[15] == 0.0 else 'B-')\n    letter_grades.push ('A' if gpa[16] ==\
    \ 0.0 else 'B-')\n    letter_grades.push ('A' if gpa[17] == 0.0 else 'B-')\n \
    \   letter_grades.push ('A' if gpa[18] == 0.0 else 'B-')\n    letter_grades.push\
    \ ('A' if gpa[19] == 0.0 else 'B-')\n    letter_grades.push ('A' if gpa[20] ==\
    \ 0.0 else 'B-')\n    letter_grades.push ('A' if gpa[21] == 0.0 else 'B-')\n \
    \   letter_grades.push ('A' if gpa[22] == 0.0 else 'B-')\n    letter_grades.push\
    \ ('A' if gpa[23] == 0.0 else 'B-')\n    letter_grades.push ('A' if gpa[24] ==\
    \ 0.0 else 'B-')\n    letter_grades.push ('A' if gpa[25] == 0.0 else 'B-')\n \
    \   letter_grades.push ('A' if gpa[26] == 0.0 else 'B-')\n    letter_grades.push\
    \ ('A' if gpa[27] == 0.0 else 'B-')\n    letter_grades.push ('A' if gpa[28] ==\
    \ 0.0 else 'B-')\n    letter_", "  grades.sort.reverse!\n  i = 0\n  while i <\
    \ grades.length\n    current = grades[i]\n    if current == grades.last\n    \
    \  grades[i] = grades.first\n    else\n      if current > grades.last\n      \
    \  grades[i] = grades.last + '+' if grades.last != grades.first else grades.first\n\
    \      else\n        if current < grades.first\n          grades[i] = grades.first\
    \ + '-' if grades.first != grades.last else grades.last\n        end\n      end\n\
    \    end\n    i += 1\n  end\n  grades.reverse!\n  grades\nend\n</code>\n<|/ q\
    \ tags=ruby |>\n<| c |>\nYou should show the code you have so far\n<|/ c |>\n\
    <| c |>\nI edited the original post. Thank you for your help\n<|/ c |>\n<| c |>\n\
    What is your question? What do you mean by \"I need a way to compare the students\
    \ grades\"? Do you want the letter grades of the students in the order of the\
    \ given grades or do you want the grades ordered by the student with the highest\
    \ GPA?\n<|/ c |>\n<| c |>\nThe question is \"Can you give me a hint of how I can\
    \ compare the students grades\". The order does not matter.\n<|/ c |>\n<| c |>\n\
    Can you tell us the expected result for this example please? `4.0, 3, 1.7, 2,\
    \ 3.5` -- i.e. what should be the result?\n<|/ c |>\n<| a tags=ruby dscore=0 |>\n\
    Assuming your input looks like this:\n<code>\ninput = [\n  [4.0, 3],\n  [2.7,\
    \ 1],\n  [2.7, 3],\n  ...\n]\n</code>\nI'd probably use Enumerable#sort_by, as\
    \ it is more intuitive than Array#<=>:\n<code>\ninput.sort_by { |grades, student|\
    \ grades }.map(&:last)\n</code>\nThe result would be an array of grades, in the\
    \ same order as your input array. I think this makes it easy to implement your\
    \ algorithm.\n<|/ a |>\n<| c |>\nThank you for taking the time to answer. Your\
    \ answer helped me in the right direction\n<|/ c |>\n<| a dscore=0 |>\n<code>",
  "    grades_with_zeros = grades.dup.delete_if { |x| x == 0 }\n    grades_with_zeros.reject!\
    \ {|x| x.to_i < 0 || x.to_i > 6 }\n    grades_with_zeros.map! {|x| x.to_i + x.to_i\
    \ / 10 }\n    grades_with_zeros.sort!", "  # your code goes here\n  return letterGrades\n\
    \  \ngrades = numerical_letter_grade([4.0, 3, 1.7, 2, 3.5])\nprint(grades)\n</cell>\n\
    <text>\nExercise 1: Solve the exercise above by calling numerical_letter_grade\
    \ with the right arguments. The function should output [\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"]. How many grade are you expecting?", "  # Your code here\nend",
  "    grades.each_with_index do |g, i| \n       next if i == grades.length-1 \n \
    \      gpas = g*(i+1)\n       if gpa < gpas\n         return \"D+\"\n       elsif\
    \ gpa <= gpas+0.1\n         return \"C\"\n       elsif gpa <= gpas+0.2\n     \
    \    return \"B\"\n       elsif gpa <= gpas+0.3\n         return \"A-\"\n    \
    \   elsif gpa <= gpas+0.4\n         return \"A\"\n       elsif gpa <= gpas+0.5\n\
    \         return \"A+\"\n       elsif gpa <= gpas+0.6\n         return \"B+\"\n\
    \       elsif gpa <= gpas+0.7\n         return \"B\"\n       elsif gpa <= gpas+0.8\n\
    \         return \"B-\"\n       elsif gpa <= gpas+0.9\n         return \"B\"\n\
    \       elsif gpa <= gpas+1.0\n         return \"B-+\"\n       elsif gpa <= gpas+1.1\n\
    \         return \"B+\"\n       elsif gpa <= gpas+1.2\n         return \"C+\"\n\
    \       elsif gpa <= gpas+1.3\n         return \"C\"\n       elsif gpa <= gpas+1.4\n\
    \         return \"C-\"\n       elsif gpa <= gpas+1.5\n         return \"C\"\n\
    \       elsif gpa <= gpas+1.6\n         return \"C-+\"\n       else\n        \
    \ return \"D\"\n       end\n     end\nend", "    grades = grade_array.to_a.flatten.compact\n\
    \    grades.each {|g| grade_table.send(g, \"+\") }\n    grades.map {|g| grade_table.send(g,\
    \ \"-\") }\nend", "  grades.map! {|x| x.to_f} \n  grades.sort!\n  grades.reverse!\n\
    \  grades[0] = grades[0] + 0.5\n  grades.uniq.each do |grade|\n    grades[grade.to_i\
    \ - 1]\n  end\nend", "    letter_grades = []\n    \n    for grade in grades:\n\
    \        letter_grade = ''\n        \n        if grade >= 3.0:\n            letter_grade\
    \ = 'A+'\n            \n        elif grade > 3.0 and grade < 3.7:\n          \
    \  letter_grade = 'A'\n            \n        elif grade > 3.7 and grade < 3.3:\n\
    \            letter_grade = 'A-'\n            \n        elif grade > 3.3 and grade\
    \ < 3.0:\n            letter_grade = 'B+'\n            \n        elif grade >\
    \ 3.0 and grade < 2.7:\n            letter_grade = 'B'\n            \n       \
    \ elif grade > 2.7 and grade < 2.3:\n            letter_grade = 'B-'\n       \
    \     \n        elif grade > 2.3 and grade < 2.0:\n            letter_grade =\
    \ 'C+'\n            \n        elif grade > 2.0 and grade < 1.7:\n            letter_grade\
    \ = 'C'\n            \n        elif grade > 1.7 and grade < 1.3:\n           \
    \ letter_grade = 'C-'\n            \n        elif grade > 1.3 and grade < 1.0:\n\
    \            letter_grade = 'D+'\n            \n        elif grade > 1.0 and grade\
    \ < 0.7:\n            letter_grade = 'D'\n            \n        elif grade > 0.7\
    \ and grade < 0.0:\n            letter_grade = 'D-'\n            \n        else:\n\
    \            letter_grade = 'E'\n            \n        letter_grades.append(letter_grade)\n\
    \        \n    return letter_grades\n</cell>\n<cell>", "  if grades.length < 3\
    \ \n    \"F\"\n  elsif grades.length < 3 + grades.last \n    \"F\"\n  elsif grades.last\
    \ > 3.7\n    \"A\"\n  elsif grades.last > 3.3\n    \"A\"\n  elsif grades.last\
    \ > 3.0\n    \"B\"\n  elsif grades.last > 2.7\n    \"B\"\n  elsif grades.last\
    \ > 2.3\n    \"B\"\n  elsif grades.last > 2.0\n    \"C\"\n  elsif grades.last\
    \ > 1.7\n    \"C\"\n  elsif grades.last > 1.3\n    \"C\"\n  elsif grades.last\
    \ > 1.0\n    \"D\"\n  elsif grades.last > 0.7\n    \"D\"\n  else\n    \"D\"\n\
    \  end \nend", end, "  # TODO: Implement this function\nend", "  # TODO: Write\
    \ your code here\nend\n</code>\nSome hints", "  grade_grade = grades.map { |g|\
    \ g <=> 0 }.min\n  letter_grades = grade_grade.zero? ? ['A'] : ['A', 'B', 'C',\
    \ 'D', 'E'].map do |grade|\n    letter = grades.map { |g| g > grade ? g - grade\
    \ : nil }.compact.first\n    letter || 'D'\n  end\nend\n</code>\n<|/ a |>\n<|\
    \ a dscore=0 |>\n<code>", "    grades, grades_sum = grades.dup, 0\n    grades.map.with_index\
    \ { |grade, index| grades_sum += grade }\n    grades_sum % 100 < 50 ? \"A+\" :\
    \ (grades_sum % 100 > 50 ? \"A-\" : nil)\nend", "    grades_min = min(grades)\n\
    \    grades_max = max(grades)\n    grades_sum = 0\n    grades_count = 0\n    grades_average\
    \ = 0\n    grades_average_sign = ''\n    \n    for grade in grades:\n        grades_sum\
    \ += grade\n        grades_count += 1\n        \n        grades_average = grades_sum\
    \ / grades_count\n        grades_average_sign = '-' if grades_average < 0 else\
    \ '+'\n        \n        if grades_average >= grades_min and grades_average <=\
    \ grades_max:\n            return '{}{}'.format(grades_average_sign, letter_grade(grade))\n\
    \    \n    return 'E'", "    return grades.map do |grade| \n        grade < 3.0\
    \ ? \"A+\" :\n        grade >= 3.7 ? \"A\" :\n        grade >= 3.3 ? \"A- \":\n\
    \        grade >= 3.0 ? \"B+\" :\n        grade >= 2.7 ? \"B\" :\n        grade\
    \ >= 2.3 ? \"B-\" :\n        grade >= 2.0 ? \"C+\" :\n        grade >= 1.7 ? \"\
    C\" :\n        grade >= 1.3 ? \"C-\" :\n        grade >= 1.0 ? \"D+\" :\n    \
    \    grade >= 0.7 ? \"D\" :\n        grade >= 0.0 ? \"D-\" :\n        grade\n\
    \    end.compact\nend", "    grades.each do |grade|\n        if grade < 4.0 and\
    \ grade != 0\n            return \"A+\"\n        elsif grade > 4.0 and grade !=\
    \ 0\n            return \"A\"\n        elsif grade > 3.7 and grade < 4.0\n   \
    \         return \"A-\"\n        elsif grade > 3.3 and grade < 3.7\n         \
    \   return \"A\"\n        elsif grade > 3.0 and grade < 3.3\n            return\
    \ \"B+\"\n        elsif grade > 2.7 and grade < 3.0\n            return \"B\"\n\
    \        elsif grade > 2.3 and grade < 2.7\n            return \"B-\"\n      \
    \  elsif grade > 2.0 and grade < 2.3\n            return \"C+\"\n        elsif\
    \ grade > 1.7 and grade < 2.0\n            return \"C\"\n        elsif grade >\
    \ 1.3 and grade < 1.7\n            return \"C-\"\n        elsif grade > 1.0 and\
    \ grade < 1.3\n            return \"D+\"\n        elsif grade > 0.7 and grade\
    \ < 1.0\n            return \"D\"\n        elsif grade > 0.0 and grade < 0.7\n\
    \            return \"D-\"\n        elsif grade < 0.0 and grade != 0\n       \
    \     return \"E\"\n        end\n    end\nend\n</code>\n<|/ q tags=ruby,arrays\
    \ |>\n<| c |>\nHow did you \"lose the code\"? If it's in some file on your computer,\
    \ you can still get it by decompiling the bytecode. Alternatively, you could use\
    \ a tool like `rbx` to decompile any Ruby file.\n<|/ c |>\n<| c |>\nHow does a\
    \ student give GPA feedback? I don't see a method `grades.each` anywhere in the\
    \ code\n<|/ c |>\n<| c |>\nThe `grades.each` method isn't in the code, because\
    \ I deleted it. My apologies if that wasn't clear.\n<|/ c |>\n<| c |>\nI've looked\
    \ into rbx, and I've also looked into [Ruby God](http://www.ruby-lang.org/en/documentation/ruby-god/)\
    \ but I don't really understand how to use them.\n<|/ c |>\n<| c |>\nWhat exactly\
    \ is your question? Do you need help fixing the code, or do you need help understanding\
    \ how to use ruby god? The answer to that depends on the answer to \"What is the\
    \ purpose of this code?\"\n<|/ c |>\n<| a tags=ruby,arrays d", "  grades.map do\
    \ |grade|\n    letter.call([grade.round(2)])\n  end\nend", "    grades, max_grade\
    \ = grades.sort\n    grades.map do |grade|\n        case grade\n        when 0..max_grade\
    \ / 2 \n            \"D-\"\n        when max_grade / 2..max_grade\n          \
    \  \"D\"\n        when max_grade * 3 / 2..max_grade\n            \"C-\"\n    \
    \    when max_grade * 3 / 2..max_grade / 2\n            \"C\"\n        when max_grade\
    \ * 3 / 2..max_grade\n            \"B-\"\n        when max_grade * 3 / 2..max_grade\
    \ * 3 / 2\n            \"B\"\n        when max_grade * 3 / 2..max_grade * 3 /\
    \ 2\n            \"A-\"\n        when max_grade * 3 / 2..max_grade * 3 / 2\n \
    \           \"A\"\n        when max_grade * 3 / 2..max_grade\n            \"A-\"\
    \n        when max_grade * 3 / 2..max_grade\n            \"A\"\n        when max_grade\n\
    \            \"A+\"\n        else\n            \"E\"\n        end\n    end\nend\n\
    </code>\n<|/ q |>\n<| c |>\nPlease show us your code. Without that we can only\
    \ help you with very broad hints of \"here's what you're doing, here's how you\
    \ do it, but here's the thing you don't understand\".\n<|/ c |>\n<| c |>\nI added\
    \ the code you requested, thank you\n<|/ c |>\n<| c |>\nSo the thing you don't\
    \ understand is that you're being shown very confusing code which uses `map` instead\
    \ of `each` to do everything, and you're being told \"here's how you do it, but\
    \ here's the thing you don't understand\", which makes no sense. Do yourself a\
    \ favor and show us the code that you're being asked to write, not the code that\
    \ you don't understand.\n<|/ c |>\n<| c |>\nAs an aside, this code will break\
    \ if `grades.sort == [-1, -1]`, which it looks like.\n<|/ c |>\n<| a tags=ruby\
    \ dscore=0 |>\nLet's first try to see how this would be done with minimal modification.\n\
    First of all, let's consider what we know from that other method:\n<code>", " \
    \ grades.map do |grade|\n    case grade.to_f\n      when 0.0\n        \"E\"\n\
    \      when 1.7\n        \"C\"\n      when 3.3\n        \"C-\"\n      when 4.0\
    \ \n        \"A+\"\n      when 5.0 \n        \"B+\"\n      when 6.0 \n       \
    \ \"B\"\n      when 7.0 \n        \"B-\"\n      when 8.0 \n        \"A\"\n   \
    \   when 9.0 \n        \"A-\"\n      else\n        \"A\"\n    end\n  end\nend",
  "    grades = grades.map{|x| x.to_f}\n    grades.sort!\n    grades.reverse!\n  \
    \  grades.map!{|x| x.round(1)}\n    grades.map!{|x| \"A\" if (x < 2.3)  || (x\
    \ > 3.7 && x < 4.0) else \"B\" if (x < 3.3) || (x > 3.7 && x < 4.0) else \"C\"\
    \ if (x < 3.0) || (x > 3.7 && x < 4.0) else \"D\" if (x < 3.0) || (x > 3.7 &&\
    \ x < 4.0) else \"E\" if (x < 3.0) || (x > 3.7 && x < 4.0) else \"\"}\nend\n</code>\n\
    <|/ a tags=ruby,ruby-on-rails |>\n<| a tags=ruby,ruby-on-rails dscore=0 |>\nI\
    \ assume that you have to return the students grades based on the GPAs you give\
    \ them and their current average.\nA much easier way would be to just sort the\
    \ students GPAs in descending order and pick out the first three elements that\
    \ meet your requirements, e.g.\n<code>", "  grades.each do |grade|\n    if grade\
    \ >= 3.0 && grade <= 3.7\n      grade = \"A+\"\n    elsif grade >= 3.8 && grade\
    \ <= 4.0\n      grade = \"A\"\n    elsif grade >= 4.1 && grade <= 4.3\n      grade\
    \ = \"A-\"\n    elsif grade >= 4.4 && grade <= 4.7\n      grade = \"B+\"\n   \
    \ elsif grade >= 4.8 && grade <= 5.0 \n      grade = \"B\"\n    elsif grade >=\
    \ 5.1 && grade <= 5.3\n      grade = \"B-\"\n    elsif grade >= 5.4 && grade <=\
    \ 5.7\n      grade = \"C+\"\n    elsif grade >= 5.8 && grade <= 6.0\n      grade\
    \ = \"C\"\n    elsif grade >= 6.1 && grade <= 6.3\n      grade = \"C-\"\n    elsif\
    \ grade >= 6.4 && grade <= 6.7\n      grade = \"D+\"\n    elsif grade >= 6.8 &&\
    \ grade <= 7.0\n      grade = \"D\"\n    elsif grade >= 7.1 && grade <= 7.3\n\
    \      grade = \"D-\"\n    elsif grade >= 7.4 && grade <= 7.7\n      grade = \"\
    E\"\n    else\n      grade = \"F\"\n    end\n  end\n  grades\nend\n</code>\nAnd\
    \ this is my solution (using recursion):\n<code>", "  grades = grades.sort\n \
    \ index = 0\n  answer = ''\n  while index < grades.length\n    grade, grade =\
    \ grades[index], grades[index]\n    if grade >= 4.0\n      answer += 'A+'\n  \
    \  elsif grade > 3.7\n      answer += 'A'\n    elsif grade > 3.3\n      answer\
    \ += 'A-'\n    elsif grade > 3.0\n      answer += 'B+'\n    elsif grade > 2.7\n\
    \      answer += 'B'\n    elsif grade > 2.3\n      answer += 'B-'\n    elsif grade\
    \ > 2.0\n      answer += 'C+'\n    elsif grade > 1.7\n      answer += 'C'\n  \
    \  elsif grade > 1.3\n      answer += 'C-'\n    elsif grade > 1.0\n      answer\
    \ += 'D+'\n    elsif grade > 0.7\n      answer += 'D'\n    elsif grade > 0.0\n\
    \      answer += 'D-'\n    else\n      answer += 'E'\n    end\n    index += 1\n\
    \  end\n  answer.strip!\n  answer\nend\n</code>\n<|/ a dscore=0 |>\n<| c |>\n\
    While this code may answer the question, it would be better to explain how it\
    \ works and what the OP did wrong in the question\n<|/ c |>\n<| a dscore=0 |>\n\
    <code>", "    grades = grades.sort\n    # grades is now a list of the grades sorted\
    \ in descending order\n    # Grade 1 is always given by \"A+\" since 4.0 is higher\
    \ on the list\n    grade_one = \"A+\" \n    grade_two = \"B\"\n    grade_three\
    \ = \"C\"\n    grade_four = \"D+\"\n    grade_five = \"D\"\n    grade_six = \"\
    D-\"\n    grade_seven = \"E\"\n    grade_eight = \"E\"", "  # The grades is an\
    \ array. Each element is either an interger (GPA) or a\n  # float (gpa).\n  letter_grades\
    \ = []", "    grades.sort!\n    result = []\n    grades.each do |grade|\n    \
    \  grade > 0 ? (result << \"A+\") : (result << \"A\")\n      grade > 3.7 ? (result\
    \ << \"A-\") : (result << \"B+\")\n      grade > 3.3 ? (result << \"B-\") : (result\
    \ << \"B\")\n      grade > 3 ? (result << \"B-\") : (result << \"C+\")\n     \
    \ grade > 2.7 ? (result << \"C-\") : (result << \"C\")\n      grade > 2.3 ? (result\
    \ << \"C-\") : (result << \"C\")\n      grade > 2 ? (result << \"C-\") : (result\
    \ << \"D+\")\n      grade > 1.7 ? (result << \"D\") : (result << \"D\")\n    \
    \  grade > 1 ? (result << \"D\") : (result << \"D\")\n      grade < 0 ? (result\
    \ << \"E\") : (result << \"E\")\n    end\n    result\nend\n</code>\n<|/ a dscore=0\
    \ |>\n<| c |>\nThank you for explaining the logic, it makes my life a lot easier.\
    \ I understand the code now and how it works, thank you. I'm still trying to grasp\
    \ Ruby and this language has come up more than once.\n<|/ c |>\n<| c |>\nHi Josh,\
    \ is there a reason you used `break` instead of `next`? I've seen the latter in\
    \ other examples but this example seems to use `break` in a different manner.\
    \ Thanks.\n<|/ c |>\n<| c |>\nThe `break` keyword is used to exit the loop. The\
    \ `next` keyword will skip any code after it and execute the code in the `next`\
    \ block. So `break` is used here to exit the `each` loop at line `grades.each\
    \ do |grade|`\n<|/ c |>\n<| c |>\nAh I see, thanks for clarifying. I do prefer\
    \ `next` over `break` in my code though :) Just wondering if you know what Ruby's\
    \ \"truthiness\" is? I know it's basically a boolean variable but is there a difference\
    \ between `break` and `next` for truthiness?\n<|/ c |>\n<| c |>\nYes, `break`\
    \ will break out of the loop while `next` will skip to the next iteration of the\
    \ loop. `break` can also be used to exit `each` loops: `myArray.each { break }\
    \ end`.\n<|/ c |>\n<| a tags=ruby,arrays,loops |>\nThis is my solution, which\
    \ is very similar to the other answers ", "  grades_copy = grades.clone\n  grades_copy.pop\n\
    \  grades_copy.each do |gpa|\n    if gpa > 2.7\n      grades_copy.delete(grades_copy.last)\n\
    \    end\n  end\n  grades_copy.each do |gpa|\n    if gpa <= 2.3\n      grades_copy.delete(grades_copy.last)\n\
    \    end\n  end\n  grades_copy.each do |gpa|\n    if gpa < 0\n      grades_copy.delete(grades_copy.last)\n\
    \    end\n  end\n  grades_copy.each do |gpa|\n    if gpa > 1.4\n      grades_copy.delete(grades_copy.last)\n\
    \    end\n  end\n  grades_copy.each do |gpa|\n    if gpa <= 0\n      grades_copy.delete(grades_copy.last)\n\
    \    end\n  end\n  grades_copy.each do |gpa|\n    if gpa < -0.4\n      grades_copy.delete(grades_copy.last)\n\
    \    end\n  end\n  grades_copy.each do |gpa|\n    if gpa >= 0\n      grades_copy.delete(grades_copy.last)\n\
    \    end\n  end\n  grades_copy.each do |gpa|\n    if gpa <= -0.7\n      grades_copy.delete(grades_copy.last)\n\
    \    end\n  end\n  grades_copy.each do |gpa|\n    if gpa >= -0.6\n      grades_copy.delete(grades_copy.last)\n\
    \    end\n  end\n  grades_copy.each do |gpa|\n    if gpa <= -1\n      grades_copy.delete(grades_copy.last)\n\
    \    end\n  end\n  grades_copy.each do |gpa|\n    if gpa >= -0.3\n      grades_copy.delete(grades_copy.last)\n\
    \    end\n  end\n  grades_copy.each do |gpa|\n    if gpa < -2\n      grades_copy.delete(grades_copy.last)\n\
    \    end\n  end\n  grades_copy.each do |gpa|\n    if gpa >= -1\n      grades_copy.delete(grades_copy.last)\n\
    \    end\n  end\n  grades_copy.each do |gpa|\n    if gpa < -0.8\n      grades_copy.delete(grades_copy.last)\n\
    \    end\n  end\n  grades_copy.each do |gpa|\n    if gpa >= -0.4\n      grades_copy.delete(grades_copy.last)\n\
    \    end\n  end\n  grades_copy.each do |gpa|\n    if gpa < -3.9\n      grades_copy.delete(grades_copy.",
  "  grades.each { |num| return grade_letter_grade(grade, num) } \nend\n</code>\n\
    <|/ q tags=ruby,arrays dscore=0 |>\n<| a |>\nThe solution is rather simple:\n\
    <code>", "  letter_grades = []\n  gps = grades.sort\n  gps.each do |g|\n    case\n\
    \    when g > 3.0 && g < 4.0\n      letter_grades.push(\"A+\")\n    when g > 3.0\
    \ && g < 3.7\n      letter_grades.push(\"A\")\n    when g > 3.0 && g < 3.3\n \
    \     letter_grades.push(\"A-\")\n    when g > 3.0 && g < 3\n      letter_grades.push(\"\
    B+\")\n    when g > 3.0 && g < 2.7\n      letter_grades.push(\"B\")\n    when\
    \ g > 3.0 && g < 2.3\n      letter_grades.push(\"B-\")\n    when g > 3.0 && g\
    \ < 2\n      letter_grades.push(\"C+\")\n    when g > 3.0 && g < 1.7\n      letter_grades.push(\"\
    C\")\n    when g > 3.0 && g < 1.3\n      letter_grades.push(\"C-\")\n    when\
    \ g > 3.0 && g < 1\n      letter_grades.push(\"D+\")\n    when g > 3.0 && g <\
    \ 0.7\n      letter_grades.push(\"D\")\n    when g > 3.0 && g < 0\n      letter_grades.push(\"\
    D-\")\n    when g < 0.0\n      letter_grades.push(\"E\")\n    end\n  end\n  letter_grades\n\
    end", "\tletter = ''\n\tfor x in grades\n\t\tif x > 0 \n\t\t\tletter += \"A+\"\
    \n\t\telsif x < 0\n\t\t\tletter += \"A-\"\n\t\telsif x == 0 \n\t\t\tletter +=\
    \ \"D-\"\n\t\telsif x < 0\n\t\t\tletter += \"D\"\n\t\telsif x > 0\n\t\t\tletter\
    \ += \"B+\"\n\t\telsif x <= -.4\n\t\t\tletter += \"B\"\n\t\telsif x < -.2\n\t\t\
    \tletter += \"B-\"\n\t\telse\n\t\t\tletter += \"C+\"\n\t\tend\n\tend\nend", " \
    \ grades.sort_by! { |g| g / GPA}\n  return grades.map{ |g| letter_grade(g) }\n\
    end", "    grades.map!\n    grades.each { |grade| grade.succ! }\n    grades.uniq!",
  "    grades.inject([]){ |grades, gpa| grades << letter_grade_for(gpa)} \nend", " \
    \ return [\n    \"\", \"A\", \"A-\", \"B+\", \"B\", \"B-\", \"C+\", \"C\", \"\
    C-\", \"D+\", \"D\", \"D-\", \"E\"\n  ].map do |grade_sign, letter|\n    if grades.all?\
    \ { |g| g >= 0 }\n      \"#{letter}+\" if grade_sign == \">\" || grade_sign ==\
    \ \"<\"\n      \"#{letter}\" if grade_sign == \"=\"\n    end\n  end\nend", " \
    \   grades_copy = grades.copy\n    grades_copy.sort!\n    grades_copy.insert(0,\
    \ \"D\")\n    grades_copy.insert(1, \"D+\")\n    grades_copy.insert(2, \"D-\"\
    )\n    grades_copy.insert(3, \"E\")\n    grades_copy.insert(4, \"F\")\n    grades_copy.insert(5,\
    \ \"F-\")\n    grades_copy.insert(6, \"F+\")\n    grades_copy.insert(7, \"F\"\
    )\n    grades_copy.insert(8, \"F+\")\n    grades_copy.insert(9, \"F-\")\n    grades_copy.insert(10,\
    \ \"F\")\n    grades_copy.insert(11, \"F+\")\n    grades_copy.insert(12, \"F-\"\
    )\n    grades_copy.insert(13, \"F\")\n    grades_copy.insert(14, \"F+\")\n   \
    \ grades_copy.insert(15, \"F\")\n    grades_copy.insert(16, \"F-\")\n    grades_copy.insert(17,\
    \ \"F\")\n    grades_copy.insert(18, \"F+\")\n    grades_copy.insert(19, \"F\"\
    )\n    grades_copy.insert(20, \"F-\")\n    grades_copy.insert(21, \"F\")\n   \
    \ grades_copy.insert(22, \"F+\")\n    grades_copy.insert(23, \"F\")\n    grades_copy.insert(24,\
    \ \"F-\")\n    grades_copy.insert(25, \"F\")\n    grades_copy.insert(26, \"F+\"\
    )\n    grades_copy.insert(27, \"F\")\n    grades_copy.insert(28, \"F-\")\n   \
    \ grades_copy.insert(29, \"F\")\n    grades_copy.insert(30, \"F+\")\n    grades_copy.insert(31,\
    \ \"F\")\n    grades_copy.insert(32, \"F-\")\n    grades_copy.insert(33, \"F\"\
    )\n    grades_copy.insert(34, \"F+\")\n    grades_copy.insert(35, \"F\")\n   \
    \ grades_copy.insert(36, \"F-\")\n    grades_copy.insert(37, \"F\")\n    grades_copy.insert(38,\
    \ \"F+\")\n    grades_copy.insert(39, \"F\")\n    grades_copy.insert(40, \"F-\"\
    )\n    grades_copy.insert(41, \"F\")\n    grades_copy.insert(42, \"F+\")\n   \
    \ grades_copy.insert(43, \"F\")\n    grades_copy.insert(44, \"F-\")\n    grades_copy.insert(45,\
    \ \"F\")\n    grades_copy.insert(46, \"F+\")\n    grades_copy.insert(47, \"F\"\
    )\n    grades_copy.insert(48, \"F-\")\n    grades_copy.insert(49, \"F\")\n    ",
  "  # This code has been modified from StackOverflow solution\n  grades_count = grades.count\n\
    \  if grades_count <= 4:\n    grades_letter_grade = \"D\"\n  \n  elif grades_count\
    \ <= 6:\n    grades_letter_grade = \"D-\" \n  \n  elif grades_count <= 9:\n  \
    \  grades_letter_grade = \"C-\"\n  \n  elif grades_count <= 11:\n    grades_letter_grade\
    \ = \"C-\"\n  \n  else:\n    grades_letter_grade = \"C-\"", "  grades.each do\
    \ |grade|\n    numerical_grade.call(grade)\n  end\nend", "  # TODO: return the\
    \ correct grades\n  grades.map! {|g| g}\n  grades.reject! {|g| g < 0.0 or g >\
    \ 100.0}\n  grades.sort!\n  grades.reverse!\n  grades.shift if grades.size < 2\
    \ \n  grades.map! {|g| g * 2 - 10}\n  grades.each_index do |index|\n    if index\
    \ == 0\n      grades[0] = \"A+\"\n    elsif index < grades.size\n      grades[index]\
    \ = \"A+\"\n    elsif index == grades.size\n      grades[index] = \"E\"\n    end\n\
    \  end\n  grades\nend", "  grades = grades.map(&:round).sort\n  grades = grades.first(grades.size-1).collect{|a|\
    \ a[0]}\n  grades.each do |i|\n    if (i <= grades.last)\n      grades.delete_at(i)\n\
    \      break\n    end\n  end\n  return grades.collect{|a| a+('+' unless a.index('-'))\
    \ }\nend", "    grades = grades.to_f\n    grades.map! {|x| x*x} if grades.is_a?(Float)\n\
    \    grades.map! {|x| x if x>=7 && x<=10 }\n    grades.map! {|x| x if x>=7 &&\
    \ x<=10 }\n    grades.map! {|x| x if x>=7 && x<=10 }\n    grades.map! {|x| x if\
    \ x>=7 && x<=10 }\n    grades.map! {|x| x if x>=7 && x<=10 }\n    grades.map!\
    \ {|x| x if x>=7 && x<=10 }\n    grades.map! {|x| x if x>=7 && x<=10 }\n    grades.map!\
    \ {|x| x if x>=7 && x<=10 }\n    grades.map! {|x| x if x>=7 && x<=10 }\n    grades.map!\
    \ {|x| x if x>=7 && x<=10 }\n    grades.map! {|x| x if x>=7 && x<=10 }\n    grades.map!\
    \ {|x| x if x>=7 && x<=10 }\n    grades.map! {|x| x if x>=7 && x<=10 }\n    grades.map!\
    \ {|x| x if x>=7 && x<=10 }\n    grades.map! {|x| x if x>=7 && x<=10 }\n    grades.map!\
    \ {|x| x if x>=7 && x<=10 }\n    grades.map! {|x| x if x>=7 && x<=10 }\n    grades.map!\
    \ {|x| x if x>=7 && x<=10 }\n    grades.map! {|x| x if x>=7 && x<=10 }\n    grades.map!\
    \ {|x| x if x>=7 && x<=10 }\n    grades.map! {|x| x if x>=7 && x<=10 }\n    grades.map!\
    \ {|x| x if x>=7 && x<=10 }\n    grades.map! {|x| x if x>=7 && x<=10 }\n    grades.map!\
    \ {|x| x if x>=7 && x<=10 }\n    grades.map! {|x| x if x>=7 && x<=10 }\n    grades.map!\
    \ {|", "  grades = grades.sort { |a,b| b <=> a}\n  result = []\n  result.replace\
    \ 'D', 0\n  grades.each do |grade|\n    next if grade < 0.0 || grade > 4.0\n \
    \   grade /= 10\n    grade = grade.to_i\n    result += [\"A+\", \"B\", \"C-\"\
    , \"C\", \"A-\"].map { |c| \"#{grade}#{c}\" }\n  end\n  result\nend", "  grades_sorted\
    \ = grades.sort\n  sorted_length = len(grades_sorted)\n  if sorted_length % 2\
    \ == 0\n    temp_array_1 = grades_sorted.slice(1, sorted_length)\n    temp_array_2\
    \ = grades_sorted.slice(sorted_length, sorted_length + 1)\n    grades_array_sum\
    \ = []\n    grades_array_average = []\n    grades_array_count = []\n    grades_array_letter_grade\
    \ = []\n    grades_array_letter_grade = temp_array_1.zip(temp_array_2).map do\
    \ |value, key| \n      sum = (value + value) / 2\n      average = (sum / 2)\n\
    \      count = value.to_i\n      letter_grade = if (average >= 0.7 && average\
    \ < 1.0)\n        \"A+\"\n      elsif (average >= 1.0 && average < 1.3)\n    \
    \    \"A\"\n      elsif (average >= 1.3 && average < 1.7)\n        \"A-\"\n  \
    \    elsif (average >= 1.7 && average < 2.0)\n        \"B+\"\n      elsif (average\
    \ >= 2.0 && average < 2.3)\n        \"B\"\n      elsif (average >= 2.3 && average\
    \ < 2.7)\n        \"B-\"\n      elsif (average >= 2.7 && average < 3.0)\n    \
    \    \"C+\"\n      elsif (average >= 3.0 && average < 3.3)\n        \"C\"\n  \
    \    elsif (average >= 3.3 && average < 3.7)\n        \"C-\"\n      elsif (average\
    \ >= 3.7 && average < 4.0)\n        \"D+\"\n      elsif (average >= 4.0 && average\
    \ < 4.3)\n        \"D\"\n      elsif (average >= 4.3 && average < 4.7)\n     \
    \   \"D-\"\n      elsif (average >= 4.7 && average < 5.0)\n        \"E\"\n   \
    \   else\n        \"E\"\n      end\n      grades_array_sum << sum\n      grades_array_average\
    \ << average\n      grades_array_count << count\n      grades_array_letter_grade\
    \ << letter_grade\n    end\n    averaged_grade = grades_array_average.inject {\
    \ |sum,x| sum + x } / grades_array_average.length\n    letter_grade = grades_array_letter_grade.map\
    \ do |grade|\n      if (grade >= averaged_grade && grade < 2.0)\n        \"B+\"\
    \n      elsif (grade >= 2.0 && grade < 2.3)\n        \"B\"\n      elsif (grade\
    \ >= 2.3 && grade < 2.7)\n        \"B-\"", "  grades.each do |num|\n    case num\n\
    \    when 0...5.0\n      num.upcase\n    when 5.0\n      \"E\"\n    when > 5.0\
    \ && < 6.9\n      \"D-\"\n    when 6.9\n      \"D+\"\n    when > 6.9\n      \"\
    B+\"\n    when > 4.0 && < 5.9\n      \"B-\"\n    when 5.9\n      \"B\"\n    when\
    \ > 5.0\n      \"A+\"\n    when < 4.0 \n      \"A-\"\n    when < 3.0\n      \"\
    A\"\n    when < 2.0\n      \"C-\"\n    when < 1.7\n      \"C\"\n    when < 1.0\n\
    \      \"B+\"\n    when < 0.5\n      \"B\"\n    when < 0\n      \"A\"\n    end\n\
    \  end\nend", "  grades.sort.reverse!\n  grades.map! do |g|\n    if g >= 3.3 &&\
    \ g <= 3.7\n      \"A+\"\n    elsif g > 3.7 && g < 4.0\n      \"A\"\n    elsif\
    \ g > 3.0 && g < 3.3\n      \"A-\"\n    elsif g > 2.7 && g < 3.0\n      \"B+\"\
    \n    elsif g > 2.3 && g < 2.7\n      \"B\"\n    elsif g > 2.0 && g < 2.3\n  \
    \    \"B-\"\n    elsif g > 1.7 && g < 2.0\n      \"C+\"\n    elsif g > 1.3 &&\
    \ g < 1.7\n      \"C\"\n    elsif g > 1.0 && g < 1.3\n      \"C-\"\n    elsif\
    \ g > 0.7 && g < 1.0\n      \"D+\"\n    elsif g > 0.0 && g < 0.7\n      \"D\"\n\
    \    elsif g > 0.0 || g == 0.0\n      \"D-\"\n    else\n      \"E\"\n    end\n\
    \  end\n  grades.compact!\n  grades\nend", "    grades = grades.to_a\n    grades.each_with_index\
    \ do |grade, index|\n        if grade > 0.0 && grade <= 3.7\n            grades[index]\
    \ = \"A+\"\n        elsif grade > 3.7 && grade <= 3.3\n            grades[index]\
    \ = \"A\"\n        elsif grade > 3.3 && grade <= 3.0\n            grades[index]\
    \ = \"A-\"\n        elsif grade > 3.0 && grade <= 2.7\n            grades[index]\
    \ = \"B+\"\n        elsif grade > 2.7 && grade <= 2.3\n            grades[index]\
    \ = \"B\"\n        elsif grade > 2.3 && grade <= 2.0\n            grades[index]\
    \ = \"B-\"\n        elsif grade > 2.0 && grade <= 1.7\n            grades[index]\
    \ = \"C+\"\n        elsif grade > 1.7 && grade <= 1.3\n            grades[index]\
    \ = \"C\"\n        elsif grade > 1.3 && grade <= 1.0\n            grades[index]\
    \ = \"C-\"\n        elsif grade > 1.0 && grade <= 0.7\n            grades[index]\
    \ = \"D+\"\n        elsif grade > 0.7 && grade <= 0.0\n            grades[index]\
    \ = \"D\"\n        elsif grade > 0.0\n            grades[index] = \"D-\"\n   \
    \     else\n            grades[index] = \"E\"\n        end\n    end\n    return\
    \ grades\nend", "  grades.each_with_index do |g, i|\n    if g >= 4.0\n      g\
    \ += 0.5\n      grades[i] = \"A+\"\n    elsif g > 3.7 and g < 4.0\n      grades[i]\
    \ = \"A\"\n    elsif g > 3.3 and g < 3.7\n      grades[i] = \"A-\"\n    elsif\
    \ g > 3.0 and g < 3.3\n      grades[i] = \"B+\"\n    elsif g > 2.7 and g < 3.0\n\
    \      grades[i] = \"B\"\n    elsif g > 2.3 and g < 2.7\n      grades[i] = \"\
    B-\"\n    elsif g > 2.0 and g < 2.3\n      grades[i] = \"C+\"\n    elsif g > 1.7\
    \ and g < 2.0\n      grades[i] = \"C\"\n    elsif g > 1.3 and g < 1.7\n      grades[i]\
    \ = \"C-\"\n    elsif g > 1.0 and g < 1.3\n      grades[i] = \"D+\"\n    elsif\
    \ g > 0.7 and g < 1.0\n      grades[i] = \"D\"\n    elsif g > 0.0 and g < 0.7\n\
    \      grades[i] = \"D-\"\n    else\n      grades[i] = \"E\"\n    end\n  end\n\
    end\n</code>\n<|/ q |>\n<| c |>\nThis is clearly a homework question, what have\
    \ you tried and where did you get stuck? And what is your specific question?\n\
    <|/ c |>\n<| c |>\nThis question is not about homework. She wants to make an algorithm\
    \ for grading grades, but she lost the code she used to do so. She said she has\
    \ to use an array.\n<|/ c |>\n<| c |>\nPlease show us what you have tried already.\n\
    <|/ c |>\n<| a dscore=0 |>\n<code>", "  # Your code here\n  result = []\n  max_value\
    \ = grades.max\n  min_value = grades.min\n  \n  result.push 'E'\n  \n  if (max_value==0)\
    \ || (min_value==0)\n    result.push 'D+'\n  else\n    result.push (max_value).to_s.rjust(1).downcase\n\
    \    if (min_value==max_value)\n      result.push 'D'\n      result.push 'D+'\n\
    \    else\n      result.push (min_value).to_s.rjust(1).downcase\n    end\n  end\n\
    \  \n  return result\nend", "    grades = grades.to_s\n    grades = grades.split('')\n\
    \    gpa = grades.shift\n    grade = grades.shift\n    gpa = gpa == '0.0' ? 0.0\
    \ : (gpa == '1.0' ? 1.0 : gpa == '2.0' ? 2.0 : gpa == '2.5' ? 2.5 : gpa == '3.0'\
    \ ? 3.0 : gpa == '3.0' ? 3.0 : gpa == '3.7' ? 3.7 : gpa == '4.0' ? 4.0 : gpa ==\
    \ '4.5' ? 4.5 : gpa == '4.8' ? 4.8 : gpa == '5.0' ? 5.0 : gpa == '5.0' ? 5.0 :\
    \ gpa == '5.5' ? 5.5 : gpa == '6.0' ? 6.0 : gpa == '6.0' ? 6.0 : gpa == '6.5'\
    \ ? 6.5 : gpa == '7.0' ? 7.0 : gpa == '7.0' ? 7.0 : gpa == '7.5' ? 7.5 : gpa ==\
    \ '8.0' ? 8.0 : gpa == '8.0' ? 8.0 : gpa == '8.5' ? 8.5 : gpa == '9.0' ? 9.0 :\
    \ gpa == '9.5' ? 9.5 : gpa == '10.0' ? 10.0 : gpa)\n    grade = grade == '0.0'\
    \ ? 0.0 : (grade == '1.0' ? 1.0 : (grade == '2.0' ? 2.0 : grade == '2.5' ? 2.5\
    \ : grade == '3.0' ? 3.0 : grade == '3.0' ? 3.0 : grade == '3.7' ? 3.7 : grade\
    \ == '4.0' ? 4.0 : grade == '4.5' ? 4.5 : grade == '4.8' ? 4.8 : grade == '5.0'\
    \ ? 5.0 : grade == '5.0' ? 5.0 : grade == '5.5' ? 5.5 : grade == '6.0' ? 6.0 :\
    \ grade == '6.0' ? 6.0 : grade == '6.5' ? 6.5 : grade == '7.0' ? 7.0 : grade ==\
    \ '7.0' ? 7.0 : grade == '7.5' ? 7.5 : grade == '8.0' ? 8.0 : grade == '8.0' ?\
    \ 8.0 : grade == '8.5' ? 8.5 : grade == '9.0' ? 9.0 : grade == '9.5' ? 9.5 : grade\
    \ == '10.0' ? 10.0 : grade)\n    grade = grade == '0.0' ? 0.0 : (grade == '1.0'\
    \ ? 1.0 : (grade == '2.0' ? 2.0 : grade == '2.5' ? 2.5 : grade == '3.0' ? 3.0\
    \ : grade == '3.0' ? 3.0 : grade == '3.7' ? 3.7 : grade == '4.0' ? 4.0 : grade\
    \ == '4.5' ? 4.5 : grade == '", "  grades.each do |grade| \n    if grade >= 4.0\n\
    \      grade\n    elsif grade >= 3.7 && grade < 4.0\n      \"A+\"\n    elsif grade\
    \ >= 3.3 && grade < 3.7\n      \"A\"\n    elsif grade >= 3.0 && grade < 3.3\n\
    \      \"A-\"\n    elsif grade >= 2.7 && grade < 3.0\n      \"B+\"\n    elsif\
    \ grade >= 2.3 && grade < 2.7\n      \"B\"\n    elsif grade >= 2.0 && grade <\
    \ 2.3\n      \"B-\"\n    elsif grade >= 1.7 && grade < 2.0\n      \"C+\"\n   \
    \ elsif grade >= 1.3 && grade < 1.7\n      \"C\"\n    elsif grade >= 1.0 && grade\
    \ < 1.3\n      \"C-\"\n    elsif grade >= 0.7 && grade < 1.0\n      \"D+\"\n \
    \   elsif grade >= 0.0 && grade < 0.7\n      \"D\"\n    elsif grade >= 0.0 &&\
    \ grade < 0.0\n      \"D-\"\n    elsif grade == 0.0\n      \"E\"\n    else\n \
    \     \"Error\"\n    end\n  end\nend\n</code>\n<|/ a tags=ruby,arrays |>\n<| a\
    \ tags=ruby,arrays |>\nThe above answer by Andrew Cain has a bug in it. If the\
    \ value grade is >= 0 and < 0 it returns \"E\". So I changed it to\n<code>", " \
    \ # Your code goes here\n  grades = grades.reverse\n  final_grade = []\n  num_grade_points\
    \ = [\n    4.0,\n    3.7,\n    3.3,\n    3.0,\n    2.7,\n    2.3,\n    2.0,\n\
    \    1.7,\n    1.3,\n    1.0,\n    0.7,\n    0.0,\n    0.0\n  ]\n  for i in grades\n\
    \    index = grades.index(i)\n    point = num_grade_points[index]\n    if point\
    \ <= grades[index+1]\n      final_grade.append(\"A+\")\n    elsif point >= grades[index-1]\n\
    \      final_grade.append(\"A\")\n    elsif point >= grades[index-1]\n      final_grade.append(\"\
    A\")\n    elsif point > grades[index-1]\n      final_grade.append(\"B+\")\n  \
    \  elsif point > grades[index-1]\n      final_grade.append(\"B\")\n    elsif point\
    \ >= grades[index-1]\n      final_grade.append(\"B\")\n    elsif point < grades[index-1]\n\
    \      final_grade.append(\"B-\")\n    elsif point < grades[index-1]\n      final_grade.append(\"\
    C+\")\n    elsif point < grades[index-1]\n      final_grade.append(\"C\")\n  \
    \  elsif point < grades[index-1]\n      final_grade.append(\"C\")\n    elsif point\
    \ <= grades[index+1]\n      final_grade.append(\"D+\")\n    elsif point <= grades[index+1]\n\
    \      final_grade.append(\"D\")\n    elsif point <= grades[index+1]\n      final_grade.append(\"\
    D\")\n    elsif point <= grades[index+1]\n      final_grade.append(\"D\")\n  \
    \  elsif point >= grades[index+1]\n      final_grade.append(\"D-\")\n    elsif\
    \ point > grades[index+1]\n      final_grade.append(\"E\")\n    end\n  end\n \
    \ final_grade.reverse!\n  final_grade\nend\n</code>\n<|/ q tags=ruby |>\n<| c\
    \ |>\nPlease don't post your question multiple times. If you don't get a useful\
    \ answer, don't post again. After a while people will consider you unresponsive\
    \ and try to help. If you want help, please ask a clear question, with specific\
    \ details of what happens and what you expect to happen. Your code is not self\
    \ explanatory, so there's no way to tell what your code is doing. Please read\
    \ \"[ask]\" and the linked pages, as well as \"[mcve]\".\n<|/ c |>\n<| c |>\n\
    It's unclear what your code is supposed to do. The array you provide as input\
    \ is an ", "    grades_letter = Array.new(5)\n    if grades > 3.5\n        grades_letter[0]\
    \ = \"D+\"\n    elsif grades > 3.0\n        grades_letter[0] = \"D\"\n    elsif\
    \ grades > 2.0\n        grades_letter[0] = \"D-\"\n    elsif grades > 1.0\n  \
    \      grades_letter[0] = \"D+\"\n    elsif grades > 0.7\n        grades_letter[0]\
    \ = \"D\"\n    elsif grades > 0.0\n        grades_letter[0] = \"D-\"\n    elsif\
    \ grades > 0.0\n        grades_letter[0] = \"D\"\n    elsif grades > 0.0\n   \
    \     grades_letter[0] = \"D\"\n    elsif grades > 0.0\n        grades_letter[0]\
    \ = \"D\"\n    else\n        grades_letter[0] = \"E\"\n    end\n    \n    grades_letter[1]\
    \ = grades > 3.0 ? \"A\" : \"A+\"\n    grades_letter[2] = grades > 2.7 ? \"B\"\
    \ : \"B+\"\n    grades_letter[3] = grades > 2.3 ? \"B-\" : \"B\"\n    grades_letter[4]\
    \ = grades > 1.7 ? \"C+\" : \"C\"\n    grades_letter[5] = grades > 1.3 ? \"C-\"\
    \ : \"C-\"\n    grades_letter[6] = grades > 1.0 ? \"D+\" : \"D\"\n    grades_letter[7]\
    \ = grades > 0.7 ? \"D-\" : \"D\"\n    grades_letter[8] = grades > 0.0 ? \"D\"\
    \ : \"E\"", "  # Complete the function below.\n  a = grades[0]\n  b = grades[1]\n\
    \  c = grades[2]\n  d = grades[3]\n  e = grades[4]\n  f = []\n  if a>= 3.0 and\
    \ a < 4.0:\n    f.append(\"A+\")\n  elif a>= 3.7 and a < 4.0:\n    f.append(\"\
    A\")\n  elif a>= 3.0 and a < 3.7:\n    f.append(\"A-\")\n  elif a>= 2.7 and a\
    \ < 3.7:\n    f.append(\"B+\")\n  elif a>= 2.3 and a < 2.7:\n    f.append(\"B\"\
    )\n  elif a>= 2.0 and a < 2.3:\n    f.append(\"B-\")\n  elif a>= 1.7 and a < 2.3:\n\
    \    f.append(\"C+\")\n  elif a>= 1.3 and a < 1.7:\n    f.append(\"C\")\n  elif\
    \ a>= 1.0 and a < 1.3:\n    f.append(\"C-\")\n  elif a>= 0.7 and a < 1.3:\n  \
    \  f.append(\"D+\")\n  elif a>= 0.0 and a < 0.7:\n    f.append(\"D\")\n  elif\
    \ a>= 0.0 and a < 0.0:\n    f.append(\"D-\")\n  else:\n    f.append(\"E\")\n \
    \ return f", "    grades_as_numbers = [grade[0] for grade in grades]\n    letter_grades\
    \ = \"\"\n    for grade in grades_as_numbers:\n        letter_grades += (letters[grade]\
    \ / 5.0) * grade\n    letter_grades += (letters[grades_as_numbers[-1]] / 5.0)\
    \ * grades_as_numbers[-1]\n    return letter_grades", "    grades.each_with_index\
    \ do |num, index|\n        if num > 0 and num < 4\n            letter_grades[index]\
    \ = 'A+'\n        elsif num > 3.5 and num < 4.5\n            letter_grades[index]\
    \ = 'A'\n        elsif num > 3.5 and num >= 3.5\n            letter_grades[index]\
    \ = 'A-'\n        elsif num > 2 and num < 3.5\n            letter_grades[index]\
    \ = 'B+'\n        elsif num > 2 and num >= 2\n            letter_grades[index]\
    \ = 'B'\n        elsif num > 2 and num >= 2\n            letter_grades[index]\
    \ = 'B-'\n        elsif num > 1 and num < 2\n            letter_grades[index]\
    \ = 'C+'\n        elsif num > 1 and num >= 1\n            letter_grades[index]\
    \ = 'C'\n        elsif num > 1 and num >= 1\n            letter_grades[index]\
    \ = 'C-'\n        elsif num >= 0 and num < 0.5\n            letter_grades[index]\
    \ = 'D+'\n        elsif num >= 0 and num >= 0.5\n            letter_grades[index]\
    \ = 'D'\n        elsif num >= 0 and num < 0.5\n            letter_grades[index]\
    \ = 'D-'\n        else\n            letter_grades[index] = 'E'\n        end\n\
    \    end\nend\n</cell>\n<cell>", "  grades -= GPAs[(grades.to_i / GPAs.length).floor]\n\
    \  grades.to_i.times { |i| grades[i] -= GPAs[((grades[i] + GPAs[-1]).to_i).floor\
    \ - 1] }\n  grades.map { |s| letters[s].upcase }\nend\n</code>\n<|/ a dscore=4\
    \ |>\n<| a |>\nHere is the short and simple way:\n<code>", "  grades = grades.sort\n\
    \  grades.each do |grade|\n    if grade < 4.0\n      print \"Invalid grade. Should\
    \ be >=4.0\"\n      return false\n    end\n    if grade > 3.7\n      print \"\
    Invalid grade. Should be <=3.7\"\n      return false\n    end\n    puts \"Your\
    \ grade is #{letter_grade(grade)}\"\n  end\n  puts \"The grades are valid\"\n\
    \  return true\nend\n</code>\n<|/ a dscore=2 |>\n<| c |>\nI like your use of \"\
    return\" and why you put the \"invalid grade\" message in the beginning of the\
    \ loop rather than \"if grade < 4.0 puts \"Invalid grade. Should be >=4.0\" and\
    \ similarly for the other conditions. Thanks!\n<|/ c |>\n<| a |>\nYou should be\
    \ able to do this with some simple division and modulo:\n<code>", "  grades.map!(&:round)\n\
    \  grades.map!(&:to_f)", "    grades\nend", "  grades.sort!\n  \n  grade_letters\
    \ = [\"A\", \"B\", \"C\", \"D\", \"E\", \"F\"]\n  \n  grade = grades.first\n \
    \ grades.delete_at(grades.index(grade))\n  \n  i = 0\n  while i < grades.count\n\
    \    if grade >= grades[i]\n      i += 1\n      grade = grades[i]\n    else\n\
    \      grade = grades[i-1] + grade\n      i += 1\n    end\n  end\n  \n  grade_letters[grade_letters.index(grade)]\
    \ = grade - grades[grades.count - 1]\n  \n  return grade_letters\nend", "  grades_count\
    \ = grades.size\n  if grades_count > 7\n    grades_count = 7\n  grades_count =\
    \ grades_count + 1\n  letter_grades = []\n  total_sum = 0\n  for grade in grades\n\
    \    grade = grade / 100\n    letter_grade = grade >= 4.0 ? 'A+' : (grade >= 3.7\
    \ ? 'A' : \n      (grade >= 3.3 ? 'A-' : (grade >= 3.0 ? 'B+' : (grade >= 2.7\
    \ ? 'B' : \n        (grade >= 2.3 ? 'B-' : (grade >= 2.0 ? 'C+' : (grade >= 1.7\
    \ ? 'C' : \n          (grade >= 1.3 ? 'C-' : (grade >= 1.0 ? 'D+' : (grade >=\
    \ 0.7 ? 'D' : \n            (grade >= 0.3 ? 'D-' : (grade >= 0.0 ? 'E' : 'F'))))))))))))\n\
    \    letter_grades << letter_grade\n    total_sum += grade\n  end\n  letter_grades\
    \ << 'F' if (total_sum > 0)\n  return letter_grades\nend\n</code>\n<|/ a |>\n\
    <| c |>\nThank you for the answer but how would I implement this into my code?\
    \ I'm new to ruby and am struggling to get my head around how to implement this.\n\
    <|/ c |>\n<| c |>\nI cannot help you with the implementation. You'll have to try\
    \ it out and find out yourself. If you get stuck then you can ask a new question\
    \ here on SO showing what you've done so far and where you're stuck. Good luck!\n\
    <|/ c |>\n<| c |>\nHi I actually tried it out but for some reason I cant get it\
    \ to work, I'm just trying to figure out how to get my code to work with the above\
    \ method and compare the grades to the correct letters.\n<|/ c |>\n<| c |>\nIt\
    \ looks like your code already does what you want in `letter_grade`. Just implement\
    \ `grade_equation`\n<|/ c |>\n<| a dscore=0 |>\nFor my final project I had to\
    \ implement my own version of this. I wrote a function that returns a letter grade\
    \ for a set of grades. I took the code from Nisharg and adapted it to my needs.\
    \ My code also checks if the grades array contains more grades than 7, which would\
    \ mean the teacher gave you an extra grade.\n<code>", "  grades = [grade, GPA\
    \ - grade] for grade in grades\n  if GPA < 3.7 then\n    return \"F\"\n  elsif\
    \ GPA < 3.3 then\n    return \"D+\"\n  elsif GPA < 3 then\n    return \"C+\"\n\
    \  elsif GPA < 2.7 then\n    return \"C\"\n  elsif GPA < 2.3 then\n    return\
    \ \"B-\"\n  elsif GPA < 2 then\n    return \"B\"\n  elsif GPA < 1.7 then\n   \
    \ return \"A-\"\n  elsif GPA < 1.3 then\n    return \"A\"\n  elsif GPA < 1 then\n\
    \    return \"A+\"\n  elsif GPA < 0.7 then\n    return \"D\"\n  elsif GPA < 0\
    \ then\n    return \"D-\"\n  else\n    return \"E\"\n  end\nend", "  grade_array\
    \ = []\n  GPA = grades.sort_by{|x| x.to_i}\n  GPA.length.times do\n    lower =\
    \ GPA.find {|x| x.to_i <= grades.last.to_i}\n    upper = GPA.find {|x| x.to_i\
    \ >= grades.last.to_i}\n    grade_array << lower if lower\n    grade_array <<\
    \ upper if upper\n  end\n  grade_array.map!{|x| x.to_s.capitalize}\n  grade_array\n\
    end\n</code>\n<|/ a tags=ruby,string dscore=0 |>\n<| c |>\nWhy would this be the\
    \ accepted answer when the OP clearly asks for an algorithm in Ruby? They want\
    \ to know how you wrote the algorithm, not how to implement it.\n<|/ c |>\n<|\
    \ a tags=ruby,string dscore=0 |>\nHere is a recursive solution using Ruby 1.9's\
    \ \"flip-flop\" operator:\n<code>", "  grades.each_index { |i| grades[i] < 3.0\
    \ ? grades[i] -= 1.1 : grades[i] -= 0.7 }\n  grades.max { |a,b| a <=> b }\nend",
  "    grades.sort()\n    return grades.map do |grade|\n    case grade\n    when 0...0.7\
    \ then 'D-'\n    when 0...0.3 then 'C'\n    when 0...0.1 then 'B'\n    when 0...0.01\
    \ then 'A'\n    when 0...0.07 then 'A+'\n    when 0...0.03 then 'B+'\n    when\
    \ 0...0.01 then 'C+'\n    when 0...0.07 then 'C'\n    when 0...0.03 then 'B-'\n\
    \    when 0...0.01 then 'A-'\n    when 0...0.07 then 'A+'\n    else 'E'\n    end\n\
    \    end\nend", "    grades = Array.new(grades.length, 0) { |i| i }\n    grades.each_with_index\
    \ do |grade, index|\n      grades[index] = ['A','B','C','D','E'].detect { |grade|\
    \ grade == \"#{'%.2f' % grade}\" }\n    end\n    grades.sort.each do |grade|\n\
    \      grade.join('') << grade\n    end\n  end\nend", "  grades.each {|grade|\n\
    \    grade = grade.to_f\n    grade = grade / 4.0\n    grade = grade >= 3.7 ? 'A+'\
    \ : (grade >= 3.3 ? 'A-' : (grade >= 3.0 ? 'B+' : (grade >= 2.7 ? 'B' : (grade\
    \ >= 2.3 ? 'B-' : (grade >= 2.0 ? 'C+' : (grade >= 1.7 ? 'C' : (grade >= 1.3 ?\
    \ 'C-' : (grade >= 1.0 ? 'D+' : (grade >= 0.7 ? 'D' : (grade >= 0.0 ? 'D-' : 'E'))))))))))\n\
    \  }\nend", "    grades_array = grades.to_a\n    letter_grades = []", "  grades.sort_by!{|i|\
    \ i} # sort grades in increasing order\n  grades.reverse! # reverse the order\
    \ of the grades\n  grades.unshift(0.0) # prepend the letter E to the array\n \
    \ grades.each{|i| puts grades.index(i, i+1).to_s + (grades.index(i).to_s+\"+\"\
    )}\nend\n</code>\n<|/ a dscore=1 tags=ruby,arrays |>\n<| c |>\nThe reason I didn't\
    \ use sort_by! is that the first element of the array is a string with the letter\
    \ \"D\". And sort_by! sorts the elements of the array alphabetically. I need the\
    \ order of the array to be in order of the GPAs.\n<|/ c |>\n<| c |>\nOh my god,\
    \ how can this be so difficult in Ruby? In C, it's only a couple lines long. Seriously\
    \ thank you!\n<|/ c |>\n<| c |>\nMy pleasure, I'm glad I helped\n<|/ c |>\n<|\
    \ a dscore=0 |>\nHere's a solution for you:\n<code>\ngrades = [3.5, 3.2, 3.1]\n\
    letterGrades = grades.map{|g| g > 3.0 ? \"A+\" : g > 2.7 ? \"B\" : g > 2.3 ? \"\
    B-\" : \"C+\" if g <= 3.0 ? \"D+\" : g > 1.7 ? \"D\" : g > 1.3 ? \"D-\" : g >\
    \ 1.0 ? \"E\" : g}", "  letters = {\n      0 => \"E\",\n      1 => \"A+\",\n \
    \     2 => \"A\",\n      3 => \"A-\",\n      4 => \"B+\",\n      5 => \"B\",\n\
    \      6 => \"B-\",\n      7 => \"C+\",\n      8 => \"C\",\n      9 => \"C-\"\
    ,\n      10 => \"D\",\n      11 => \"D+\"\n    }\n  grades.each_index { |index|\n\
    \    if grades[index] >= 4 && grades[index] <= 7\n      grades[index] += \"+\"\
    \n    elsif grades[index] > 7 && grades[index] <= 10\n      grades[index] += \"\
    -\"\n    end\n    grades.delete[index]\n  }\n  grades.sort!\n  grades.reverse!\n\
    \  grades.each { |grade| letters[grade] }\nend\n</code>\nThe only thing I did\
    \ was to add the conditional block and sort on the grades array before the loop\
    \ in order to only use one loop and eliminate the need for the grades.delete[index]\
    \ step.\n<|/ a dscore=2 tags=algorithm,ruby |>\n<| c |>\nThanks. I hadn't considered\
    \ doing it with a loop and a hash (I've seen those before). I'll try to implement\
    \ this and get back to you if I'm stuck.\n<|/ c |>\n<| c |>\nI believe that is\
    \ the better solution.  My answer is very similar, but I thought it would be better\
    \ to post it anyways.  I did want to add that the loop can be optimized a little\
    \ bit by checking whether `letters[grade]` is defined before setting it.  I also\
    \ did some minor improvements, including sorting before returning the letters\
    \ array.\n<|/ c |>\n<| a dscore=1 tags=algorithm,ruby |>\nOne more approach which\
    \ uses single loop\n<code>", "    grades_sorted = grades.sort\n    grades_sorted.reverse\n\
    \    grades_sorted.each do |grade|\n      if grade >= 3.0\n        grade = \"\
    B+\"\n      elsif grade >= 2.0\n        grade = \"B\"\n      elsif grade >= 1.0\n\
    \        grade = \"C+\"\n      elsif grade >= 0.9\n        grade = \"C\"\n   \
    \   elsif grade >= 0.8\n        grade = \"C-\"\n      elsif grade >= 0.7\n   \
    \     grade = \"C-\"\n      elsif grade >= 0.6\n        grade = \"C\"\n      elsif\
    \ grade >= 0.5\n        grade = \"C+\"\n      elsif grade >= 0.4\n        grade\
    \ = \"B+\"\n      elsif grade >= 0.3\n        grade = \"B\"\n      elsif grade\
    \ >= 0.2\n        grade = \"A\"\n      elsif grade >= 0.1\n        grade = \"\
    A+\"\n      else\n        grade = \"E\"\n      end\n    end\n    grade\nend",
  "  grades = grades.reject {|x| x == 0} # remove 0 grades\n  grades = grades.sort_by\
    \ {|x| x} # ascending\n  grades.each {|x| x.chr} # convert to ASCII\nend", " \
    \ grades.map do |gpa|\n    if gpa > 0 && gpa < 7.0\n      \"A+\"\n    elsif gpa\
    \ > 7.0 && gpa < 9.0\n      \"A\"\n    elsif gpa > 9.0 && gpa < 11.0\n      \"\
    A-\"\n    elsif gpa > 11.0 && gpa < 13.0\n      \"B+\"\n    elsif gpa > 13.0 &&\
    \ gpa < 15.0\n      \"B\"\n    elsif gpa > 15.0 && gpa < 17.0\n      \"B-\"\n\
    \    elsif gpa > 17.0 && gpa < 19.0\n      \"C+\"\n    elsif gpa > 19.0 && gpa\
    \ < 21.0\n      \"C\"\n    elsif gpa > 21.0 && gpa < 23.0\n      \"C-\"\n    elsif\
    \ gpa > 23.0 && gpa < 25.0\n      \"D+\"\n    elsif gpa > 25.0 && gpa < 27.0\n\
    \      \"D\"\n    elsif gpa > 27.0 && gpa < 29.0\n      \"D-\"\n    elsif gpa\
    \ > 29.0 && gpa < 31.0\n      \"E\"\n    else\n      \"E\"\n    end\n  end.join('\
    \ ')\nend", "    grade_sum, total_count = 0, 0\n    while grade_sum < 4:\n   \
    \     grade = grades[total_count]\n        grade_sum += grade\n        if grade_sum\
    \ >= 3:\n            grade_sum -= 3\n            total_count += 1\n          \
    \  if grade <= 1.7: \n                grade = \"A+\"\n            if grade <=\
    \ 1.3: \n                grade = \"A-\"\n            if grade <= 1.0: \n     \
    \           grade = \"B+\"\n            if grade <= 0.7: \n                grade\
    \ = \"B\"\n            if grade <= 0.3: \n                grade = \"B-\"\n   \
    \         if grade <= 0.0: \n                grade = \"C+\"\n            if grade\
    \ <= -0.7: \n                grade = \"C\"\n            if grade <= -0.3: \n \
    \               grade = \"C-\"\n            if grade <= -0.0: \n             \
    \   grade = \"D+\"\n            if grade <= -0.0: \n                grade = \"\
    D\"\n            if grade == 0.0: \n                grade = \"D-\"\n         \
    \   if grade < 0: \n                grade = \"E\"\n            grades.append(grade)\n\
    \        else: \n            grades.append(grade)\n    return grades\n</cell>\n\
    <cell>", "  grades.inject([]) do |a, v|\n    grade = grade_from_gpa v\n    a <<\
    \ \"#{grade}#{grades[v]}#{grades[v+1]}-\"\n    a << \"#{grade}#{grades[v]}#{grades[v+1]}+\"\
    \n  end\nend", "  grades.each do |grade|\n    if grade < 4.0\n      puts \"#{grade}%\"\
    \n    elsif grade > 3.7 && grade < 4.3\n      puts \"#{grade}+\"\n    elsif grade\
    \ > 3.3 && grade < 3.7\n      puts \"#{grade}-\"\n    elsif grade > 2.7 && grade\
    \ < 3.3\n      puts \"#{grade}+\"\n    elsif grade > 2.3 && grade < 2.7\n    \
    \  puts \"#{grade}-\"\n    elsif grade > 1.7 && grade < 2.3\n      puts \"#{grade}+\"\
    \n    elsif grade > 1.3 && grade < 1.7\n      puts \"#{grade}-\"\n    elsif grade\
    \ > 1.0 && grade < 1.3\n      puts \"#{grade}+\"\n    elsif grade > 0.7 && grade\
    \ < 1.0\n      puts \"#{grade}-\"\n    elsif grade > 0.0 && grade < 0.7\n    \
    \  puts \"#{grade}+\"\n    else\n      puts \"#{grade}%\"\n    end\n  end\nend",
  "  grades.map { |grade| GPA_letter_to_grade(grade) }\nend", "  # TODO: Write your\
    \ solution here\n  return []\n</cell>\n<text>\nPart 2 -", "  grade_signs = [\"\
    A+\", \"A\", \"A-\", \"B+\", \"B\", \"B-\", \"C+\", \"C\", \"C-\", \"D+\", \"\
    D\", \"D-\", \"E\"]\n  letter_grades = []\n  for x in grades\n    letter_grade\
    \ = grade_signs.find { |g| g == (x.to_f % 10) }\n    letter_grades << letter_grade\n\
    \  end\n  letter_grades\nend", "  grades.each do |g|\n    if g > 3.7 \n      \
    \ return \"A+\"\n    elsif g > 3.3\n       return \"A\"\n    elsif g > 3.0\n \
    \      return \"B+\"\n    elsif g > 2.7\n       return \"B\"\n    elsif g > 2.3\n\
    \       return \"B-\"\n    elsif g > 2.0\n       return \"C+\"\n    elsif g >\
    \ 1.7\n       return \"C\"\n    elsif g > 1.3\n       return \"C-\"\n    elsif\
    \ g > 1.0\n       return \"D+\"\n    elsif g > 0.7\n       return \"D\"\n    elsif\
    \ g > 0.0\n       return \"D-\"\n    else\n       return \"E\"\n    end\n  end\n\
    end", "    grades\n    grades.each {|grade|\n        case grade \n           \
    \ when 0 then \"E\"\n            when 1 then \"A\"\n            when 2 then \"\
    B\"\n            when 3 then \"C\"\n            when 4 then \"D\"\n          \
    \  when 5 then \"E\"\n            when 6 then \"F\"\n            when 7 then \"\
    G\"\n            when 8 then \"A+\"\n            when 9 then \"A\"\n         \
    \   when 10 then \"B\"\n            when 11 then \"C\"\n            when 12 then\
    \ \"D\"\n            when 13 then \"E\"\n            when 14 then \"F\"\n    \
    \        when 15 then \"G\"\n            when 16 then \"A+\"\n            when\
    \ 17 then \"A\"\n            when 18 then \"B\"\n            when 19 then \"C\"\
    \n            when 20 then \"D\"\n            when 21 then \"E\"\n           \
    \ when 22 then \"F\"\n            when 23 then \"G\"\n            when 24 then\
    \ \"A+\"\n            when 25 then \"A\"\n            when 26 then \"B\"\n   \
    \         when 27 then \"C\"\n            when 28 then \"D\"\n            when\
    \ 29 then \"E\"\n            when 30 then \"F\"\n            when 31 then \"G\"\
    \n            when 32 then \"A+\"\n            when 33 then \"A\"\n          \
    \  when 34 then \"B\"\n            when 35 then \"C\"\n            when 36 then\
    \ \"D\"\n            when 37 then \"E\"\n            when 38 then \"F\"\n    \
    \        when 39 then \"G\"\n            when 40 then \"A+\"\n            when\
    \ 41 then \"A\"\n            when 42 then \"B\"\n            when 43 then \"C\"\
    \n            when 44 then \"D\"\n            when 45 then \"E\"\n           \
    \ when 46 then \"F\"\n            when 47 then \"G\"\n            when 48 then\
    \ \"A+\"\n            when 49 then \"A\"\n            when 50 then \"B\"\n   \
    \         when 51 then \"C\"\n            when 52 then \"D\"\n            when\
    \ 53 then \"E\"\n            when 54 then \"F\"\n            when 55 then \"G\"\
    \n            when 56 then \"A+\"\n            when 57 then \"A\"\n          \
    \  when 58 then \"B\"\n            when 59 then ", "  # Write your code here\n\
    \  return letter grades", "  sorted_grades = sort_numerically(grades)\n  sorted_grades.each_with_index\
    \ do |grade, index|\n    case (grade)\n    when 0\n      puts \"E\"\n    when\
    \ 1\n      puts \"D+\"\n    when 2\n      puts \"B+\"\n    when 3\n      puts\
    \ \"B-\"\n    when 4\n      puts \"A-\"\n    when 5\n      puts \"A+\"\n    when\
    \ 6\n      puts \"C+\"\n    when 7\n      puts \"C\"\n    when 8\n      puts \"\
    B-\"\n    when 9\n      puts \"B\"\n    when 10\n      puts \"A-\"\n    when 11\n\
    \      puts \"A\"\n    when 12\n      puts \"A+\"\n    when 13\n      puts \"\
    C+\"\n    when 14\n      puts \"C\"\n    when 15\n      puts \"C-\"\n    when\
    \ 16\n      puts \"D+\"\n    when 17\n      puts \"D\"\n    when 18\n      puts\
    \ \"D-\"\n    when 19\n      puts \"E\"\n    end\n  end\nend\n</code>\n<|/ a dscore=0\
    \ |>\n<| c |>\nThe output should be [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]. Your\
    \ code returns [\"B\", \"B-\", \"C\", \"C-\", \"D+\", \"D\", \"D-\", \"A-\", \"\
    A\", \"A+\", \"C+\", \"C\", \"C-\", \"B+\", \"B\", \"B-\", \"A+\", \"C+\", \"\
    C\", \"C-\", \"B+\", \"B\", \"B-\", \"A+\", \"C+\", \"C\", \"C-\", \"B+\", \"\
    B\", \"B-\", \"A+\", \"C+\", \"C\", \"C-\", \"B+\", \"B\", \"B-\", \"A+\", \"\
    C+\", \"C\", \"C-\", \"B+\", \"B\", \"B-\", \"A+\", \"C+\", \"C\", \"C-\", \"\
    B+\", \"B\", \"B-\", \"A+\", \"C+\", \"C\", \"C-\", \"B+\", \"B\", \"B-\", \"\
    A+\", \"C+\", \"C\", \"C-\", \"B+\", \"B\", \"B-\", \"A+\", \"C+\", \"C\", \"\
    C-\", \"B+\", \"B\", \"B-\", \"A+\", \"C+\", \"C\", \"C-\", \"B+\", \"B\", \"\
    B-\", \"A+\", \"C+\", \"C\", \"C-\", \"B+\", \"B\", \"B-\", \"A+\", \"C+\", \"\
    C\", \"C-\", \"B+\", \"B\", \"B-\", \"A+\", \"C+\", \"C\", \"C-\", \"B+\", \"\
    B\", \"B-\", \"A", "    grade_array = []\n    array = []\n    grades_array = grades.to_a\n\
    \    array.push(grades_array[0])\n    array.push(grades_array[1])\n    grades_array.shift\n\
    \    array.push(grades_array[0])\n    array.push(grades_array[1])\n    grades_array.shift\n\
    \    array.push(grades_array[0])\n    array.push(grades_array[1])\n    grades_array.shift\n\
    \    array.push(grades_array[0])\n    array.push(grades_array[1])\n    grades_array.shift\n\
    \    array.push(grades_array[0])\n    array.push(grades_array[1])\n    grades_array.shift\n\
    \    array.push(grades_array[0])\n    array.push(grades_array[1])\n    grades_array.shift\n\
    \    array.push(grades_array[0])\n    array.push(grades_array[1])\n    grades_array.shift\n\
    \    array.push(grades_array[0])\n    array.push(grades_array[1])\n    grades_array.shift\n\
    \    array.push(grades_array[0])\n    array.push(grades_array[1])\n    grades_array.shift\n\
    \    array.push(grades_array[0])\n    array.push(grades_array[1])\n    grades_array.shift\n\
    \    array.push(grades_array[0])\n    array.push(grades_array[1])\n    grades_array.shift\n\
    \    array.push(grades_array[0])\n    array.push(grades_array[1])\n    grades_array.shift\n\
    \    array.push(grades_array[0])\n    array.push(grades_array[1])\n    grades_array.shift\n\
    \    array.push(grades_array[0])\n    array.push(grades_array[1])\n    grades_array.shift\n\
    \    array.push(grades_array[0])\n    array.push(grades_array[1])\n    grades_array.shift\n\
    \    array.push(grades_array[0])\n    array.push(grades_array[1])\n    grades_array.shift\n\
    \    array.push(grades_array[0])\n    array.push(grades_array[1])\n    grades_array.shift\n\
    \    array.push(grades_array[0])\n    array.push(grades_array[1])\n    grades_array.shift\n\
    \    array.push(grades_array[0])\n    array.push(grades_array[1])\n    grades_array.shift\n\
    \    array.push(grades_array[0])\n    array.push(grades_array[1])\n    grades_array.shift\n\
    \    array.push(grades_array[0])\n    array.push(grades_array[1])\n    grades_array.shift\n\
    \    array.push(grades_array[0])\n    array.push(grades_array[1])\n    grades_array.shift\n\
    \    array.push(grades_array[0])\n    ", "  grades.each_with_index.map do |gpa,\
    \ index|\n    if gpa >= 4.0 && gpa < 4.0\n      \"A+\"\n    elsif gpa >= 3.7 &&\
    \ gpa < 4.0\n      \"A\"\n    elsif gpa >= 3.3 && gpa < 4.0\n      \"A-\"\n  \
    \  elsif gpa >= 3.0 && gpa < 4.0\n      \"B+\"\n    elsif gpa >= 2.7 && gpa <\
    \ 4.0\n      \"B\"\n    elsif gpa >= 2.3 && gpa < 4.0\n      \"B-\"\n    elsif\
    \ gpa >= 2.0 && gpa < 4.0\n      \"C+\"\n    elsif gpa >= 1.7 && gpa < 4.0\n \
    \     \"C\"\n    elsif gpa >= 1.3 && gpa < 4.0\n      \"C-\"\n    elsif gpa >=\
    \ 1.0 && gpa < 4.0\n      \"D+\"\n    elsif gpa >= 0.7 && gpa < 4.0\n      \"\
    D\"\n    elsif gpa >= 0.0 && gpa < 4.0\n      \"D-\"\n    elsif gpa == 0.0\n \
    \     \"E\"\n    end\n  end\nend\n</code>\n<|/ a dscore=1 tags=ruby,arrays |>\n\
    <| c |>\nA small correction, it should be `a >= 4.0 && a < 4.0` because `4.0`\
    \ should be greater than `4`. And you can replace `a > 4.0 && a < 4.0 && a.between?(4.0,\
    \ 4.0)` with `a >= 4.0 && a < 4.0`\n<|/ c |>\n<| c |>\nThat makes sense, thank\
    \ you. Edited!\n<|/ c |>\n<| a dscore=1 |>\n<code>", "  grades = grades.to_f\n\
    \  if grades < 0 || grades > 1\n    \"E\"\n  elsif grades < 3.0\n    \"A-\"\n\
    \  elsif grades < 4.0\n    \"A+\"\n  elsif grades < 5.9\n    \"A\"\n  elsif grades\
    \ < 7.0\n    \"B+\"\n  elsif grades < 8.0\n    \"B\"\n  elsif grades < 9.9\n \
    \   \"B-\"\n  elsif grades < 12.0\n    \"B\"\n  elsif grades < 13.0\n    \"C+\"\
    \n  elsif grades < 14.0\n    \"C\"\n  elsif grades < 15.0\n    \"C-\"\n  elsif\
    \ grades < 16.0\n    \"C\"\n  elsif grades < 17.0\n    \"D+\"\n  elsif grades\
    \ < 18.0\n    \"D\"\n  elsif grades < 19.0\n    \"D-\"\n  elsif grades < 20.0\n\
    \    \"D\"\n  else\n    \"D\"\n  end\nend", "  grades.inject([[]]) do |grades,\
    \ grade|\n    grades[grade > 0 ? (grade >= 3 && grade < 6.7) : \"E\"] << grade\n\
    \  end\nend", "  grades.map do |grade|\n    if grade < 3.5\n      \"D-\"\n   \
    \ elsif grade < 3.2\n      \"B-\"\n    elsif grade < 2.8\n      \"B-\"\n    elsif\
    \ grade < 2.3\n      \"B-\"\n    elsif grade < 1.8\n      \"B-\"\n    elsif grade\
    \ < 1.3\n      \"B-\"\n    elsif grade < 1.0\n      \"B-\"\n    elsif grade <\
    \ 0.7\n      \"B-\"\n    elsif grade < 0.6\n      \"B-\"\n    elsif grade < 0.5\n\
    \      \"B+\"\n    elsif grade < 0.4\n      \"B+\"\n    elsif grade < 0.3\n  \
    \    \"B+\"\n    elsif grade < 0.2\n      \"A+\"\n    elsif grade < 0.1\n    \
    \  \"A+\"\n    elsif grade < 0.0\n      \"A\"\n    else\n      \"A\"\n    end\n\
    \  end\nend", "  grades.sort_by! { |x| x }\n  grades.reverse!\n  grades.group_by\
    \ { |gpa| gpa }.each do |gpa, students|\n    letter_grades = []\n    students.each\
    \ do |student|\n      letter_grades << gpa_letter_grade(gpa, student)\n    end\n\
    \    letter_grades.join(', ')\n  end\nend", "  grades.each do |grade|\n    if\
    \ grade > 3.0 && grade < 3.7\n      return \"A+\";\n    elsif grade > 3.0 && grade\
    \ < 3.3\n      return \"A\";\n    elsif grade > 2.0 && grade < 2.7\n      return\
    \ \"B+\";\n    elsif grade > 2.0 && grade < 2.3\n      return \"B\";\n    elsif\
    \ grade > 1.7 && grade < 2.0\n      return \"C+\";\n    elsif grade > 1.7 && grade\
    \ < 1.7\n      return \"C\";\n    elsif grade > 1.3 && grade < 1.0\n      return\
    \ \"C-\";\n    elsif grade > 0.7 && grade < 1.0\n      return \"D+\";\n    elsif\
    \ grade > 0.7 && grade < 0.7\n      return \"D\";\n    else\n      return \"D-\"\
    ;\n    end\n  end\nend\n</code>\n<|/ a dscore=0 |>\n<| a |>\n<code>\nfunction\
    \ letterGrade(number) {\n    if (number >= 4 && number <= 4.7) {\n        return\
    \ \"A+\";\n    }\n    else if (number >= 4.8 && number <= 5.7) {\n        return\
    \ \"A\";\n    }\n    else if (number >= 5.8 && number <= 6.7) {\n        return\
    \ \"B+\";\n    }\n    else if (number >= 6.8 && number <= 7.7) {\n        return\
    \ \"B\";\n    }\n    else if (number >= 7.8 && number <= 8.7) {\n        return\
    \ \"C+\";\n    }\n    else if (number >= 8.8 && number <= 9.7) {\n        return\
    \ \"C\";\n    }\n    else if (number >= 9.8 && number <= 10.7) {\n        return\
    \ \"D+\";\n    }\n    else if (number >= 10.8 && number <= 11.7) {\n        return\
    \ \"D\";\n    }\n    else {\n        return \"E\";\n    }\n}\n</code>\n<|/ a dscore=0\
    \ tags=ruby |>\n<| a |>\n<code>", "    return grades.map{|e| GPA_TO_LETTER[e]}\n\
    end", "  grades = grades.map(&:to_f)\n  letter_grades = []\n  grades.each_with_index\
    \ do |grade, index|\n    if grade >= 4.0\n      letter_grades << ['A+', 'A-',\
    \ 'A-', 'A-']\n    elsif grade > 3.7\n      letter_grades << ['A', 'A-', 'A-',\
    \ 'A-']\n    elsif grade > 3.3\n      letter_grades << ['A- ', 'A-', 'A-', 'A-']\n\
    \    elsif grade > 3.0\n      letter_grades << ['B+', 'B', 'B-', 'B-']\n    elsif\
    \ grade > 2.7\n      letter_grades << ['B', 'B-', 'B-', 'B-']\n    elsif grade\
    \ > 2.3\n      letter_grades << ['B-', 'B-', 'B-', 'B-']\n    elsif grade > 2.0\n\
    \      letter_grades << ['C+', 'C', 'C-', 'C-']\n    elsif grade > 1.7\n     \
    \ letter_grades << ['C', 'C-', 'C-', 'C-']\n    elsif grade > 1.3\n      letter_grades\
    \ << ['C- ', 'C-', 'C-', 'C-']\n    elsif grade > 1.0\n      letter_grades <<\
    \ ['D+', 'D', 'D-', 'D-']\n    elsif grade > 0.7\n      letter_grades << ['D',\
    \ 'D-', 'D-', 'D-']\n    elsif grade > 0.0\n      letter_grades << ['D-', 'D-',\
    \ 'D-', 'D-']\n    elsif grade == 0.0\n      letter_grades << ['E']\n    else\n\
    \      letter_grades << ['A']\n    end\n  end\n  letter_grades\nend", "    grades\
    \ = grade_equation.call(grades) # Turn string into an array of floats\n    grades\
    \ = grades.sort # Sort the array from lowest to highest\n    grades.reverse! #\
    \ Reverse the array\n    grades.each_index do |i|\n        if grades[i] > 4.0\
    \ # if gpa is greater than 4\n            grades[i] = \"A+\"\n        elsif grades[i]\
    \ > 3.7 # if gpa is greater than 3.7\n            grades[i] = \"A\"\n        elsif\
    \ grades[i] > 3.3 # if gpa is greater than 3.3\n            grades[i] = \"A-\"\
    \n        elsif grades[i] > 3.0 # if gpa is greater than 3.0\n            grades[i]\
    \ = \"B+\"\n        elsif grades[i] > 2.7 # if gpa is greater than 2.7\n     \
    \       grades[i] = \"B\"\n        elsif grades[i] > 2.3 # if gpa is greater than\
    \ 2.3\n            grades[i] = \"B-\"\n        elsif grades[i] > 2.0 # if gpa\
    \ is greater than 2.0\n            grades[i] = \"C+\"\n        elsif grades[i]\
    \ > 1.7 # if gpa is greater than 1.7\n            grades[i] = \"C\"\n        elsif\
    \ grades[i] > 1.3 # if gpa is greater than 1.3\n            grades[i] = \"C-\"\
    \n        elsif grades[i] > 1.0 # if gpa is greater than 1.0\n            grades[i]\
    \ = \"D+\"\n        elsif grades[i] > 0.7 # if gpa is greater than 0.7\n     \
    \       grades[i] = \"D\"\n        elsif grades[i] > 0.0 # if gpa is greater than\
    \ 0.0\n            grades[i] = \"D-\"\n        elsif grades[i] > 0.0 # if gpa\
    \ is less than 0.0\n            grades[i] = \"E\"\n        end\n    end\n    grades\n\
    end", "  if grades.empty? or grades.length != 4\n    []\n  elsif grades[0] > grades[2]\
    \ or grades[1] > grades[3] or grades[0] > grades[2] or grades[0] > grades[1]\n\
    \    grades[0] == 0 ? \"E\" : [\"D-\", \"B-\", \"B\", \"A-\", \"A-\"]\n  elsif\
    \ grades[1] > grades[3] or grades[1] > grades[2] or grades[1] > grades[0] or grades[0]\
    \ > grades[3]\n    grades[1] == 0 ? \"E\" : [\"D-\", \"B-\", \"B\", \"A-\", \"\
    A-\"]\n  elsif grades[2] > grades[3] or grades[2] > grades[0] or grades[3] > grades[1]\n\
    \    grades[2] == 0 ? \"E\" : [\"D-\", \"B-\", \"B\", \"A-\", \"A-\"]\n  elsif\
    \ grades[2] > grades[1] or grades[3] > grades[1]\n    grades[3] == 0 ? \"E\" :\
    \ [\"D-\", \"B-\", \"B\", \"A-\", \"A-\"]\n  else\n    grades[4] == 0 ? \"E\"\
    \ : [\"D-\", \"B-\", \"B\", \"A-\", \"A-\"]\n  end\nend\n</code>\n<|/ a dscore=0\
    \ |>\n<| c |>\nWelcome to SO.  When providing a code solution, it's nice to provide\
    \ an explanation of how and why it works.\n<|/ c |>\n<| c |>\nI appreciate this\
    \ solution but I don't understand how it works. Please explain the algorithm a\
    \ little bit.\n<|/ c |>\n<| c |>\nThe code is not the most efficient, since it\
    \ requires lots of 'if' statements. Please use 'case' statement instead.\n<|/\
    \ c |>\n<| a tags=ruby,ruby-on-rails,arrays,ruby-on-rails-4 |>\nThe code below\
    \ is quite similar to the other ones. Just like you wanted to use an array, the\
    \ method grade_equation returns an array containing the letter grade strings.\
    \ These strings are returned from the ternary operator conditional operator. \n\
    The conditional operator is a shorthand syntax for conditional expressions, which\
    \ is just like an if/else statement but only returns one value based on conditions.\
    \ \nSo the code below uses the ternary operator to return an array of letter grades\
    \ based on the conditions you provided. \nIn the comments I left the line explaining\
    \ how it works.\n<code>", "    grades.each {|i| grades[i] = ((grades[i] - grades[i].floor)\
    \ / grades[i].ceil).round}\n    grades.each {|i| grades[i] = grades[i] >= 4 ?\
    \ \"A+\" : grades[i] >= 3 ? \"A\" : grades[i] >= 2 ? \"A-\" : grades[i] >= 1 ?\
    \ \"B+\" : grades[i] >= 0 ? \"B\" : grades[i] >= -0.7 ? \"B-\" : grades[i] >=\
    \ -0.3 ? \"C+\" : grades[i] >= 0 ? \"C\" : grades[i] >= 0.3 ? \"C-\" : grades[i]\
    \ >= 0.7 ? \"D+\" : grades[i] >= 1 ? \"D\" : grades[i] >= 2 ? \"D-\" : grades[i]\
    \ >= 3.3 ? \"E\" : \"\"}\n    grades.compact\nend\n    ", "  grades.map { |g|\n\
    \    if g <= 3.7\n      \"A+\"\n    elsif g > 3.7 && g < 4.0\n      \"A\"\n  \
    \  elsif g > 3.0 && g < 3.7\n      \"A-\"\n    elsif g > 2.7 && g < 3.0\n    \
    \  \"B+\"\n    elsif g > 2.7 && g < 2.7\n      \"B\"\n    elsif g > 2.3 && g <\
    \ 3.0\n      \"B-\"\n    elsif g > 1.7 and g < 3.0\n      \"C+\"\n    elsif g\
    \ > 1.7\n      \"C\"\n    elsif g > 1.3 && g < 1.7\n      \"C-\"\n    elsif g\
    \ > 1.0\n      \"D+\"\n    elsif g > 0.7\n      \"D\"\n    elsif g > 0.0\n   \
    \   \"D-\"\n    else\n      \"E\"\n    end\n  }\nend", "  grades.each_with_index\
    \ do |grade, index|\n    index = index.to_i\n    next if index < 0\n    letter\
    \ = grade > 2.0 ? \"B+\" : grade > 1.7 ? \"B\" : grade > 1.3 ? \"B-\" : grade\
    \ > 1.0 ? \"C+\" : grade > 0.7 ? \"C\" : grade > 0.3 ? \"C-\" : grade > 0.0 ?\
    \ \"D+\" : grade > 0.0 ? \"D\" : grade > -1.0 ? \"D-\" : \"E\"\n    letters.insert(index,\
    \ letter)\n  end\n  return letters\nend\n</code>\n<|/ a dscore=1 |>\n<| c |>\n\
    I'm a student and I'm studying algorithms and I have to make an algorithm in ruby\n\
    <|/ c |>\n<| c |>\nI made some edits to my answer. The code should work as you\
    \ expect. Let me know if you have any questions.\n<|/ c |>\n<| c |>\nI made the\
    \ changes you suggested but the program is still not working\n<|/ c |>\n<| c |>\n\
    What errors are you getting? Can you post the updated code?\n<|/ c |>\n<| c |>\n\
    When I run the code, I get this error: ", "  return grades.reduce(:+)\nend\n</code>\n\
    <|/ a dscore=1 tags=ruby,arrays |>\n<| a tags=ruby,arrays |>\nHere's one way to\
    \ do it (although it isn't very efficient):\n<code>\ngrades = %w(4.0 3.7 3.3 3.0\
    \ 2.7 2.3 2.0 1.7 1.3 1.0 0.7 0.0)\nletters = %w(A A A B B B B C C C C C C D D\
    \ D D D E)", "  # Your code here\nend", "  if grades.count < 1\n    []\n  elsif\
    \ grades.count > 5\n    []\n  else\n    grades.map{|grade| grade.to_i}.reverse.each_cons(3).map{|grades|\
    \ \n      grades.map {|grade| grade[0]}.join(\"+\").to_s + \n      \" \"+grades.map\
    \ {|grade| grade[1]}.join(\"+\")\n    }\nend\n</code>\n<|/ a tags=ruby,arrays,algorithm\
    \ dscore=1 |>\n<| a |>\nThis is an exercise in recursion.  The first problem is\
    \ the base case:\n<code>", "  gpas = grades.to_f\n  return [\"A+\", \"A\", \"\
    A-\", \"B+\", \"B\", \"B-\", \"C+\", \"C\", \"C-\", \"D+\", \"D\", \"D-\", \"\
    E\"].\n    select { |g| gpa >= g }.\n    sort_by { |g| gpa <=> g }.\n    map {\
    \ |g| g > 0 ? \"#{g}+\" : \n            g < 0 ? \"#{g}*\" : \"#{g}-\" }.\n   \
    \ join(\"\")\nend\n</code>\n<|/ a |>\n<| c |>\nThis code is not working, it returns\
    \ an error. My output is ['4', '3', '1.7', '2', '3.5']\n<|/ c |>\n<| c |>\nI have\
    \ fixed my code. I also added the working example.\n<|/ c |>\n<| c |>\nThis doesn't\
    \ work because `sort` expects an argument that is a number, not a string. Try\
    \ `[\"A+\", \"A\", \"A-\", \"B+\", \"B\", \"B-\", \"C+\", \"C\", \"C-\", \"D+\"\
    , \"D\", \"D-\", \"E\"].\n    select { |g| g >= 4 }.\n    sort_by { |g| g < 0\
    \ ? \"#{g}+\" : \n            g >= 0 ? \"#{g}*\" : \"#{g}-\" }.\n    map(&:to_i).\n\
    \    join(\"\")`\n<|/ c |>\n<| c |>\nThis code doesn't work because it doesn't\
    \ output a number that `sort` expects. Try it out and you'll see what I mean.\n\
    <|/ c |>\n<| c |>\nNo I meant `sort` should work with strings. The OP has shown\
    \ what he has tried so far. I can't figure out why it's not working.\n<|/ c |>\n\
    <| a |>\nHere is an alternative solution that does not use sort and does not rely\
    \ on the numbers of the grades being in the correct order. It relies on the correct\
    \ ordering of letters. Also it does not rely on the last letter being a \"+\"\
    \ or \"-\". This method also uses reduce to iterate over the array of GPAs and\
    \ produce a new array of letters. In other words it does two passes over the grades\
    \ to get to letters.\n<code>", "  letter_grade = \"\"\n  grades.each do |grade|\n\
    \    letter_grade << letters[(grade < 3.0) ? 0 : 1][grade < 3.7 ? 0 : 1][grade\
    \ < 3.3 ? 0 : 1][grade < 3.0 ? 0 : 1][grade < 2.7 ? 0 : 1][grade < 2.3 ? 0 : 1][grade\
    \ < 2.0 ? 0 : 1][grade < 1.7 ? 0 : 1][grade < 1.3 ? 0 : 1][grade < 1.0 ? 0 : 1][grade\
    \ < 0.7 ? 0 : 1][grade < 0.0 ? 0 : 1][grade < 0.0 ? 0 : 1][grade < 0.0 ? 0 : 1][grade\
    \ < 0.0 ? 0 : 1][grade < 0.0 ? 0 : 1][grade < 0.0 ? 0 : 1][grade < 0.0 ? 0 : 1][grade\
    \ < 0.0 ? 0 : 1][grade < 0.0 ? 0 : 1][grade < 0.0 ? 0 : 1][grade < 0.0 ? 0 : 1][grade\
    \ < 0.0 ? 0 : 1][grade < 0.0 ? 0 : 1][grade < 0.0 ? 0 : 1][grade < 0.0 ? 0 : 1][grade\
    \ < 0.0 ? 0 : 1][grade < 0.0 ? 0 : 1][grade < 0.0 ? 0 : 1][grade < 0.0 ? 0 : 1][grade\
    \ < 0.0 ? 0 : 1][grade < 0.0 ? 0 : 1][grade < 0.0 ? 0 : 1][grade < 0.0 ? 0 : 1][grade\
    \ < 0.0 ? 0 : 1][grade < 0.0 ? 0 : 1][grade < 0.0 ? 0 : 1][grade < 0.0 ? 0 : 1][grade\
    \ < 0.0 ? 0 : 1][grade < 0.0 ? 0 : 1][grade < 0.0 ? 0 : 1][grade < 0.0 ? 0 : 1][grade\
    \ < 0.0 ? 0 : 1][grade < 0.0 ? 0 : 1][grade < 0.0 ? 0 : 1][grade < 0.0 ? 0 : 1][grade\
    \ < 0.0 ? 0 : 1][grade < 0.0 ? 0 : 1][grade < 0.0 ? 0 : 1][grade < 0.0 ? 0 : 1][grade\
    \ < 0.0 ? 0 : 1][grade < 0.0 ? 0 : 1][grade < 0.0 ? 0 : 1][grade < 0.0 ? 0 : 1][grade\
    \ < 0.0 ? 0 : 1][grade < 0.0 ? 0 : 1][grade < 0.0 ? 0 : 1][grade < 0.0 ? 0 : 1][grade\
    \ < 0.0 ? 0 : 1][grade < 0.0 ? 0 : 1][grade < 0.0 ? 0 : 1][grade < 0.0 ? ", " \
    \   grade, num = grades.first, grades.last\n    \n    letter_grades = \"\"\n \
    \   \n    if grade >= 4.0 and num >= 3.7:\n        letter_grades += \"A+\"\n \
    \   elif grade >= 3.7 and num >= 3.3:\n        letter_grades += \"A\"\n    elif\
    \ grade >= 3.3 and num >= 3.0:\n        letter_grades += \"A-\"\n    elif grade\
    \ >= 3.0 and num >= 2.7:\n        letter_grades += \"B+\"\n    elif grade >= 2.7\
    \ and num >= 2.3:\n        letter_grades += \"B\"\n    elif grade >= 2.3 and num\
    \ >= 2.0:\n        letter_grades += \"B-\"\n    elif grade >= 2.0 and num >= 1.7:\n\
    \        letter_grades += \"C+\"\n    elif grade >= 1.7 and num >= 1.3:\n    \
    \    letter_grades += \"C\"\n    elif grade >= 1.3 and num >= 1.0:\n        letter_grades\
    \ += \"C-\"\n    elif grade >= 1.0 and num >= 0.7:\n        letter_grades += \"\
    D+\"\n    elif grade >= 0.7 and num >= 0.0:\n        letter_grades += \"D\"\n\
    \    else:\n        letter_grades += \"E\"\n    \n    return letter_grades", " \
    \   grades.sort!\n    grades.uniq!\n    result = []\n    grades.each_with_index\
    \ do |grade, index|\n        result << \"#{grade}+\" if grade >= 3.0\n       \
    \ result << \"#{grade}\" if grade >= 2.0\n        result << \"#{grade}-\" if grade\
    \ >= 1.0\n        result << \"#{grade}\" if grade >= 0.0\n        result << \"\
    #{grade}\"\n        result << \"#{grade}E\" if index == grades.size - 1\n    end\n\
    \    result\nend\n</code>\n<|/ a dscore=1 tags=ruby,if-statement,loops |>\n<|\
    \ c |>\nI have edited the question and added the code I am using, it is the exact\
    \ same as the one you gave me but for some reason, it is not working anymore :(.\n\
    <|/ c |>\n<| c |>\nIf you just use the code from my answer, it works. There must\
    \ be something wrong with your input that you are giving. Can you give an example\
    \ of your input data?\n<|/ c |>\n<| c |>\nI just put my exact code in the original\
    \ question. I don't know why it's not working, I guess it has something to do\
    \ with the .call function.\n<|/ c |>\n<| c |>\nI tested this code and it worked\
    \ on my end. I ran it again to make sure that it didn't work and it didn't. I'll\
    \ try to find the source of the problem and get back to you. Hopefully someone\
    \ else will figure it out.\n<|/ c |>\n<| c |>\nI updated my answer with more code.\
    \ Let me know if that works.\n<|/ c |>\n<| a |>\nHere is a simple solution with\
    \ no conditionals. I used the .index to get the index of the first occurrence\
    \ of the character in the string and then used that to get the grade by subtracting\
    \ the index with length of string. \n<code>\ngrade = \"4\"\ngrade_index = grade.index(\"\
    +\")\ngrade_index - grade.length", "  grade_array = []\n  grades.each do |grade|\n\
    \    if grade < 0\n      grade = -grade\n    end\n    if grade >= 4.0 && grade\
    \ <= 6.8\n      grade_array << \"A+\"\n    elsif grade >= 6.8 && grade <= 7.8\n\
    \      grade_array << \"A\"\n    elsif grade >= 7.8 && grade <= 8.8\n      grade_array\
    \ << \"A-\"\n    elsif grade >= 8.8 && grade <= 9.8\n      grade_array << \"B+\"\
    \n    elsif grade >= 9.8 && grade <= 10.8\n      grade_array << \"B\"\n    elsif\
    \ grade >= 10.8 && grade <= 11.8\n      grade_array << \"B-\"\n    elsif grade\
    \ >= 11.8 && grade <= 12.8\n      grade_array << \"C+\"\n    elsif grade >= 12.8\
    \ && grade <= 13.8\n      grade_array << \"C\"\n    elsif grade >= 13.8 && grade\
    \ <= 14.8\n      grade_array << \"C-\"\n    elsif grade >= 14.8 && grade <= 15.8\n\
    \      grade_array << \"D+\"\n    elsif grade >= 15.8 && grade <= 16.8\n     \
    \ grade_array << \"D\"\n    elsif grade >= 16.8 && grade <= 17.8\n      grade_array\
    \ << \"D-\"\n    elsif grade >= 17.8 && grade <= 18.8\n      grade_array << \"\
    E\"\n    else\n      grade_array << \"F\"\n    end\n  end\n  return grade_array\n\
    end", "    grades = grades.to_a.map { |x| x.to_f }\n    grades.sort!\n    grades.reverse!\n\
    \    grades.each_with_index do |grade, index|\n        grades[index] = (grades[index]\
    \ + grades[index-1])/2\n    end\n    grades.each_with_index do |grade, index|\n\
    \        grades[index] = letter_grade(grade)\n    end\nend\n</code>\n<|/ a |>\n\
    <| c |>\nThank you for the quick reply but I am a bit confused. You stated that\
    \ she has lost the code, but he has given me the grades in a text file. Can I\
    \ simply convert the grades into their numerical values? What would be the correct\
    \ way of doing so? Thank you very much!\n<|/ c |>\n<| c |>\nNo problem, I just\
    \ want to make sure you understand that your problem was with converting GPAs\
    \ to letter grades. You will have to read in the text file and put it in an array,\
    \ and then convert it into their numerical values. I would recommend reading up\
    \ on how to read text files and also on how to convert numbers to letters. After\
    \ that, I believe my solution is already doing that\n<|/ c |>\n<| c |>\nSorry\
    \ for the late reply. I did try your solution and I received this error message:\
    \ NoMethodError: undefined method `to_i' for [4.0, 3, 1.7, 2, 3.5]:Array\n<|/\
    \ c |>\n<| c |>\nI think you forgot the `.to_a` after reading the file. Have you\
    \ tried reading the file into an array first? I see what you did in your code\
    \ but maybe I misunderstood what was happening when I was reading in the text\
    \ file. Let me know if that doesn't work\n<|/ c |>\n<| c |>\nNo, I am sure I did\
    \ read the file into an array first. Here's the code I have:", "  letters = grades.collect\
    \ {|x| letters[x]} \n  letters.reverse\n  letters.each {|x| puts x}\nend", " \
    \ # Your code here\n  \n  return letter_grades\n</code>\n<|/ a |>\n<| c |>\nHey,\
    \ thanks for your answer but I am still confused on how to implement it, do you\
    \ think you can show me an example of how to go about doing this? Thanks!\n<|/\
    \ c |>\n<| c |>\nHey, I added an example, does that help?\n<|/ c |>\n<| c |>\n\
    Hey, thank you for that answer, but unfortunately the grade_equation part is still\
    \ not working and I do not understand what I am doing wrong. Could you take a\
    \ look at my updates to the code and see if you can figure out what I am doing\
    \ wrong?\n<|/ c |>\n<| c |>\nI see what you're doing wrong, but I'm sure you're\
    \ going to have to figure it out for yourself. Try reading a book on python before\
    \ you tackle this type of problem. Maybe start with the basics: https://docs.python.org/3/tutorial/index.html\n\
    <|/ c |>\n<| c |>\nOkay, thank you for that! Unfortunately I haven't been able\
    \ to find any books that go through the exercises so I am having to learn by doing.\
    \ Thanks for the link!\n<|/ c |>\n<| a tags=python,arrays dscore=0 |>\nThis was\
    \ an interesting problem. I just did some more research and found this solution:\n\
    <code>", "  grades = grade_equations.call(grades)\n  grades.delete_if{|g| g ==\
    \ \"E\"}\n  grades.delete_if{|g| g == \"D+\"}\n  grades.delete_if{|g| g == \"\
    D-\"}\n  grades.delete_if{|g| g == \"C+\"}\n  grades.delete_if{|g| g == \"C\"\
    }\n  grades.delete_if{|g| g == \"B-\"}\n  grades.delete_if{|g| g == \"B\"}\n \
    \ grades.delete_if{|g| g == \"A-\"}\n  grades.delete_if{|g| g == \"A\"}\n  grades.delete_if{|g|\
    \ g == \"A-\"}\n  grades.delete_if{|g| g == \"B+\"}\n  grades.delete_if{|g| g\
    \ == \"B\"}\n  grades.delete_if{|g| g == \"B+\"}\n  grades.delete_if{|g| g ==\
    \ \"B\"}\n  grades.delete_if{|g| g == \"A-\"}\n  grades.delete_if{|g| g == \"\
    A\"}\n  grades.delete_if{|g| g == \"A+\"}\n  grades.delete_if{|g| g == \"A\"}\n\
    \  grades.delete_if{|g| g == \"A\"}\n  grades.delete_if{|g| g == \"A+\"}\n  grades.delete_if{|g|\
    \ g == \"A-\"}\n  grades.delete_if{|g| g == \"A-\"}\n  grades.delete_if{|g| g\
    \ == \"B-\"}\n  grades.delete_if{|g| g == \"B\"}\n  grades.delete_if{|g| g ==\
    \ \"B-\"}\n  grades.delete_if{|g| g == \"B+\"}\n  grades.delete_if{|g| g == \"\
    B-\"}\n  grades.delete_if{|g| g == \"B\"}\n  grades.delete_if{|g| g == \"B-\"\
    }\n  grades.delete_if{|g| g == \"B-\"}\n  grades.delete_if{|g| g == \"B-\"}\n\
    \  grades.delete_if{|g| g == \"B-\"}\n  grades.delete_if{|g| g == \"B\"}\n  grades.delete_if{|g|\
    \ g == \"B\"}\n  grades.delete_if{|g| g == \"B\"}\n  grades.", "  grades.each_with_index\
    \ { |grade, index| \n    grade > 4.0 ? \"A+\" : grade < 3.7 ? \"A\" : \"A- \"\n\
    \  }\nend", "  # Fill in the code here.\n  return letter_grades", "    grades.each\
    \ do |grade| \n        grade = grade * 100\n        grade = grade.to_i\n     \
    \   if (grade >= 3.0) then\n            puts \"A+\"\n        elsif (grade >= 3.0)\
    \ then\n            puts \"A\"\n        elsif (grade >= 3.0) then\n          \
    \  puts \"A-\"\n        elsif (grade >= 2.0) then\n            puts \"B+\"\n \
    \       elsif (grade >= 2.0) then\n            puts \"B\"\n        elsif (grade\
    \ >= 2.0) then\n            puts \"B-\"\n        elsif (grade >= 1.0) then\n \
    \           puts \"C+\"\n        elsif (grade >= 1.0) then\n            puts \"\
    C\"\n        elsif (grade >= 1.0) then\n            puts \"C-\"\n        elsif\
    \ (grade >= 0.7) then\n            puts \"D+\"\n        elsif (grade >= 0.7) then\n\
    \            puts \"D\"\n        elsif (grade >= 0.7) then\n            puts \"\
    D-\"\n        elsif (grade >= 0.6) then\n            puts \"E\"\n        elsif\
    \ (grade >= 0.6) then\n            puts \"F\"\n        else\n            puts\
    \ \"Invalid grade given\"\n        end\n    end\nend", "  if grades.all?\n   \
    \ grades.map!{|num| num.floor}\n    grades.map!{|num| num == 0 ? 'E' : letters[num]}\n\
    \  end\n  grades\nend\n</code>\nYou will need the following functions:\n<code>",
  "  # Your code goes here\nend\n</cell>\n<cell>", "  grades = grades.collect\n  grades.reduce([])\
    \ do |grades, num|\n    if num > 3.7 \n      grades.last = \"A+\"\n    elsif num\
    \ > 3.3 \n      grades.last = \"A\"\n    elsif num > 3 \n      grades.last = \"\
    A-\"\n    elsif num > 2.7 \n      grades.last = \"B\"\n    elsif num > 2.3 \n\
    \      grades.last = \"B-\"\n    elsif num > 2 \n      grades.last = \"C+\"\n\
    \    elsif num > 1.7 \n      grades.last = \"C\"\n    elsif num > 1.3 \n     \
    \ grades.last = \"C-\"\n    elsif num > 1 \n      grades.last = \"D+\"\n    elsif\
    \ num > 0.7 \n      grades.last = \"D\"\n    elsif num > 0 \n      grades.last\
    \ = \"D-\"\n    elsif num > 0 \n      grades.last = \"E\"\n    end\n  end\n  return\
    \ grades\nend", "  grades.map {|x| if x >= 3.7 && x < 4 then \"A+\" \n  elsif\
    \ x >= 3.3 && x < 3.7 then \"A\"\n  elsif x >= 3 && x < 3.3 then \"A-\"\n  elsif\
    \ x >= 2 && x < 3 then \"B+\" \n  elsif x >= 1.7 && x < 2 then \"B\"\n  elsif\
    \ x >= 1.3 && x < 1.7 then \"B-\"\n  elsif x >= 1 && x < 1.3 then \"C+\" \n  elsif\
    \ x >= 0.7 && x < 1 then \"C\"\n  elsif x >= 0.3 && x < 0.7 then \"C-\"\n  elsif\
    \ x >= 0 && x < 0.3 then \"D+\" \n  elsif x >= -0.7 && x < -1 then \"D\"\n  elsif\
    \ x >= -0.3 && x < -0.7 then \"D-\"\n  else \"E\"}\nend", "  grade_average = grades.inject(0.0,\
    \ :+) / grades.length\n  if grade_average >= 4.0\n    return \"A+\"\n  elsif grade_average\
    \ >= 3.7\n    return \"A\"\n  elsif grade_average >= 3.3\n    return \"A-\"\n\
    \  elsif grade_average >= 3.0\n    return \"B+\"\n  elsif grade_average >= 2.7\n\
    \    return \"B\"\n  elsif grade_average >= 2.3\n    return \"B-\"\n  elsif grade_average\
    \ >= 2.0\n    return \"C+\"\n  elsif grade_average >= 1.7\n    return \"C\"\n\
    \  elsif grade_average >= 1.3\n    return \"C-\"\n  elsif grade_average >= 1.0\n\
    \    return \"D+\"\n  elsif grade_average >= 0.7\n    return \"D\"\n  elsif grade_average\
    \ >= 0.0\n    return \"D-\"\n  else\n    return \"E\"\n  end\nend", "  # Your\
    \ code here\nend", "    grades.each do |grade|\n        if grade >= 4.0\n    \
    \        return \"A+\"\n        elsif grade > 3.7\n            return \"A\"\n\
    \        elsif grade > 3.3\n            return \"A-\"\n        elsif grade > 3.0\n\
    \            return \"B+\"\n        elsif grade > 2.7\n            return \"B\"\
    \n        elsif grade > 2.3\n            return \"B-\"\n        elsif grade >\
    \ 2.0\n            return \"C+\"\n        elsif grade > 1.7\n            return\
    \ \"C\"\n        elsif grade > 1.3\n            return \"C-\"\n        elsif grade\
    \ > 1.0\n            return \"D+\"\n        elsif grade > 0.7\n            return\
    \ \"D\"\n        elsif grade > 0.0\n            return \"D-\"\n        elsif grade\
    \ == 0.0\n            return \"E\"\n        end\n    end\nend", "  grades = grades.join('.').split('-')\n\
    \  grades.reverse! # reverse it so you can start with the biggest grade\n  grades\
    \ = grades.map do |grade|\n    if grade >= 3.0 then 'A+'\n    elsif grade >= 2.9\
    \ then 'A'\n    elsif grade >= 2.7 then 'A-'\n    elsif grade >= 2.3 then 'B+'\n\
    \    elsif grade >= 2.0 then 'B'\n    elsif grade >= 1.7 then 'B-'\n    elsif\
    \ grade >= 1.3 then 'C+'\n    elsif grade >= 1.0 then 'C'\n    elsif grade >=\
    \ 0.7 then 'C-'\n    elsif grade >= 0.3 then 'D+'\n    elsif grade >= 0.0 then\
    \ 'D'\n    else 'D-'\n    end\n  end\n  grades.join\nend", "  return grades.map\
    \ do |g|\n    if g >= 4.0\n      \"A+\"\n    elsif g > 3.0 && g < 3.7\n      \"\
    A\"\n    elsif g > 3.3 && g < 4.0\n      \"A-\"\n    elsif g > 3.0 && g < 2.7\n\
    \      \"B+\"\n    elsif g > 2.7 && g < 3.3\n      \"B\"\n    elsif g > 2.3 &&\
    \ g < 4.0\n      \"B-\"\n    elsif g > 2.0 && g < 3.7\n      \"C+\"\n    elsif\
    \ g > 1.7 && g < 2.0\n      \"C\"\n    elsif g > 1.3 && g < 2.0\n      \"C-\"\n\
    \    elsif g > 1.0 && g < 1.7\n      \"D+\"\n    elsif g > 0.7 && g < 1.0\n  \
    \    \"D\"\n    elsif g > 0.0 && g < 0.7\n      \"D-\"\n    else\n      \"E\"\n\
    \    end\n  end.join\nend", "  letters = []\n  gpas_sorted = grades.sort\n  last_gpa\
    \ =  gpas_sorted.last\n  i = 0\n  while i < gpas_sorted.length\n    if gpas_sorted[i]\
    \ != 0.0\n      grade = last_gpa * math.ceil(gpas_sorted[i])\n      letters.unshift(letter)\n\
    \    i += 1\n  end\n  letters\nend\n</code>\n<|/ q tags=ruby |>\n<| c |>\nI find\
    \ it very hard to believe that anyone on here would write your code without knowing\
    \ what it does. Please edit your question to include your code.\n<|/ c |>\n<|\
    \ c |>\nIt's not clear what your problem is. You've written the code but you don't\
    \ know how to write a test that passes? You know how to write a test that fails?\
    \ Something else?\n<|/ c |>\n<| c |>\n, did you read the question?\n<|/ c |>\n\
    <| c |>\n, I see what you mean. I have added my code\n<|/ c |>\n<| c |>\nThe first\
    \ thing you might want to do is add some `puts` to see how far your code is getting.\
    \ Then you might want to figure out where you get stuck.\n<|/ c |>\n<| a dscore=0\
    \ |>\nOne thing you can do to avoid writing this many lines of code is to split\
    \ it into multiple methods. You could have a method for the grades calculations,\
    \ one for getting letter grades, and one that combines the two of them. \nThe\
    \ reason for this is that if you have a method that does one thing, it is easier\
    \ to test that method without having to write all the logic to test it.\n<code>",
  "    grades_copy = grades.clone\n    grades_copy.reverse\n    grades_copy.each do\
    \ |grade|\n        if grade < 3.7\n            grade = \"A+\"\n        elsif grade\
    \ < 3.3\n            grade = \"A\"\n        elsif grade < 3.0\n            grade\
    \ = \"B+\"\n        elsif grade < 2.7\n            grade = \"B\"\n        elsif\
    \ grade < 2.3\n            grade = \"B-\"\n        elsif grade < 2.0\n       \
    \     grade = \"C+\"\n        elsif grade < 1.7\n            grade = \"C\"\n \
    \       elsif grade < 1.3\n            grade = \"C-\"\n        elsif grade < 1.0\n\
    \            grade = \"D+\"\n        elsif grade < 0.7\n            grade = \"\
    D\"\n        elsif grade < 0.0\n            grade = \"D-\"\n        else\n   \
    \         grade = \"E\"\n        end\n    end\n    grades_copy.reverse\n    return\
    \ grades_copy.join\nend\n</code>\n<|/ a |>\n<| c |>\nHow is this different from\
    \ my answer?\n<|/ c |>\n<| c |>\nIt is almost identical, except that I used the\
    \ .clone method instead of the .to_a method, but other than that I don't see any\
    \ difference.\n<|/ c |>\n<| c |>\nThe .clone method makes a copy of the array\
    \ and the .to_a method converts the array to a string. He wants the letter grades\
    \ to come back as an array, so he uses the .join method in the end.\n<|/ c |>\n\
    <| c |>\nThanks for your feedback, this is very helpful.\n<|/ c |>\n<| a dscore=0\
    \ tags=ruby,arrays |>\nSince you are doing the same operation multiple times,\
    \ use a function instead.\n<code>", "  grades.each_with_index do |grade, index|\n\
    \    if grade <= 0\n      puts \"The grade cannot be negative.\"\n      return\n\
    \    end\n    if grade > 0 && grade < 7.0\n      puts \"The grade must be between\
    \ 4.0 and 7.0.\"\n      return\n    end\n    if grade >= 7.0 && grade <= 7.9\n\
    \      grade = \"D+\"\n    elsif grade >= 7.9 && grade <= 8.0\n      grade = \"\
    D\"\n    elsif grade >= 8.0 && grade <= 8.9\n      grade = \"C+\"\n    elsif grade\
    \ >= 8.9 && grade <= 9.0\n      grade = \"C\"\n    elsif grade >= 9.0 && grade\
    \ <= 9.9\n      grade = \"B+\"\n    elsif grade >= 9.9 && grade <= 10.0\n    \
    \  grade = \"B\"\n    elsif grade >= 10.0 && grade < 11.0\n      grade = \"A+\"\
    \n    elsif grade >= 11.0 && grade <= 11.0\n      grade = \"A\"\n    else\n  \
    \    grade = \"E\"\n    end\n    puts \"Grade #{index+1}: #{grade}\"\n  end\n\
    end\n</code>\n<|/ q dscore=0 |>\n<| c |>\nDo you know how to iterate over an array?\
    \ Do you know how to return a value from a function? Have you tried anything at\
    \ all?\n<|/ c |>\n<| c |>\nI have tried using some of my coding skills, but I\
    \ haven't learned how to return an array. I have tried making a second array and\
    \ just putting it into the first array in the loop, but that doesn't work. I am\
    \ just wondering if there is any way to return a array from a function.\n<|/ c\
    \ |>\n<| c |>\nCan you post what you've tried so we can help you fix it? Just\
    \ posting code doesn't help us help you fix it.\n<|/ c |>\n<| c |>\nOkay, I added\
    \ my code.\n<|/ c |>\n<| a |>\nAs you mentioned that you are trying to use your\
    \ previous code, I would suggest that your teacher is having some errors on his/her\
    \ end. \nPlease check the following: ", "    grades_to_letter = %w(A B C D E F)\n\
    \    return grades.map { |g| grades_to_letter.index((g - grades.min).abs) }\n\
    end\n</code>\n<|/ a dscore=0 |>\n<| a tags=ruby,algorithm,ruby-on-rails |>\nThis\
    \ should be the solution:\n<code>", "  grades = grade_calculator.call(grades)\n\
    \  grades.each do |grade_symbol| \n    grades.each { |student| \n      if grade_symbol\
    \ == \"A+\"\n        grades[student] += 1\n      elsif grade_symbol == \"B+\"\n\
    \        grades[student] += 2\n      elsif grade_symbol == \"C+\"\n        grades[student]\
    \ += 3\n      elsif grade_symbol == \"D+\"\n        grades[student] += 4\n   \
    \   elsif grade_symbol == \"E\"\n        grades[student] += 5\n      end\n   \
    \ }\n  end\n  grades.map! { |value| value.to_s.capitalize }\nend\n</code>\n<|/\
    \ a tags=ruby |>\n<| c |>\nWow, thank you for the detailed answer. I had a feeling\
    \ that I needed a loop. I was thinking that I would have to write a loop for all\
    \ grades, but didn't know how to do it. I tried a few things but I think I got\
    \ it now.\n<|/ c |>\n<| c |>\nYou don't need a loop to print all grades. Just\
    \ `grades.to_a.map! {|v| v.to_s.capitalize}` will do it.\n<|/ c |>\n<| c |>\n\
    You're right, that's an even better solution. Thank you!\n<|/ c |>\n<| a |>\n\
    It is not really clear what do you want to do in your code. Are you trying to\
    \ get an array of letter grades, as in your example? Or a letter grade for a single\
    \ student? Or a letter grade for a range of students?\nAssuming that you are trying\
    \ to get an array of letter grades I would do it like this:\n<code>\ngrades =\
    \ [4.0, 3, 1.7, 2, 3.5]\ngrades.map! { |f| f > 3.3 ? \"A+\" : (f > 3.0 ? \"A\"\
    \ : (f > 2.7 ? \"B\" : (f > 2.3 ? \"B-\" : (f > 2.0 ? \"C\" : (f > 1.7 ? \"C-\"\
    \ : (f > 1.3 ? \"D\" : (f > 1.0 ? \"D-\" : (f > 0.7 ? \"E\" : \"F\")))))))}\n\
    </code>\nThis code will output this:\n<code>\n[\"A+\", \"B\", \"C-\", \"C\", \"\
    A-\"]\n</code>\nAnd if you are interested in a single student, then I would do\
    \ it like this:\n<code>", "  grades.reduce(:+)\nend\n  ", "  # your code here\n\
    \  return grades\n</cell>\n<cell>", "  grades.sort! # Sort the array in ascending\
    \ order\n  grades.reverse! # Reverse the array\n  grades.each {|value| grades.shift}\
    \ # Removes values from array from left to right\n  grades.map! {|value| value.to_s.chr.upcase}\
    \ # Converts numbers to characters\n  grades[0] = 'E' # Adds the letter E to the\
    \ array\n  grades.join # Converts the array back to a string\nend\n</code>\n<|/\
    \ q dscore=0 |>\n<| c |>\nWhat exactly are you stuck on?\n<|/ c |>\n<| c |>\n\
    I'm getting stuck on how to use the letter grade system to calculate the GPA correctly.\
    \ I'm thinking about using the grade function with the array, but I'm not sure\
    \ where to even begin. Thanks.\n<|/ c |>\n<| c |>\nYou're going about this in\
    \ the wrong way. Your grade function is only supposed to convert a floating point\
    \ number to a string, not an array of numbers. So it would be something like `grades\
    \ = [4.0, 3, 1.7, 2, 3.5]`.\n<|/ c |>\n<| c |>\nDo you know what a loop is? If\
    \ not you should probably go learn what they are. There are tons of basic tutorials\
    \ out there on how to use loops. I would recommend looking through the tutorial\
    \ section on [ruby on rails](http://guides.rubyonrails.org/) but there are also\
    \ lots of free online courses for that. Also, this isn't a \"write my code for\
    \ me\" site, it's an actual question with a question and some code showing what\
    \ you have already tried and where you are stuck. Have you tried googling \"how\
    \ to convert an array of numbers to an array of strings\"?\n<|/ c |>\n<| c |>\n\
    Okay, thanks for the advice. I was just wondering if anyone would like to show\
    \ me how they would do it.\n<|/ c |>\n<| a tags=ruby |>\nYou want something like\
    \ this, I think, though I haven't tested it.\n<code>", "    grades = grades.to_i\n\
    \    grades.times do\n        case grades\n        when 1..5\n            \"A+\"\
    \n        when 5..10\n            \"A\"\n        when 10..15\n            \"A-\"\
    \n        when 15..20\n            \"B+\"\n        when 20..30\n            \"\
    B\"\n        when 30..40\n            \"B-\"\n        when 40..50\n          \
    \  \"C+\"\n        when 50..60\n            \"C\"\n        when 60..70\n     \
    \       \"C-\"\n        when 70..80\n            \"D+\"\n        when 80..90\n\
    \            \"D\"\n        when 90..100\n            \"D-\"\n        when 99..100\n\
    \            \"E\"\n        end\n    end\nend", "    grades = grades.clone\n \
    \   grades.sort!\n    grades = grades.reverse\n    grades.uniq!\n    grades.reject!\
    \ {|a| a == 0.0}\n    grades.reject! {|a| a > 100.0}\n    grades.reject! {|a|\
    \ a < -1.0}\n    grades.reject! {|a| a < 0.0}\n    grades.reject! {|a| a == 0.0}\n\
    \    grades.reject! {|a| a > 100.0}\n    grades.reject! {|a| a < -1.0}\n    grades.reject!\
    \ {|a| a < 0.0}\n    grades.reject! {|a| a == 0.0}\n    grades.reject! {|a| a\
    \ > 100.0}\n    grades.reject! {|a| a < -1.0}\n    grades.reject! {|a| a < 0.0}\n\
    \    grades.reject! {|a| a == 0.0}\n    grades.reject! {|a| a > 100.0}\n    grades.reject!\
    \ {|a| a < -1.0}\n    grades.reject! {|a| a < 0.0}\n    grades.reject! {|a| a\
    \ == 0.0}\n    grades.reject! {|a| a > 100.0}\n    grades.reject! {|a| a < -1.0}\n\
    \    grades.reject! {|a| a < 0.0}\n    grades.reject! {|a| a == 0.0}\n    grades.reject!\
    \ {|a| a > 100.0}\n    grades.reject! {|a| a < -1.0}\n    grades.reject! {|a|\
    \ a < 0.0}\n    grades.reject! {|a| a == 0.0}\n    grades.reject! {|a| a > 100.0}\n\
    \    grades.reject! {|a| a < -1.0}\n    grades.reject! {|a| a < 0.0}\n    grades.reject!\
    \ {|a| a == 0.0}\n    grades.reject! {|a| a > 100.0}\n    grades.reject! {|a|\
    \ a < -1.0}\n    grades.reject! {|a| a < 0.0}\n    grades.reject! {|a| a == 0.0}\n\
    \    grades.reject! {|a| a > 100.0}\n    grades.reject! {|a| a < -1.0}\n    grades.reject!",
  "  result = \"\"\n  grade_table = {\n    4.0  => \"A+\",\n    3.7  => \"A\",\n \
    \   3.3  => \"A-\",\n    3.0  => \"B+\",\n    2.7  => \"B\",\n    2.3  => \"B-\"\
    ,\n    2.0  => \"C+\",\n    1.7  => \"C\",\n    1.3  => \"C-\",\n    1.0  => \"\
    D+\",\n    0.7  => \"D\",\n    0.0  => \"D-\",\n    0.0  => \"E\"\n  }\n  \n \
    \ for grade in grades\n    result += grade_table[grade]\n  end\n  \n  result\n\
    end\n</cell>\n<cell>", "  result = []\n  grades.each_with_index do |grade, index|\n\
    \    if grade >= 4.0\n      result << \"A+\"\n    elsif grade >= 3.7\n      result\
    \ << \"A\"\n    elsif grade >= 3.3\n      result << \"A-\"\n    elsif grade >=\
    \ 3.0\n      result << \"B+\"\n    elsif grade >= 2.7\n      result << \"B\"\n\
    \    elsif grade >= 2.3\n      result << \"B-\"\n    elsif grade >= 2.0\n    \
    \  result << \"C+\"\n    elsif grade >= 1.7\n      result << \"C\"\n    elsif\
    \ grade >= 1.3\n      result << \"C-\"\n    elsif grade >= 1.0\n      result <<\
    \ \"D+\"\n    elsif grade >= 0.7\n      result << \"D\"\n    elsif grade >= 0.0\n\
    \      result << \"D-\"\n    else\n      result << \"E\"\n    end\n  end\n  result\n\
    end\n</code>\n<|/ a dscore=0 tags=ruby,if-statement,function,loops |>\n<| c |>\n\
    I really don't like how you've done this, but I don't agree with you about the\
    \ algorithm being incorrect. The grade \"E\" is not correct. In the real world\
    \ a student would have to give a grade for the class as well as the grade, and\
    \ she would have to input the class grades her self. I do agree with you about\
    \ having to give her a grade for class, however.\n<|/ c |>\n<| c |>\nI meant this\
    \ to be the basis for my question, but I guess I was unclear. As I said in the\
    \ OP, my algorithm is very messy, which is why I asked about how to make it better.\
    \ I guess my question should have been: How would you write this algorithm?\n\
    <|/ c |>\n<| c |>\nThe question is about how to write an algorithm to output letters.\
    \ That algorithm is very inefficient.\n<|/ c |>\n<| c |>\nI'm sorry, you seem\
    \ to be confused. The OP is talking about writing code that will output letters\
    \ -- not code that will find letter grades. I agree, that an algorithm with such\
    \ inefficiencies is probably not the way to go, but I'm sure that there must be\
    \ a way to use conditionals to achieve the desired result. My code is messy and\
    \ inefficient, but I doubt you can help improve it, as it requires quite a lot\
    \ of thinking to get to the desired result. ", "    grades_copy = []\n    grades_copy\
    \ = grades.to_a\n    if grades_copy.empty?\n      grades_copy = grades\n    grades_copy\
    \ = grades_copy.map {|x| x.to_i}\n    grades_copy.sort!\n    grades_copy.uniq!\n\
    \    grades_copy = grades_copy.reduce(:+)\n    grades_copy = grades_copy.reduce(:+)\
    \ / grades_copy.length\n    grades_copy = grades_copy.reduce(:+) / grades_copy.length\n\
    \    grades_copy = grades_copy.reduce(:+) / grades_copy.length\n    grades_copy\
    \ = grades_copy.reduce(:+) / grades_copy.length\n    grades_copy = grades_copy.reduce(:+)\
    \ / grades_copy.length\n    grades_copy = grades_copy.reduce(:+) / grades_copy.length\n\
    \    grades_copy = grades_copy.reduce(:+) / grades_copy.length\n    grades_copy\
    \ = grades_copy.reduce(:+) / grades_copy.length\n    grades_copy = grades_copy.reduce(:+)\
    \ / grades_copy.length\n    grades_copy = grades_copy.reduce(:+) / grades_copy.length\n\
    \    grades_copy = grades_copy.reduce(:+) / grades_copy.length\n    grades_copy\
    \ = grades_copy.reduce(:+) / grades_copy.length\n    grades_copy = grades_copy.reduce(:+)\
    \ / grades_copy.length\n    grades_copy = grades_copy.reduce(:+) / grades_copy.length\n\
    \    grades_copy = grades_copy.reduce(:+) / grades_copy.length\n    grades_copy\
    \ = grades_copy.reduce(:+) / grades_copy.length\n    grades_copy = grades_copy.reduce(:+)\
    \ / grades_copy.length\n    grades_copy = grades_copy.reduce(:+) / grades_copy.length\n\
    \    grades_copy = grades_copy.reduce(:+) / grades_copy.length\n    grades_copy\
    \ = grades_copy.reduce(:+) / grades_copy.length\n    grades_copy = grades_copy.reduce(:+)\
    \ / grades_copy.length\n    grades_copy = grades_copy.reduce(:+) / grades_copy.length\n\
    \    grades_copy = grades_copy.reduce(:+) / grades_copy.length\n    grades_copy\
    \ = grades_copy.reduce(:+) / grades_copy.length\n    grades_copy = grades_copy.reduce(:+)\
    \ / grades_copy.length\n    grades_copy = grades_copy.reduce(:+) / grades_copy",
  "  grades.sort_by!(&:abs)\n  return grades[4..-1].map { |g| g > 0 ? \"A+\" : g ==\
    \ 0 ? \"E\" : g < 0 ? \"D-\" : g < 3.0 ? \"C\" : g < 2.0 ? \"B\" : g < 1.70 ?\
    \ \"A\" : g < 1.0 ? \"A-\" : g < 0.7 ? \"B+\" : g < 0.3 ? \"B-\" : g < 0.10 ?\
    \ \"B+\" : g < 0.08 ? \"B-\" : g < 0.07 ? \"B+\" : g < 0.06 ? \"B-\" : g < 0.05\
    \ ? \"B+\" : g < 0.04 ? \"B-\" : g < 0.04 ? \"B+\" : g < 0.03 ? \"B-\" : g < 0.03\
    \ ? \"B+\" : g < 0.03 ? \"B-\" : g < 0.03 ? \"B+\" : g < 0.03 ? \"B-\" : g < 0.03\
    \ ? \"B+\" : g < 0.03 ? \"B-\" : g < 0.03 ? \"B+\" : g < 0.03 ? \"B-\" : g < 0.03\
    \ ? \"B+\" : g < 0.03 ? \"B-\" : g < 0.03 ? \"B+\" : g < 0.03 ? \"B-\" : g < 0.03\
    \ ? \"B+\" : g < 0.03 ? \"B-\" : g < 0.03 ? \"B+\" : g < 0.03 ? \"B-\" : g < 0.03\
    \ ? \"B+\" : g < 0.03 ? \"B-\" : g < 0.03 ? \"B+\" : g < 0.03 ? \"B-\" : g < 0.03\
    \ ? \"B+\" : g < 0.03 ? \"B-\" : g < 0.03 ? \"B+\" : g < 0.03 ? \"B-\" : g < 0.03\
    \ ? \"B+\" : g < 0.03 ? \"B-\" : g < 0.03 ? \"B+\" : g < 0.03 ? \"B-\" : g < 0.03\
    \ ? \"B+\" : g < 0.03 ? \"B-\" : g < 0.03 ? \"B+\" : g < 0.03 ? \"B-\" : g < 0.03\
    \ ? \"B+\" : g < 0.03 ? \"B-\" : g < 0.03 ? \"B+\" : g < 0.03 ? \"B-\" : g < 0.03\
    \ ? \"B+\" : g < 0.03 ? \"B-\" : g < 0.03 ? \"B+\" : g < 0.03 ? \"B-\" : g < 0.03\
    \ ? \"B+\" : g < 0.03 ? \"B-\" : g < 0.03 ? \"B+\" : g < 0.03 ? \"B-\" : g < 0.03\
    \ ? \"B+\" : g < 0.03 ? \"B-\" : g < 0.03 ? \"B+\" : g < 0.03 ? \"B-\" : g < 0.03\
    \ ? \"", "    grades << \"0.0\" if grades.last.to_f <= 0 # if the last grade is\
    \ <= 0 then treat it as 0\n    grades.uniq! # Remove duplicate grades\n    grades.map\
    \ do |g|\n        grade = g / grades.max\n        if grade < 4 \n            \"\
    A+\"\n        elsif grade < 4.7\n            \"A\"\n        elsif grade < 4.3\
    \ \n            \"A-\"\n        elsif grade < 4\n            \"B+\"\n        elsif\
    \ grade < 4.7 \n            \"B\"\n        elsif grade < 4.3 \n            \"\
    B-\"\n        elsif grade < 4\n            \"C+\"\n        elsif grade < 4.7 \n\
    \            \"C\"\n        elsif grade < 4.3 \n            \"C-\"\n        elsif\
    \ grade < 4\n            \"D+\"\n        elsif grade < 4.7 \n            \"D\"\
    \n        elsif grade < 4.3 \n            \"D-\"\n        elsif grade < 4\n  \
    \          \"E\"\n        end\n    end\nend\n</code>\n<|/ a tags=arrays,ruby,conditional-statements,functional-programming\
    \ |>\n<| a dscore=2 |>\nThe simplest approach would be to sort the array and calculate\
    \ the grade letter by letter.\n<code>", "  grades.map!{|a| a if a>0 ? a : \"0\"\
    *a.length}\n  grades.map!{|a| a if a>0 ? \"A+\" : \"A\"}\n  grades.map!{|a| a\
    \ if a>0 ? \"B+\" : \"B\"}\n  grades.map!{|a| a if a>0 ? \"B-\" : \"B\"}\n  grades.map!{|a|\
    \ a if a>0 ? \"C+\" : \"C\"}\n  grades.map!{|a| a if a>0 ? \"C\" : \"C-\"}\n \
    \ grades.map!{|a| a if a>0 ? \"D+\" : \"D\"}\n  grades.map!{|a| a if a>0 ? \"\
    D\" : \"D-\"}\n  grades.map!{|a| a if a>0 ? \"E\" : \"E\"}\nend\n</code>\n<|/\
    \ a dscore=2 |>\n<| c |>\nAwesome thanks, can you explain a little more what the\
    \ .map!{|a| a if a>0 ? \"A+\" : \"A\"} does?\n<|/ c |>\n<| c |>\nThat line is\
    \ a ternary operator that returns `\"A+\"` when `a` > 0 and `\"A\"` otherwise.\
    \ The `a if` part is saying if the value is greater than 0, then return `\"A+\"\
    `, else return `\"A\"`. So all values greater than 0 will be returned, otherwise\
    \ `\"A\"`.\n<|/ c |>\n<| c |>\nI thought the teacher wanted only letter grades.\
    \  So you can not have \"C+\" and \"C\".  You should change the first ternary\
    \ operator in the grade equation to a conditional operator such as '<=>'.\n<|/\
    \ c |>\n<| c |>\nYeah, I was thinking `<=>` but forgot to make it part of the\
    \ answer. `<=>` is also a great way to return booleans in Ruby. `<=>` will return\
    \ a value of `-1` if `a < 0` or a value of `1` if `a > 0`. So we can replace all\
    \ ternary operators with just one `<=>` operator. `grades.map!{|a| a if a>0 ?\
    \ \"A+\" : a <=> 0 }`\n<|/ c |>\n<| c |>\nThis is nice, but will fail for `numerical_letter_grade([-1.7,\
    \ -1.3, 1.3, 1.7])`\n<|/ c |>\n<| a |>\nThis code seems to work\n<code>", "  grades.reverse\n\
    \  grades_sorted = grades.sort\n  grade_letters = grades_sorted.map { |g| letter_grade(g)\
    \ }\n  grades_sorted.reverse\n  grades_sorted.join(\" \")\n  grades_sorted.join(\"\
    , \") + \"\\n\" + grade_letters\nend", '    return ["A+", "A","A-","B+", "B",
    "B-","C+", "C", "C-", "D+", "D", "D-", "E"]', "  grades.map { |g| \n    case g\n\
    \    when 0..7 then 'A'\n    when 8..10 then 'B'\n    when 11..13 then 'C'\n \
    \   when 14..16 then 'D'\n    when 17..19 then 'E'\n    else raise \"Invalid grade\
    \ #{g}\"\n    end\n  }.join(',')\nend", '  grades = grades.sort', "  grades.each\
    \ do |grade|\n    if grade >= 4.0 and grade < 4.7\n      grade = \"A+\"\n    elsif\
    \ grade >= 4.7 and grade < 5.3\n      grade = \"A\"\n    elsif grade >= 5.3 and\
    \ grade < 5.7\n      grade = \"A-\"\n    elsif grade >= 5.7 and grade < 6.2\n\
    \      grade = \"B+\"\n    elsif grade >= 6.2 and grade < 6.7\n      grade = \"\
    B\"\n    elsif grade >= 6.7 and grade < 7.2\n      grade = \"B-\"\n    elsif grade\
    \ >= 7.2 and grade < 7.7\n      grade = \"C+\"\n    elsif grade >= 7.7 and grade\
    \ < 8.3\n      grade = \"C\"\n    elsif grade >= 8.3 and grade < 8.7\n      grade\
    \ = \"C-\"\n    elsif grade >= 8.7 and grade < 9.2\n      grade = \"D+\"\n   \
    \ elsif grade >= 9.2 and grade < 9.7\n      grade = \"D\"\n    elsif grade >=\
    \ 9.7 and grade < 10.3\n      grade = \"D-\"\n    elsif grade >= 10.3 and grade\
    \ < 10.7\n      grade = \"E\"\n    else\n      grade = \"F\"\n    end\n  end\n\
    end\n</code>\n<|/ q dscore=0 |>\n<| c |>\nWhat about you start by writing something\
    \ yourself? It's not that difficult. How could you possibly expect a full solution\
    \ here on SO?\n<|/ c |>\n<| c |>\nI'm voting to close this question as off-topic\
    \ because SO is not a code writing service.\n<|/ c |>\n<| c |>\nHi, I have written\
    \ this code to solve the problem but it doesn't work and I don't know where is\
    \ the problem and I wanted to ask people here because I'm not looking for an answer\
    \ but for help because I don't know what else to do. Thank you for your help.\n\
    <|/ c |>\n<| a tags=ruby |>\nThe reason it didn't work for you is because it was\
    \ trying to compare strings with integers, and you had the variable assignment\
    \ backwards.\nYou have:\n<code>\ngrade = \"A\"\n</code>\nIt should be:\n<code>\n\
    grade = \"A+\"\n</code>\nAlso, since you had a method called \"grades\" I changed\
    \ the line in the method from grades.each to grades.each do |grade|", "  results\
    \ = []\n  \n  grade_sum = grades.inject(0) { |sum, g| sum + g }\n  \n  grades.each_with_index\
    \ do |grade, index|\n    results << (index == grades.length - 1) ? \"F\" : \n\
    \      case grade \n      when 0...3.0 then \"D-\" \n      when 3.0...3.6 then\
    \ \"C-\"\n      when 3.7...3.9 then \"C\"\n      when 4.0...4.4 then \"B+\"\n\
    \      when 4.5...5.0 then \"B\"\n      when 5.1...5.5 then \"B-\"\n      when\
    \ 5.6...6.0 then \"A+\"\n      when 6.1...6.5 then \"A\"\n      when 6.6...7.0\
    \ then \"A-\"\n      when 7.1...7.5 then \"A\"\n      when 7.6..> 8.0 then \"\
    B+\"\n      else\n        ((grade / grade_sum) * 100).round.to_i.to_s + \".0\"\
    \n      end\n  end\n  \n  results\nend", "  grades = grades.sort\n  i = 0\n  grades.each\
    \ do |grade|\n    if grade > 0 \n      i+=1\n      letter = if grade == 0.0 then\
    \ \"E\" \n                elsif grade > 3.3 then \"A-\" \n                elsif\
    \ grade > 3.7 then \"A+\" \n                elsif grade > 3.0 then \"A\" \n  \
    \              elsif grade > 2.3 then \"A-\" \n                elsif grade > 2.7\
    \ then \"A+\" \n                elsif grade > 2.0 then \"A\" \n              \
    \  elsif grade > 1.7 then \"A+\" \n                elsif grade > 1.3 then \"A\"\
    \ \n                elsif grade > 1.0 then \"A+\" \n                else \"A+\"\
    \ \n                end \n      letters << letter\n    end\n  end\n  letters\n\
    end", "  grades.map do |gpa| \n    if (gpa < 4.0)\n      \"A+\"\n    elsif (gpa\
    \ > 3.7)\n      \"A\"\n    elsif (gpa > 3.3)\n      \"A-\"\n    elsif (gpa > 3.0)\n\
    \      \"B+\"\n    elsif (gpa > 2.7)\n      \"B\"\n    elsif (gpa > 2.3)\n   \
    \   \"B-\"\n    elsif (gpa > 2.0)\n      \"C+\"\n    elsif (gpa > 1.7)\n     \
    \ \"C\"\n    elsif (gpa > 1.3)\n      \"C-\"\n    elsif (gpa > 1.0)\n      \"\
    D+\"\n    elsif (gpa > 0.7)\n      \"D\"\n    elsif (gpa > 0.0)\n      \"D-\"\n\
    \    else\n      \"E\"\n    end\n  end \nend\n</code>\n<|/ a tags=ruby,methods,arrays\
    \ dscore=0 |>\n<| c |>\nHow about `grades.map { |g| [g >= 4.0 ? \"A+\" : (g >=\
    \ 3.7 ? \"A\" : (g >= 3.3 ? \"A-\" : (g >= 3.0 ? \"B+\" : (g >= 2.7 ? \"B\" :\
    \ (g >= 2.3 ? \"B-\" : (g >= 2.0 ? \"C+\" : (g >= 1.7 ? \"C\" : (g >= 1.3 ? \"\
    C-\" : (g >= 1.0 ? \"D+\" : (g >= 0.7 ? \"D\" : (g >= 0.0 ? \"D-\" : \"E\"))))))))\
    \ } .join(' ')`\n<|/ c |>\n<| c |>\nThe ternary operator is a great way to reduce\
    \ a long line of code! Thank you!\n<|/ c |>\n<| c |>\nThat's actually a great\
    \ way to refactor that into `(g >= 4.0 ? \"A+\" : (g >= 3.7 ? \"A\" : (g >= 3.3\
    \ ? \"A-\" : (g >= 3.0 ? \"B+\" : (g >= 2.7 ? \"B\" : (g >= 2.3 ? \"B-\" : (g\
    \ >= 2.0 ? \"C+\" : (g >= 1.7 ? \"C\" : (g >= 1.3 ? \"C-\" : (g >= 1.0 ? \"D+\"\
    \ : (g >= 0.7 ? \"D\" : (g >= 0.0 ? \"D-\" : \"E\")))))))) ).join(' ')`\n<|/ c\
    \ |>\n<| a |>\nTry this:\n<code>", "    grades.each do |grade|\n        if grade\
    \ > 4.0 \n            grade = \"A+\"\n        elsif grade > 3.7 \n           \
    \ grade = \"A\"\n        elsif grade > 3.3\n            grade = \"A-\"\n     \
    \   elsif grade > 3.0 \n            grade = \"B+\"\n        elsif grade > 2.7\
    \ \n            grade = \"B\"\n        elsif grade > 2.3 \n            grade =\
    \ \"B-\"\n        elsif grade > 2.0 \n            grade = \"C+\"\n        elsif\
    \ grade > 1.7 \n            grade = \"C\"\n        elsif grade > 1.3 \n      \
    \      grade = \"C-\"\n        elsif grade > 1.0 \n            grade = \"D+\"\n\
    \        elsif grade > 0.7 \n            grade = \"D\"\n        elsif grade >\
    \ 0.0 \n            grade = \"D-\"\n        else\n            grade = \"E\"\n\
    \        end\n    end\n    return grades\nend\n</cell>\n<cell>", "    grade_vals\
    \ = grades\n    grade_vals.reverse!\n    grades.each_with_index do |value, index|\n\
    \      grade_vals.delete_at(index+1)\n      if value < 3.7\n        grade_vals\
    \ << A+\n      elsif value >= 3.7 and value <= 4.0 \n        grade_vals << A\n\
    \      elsif value >= 4.0 and value <= 4.9\n        grade_vals << A-\n      elsif\
    \ value >= 4.9 and value <= 5.8\n        grade_vals << B+\n      elsif value >=\
    \ 5.8 and value <= 6.8\n        grade_vals << B\n      elsif value >= 6.8 and\
    \ value <= 7.8\n        grade_vals << B-\n      elsif value >= 7.8 and value <=\
    \ 8.8\n        grade_vals << C+\n      elsif value >= 8.8 and value <= 9.8\n \
    \       grade_vals << C\n      elsif value >= 9.8 and value <= 10.8\n        grade_vals\
    \ << C-\n      elsif value >= 10.8\n        grade_vals << D+\n      elsif value\
    \ >= 11.8\n        grade_vals << D\n      elsif value <= 0.0\n        grade_vals\
    \ << D-\n      else\n        grade_vals << E\n      end\n    end\n    grade_vals.reverse!\n\
    end\n</code>\n<|/ q dscore=0 |>\n<| c |>\nI guess you mean `A` instead of `A+`?\
    \ And you should consider doing `elsif value >= 4.9 and value <= 5.8` instead\
    \ of `elsif value >= 4.9 and value <= 5.8` etc.\n<|/ c |>\n<| c |>\nYes, that\
    \ and I would consider doing `grades.each_with_index { |v, i| grades.delete_at(i+1)\
    \ }` instead of `grades.each_with_index do |v, index|; grades.delete_at(index+1)`\n\
    <|/ c |>\n<| c |>\nYou should consider doing `A = [[:A,10], [:B,9], [:C,8], [:D,7],\
    \ [:E,6]].sample` instead of `A = [:A,10]`.\n<|/ c |>\n<| c |>\nYou are doing\
    \ a lot of unnecessary things. Look at my answer (I've edited it).\n<|/ c |>\n\
    <| c |>", "    grade_letter_grades = []\n    \n    for grade in grades:\n    \
    \    letter_grade = \"\"\n        if grade >= 3.0:\n            letter_grade =\
    \ \"A+\"\n        elif grade > 2.0 and grade < 3.0:\n            letter_grade\
    \ = \"A-\"\n        elif grade > 1.0 and grade < 2.0:\n            letter_grade\
    \ = \"B+\"\n        elif grade > 0.7 and grade < 1.0:\n            letter_grade\
    \ = \"B\"\n        elif grade > 0.0 and grade < 0.7:\n            letter_grade\
    \ = \"B-\"\n        elif grade > -0.0 and grade < 0.0:\n            letter_grade\
    \ = \"C+\"\n        elif grade > -0.7 and grade < -0.0:\n            letter_grade\
    \ = \"C\"\n        elif grade > -1.0 and grade < -0.7:\n            letter_grade\
    \ = \"C-\"\n        elif grade > -2.0 and grade < -1.0:\n            letter_grade\
    \ = \"D+\"\n        elif grade > -3.0 and grade < -2.0:\n            letter_grade\
    \ = \"D\"\n        elif grade < -3.0:\n            letter_grade = \"D-\"\n   \
    \     elif grade < 0.0:\n            letter_grade = \"E\"\n        \n        grade_letter_grades.append(letter_grade)",
  "  grades = grades.sort.reverse\n  grades.each {|grade| puts (\"%.2f\" % grade).rjust(3,'\
    \ ').ljust(3, ' ') + (\"%.2f\" % grade).to_s.rjust(2,' ').ljust(2, ' ')}\nend",
  "  return letterGrade(grades)\nend", "  grades_plus_one = grades.sum + 1\n  grades_minus_one\
    \ = grades.sum - 1\n  grades_plus_two = grades_plus_one * 2 + grades.sum\n  grades_minus_two\
    \ = grades_minus_one * 2 - grades.sum\n  grades_plus_three = grades_plus_two *\
    \ 3 + grades.sum\n  grades_minus_three = grades_minus_two * 3 - grades.sum\n \
    \ grades_plus_four = grades_plus_three * 4 + grades.sum\n  grades_minus_four =\
    \ grades_minus_three * 4 - grades.sum\n  grades_plus_five = grades_plus_four *\
    \ 5 + grades.sum\n  grades_minus_five = grades_minus_four * 5 - grades.sum\n \
    \ grades_plus_six = grades_plus_five * 6 + grades.sum\n  grades_minus_six = grades_minus_five\
    \ * 6 - grades.sum\n  grades_plus_seven = grades_plus_six * 7 + grades.sum\n \
    \ grades_minus_seven = grades_minus_six * 7 - grades.sum\n  grades_plus_eight\
    \ = grades_plus_seven * 8 + grades.sum\n  grades_minus_eight = grades_minus_seven\
    \ * 8 - grades.sum\n  grades_plus_nine = grades_plus_eight * 9 + grades.sum\n\
    \  grades_minus_nine = grades_minus_eight * 9 - grades.sum\n  grades_plus_ten\
    \ = grades_plus_nine * 10 + grades.sum\n  grades_minus_ten = grades_minus_nine\
    \ * 10 - grades.sum\n  grades_plus_eleven = grades_plus_ten * 11 + grades.sum\n\
    \  grades_minus_eleven = grades_minus_ten * 11 - grades.sum\n  grades_plus_twelve\
    \ = grades_plus_eleven * 12 + grades.sum\n  grades_minus_twelve = grades_minus_eleven\
    \ * 12 - grades.sum\n  grades_plus_thirteen = grades_plus_twelve * 13 + grades.sum\n\
    \  grades_minus_thirteen = grades_minus_twelve * 13 - grades.sum\n  grades_plus_fourteen\
    \ = grades_plus_thirteen * 14 + grades.sum\n  grades_minus_fourteen = grades_minus_thirteen\
    \ * 14", "  if grades.empty?\n    \"E\"\n  else\n    (grades.min..grades.max).reduce(:+).map\
    \ do |grade|\n      case grade\n      when 0\n        \"D\"\n      when 1\n  \
    \      \"C\"\n      when 2\n        \"B-\"\n      when 3\n        \"B-\"\n   \
    \   when 4\n        \"B-\"\n      when 5\n        \"B-\"\n      when 6\n     \
    \   \"A-\"\n      when 7\n        \"A-\"\n      when 8\n        \"A-\"\n     \
    \ when 9\n        \"A+\"\n      when 10\n        \"A+\"\n      when 11\n     \
    \   \"A+\"\n      when 12\n        \"A+\"\n      when 13\n        \"A\"\n    \
    \  when 14\n        \"A\"\n      when 15\n        \"A\"\n      when 16\n     \
    \   \"A\"\n      when 17\n        \"A\"\n      when 18\n        \"A\"\n      when\
    \ 19\n        \"A\"\n      when 20\n        \"A\"\n      when 21\n        \"A\"\
    \n      when 22\n        \"A\"\n      when 23\n        \"A\"\n      when 24\n\
    \        \"A\"\n      when 25\n        \"A\"\n      when 26\n        \"A\"\n \
    \     when 27\n        \"A\"\n      when 28\n        \"A\"\n      when 29\n  \
    \      \"A\"\n      when 30\n        \"A\"\n      when 31\n        \"A\"\n   \
    \   else\n        \"?\" end\n    end\n  end\nend"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
